--Testcase 1:
SET datestyle=ISO;
--Testcase 2:
SET timezone='Japan';
--Testcase 3:
CREATE EXTENSION pgspider_core_fdw;
--Testcase 4:
CREATE SERVER pgspider_core_svr FOREIGN DATA WRAPPER pgspider_core_fdw OPTIONS (host '127.0.0.1');
--Testcase 5:
CREATE USER MAPPING FOR CURRENT_USER SERVER pgspider_core_svr;
----------------------------------------------------------
-- test structure
-- PGSpider Top Node -+-> Child PGSpider Node -> Data source
--                    +-> Data source
-- stub functions are provided by pgspider_fdw and/or Data source FDW (mix use)
----------------------------------------------------------
-- Data source: mysql
--Testcase 6:
CREATE FOREIGN TABLE s3 (id int, tag1 text, value1 float, value2 int, value3 float, value4 int, str1 text, str2 text, __spd_url text) SERVER pgspider_core_svr;
--Testcase 7:
CREATE FOREIGN TABLE ftextsearch (id int, content text, __spd_url text) SERVER pgspider_core_svr;
--Testcase 8:
CREATE EXTENSION pgspider_fdw;
--Testcase 9:
CREATE SERVER pgspider_svr FOREIGN DATA WRAPPER pgspider_fdw OPTIONS (host '127.0.0.1', port '5433', dbname 'postgres');
--Testcase 10:
CREATE USER MAPPING FOR CURRENT_USER SERVER pgspider_svr;
--Testcase 11:
CREATE FOREIGN TABLE s3__pgspider_svr__0 (id int, tag1 text, value1 float, value2 int, value3 float, value4 int, str1 text, str2 text, __spd_url text) SERVER pgspider_svr OPTIONS (table_name 's31mysql');
--Testcase 12:
CREATE EXTENSION mysql_fdw;
--Testcase 13:
CREATE SERVER mysql_svr FOREIGN DATA WRAPPER mysql_fdw;
--Testcase 14:
CREATE USER MAPPING FOR CURRENT_USER SERVER mysql_svr OPTIONS(username 'root', password 'Mysql_1234');
--Testcase 15:
CREATE FOREIGN TABLE s3__mysql_svr__0 (id int, tag1 text, value1 float, value2 int, value3 float, value4 int, str1 text, str2 text) SERVER mysql_svr OPTIONS(dbname 'test', table_name 's32');
--Testcase 16:
CREATE FOREIGN TABLE ftextsearch__mysql_svr__0 (id int, content text) SERVER mysql_svr OPTIONS(dbname 'test', table_name 'ftextsearch2');
--Testcase 17:
CREATE FOREIGN TABLE ftextsearch__pgspider_svr__0 (id int, content text) SERVER pgspider_svr OPTIONS (table_name 'ftextsearch1');
-- s3 (value1 as float8, value2 as bigint)
--Testcase 18:
\d s3;
                          Foreign table "public.s3"
  Column   |       Type       | Collation | Nullable | Default | FDW options 
-----------+------------------+-----------+----------+---------+-------------
 id        | integer          |           |          |         | 
 tag1      | text             |           |          |         | 
 value1    | double precision |           |          |         | 
 value2    | integer          |           |          |         | 
 value3    | double precision |           |          |         | 
 value4    | integer          |           |          |         | 
 str1      | text             |           |          |         | 
 str2      | text             |           |          |         | 
 __spd_url | text             |           |          |         | 
Server: pgspider_core_svr

--Testcase 19:
SELECT * FROM s3 ORDER BY 1,2,3,4,5,6,7,8,9;
 id | tag1 | value1 | value2 | value3 | value4 |   str1    |   str2    |        __spd_url         
----+------+--------+--------+--------+--------+-----------+-----------+--------------------------
  0 | a    |    0.1 |    100 |   -0.1 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  1 | a    |    0.2 |    100 |   -0.2 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  2 | a    |    0.3 |    100 |   -0.3 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  3 | b    |    1.1 |    200 |   -1.1 |   -200 | ---XYZ--- |    XYZ    | /mysql_svr/
  4 | b    |    2.2 |    200 |   -2.2 |   -200 | ---XYZ--- |    XYZ    | /mysql_svr/
  5 | b    |    3.3 |    200 |   -3.3 |   -200 | ---XYZ--- |    XYZ    | /mysql_svr/
(6 rows)

-- select float8() (not pushdown, remove float8, explain)
--Testcase 20:
EXPLAIN VERBOSE
SELECT float8(value1), float8(value2), float8(value3), float8(value4) FROM s3 ORDER BY 1,2,3,4;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=32)
   Output: value1, (float8(value2)), value3, (float8(value4))
   Sort Key: s3.value1, (float8(s3.value2)), s3.value3, (float8(s3.value4))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=32)
         Output: value1, float8(value2), value3, float8(value4)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, `value2`, `value3`, `value4` FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, value2, value3, value4 FROM public.s31mysql
(12 rows)

-- select float8() (not pushdown, remove float8, result)
--Testcase 21:
SELECT float8(value1), float8(value2), float8(value3), float8(value4) FROM s3 ORDER BY 1,2,3,4;
 float8 | float8 | float8 | float8 
--------+--------+--------+--------
    0.1 |    100 |   -0.1 |   -100
    0.2 |    100 |   -0.2 |   -100
    0.3 |    100 |   -0.3 |   -100
    1.1 |    200 |   -1.1 |   -200
    2.2 |    200 |   -2.2 |   -200
    3.3 |    200 |   -3.3 |   -200
(6 rows)

-- select abs (builtin function, explain)
--Testcase 22:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 ORDER BY 1,2,3,4;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=927.75..944.81 rows=6826 width=24)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Sort Key: (abs(s3.value1)), (abs(s3.value2)), (abs(s3.value3)), (abs(s3.value4))
   ->  Foreign Scan on public.s3  (cost=200.00..493.04 rows=6826 width=24)
         Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT abs(`value1`), abs(`value2`), abs(`value3`), abs(`value4`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM public.s31mysql
(12 rows)

-- select abs (buitin function, result)
--Testcase 23:
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 ORDER BY 1,2,3,4;
         abs         | abs |         abs         | abs 
---------------------+-----+---------------------+-----
 0.10000000149011612 | 100 | 0.10000000149011612 | 100
 0.20000000298023224 | 100 | 0.20000000298023224 | 100
 0.30000001192092896 | 100 | 0.30000001192092896 | 100
   1.100000023841858 | 200 |   1.100000023841858 | 200
   2.200000047683716 | 200 |   2.200000047683716 | 200
   3.299999952316284 | 200 |   3.299999952316284 | 200
(6 rows)

-- select abs (builtin function, not pushdown constraints, explain)
--Testcase 24:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1,2,3,4;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=958.79..975.77 rows=6792 width=24)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Sort Key: (abs(s3.value1)), (abs(s3.value2)), (abs(s3.value3)), (abs(s3.value4))
   ->  Foreign Scan on public.s3  (cost=200.00..526.49 rows=6792 width=24)
         Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT abs(`value1`), abs(`value2`), abs(`value3`), abs(`value4`), `value2` FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT abs(value1), abs(value2), abs(value3), abs(value4), value2 FROM public.s31mysql
(13 rows)

-- select abs (builtin function, not pushdown constraints, result)
--Testcase 25:
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1,2,3,4;
        abs        | abs |        abs        | abs 
-------------------+-----+-------------------+-----
 1.100000023841858 | 200 | 1.100000023841858 | 200
 2.200000047683716 | 200 | 2.200000047683716 | 200
 3.299999952316284 | 200 | 3.299999952316284 | 200
(3 rows)

-- select abs (builtin function, pushdown constraints, explain)
--Testcase 26:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE value2 != 200 ORDER BY 1,2,3,4;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=941.38..958.36 rows=6792 width=24)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Sort Key: (abs(s3.value1)), (abs(s3.value2)), (abs(s3.value3)), (abs(s3.value4))
   ->  Foreign Scan on public.s3  (cost=200.00..509.09 rows=6792 width=24)
         Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT abs(`value1`), abs(`value2`), abs(`value3`), abs(`value4`) FROM `test`.`s32` WHERE ((`value2` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM public.s31mysql WHERE ((value2 <> 200))
(12 rows)

-- select abs (builtin function, pushdown constraints, result)
--Testcase 27:
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE value2 != 200 ORDER BY 1,2,3,4;
         abs         | abs |         abs         | abs 
---------------------+-----+---------------------+-----
 0.10000000149011612 | 100 | 0.10000000149011612 | 100
 0.20000000298023224 | 100 | 0.20000000298023224 | 100
 0.30000001192092896 | 100 | 0.30000001192092896 | 100
(3 rows)

-- select log (builtin function, need to swap arguments, numeric cast, explain)
-- log_<base>(v) : postgresql (base, v), influxdb (v, base), mysql (base, v)
--Testcase 28:
EXPLAIN VERBOSE
SELECT value1, log(value1::numeric, value2::numeric) FROM s3 WHERE value1 != 1 ORDER BY 1,2;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=924.40..941.38 rows=6792 width=40)
   Output: value1, (log((value1)::numeric, (value2)::numeric))
   Sort Key: s3.value1, (log((s3.value1)::numeric, (s3.value2)::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..492.11 rows=6792 width=40)
         Output: value1, (log((value1)::numeric, (value2)::numeric))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, log(`value1`, `value2`) FROM `test`.`s32` WHERE ((`value1` <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, log(value1::numeric, value2::numeric) FROM public.s31mysql WHERE ((value1 <> 1::double precision))
(12 rows)

-- select log (builtin function, need to swap arguments, numeric cast, result)
--Testcase 29:
SELECT value1, log(value1::numeric, value2::numeric) FROM s3 WHERE value1 != 1 ORDER BY 1,2;
 value1 |         log         
--------+---------------------
    0.1 | -2.0000000129429845
    0.2 |  -2.861353142638945
    0.3 |  -3.824978705027617
    1.1 |  55.590244111799876
    2.2 |   6.719852571927687
    3.3 |   4.437739945920098
(6 rows)

-- select log (builtin function, need to swap arguments, float8, explain)
--Testcase 30:
EXPLAIN VERBOSE
SELECT value1, log(value1::numeric, 0.1) FROM s3 WHERE value1 != 1 ORDER BY 1,2;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=907.42..924.40 rows=6792 width=40)
   Output: value1, (log((value1)::numeric, 0.1))
   Sort Key: s3.value1, (log((s3.value1)::numeric, 0.1))
   ->  Foreign Scan on public.s3  (cost=200.00..475.12 rows=6792 width=40)
         Output: value1, (log((value1)::numeric, 0.1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, log(`value1`, 0.1) FROM `test`.`s32` WHERE ((`value1` <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, log(value1::numeric, 0.1) FROM public.s31mysql WHERE ((value1 <> 1::double precision))
(12 rows)

-- select log (builtin function, need to swap arguments, float8, result)
--Testcase 31:
SELECT value1, log(value1::numeric, 0.1) FROM s3 WHERE value1 != 1 ORDER BY 1,2;
 value1 |         log         
--------+---------------------
    0.1 |   1.000000006471492
    0.2 |   1.430676571319472
    0.3 |   1.912489352513808
    1.1 | -24.158852434150408
    2.2 | -2.9203672201537807
    3.3 | -1.9285884818027121
(6 rows)

-- select log (builtin function, need to swap arguments, bigint, explain)
--Testcase 32:
EXPLAIN VERBOSE
SELECT value1, log(value2::numeric, 3) FROM s3 WHERE value1 != 1 ORDER BY 1,2;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=907.42..924.40 rows=6792 width=40)
   Output: value1, (log((value2)::numeric, '3'::numeric))
   Sort Key: s3.value1, (log((s3.value2)::numeric, '3'::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..475.12 rows=6792 width=40)
         Output: value1, (log((value2)::numeric, '3'::numeric))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, log(`value2`, 3) FROM `test`.`s32` WHERE ((`value1` <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, log(value2::numeric, 3::numeric) FROM public.s31mysql WHERE ((value1 <> 1::double precision))
(12 rows)

-- select log (builtin function, need to swap arguments, bigint, result)
--Testcase 33:
SELECT value1, log(value2::numeric, 3) FROM s3 WHERE value1 != 1 ORDER BY 1,2;
 value1 |         log         
--------+---------------------
    0.1 | 0.23856062735983122
    0.2 | 0.23856062735983122
    0.3 | 0.23856062735983122
    1.1 | 0.20735116692035352
    2.2 | 0.20735116692035352
    3.3 | 0.20735116692035352
(6 rows)

-- select log (builtin function, need to swap arguments, mix type, explain)
--Testcase 34:
EXPLAIN VERBOSE
SELECT value1, log(value1::numeric, value2::numeric) FROM s3 WHERE value1 != 1 ORDER BY 1,2;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=924.40..941.38 rows=6792 width=40)
   Output: value1, (log((value1)::numeric, (value2)::numeric))
   Sort Key: s3.value1, (log((s3.value1)::numeric, (s3.value2)::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..492.11 rows=6792 width=40)
         Output: value1, (log((value1)::numeric, (value2)::numeric))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, log(`value1`, `value2`) FROM `test`.`s32` WHERE ((`value1` <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, log(value1::numeric, value2::numeric) FROM public.s31mysql WHERE ((value1 <> 1::double precision))
(12 rows)

-- select log (builtin function, need to swap arguments, mix type, result)
--Testcase 35:
SELECT value1, log(value1::numeric, value2::numeric) FROM s3 WHERE value1 != 1 ORDER BY 1,2;
 value1 |         log         
--------+---------------------
    0.1 | -2.0000000129429845
    0.2 |  -2.861353142638945
    0.3 |  -3.824978705027617
    1.1 |  55.590244111799876
    2.2 |   6.719852571927687
    3.3 |   4.437739945920098
(6 rows)

-- select log(v) -- built in function
-- log(v): postgreSQL base 10 logarithm
--Testcase 36:
EXPLAIN VERBOSE
SELECT log(value2) FROM s3 WHERE value1 != 1 ORDER BY 1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=907.42..924.40 rows=6792 width=8)
   Output: (log((value2)::double precision))
   Sort Key: (log((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..475.12 rows=6792 width=8)
         Output: (log((value2)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT log10(`value2`) FROM `test`.`s32` WHERE ((`value1` <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log(value2) FROM public.s31mysql WHERE ((value1 <> 1::double precision))
(12 rows)

--Testcase 37:
SELECT log(value2) FROM s3 WHERE value1 != 1 ORDER BY 1;
        log         
--------------------
                  2
                  2
                  2
 2.3010299956639813
 2.3010299956639813
 2.3010299956639813
(6 rows)

-- select log (builtin function, explain)
--Testcase 38:
EXPLAIN VERBOSE
SELECT log(value1), log(value2), log(0.5) FROM s3 ORDER BY 1,2,3;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=910.68..927.75 rows=6826 width=48)
   Output: (log(value1)), (log((value2)::double precision)), '-0.3010299956639812'::numeric
   Sort Key: (log(s3.value1)), (log((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=48)
         Output: (log(value1)), (log((value2)::double precision)), '-0.3010299956639812'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT log10(`value1`), log10(`value2`), (-0.3010299956639812) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log(value1), log(value2), (-0.3010299956639812) FROM public.s31mysql
(12 rows)

-- select log (builtin function, result)
--Testcase 39:
SELECT log(value1), log(value2), log(0.5) FROM s3 ORDER BY 1,2,3;
         log          |        log         |         log         
----------------------+--------------------+---------------------
   -0.999999993528508 |                  2 | -0.3010299956639812
  -0.6989699978645267 |                  2 | -0.3010299956639812
  -0.5228787280230257 |                  2 | -0.3010299956639812
 0.041392694571304324 | 2.3010299956639813 | -0.3010299956639812
  0.34242269023528554 | 2.3010299956639813 | -0.3010299956639812
   0.5185139336025012 | 2.3010299956639813 | -0.3010299956639812
(6 rows)

-- select log (builtin function, not pushdown constraints, explain)
--Testcase 40:
EXPLAIN VERBOSE
SELECT log(value1), log(value2), log(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.98 rows=34 width=48)
   Output: (log(value1)), (log((value2)::double precision)), '-0.3010299956639812'::numeric
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT log10(`value1`), log10(`value2`), (-0.3010299956639812), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT log(value1), log(value2), (-0.3010299956639812), value2 FROM public.s31mysql
(8 rows)

-- select log (builtin function, not pushdown constraints, result)
--Testcase 41:
SELECT log(value1), log(value2), log(0.5) FROM s3 WHERE to_hex(value2) = '64';
         log         | log |         log         
---------------------+-----+---------------------
  -0.999999993528508 |   2 | -0.3010299956639812
 -0.6989699978645267 |   2 | -0.3010299956639812
 -0.5228787280230257 |   2 | -0.3010299956639812
(3 rows)

-- select log (builtin function, pushdown constraints, explain)
--Testcase 42:
EXPLAIN VERBOSE
SELECT log(value1), log(value2), log(0.5) FROM s3 WHERE value2 != 200;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..492.11 rows=6792 width=48)
   Output: (log(value1)), (log((value2)::double precision)), '-0.3010299956639812'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT log10(`value1`), log10(`value2`), (-0.3010299956639812) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT log(value1), log(value2), (-0.3010299956639812) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select log (builtin function, pushdown constraints, result)
--Testcase 43:
SELECT log(value1), log(value2), log(0.5) FROM s3 WHERE value2 != 200;
         log         | log |         log         
---------------------+-----+---------------------
  -0.999999993528508 |   2 | -0.3010299956639812
 -0.6989699978645267 |   2 | -0.3010299956639812
 -0.5228787280230257 |   2 | -0.3010299956639812
(3 rows)

-- select log (builtin function, log in constraints, explain)
--Testcase 44:
EXPLAIN VERBOSE
SELECT log(value1), log(value2), log(0.5) FROM s3 WHERE log(value1) != 1 ORDER BY 1,2,3;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=941.47..958.45 rows=6792 width=48)
   Output: (log(value1)), (log((value2)::double precision)), '-0.3010299956639812'::numeric
   Sort Key: (log(s3.value1)), (log((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..509.17 rows=6792 width=48)
         Output: (log(value1)), (log((value2)::double precision)), '-0.3010299956639812'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT log10(`value1`), log10(`value2`), (-0.3010299956639812) FROM `test`.`s32` WHERE ((log10(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log(value1), log(value2), (-0.3010299956639812) FROM public.s31mysql WHERE ((log(value1) <> 1::double precision))
(12 rows)

-- select log (builtin function, log in constraints, result)
--Testcase 45:
SELECT log(value1), log(value2), log(0.5) FROM s3 WHERE log(value1) != 1 ORDER BY 1,2,3;
         log          |        log         |         log         
----------------------+--------------------+---------------------
   -0.999999993528508 |                  2 | -0.3010299956639812
  -0.6989699978645267 |                  2 | -0.3010299956639812
  -0.5228787280230257 |                  2 | -0.3010299956639812
 0.041392694571304324 | 2.3010299956639813 | -0.3010299956639812
  0.34242269023528554 | 2.3010299956639813 | -0.3010299956639812
   0.5185139336025012 | 2.3010299956639813 | -0.3010299956639812
(6 rows)

-- select log (builtin function, log in constraints, explain)
--Testcase 46:
EXPLAIN VERBOSE
SELECT log(value1), log(value2), log(0.5) FROM s3 WHERE log(5) > value1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..367.91 rows=2276 width=48)
   Output: (log(value1)), (log((value2)::double precision)), '-0.3010299956639812'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT log10(`value1`), log10(`value2`), (-0.3010299956639812) FROM `test`.`s32` WHERE ((0.6989700043360189 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT log(value1), log(value2), (-0.3010299956639812) FROM public.s31mysql WHERE ((0.6989700043360189::double precision > value1))
(7 rows)

-- select log (builtin function, log in constraints, result)
--Testcase 47:
SELECT log(value1), log(value2), log(0.5) FROM s3 WHERE log(5) > value1;
         log         | log |         log         
---------------------+-----+---------------------
  -0.999999993528508 |   2 | -0.3010299956639812
 -0.6989699978645267 |   2 | -0.3010299956639812
 -0.5228787280230257 |   2 | -0.3010299956639812
(3 rows)

-- select log as nest function with agg (pushdown, explain)
--Testcase 48:
EXPLAIN VERBOSE
SELECT sum(value3),log(sum(value2)) FROM s3;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), log(((sum(value2)))::double precision)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`), sum(`value2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3), sum(value2) FROM public.s31mysql
(11 rows)

-- select log as nest function with agg (pushdown, result)
--Testcase 49:
SELECT sum(value3),log(sum(value2)) FROM s3;
        sum         |        log         
--------------------+--------------------
 -7.200000040233135 | 2.9542425094393248
(1 row)

-- select log as nest with log2 (pushdown, explain)
--Testcase 50:
EXPLAIN VERBOSE
SELECT value1, log(log2(value1)),log(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (log(log2(value1))), (log(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (log(log2(s3.value1))), (log(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (log(log2(value1))), (log(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, log10(log2(`value1`)), log10(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, log(public.log2(value1)), log(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select log as nest with log2 (pushdown, result)
--Testcase 51:
SELECT value1, log(log2(value1)),log(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |         log          |         log         
--------+----------------------+---------------------
    0.1 |                      |  0.5213902248437915
    0.2 |                      |  0.3658487624250164
    0.3 |                      | 0.23979120168873308
    1.1 |  -0.8616860734308339 |                    
    2.2 | 0.055952762624044534 |                    
    3.3 |   0.2361506589779823 |                    
(6 rows)

-- select log with non pushdown func and explicit constant (explain)
--Testcase 52:
EXPLAIN VERBOSE
SELECT log(value2), pi(), 4.1 FROM s3 ORDER BY 1,2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=48)
   Output: (log((value2)::double precision)), '3.141592653589793'::double precision, 4.1
   Sort Key: (log((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=48)
         Output: (log((value2)::double precision)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT log10(`value2`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log(value2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select log with non pushdown func and explicit constant (result)
--Testcase 53:
SELECT log(value2), pi(), 4.1 FROM s3 ORDER BY 1,2;
        log         |        pi         | ?column? 
--------------------+-------------------+----------
                  2 | 3.141592653589793 |      4.1
                  2 | 3.141592653589793 |      4.1
                  2 | 3.141592653589793 |      4.1
 2.3010299956639813 | 3.141592653589793 |      4.1
 2.3010299956639813 | 3.141592653589793 |      4.1
 2.3010299956639813 | 3.141592653589793 |      4.1
(6 rows)

-- select log with order by (explain)
--Testcase 54:
EXPLAIN VERBOSE
SELECT value3, log(1-value3) FROM s3 ORDER BY log(1-value3);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value3, (log(('1'::double precision - value3)))
   Sort Key: (log(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value3, (log(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value3`, log10((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value3, log((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select log with order by (result)
--Testcase 55:
SELECT value3, log(1-value3) FROM s3 ORDER BY log(1-value3);
 value3 |         log         
--------+---------------------
   -0.1 |  0.0413926857465425
   -0.2 | 0.07918124712620683
   -0.3 | 0.11394335628929342
   -1.1 | 0.32221929966457985
   -2.2 |   0.505149984791398
   -3.3 |  0.6334684507635924
(6 rows)

-- select log with order by index (result)
--Testcase 56:
SELECT value3, log(1-value3) FROM s3 ORDER BY 2,1;
 value3 |         log         
--------+---------------------
   -0.1 |  0.0413926857465425
   -0.2 | 0.07918124712620683
   -0.3 | 0.11394335628929342
   -1.1 | 0.32221929966457985
   -2.2 |   0.505149984791398
   -3.3 |  0.6334684507635924
(6 rows)

-- select log with order by index (result)
--Testcase 57:
SELECT value3, log(1-value3) FROM s3 ORDER BY 1,2;
 value3 |         log         
--------+---------------------
   -3.3 |  0.6334684507635924
   -2.2 |   0.505149984791398
   -1.1 | 0.32221929966457985
   -0.3 | 0.11394335628929342
   -0.2 | 0.07918124712620683
   -0.1 |  0.0413926857465425
(6 rows)

-- select log with group by (explain)
--Testcase 58:
EXPLAIN VERBOSE
SELECT count(value1), log(1-value3) FROM s3 GROUP BY log(1-value3) ORDER BY 1,2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (log(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (log(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (log(('1'::double precision - value3)))
         Group Key: (log(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (log(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT log10((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT log((1::double precision - value3)), value1 FROM public.s31mysql
(15 rows)

-- select log with group by (result)
--Testcase 59:
SELECT count(value1), log(1-value3) FROM s3 GROUP BY log(1-value3) ORDER BY 1,2;
 count |         log         
-------+---------------------
     1 |  0.0413926857465425
     1 | 0.07918124712620683
     1 | 0.11394335628929342
     1 | 0.32221929966457985
     1 |   0.505149984791398
     1 |  0.6334684507635924
(6 rows)

-- select log with group by index (result)
--Testcase 60:
SELECT value1, log(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |         log         
--------+---------------------
    0.1 |  0.0413926857465425
    0.2 | 0.07918124712620683
    0.3 | 0.11394335628929342
    1.1 | 0.32221929966457985
    2.2 |   0.505149984791398
    3.3 |  0.6334684507635924
(6 rows)

-- select log with group by index (result)
--Testcase 61:
SELECT value1, log(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |         log         
--------+---------------------
    0.1 |  0.0413926857465425
    0.2 | 0.07918124712620683
    0.3 | 0.11394335628929342
    1.1 | 0.32221929966457985
    2.2 |   0.505149984791398
    3.3 |  0.6334684507635924
(6 rows)

-- select log with group by having (explain)
--Testcase 62:
EXPLAIN VERBOSE
SELECT count(value1), log(1-value3) FROM s3 GROUP BY log(1-value3) HAVING log(avg(value1)) > 0 ORDER BY 1,2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: (count(value1)), (log(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (log(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: count(value1), (log(('1'::double precision - value3)))
         Group Key: (log(('1'::double precision - s3.value3)))
         Filter: (log(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (log(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT log10((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT log((1::double precision - value3)), value1 FROM public.s31mysql
(16 rows)

-- select log with group by having (result)
--Testcase 63:
SELECT count(value1), log(1-value3) FROM s3 GROUP BY log(1-value3) HAVING log(avg(value1)) > 0 ORDER BY 1,2;
 count |         log         
-------+---------------------
     1 | 0.32221929966457985
     1 |   0.505149984791398
     1 |  0.6334684507635924
(3 rows)

-- select log with group by index having (result)
--Testcase 64:
SELECT value3, log(1-value3) FROM s3 GROUP BY 2,1 HAVING log(1-value3) < 0;
 value3 | log 
--------+-----
(0 rows)

-- select log with group by index having (result)
--Testcase 65:
SELECT value3, log(1-value3) FROM s3 GROUP BY 1,2 HAVING value3 > 1;
 value3 | log 
--------+-----
(0 rows)

-- select log and as
--Testcase 66:
SELECT log(value1) as log1 FROM s3 ORDER BY 1;
         log1         
----------------------
   -0.999999993528508
  -0.6989699978645267
  -0.5228787280230257
 0.041392694571304324
  0.34242269023528554
   0.5185139336025012
(6 rows)

-- select abs as nest function with agg (pushdown, explain)
--Testcase 67:
EXPLAIN VERBOSE
SELECT sum(value3),abs(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), abs((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select abs as nest function with agg (pushdown, result)
--Testcase 68:
SELECT sum(value3),abs(sum(value3)) FROM s3;
        sum         |        abs        
--------------------+-------------------
 -7.200000040233135 | 7.200000040233135
(1 row)

-- select abs as nest with log2 (pushdown, explain)
--Testcase 69:
EXPLAIN VERBOSE
SELECT value1, abs(log2(value1)),abs(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (abs(log2(value1))), (abs(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (abs(log2(s3.value1))), (abs(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (abs(log2(value1))), (abs(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, abs(log2(`value1`)), abs(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, abs(public.log2(value1)), abs(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select abs as nest with log2 (pushdown, result)
--Testcase 70:
SELECT value1, abs(log2(value1)),abs(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |         abs         |        abs         
--------+---------------------+--------------------
    0.1 |   3.321928073389531 |  3.321928073389531
    0.2 |   2.321928073389531 |  2.321928073389531
    0.3 |   1.736965536838657 | 1.7369655368386572
    1.1 | 0.13750355501950745 | 0.1375035550195074
    2.2 |  1.1375035550195074 | 1.1375035550195074
    3.3 |   1.722466003624709 | 1.7224660036247088
(6 rows)

-- select abs with non pushdown func and explicit constant (explain)
--Testcase 71:
EXPLAIN VERBOSE
SELECT abs(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (abs(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (abs(s3.value3))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (abs(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT abs(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT abs(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select abs with non pushdown func and explicit constant (result)
--Testcase 72:
SELECT abs(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
         abs         |        pi         | ?column? 
---------------------+-------------------+----------
 0.10000000149011612 | 3.141592653589793 |      4.1
 0.20000000298023224 | 3.141592653589793 |      4.1
 0.30000001192092896 | 3.141592653589793 |      4.1
   1.100000023841858 | 3.141592653589793 |      4.1
   2.200000047683716 | 3.141592653589793 |      4.1
   3.299999952316284 | 3.141592653589793 |      4.1
(6 rows)

-- select sqrt as nest function with agg and explicit constant (pushdown, explain)
--Testcase 73:
EXPLAIN VERBOSE
SELECT sqrt(count(value1)), pi(), 4.1 FROM s3 ORDER BY 1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=159.17..159.18 rows=1 width=48)
   Output: (sqrt(((count(value1)))::double precision)), '3.141592653589793'::double precision, 4.1
   Sort Key: (sqrt(((count(s3.value1)))::double precision))
   ->  Foreign Scan  (cost=110.00..159.16 rows=1 width=48)
         Output: sqrt(((count(value1)))::double precision), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.s3__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT count(`value1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT count(value1) FROM public.s31mysql
(16 rows)

-- select sqrt as nest function with agg and explicit constant (pushdown, result)
--Testcase 74:
SELECT sqrt(count(value1)), pi(), 4.1 FROM s3 ORDER BY 1;
       sqrt        |        pi         | ?column? 
-------------------+-------------------+----------
 2.449489742783178 | 3.141592653589793 |      4.1
(1 row)

-- select sqrt as nest function with agg and explicit constant and tag (error, explain)
--Testcase 75:
EXPLAIN VERBOSE
SELECT sqrt(count(value1)), pi(), 4.1, tag1 FROM s3;
ERROR:  column "s3.tag1" must appear in the GROUP BY clause or be used in an aggregate function
LINE 2: SELECT sqrt(count(value1)), pi(), 4.1, tag1 FROM s3;
                                               ^
-- select abs with order by (explain)
--Testcase 76:
EXPLAIN VERBOSE
SELECT value3, abs(1-value3) FROM s3 ORDER BY abs(1-value3);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value3, (abs(('1'::double precision - value3)))
   Sort Key: (abs(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value3, (abs(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value3`, abs((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value3, abs((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select abs with order by (result)
--Testcase 77:
SELECT value3, abs(1-value3) FROM s3 ORDER BY abs(1-value3);
 value3 |        abs         
--------+--------------------
   -0.1 | 1.1000000014901161
   -0.2 | 1.2000000029802322
   -0.3 |  1.300000011920929
   -1.1 |  2.100000023841858
   -2.2 |  3.200000047683716
   -3.3 |  4.299999952316284
(6 rows)

-- select abs with order by index (result)
--Testcase 78:
SELECT value3, abs(1-value3) FROM s3 ORDER BY 2,1;
 value3 |        abs         
--------+--------------------
   -0.1 | 1.1000000014901161
   -0.2 | 1.2000000029802322
   -0.3 |  1.300000011920929
   -1.1 |  2.100000023841858
   -2.2 |  3.200000047683716
   -3.3 |  4.299999952316284
(6 rows)

-- select abs with order by index (result)
--Testcase 79:
SELECT value3, abs(1-value3) FROM s3 ORDER BY 1,2;
 value3 |        abs         
--------+--------------------
   -3.3 |  4.299999952316284
   -2.2 |  3.200000047683716
   -1.1 |  2.100000023841858
   -0.3 |  1.300000011920929
   -0.2 | 1.2000000029802322
   -0.1 | 1.1000000014901161
(6 rows)

-- select abs and as
--Testcase 80:
SELECT abs(value3) as abs1 FROM s3 ORDER BY 1;
        abs1         
---------------------
 0.10000000149011612
 0.20000000298023224
 0.30000001192092896
   1.100000023841858
   2.200000047683716
   3.299999952316284
(6 rows)

-- select abs with arithmetic and tag in the middle (explain)
--Testcase 81:
EXPLAIN VERBOSE
SELECT abs(value1) + 1, value2, tag1, sqrt(value2) FROM s3 ORDER BY 1,2,3,4;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Sort  (cost=927.75..944.81 rows=6826 width=52)
   Output: ((abs(value1) + '1'::double precision)), value2, tag1, (sqrt((value2)::double precision))
   Sort Key: ((abs(s3.value1) + '1'::double precision)), s3.value2, s3.tag1, (sqrt((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..493.04 rows=6826 width=52)
         Output: ((abs(value1) + '1'::double precision)), value2, tag1, (sqrt((value2)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT (abs(`value1`) + 1), `value2`, `tag1`, sqrt(`value2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT (abs(value1) + 1::double precision), value2, tag1, sqrt(value2) FROM public.s31mysql
(12 rows)

-- select abs with arithmetic and tag in the middle (result)
--Testcase 82:
SELECT abs(value1) + 1, value2, tag1, sqrt(value2) FROM s3 ORDER BY 1,2,3,4;
      ?column?      | value2 | tag1 |        sqrt        
--------------------+--------+------+--------------------
 1.1000000014901161 |    100 | a    |                 10
 1.2000000029802322 |    100 | a    |                 10
  1.300000011920929 |    100 | a    |                 10
  2.100000023841858 |    200 | b    | 14.142135623730951
  3.200000047683716 |    200 | b    | 14.142135623730951
  4.299999952316284 |    200 | b    | 14.142135623730951
(6 rows)

-- select with order by limit (explain)
--Testcase 83:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value3), sqrt(value2) FROM s3 ORDER BY abs(value3) LIMIT 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit  (cost=527.17..527.17 rows=1 width=24)
   Output: (abs(value1)), (abs(value3)), (sqrt((value2)::double precision))
   ->  Sort  (cost=527.17..544.24 rows=6826 width=24)
         Output: (abs(value1)), (abs(value3)), (sqrt((value2)::double precision))
         Sort Key: (abs(s3.value3))
         ->  Foreign Scan on public.s3  (cost=200.00..493.04 rows=6826 width=24)
               Output: (abs(value1)), (abs(value3)), (sqrt((value2)::double precision))
               Node: mysql_svr / Status: Alive
                 Limit push-down: no
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT abs(`value1`), abs(`value3`), sqrt(`value2`) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Limit push-down: no
                 Sort push-down: no
                 Remote SQL: SELECT abs(value1), abs(value3), sqrt(value2) FROM public.s31mysql
(16 rows)

-- select with order by limit (result)
--Testcase 84:
SELECT abs(value1), abs(value3), sqrt(value2) FROM s3 ORDER BY abs(value3) LIMIT 1;
         abs         |         abs         | sqrt 
---------------------+---------------------+------
 0.10000000149011612 | 0.10000000149011612 |   10
(1 row)

-- select mixing with non pushdown func (all not pushdown, explain)
--Testcase 85:
EXPLAIN VERBOSE
SELECT abs(value1), sqrt(value2), cosd(id+40) FROM s3 ORDER BY 1,2,3;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort  (cost=961.88..978.94 rows=6826 width=24)
   Output: (abs(value1)), (sqrt((value2)::double precision)), (cosd(((id + 40))::double precision))
   Sort Key: (abs(s3.value1)), (sqrt((s3.value2)::double precision)), (cosd(((s3.id + 40))::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=24)
         Output: abs(value1), sqrt((value2)::double precision), cosd(((id + 40))::double precision)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, `value1`, `value2` FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, value1, value2 FROM public.s31mysql
(12 rows)

-- select mixing with non pushdown func (result)
--Testcase 86:
SELECT abs(value1), sqrt(value2), cosd(id+40) FROM s3 ORDER BY 1,2,3;
 abs |        sqrt        |        cosd        
-----+--------------------+--------------------
 0.1 |                 10 | 0.7660444431189779
 0.2 |                 10 | 0.7547095802227719
 0.3 |                 10 | 0.7431448254773942
 1.1 | 14.142135623730951 | 0.7313537016191705
 2.2 | 14.142135623730951 | 0.7193398003386511
 3.3 | 14.142135623730951 | 0.7071067811865475
(6 rows)

-- select conv (stub function, int column, explain)
--Testcase 87:
EXPLAIN VERBOSE
SELECT conv(id, 10, 2), id FROM s3 WHERE value2 != 100 ORDER BY id, conv(id, 10, 2);
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=2571.46..2588.44 rows=6792 width=36)
   Output: (conv(id, 10, 2)), id
   Sort Key: s3.id, (conv(s3.id, 10, 2))
   ->  Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=36)
         Output: (conv(id, 10, 2)), id
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT conv(`id`, 10, 2), `id` FROM `test`.`s32` WHERE ((`value2` <> 100))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.conv(id, 10, 2), id FROM public.s31mysql WHERE ((value2 <> 100))
(12 rows)

-- select conv (stub function, int column, result)
--Testcase 88:
SELECT conv(id, 10, 2), id FROM s3 WHERE value2 != 100 ORDER BY id, conv(id, 10, 2);
 conv | id 
------+----
 11   |  3
 100  |  4
 101  |  5
(3 rows)

-- select conv (stub function, text column, explain)
--Testcase 89:
EXPLAIN VERBOSE
SELECT conv(str1, 18, 8), str1 FROM s3 WHERE value2 != 200;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=64)
   Output: (conv(str1, 18, 8)), str1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT conv(`str1`, 18, 8), `str1` FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.conv(str1, 18, 8), str1 FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select conv (stub function, text column, result)
--Testcase 90:
SELECT conv(str1, 18, 8), str1 FROM s3 WHERE value2 != 200;
 conv |   str1    
------+-----------
 0    | ---XYZ---
 0    | ---XYZ---
 0    | ---XYZ---
(3 rows)

-- select conv (stub function, const integer, explain)
--Testcase 91:
EXPLAIN VERBOSE
SELECT conv(15, 16, 3), tag1 FROM s3 WHERE value2 != 200 LIMIT 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=200.00..200.29 rows=1 width=64)
   Output: (conv(15, 16, 3)), tag1
   ->  Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=64)
         Output: (conv(15, 16, 3)), tag1
         Node: mysql_svr / Status: Alive
           Limit push-down: yes
           Local server startup cost: 10
           Remote query: SELECT conv(15, 16, 3), `tag1` FROM `test`.`s32` WHERE ((`value2` <> 200)) LIMIT 1
         Node: pgspider_svr / Status: Alive
           Limit push-down: yes
           Remote SQL: SELECT public.conv(15, 16, 3), tag1 FROM public.s31mysql WHERE ((value2 <> 200)) LIMIT 1::bigint
(11 rows)

-- select conv (stub function, const integer, result)
--Testcase 92:
SELECT conv(15, 16, 3), tag1 FROM s3 WHERE value2 != 200 LIMIT 1;
 conv | tag1 
------+------
 210  | a
(1 row)

-- select conv (stub function, const text, explain)
--Testcase 93:
EXPLAIN VERBOSE
SELECT conv('6hE', 30, -9), str2 FROM s3 WHERE value2 != 200 LIMIT 1;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=200.00..200.29 rows=1 width=64)
   Output: (conv('6hE'::text, 30, '-9'::integer)), str2
   ->  Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=64)
         Output: (conv('6hE'::text, 30, '-9'::integer)), str2
         Node: mysql_svr / Status: Alive
           Limit push-down: yes
           Local server startup cost: 10
           Remote query: SELECT conv('6hE', 30, (-9)), `str2` FROM `test`.`s32` WHERE ((`value2` <> 200)) LIMIT 1
         Node: pgspider_svr / Status: Alive
           Limit push-down: yes
           Remote SQL: SELECT public.conv('6hE'::text, 30, (-9)), str2 FROM public.s31mysql WHERE ((value2 <> 200)) LIMIT 1::bigint
(11 rows)

-- select conv (stub function, const text, explain)
--Testcase 94:
SELECT conv('6hE', 30, -9), str2 FROM s3 WHERE value2 != 200 LIMIT 1;
 conv |   str2    
------+-----------
 8112 |    XYZ   
(1 row)

-- select conv (stub function, calculate, explain)
--Testcase 95:
EXPLAIN VERBOSE
SELECT conv(value2 + '10', 10, 10), value2 FROM s3 WHERE value2 != 50 ORDER BY 1,2;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2588.44..2605.42 rows=6792 width=36)
   Output: (conv((value2 + 10), 10, 10)), value2
   Sort Key: (conv((s3.value2 + 10), 10, 10)), s3.value2
   ->  Foreign Scan on public.s3  (cost=200.00..2156.14 rows=6792 width=36)
         Output: (conv((value2 + 10), 10, 10)), value2
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT conv((`value2` + 10), 10, 10), `value2` FROM `test`.`s32` WHERE ((`value2` <> 50))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.conv((value2 + 10), 10, 10), value2 FROM public.s31mysql WHERE ((value2 <> 50))
(12 rows)

-- select conv (stub function, calculate, explain)
--Testcase 96:
SELECT conv(value2 + '10', 10, 10), value2 FROM s3 WHERE value2 != 50 ORDER BY 1,2;
 conv | value2 
------+--------
 110  |    100
 110  |    100
 110  |    100
 210  |    200
 210  |    200
 210  |    200
(6 rows)

-- conv() in where clause
-- where conv (stub function, int column, explain)
--Testcase 97:
EXPLAIN VERBOSE
SELECT * FROM s3 WHERE conv(value2,10,20) = '50';
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2012.50 rows=34 width=156)
   Output: id, tag1, value1, value2, value3, value4, str1, str2, __spd_url
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id`, `tag1`, `value1`, `value2`, `value3`, `value4`, `str1`, `str2` FROM `test`.`s32` WHERE ((conv(`value2`, 10, 20) = '50'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id, tag1, value1, value2, value3, value4, str1, str2, __spd_url FROM public.s31mysql WHERE ((public.conv(value2, 10, 20) = '50'::text))
(7 rows)

-- where conv (stub function, int column, result)
--Testcase 98:
SELECT * FROM s3 WHERE conv(value2,10,20) = '50';
 id | tag1 | value1 | value2 | value3 | value4 |   str1    |   str2    |        __spd_url         
----+------+--------+--------+--------+--------+-----------+-----------+--------------------------
  0 | a    |    0.1 |    100 |   -0.1 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  1 | a    |    0.2 |    100 |   -0.2 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  2 | a    |    0.3 |    100 |   -0.3 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
(3 rows)

-- where conv (stub function, int column, explain)
--Testcase 99:
EXPLAIN VERBOSE
SELECT * FROM s3 WHERE conv(value2,10,20) != str1 ORDER BY 1,2;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2579.96..2596.94 rows=6792 width=156)
   Output: id, tag1, value1, value2, value3, value4, str1, str2, __spd_url
   Sort Key: s3.id, s3.tag1
   ->  Foreign Scan on public.s3  (cost=200.00..2147.66 rows=6792 width=156)
         Output: id, tag1, value1, value2, value3, value4, str1, str2, __spd_url
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value1`, `value2`, `value3`, `value4`, `str1`, `str2` FROM `test`.`s32` WHERE ((conv(`value2`, 10, 20) <> `str1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, tag1, value1, value2, value3, value4, str1, str2, __spd_url FROM public.s31mysql WHERE ((public.conv(value2, 10, 20) <> str1))
(12 rows)

-- where conv (stub function, int column, result)
--Testcase 100:
SELECT * FROM s3 WHERE conv(value2,10,20) != str1 ORDER BY 1,2;
 id | tag1 | value1 | value2 | value3 | value4 |   str1    |   str2    |        __spd_url         
----+------+--------+--------+--------+--------+-----------+-----------+--------------------------
  0 | a    |    0.1 |    100 |   -0.1 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  1 | a    |    0.2 |    100 |   -0.2 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  2 | a    |    0.3 |    100 |   -0.3 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  3 | b    |    1.1 |    200 |   -1.1 |   -200 | ---XYZ--- |    XYZ    | /mysql_svr/
  4 | b    |    2.2 |    200 |   -2.2 |   -200 | ---XYZ--- |    XYZ    | /mysql_svr/
  5 | b    |    3.3 |    200 |   -3.3 |   -200 | ---XYZ--- |    XYZ    | /mysql_svr/
(6 rows)

-- order by conv  (stub function, int column)
-- select conv (stub function, text column, explain)
--Testcase 101:
EXPLAIN VERBOSE
SELECT conv(str1, 18, 8), str1 FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=2571.46..2588.44 rows=6792 width=64)
   Output: (conv(str1, 18, 8)), str1
   Sort Key: (conv(s3.str1, 18, 8))
   ->  Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=64)
         Output: (conv(str1, 18, 8)), str1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT conv(`str1`, 18, 8), `str1` FROM `test`.`s32` WHERE ((`value2` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.conv(str1, 18, 8), str1 FROM public.s31mysql WHERE ((value2 <> 200))
(12 rows)

-- select conv (stub function, text column, result)
--Testcase 102:
SELECT conv(str1, 18, 8), str1 FROM s3 WHERE value2 != 200 ORDER BY 1;
 conv |   str1    
------+-----------
 0    | ---XYZ---
 0    | ---XYZ---
 0    | ---XYZ---
(3 rows)

-- select crc32 (stub function, int column, explain)
--Testcase 103:
EXPLAIN VERBOSE
SELECT crc32(id), id FROM s3 WHERE value2 != 100 ORDER BY id, crc32(id);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=2571.46..2588.44 rows=6792 width=12)
   Output: (crc32(id)), id
   Sort Key: s3.id, (crc32(s3.id))
   ->  Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=12)
         Output: (crc32(id)), id
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT crc32(`id`), `id` FROM `test`.`s32` WHERE ((`value2` <> 100))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.crc32(id), id FROM public.s31mysql WHERE ((value2 <> 100))
(12 rows)

-- select crc32 (stub function, int column, result)
--Testcase 104:
SELECT crc32(id), id FROM s3 WHERE value2 != 100 ORDER BY id, crc32(id);
   crc32    | id 
------------+----
 1842515611 |  3
 4088798008 |  4
 2226203566 |  5
(3 rows)

-- select crc32 (stub function, int column, explain)
--Testcase 105:
EXPLAIN VERBOSE
SELECT crc32(id), id FROM s3 WHERE value2 = 100 ORDER BY id, crc32(id);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=315.37..315.45 rows=34 width=12)
   Output: (crc32(id)), id
   Sort Key: s3.id, (crc32(s3.id))
   ->  Foreign Scan on public.s3  (cost=200.00..314.50 rows=34 width=12)
         Output: (crc32(id)), id
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT crc32(`id`), `id` FROM `test`.`s32` WHERE ((`value2` = 100))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.crc32(id), id FROM public.s31mysql WHERE ((value2 = 100))
(12 rows)

-- select crc32 (stub function, int column, result)
--Testcase 106:
SELECT crc32(id), id FROM s3 WHERE value2 = 100 ORDER BY id, crc32(id);
   crc32    | id 
------------+----
 4108050209 |  0
 2212294583 |  1
  450215437 |  2
(3 rows)

-- select crc32 (stub function, text column, explain)
--Testcase 107:
EXPLAIN VERBOSE
SELECT crc32(str1), str1 FROM s3 WHERE value2 != 200;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: (crc32(str1)), str1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT crc32(`str1`), `str1` FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.crc32(str1), str1 FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select crc32 (stub function, text column, result)
--Testcase 108:
SELECT crc32(str1), str1 FROM s3 WHERE value2 != 200;
   crc32    |   str1    
------------+-----------
 2107655502 | ---XYZ---
 2107655502 | ---XYZ---
 2107655502 | ---XYZ---
(3 rows)

-- select crc32 (stub function, const integer, explain)
--Testcase 109:
EXPLAIN VERBOSE
SELECT crc32(15), tag1 FROM s3 WHERE value2 != 200 LIMIT 1;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=200.00..200.29 rows=1 width=40)
   Output: (crc32(15)), tag1
   ->  Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
         Output: (crc32(15)), tag1
         Node: mysql_svr / Status: Alive
           Limit push-down: yes
           Local server startup cost: 10
           Remote query: SELECT crc32(15), `tag1` FROM `test`.`s32` WHERE ((`value2` <> 200)) LIMIT 1
         Node: pgspider_svr / Status: Alive
           Limit push-down: yes
           Remote SQL: SELECT public.crc32(15), tag1 FROM public.s31mysql WHERE ((value2 <> 200)) LIMIT 1::bigint
(11 rows)

-- select crc32 (stub function, const integer, result)
--Testcase 110:
SELECT crc32(15), tag1 FROM s3 WHERE value2 != 200 LIMIT 1;
   crc32    | tag1 
------------+------
 3510096238 | a
(1 row)

-- select crc32 (stub function, const text, explain)
--Testcase 111:
EXPLAIN VERBOSE
SELECT crc32('6hE'), str2 FROM s3 WHERE value2 != 200 LIMIT 1;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=200.00..200.29 rows=1 width=40)
   Output: (crc32('6hE'::text)), str2
   ->  Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
         Output: (crc32('6hE'::text)), str2
         Node: mysql_svr / Status: Alive
           Limit push-down: yes
           Local server startup cost: 10
           Remote query: SELECT crc32('6hE'), `str2` FROM `test`.`s32` WHERE ((`value2` <> 200)) LIMIT 1
         Node: pgspider_svr / Status: Alive
           Limit push-down: yes
           Remote SQL: SELECT public.crc32('6hE'::text), str2 FROM public.s31mysql WHERE ((value2 <> 200)) LIMIT 1::bigint
(11 rows)

-- select crc32 (stub function, const text, explain)
--Testcase 112:
SELECT crc32('6hE'), str2 FROM s3 WHERE value2 != 200 LIMIT 1;
   crc32    |   str2    
------------+-----------
 1949635712 |    XYZ   
(1 row)

-- select crc32 (stub function, calculate, explain)
--Testcase 113:
EXPLAIN VERBOSE
SELECT crc32(value2 + '10'), value2 FROM s3 WHERE value2 != 50 ORDER BY 2,1;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=2588.44..2605.42 rows=6792 width=12)
   Output: (crc32((value2 + 10))), value2
   Sort Key: s3.value2, (crc32((s3.value2 + 10)))
   ->  Foreign Scan on public.s3  (cost=200.00..2156.14 rows=6792 width=12)
         Output: (crc32((value2 + 10))), value2
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT crc32((`value2` + 10)), `value2` FROM `test`.`s32` WHERE ((`value2` <> 50))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.crc32((value2 + 10)), value2 FROM public.s31mysql WHERE ((value2 <> 50))
(12 rows)

-- select crc32 (stub function, calculate, explain)
--Testcase 114:
SELECT crc32(value2 + '10'), value2 FROM s3 WHERE value2 != 50 ORDER BY 2,1;
   crc32   | value2 
-----------+--------
 980181419 |    100
 980181419 |    100
 980181419 |    100
 942333938 |    200
 942333938 |    200
 942333938 |    200
(6 rows)

-- select crc32 (builtin function, explain)
--Testcase 115:
EXPLAIN VERBOSE
SELECT value1, crc32(value2), crc32(value3), crc32(value4), crc32(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7685.49..7702.55 rows=6826 width=40)
   Output: value1, (crc32(value2)), (crc32(value3)), (crc32(value4)), (crc32(0.5))
   Sort Key: s3.value1, (crc32(s3.value2)), (crc32(s3.value3)), (crc32(s3.value4)), (crc32(0.5))
   ->  Foreign Scan on public.s3  (cost=200.00..7250.78 rows=6826 width=40)
         Output: value1, (crc32(value2)), (crc32(value3)), (crc32(value4)), (crc32(0.5))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, crc32(`value2`), crc32(`value3`), crc32(`value4`), crc32(0.5) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.crc32(value2), public.crc32(value3), public.crc32(value4), public.crc32(0.5) FROM public.s31mysql
(12 rows)

-- select crc32 (builtin function, result)
--Testcase 116:
SELECT value1, crc32(value2), crc32(value3), crc32(value4), crc32(0.5) FROM s3 ORDER BY 1,2,3,4,5;
 value1 |   crc32   |   crc32    |   crc32    |   crc32    
--------+-----------+------------+------------+------------
    0.1 | 595022058 |  229524601 | 2938773767 | 2258563469
    0.2 | 595022058 | 2493978051 | 2938773767 | 2258563469
    0.3 | 595022058 | 3818923349 | 2938773767 | 2258563469
    1.1 | 556920499 |  208416334 | 2909577054 | 2258563469
    2.2 | 556920499 | 2535702957 | 2909577054 | 2258563469
    3.3 | 556920499 | 3789986572 | 2909577054 | 2258563469
(6 rows)

-- select crc32 (builtin function, not pushdown constraints, explain)
--Testcase 117:
EXPLAIN VERBOSE
SELECT crc32(value1), crc32(value2), crc32(value3), crc32(value4), crc32(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..433.23 rows=34 width=40)
   Output: (crc32(value1)), (crc32(value2)), (crc32(value3)), (crc32(value4)), (crc32(0.5))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT crc32(`value1`), crc32(`value2`), crc32(`value3`), crc32(`value4`), crc32(0.5), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.crc32(value1), public.crc32(value2), public.crc32(value3), public.crc32(value4), public.crc32(0.5), value2 FROM public.s31mysql
(8 rows)

-- select crc32 (builtin function, not pushdown constraints, result)
--Testcase 118:
SELECT crc32(value1), crc32(value2), crc32(value3), crc32(value4), crc32(0.5) FROM s3 WHERE to_hex(value2) = '64';
   crc32    |   crc32   |   crc32    |   crc32    |   crc32    
------------+-----------+------------+------------+------------
 2180199828 | 595022058 |  229524601 | 2938773767 | 2258563469
  419062830 | 595022058 | 2493978051 | 2938773767 | 2258563469
 1878873272 | 595022058 | 3818923349 | 2938773767 | 2258563469
(3 rows)

-- select crc32 (builtin function, pushdown constraints, explain)
--Testcase 119:
EXPLAIN VERBOSE
SELECT crc32(value1), crc32(value2), crc32(value3), crc32(value4), crc32(0.5) FROM s3 WHERE value2 != 200;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..8931.17 rows=6792 width=40)
   Output: (crc32(value1)), (crc32(value2)), (crc32(value3)), (crc32(value4)), (crc32(0.5))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT crc32(`value1`), crc32(`value2`), crc32(`value3`), crc32(`value4`), crc32(0.5) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.crc32(value1), public.crc32(value2), public.crc32(value3), public.crc32(value4), public.crc32(0.5) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select crc32 (builtin function, pushdown constraints, result)
--Testcase 120:
SELECT crc32(value1), crc32(value2), crc32(value3), crc32(value4), crc32(0.5) FROM s3 WHERE value2 != 200;
   crc32    |   crc32   |   crc32    |   crc32    |   crc32    
------------+-----------+------------+------------+------------
 2180199828 | 595022058 |  229524601 | 2938773767 | 2258563469
  419062830 | 595022058 | 2493978051 | 2938773767 | 2258563469
 1878873272 | 595022058 | 3818923349 | 2938773767 | 2258563469
(3 rows)

-- select crc32 (builtin function, crc32 in constraints, explain)
--Testcase 121:
EXPLAIN VERBOSE
SELECT value1, crc32(value2), crc32(value3), crc32(value4), crc32(0.5) FROM s3 WHERE crc32(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9371.96..9388.94 rows=6792 width=40)
   Output: value1, (crc32(value2)), (crc32(value3)), (crc32(value4)), (crc32(0.5))
   Sort Key: s3.value1, (crc32(s3.value2)), (crc32(s3.value3)), (crc32(s3.value4)), (crc32(0.5))
   ->  Foreign Scan on public.s3  (cost=200.00..8939.67 rows=6792 width=40)
         Output: value1, (crc32(value2)), (crc32(value3)), (crc32(value4)), (crc32(0.5))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, crc32(`value2`), crc32(`value3`), crc32(`value4`), crc32(0.5) FROM `test`.`s32` WHERE ((crc32(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.crc32(value2), public.crc32(value3), public.crc32(value4), public.crc32(0.5) FROM public.s31mysql WHERE ((public.crc32(value1) <> 1))
(12 rows)

-- select crc32 (builtin function, crc32 in constraints, result)
--Testcase 122:
SELECT value1, crc32(value2), crc32(value3), crc32(value4), crc32(0.5) FROM s3 WHERE crc32(value1) != 1 ORDER BY 1,2,3,4,5;
 value1 |   crc32   |   crc32    |   crc32    |   crc32    
--------+-----------+------------+------------+------------
    0.1 | 595022058 |  229524601 | 2938773767 | 2258563469
    0.2 | 595022058 | 2493978051 | 2938773767 | 2258563469
    0.3 | 595022058 | 3818923349 | 2938773767 | 2258563469
    1.1 | 556920499 |  208416334 | 2909577054 | 2258563469
    2.2 | 556920499 | 2535702957 | 2909577054 | 2258563469
    3.3 | 556920499 | 3789986572 | 2909577054 | 2258563469
(6 rows)

-- select crc32 (builtin function, crc32 in constraints, explain)
--Testcase 123:
EXPLAIN VERBOSE
SELECT value1, crc32(value2), crc32(value3), crc32(value4), crc32(0.5) FROM s3 WHERE crc32(0.5) > value1 ORDER BY 1,2,3,4,5;
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4477.32..4483.01 rows=2276 width=40)
   Output: value1, (crc32(value2)), (crc32(value3)), (crc32(value4)), (crc32(0.5))
   Sort Key: s3.value1, (crc32(s3.value2)), (crc32(s3.value3)), (crc32(s3.value4)), (crc32(0.5))
   ->  Foreign Scan on public.s3  (cost=200.00..4350.41 rows=2276 width=40)
         Output: value1, (crc32(value2)), (crc32(value3)), (crc32(value4)), (crc32(0.5))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, crc32(`value2`), crc32(`value3`), crc32(`value4`), crc32(0.5) FROM `test`.`s32` WHERE ((crc32(0.5) > `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.crc32(value2), public.crc32(value3), public.crc32(value4), public.crc32(0.5) FROM public.s31mysql WHERE ((public.crc32(0.5) > value1))
(12 rows)

-- select crc32 (builtin function, crc32 in constraints, result)
--Testcase 124:
SELECT value1, crc32(value2), crc32(value3), crc32(value4), crc32(0.5) FROM s3 WHERE crc32(0.5) > value1 ORDER BY 1,2,3,4,5;
 value1 |   crc32   |   crc32    |   crc32    |   crc32    
--------+-----------+------------+------------+------------
    0.1 | 595022058 |  229524601 | 2938773767 | 2258563469
    0.2 | 595022058 | 2493978051 | 2938773767 | 2258563469
    0.3 | 595022058 | 3818923349 | 2938773767 | 2258563469
    1.1 | 556920499 |  208416334 | 2909577054 | 2258563469
    2.2 | 556920499 | 2535702957 | 2909577054 | 2258563469
    3.3 | 556920499 | 3789986572 | 2909577054 | 2258563469
(6 rows)

-- select crc32 as nest function with agg (not pushdown, explain)
--Testcase 125:
EXPLAIN VERBOSE
SELECT sum(value3),crc32(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (sum(value3)), crc32((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select crc32 as nest function with agg (pushdown, result)
--Testcase 126:
SELECT sum(value3),crc32(sum(value3)) FROM s3;
ERROR:  stub crc32(anyelement) is called
CONTEXT:  PL/pgSQL function crc32(anyelement) line 3 at RAISE
-- select crc32 as nest with log2 (pushdown, explain)
--Testcase 127:
EXPLAIN VERBOSE
SELECT value1, crc32(log2(value1)),crc32(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7702.55..7719.62 rows=6826 width=24)
   Output: value1, (crc32(log2(value1))), (crc32(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (crc32(log2(s3.value1))), (crc32(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..7267.84 rows=6826 width=24)
         Output: value1, (crc32(log2(value1))), (crc32(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, crc32(log2(`value1`)), crc32(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.crc32(public.log2(value1)), public.crc32(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select crc32 as nest with log2 (pushdown, result)
--Testcase 128:
SELECT value1, crc32(log2(value1)),crc32(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |   crc32    |   crc32    
--------+------------+------------
    0.1 | 2050478267 | 2049874320
    0.2 | 4254145528 | 4253569747
    0.3 |   85804108 | 3372633851
    1.1 | 2676406531 | 2592814684
    2.2 | 3647299764 | 1977188541
    3.3 | 1840977260 |  198053949
(6 rows)

-- select crc32 with non pushdown func and explicit conscrc32t (explain)
--Testcase 129:
EXPLAIN VERBOSE
SELECT value1, crc32(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=56)
   Output: value1, (crc32(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: s3.value1, (crc32(s3.value3))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=56)
         Output: value1, (crc32(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, crc32(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.crc32(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select crc32 with non pushdown func and explicit conscrc32t (result)
--Testcase 130:
SELECT value1, crc32(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
 value1 |   crc32    |        pi         | ?column? 
--------+------------+-------------------+----------
    0.1 |  229524601 | 3.141592653589793 |      4.1
    0.2 | 2493978051 | 3.141592653589793 |      4.1
    0.3 | 3818923349 | 3.141592653589793 |      4.1
    1.1 |  208416334 | 3.141592653589793 |      4.1
    2.2 | 2535702957 | 3.141592653589793 |      4.1
    3.3 | 3789986572 | 3.141592653589793 |      4.1
(6 rows)

-- select crc32 with order by (explain)
--Testcase 131:
EXPLAIN VERBOSE
SELECT value3, crc32(1-value3) FROM s3 ORDER BY crc32(1-value3);
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=16)
   Output: value3, (crc32(('1'::double precision - value3)))
   Sort Key: (crc32(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
         Output: value3, (crc32(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value3`, crc32((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value3, public.crc32((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select crc32 with order by (result)
--Testcase 132:
SELECT value3, crc32(1-value3) FROM s3 ORDER BY crc32(1-value3);
 value3 |   crc32    
--------+------------
   -0.2 |  313124613
   -0.3 | 2649881391
   -3.3 | 2982988221
   -1.1 | 3134819062
   -2.2 | 3277450652
   -0.1 | 4080077135
(6 rows)

-- select crc32 with order by index (result)
--Testcase 133:
SELECT value3, crc32(1-value3) FROM s3 ORDER BY 2,1;
 value3 |   crc32    
--------+------------
   -0.2 |  313124613
   -0.3 | 2649881391
   -3.3 | 2982988221
   -1.1 | 3134819062
   -2.2 | 3277450652
   -0.1 | 4080077135
(6 rows)

-- select crc32 with order by index (result)
--Testcase 134:
SELECT value3, crc32(1-value3) FROM s3 ORDER BY 1,2;
 value3 |   crc32    
--------+------------
   -3.3 | 2982988221
   -2.2 | 3277450652
   -1.1 | 3134819062
   -0.3 | 2649881391
   -0.2 |  313124613
   -0.1 | 4080077135
(6 rows)

-- select crc32 with group by (explain)
--Testcase 135:
EXPLAIN VERBOSE
SELECT value1, crc32(1-value3) FROM s3 GROUP BY value1, crc32(1-value3) ORDER BY 1,2;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=16)
   Output: value1, (crc32(('1'::double precision - value3)))
   Sort Key: s3.value1, (crc32(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=16)
         Output: value1, (crc32(('1'::double precision - value3)))
         Group Key: s3.value1, (crc32(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
               Output: value1, (crc32(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, crc32((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, public.crc32((1::double precision - value3)) FROM public.s31mysql
(15 rows)

-- select crc32 with group by (result)
--Testcase 136:
SELECT value1, crc32(1-value3) FROM s3 GROUP BY value1,crc32(1-value3) ORDER BY 1,2;
 value1 |   crc32    
--------+------------
    0.1 | 4080077135
    0.2 |  313124613
    0.3 | 2649881391
    1.1 | 3134819062
    2.2 | 3277450652
    3.3 | 2982988221
(6 rows)

-- select crc32 with group by index (result)
--Testcase 137:
SELECT value1, crc32(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |   crc32    
--------+------------
    0.1 | 4080077135
    0.2 |  313124613
    0.3 | 2649881391
    1.1 | 3134819062
    2.2 | 3277450652
    3.3 | 2982988221
(6 rows)

-- select crc32 with group by index (result)
--Testcase 138:
SELECT value1, crc32(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |   crc32    
--------+------------
    0.1 | 4080077135
    0.2 |  313124613
    0.3 | 2649881391
    1.1 | 3134819062
    2.2 | 3277450652
    3.3 | 2982988221
(6 rows)

-- select crc32 with group by having (explain)
--Testcase 139:
EXPLAIN VERBOSE
SELECT value1, crc32(1-value3) FROM s3 GROUP BY value1, crc32(1-value3) HAVING avg(value1) > 0 ORDER BY 1,2;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=2221.49..2221.66 rows=67 width=16)
   Output: value1, (crc32(('1'::double precision - value3)))
   Sort Key: s3.value1, (crc32(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=2199.54..2219.46 rows=67 width=16)
         Output: value1, (crc32(('1'::double precision - value3)))
         Group Key: s3.value1, (crc32(('1'::double precision - s3.value3)))
         Filter: (avg(s3.value1) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
               Output: value1, (crc32(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, crc32((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, public.crc32((1::double precision - value3)) FROM public.s31mysql
(16 rows)

-- select crc32 with group by having (result)
--Testcase 140:
SELECT value1, crc32(1-value3) FROM s3 GROUP BY value1, crc32(1-value3) HAVING avg(value1) > 0 ORDER BY 1,2;
 value1 |   crc32    
--------+------------
    0.1 | 4080077135
    0.2 |  313124613
    0.3 | 2649881391
    1.1 | 3134819062
    2.2 | 3277450652
    3.3 | 2982988221
(6 rows)

-- select crc32 with group by index having (result)
--Testcase 141:
SELECT value3, crc32(1-value3) FROM s3 GROUP BY 1,2 HAVING value3 > 1;
 value3 | crc32 
--------+-------
(0 rows)

-- select crc32 and as
--Testcase 142:
SELECT value1, crc32(value3) as crc321 FROM s3 ORDER BY 1,2;
 value1 |   crc321   
--------+------------
    0.1 |  229524601
    0.2 | 2493978051
    0.3 | 3818923349
    1.1 |  208416334
    2.2 | 2535702957
    3.3 | 3789986572
(6 rows)

-- select log10 (builtin function, explain)
--Testcase 143:
EXPLAIN VERBOSE
SELECT log10(value1), log10(value2), log10(0.5) FROM s3 ORDER BY 1,2,3;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=910.68..927.75 rows=6826 width=48)
   Output: (log10(value1)), (log10((value2)::double precision)), '-0.3010299956639812'::numeric
   Sort Key: (log10(s3.value1)), (log10((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=48)
         Output: (log10(value1)), (log10((value2)::double precision)), '-0.3010299956639812'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT log10(`value1`), log10(`value2`), (-0.3010299956639812) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log10(value1), log10(value2), (-0.3010299956639812) FROM public.s31mysql
(12 rows)

-- select log10 (builtin function, result)
--Testcase 144:
SELECT log10(value1), log10(value2), log10(0.5) FROM s3 ORDER BY 1,2,3;
        log10         |       log10        |        log10        
----------------------+--------------------+---------------------
   -0.999999993528508 |                  2 | -0.3010299956639812
  -0.6989699978645267 |                  2 | -0.3010299956639812
  -0.5228787280230257 |                  2 | -0.3010299956639812
 0.041392694571304324 | 2.3010299956639813 | -0.3010299956639812
  0.34242269023528554 | 2.3010299956639813 | -0.3010299956639812
   0.5185139336025012 | 2.3010299956639813 | -0.3010299956639812
(6 rows)

-- select log10 (builtin function, not pushdown constraints, explain)
--Testcase 145:
EXPLAIN VERBOSE
SELECT log10(value1), log10(value2), log10(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.98 rows=34 width=48)
   Output: (log10(value1)), (log10((value2)::double precision)), '-0.3010299956639812'::numeric
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT log10(`value1`), log10(`value2`), (-0.3010299956639812), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT log10(value1), log10(value2), (-0.3010299956639812), value2 FROM public.s31mysql
(8 rows)

-- select log10 (builtin function, not pushdown constraints, result)
--Testcase 146:
SELECT log10(value1), log10(value2), log10(0.5) FROM s3 WHERE to_hex(value2) = '64';
        log10        | log10 |        log10        
---------------------+-------+---------------------
  -0.999999993528508 |     2 | -0.3010299956639812
 -0.6989699978645267 |     2 | -0.3010299956639812
 -0.5228787280230257 |     2 | -0.3010299956639812
(3 rows)

-- select log10 (builtin function, pushdown constraints, explain)
--Testcase 147:
EXPLAIN VERBOSE
SELECT log10(value1), log10(value2), log10(0.5) FROM s3 WHERE value2 != 200;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..492.11 rows=6792 width=48)
   Output: (log10(value1)), (log10((value2)::double precision)), '-0.3010299956639812'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT log10(`value1`), log10(`value2`), (-0.3010299956639812) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT log10(value1), log10(value2), (-0.3010299956639812) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select log10 (builtin function, pushdown constraints, result)
--Testcase 148:
SELECT log10(value1), log10(value2), log10(0.5) FROM s3 WHERE value2 != 200;
        log10        | log10 |        log10        
---------------------+-------+---------------------
  -0.999999993528508 |     2 | -0.3010299956639812
 -0.6989699978645267 |     2 | -0.3010299956639812
 -0.5228787280230257 |     2 | -0.3010299956639812
(3 rows)

-- select log10 (builtin function, log10 in constraints, explain)
--Testcase 149:
EXPLAIN VERBOSE
SELECT log10(value1), log10(value2), log10(0.5) FROM s3 WHERE log10(value1) != 1 ORDER BY 1,2,3;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=941.47..958.45 rows=6792 width=48)
   Output: (log10(value1)), (log10((value2)::double precision)), '-0.3010299956639812'::numeric
   Sort Key: (log10(s3.value1)), (log10((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..509.17 rows=6792 width=48)
         Output: (log10(value1)), (log10((value2)::double precision)), '-0.3010299956639812'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT log10(`value1`), log10(`value2`), (-0.3010299956639812) FROM `test`.`s32` WHERE ((log10(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log10(value1), log10(value2), (-0.3010299956639812) FROM public.s31mysql WHERE ((log10(value1) <> 1::double precision))
(12 rows)

-- select log10 (builtin function, log10 in constraints, result)
--Testcase 150:
SELECT log10(value1), log10(value2), log10(0.5) FROM s3 WHERE log10(value1) != 1 ORDER BY 1,2,3;
        log10         |       log10        |        log10        
----------------------+--------------------+---------------------
   -0.999999993528508 |                  2 | -0.3010299956639812
  -0.6989699978645267 |                  2 | -0.3010299956639812
  -0.5228787280230257 |                  2 | -0.3010299956639812
 0.041392694571304324 | 2.3010299956639813 | -0.3010299956639812
  0.34242269023528554 | 2.3010299956639813 | -0.3010299956639812
   0.5185139336025012 | 2.3010299956639813 | -0.3010299956639812
(6 rows)

-- select log10 (builtin function, log10 in constraints, explain)
--Testcase 151:
EXPLAIN VERBOSE
SELECT log10(value1), log10(value2), log10(0.5) FROM s3 WHERE log10(0.5) < value1 ORDER BY 1,2,3;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=494.83..500.52 rows=2276 width=48)
   Output: (log10(value1)), (log10((value2)::double precision)), '-0.3010299956639812'::numeric
   Sort Key: (log10(s3.value1)), (log10((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..367.91 rows=2276 width=48)
         Output: (log10(value1)), (log10((value2)::double precision)), '-0.3010299956639812'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT log10(`value1`), log10(`value2`), (-0.3010299956639812) FROM `test`.`s32` WHERE (((-0.3010299956639812) < `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log10(value1), log10(value2), (-0.3010299956639812) FROM public.s31mysql WHERE (((-0.3010299956639812)::double precision < value1))
(12 rows)

-- select log10 (builtin function, log10 in constraints, result)
--Testcase 152:
SELECT log10(value1), log10(value2), log10(0.5) FROM s3 WHERE log10(0.5) < value1 ORDER BY 1,2,3;
        log10         |       log10        |        log10        
----------------------+--------------------+---------------------
   -0.999999993528508 |                  2 | -0.3010299956639812
  -0.6989699978645267 |                  2 | -0.3010299956639812
  -0.5228787280230257 |                  2 | -0.3010299956639812
 0.041392694571304324 | 2.3010299956639813 | -0.3010299956639812
  0.34242269023528554 | 2.3010299956639813 | -0.3010299956639812
   0.5185139336025012 | 2.3010299956639813 | -0.3010299956639812
(6 rows)

-- select log10 as nest function with agg (pushdown, explain)
--Testcase 153:
EXPLAIN VERBOSE
SELECT sum(value3),log10(sum(value2)) FROM s3;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), log10(((sum(value2)))::double precision)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`), sum(`value2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3), sum(value2) FROM public.s31mysql
(11 rows)

-- select log10 as nest function with agg (pushdown, result)
--Testcase 154:
SELECT sum(value3),log10(sum(value2)) FROM s3;
        sum         |       log10        
--------------------+--------------------
 -7.200000040233135 | 2.9542425094393248
(1 row)

-- select log10 as nest with log2 (pushdown, explain)
--Testcase 155:
EXPLAIN VERBOSE
SELECT value1, log10(log2(value1)),log10(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (log10(log2(value1))), (log10(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (log10(log2(s3.value1))), (log10(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (log10(log2(value1))), (log10(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, log10(log2(`value1`)), log10(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, log10(public.log2(value1)), log10(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select log10 as nest with log2 (pushdown, result)
--Testcase 156:
SELECT value1, log10(log2(value1)),log10(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |        log10         |        log10        
--------+----------------------+---------------------
    0.1 |                      |  0.5213902248437915
    0.2 |                      |  0.3658487624250164
    0.3 |                      | 0.23979120168873308
    1.1 |  -0.8616860734308339 |                    
    2.2 | 0.055952762624044534 |                    
    3.3 |   0.2361506589779823 |                    
(6 rows)

-- select log10 with non pushdown func and explicit constant (explain)
--Testcase 157:
EXPLAIN VERBOSE
SELECT log10(value2), pi(), 4.1 FROM s3 ORDER BY 1;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=48)
   Output: (log10((value2)::double precision)), '3.141592653589793'::double precision, 4.1
   Sort Key: (log10((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=48)
         Output: (log10((value2)::double precision)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT log10(`value2`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log10(value2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select log10 with non pushdown func and explicit constant (result)
--Testcase 158:
SELECT log10(value2), pi(), 4.1 FROM s3 ORDER BY 1;
       log10        |        pi         | ?column? 
--------------------+-------------------+----------
                  2 | 3.141592653589793 |      4.1
                  2 | 3.141592653589793 |      4.1
                  2 | 3.141592653589793 |      4.1
 2.3010299956639813 | 3.141592653589793 |      4.1
 2.3010299956639813 | 3.141592653589793 |      4.1
 2.3010299956639813 | 3.141592653589793 |      4.1
(6 rows)

-- select log10 with order by (explain)
--Testcase 159:
EXPLAIN VERBOSE
SELECT value3, log10(1-value3) FROM s3 ORDER BY log10(1-value3);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value3, (log10(('1'::double precision - value3)))
   Sort Key: (log10(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value3, (log10(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value3`, log10((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value3, log10((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select log10 with order by (result)
--Testcase 160:
SELECT value3, log10(1-value3) FROM s3 ORDER BY log10(1-value3);
 value3 |        log10        
--------+---------------------
   -0.1 |  0.0413926857465425
   -0.2 | 0.07918124712620683
   -0.3 | 0.11394335628929342
   -1.1 | 0.32221929966457985
   -2.2 |   0.505149984791398
   -3.3 |  0.6334684507635924
(6 rows)

-- select log10 with order by index (result)
--Testcase 161:
SELECT value3, log10(1-value3) FROM s3 ORDER BY 2,1;
 value3 |        log10        
--------+---------------------
   -0.1 |  0.0413926857465425
   -0.2 | 0.07918124712620683
   -0.3 | 0.11394335628929342
   -1.1 | 0.32221929966457985
   -2.2 |   0.505149984791398
   -3.3 |  0.6334684507635924
(6 rows)

-- select log10 with order by index (result)
--Testcase 162:
SELECT value3, log10(1-value3) FROM s3 ORDER BY 1,2;
 value3 |        log10        
--------+---------------------
   -3.3 |  0.6334684507635924
   -2.2 |   0.505149984791398
   -1.1 | 0.32221929966457985
   -0.3 | 0.11394335628929342
   -0.2 | 0.07918124712620683
   -0.1 |  0.0413926857465425
(6 rows)

-- select log10 with group by (explain)
--Testcase 163:
EXPLAIN VERBOSE
SELECT count(value1), log10(1-value3) FROM s3 GROUP BY log10(1-value3) ORDER BY 1,2;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (log10(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (log10(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (log10(('1'::double precision - value3)))
         Group Key: (log10(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (log10(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT log10((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT log10((1::double precision - value3)), value1 FROM public.s31mysql
(15 rows)

-- select log10 with group by (result)
--Testcase 164:
SELECT count(value1), log10(1-value3) FROM s3 GROUP BY log10(1-value3) ORDER BY 1,2;
 count |        log10        
-------+---------------------
     1 |  0.0413926857465425
     1 | 0.07918124712620683
     1 | 0.11394335628929342
     1 | 0.32221929966457985
     1 |   0.505149984791398
     1 |  0.6334684507635924
(6 rows)

-- select log10 with group by index (result)
--Testcase 165:
SELECT value1, log10(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |        log10        
--------+---------------------
    0.1 |  0.0413926857465425
    0.2 | 0.07918124712620683
    0.3 | 0.11394335628929342
    1.1 | 0.32221929966457985
    2.2 |   0.505149984791398
    3.3 |  0.6334684507635924
(6 rows)

-- select log10 with group by index (result)
--Testcase 166:
SELECT value1, log10(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |        log10        
--------+---------------------
    0.1 |  0.0413926857465425
    0.2 | 0.07918124712620683
    0.3 | 0.11394335628929342
    1.1 | 0.32221929966457985
    2.2 |   0.505149984791398
    3.3 |  0.6334684507635924
(6 rows)

-- select log10 with group by having (explain)
--Testcase 167:
EXPLAIN VERBOSE
SELECT count(value1), log10(1-value3) FROM s3 GROUP BY log10(1-value3) HAVING log10(avg(value1)) > 0 ORDER BY 1,2;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: (count(value1)), (log10(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (log10(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: count(value1), (log10(('1'::double precision - value3)))
         Group Key: (log10(('1'::double precision - s3.value3)))
         Filter: (log10(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (log10(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT log10((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT log10((1::double precision - value3)), value1 FROM public.s31mysql
(16 rows)

-- select log10 with group by having (result)
--Testcase 168:
SELECT count(value1), log10(1-value3) FROM s3 GROUP BY log10(1-value3) HAVING log10(avg(value1)) > 0 ORDER BY 1,2;
 count |        log10        
-------+---------------------
     1 | 0.32221929966457985
     1 |   0.505149984791398
     1 |  0.6334684507635924
(3 rows)

-- select log10 with group by index having (result)
--Testcase 169:
SELECT value3, log10(1-value3) FROM s3 GROUP BY 2,1 HAVING log10(1-value3) < 0;
 value3 | log10 
--------+-------
(0 rows)

-- select log10 with group by index having (result)
--Testcase 170:
SELECT value3, log10(1-value3) FROM s3 GROUP BY 1,2 HAVING value3 > 1;
 value3 | log10 
--------+-------
(0 rows)

-- select log10 and as
--Testcase 171:
SELECT value1, log10(value1) as log101 FROM s3 ORDER BY 1,2;
 value1 |        log101        
--------+----------------------
    0.1 |   -0.999999993528508
    0.2 |  -0.6989699978645267
    0.3 |  -0.5228787280230257
    1.1 | 0.041392694571304324
    2.2 |  0.34242269023528554
    3.3 |   0.5185139336025012
(6 rows)

-- select log2 (builtin function, explain)
--Testcase 172:
EXPLAIN VERBOSE
SELECT log2(value1), log2(value2), log2(value3 + 1), log2(value4), log2(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9443.18..9460.25 rows=6826 width=40)
   Output: (log2(value1)), (log2((value2)::double precision)), (log2((value3 + '1'::double precision))), (log2((value4)::double precision)), (log2('0.5'::double precision))
   Sort Key: (log2(s3.value1)), (log2((s3.value2)::double precision)), (log2((s3.value3 + '1'::double precision))), (log2((s3.value4)::double precision)), (log2('0.5'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..9008.48 rows=6826 width=40)
         Output: (log2(value1)), (log2((value2)::double precision)), (log2((value3 + '1'::double precision))), (log2((value4)::double precision)), (log2('0.5'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT log2(`value1`), log2(`value2`), log2((`value3` + 1)), log2(`value4`), log2(0.5) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.log2(value1), public.log2(value2), public.log2((value3 + 1::double precision)), public.log2(value4), public.log2(0.5::double precision) FROM public.s31mysql
(12 rows)

-- select log2 (builtin function, result)
--Testcase 173:
SELECT log2(value1), log2(value2), log2(value3 + 1), log2(value4), log2(0.5) FROM s3 ORDER BY 1,2,3,4,5;
        log2         |       log2        |         log2         | log2 | log2 
---------------------+-------------------+----------------------+------+------
  -3.321928073389531 | 6.643856189774724 | -0.15200309583369792 |      |   -1
  -2.321928073389531 | 6.643856189774724 |  -0.3219281002618202 |      |   -1
  -1.736965536838657 | 6.643856189774724 |  -0.5145731973987085 |      |   -1
 0.13750355501950745 | 7.643856189774724 |                      |      |   -1
  1.1375035550195074 | 7.643856189774724 |                      |      |   -1
   1.722466003624709 | 7.643856189774724 |                      |      |   -1
(6 rows)

-- select log2 (builtin function, not pushdown constraints, explain)
--Testcase 174:
EXPLAIN VERBOSE
SELECT log2(value1), log2(value2), log2(value3 + 1), log2(value4), log2(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..433.48 rows=34 width=40)
   Output: (log2(value1)), (log2((value2)::double precision)), (log2((value3 + '1'::double precision))), (log2((value4)::double precision)), (log2('0.5'::double precision))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT log2(`value1`), log2(`value2`), log2((`value3` + 1)), log2(`value4`), log2(0.5), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.log2(value1), public.log2(value2), public.log2((value3 + 1::double precision)), public.log2(value4), public.log2(0.5::double precision), value2 FROM public.s31mysql
(8 rows)

-- select log2 (builtin function, not pushdown constraints, result)
--Testcase 175:
SELECT log2(value1), log2(value2), log2(value3 + 1), log2(value4), log2(0.5) FROM s3 WHERE to_hex(value2) = '64';
        log2        |       log2        |         log2         | log2 | log2 
--------------------+-------------------+----------------------+------+------
 -3.321928073389531 | 6.643856189774724 | -0.15200309583369792 |      |   -1
 -2.321928073389531 | 6.643856189774724 |  -0.3219281002618202 |      |   -1
 -1.736965536838657 | 6.643856189774724 |  -0.5145731973987085 |      |   -1
(3 rows)

-- select log2 (builtin function, pushdown constraints, explain)
--Testcase 176:
EXPLAIN VERBOSE
SELECT log2(value1), log2(value2), log2(value3 + 1), log2(value4), log2(0.5) FROM s3 WHERE value2 != 200;
                                                                                                     QUERY PLAN                                                                                                     
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..8982.10 rows=6792 width=40)
   Output: (log2(value1)), (log2((value2)::double precision)), (log2((value3 + '1'::double precision))), (log2((value4)::double precision)), (log2('0.5'::double precision))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT log2(`value1`), log2(`value2`), log2((`value3` + 1)), log2(`value4`), log2(0.5) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.log2(value1), public.log2(value2), public.log2((value3 + 1::double precision)), public.log2(value4), public.log2(0.5::double precision) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select log2 (builtin function, pushdown constraints, result)
--Testcase 177:
SELECT log2(value1), log2(value2), log2(value3 + 1), log2(value4), log2(0.5) FROM s3 WHERE value2 != 200;
        log2        |       log2        |         log2         | log2 | log2 
--------------------+-------------------+----------------------+------+------
 -3.321928073389531 | 6.643856189774724 | -0.15200309583369792 |      |   -1
 -2.321928073389531 | 6.643856189774724 |  -0.3219281002618202 |      |   -1
 -1.736965536838657 | 6.643856189774724 |  -0.5145731973987085 |      |   -1
(3 rows)

-- select log2 (builtin function, log2 in constraints, explain)
--Testcase 178:
EXPLAIN VERBOSE
SELECT log2(value1), log2(value2), log2(value3 + 1), log2(value4), log2(0.5) FROM s3 WHERE log2(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                                                                      QUERY PLAN                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11120.90..11137.88 rows=6792 width=40)
   Output: (log2(value1)), (log2((value2)::double precision)), (log2((value3 + '1'::double precision))), (log2((value4)::double precision)), (log2('0.5'::double precision))
   Sort Key: (log2(s3.value1)), (log2((s3.value2)::double precision)), (log2((s3.value3 + '1'::double precision))), (log2((s3.value4)::double precision)), (log2('0.5'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..10688.60 rows=6792 width=40)
         Output: (log2(value1)), (log2((value2)::double precision)), (log2((value3 + '1'::double precision))), (log2((value4)::double precision)), (log2('0.5'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT log2(`value1`), log2(`value2`), log2((`value3` + 1)), log2(`value4`), log2(0.5) FROM `test`.`s32` WHERE ((log2(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.log2(value1), public.log2(value2), public.log2((value3 + 1::double precision)), public.log2(value4), public.log2(0.5::double precision) FROM public.s31mysql WHERE ((public.log2(value1) <> 1::double precision))
(12 rows)

-- select log2 (builtin function, log2 in constraints, result)
--Testcase 179:
SELECT log2(value1), log2(value2), log2(value3 + 1), log2(value4), log2(0.5) FROM s3 WHERE log2(value1) != 1 ORDER BY 1,2,3,4,5;
        log2         |       log2        |         log2         | log2 | log2 
---------------------+-------------------+----------------------+------+------
  -3.321928073389531 | 6.643856189774724 | -0.15200309583369792 |      |   -1
  -2.321928073389531 | 6.643856189774724 |  -0.3219281002618202 |      |   -1
  -1.736965536838657 | 6.643856189774724 |  -0.5145731973987085 |      |   -1
 0.13750355501950745 | 7.643856189774724 |                      |      |   -1
  1.1375035550195074 | 7.643856189774724 |                      |      |   -1
   1.722466003624709 | 7.643856189774724 |                      |      |   -1
(6 rows)

-- select log2 (builtin function, log2 in constraints, explain)
--Testcase 180:
EXPLAIN VERBOSE
SELECT log2(value1), log2(value2), log2(value3 + 1), log2(value4), log2(0.5) FROM s3 WHERE log2(0.5) < value1 ORDER BY 1,2,3,4,5;
                                                                                                                       QUERY PLAN                                                                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5046.33..5052.02 rows=2276 width=40)
   Output: (log2(value1)), (log2((value2)::double precision)), (log2((value3 + '1'::double precision))), (log2((value4)::double precision)), (log2('0.5'::double precision))
   Sort Key: (log2(s3.value1)), (log2((s3.value2)::double precision)), (log2((s3.value3 + '1'::double precision))), (log2((s3.value4)::double precision)), (log2('0.5'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..4919.41 rows=2276 width=40)
         Output: (log2(value1)), (log2((value2)::double precision)), (log2((value3 + '1'::double precision))), (log2((value4)::double precision)), (log2('0.5'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT log2(`value1`), log2(`value2`), log2((`value3` + 1)), log2(`value4`), log2(0.5) FROM `test`.`s32` WHERE ((log2(0.5) < `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.log2(value1), public.log2(value2), public.log2((value3 + 1::double precision)), public.log2(value4), public.log2(0.5::double precision) FROM public.s31mysql WHERE ((public.log2(0.5::double precision) < value1))
(12 rows)

-- select log2 (builtin function, log2 in constraints, result)
--Testcase 181:
SELECT log2(value1), log2(value2), log2(value3 + 1), log2(value4), log2(0.5) FROM s3 WHERE log2(0.5) < value1 ORDER BY 1,2,3,4,5;
        log2         |       log2        |         log2         | log2 | log2 
---------------------+-------------------+----------------------+------+------
  -3.321928073389531 | 6.643856189774724 | -0.15200309583369792 |      |   -1
  -2.321928073389531 | 6.643856189774724 |  -0.3219281002618202 |      |   -1
  -1.736965536838657 | 6.643856189774724 |  -0.5145731973987085 |      |   -1
 0.13750355501950745 | 7.643856189774724 |                      |      |   -1
  1.1375035550195074 | 7.643856189774724 |                      |      |   -1
   1.722466003624709 | 7.643856189774724 |                      |      |   -1
(6 rows)

-- select log2 as nest function with agg (pushdown, explain)
--Testcase 182:
EXPLAIN VERBOSE
SELECT sum(value3),log2(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (sum(value3)), log2((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select log2 as nest function with agg (pushdown, result)
--Testcase 183:
SELECT sum(value3),log2(sum(value3)) FROM s3;
ERROR:  stub log2(float8) is called
CONTEXT:  PL/pgSQL function log2(double precision) line 3 at RAISE
-- select log2 as nest with log2 (pushdown, explain)
--Testcase 184:
EXPLAIN VERBOSE
SELECT value1, log2(log2(value1)),log2(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7702.55..7719.62 rows=6826 width=24)
   Output: value1, (log2(log2(value1))), (log2(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (log2(log2(s3.value1))), (log2(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..7267.84 rows=6826 width=24)
         Output: value1, (log2(log2(value1))), (log2(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, log2(log2(`value1`)), log2(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.log2(public.log2(value1)), public.log2(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select log2 as nest with log2 (pushdown, result)
--Testcase 185:
SELECT value1, log2(log2(value1)),log2(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |        log2        |        log2        
--------+--------------------+--------------------
    0.1 |                    | 1.7320208363082297
    0.2 |                    |  1.215323282379434
    0.3 |                    | 0.7965691297966043
    1.1 | -2.862459176303062 |                   
    2.2 | 0.1858710541473771 |                   
    3.3 | 0.7844755086851238 |                   
(6 rows)

-- select log2 with non pushdown func and explicit constant (explain)
--Testcase 186:
EXPLAIN VERBOSE
SELECT value1, log2(value3 + 1), pi(), 4.1 FROM s3 ORDER BY 1,2,3,4;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=56)
   Output: value1, (log2((value3 + '1'::double precision))), '3.141592653589793'::double precision, 4.1
   Sort Key: s3.value1, (log2((s3.value3 + '1'::double precision)))
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=56)
         Output: value1, (log2((value3 + '1'::double precision))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, log2((`value3` + 1)), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.log2((value3 + 1::double precision)), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select log2 with non pushdown func and explicit constant (result)
--Testcase 187:
SELECT value1, log2(value3 + 1), pi(), 4.1 FROM s3 ORDER BY 1,2,3,4;
 value1 |         log2         |        pi         | ?column? 
--------+----------------------+-------------------+----------
    0.1 | -0.15200309583369792 | 3.141592653589793 |      4.1
    0.2 |  -0.3219281002618202 | 3.141592653589793 |      4.1
    0.3 |  -0.5145731973987085 | 3.141592653589793 |      4.1
    1.1 |                      | 3.141592653589793 |      4.1
    2.2 |                      | 3.141592653589793 |      4.1
    3.3 |                      | 3.141592653589793 |      4.1
(6 rows)

-- select log2 with order by (explain)
--Testcase 188:
EXPLAIN VERBOSE
SELECT value3, log2(1-value3) FROM s3 ORDER BY log2(1-value3);
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=16)
   Output: value3, (log2(('1'::double precision - value3)))
   Sort Key: (log2(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
         Output: value3, (log2(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value3`, log2((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value3, public.log2((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select log2 with order by (result)
--Testcase 189:
SELECT value3, log2(1-value3) FROM s3 ORDER BY log2(1-value3);
 value3 |        log2         
--------+---------------------
   -0.1 | 0.13750352570428323
   -0.2 | 0.26303440941676576
   -0.3 | 0.37851163648316444
   -1.1 |   1.070389344270698
   -2.2 |   1.678071926610469
   -3.3 |  2.1043366438163496
(6 rows)

-- select log2 with order by index (result)
--Testcase 190:
SELECT value3, log2(1-value3) FROM s3 ORDER BY 2,1;
 value3 |        log2         
--------+---------------------
   -0.1 | 0.13750352570428323
   -0.2 | 0.26303440941676576
   -0.3 | 0.37851163648316444
   -1.1 |   1.070389344270698
   -2.2 |   1.678071926610469
   -3.3 |  2.1043366438163496
(6 rows)

-- select log2 with order by index (result)
--Testcase 191:
SELECT value3, log2(1-value3) FROM s3 ORDER BY 1,2;
 value3 |        log2         
--------+---------------------
   -3.3 |  2.1043366438163496
   -2.2 |   1.678071926610469
   -1.1 |   1.070389344270698
   -0.3 | 0.37851163648316444
   -0.2 | 0.26303440941676576
   -0.1 | 0.13750352570428323
(6 rows)

-- select log2 with group by (explain)
--Testcase 192:
EXPLAIN VERBOSE
SELECT count(value1), log2(1-value3) FROM s3 GROUP BY log2(1-value3) ORDER BY 1,2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=16)
   Output: (count(value1)), (log2(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (log2(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=16)
         Output: count(value1), (log2(('1'::double precision - value3)))
         Group Key: (log2(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
               Output: (log2(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT log2((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.log2((1::double precision - value3)), value1 FROM public.s31mysql
(15 rows)

-- select log2 with group by (result)
--Testcase 193:
SELECT count(value1), log2(1-value3) FROM s3 GROUP BY log2(1-value3) ORDER BY 1,2;
 count |        log2         
-------+---------------------
     1 | 0.13750352570428323
     1 | 0.26303440941676576
     1 | 0.37851163648316444
     1 |   1.070389344270698
     1 |   1.678071926610469
     1 |  2.1043366438163496
(6 rows)

-- select log2 with group by index (result)
--Testcase 194:
SELECT value1, log2(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |        log2         
--------+---------------------
    0.1 | 0.13750352570428323
    0.2 | 0.26303440941676576
    0.3 | 0.37851163648316444
    1.1 |   1.070389344270698
    2.2 |   1.678071926610469
    3.3 |  2.1043366438163496
(6 rows)

-- select log2 with group by index (result)
--Testcase 195:
SELECT value1, log2(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |        log2         
--------+---------------------
    0.1 | 0.13750352570428323
    0.2 | 0.26303440941676576
    0.3 | 0.37851163648316444
    1.1 |   1.070389344270698
    2.2 |   1.678071926610469
    3.3 |  2.1043366438163496
(6 rows)

-- select log2 with group by having (explain)
--Testcase 196:
EXPLAIN VERBOSE
SELECT count(value1), log2(1-value3) FROM s3 GROUP BY log2(1-value3) HAVING avg(value1) > 0 ORDER BY 1,2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=2221.49..2221.66 rows=67 width=16)
   Output: (count(value1)), (log2(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (log2(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=2199.54..2219.46 rows=67 width=16)
         Output: count(value1), (log2(('1'::double precision - value3)))
         Group Key: (log2(('1'::double precision - s3.value3)))
         Filter: (avg(s3.value1) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
               Output: (log2(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT log2((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.log2((1::double precision - value3)), value1 FROM public.s31mysql
(16 rows)

-- select log2 with group by having (result)
--Testcase 197:
SELECT count(value1), log2(1-value3) FROM s3 GROUP BY log2(1-value3) HAVING avg(value1) > 0 ORDER BY 1,2;
 count |        log2         
-------+---------------------
     1 | 0.13750352570428323
     1 | 0.26303440941676576
     1 | 0.37851163648316444
     1 |   1.070389344270698
     1 |   1.678071926610469
     1 |  2.1043366438163496
(6 rows)

-- select log2 with group by index having (result)
--Testcase 198:
SELECT value1, log2(1-value1) FROM s3 GROUP BY 1,2 HAVING value1 < 1 ORDER BY 1,2 DESC;
 value1 |         log2         
--------+----------------------
    0.1 | -0.15200309583369792
    0.2 |  -0.3219281002618202
    0.3 |  -0.5145731973987085
(3 rows)

-- select log2 and as (return NULL with negative number)
--Testcase 199:
SELECT value1, value3 + 1, log2(value3 + 1) as log21 FROM s3 ORDER BY 1,2,3;
 value1 |       ?column?       |        log21         
--------+----------------------+----------------------
    0.1 |   0.8999999985098839 | -0.15200309583369792
    0.2 |   0.7999999970197678 |  -0.3219281002618202
    0.3 |    0.699999988079071 |  -0.5145731973987085
    1.1 | -0.10000002384185791 |                     
    2.2 |  -1.2000000476837158 |                     
    3.3 |   -2.299999952316284 |                     
(6 rows)

-- select pi (builtin function, explain)
--Testcase 200:
EXPLAIN VERBOSE
SELECT pi() FROM s3 WHERE value2 != 200 LIMIT 1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=200.00..200.04 rows=1 width=8)
   Output: '3.141592653589793'::double precision
   ->  Foreign Scan on public.s3  (cost=200.00..441.17 rows=6792 width=8)
         Output: '3.141592653589793'::double precision
         Node: mysql_svr / Status: Alive
           Limit push-down: yes
           Local server startup cost: 10
           Remote query: SELECT `value2` FROM `test`.`s32` WHERE ((`value2` <> 200)) LIMIT 1
         Node: pgspider_svr / Status: Alive
           Limit push-down: yes
           Remote SQL: SELECT NULL FROM public.s31mysql WHERE ((value2 <> 200)) LIMIT 1::bigint
(11 rows)

-- select pi (builtin function, result)
--Testcase 201:
SELECT pi() FROM s3 WHERE value2 != 200 LIMIT 1;
        pi         
-------------------
 3.141592653589793
(1 row)

-- where pi (builtin function)
--Testcase 202:
EXPLAIN VERBOSE
SELECT id FROM s3 WHERE pi() > id ORDER BY 1 LIMIT 1;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=189.64..189.65 rows=1 width=4)
   Output: id
   ->  Sort  (cost=189.64..192.49 rows=1138 width=4)
         Output: id
         Sort Key: s3.id
         ->  Foreign Scan on public.s3  (cost=100.00..183.95 rows=1138 width=4)
               Output: id
               Node: mysql_svr / Status: Alive
                 Limit push-down: yes
                 Sort push-down: yes
                 Local server startup cost: 10
                 Remote query: SELECT `id` FROM `test`.`s32` WHERE ((3.141592653589793 > `id`)) ORDER BY `id` IS NULL ASC, `id` ASC LIMIT 1
               Node: pgspider_svr / Status: Alive
                 Limit push-down: yes
                 Sort push-down: yes
                 Remote SQL: SELECT id FROM public.s31mysql WHERE ((3.141592653589793::double precision > id)) ORDER BY id ASC NULLS LAST LIMIT 1::bigint
(16 rows)

--Testcase 203:
SELECT id FROM s3 WHERE pi() > id ORDER BY 1 LIMIT 1;
 id 
----
  0
(1 row)

-- select pi (stub function, explain)
--Testcase 204:
EXPLAIN VERBOSE
SELECT mysql_pi() FROM s3 WHERE value2 != 200 LIMIT 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=200.00..200.29 rows=1 width=8)
   Output: (mysql_pi())
   ->  Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=8)
         Output: (mysql_pi())
         Node: mysql_svr / Status: Alive
           Limit push-down: yes
           Local server startup cost: 10
           Remote query: SELECT pi() FROM `test`.`s32` WHERE ((`value2` <> 200)) LIMIT 1
         Node: pgspider_svr / Status: Alive
           Limit push-down: yes
           Remote SQL: SELECT public.mysql_pi() FROM public.s31mysql WHERE ((value2 <> 200)) LIMIT 1::bigint
(11 rows)

-- select pi (stub function, result)
--Testcase 205:
SELECT mysql_pi() FROM s3 WHERE value2 != 200 LIMIT 1;
 mysql_pi 
----------
 3.141593
(1 row)

-- where pi (stub function)
--Testcase 206:
EXPLAIN VERBOSE
SELECT value1 FROM s3 WHERE mysql_pi() > value1 ORDER BY 1 LIMIT 1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1034.36..1034.37 rows=1 width=8)
   Output: value1
   ->  Sort  (cost=1034.36..1037.21 rows=1138 width=8)
         Output: value1
         Sort Key: s3.value1
         ->  Foreign Scan on public.s3  (cost=100.00..1028.67 rows=1138 width=8)
               Output: value1
               Node: mysql_svr / Status: Alive
                 Limit push-down: yes
                 Sort push-down: yes
                 Local server startup cost: 10
                 Remote query: SELECT `value1` FROM `test`.`s32` WHERE ((pi() > `value1`)) ORDER BY `value1` IS NULL ASC, `value1` ASC LIMIT 1
               Node: pgspider_svr / Status: Alive
                 Limit push-down: yes
                 Sort push-down: yes
                 Remote SQL: SELECT value1 FROM public.s31mysql WHERE ((public.mysql_pi() > value1)) ORDER BY value1 ASC NULLS LAST LIMIT 1::bigint
(16 rows)

--Testcase 207:
SELECT value1 FROM s3 WHERE mysql_pi() > value1 ORDER BY 1 LIMIT 1;
 value1 
--------
    0.1
(1 row)

-- where pi (stub function) order by
--Testcase 208:
EXPLAIN VERBOSE
SELECT value1 FROM s3 WHERE mysql_pi() > value1 ORDER BY 1;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=8)
   Output: value1
   Sort Key: s3.value1
   ->  Foreign Scan on public.s3  (cost=200.00..2057.35 rows=2276 width=8)
         Output: value1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1` FROM `test`.`s32` WHERE ((pi() > `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1 FROM public.s31mysql WHERE ((public.mysql_pi() > value1))
(12 rows)

--Testcase 209:
SELECT value1 FROM s3 WHERE mysql_pi() > value1 ORDER BY 1;
 value1 
--------
    0.1
    0.2
    0.3
    1.1
    2.2
(5 rows)

-- slect stub function, order by pi (stub function)
--Testcase 210:
EXPLAIN VERBOSE
SELECT mysql_pi(), log2(value1) FROM s3 ORDER BY 1,2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=16)
   Output: (mysql_pi()), (log2(value1))
   Sort Key: (mysql_pi()), (log2(s3.value1))
   ->  Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=16)
         Output: (mysql_pi()), (log2(value1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT pi(), log2(`value1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_pi(), public.log2(value1) FROM public.s31mysql
(12 rows)

--Testcase 211:
SELECT mysql_pi(), log2(value1) FROM s3 ORDER BY 1,2;
 mysql_pi |        log2         
----------+---------------------
 3.141593 |  -3.321928073389531
 3.141593 |  -2.321928073389531
 3.141593 |  -1.736965536838657
 3.141593 | 0.13750355501950745
 3.141593 |  1.1375035550195074
 3.141593 |   1.722466003624709
(6 rows)

-- select pow (builtin function, explain)
--Testcase 212:
EXPLAIN VERBOSE
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 ORDER BY 1,2,3,4;
                                                                                                       QUERY PLAN                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=961.88..978.94 rows=6826 width=32)
   Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
   Sort Key: (pow(s3.value1, '2'::double precision)), (pow((s3.value2)::double precision, '2'::double precision)), (pow(s3.value3, '2'::double precision)), (pow((s3.value4)::double precision, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=32)
         Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT pow(`value1`, 2), pow(`value2`, 2), pow(`value3`, 2), pow(`value4`, 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT pow(value1, 2::double precision), pow(value2, 2::double precision), pow(value3, 2::double precision), pow(value4, 2::double precision) FROM public.s31mysql
(12 rows)

-- select pow (builtin function, result)
--Testcase 213:
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 ORDER BY 1,2,3,4;
         pow          |  pow  |         pow          |  pow  
----------------------+-------+----------------------+-------
 0.010000000298023226 | 10000 | 0.010000000298023226 | 10000
 0.040000001192092904 | 10000 | 0.040000001192092904 | 10000
  0.09000000715255752 | 10000 |  0.09000000715255752 | 10000
    1.210000052452088 | 40000 |    1.210000052452088 | 40000
    4.840000209808352 | 40000 |    4.840000209808352 | 40000
   10.889999685287478 | 40000 |   10.889999685287478 | 40000
(6 rows)

-- select pow (builtin function, not pushdown constraints, explain)
--Testcase 214:
EXPLAIN VERBOSE
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 WHERE to_hex(value2) != '64';
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..560.45 rows=6792 width=32)
   Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
   Filter: (to_hex(s3.value2) <> '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT pow(`value1`, 2), pow(`value2`, 2), pow(`value3`, 2), pow(`value4`, 2), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT pow(value1, 2::double precision), pow(value2, 2::double precision), pow(value3, 2::double precision), pow(value4, 2::double precision), value2 FROM public.s31mysql
(8 rows)

-- select pow (builtin function, not pushdown constraints, result)
--Testcase 215:
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 WHERE to_hex(value2) != '64';
        pow         |  pow  |        pow         |  pow  
--------------------+-------+--------------------+-------
  1.210000052452088 | 40000 |  1.210000052452088 | 40000
  4.840000209808352 | 40000 |  4.840000209808352 | 40000
 10.889999685287478 | 40000 | 10.889999685287478 | 40000
(3 rows)

-- select pow (builtin function, pushdown constraints, explain)
--Testcase 216:
EXPLAIN VERBOSE
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 WHERE value2 != 200;
                                                                                                 QUERY PLAN                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=32)
   Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT pow(`value1`, 2), pow(`value2`, 2), pow(`value3`, 2), pow(`value4`, 2) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT pow(value1, 2::double precision), pow(value2, 2::double precision), pow(value3, 2::double precision), pow(value4, 2::double precision) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select pow (builtin function, pushdown constraints, result)
--Testcase 217:
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 WHERE value2 != 200;
         pow          |  pow  |         pow          |  pow  
----------------------+-------+----------------------+-------
 0.010000000298023226 | 10000 | 0.010000000298023226 | 10000
 0.040000001192092904 | 10000 | 0.040000001192092904 | 10000
  0.09000000715255752 | 10000 |  0.09000000715255752 | 10000
(3 rows)

-- select pow as nest function with agg (pushdown, explain)
--Testcase 218:
EXPLAIN VERBOSE
SELECT sum(value3),pow(sum(value3), 2) FROM s3;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), pow((sum(value3)), '2'::double precision)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select pow as nest function with agg (pushdown, result)
--Testcase 219:
SELECT sum(value3),pow(sum(value3), 2) FROM s3;
        sum         |        pow        
--------------------+-------------------
 -7.200000040233135 | 51.84000057935715
(1 row)

-- select pow as nest with log2 (pushdown, explain)
--Testcase 220:
EXPLAIN VERBOSE
SELECT value1, pow(log2(value1), 2),pow(log2(1/value1), 2) FROM s3 ORDER BY 1,2,3;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (pow(log2(value1), '2'::double precision)), (pow(log2(('1'::double precision / value1)), '2'::double precision))
   Sort Key: s3.value1, (pow(log2(s3.value1), '2'::double precision)), (pow(log2(('1'::double precision / s3.value1)), '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (pow(log2(value1), '2'::double precision)), (pow(log2(('1'::double precision / value1)), '2'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, pow(log2(`value1`), 2), pow(log2((1 / `value1`)), 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, pow(public.log2(value1), 2::double precision), pow(public.log2((1::double precision / value1)), 2::double precision) FROM public.s31mysql
(12 rows)

-- select pow as nest with log2 (pushdown, result)
--Testcase 221:
SELECT value1, pow(log2(value1), 2),pow(log2(1/value1), 2) FROM s3 ORDER BY 1,2,3;
 value1 |         pow          |        pow         
--------+----------------------+--------------------
    0.1 |   11.035206124773483 | 11.035206124773483
    0.2 |     5.39134997799442 |   5.39134997799442
    0.3 |   3.0170492761652037 | 3.0170492761652046
    1.1 | 0.018907227643002712 | 0.0189072276430027
    2.2 |   1.2939143376820175 | 1.2939143376820175
    3.3 |    2.966889133642876 | 2.9668891336428755
(6 rows)

-- select pow with non pushdown func and explicit constant (explain)
--Testcase 222:
EXPLAIN VERBOSE
SELECT pow(value3, 2), pi(), 4.1 FROM s3 ORDER BY 1;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (pow(value3, '2'::double precision)), '3.141592653589793'::double precision, 4.1
   Sort Key: (pow(s3.value3, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (pow(value3, '2'::double precision)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT pow(`value3`, 2), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT pow(value3, 2::double precision), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select pow with non pushdown func and explicit constant (result)
--Testcase 223:
SELECT pow(value3, 2), pi(), 4.1 FROM s3 ORDER BY 1;
         pow          |        pi         | ?column? 
----------------------+-------------------+----------
 0.010000000298023226 | 3.141592653589793 |      4.1
 0.040000001192092904 | 3.141592653589793 |      4.1
  0.09000000715255752 | 3.141592653589793 |      4.1
    1.210000052452088 | 3.141592653589793 |      4.1
    4.840000209808352 | 3.141592653589793 |      4.1
   10.889999685287478 | 3.141592653589793 |      4.1
(6 rows)

-- select pow with order by (explain)
--Testcase 224:
EXPLAIN VERBOSE
SELECT value3, pow(1-value3, 2) FROM s3 ORDER BY pow(1-value3, 2);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value3, (pow(('1'::double precision - value3), '2'::double precision))
   Sort Key: (pow(('1'::double precision - s3.value3), '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value3, (pow(('1'::double precision - value3), '2'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value3`, pow((1 - `value3`), 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value3, pow((1::double precision - value3), 2::double precision) FROM public.s31mysql
(12 rows)

-- select pow with order by (result)
--Testcase 225:
SELECT value3, pow(1-value3, 2) FROM s3 ORDER BY pow(1-value3, 2);
 value3 |        pow         
--------+--------------------
   -0.1 | 1.2100000032782554
   -0.2 | 1.4400000071525574
   -0.3 | 1.6900000309944154
   -1.1 |  4.410000100135804
   -2.2 | 10.240000305175784
   -3.3 | 18.489999589920046
(6 rows)

-- select pow with order by index (result)
--Testcase 226:
SELECT value3, pow(1-value3, 2) FROM s3 ORDER BY 2,1;
 value3 |        pow         
--------+--------------------
   -0.1 | 1.2100000032782554
   -0.2 | 1.4400000071525574
   -0.3 | 1.6900000309944154
   -1.1 |  4.410000100135804
   -2.2 | 10.240000305175784
   -3.3 | 18.489999589920046
(6 rows)

-- select pow with order by index (result)
--Testcase 227:
SELECT value3, pow(1-value3, 2) FROM s3 ORDER BY 1,2;
 value3 |        pow         
--------+--------------------
   -3.3 | 18.489999589920046
   -2.2 | 10.240000305175784
   -1.1 |  4.410000100135804
   -0.3 | 1.6900000309944154
   -0.2 | 1.4400000071525574
   -0.1 | 1.2100000032782554
(6 rows)

-- select pow and as
--Testcase 228:
SELECT pow(value3, 2) as pow1 FROM s3 ORDER BY 1;
         pow1         
----------------------
 0.010000000298023226
 0.040000001192092904
  0.09000000715255752
    1.210000052452088
    4.840000209808352
   10.889999685287478
(6 rows)

-- We only test rand with constant and column because it will be stable
-- select rand (stub function, rand with column, explain)
--Testcase 229:
EXPLAIN VERBOSE
SELECT id, rand(id), rand(3) FROM s3 WHERE value2 != 200;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3854.14 rows=6792 width=20)
   Output: id, (rand((id)::double precision)), (rand('3'::double precision))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id`, rand(`id`), rand(3) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id, public.rand(id), public.rand(3::double precision) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select rand (stub function, rand with column, result)
--Testcase 230:
SELECT id, rand(id), rand(3) FROM s3 WHERE value2 != 200;
 id |        rand         |        rand         
----+---------------------+---------------------
  0 | 0.15522042769493574 |  0.9057697559760601
  1 | 0.40540353712197724 | 0.37307905813034536
  2 |  0.6555866465490187 | 0.14808605345719125
(3 rows)

-- rand() in WHERE clause only EXPLAIN, execute will return different result
--Testcase 231:
EXPLAIN VERBOSE
SELECT id, rand(id), rand(3), rand() FROM s3 WHERE rand() > 0.5;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3770.03 rows=2276 width=28)
   Output: id, (rand((id)::double precision)), (rand('3'::double precision)), (rand())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id`, rand(`id`), rand(3), rand() FROM `test`.`s32` WHERE ((rand() > 0.5))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id, public.rand(id), public.rand(3::double precision), public.rand() FROM public.s31mysql WHERE ((public.rand() > 0.5::double precision))
(7 rows)

-- select rand (stub function, explain)
--Testcase 232:
EXPLAIN VERBOSE
SELECT value1, rand(value1), rand(value2), rand(value3), rand(value4) FROM s3 ORDER BY 1,2,3,4,5;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7719.62..7736.68 rows=6826 width=40)
   Output: value1, (rand(value1)), (rand((value2)::double precision)), (rand(value3)), (rand((value4)::double precision))
   Sort Key: s3.value1, (rand(s3.value1)), (rand((s3.value2)::double precision)), (rand(s3.value3)), (rand((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..7284.91 rows=6826 width=40)
         Output: value1, (rand(value1)), (rand((value2)::double precision)), (rand(value3)), (rand((value4)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, rand(`value1`), rand(`value2`), rand(`value3`), rand(`value4`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.rand(value1), public.rand(value2), public.rand(value3), public.rand(value4) FROM public.s31mysql
(12 rows)

-- select rand (stub function, result)
--Testcase 233:
SELECT value1, rand(value1), rand(value2), rand(value3), rand(value4) FROM s3 ORDER BY 1,2,3,4,5;
 value1 |        rand         |        rand         |        rand         |        rand         
--------+---------------------+---------------------+---------------------+---------------------
    0.1 | 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026
    0.2 | 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026
    0.3 | 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026
    1.1 | 0.40540353712197724 | 0.19184226839974733 |  0.9050373219931845 | 0.11859859071541447
    2.2 |  0.6555866465490187 | 0.19184226839974733 |  0.6548542125661431 | 0.11859859071541447
    3.3 |  0.9057697559760601 | 0.19184226839974733 | 0.40467110313910165 | 0.11859859071541447
(6 rows)

-- select rand (stub function, not pushdown constraints, explain)
--Testcase 234:
EXPLAIN VERBOSE
SELECT rand(value1), rand(value2), rand(value3), rand(value4), rand(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..433.40 rows=34 width=40)
   Output: (rand(value1)), (rand((value2)::double precision)), (rand(value3)), (rand((value4)::double precision)), (rand('0.5'::double precision))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT rand(`value1`), rand(`value2`), rand(`value3`), rand(`value4`), rand(0.5), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.rand(value1), public.rand(value2), public.rand(value3), public.rand(value4), public.rand(0.5::double precision), value2 FROM public.s31mysql
(8 rows)

-- select rand (stub function, not pushdown constraints, result)
--Testcase 235:
SELECT rand(value1), rand(value2), rand(value3), rand(value4), rand(0.5) FROM s3 WHERE to_hex(value2) = '64';
        rand         |        rand         |        rand         |        rand         |        rand         
---------------------+---------------------+---------------------+---------------------+---------------------
 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026 | 0.40540353712197724
 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026 |  0.8716141803857071
 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026 |  0.1418603212962489
(3 rows)

-- select rand (stub function, pushdown constraints, explain)
--Testcase 236:
EXPLAIN VERBOSE
SELECT rand(value1), rand(value2), rand(value3), rand(value4), rand(0.5) FROM s3 WHERE value2 != 200;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..8965.12 rows=6792 width=40)
   Output: (rand(value1)), (rand((value2)::double precision)), (rand(value3)), (rand((value4)::double precision)), (rand('0.5'::double precision))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT rand(`value1`), rand(`value2`), rand(`value3`), rand(`value4`), rand(0.5) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.rand(value1), public.rand(value2), public.rand(value3), public.rand(value4), public.rand(0.5::double precision) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select rand (stub function, pushdown constraints, result)
--Testcase 237:
SELECT rand(value1), rand(value2), rand(value3), rand(value4), rand(0.5) FROM s3 WHERE value2 != 200;
        rand         |        rand         |        rand         |        rand         |        rand         
---------------------+---------------------+---------------------+---------------------+---------------------
 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026 | 0.40540353712197724
 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026 |  0.8716141803857071
 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026 |  0.1418603212962489
(3 rows)

-- select rand (stub function, rand in constraints, explain)
--Testcase 238:
EXPLAIN VERBOSE
SELECT value1, rand(value1), rand(value2), rand(value3), rand(value4) FROM s3 WHERE rand(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9405.92..9422.90 rows=6792 width=40)
   Output: value1, (rand(value1)), (rand((value2)::double precision)), (rand(value3)), (rand((value4)::double precision))
   Sort Key: s3.value1, (rand(s3.value1)), (rand((s3.value2)::double precision)), (rand(s3.value3)), (rand((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..8973.62 rows=6792 width=40)
         Output: value1, (rand(value1)), (rand((value2)::double precision)), (rand(value3)), (rand((value4)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, rand(`value1`), rand(`value2`), rand(`value3`), rand(`value4`) FROM `test`.`s32` WHERE ((rand(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.rand(value1), public.rand(value2), public.rand(value3), public.rand(value4) FROM public.s31mysql WHERE ((public.rand(value1) <> 1::double precision))
(12 rows)

-- select rand (stub function, rand in constraints, result)
--Testcase 239:
SELECT value1, rand(value1), rand(value2), rand(value3), rand(value4) FROM s3 WHERE rand(value1) != 1 ORDER BY 1,2,3,4,5;
 value1 |        rand         |        rand         |        rand         |        rand         
--------+---------------------+---------------------+---------------------+---------------------
    0.1 | 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026
    0.2 | 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026
    0.3 | 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026
    1.1 | 0.40540353712197724 | 0.19184226839974733 |  0.9050373219931845 | 0.11859859071541447
    2.2 |  0.6555866465490187 | 0.19184226839974733 |  0.6548542125661431 | 0.11859859071541447
    3.3 |  0.9057697559760601 | 0.19184226839974733 | 0.40467110313910165 | 0.11859859071541447
(6 rows)

-- select rand (stub function, rand in constraints, explain)
--Testcase 240:
EXPLAIN VERBOSE
SELECT value1, rand(value1), rand(value2), rand(value3), rand(value4) FROM s3 WHERE rand(0.5) > value1 - 1 ORDER BY 1,2,3,4,5;
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4488.70..4494.39 rows=2276 width=40)
   Output: value1, (rand(value1)), (rand((value2)::double precision)), (rand(value3)), (rand((value4)::double precision))
   Sort Key: s3.value1, (rand(s3.value1)), (rand((s3.value2)::double precision)), (rand(s3.value3)), (rand((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..4361.79 rows=2276 width=40)
         Output: value1, (rand(value1)), (rand((value2)::double precision)), (rand(value3)), (rand((value4)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, rand(`value1`), rand(`value2`), rand(`value3`), rand(`value4`) FROM `test`.`s32` WHERE ((rand(0.5) > (`value1` - 1)))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.rand(value1), public.rand(value2), public.rand(value3), public.rand(value4) FROM public.s31mysql WHERE ((public.rand(0.5::double precision) > (value1 - 1::double precision)))
(12 rows)

-- select rand (stub function, rand in constraints, result)
--Testcase 241:
SELECT value1, rand(value1), rand(value2), rand(value3), rand(value4) FROM s3 WHERE rand(0.5) > value1 - 1 ORDER BY 1,2,3,4,5;
 value1 |        rand         |        rand         |        rand         |        rand         
--------+---------------------+---------------------+---------------------+---------------------
    0.1 | 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026
    0.2 | 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026
    0.3 | 0.15522042769493574 | 0.17353134804734155 | 0.15522042769493574 | 0.13690951106782026
    1.1 | 0.40540353712197724 | 0.19184226839974733 |  0.9050373219931845 | 0.11859859071541447
(4 rows)

-- select rand as nest function with agg (not pushdown, explain)
--Testcase 242:
EXPLAIN VERBOSE
SELECT sum(value3),rand(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (sum(value3)), rand((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select rand as nest function with agg (not pushdown, error)
--Testcase 243:
SELECT sum(value3),rand(sum(value3)) FROM s3;
ERROR:  stub rand(float8) is called
CONTEXT:  PL/pgSQL function rand(double precision) line 3 at RAISE
-- select rand as nest with log2 (pushdown, explain)
--Testcase 244:
EXPLAIN VERBOSE
SELECT value1, rand(log2(value1)),rand(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7702.55..7719.62 rows=6826 width=24)
   Output: value1, (rand(log2(value1))), (rand(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (rand(log2(s3.value1))), (rand(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..7267.84 rows=6826 width=24)
         Output: value1, (rand(log2(value1))), (rand(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, rand(log2(`value1`)), rand(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.rand(public.log2(value1)), public.rand(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select rand as nest with log2 (pushdown, result)
--Testcase 245:
SELECT value1, rand(log2(value1)),rand(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |        rand         |        rand         
--------+---------------------+---------------------
    0.1 | 0.40467110313910165 |  0.9057697559760601
    0.2 |  0.6548542125661431 |  0.6555866465490187
    0.3 |  0.6548542125661431 |  0.6555866465490187
    1.1 | 0.15522042769493574 | 0.15522042769493574
    2.2 | 0.40540353712197724 |  0.9050373219931845
    3.3 |  0.6555866465490187 |  0.6548542125661431
(6 rows)

-- select rand with non pushdown func and explicit constant (explain)
--Testcase 246:
EXPLAIN VERBOSE
SELECT value1, rand(value3), pi(), 4.1 FROM s3 ORDER BY 1,2,3;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=56)
   Output: value1, (rand(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: s3.value1, (rand(s3.value3))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=56)
         Output: value1, (rand(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, rand(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.rand(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select rand with non pushdown func and explicit constant (result)
--Testcase 247:
SELECT value1, rand(value3), pi(), 4.1 FROM s3 ORDER BY 1,2,3;
 value1 |        rand         |        pi         | ?column? 
--------+---------------------+-------------------+----------
    0.1 | 0.15522042769493574 | 3.141592653589793 |      4.1
    0.2 | 0.15522042769493574 | 3.141592653589793 |      4.1
    0.3 | 0.15522042769493574 | 3.141592653589793 |      4.1
    1.1 |  0.9050373219931845 | 3.141592653589793 |      4.1
    2.2 |  0.6548542125661431 | 3.141592653589793 |      4.1
    3.3 | 0.40467110313910165 | 3.141592653589793 |      4.1
(6 rows)

-- select rand with order by (explain)
--Testcase 248:
EXPLAIN VERBOSE
SELECT value3, rand(1-value3) FROM s3 ORDER BY rand(1-value3);
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=16)
   Output: value3, (rand(('1'::double precision - value3)))
   Sort Key: (rand(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
         Output: value3, (rand(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value3`, rand((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value3, public.rand((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select rand with order by (result)
--Testcase 249:
SELECT value3, rand(1-value3) FROM s3 ORDER BY rand(1-value3);
 value3 |        rand         
--------+---------------------
   -3.3 | 0.15595286540310166
   -0.1 | 0.40540353712197724
   -0.2 | 0.40540353712197724
   -0.3 | 0.40540353712197724
   -1.1 |  0.6555866465490187
   -2.2 |  0.9057697559760601
(6 rows)

-- select rand with order by index (result)
--Testcase 250:
SELECT value3, rand(1-value3) FROM s3 ORDER BY 2,1;
 value3 |        rand         
--------+---------------------
   -3.3 | 0.15595286540310166
   -0.3 | 0.40540353712197724
   -0.2 | 0.40540353712197724
   -0.1 | 0.40540353712197724
   -1.1 |  0.6555866465490187
   -2.2 |  0.9057697559760601
(6 rows)

-- select rand with order by index (result)
--Testcase 251:
SELECT value3, rand(1-value3) FROM s3 ORDER BY 1,2;
 value3 |        rand         
--------+---------------------
   -3.3 | 0.15595286540310166
   -2.2 |  0.9057697559760601
   -1.1 |  0.6555866465490187
   -0.3 | 0.40540353712197724
   -0.2 | 0.40540353712197724
   -0.1 | 0.40540353712197724
(6 rows)

-- select rand with group by (explain)
--Testcase 252:
EXPLAIN VERBOSE
SELECT value1, rand(1-value3) FROM s3 GROUP BY value1, rand(1-value3) ORDER BY 1,2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=16)
   Output: value1, (rand(('1'::double precision - value3)))
   Sort Key: s3.value1, (rand(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=16)
         Output: value1, (rand(('1'::double precision - value3)))
         Group Key: s3.value1, (rand(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
               Output: value1, (rand(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, rand((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, public.rand((1::double precision - value3)) FROM public.s31mysql
(15 rows)

-- select rand with group by (result)
--Testcase 253:
SELECT value1, rand(1-value3) FROM s3 GROUP BY value1, rand(1-value3) ORDER BY 1,2;
 value1 |        rand         
--------+---------------------
    0.1 | 0.40540353712197724
    0.2 | 0.40540353712197724
    0.3 | 0.40540353712197724
    1.1 |  0.6555866465490187
    2.2 |  0.9057697559760601
    3.3 | 0.15595286540310166
(6 rows)

-- select rand with group by index (result)
--Testcase 254:
SELECT value1, rand(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |        rand         
--------+---------------------
    0.1 | 0.40540353712197724
    0.2 | 0.40540353712197724
    0.3 | 0.40540353712197724
    1.1 |  0.6555866465490187
    2.2 |  0.9057697559760601
    3.3 | 0.15595286540310166
(6 rows)

-- select rand with group by index (result)
--Testcase 255:
SELECT value1, rand(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |        rand         
--------+---------------------
    0.1 | 0.40540353712197724
    0.2 | 0.40540353712197724
    0.3 | 0.40540353712197724
    1.1 |  0.6555866465490187
    2.2 |  0.9057697559760601
    3.3 | 0.15595286540310166
(6 rows)

-- select rand with group by having (explain)
--Testcase 256:
EXPLAIN VERBOSE
SELECT value1, rand(1-value3) FROM s3 GROUP BY value1, rand(1-value3) HAVING avg(value1) > 0 ORDER BY 1,2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=2221.49..2221.66 rows=67 width=16)
   Output: value1, (rand(('1'::double precision - value3)))
   Sort Key: s3.value1, (rand(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=2199.54..2219.46 rows=67 width=16)
         Output: value1, (rand(('1'::double precision - value3)))
         Group Key: s3.value1, (rand(('1'::double precision - s3.value3)))
         Filter: (avg(s3.value1) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
               Output: value1, (rand(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, rand((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, public.rand((1::double precision - value3)) FROM public.s31mysql
(16 rows)

-- select rand with group by having (result)
--Testcase 257:
SELECT value1, rand(1-value3) FROM s3 GROUP BY value1, rand(1-value3) HAVING avg(value1) > 0 ORDER BY 1,2;
 value1 |        rand         
--------+---------------------
    0.1 | 0.40540353712197724
    0.2 | 0.40540353712197724
    0.3 | 0.40540353712197724
    1.1 |  0.6555866465490187
    2.2 |  0.9057697559760601
    3.3 | 0.15595286540310166
(6 rows)

-- select rand with group by index having (result)
--Testcase 258:
SELECT value1, rand(1-value1) FROM s3 GROUP BY 1,2 HAVING value1 < 1 ORDER BY 1,2;
 value1 |        rand         
--------+---------------------
    0.1 | 0.40540353712197724
    0.2 | 0.40540353712197724
    0.3 | 0.40540353712197724
(3 rows)

-- select rand and as
--Testcase 259:
SELECT value1, rand(value3) as rand1 FROM s3 ORDER BY 1,2;
 value1 |        rand1        
--------+---------------------
    0.1 | 0.15522042769493574
    0.2 | 0.15522042769493574
    0.3 | 0.15522042769493574
    1.1 |  0.9050373219931845
    2.2 |  0.6548542125661431
    3.3 | 0.40467110313910165
(6 rows)

-- select truncate (stub function, explain)
--Testcase 260:
EXPLAIN VERBOSE
SELECT truncate(value1, 2), truncate(value2, 2), truncate(value3, 2), truncate(value4, 2), truncate(5, 2) FROM s3 ORDER BY 1,2,3,4,5;
                                                                                                QUERY PLAN                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9426.12..9443.18 rows=6826 width=40)
   Output: (truncate(value1, 2)), (truncate((value2)::double precision, 2)), (truncate(value3, 2)), (truncate((value4)::double precision, 2)), (truncate('5'::double precision, 2))
   Sort Key: (truncate(s3.value1, 2)), (truncate((s3.value2)::double precision, 2)), (truncate(s3.value3, 2)), (truncate((s3.value4)::double precision, 2)), (truncate('5'::double precision, 2))
   ->  Foreign Scan on public.s3  (cost=200.00..8991.41 rows=6826 width=40)
         Output: (truncate(value1, 2)), (truncate((value2)::double precision, 2)), (truncate(value3, 2)), (truncate((value4)::double precision, 2)), (truncate('5'::double precision, 2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT truncate(`value1`, 2), truncate(`value2`, 2), truncate(`value3`, 2), truncate(`value4`, 2), truncate(5, 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.truncate(value1, 2), public.truncate(value2, 2), public.truncate(value3, 2), public.truncate(value4, 2), public.truncate(5::double precision, 2) FROM public.s31mysql
(12 rows)

-- select truncate (stub function, result)
--Testcase 261:
SELECT truncate(value1, 2), truncate(value2, 2), truncate(value3, 2), truncate(value4, 2), truncate(5, 2) FROM s3 ORDER BY 1,2,3,4,5;
 truncate | truncate | truncate | truncate | truncate 
----------+----------+----------+----------+----------
      0.1 |      100 |     -0.1 |     -100 |        5
      0.2 |      100 |     -0.2 |     -100 |        5
      0.3 |      100 |     -0.3 |     -100 |        5
      1.1 |      200 |     -1.1 |     -200 |        5
      2.2 |      200 |     -2.2 |     -200 |        5
     3.29 |      200 |    -3.29 |     -200 |        5
(6 rows)

-- select truncate (stub function, not pushdown constraints, explain)
--Testcase 262:
EXPLAIN VERBOSE
SELECT truncate(value1, 2), truncate(value2, 2), truncate(value3, 2), truncate(value4, 2), truncate(5, 2) FROM s3 WHERE to_hex(value2) = '64';
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..433.40 rows=34 width=40)
   Output: (truncate(value1, 2)), (truncate((value2)::double precision, 2)), (truncate(value3, 2)), (truncate((value4)::double precision, 2)), (truncate('5'::double precision, 2))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT truncate(`value1`, 2), truncate(`value2`, 2), truncate(`value3`, 2), truncate(`value4`, 2), truncate(5, 2), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.truncate(value1, 2), public.truncate(value2, 2), public.truncate(value3, 2), public.truncate(value4, 2), public.truncate(5::double precision, 2), value2 FROM public.s31mysql
(8 rows)

-- select truncate (stub function, not pushdown constraints, result)
--Testcase 263:
SELECT truncate(value1, 2), truncate(value2, 2), truncate(value3, 2), truncate(value4, 2), truncate(5, 2) FROM s3 WHERE to_hex(value2) = '64';
 truncate | truncate | truncate | truncate | truncate 
----------+----------+----------+----------+----------
      0.1 |      100 |     -0.1 |     -100 |        5
      0.2 |      100 |     -0.2 |     -100 |        5
      0.3 |      100 |     -0.3 |     -100 |        5
(3 rows)

-- select truncate (stub function, pushdown constraints, explain)
--Testcase 264:
EXPLAIN VERBOSE
SELECT truncate(value1, 2), truncate(value2, 2), truncate(value3, 2), truncate(value4, 2), truncate(5, 2) FROM s3 WHERE value2 != 200;
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..8965.12 rows=6792 width=40)
   Output: (truncate(value1, 2)), (truncate((value2)::double precision, 2)), (truncate(value3, 2)), (truncate((value4)::double precision, 2)), (truncate('5'::double precision, 2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT truncate(`value1`, 2), truncate(`value2`, 2), truncate(`value3`, 2), truncate(`value4`, 2), truncate(5, 2) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.truncate(value1, 2), public.truncate(value2, 2), public.truncate(value3, 2), public.truncate(value4, 2), public.truncate(5::double precision, 2) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select truncate (stub function, pushdown constraints, result)
--Testcase 265:
SELECT truncate(value1, 2), truncate(value2, 2), truncate(value3, 2), truncate(value4, 2), truncate(5, 2) FROM s3 WHERE value2 != 200;
 truncate | truncate | truncate | truncate | truncate 
----------+----------+----------+----------+----------
      0.1 |      100 |     -0.1 |     -100 |        5
      0.2 |      100 |     -0.2 |     -100 |        5
      0.3 |      100 |     -0.3 |     -100 |        5
(3 rows)

-- select truncate (stub function, truncate in constraints, explain)
--Testcase 266:
EXPLAIN VERBOSE
SELECT truncate(value1, 2), truncate(value2, 2), truncate(value3, 2), truncate(value4, 2), truncate(5, 2) FROM s3 WHERE truncate(value1, 2) != 1 ORDER BY 1,2,3,4,5;
                                                                                                                              QUERY PLAN                                                                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11103.92..11120.90 rows=6792 width=40)
   Output: (truncate(value1, 2)), (truncate((value2)::double precision, 2)), (truncate(value3, 2)), (truncate((value4)::double precision, 2)), (truncate('5'::double precision, 2))
   Sort Key: (truncate(s3.value1, 2)), (truncate((s3.value2)::double precision, 2)), (truncate(s3.value3, 2)), (truncate((s3.value4)::double precision, 2)), (truncate('5'::double precision, 2))
   ->  Foreign Scan on public.s3  (cost=200.00..10671.62 rows=6792 width=40)
         Output: (truncate(value1, 2)), (truncate((value2)::double precision, 2)), (truncate(value3, 2)), (truncate((value4)::double precision, 2)), (truncate('5'::double precision, 2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT truncate(`value1`, 2), truncate(`value2`, 2), truncate(`value3`, 2), truncate(`value4`, 2), truncate(5, 2) FROM `test`.`s32` WHERE ((truncate(`value1`, 2) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.truncate(value1, 2), public.truncate(value2, 2), public.truncate(value3, 2), public.truncate(value4, 2), public.truncate(5::double precision, 2) FROM public.s31mysql WHERE ((public.truncate(value1, 2) <> 1::double precision))
(12 rows)

-- select truncate (stub function, truncate in constraints, result)
--Testcase 267:
SELECT truncate(value1, 2), truncate(value2, 2), truncate(value3, 2), truncate(value4, 2), truncate(5, 2) FROM s3 WHERE truncate(value1, 2) != 1 ORDER BY 1,2,3,4,5;
 truncate | truncate | truncate | truncate | truncate 
----------+----------+----------+----------+----------
      0.1 |      100 |     -0.1 |     -100 |        5
      0.2 |      100 |     -0.2 |     -100 |        5
      0.3 |      100 |     -0.3 |     -100 |        5
      1.1 |      200 |     -1.1 |     -200 |        5
      2.2 |      200 |     -2.2 |     -200 |        5
     3.29 |      200 |    -3.29 |     -200 |        5
(6 rows)

-- select truncate (stub function, truncate in constraints, explain)
--Testcase 268:
EXPLAIN VERBOSE
SELECT truncate(value1, 2), truncate(value2, 2), truncate(value3, 2), truncate(value4, 2), truncate(5, 2) FROM s3 WHERE truncate(5, 2) > value1 ORDER BY 1,2,3,4,5;
                                                                                                                              QUERY PLAN                                                                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5040.64..5046.33 rows=2276 width=40)
   Output: (truncate(value1, 2)), (truncate((value2)::double precision, 2)), (truncate(value3, 2)), (truncate((value4)::double precision, 2)), (truncate('5'::double precision, 2))
   Sort Key: (truncate(s3.value1, 2)), (truncate((s3.value2)::double precision, 2)), (truncate(s3.value3, 2)), (truncate((s3.value4)::double precision, 2)), (truncate('5'::double precision, 2))
   ->  Foreign Scan on public.s3  (cost=200.00..4913.73 rows=2276 width=40)
         Output: (truncate(value1, 2)), (truncate((value2)::double precision, 2)), (truncate(value3, 2)), (truncate((value4)::double precision, 2)), (truncate('5'::double precision, 2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT truncate(`value1`, 2), truncate(`value2`, 2), truncate(`value3`, 2), truncate(`value4`, 2), truncate(5, 2) FROM `test`.`s32` WHERE ((truncate(5, 2) > `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.truncate(value1, 2), public.truncate(value2, 2), public.truncate(value3, 2), public.truncate(value4, 2), public.truncate(5::double precision, 2) FROM public.s31mysql WHERE ((public.truncate(5::double precision, 2) > value1))
(12 rows)

-- select truncate (stub function, truncate in constraints, result)
--Testcase 269:
SELECT truncate(value1, 2), truncate(value2, 2), truncate(value3, 2), truncate(value4, 2), truncate(5, 2) FROM s3 WHERE truncate(5, 2) > value1 ORDER BY 1,2,3,4,5;
 truncate | truncate | truncate | truncate | truncate 
----------+----------+----------+----------+----------
      0.1 |      100 |     -0.1 |     -100 |        5
      0.2 |      100 |     -0.2 |     -100 |        5
      0.3 |      100 |     -0.3 |     -100 |        5
      1.1 |      200 |     -1.1 |     -200 |        5
      2.2 |      200 |     -2.2 |     -200 |        5
     3.29 |      200 |    -3.29 |     -200 |        5
(6 rows)

-- select truncate as nest function with agg (not pushdown, explain)
--Testcase 270:
EXPLAIN VERBOSE
SELECT sum(value3),truncate(sum(value3), 2) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (sum(value3)), truncate((sum(value3)), 2)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select truncate as nest function with agg (not pushdown, error)
--Testcase 271:
SELECT sum(value3),truncate(sum(value3), 2) FROM s3;
ERROR:  stub truncate(float8, int) is called
CONTEXT:  PL/pgSQL function truncate(double precision,integer) line 3 at RAISE
-- select truncate as nest with log2 (pushdown, explain)
--Testcase 272:
EXPLAIN VERBOSE
SELECT truncate(log2(value1), 2),truncate(log2(1/value1), 2) FROM s3 ORDER BY 1,2;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7702.55..7719.62 rows=6826 width=16)
   Output: (truncate(log2(value1), 2)), (truncate(log2(('1'::double precision / value1)), 2))
   Sort Key: (truncate(log2(s3.value1), 2)), (truncate(log2(('1'::double precision / s3.value1)), 2))
   ->  Foreign Scan on public.s3  (cost=200.00..7267.84 rows=6826 width=16)
         Output: (truncate(log2(value1), 2)), (truncate(log2(('1'::double precision / value1)), 2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT truncate(log2(`value1`), 2), truncate(log2((1 / `value1`)), 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.truncate(public.log2(value1), 2), public.truncate(public.log2((1::double precision / value1)), 2) FROM public.s31mysql
(12 rows)

-- select truncate as nest with log2 (pushdown, result)
--Testcase 273:
SELECT truncate(log2(value1), 2),truncate(log2(1/value1), 2) FROM s3 ORDER BY 1,2;
 truncate | truncate 
----------+----------
    -3.32 |     3.32
    -2.32 |     2.32
    -1.73 |     1.73
     0.13 |    -0.13
     1.13 |    -1.13
     1.72 |    -1.72
(6 rows)

-- select truncate with non pushdown func and explicit constant (explain)
--Testcase 274:
EXPLAIN VERBOSE
SELECT truncate(value3, 2), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=48)
   Output: (truncate(value3, 2)), '3.141592653589793'::double precision, 4.1
   Sort Key: (truncate(s3.value3, 2)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=48)
         Output: (truncate(value3, 2)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT truncate(`value3`, 2), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.truncate(value3, 2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select truncate with non pushdown func and explicit constant (result)
--Testcase 275:
SELECT truncate(value3, 2), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
 truncate |        pi         | ?column? 
----------+-------------------+----------
     -0.1 | 3.141592653589793 |      4.1
     -0.2 | 3.141592653589793 |      4.1
     -0.3 | 3.141592653589793 |      4.1
     -1.1 | 3.141592653589793 |      4.1
     -2.2 | 3.141592653589793 |      4.1
    -3.29 | 3.141592653589793 |      4.1
(6 rows)

-- select truncate with order by (explain)
--Testcase 276:
EXPLAIN VERBOSE
SELECT value3, truncate(1-value3, 2) FROM s3 ORDER BY truncate(1-value3, 2);
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=16)
   Output: value3, (truncate(('1'::double precision - value3), 2))
   Sort Key: (truncate(('1'::double precision - s3.value3), 2))
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
         Output: value3, (truncate(('1'::double precision - value3), 2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value3`, truncate((1 - `value3`), 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value3, public.truncate((1::double precision - value3), 2) FROM public.s31mysql
(12 rows)

-- select truncate with order by (result)
--Testcase 277:
SELECT value3, truncate(1-value3, 2) FROM s3 ORDER BY truncate(1-value3, 2);
 value3 | truncate 
--------+----------
   -0.1 |      1.1
   -0.2 |      1.2
   -0.3 |      1.3
   -1.1 |      2.1
   -2.2 |      3.2
   -3.3 |     4.29
(6 rows)

-- select truncate with order by index (result)
--Testcase 278:
SELECT value3, truncate(1-value3, 2) FROM s3 ORDER BY 2,1;
 value3 | truncate 
--------+----------
   -0.1 |      1.1
   -0.2 |      1.2
   -0.3 |      1.3
   -1.1 |      2.1
   -2.2 |      3.2
   -3.3 |     4.29
(6 rows)

-- select truncate with order by index (result)
--Testcase 279:
SELECT value3, truncate(1-value3, 2) FROM s3 ORDER BY 1,2;
 value3 | truncate 
--------+----------
   -3.3 |     4.29
   -2.2 |      3.2
   -1.1 |      2.1
   -0.3 |      1.3
   -0.2 |      1.2
   -0.1 |      1.1
(6 rows)

-- select truncate with group by (explain)
--Testcase 280:
EXPLAIN VERBOSE
SELECT count(value1), truncate(1-value3, 2) FROM s3 GROUP BY truncate(1-value3, 2) ORDER BY 1,2;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=16)
   Output: (count(value1)), (truncate(('1'::double precision - value3), 2))
   Sort Key: (count(s3.value1)), (truncate(('1'::double precision - s3.value3), 2))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=16)
         Output: count(value1), (truncate(('1'::double precision - value3), 2))
         Group Key: (truncate(('1'::double precision - s3.value3), 2))
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
               Output: (truncate(('1'::double precision - value3), 2)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT truncate((1 - `value3`), 2), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.truncate((1::double precision - value3), 2), value1 FROM public.s31mysql
(15 rows)

-- select truncate with group by (result)
--Testcase 281:
SELECT count(value1), truncate(1-value3, 2) FROM s3 GROUP BY truncate(1-value3, 2) ORDER BY 1,2;
 count | truncate 
-------+----------
     1 |      1.1
     1 |      1.2
     1 |      1.3
     1 |      2.1
     1 |      3.2
     1 |     4.29
(6 rows)

-- select truncate with group by index (result)
--Testcase 282:
SELECT value3, truncate(1-value3, 2) FROM s3 GROUP BY 2,1 ORDER BY 2,1;
 value3 | truncate 
--------+----------
   -0.1 |      1.1
   -0.2 |      1.2
   -0.3 |      1.3
   -1.1 |      2.1
   -2.2 |      3.2
   -3.3 |     4.29
(6 rows)

-- select truncate with group by index (result)
--Testcase 283:
SELECT value3, truncate(1-value3, 2) FROM s3 GROUP BY 1,2 ORDER BY 2,1;
 value3 | truncate 
--------+----------
   -0.1 |      1.1
   -0.2 |      1.2
   -0.3 |      1.3
   -1.1 |      2.1
   -2.2 |      3.2
   -3.3 |     4.29
(6 rows)

-- select truncate with group by having (explain)
--Testcase 284:
EXPLAIN VERBOSE
SELECT count(value1), truncate(1-value3, 2) FROM s3 GROUP BY truncate(1-value3, 2) HAVING avg(value1) > 0 ORDER BY 1,2;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2221.49..2221.66 rows=67 width=16)
   Output: (count(value1)), (truncate(('1'::double precision - value3), 2))
   Sort Key: (count(s3.value1)), (truncate(('1'::double precision - s3.value3), 2))
   ->  HashAggregate  (cost=2199.54..2219.46 rows=67 width=16)
         Output: count(value1), (truncate(('1'::double precision - value3), 2))
         Group Key: (truncate(('1'::double precision - s3.value3), 2))
         Filter: (avg(s3.value1) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
               Output: (truncate(('1'::double precision - value3), 2)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT truncate((1 - `value3`), 2), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.truncate((1::double precision - value3), 2), value1 FROM public.s31mysql
(16 rows)

-- select truncate with group by having (result)
--Testcase 285:
SELECT count(value1), truncate(1-value3, 2) FROM s3 GROUP BY truncate(1-value3, 2) HAVING avg(value1) > 0 ORDER BY 1,2;
 count | truncate 
-------+----------
     1 |      1.1
     1 |      1.2
     1 |      1.3
     1 |      2.1
     1 |      3.2
     1 |     4.29
(6 rows)

-- select truncate with group by index having (result)
--Testcase 286:
SELECT value3, truncate(1-value3, 2) FROM s3 GROUP BY 2,1 HAVING truncate(1-value3, 2) > 0 ORDER BY 2,1;
 value3 | truncate 
--------+----------
   -0.1 |      1.1
   -0.2 |      1.2
   -0.3 |      1.3
   -1.1 |      2.1
   -2.2 |      3.2
   -3.3 |     4.29
(6 rows)

-- select truncate with group by index having (result)
--Testcase 287:
SELECT value3, truncate(1-value3, 2) FROM s3 GROUP BY 1,2 HAVING value3 > 1;
 value3 | truncate 
--------+----------
(0 rows)

-- select truncate and as
--Testcase 288:
SELECT truncate(value3, 2) as truncate1 FROM s3 ORDER BY 1 DESC;
 truncate1 
-----------
      -0.1
      -0.2
      -0.3
      -1.1
      -2.2
     -3.29
(6 rows)

-- select round (builtin function, explain)
--Testcase 289:
EXPLAIN VERBOSE
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=961.88..978.94 rows=6826 width=64)
   Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision)), '1'::numeric
   Sort Key: (round(s3.value1)), (round((s3.value2)::double precision)), (round(s3.value3)), (round((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=64)
         Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision)), '1'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT round(`value1`), round(`value2`), round(`value3`), round(`value4`), 1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT round(value1), round(value2), round(value3), round(value4), 1::numeric FROM public.s31mysql
(12 rows)

-- select round (builtin function, result)
--Testcase 290:
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM s3 ORDER BY 1,2,3,4,5;
 round | round | round | round | round 
-------+-------+-------+-------+-------
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     1 |   200 |    -1 |  -200 |     1
     2 |   200 |    -2 |  -200 |     1
     3 |   200 |    -3 |  -200 |     1
(6 rows)

-- select round (builtin function, not pushdown constraints, explain)
--Testcase 291:
EXPLAIN VERBOSE
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=64)
   Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision)), '1'::numeric
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT round(`value1`), round(`value2`), round(`value3`), round(`value4`), 1, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT round(value1), round(value2), round(value3), round(value4), 1::numeric, value2 FROM public.s31mysql
(8 rows)

-- select round (builtin function, not pushdown constraints, result)
--Testcase 292:
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM s3 WHERE to_hex(value2) = '64';
 round | round | round | round | round 
-------+-------+-------+-------+-------
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
(3 rows)

-- select round (builtin function, pushdown constraints, explain)
--Testcase 293:
EXPLAIN VERBOSE
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM s3 WHERE value2 != 200;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=64)
   Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT round(`value1`), round(`value2`), round(`value3`), round(`value4`), 1 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT round(value1), round(value2), round(value3), round(value4), 1::numeric FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select round (builtin function, pushdown constraints, result)
--Testcase 294:
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM s3 WHERE value2 != 200;
 round | round | round | round | round 
-------+-------+-------+-------+-------
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
(3 rows)

-- select round (builtin function, round in constraints, explain)
--Testcase 295:
EXPLAIN VERBOSE
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM s3 WHERE round(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=992.41..1009.39 rows=6792 width=64)
   Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision)), '1'::numeric
   Sort Key: (round(s3.value1)), (round((s3.value2)::double precision)), (round(s3.value3)), (round((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..560.11 rows=6792 width=64)
         Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision)), '1'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT round(`value1`), round(`value2`), round(`value3`), round(`value4`), 1 FROM `test`.`s32` WHERE ((round(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT round(value1), round(value2), round(value3), round(value4), 1::numeric FROM public.s31mysql WHERE ((round(value1) <> 1::double precision))
(12 rows)

-- select round (builtin function, round in constraints, result)
--Testcase 296:
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM s3 WHERE round(value1) != 1 ORDER BY 1,2,3,4,5;
 round | round | round | round | round 
-------+-------+-------+-------+-------
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     2 |   200 |    -2 |  -200 |     1
     3 |   200 |    -3 |  -200 |     1
(5 rows)

-- select round (builtin function, round in constraints, explain)
--Testcase 297:
EXPLAIN VERBOSE
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM s3 WHERE round(0.5) > value1;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=64)
   Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT round(`value1`), round(`value2`), round(`value3`), round(`value4`), 1 FROM `test`.`s32` WHERE ((1 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT round(value1), round(value2), round(value3), round(value4), 1::numeric FROM public.s31mysql WHERE ((1::double precision > value1))
(7 rows)

-- select round (builtin function, round in constraints, result)
--Testcase 298:
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM s3 WHERE round(0.5) > value1;
 round | round | round | round | round 
-------+-------+-------+-------+-------
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
(3 rows)

-- select round as nest function with agg (pushdown, explain)
--Testcase 299:
EXPLAIN VERBOSE
SELECT sum(value3),round(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), round((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select round as nest function with agg (pushdown, result)
--Testcase 300:
SELECT sum(value3),round(sum(value3)) FROM s3;
        sum         | round 
--------------------+-------
 -7.200000040233135 |    -7
(1 row)

-- select round as nest with log2 (pushdown, explain)
--Testcase 301:
EXPLAIN VERBOSE
SELECT round(log2(value1)),round(log2(1/value1)) FROM s3 ORDER BY 1,2;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=16)
   Output: (round(log2(value1))), (round(log2(('1'::double precision / value1))))
   Sort Key: (round(log2(s3.value1))), (round(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=16)
         Output: (round(log2(value1))), (round(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT round(log2(`value1`)), round(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT round(public.log2(value1)), round(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select round as nest with log2 (pushdown, result)
--Testcase 302:
SELECT round(log2(value1)),round(log2(1/value1)) FROM s3 ORDER BY 1,2;
 round | round 
-------+-------
    -3 |     3
    -2 |     2
    -2 |     2
     0 |    -0
     1 |    -1
     2 |    -2
(6 rows)

-- select round with non pushdown func and explicit constant (explain)
--Testcase 303:
EXPLAIN VERBOSE
SELECT round(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (round(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (round(s3.value3)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (round(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT round(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT round(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select round with non pushdown func and explicit constant (result)
--Testcase 304:
SELECT round(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
 round |        pi         | ?column? 
-------+-------------------+----------
    -0 | 3.141592653589793 |      4.1
    -0 | 3.141592653589793 |      4.1
    -0 | 3.141592653589793 |      4.1
    -1 | 3.141592653589793 |      4.1
    -2 | 3.141592653589793 |      4.1
    -3 | 3.141592653589793 |      4.1
(6 rows)

-- select round with order by (explain)
--Testcase 305:
EXPLAIN VERBOSE
SELECT value1, round(1-value3) FROM s3 ORDER BY round(1-value3);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (round(('1'::double precision - value3)))
   Sort Key: (round(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (round(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, round((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, round((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select round with order by (result)
--Testcase 306:
SELECT value1, round(1-value3) FROM s3 ORDER BY round(1-value3);
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |     2
    2.2 |     3
    3.3 |     4
(6 rows)

-- select round with order by index (result)
--Testcase 307:
SELECT value1, round(1-value3) FROM s3 ORDER BY 2,1;
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |     2
    2.2 |     3
    3.3 |     4
(6 rows)

-- select round with order by index (result)
--Testcase 308:
SELECT value1, round(1-value3) FROM s3 ORDER BY 1,2;
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |     2
    2.2 |     3
    3.3 |     4
(6 rows)

-- select round with group by (explain)
--Testcase 309:
EXPLAIN VERBOSE
SELECT count(value1), round(1-value3) FROM s3 GROUP BY round(1-value3) ORDER BY 2,1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (round(('1'::double precision - value3)))
   Sort Key: (round(('1'::double precision - s3.value3))), (count(s3.value1))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (round(('1'::double precision - value3)))
         Group Key: (round(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (round(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT round((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT round((1::double precision - value3)), value1 FROM public.s31mysql
(15 rows)

-- select round with group by (result)
--Testcase 310:
SELECT count(value1), round(1-value3) FROM s3 GROUP BY round(1-value3) ORDER BY 2,1;
 count | round 
-------+-------
     3 |     1
     1 |     2
     1 |     3
     1 |     4
(4 rows)

-- select round with group by index (result)
--Testcase 311:
SELECT value1, round(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |     2
    2.2 |     3
    3.3 |     4
(6 rows)

-- select round with group by index (result)
--Testcase 312:
SELECT value1, round(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |     2
    2.2 |     3
    3.3 |     4
(6 rows)

-- select round with group by having (explain)
--Testcase 313:
EXPLAIN VERBOSE
SELECT count(value1), round(1-value3) FROM s3 GROUP BY round(1-value3) HAVING round(avg(value1)) > 0 ORDER BY 2,1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: (count(value1)), (round(('1'::double precision - value3)))
   Sort Key: (round(('1'::double precision - s3.value3))), (count(s3.value1))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: count(value1), (round(('1'::double precision - value3)))
         Group Key: (round(('1'::double precision - s3.value3)))
         Filter: (round(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (round(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT round((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT round((1::double precision - value3)), value1 FROM public.s31mysql
(16 rows)

-- select round with group by having (result)
--Testcase 314:
SELECT count(value1), round(1-value3) FROM s3 GROUP BY round(1-value3) HAVING round(avg(value1)) > 0 ORDER BY 2,1;
 count | round 
-------+-------
     1 |     2
     1 |     3
     1 |     4
(3 rows)

-- select round with group by index having (result)
--Testcase 315:
SELECT value1, round(1-value3) FROM s3 GROUP BY 2,1 HAVING round(1-value3) > 0 ORDER BY 1,2;
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |     2
    2.2 |     3
    3.3 |     4
(6 rows)

-- select round with group by index having (result)
--Testcase 316:
SELECT value1, round(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | round 
--------+-------
    1.1 |     2
    2.2 |     3
    3.3 |     4
(3 rows)

-- select round and as
--Testcase 317:
SELECT round(value3) as round1 FROM s3 ORDER BY 1 DESC;
 round1 
--------
     -0
     -0
     -0
     -1
     -2
     -3
(6 rows)

-- select acos (builtin function, explain)
--Testcase 318:
EXPLAIN VERBOSE
SELECT value1, acos(value3), acos(0.5) FROM s3 ORDER BY 1,2,3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=24)
   Output: value1, (acos(value3)), '1.0471975511965979'::double precision
   Sort Key: s3.value1, (acos(s3.value3))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=24)
         Output: value1, (acos(value3)), '1.0471975511965979'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, acos(`value3`), 1.0471975511965979 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, acos(value3), 1.0471975511965979::double precision FROM public.s31mysql
(12 rows)

-- select acos (builtin function, result)
--Testcase 319:
SELECT value1, acos(value3), acos(0.5) FROM s3 ORDER BY 1,2,3;
 value1 |        acos        |        acos        
--------+--------------------+--------------------
    0.1 | 1.6709637494540794 | 1.0471975511965979
    0.2 | 1.7721542506269141 | 1.0471975511965979
    0.3 | 1.8754889933068233 | 1.0471975511965979
    1.1 |                    | 1.0471975511965979
    2.2 |                    | 1.0471975511965979
    3.3 |                    | 1.0471975511965979
(6 rows)

-- select acos (builtin function, not pushdown constraints, explain)
--Testcase 320:
EXPLAIN VERBOSE
SELECT acos(value1), acos(value3), acos(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.90 rows=34 width=24)
   Output: (acos(value1)), (acos(value3)), '1.0471975511965979'::double precision
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT acos(`value1`), acos(`value3`), 1.0471975511965979, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT acos(value1), acos(value3), 1.0471975511965979::double precision, value2 FROM public.s31mysql
(8 rows)

-- select acos (builtin function, not pushdown constraints, result)
--Testcase 321:
SELECT acos(value1), acos(value3), acos(0.5) FROM s3 WHERE to_hex(value2) = '64';
        acos        |        acos        |        acos        
--------------------+--------------------+--------------------
 1.4706289041357137 | 1.6709637494540794 | 1.0471975511965979
  1.369438402962879 | 1.7721542506269141 | 1.0471975511965979
   1.26610366028297 | 1.8754889933068233 | 1.0471975511965979
(3 rows)

-- select acos (builtin function, pushdown constraints, explain)
--Testcase 322:
EXPLAIN VERBOSE
SELECT acos(value1), acos(value3), acos(0.5) FROM s3 WHERE value2 != 200;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..475.12 rows=6792 width=24)
   Output: (acos(value1)), (acos(value3)), '1.0471975511965979'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT acos(`value1`), acos(`value3`), 1.0471975511965979 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT acos(value1), acos(value3), 1.0471975511965979::double precision FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select acos (builtin function, pushdown constraints, result)
--Testcase 323:
SELECT acos(value1), acos(value3), acos(0.5) FROM s3 WHERE value2 != 200;
        acos        |        acos        |        acos        
--------------------+--------------------+--------------------
 1.4706289041357137 | 1.6709637494540794 | 1.0471975511965979
  1.369438402962879 | 1.7721542506269141 | 1.0471975511965979
   1.26610366028297 | 1.8754889933068233 | 1.0471975511965979
(3 rows)

-- select acos (builtin function, acos in constraints, explain)
--Testcase 324:
EXPLAIN VERBOSE
SELECT acos(value1), acos(value3), acos(0.5) FROM s3 WHERE acos(value1) != 1;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..492.19 rows=6792 width=24)
   Output: (acos(value1)), (acos(value3)), '1.0471975511965979'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT acos(`value1`), acos(`value3`), 1.0471975511965979 FROM `test`.`s32` WHERE ((acos(`value1`) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT acos(value1), acos(value3), 1.0471975511965979::double precision FROM public.s31mysql WHERE ((acos(value1) <> 1::double precision))
(7 rows)

-- select acos (builtin function, acos in constraints, result)
--Testcase 325:
SELECT acos(value1), acos(value3), acos(0.5) FROM s3 WHERE acos(value1) != 1;
        acos        |        acos        |        acos        
--------------------+--------------------+--------------------
 1.4706289041357137 | 1.6709637494540794 | 1.0471975511965979
  1.369438402962879 | 1.7721542506269141 | 1.0471975511965979
   1.26610366028297 | 1.8754889933068233 | 1.0471975511965979
(3 rows)

-- select acos (builtin function, acos in constraints, explain)
--Testcase 326:
EXPLAIN VERBOSE
SELECT acos(value1), acos(value3), acos(0.5) FROM s3 WHERE acos(0.5) > value1;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..362.22 rows=2276 width=24)
   Output: (acos(value1)), (acos(value3)), '1.0471975511965979'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT acos(`value1`), acos(`value3`), 1.0471975511965979 FROM `test`.`s32` WHERE ((1.0471975511965979 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT acos(value1), acos(value3), 1.0471975511965979::double precision FROM public.s31mysql WHERE ((1.0471975511965979::double precision > value1))
(7 rows)

-- select acos (builtin function, acos in constraints, result)
--Testcase 327:
SELECT acos(value1), acos(value3), acos(0.5) FROM s3 WHERE acos(0.5) > value1;
        acos        |        acos        |        acos        
--------------------+--------------------+--------------------
 1.4706289041357137 | 1.6709637494540794 | 1.0471975511965979
  1.369438402962879 | 1.7721542506269141 | 1.0471975511965979
   1.26610366028297 | 1.8754889933068233 | 1.0471975511965979
(3 rows)

-- select acos as nest function with agg (pushdown, explain)
--Testcase 328:
EXPLAIN VERBOSE
SELECT sum(value3),acos(sum(value1)) FROM s3 WHERE value2 != 200;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..167.69 rows=1 width=16)
   Output: (sum(value3)), acos((sum(value1)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`), sum(`value1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3), sum(value1) FROM public.s31mysql WHERE ((value2 <> 200))
(11 rows)

-- select acos as nest function with agg (pushdown, result)
--Testcase 329:
SELECT sum(value3),acos(sum(value1)) FROM s3 WHERE value2 != 200;
         sum         |        acos        
---------------------+--------------------
 -0.6000000163912773 | 0.9272951975125154
(1 row)

-- select acos as nest with log2 (pushdown, explain)
--Testcase 330:
EXPLAIN VERBOSE
SELECT value1, acos(log2(value1)),acos(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (acos(log2(value1))), (acos(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (acos(log2(s3.value1))), (acos(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (acos(log2(value1))), (acos(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, acos(log2(`value1`)), acos(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, acos(public.log2(value1)), acos(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select acos as nest with log2 (pushdown, result)
--Testcase 331:
SELECT value1, acos(log2(value1)),acos(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |        acos        |        acos        
--------+--------------------+--------------------
    0.1 |                    |                   
    0.2 |                    |                   
    0.3 |                    |                   
    1.1 | 1.4328557412659095 | 1.7087369123238838
    2.2 |                    |                   
    3.3 |                    |                   
(6 rows)

-- select acos with non pushdown func and explicit constant (explain)
--Testcase 332:
EXPLAIN VERBOSE
SELECT acos(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (acos(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (acos(s3.value3))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (acos(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT acos(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT acos(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select acos with non pushdown func and explicit constant (result)
--Testcase 333:
SELECT acos(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
        acos        |        pi         | ?column? 
--------------------+-------------------+----------
 1.6709637494540794 | 3.141592653589793 |      4.1
 1.7721542506269141 | 3.141592653589793 |      4.1
 1.8754889933068233 | 3.141592653589793 |      4.1
                    | 3.141592653589793 |      4.1
                    | 3.141592653589793 |      4.1
                    | 3.141592653589793 |      4.1
(6 rows)

-- select acos with order by (explain)
--Testcase 334:
EXPLAIN VERBOSE
SELECT value1, acos(1-value1) FROM s3 ORDER BY value1, acos(1-value1);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (acos(('1'::double precision - value1)))
   Sort Key: s3.value1, (acos(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (acos(('1'::double precision - value1)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, acos((1 - `value1`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, acos((1::double precision - value1)) FROM public.s31mysql
(12 rows)

-- select acos with order by (result)
--Testcase 335:
SELECT value1, acos(1-value1) FROM s3 ORDER BY value1, acos(1-value1);
 value1 |        acos         
--------+---------------------
    0.1 | 0.45102681521482324
    0.2 |  0.6435011137603381
    0.3 |  0.7953988468767829
    1.1 |  1.6709637719184252
    2.2 |                    
    3.3 |                    
(6 rows)

-- select acos with order by index (result)
--Testcase 336:
SELECT value1, acos(1-value1) FROM s3 ORDER BY 2,1;
 value1 |        acos         
--------+---------------------
    0.1 | 0.45102681521482324
    0.2 |  0.6435011137603381
    0.3 |  0.7953988468767829
    1.1 |  1.6709637719184252
    2.2 |                    
    3.3 |                    
(6 rows)

-- select acos with order by index (result)
--Testcase 337:
SELECT value1, acos(1-value1) FROM s3 ORDER BY 1,2;
 value1 |        acos         
--------+---------------------
    0.1 | 0.45102681521482324
    0.2 |  0.6435011137603381
    0.3 |  0.7953988468767829
    1.1 |  1.6709637719184252
    2.2 |                    
    3.3 |                    
(6 rows)

-- select acos with group by (explain)
--Testcase 338:
EXPLAIN VERBOSE
SELECT count(value1), acos(1-value1) FROM s3 GROUP BY acos(1-value1) ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (acos(('1'::double precision - value1)))
   Sort Key: (count(s3.value1)), (acos(('1'::double precision - s3.value1)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (acos(('1'::double precision - value1)))
         Group Key: (acos(('1'::double precision - s3.value1)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (acos(('1'::double precision - value1))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT acos((1 - `value1`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT acos((1::double precision - value1)), value1 FROM public.s31mysql
(15 rows)

-- select acos with group by (result)
--Testcase 339:
SELECT count(value1), acos(1-value1) FROM s3 GROUP BY acos(1-value1) ORDER BY 1,2;
 count |        acos         
-------+---------------------
     1 | 0.45102681521482324
     1 |  0.6435011137603381
     1 |  0.7953988468767829
     1 |  1.6709637719184252
     2 |                    
(5 rows)

-- select acos with group by index (result)
--Testcase 340:
SELECT value1, acos(1-value1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |        acos         
--------+---------------------
    0.1 | 0.45102681521482324
    0.2 |  0.6435011137603381
    0.3 |  0.7953988468767829
    1.1 |  1.6709637719184252
    2.2 |                    
    3.3 |                    
(6 rows)

-- select acos with group by index (result)
--Testcase 341:
SELECT value1, acos(1-value1) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |        acos         
--------+---------------------
    0.1 | 0.45102681521482324
    0.2 |  0.6435011137603381
    0.3 |  0.7953988468767829
    1.1 |  1.6709637719184252
    2.2 |                    
    3.3 |                    
(6 rows)

-- select acos with group by having (explain)
--Testcase 342:
EXPLAIN VERBOSE
SELECT count(value1), acos(1-value1) FROM s3 GROUP BY acos(1-value1) HAVING avg(value1) > 0 ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=515.47..515.64 rows=67 width=16)
   Output: (count(value1)), (acos(('1'::double precision - value1)))
   Sort Key: (count(s3.value1)), (acos(('1'::double precision - s3.value1)))
   ->  HashAggregate  (cost=510.10..513.44 rows=67 width=16)
         Output: count(value1), (acos(('1'::double precision - value1)))
         Group Key: (acos(('1'::double precision - s3.value1)))
         Filter: (avg(s3.value1) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (acos(('1'::double precision - value1))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT acos((1 - `value1`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT acos((1::double precision - value1)), value1 FROM public.s31mysql
(16 rows)

-- select acos with group by having (result)
--Testcase 343:
SELECT count(value1), acos(1-value1) FROM s3 GROUP BY acos(1-value1) HAVING avg(value1) > 0 ORDER BY 1,2;
 count |        acos         
-------+---------------------
     1 | 0.45102681521482324
     1 |  0.6435011137603381
     1 |  0.7953988468767829
     1 |  1.6709637719184252
     2 |                    
(5 rows)

-- select acos with group by index having (result)
--Testcase 344:
SELECT value1, acos(1-value1) FROM s3 GROUP BY 2,1 HAVING acos(1-value1) > 0 ORDER BY 1,2;
 value1 |        acos         
--------+---------------------
    0.1 | 0.45102681521482324
    0.2 |  0.6435011137603381
    0.3 |  0.7953988468767829
    1.1 |  1.6709637719184252
(4 rows)

-- select acos with group by index having (result)
--Testcase 345:
SELECT value1, acos(1-value1) FROM s3 GROUP BY 1,2 HAVING value1 > 1;
 value1 |        acos        
--------+--------------------
    1.1 | 1.6709637719184252
    2.2 |                   
    3.3 |                   
(3 rows)

-- select acos and as
--Testcase 346:
SELECT acos(value3) as acos1 FROM s3 ORDER BY 1;
       acos1        
--------------------
 1.6709637494540794
 1.7721542506269141
 1.8754889933068233
                   
                   
                   
(6 rows)

-- select asin (builtin function, explain)
--Testcase 347:
EXPLAIN VERBOSE
SELECT asin(value1), asin(value3), asin(0.5) FROM s3 ORDER BY 1,2,3;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=24)
   Output: (asin(value1)), (asin(value3)), '0.5235987755982989'::double precision
   Sort Key: (asin(s3.value1)), (asin(s3.value3))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=24)
         Output: (asin(value1)), (asin(value3)), '0.5235987755982989'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT asin(`value1`), asin(`value3`), 0.5235987755982989 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT asin(value1), asin(value3), 0.5235987755982989::double precision FROM public.s31mysql
(12 rows)

-- select asin (builtin function, result)
--Testcase 348:
SELECT asin(value1), asin(value3), asin(0.5) FROM s3 ORDER BY 1,2,3;
        asin         |         asin         |        asin        
---------------------+----------------------+--------------------
 0.10016742265918284 | -0.10016742265918284 | 0.5235987755982989
  0.2013579238320176 |  -0.2013579238320176 | 0.5235987755982989
  0.3046926665119266 |  -0.3046926665119266 | 0.5235987755982989
                     |                      | 0.5235987755982989
                     |                      | 0.5235987755982989
                     |                      | 0.5235987755982989
(6 rows)

-- select asin (builtin function, not pushdown constraints, explain)
--Testcase 349:
EXPLAIN VERBOSE
SELECT asin(value1), asin(value3), asin(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.90 rows=34 width=24)
   Output: (asin(value1)), (asin(value3)), '0.5235987755982989'::double precision
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT asin(`value1`), asin(`value3`), 0.5235987755982989, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT asin(value1), asin(value3), 0.5235987755982989::double precision, value2 FROM public.s31mysql
(8 rows)

-- select asin (builtin function, not pushdown constraints, result)
--Testcase 350:
SELECT asin(value1), asin(value3), asin(0.5) FROM s3 WHERE to_hex(value2) = '64';
        asin         |         asin         |        asin        
---------------------+----------------------+--------------------
 0.10016742265918284 | -0.10016742265918284 | 0.5235987755982989
  0.2013579238320176 |  -0.2013579238320176 | 0.5235987755982989
  0.3046926665119266 |  -0.3046926665119266 | 0.5235987755982989
(3 rows)

-- select asin (builtin function, pushdown constraints, explain)
--Testcase 351:
EXPLAIN VERBOSE
SELECT asin(value1), asin(value3), asin(0.5) FROM s3 WHERE value2 != 200;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..475.12 rows=6792 width=24)
   Output: (asin(value1)), (asin(value3)), '0.5235987755982989'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT asin(`value1`), asin(`value3`), 0.5235987755982989 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT asin(value1), asin(value3), 0.5235987755982989::double precision FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select asin (builtin function, pushdown constraints, result)
--Testcase 352:
SELECT asin(value1), asin(value3), asin(0.5) FROM s3 WHERE value2 != 200;
        asin         |         asin         |        asin        
---------------------+----------------------+--------------------
 0.10016742265918284 | -0.10016742265918284 | 0.5235987755982989
  0.2013579238320176 |  -0.2013579238320176 | 0.5235987755982989
  0.3046926665119266 |  -0.3046926665119266 | 0.5235987755982989
(3 rows)

-- select asin (builtin function, asin in constraints, explain)
--Testcase 353:
EXPLAIN VERBOSE
SELECT asin(value1), asin(value3), asin(0.5) FROM s3 WHERE asin(value1) != 1;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..492.19 rows=6792 width=24)
   Output: (asin(value1)), (asin(value3)), '0.5235987755982989'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT asin(`value1`), asin(`value3`), 0.5235987755982989 FROM `test`.`s32` WHERE ((asin(`value1`) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT asin(value1), asin(value3), 0.5235987755982989::double precision FROM public.s31mysql WHERE ((asin(value1) <> 1::double precision))
(7 rows)

-- select asin (builtin function, asin in constraints, result)
--Testcase 354:
SELECT asin(value1), asin(value3), asin(0.5) FROM s3 WHERE asin(value1) != 1;
        asin         |         asin         |        asin        
---------------------+----------------------+--------------------
 0.10016742265918284 | -0.10016742265918284 | 0.5235987755982989
  0.2013579238320176 |  -0.2013579238320176 | 0.5235987755982989
  0.3046926665119266 |  -0.3046926665119266 | 0.5235987755982989
(3 rows)

-- select asin (builtin function, asin in constraints, explain)
--Testcase 355:
EXPLAIN VERBOSE
SELECT asin(value1), asin(value3), asin(0.5) FROM s3 WHERE asin(0.5) > value1;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..362.22 rows=2276 width=24)
   Output: (asin(value1)), (asin(value3)), '0.5235987755982989'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT asin(`value1`), asin(`value3`), 0.5235987755982989 FROM `test`.`s32` WHERE ((0.5235987755982989 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT asin(value1), asin(value3), 0.5235987755982989::double precision FROM public.s31mysql WHERE ((0.5235987755982989::double precision > value1))
(7 rows)

-- select asin (builtin function, asin in constraints, result)
--Testcase 356:
SELECT asin(value1), asin(value3), asin(0.5) FROM s3 WHERE asin(0.5) > value1;
        asin         |         asin         |        asin        
---------------------+----------------------+--------------------
 0.10016742265918284 | -0.10016742265918284 | 0.5235987755982989
  0.2013579238320176 |  -0.2013579238320176 | 0.5235987755982989
  0.3046926665119266 |  -0.3046926665119266 | 0.5235987755982989
(3 rows)

-- select asin as nest function with agg (pushdown, explain)
--Testcase 357:
EXPLAIN VERBOSE
SELECT sum(value3),asin(sum(value1)) FROM s3 WHERE value2 != 200;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..167.69 rows=1 width=16)
   Output: (sum(value3)), asin((sum(value1)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`), sum(`value1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3), sum(value1) FROM public.s31mysql WHERE ((value2 <> 200))
(11 rows)

-- select asin as nest function with agg (pushdown, result)
--Testcase 358:
SELECT sum(value3),asin(sum(value1)) FROM s3 WHERE value2 != 200;
         sum         |        asin        
---------------------+--------------------
 -0.6000000163912773 | 0.6435011292823812
(1 row)

-- select asin as nest with log2 (pushdown, explain)
--Testcase 359:
EXPLAIN VERBOSE
SELECT value1, asin(log2(value1)),asin(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (asin(log2(value1))), (asin(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (asin(log2(s3.value1))), (asin(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (asin(log2(value1))), (asin(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, asin(log2(`value1`)), asin(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, asin(public.log2(value1)), asin(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select asin as nest with log2 (pushdown, result)
--Testcase 360:
SELECT value1, asin(log2(value1)),asin(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |        asin        |         asin         
--------+--------------------+----------------------
    0.1 |                    |                     
    0.2 |                    |                     
    0.3 |                    |                     
    1.1 | 0.1379405855289872 | -0.13794058552898714
    2.2 |                    |                     
    3.3 |                    |                     
(6 rows)

-- select asin with non pushdown func and explicit constant (explain)
--Testcase 361:
EXPLAIN VERBOSE
SELECT value1, asin(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=56)
   Output: value1, (asin(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: s3.value1, (asin(s3.value3))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=56)
         Output: value1, (asin(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, asin(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, asin(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select asin with non pushdown func and explicit constant (result)
--Testcase 362:
SELECT value1, asin(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
 value1 |         asin         |        pi         | ?column? 
--------+----------------------+-------------------+----------
    0.1 | -0.10016742265918284 | 3.141592653589793 |      4.1
    0.2 |  -0.2013579238320176 | 3.141592653589793 |      4.1
    0.3 |  -0.3046926665119266 | 3.141592653589793 |      4.1
    1.1 |                      | 3.141592653589793 |      4.1
    2.2 |                      | 3.141592653589793 |      4.1
    3.3 |                      | 3.141592653589793 |      4.1
(6 rows)

-- select asin with order by (explain)
--Testcase 363:
EXPLAIN VERBOSE
SELECT value1, asin(1-value1) FROM s3 ORDER BY asin(1-value1);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (asin(('1'::double precision - value1)))
   Sort Key: (asin(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (asin(('1'::double precision - value1)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, asin((1 - `value1`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, asin((1::double precision - value1)) FROM public.s31mysql
(12 rows)

-- select asin with order by (result)
--Testcase 364:
SELECT value1, asin(1-value1) FROM s3 ORDER BY asin(1-value1);
 value1 |         asin         
--------+----------------------
    1.1 | -0.10016744512352861
    0.3 |   0.7753974799181138
    0.2 |   0.9272952130345585
    0.1 |   1.1197695115800734
    2.2 |                     
    3.3 |                     
(6 rows)

-- select asin with order by index (result)
--Testcase 365:
SELECT value1, asin(1-value1) FROM s3 ORDER BY 2,1;
 value1 |         asin         
--------+----------------------
    1.1 | -0.10016744512352861
    0.3 |   0.7753974799181138
    0.2 |   0.9272952130345585
    0.1 |   1.1197695115800734
    2.2 |                     
    3.3 |                     
(6 rows)

-- select asin with order by index (result)
--Testcase 366:
SELECT value1, asin(1-value1) FROM s3 ORDER BY 1,2;
 value1 |         asin         
--------+----------------------
    0.1 |   1.1197695115800734
    0.2 |   0.9272952130345585
    0.3 |   0.7753974799181138
    1.1 | -0.10016744512352861
    2.2 |                     
    3.3 |                     
(6 rows)

-- select asin with group by (explain)
--Testcase 367:
EXPLAIN VERBOSE
SELECT value1, asin(1-value1) FROM s3 GROUP BY value1, asin(1-value1) ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: value1, (asin(('1'::double precision - value1)))
   Sort Key: s3.value1, (asin(('1'::double precision - s3.value1)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: value1, (asin(('1'::double precision - value1)))
         Group Key: s3.value1, (asin(('1'::double precision - s3.value1)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (asin(('1'::double precision - value1)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, asin((1 - `value1`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, asin((1::double precision - value1)) FROM public.s31mysql
(15 rows)

-- select asin with group by (result)
--Testcase 368:
SELECT value1, asin(1-value1) FROM s3 GROUP BY value1, asin(1-value1) ORDER BY 1,2;
 value1 |         asin         
--------+----------------------
    0.1 |   1.1197695115800734
    0.2 |   0.9272952130345585
    0.3 |   0.7753974799181138
    1.1 | -0.10016744512352861
    2.2 |                     
    3.3 |                     
(6 rows)

-- select asin with group by index (result)
--Testcase 369:
SELECT value1, asin(1-value1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |         asin         
--------+----------------------
    0.1 |   1.1197695115800734
    0.2 |   0.9272952130345585
    0.3 |   0.7753974799181138
    1.1 | -0.10016744512352861
    2.2 |                     
    3.3 |                     
(6 rows)

-- select asin with group by index (result)
--Testcase 370:
SELECT value1, asin(1-value1) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |         asin         
--------+----------------------
    0.1 |   1.1197695115800734
    0.2 |   0.9272952130345585
    0.3 |   0.7753974799181138
    1.1 | -0.10016744512352861
    2.2 |                     
    3.3 |                     
(6 rows)

-- select asin with group by having (explain)
--Testcase 371:
EXPLAIN VERBOSE
SELECT value1, asin(1-value1) FROM s3 GROUP BY value1, asin(1-value1) HAVING avg(value1) > 0 ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=515.47..515.64 rows=67 width=16)
   Output: value1, (asin(('1'::double precision - value1)))
   Sort Key: s3.value1, (asin(('1'::double precision - s3.value1)))
   ->  HashAggregate  (cost=510.10..513.44 rows=67 width=16)
         Output: value1, (asin(('1'::double precision - value1)))
         Group Key: s3.value1, (asin(('1'::double precision - s3.value1)))
         Filter: (avg(s3.value1) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (asin(('1'::double precision - value1)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, asin((1 - `value1`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, asin((1::double precision - value1)) FROM public.s31mysql
(16 rows)

-- select asin with group by having (result)
--Testcase 372:
SELECT value1, asin(1-value1) FROM s3 GROUP BY value1, asin(1-value1) HAVING avg(value1) > 0 ORDER BY 1,2;
 value1 |         asin         
--------+----------------------
    0.1 |   1.1197695115800734
    0.2 |   0.9272952130345585
    0.3 |   0.7753974799181138
    1.1 | -0.10016744512352861
    2.2 |                     
    3.3 |                     
(6 rows)

-- select asin with group by index having (result)
--Testcase 373:
SELECT value1, asin(1-value1) FROM s3 GROUP BY 2,1 HAVING asin(1-value1) > 0 ORDER BY 1,2;
 value1 |        asin        
--------+--------------------
    0.1 | 1.1197695115800734
    0.2 | 0.9272952130345585
    0.3 | 0.7753974799181138
(3 rows)

-- select asin with group by index having (result)
--Testcase 374:
SELECT value1, asin(1-value1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |         asin         
--------+----------------------
    1.1 | -0.10016744512352861
    2.2 |                     
    3.3 |                     
(3 rows)

-- select asin and as
--Testcase 375:
SELECT value1, asin(value3) as asin1 FROM s3 ORDER BY 1,2;
 value1 |        asin1         
--------+----------------------
    0.1 | -0.10016742265918284
    0.2 |  -0.2013579238320176
    0.3 |  -0.3046926665119266
    1.1 |                     
    2.2 |                     
    3.3 |                     
(6 rows)

-- select atan (builtin function, explain)
--Testcase 376:
EXPLAIN VERBOSE
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=961.88..978.94 rows=6826 width=40)
   Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision)), '0.4636476090008061'::double precision
   Sort Key: (atan(s3.value1)), (atan((s3.value2)::double precision)), (atan(s3.value3)), (atan((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=40)
         Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision)), '0.4636476090008061'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan(`value1`), atan(`value2`), atan(`value3`), atan(`value4`), 0.4636476090008061 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan(value1), atan(value2), atan(value3), atan(value4), 0.4636476090008061::double precision FROM public.s31mysql
(12 rows)

-- select atan (builtin function, result)
--Testcase 377:
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM s3 ORDER BY 1,2,3,4,5;
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.09966865396652452 | 1.5607966601082315 | -0.09966865396652452 | -1.5607966601082315 | 0.4636476090008061
 0.19739556271548866 | 1.5607966601082315 | -0.19739556271548866 | -1.5607966601082315 | 0.4636476090008061
 0.29145680541449914 | 1.5607966601082315 | -0.29145680541449914 | -1.5607966601082315 | 0.4636476090008061
  0.8329812774626025 | 1.5657963684609384 |  -0.8329812774626025 | -1.5657963684609384 | 0.4636476090008061
  1.1441688418330402 | 1.5657963684609384 |  -1.1441688418330402 | -1.5657963684609384 | 0.4636476090008061
  1.2765617576733037 | 1.5657963684609384 |  -1.2765617576733037 | -1.5657963684609384 | 0.4636476090008061
(6 rows)

-- select atan (builtin function, not pushdown constraints, explain)
--Testcase 378:
EXPLAIN VERBOSE
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=40)
   Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision)), '0.4636476090008061'::double precision
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT atan(`value1`), atan(`value2`), atan(`value3`), atan(`value4`), 0.4636476090008061, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT atan(value1), atan(value2), atan(value3), atan(value4), 0.4636476090008061::double precision, value2 FROM public.s31mysql
(8 rows)

-- select atan (builtin function, not pushdown constraints, result)
--Testcase 379:
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM s3 WHERE to_hex(value2) = '64';
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.09966865396652452 | 1.5607966601082315 | -0.09966865396652452 | -1.5607966601082315 | 0.4636476090008061
 0.19739556271548866 | 1.5607966601082315 | -0.19739556271548866 | -1.5607966601082315 | 0.4636476090008061
 0.29145680541449914 | 1.5607966601082315 | -0.29145680541449914 | -1.5607966601082315 | 0.4636476090008061
(3 rows)

-- select atan (builtin function, pushdown constraints, explain)
--Testcase 380:
EXPLAIN VERBOSE
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM s3 WHERE value2 != 200;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=40)
   Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision)), '0.4636476090008061'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT atan(`value1`), atan(`value2`), atan(`value3`), atan(`value4`), 0.4636476090008061 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT atan(value1), atan(value2), atan(value3), atan(value4), 0.4636476090008061::double precision FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select atan (builtin function, pushdown constraints, result)
--Testcase 381:
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM s3 WHERE value2 != 200;
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.09966865396652452 | 1.5607966601082315 | -0.09966865396652452 | -1.5607966601082315 | 0.4636476090008061
 0.19739556271548866 | 1.5607966601082315 | -0.19739556271548866 | -1.5607966601082315 | 0.4636476090008061
 0.29145680541449914 | 1.5607966601082315 | -0.29145680541449914 | -1.5607966601082315 | 0.4636476090008061
(3 rows)

-- select atan (builtin function, atan in constraints, explain)
--Testcase 382:
EXPLAIN VERBOSE
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM s3 WHERE atan(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=992.41..1009.39 rows=6792 width=40)
   Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision)), '0.4636476090008061'::double precision
   Sort Key: (atan(s3.value1)), (atan((s3.value2)::double precision)), (atan(s3.value3)), (atan((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..560.11 rows=6792 width=40)
         Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision)), '0.4636476090008061'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan(`value1`), atan(`value2`), atan(`value3`), atan(`value4`), 0.4636476090008061 FROM `test`.`s32` WHERE ((atan(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan(value1), atan(value2), atan(value3), atan(value4), 0.4636476090008061::double precision FROM public.s31mysql WHERE ((atan(value1) <> 1::double precision))
(12 rows)

-- select atan (builtin function, atan in constraints, result)
--Testcase 383:
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM s3 WHERE atan(value1) != 1 ORDER BY 1,2,3,4,5;
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.09966865396652452 | 1.5607966601082315 | -0.09966865396652452 | -1.5607966601082315 | 0.4636476090008061
 0.19739556271548866 | 1.5607966601082315 | -0.19739556271548866 | -1.5607966601082315 | 0.4636476090008061
 0.29145680541449914 | 1.5607966601082315 | -0.29145680541449914 | -1.5607966601082315 | 0.4636476090008061
  0.8329812774626025 | 1.5657963684609384 |  -0.8329812774626025 | -1.5657963684609384 | 0.4636476090008061
  1.1441688418330402 | 1.5657963684609384 |  -1.1441688418330402 | -1.5657963684609384 | 0.4636476090008061
  1.2765617576733037 | 1.5657963684609384 |  -1.2765617576733037 | -1.5657963684609384 | 0.4636476090008061
(6 rows)

-- select atan (builtin function, atan in constraints, explain)
--Testcase 384:
EXPLAIN VERBOSE
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM s3 WHERE atan(0.5) > value1;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=40)
   Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision)), '0.4636476090008061'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT atan(`value1`), atan(`value2`), atan(`value3`), atan(`value4`), 0.4636476090008061 FROM `test`.`s32` WHERE ((0.4636476090008061 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT atan(value1), atan(value2), atan(value3), atan(value4), 0.4636476090008061::double precision FROM public.s31mysql WHERE ((0.4636476090008061::double precision > value1))
(7 rows)

-- select atan (builtin function, atan in constraints, result)
--Testcase 385:
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM s3 WHERE atan(0.5) > value1;
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.09966865396652452 | 1.5607966601082315 | -0.09966865396652452 | -1.5607966601082315 | 0.4636476090008061
 0.19739556271548866 | 1.5607966601082315 | -0.19739556271548866 | -1.5607966601082315 | 0.4636476090008061
 0.29145680541449914 | 1.5607966601082315 | -0.29145680541449914 | -1.5607966601082315 | 0.4636476090008061
(3 rows)

-- select atan as nest function with agg (pushdown, explain)
--Testcase 386:
EXPLAIN VERBOSE
SELECT sum(value3),atan(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), atan((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select atan as nest function with agg (pushdown, result)
--Testcase 387:
SELECT sum(value3),atan(sum(value3)) FROM s3;
        sum         |        atan         
--------------------+---------------------
 -7.200000040233135 | -1.4327903038987915
(1 row)

-- select atan as nest with log2 (pushdown, explain)
--Testcase 388:
EXPLAIN VERBOSE
SELECT atan(log2(value1)),atan(log2(1/value1)) FROM s3 ORDER BY 1,2;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=16)
   Output: (atan(log2(value1))), (atan(log2(('1'::double precision / value1))))
   Sort Key: (atan(log2(s3.value1))), (atan(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=16)
         Output: (atan(log2(value1))), (atan(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan(log2(`value1`)), atan(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan(public.log2(value1)), atan(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select atan as nest with log2 (pushdown, result)
--Testcase 389:
SELECT atan(log2(value1)),atan(log2(1/value1)) FROM s3 ORDER BY 1,2;
        atan         |         atan         
---------------------+----------------------
 -1.2783948484646797 |   1.2783948484646797
 -1.1641274220634321 |   1.1641274220634321
 -1.0484236236443045 |   1.0484236236443047
 0.13664665154398273 | -0.13664665154398267
   0.849638688602701 |   -0.849638688602701
  1.0447913683536394 |  -1.0447913683536394
(6 rows)

-- select atan with non pushdown func and explicit constant (explain)
--Testcase 390:
EXPLAIN VERBOSE
SELECT atan(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (atan(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (atan(s3.value3)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (atan(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select atan with non pushdown func and explicit constant (result)
--Testcase 391:
SELECT atan(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
         atan         |        pi         | ?column? 
----------------------+-------------------+----------
 -0.09966865396652452 | 3.141592653589793 |      4.1
 -0.19739556271548866 | 3.141592653589793 |      4.1
 -0.29145680541449914 | 3.141592653589793 |      4.1
  -0.8329812774626025 | 3.141592653589793 |      4.1
  -1.1441688418330402 | 3.141592653589793 |      4.1
  -1.2765617576733037 | 3.141592653589793 |      4.1
(6 rows)

-- select atan with order by (explain)
--Testcase 392:
EXPLAIN VERBOSE
SELECT value1, atan(1-value3) FROM s3 ORDER BY atan(1-value3);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (atan(('1'::double precision - value3)))
   Sort Key: (atan(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (atan(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, atan((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, atan((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select atan with order by (result)
--Testcase 393:
SELECT value1, atan(1-value3) FROM s3 ORDER BY atan(1-value3);
 value1 |        atan        
--------+--------------------
    0.1 | 0.8329812673486924
    0.2 | 0.8760580518196001
    0.3 | 0.9151007049849325
    1.1 | 1.1263771213007954
    2.2 | 1.2679114626622485
    3.3 | 1.3422996850564608
(6 rows)

-- select atan with order by index (result)
--Testcase 394:
SELECT value1, atan(1-value3) FROM s3 ORDER BY 2,1;
 value1 |        atan        
--------+--------------------
    0.1 | 0.8329812673486924
    0.2 | 0.8760580518196001
    0.3 | 0.9151007049849325
    1.1 | 1.1263771213007954
    2.2 | 1.2679114626622485
    3.3 | 1.3422996850564608
(6 rows)

-- select atan with order by index (result)
--Testcase 395:
SELECT value1, atan(1-value3) FROM s3 ORDER BY 1,2;
 value1 |        atan        
--------+--------------------
    0.1 | 0.8329812673486924
    0.2 | 0.8760580518196001
    0.3 | 0.9151007049849325
    1.1 | 1.1263771213007954
    2.2 | 1.2679114626622485
    3.3 | 1.3422996850564608
(6 rows)

-- select atan with group by (explain)
--Testcase 396:
EXPLAIN VERBOSE
SELECT count(value1), atan(1-value3) FROM s3 GROUP BY atan(1-value3) ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (atan(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (atan(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (atan(('1'::double precision - value3)))
         Group Key: (atan(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (atan(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT atan((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT atan((1::double precision - value3)), value1 FROM public.s31mysql
(15 rows)

-- select atan with group by (result)
--Testcase 397:
SELECT count(value1), atan(1-value3) FROM s3 GROUP BY atan(1-value3) ORDER BY 1,2;
 count |        atan        
-------+--------------------
     1 | 0.8329812673486924
     1 | 0.8760580518196001
     1 | 0.9151007049849325
     1 | 1.1263771213007954
     1 | 1.2679114626622485
     1 | 1.3422996850564608
(6 rows)

-- select atan with group by index (result)
--Testcase 398:
SELECT value1, atan(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |        atan        
--------+--------------------
    0.1 | 0.8329812673486924
    0.2 | 0.8760580518196001
    0.3 | 0.9151007049849325
    1.1 | 1.1263771213007954
    2.2 | 1.2679114626622485
    3.3 | 1.3422996850564608
(6 rows)

-- select atan with group by index (result)
--Testcase 399:
SELECT value1, atan(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |        atan        
--------+--------------------
    0.1 | 0.8329812673486924
    0.2 | 0.8760580518196001
    0.3 | 0.9151007049849325
    1.1 | 1.1263771213007954
    2.2 | 1.2679114626622485
    3.3 | 1.3422996850564608
(6 rows)

-- select atan with group by having (explain)
--Testcase 400:
EXPLAIN VERBOSE
SELECT count(value1), atan(1-value3) FROM s3 GROUP BY atan(1-value3) HAVING atan(avg(value1)) > 0 ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: (count(value1)), (atan(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (atan(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: count(value1), (atan(('1'::double precision - value3)))
         Group Key: (atan(('1'::double precision - s3.value3)))
         Filter: (atan(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (atan(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT atan((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT atan((1::double precision - value3)), value1 FROM public.s31mysql
(16 rows)

-- select atan with group by having (result)
--Testcase 401:
SELECT count(value1), atan(1-value3) FROM s3 GROUP BY atan(1-value3) HAVING atan(avg(value1)) > 0 ORDER BY 1,2;
 count |        atan        
-------+--------------------
     1 | 0.8329812673486924
     1 | 0.8760580518196001
     1 | 0.9151007049849325
     1 | 1.1263771213007954
     1 | 1.2679114626622485
     1 | 1.3422996850564608
(6 rows)

-- select atan with group by index having (result)
--Testcase 402:
SELECT value1, atan(1-value3) FROM s3 GROUP BY 2,1 HAVING atan(1-value3) > 0 ORDER BY 1,2;
 value1 |        atan        
--------+--------------------
    0.1 | 0.8329812673486924
    0.2 | 0.8760580518196001
    0.3 | 0.9151007049849325
    1.1 | 1.1263771213007954
    2.2 | 1.2679114626622485
    3.3 | 1.3422996850564608
(6 rows)

-- select atan with group by index having (result)
--Testcase 403:
SELECT value1, atan(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |        atan        
--------+--------------------
    1.1 | 1.1263771213007954
    2.2 | 1.2679114626622485
    3.3 | 1.3422996850564608
(3 rows)

-- select atan and as
--Testcase 404:
SELECT atan(value3) as atan1 FROM s3 ORDER BY 1 DESC;
        atan1         
----------------------
 -0.09966865396652452
 -0.19739556271548866
 -0.29145680541449914
  -0.8329812774626025
  -1.1441688418330402
  -1.2765617576733037
(6 rows)

-- select atan2 (builtin function, explain)
--Testcase 405:
EXPLAIN VERBOSE
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM s3 ORDER BY 1,2,3,4,5;
                                                                                                                           QUERY PLAN                                                                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=961.88..978.94 rows=6826 width=40)
   Output: (atan2(value1, '2'::double precision)), (atan2((value2)::double precision, '2'::double precision)), (atan2(value3, '2'::double precision)), (atan2((value4)::double precision, '2'::double precision)), '1.1902899496825317'::double precision
   Sort Key: (atan2(s3.value1, '2'::double precision)), (atan2((s3.value2)::double precision, '2'::double precision)), (atan2(s3.value3, '2'::double precision)), (atan2((s3.value4)::double precision, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=40)
         Output: (atan2(value1, '2'::double precision)), (atan2((value2)::double precision, '2'::double precision)), (atan2(value3, '2'::double precision)), (atan2((value4)::double precision, '2'::double precision)), '1.1902899496825317'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan2(`value1`, 2), atan2(`value2`, 2), atan2(`value3`, 2), atan2(`value4`, 2), 1.1902899496825317 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan2(value1, 2::double precision), atan2(value2, 2::double precision), atan2(value3, 2::double precision), atan2(value4, 2::double precision), 1.1902899496825317::double precision FROM public.s31mysql
(12 rows)

-- select atan2 (builtin function, result)
--Testcase 406:
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM s3 ORDER BY 1,2,3,4,5;
        atan2        |       atan2        |        atan2         |        atan2        |       atan2        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.04995839646514282 |  1.550798992821746 | -0.04995839646514282 |  -1.550798992821746 | 1.1902899496825317
 0.09966865396652452 |  1.550798992821746 | -0.09966865396652452 |  -1.550798992821746 | 1.1902899496825317
 0.14888995343880235 |  1.550798992821746 | -0.14888995343880235 |  -1.550798992821746 | 1.1902899496825317
  0.5028432200802054 | 1.5607966601082315 |  -0.5028432200802054 | -1.5607966601082315 | 1.1902899496825317
  0.8329812774626025 | 1.5607966601082315 |  -0.8329812774626025 | -1.5607966601082315 | 1.1902899496825317
  1.0259324049385556 | 1.5607966601082315 |  -1.0259324049385556 | -1.5607966601082315 | 1.1902899496825317
(6 rows)

-- select atan2 (builtin function, not pushdown constraints, explain)
--Testcase 407:
EXPLAIN VERBOSE
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM s3 WHERE to_hex(value2) = '64';
                                                                                                                        QUERY PLAN                                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=40)
   Output: (atan2(value1, '2'::double precision)), (atan2((value2)::double precision, '2'::double precision)), (atan2(value3, '2'::double precision)), (atan2((value4)::double precision, '2'::double precision)), '1.1902899496825317'::double precision
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT atan2(`value1`, 2), atan2(`value2`, 2), atan2(`value3`, 2), atan2(`value4`, 2), 1.1902899496825317, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT atan2(value1, 2::double precision), atan2(value2, 2::double precision), atan2(value3, 2::double precision), atan2(value4, 2::double precision), 1.1902899496825317::double precision, value2 FROM public.s31mysql
(8 rows)

-- select atan2 (builtin function, not pushdown constraints, result)
--Testcase 408:
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM s3 WHERE to_hex(value2) = '64';
        atan2        |       atan2       |        atan2         |       atan2        |       atan2        
---------------------+-------------------+----------------------+--------------------+--------------------
 0.04995839646514282 | 1.550798992821746 | -0.04995839646514282 | -1.550798992821746 | 1.1902899496825317
 0.09966865396652452 | 1.550798992821746 | -0.09966865396652452 | -1.550798992821746 | 1.1902899496825317
 0.14888995343880235 | 1.550798992821746 | -0.14888995343880235 | -1.550798992821746 | 1.1902899496825317
(3 rows)

-- select atan2 (builtin function, pushdown constraints, explain)
--Testcase 409:
EXPLAIN VERBOSE
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM s3 WHERE value2 != 200;
                                                                                                                        QUERY PLAN                                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=40)
   Output: (atan2(value1, '2'::double precision)), (atan2((value2)::double precision, '2'::double precision)), (atan2(value3, '2'::double precision)), (atan2((value4)::double precision, '2'::double precision)), '1.1902899496825317'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT atan2(`value1`, 2), atan2(`value2`, 2), atan2(`value3`, 2), atan2(`value4`, 2), 1.1902899496825317 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT atan2(value1, 2::double precision), atan2(value2, 2::double precision), atan2(value3, 2::double precision), atan2(value4, 2::double precision), 1.1902899496825317::double precision FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select atan2 (builtin function, pushdown constraints, result)
--Testcase 410:
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM s3 WHERE value2 != 200;
        atan2        |       atan2       |        atan2         |       atan2        |       atan2        
---------------------+-------------------+----------------------+--------------------+--------------------
 0.04995839646514282 | 1.550798992821746 | -0.04995839646514282 | -1.550798992821746 | 1.1902899496825317
 0.09966865396652452 | 1.550798992821746 | -0.09966865396652452 | -1.550798992821746 | 1.1902899496825317
 0.14888995343880235 | 1.550798992821746 | -0.14888995343880235 | -1.550798992821746 | 1.1902899496825317
(3 rows)

-- select atan2 (builtin function, atan2 in constraints, explain)
--Testcase 411:
EXPLAIN VERBOSE
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM s3 WHERE atan2(value1, 2) != 1 ORDER BY 1,2,3,4,5;
                                                                                                                                                 QUERY PLAN                                                                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=992.41..1009.39 rows=6792 width=40)
   Output: (atan2(value1, '2'::double precision)), (atan2((value2)::double precision, '2'::double precision)), (atan2(value3, '2'::double precision)), (atan2((value4)::double precision, '2'::double precision)), '1.1902899496825317'::double precision
   Sort Key: (atan2(s3.value1, '2'::double precision)), (atan2((s3.value2)::double precision, '2'::double precision)), (atan2(s3.value3, '2'::double precision)), (atan2((s3.value4)::double precision, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..560.11 rows=6792 width=40)
         Output: (atan2(value1, '2'::double precision)), (atan2((value2)::double precision, '2'::double precision)), (atan2(value3, '2'::double precision)), (atan2((value4)::double precision, '2'::double precision)), '1.1902899496825317'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan2(`value1`, 2), atan2(`value2`, 2), atan2(`value3`, 2), atan2(`value4`, 2), 1.1902899496825317 FROM `test`.`s32` WHERE ((atan2(`value1`, 2) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan2(value1, 2::double precision), atan2(value2, 2::double precision), atan2(value3, 2::double precision), atan2(value4, 2::double precision), 1.1902899496825317::double precision FROM public.s31mysql WHERE ((atan2(value1, 2::double precision) <> 1::double precision))
(12 rows)

-- select atan2 (builtin function, atan2 in constraints, result)
--Testcase 412:
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM s3 WHERE atan2(value1, 2) != 1 ORDER BY 1,2,3,4,5;
        atan2        |       atan2        |        atan2         |        atan2        |       atan2        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.04995839646514282 |  1.550798992821746 | -0.04995839646514282 |  -1.550798992821746 | 1.1902899496825317
 0.09966865396652452 |  1.550798992821746 | -0.09966865396652452 |  -1.550798992821746 | 1.1902899496825317
 0.14888995343880235 |  1.550798992821746 | -0.14888995343880235 |  -1.550798992821746 | 1.1902899496825317
  0.5028432200802054 | 1.5607966601082315 |  -0.5028432200802054 | -1.5607966601082315 | 1.1902899496825317
  0.8329812774626025 | 1.5607966601082315 |  -0.8329812774626025 | -1.5607966601082315 | 1.1902899496825317
  1.0259324049385556 | 1.5607966601082315 |  -1.0259324049385556 | -1.5607966601082315 | 1.1902899496825317
(6 rows)

-- select atan2 (builtin function, atan2 in constraints, explain)
--Testcase 413:
EXPLAIN VERBOSE
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM s3 WHERE atan2(5, 2) > value1 ORDER BY 1,2,3,4,5;
                                                                                                                                           QUERY PLAN                                                                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=511.90..517.59 rows=2276 width=40)
   Output: (atan2(value1, '2'::double precision)), (atan2((value2)::double precision, '2'::double precision)), (atan2(value3, '2'::double precision)), (atan2((value4)::double precision, '2'::double precision)), '1.1902899496825317'::double precision
   Sort Key: (atan2(s3.value1, '2'::double precision)), (atan2((s3.value2)::double precision, '2'::double precision)), (atan2(s3.value3, '2'::double precision)), (atan2((s3.value4)::double precision, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=40)
         Output: (atan2(value1, '2'::double precision)), (atan2((value2)::double precision, '2'::double precision)), (atan2(value3, '2'::double precision)), (atan2((value4)::double precision, '2'::double precision)), '1.1902899496825317'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan2(`value1`, 2), atan2(`value2`, 2), atan2(`value3`, 2), atan2(`value4`, 2), 1.1902899496825317 FROM `test`.`s32` WHERE ((1.1902899496825317 > `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan2(value1, 2::double precision), atan2(value2, 2::double precision), atan2(value3, 2::double precision), atan2(value4, 2::double precision), 1.1902899496825317::double precision FROM public.s31mysql WHERE ((1.1902899496825317::double precision > value1))
(12 rows)

-- select atan2 (builtin function, atan2 in constraints, result)
--Testcase 414:
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM s3 WHERE atan2(5, 2) > value1 ORDER BY 1,2,3,4,5;
        atan2        |       atan2        |        atan2         |        atan2        |       atan2        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.04995839646514282 |  1.550798992821746 | -0.04995839646514282 |  -1.550798992821746 | 1.1902899496825317
 0.09966865396652452 |  1.550798992821746 | -0.09966865396652452 |  -1.550798992821746 | 1.1902899496825317
 0.14888995343880235 |  1.550798992821746 | -0.14888995343880235 |  -1.550798992821746 | 1.1902899496825317
  0.5028432200802054 | 1.5607966601082315 |  -0.5028432200802054 | -1.5607966601082315 | 1.1902899496825317
(4 rows)

-- select atan2 as nest function with agg (pushdown, explain)
--Testcase 415:
EXPLAIN VERBOSE
SELECT sum(value3),atan2(sum(value3), 2) FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), atan2((sum(value3)), '2'::double precision)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select atan2 as nest function with agg (pushdown, result)
--Testcase 416:
SELECT sum(value3),atan2(sum(value3), 2) FROM s3;
        sum         |       atan2        
--------------------+--------------------
 -7.200000040233135 | -1.299849477897491
(1 row)

-- select atan2 as nest with log2 (pushdown, explain)
--Testcase 417:
EXPLAIN VERBOSE
SELECT atan2(log2(value1), 2),atan2(log2(1/value1), 2) FROM s3 ORDER BY 1,2;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=16)
   Output: (atan2(log2(value1), '2'::double precision)), (atan2(log2(('1'::double precision / value1)), '2'::double precision))
   Sort Key: (atan2(log2(s3.value1), '2'::double precision)), (atan2(log2(('1'::double precision / s3.value1)), '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=16)
         Output: (atan2(log2(value1), '2'::double precision)), (atan2(log2(('1'::double precision / value1)), '2'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan2(log2(`value1`), 2), atan2(log2((1 / `value1`)), 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan2(public.log2(value1), 2::double precision), atan2(public.log2((1::double precision / value1)), 2::double precision) FROM public.s31mysql
(12 rows)

-- select atan2 as nest with log2 (pushdown, result)
--Testcase 418:
SELECT atan2(log2(value1), 2),atan2(log2(1/value1), 2) FROM s3 ORDER BY 1,2;
        atan2        |        atan2         
---------------------+----------------------
 -1.0288635006528577 |   1.0288635006528577
  -0.859748003088039 |    0.859748003088039
  -0.715126880832206 |    0.715126880832206
 0.06864375823738518 | -0.06864375823738515
  0.5171258967180242 |  -0.5171258967180242
  0.7109793602585378 |  -0.7109793602585378
(6 rows)

-- select atan2 with non pushdown func and atan2licit constant (explain)
--Testcase 419:
EXPLAIN VERBOSE
SELECT atan2(value3, 2), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (atan2(value3, '2'::double precision)), '3.141592653589793'::double precision, 4.1
   Sort Key: (atan2(s3.value3, '2'::double precision)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (atan2(value3, '2'::double precision)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan2(`value3`, 2), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan2(value3, 2::double precision), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select atan2 with non pushdown func and atan2licit constant (result)
--Testcase 420:
SELECT atan2(value3, 2), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
        atan2         |        pi         | ?column? 
----------------------+-------------------+----------
 -0.04995839646514282 | 3.141592653589793 |      4.1
 -0.09966865396652452 | 3.141592653589793 |      4.1
 -0.14888995343880235 | 3.141592653589793 |      4.1
  -0.5028432200802054 | 3.141592653589793 |      4.1
  -0.8329812774626025 | 3.141592653589793 |      4.1
  -1.0259324049385556 | 3.141592653589793 |      4.1
(6 rows)

-- select atan2 with order by (explain)
--Testcase 421:
EXPLAIN VERBOSE
SELECT value1, atan2(1-value3, 2) FROM s3 ORDER BY atan2(1-value3, 2);
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (atan2(('1'::double precision - value3), '2'::double precision))
   Sort Key: (atan2(('1'::double precision - s3.value3), '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (atan2(('1'::double precision - value3), '2'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, atan2((1 - `value3`), 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, atan2((1::double precision - value3), 2::double precision) FROM public.s31mysql
(12 rows)

-- select atan2 with order by (result)
--Testcase 422:
SELECT value1, atan2(1-value3, 2) FROM s3 ORDER BY atan2(1-value3, 2);
 value1 |       atan2        
--------+--------------------
    0.1 | 0.5028432114998824
    0.2 | 0.5404195013662578
    0.3 | 0.5763752247813169
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(6 rows)

-- select atan2 with order by index (result)
--Testcase 423:
SELECT value1, atan2(1-value3, 2) FROM s3 ORDER BY 2,1;
 value1 |       atan2        
--------+--------------------
    0.1 | 0.5028432114998824
    0.2 | 0.5404195013662578
    0.3 | 0.5763752247813169
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(6 rows)

-- select atan2 with order by index (result)
--Testcase 424:
SELECT value1, atan2(1-value3, 2) FROM s3 ORDER BY 1,2;
 value1 |       atan2        
--------+--------------------
    0.1 | 0.5028432114998824
    0.2 | 0.5404195013662578
    0.3 | 0.5763752247813169
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(6 rows)

-- select atan2 with group by (explain)
--Testcase 425:
EXPLAIN VERBOSE
SELECT count(value1), atan2(1-value3, 2) FROM s3 GROUP BY atan2(1-value3, 2) ORDER BY 1,2;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (atan2(('1'::double precision - value3), '2'::double precision))
   Sort Key: (count(s3.value1)), (atan2(('1'::double precision - s3.value3), '2'::double precision))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (atan2(('1'::double precision - value3), '2'::double precision))
         Group Key: (atan2(('1'::double precision - s3.value3), '2'::double precision))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (atan2(('1'::double precision - value3), '2'::double precision)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT atan2((1 - `value3`), 2), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT atan2((1::double precision - value3), 2::double precision), value1 FROM public.s31mysql
(15 rows)

-- select atan2 with group by (result)
--Testcase 426:
SELECT count(value1), atan2(1-value3, 2) FROM s3 GROUP BY atan2(1-value3, 2) ORDER BY 1,2;
 count |       atan2        
-------+--------------------
     1 | 0.5028432114998824
     1 | 0.5404195013662578
     1 | 0.5763752247813169
     1 | 0.8097835782400498
     1 | 1.0121970181484852
     1 |  1.135443047402157
(6 rows)

-- select atan2 with group by index (result)
--Testcase 427:
SELECT value1, atan2(1-value3, 2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |       atan2        
--------+--------------------
    0.1 | 0.5028432114998824
    0.2 | 0.5404195013662578
    0.3 | 0.5763752247813169
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(6 rows)

-- select atan2 with group by index (result)
--Testcase 428:
SELECT value1, atan2(1-value3, 2) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |       atan2        
--------+--------------------
    0.1 | 0.5028432114998824
    0.2 | 0.5404195013662578
    0.3 | 0.5763752247813169
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(6 rows)

-- select atan2 with group by having (explain)
--Testcase 429:
EXPLAIN VERBOSE
SELECT count(value1), atan2(1-value3, 2) FROM s3 GROUP BY atan2(1-value3, 2) HAVING atan2(avg(value1), 2) > 0 ORDER BY 1,2;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: (count(value1)), (atan2(('1'::double precision - value3), '2'::double precision))
   Sort Key: (count(s3.value1)), (atan2(('1'::double precision - s3.value3), '2'::double precision))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: count(value1), (atan2(('1'::double precision - value3), '2'::double precision))
         Group Key: (atan2(('1'::double precision - s3.value3), '2'::double precision))
         Filter: (atan2(avg(s3.value1), '2'::double precision) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (atan2(('1'::double precision - value3), '2'::double precision)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT atan2((1 - `value3`), 2), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT atan2((1::double precision - value3), 2::double precision), value1 FROM public.s31mysql
(16 rows)

-- select atan2 with group by having (result)
--Testcase 430:
SELECT count(value1), atan2(1-value3, 2) FROM s3 GROUP BY atan2(1-value3, 2) HAVING atan2(avg(value1), 2) > 0 ORDER BY 1,2;
 count |       atan2        
-------+--------------------
     1 | 0.5028432114998824
     1 | 0.5404195013662578
     1 | 0.5763752247813169
     1 | 0.8097835782400498
     1 | 1.0121970181484852
     1 |  1.135443047402157
(6 rows)

-- select atan2 with group by index having (result)
--Testcase 431:
SELECT value1, atan2(1-value3, 2) FROM s3 GROUP BY 2,1 HAVING atan2(1-value3, 2) > 0 ORDER BY 1,2;
 value1 |       atan2        
--------+--------------------
    0.1 | 0.5028432114998824
    0.2 | 0.5404195013662578
    0.3 | 0.5763752247813169
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(6 rows)

-- select atan2 with group by index having (result)
--Testcase 432:
SELECT value1, atan2(1-value3, 2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |       atan2        
--------+--------------------
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(3 rows)

-- select atan2 and as
--Testcase 433:
SELECT atan2(value3, 2) as atan21 FROM s3 ORDER BY 1 DESC;
        atan21        
----------------------
 -0.04995839646514282
 -0.09966865396652452
 -0.14888995343880235
  -0.5028432200802054
  -0.8329812774626025
  -1.0259324049385556
(6 rows)

-- select atan (stub function, explain)
--Testcase 434:
EXPLAIN VERBOSE
SELECT atan(value1, 2), atan(value2, 2), atan(value3, 2), atan(value4, 2), atan(5, 2) FROM s3 ORDER BY 1,2,3,4,5;
                                                                                                                                    QUERY PLAN                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9426.12..9443.18 rows=6826 width=40)
   Output: (atan(value1, '2'::double precision)), (atan((value2)::double precision, '2'::double precision)), (atan(value3, '2'::double precision)), (atan((value4)::double precision, '2'::double precision)), (atan('5'::double precision, '2'::double precision))
   Sort Key: (atan(s3.value1, '2'::double precision)), (atan((s3.value2)::double precision, '2'::double precision)), (atan(s3.value3, '2'::double precision)), (atan((s3.value4)::double precision, '2'::double precision)), (atan('5'::double precision, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..8991.41 rows=6826 width=40)
         Output: (atan(value1, '2'::double precision)), (atan((value2)::double precision, '2'::double precision)), (atan(value3, '2'::double precision)), (atan((value4)::double precision, '2'::double precision)), (atan('5'::double precision, '2'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan(`value1`, 2), atan(`value2`, 2), atan(`value3`, 2), atan(`value4`, 2), atan(5, 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.atan(value1, 2::double precision), public.atan(value2, 2::double precision), public.atan(value3, 2::double precision), public.atan(value4, 2::double precision), public.atan(5::double precision, 2::double precision) FROM public.s31mysql
(12 rows)

-- select atan (stub function, result)
--Testcase 435:
SELECT atan(value1, 2), atan(value2, 2), atan(value3, 2), atan(value4, 2), atan(5, 2) FROM s3 ORDER BY 1,2,3,4,5;
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.04995839646514282 |  1.550798992821746 | -0.04995839646514282 |  -1.550798992821746 | 1.1902899496825317
 0.09966865396652452 |  1.550798992821746 | -0.09966865396652452 |  -1.550798992821746 | 1.1902899496825317
 0.14888995343880235 |  1.550798992821746 | -0.14888995343880235 |  -1.550798992821746 | 1.1902899496825317
  0.5028432200802054 | 1.5607966601082315 |  -0.5028432200802054 | -1.5607966601082315 | 1.1902899496825317
  0.8329812774626025 | 1.5607966601082315 |  -0.8329812774626025 | -1.5607966601082315 | 1.1902899496825317
  1.0259324049385556 | 1.5607966601082315 |  -1.0259324049385556 | -1.5607966601082315 | 1.1902899496825317
(6 rows)

-- select atan (stub function, not pushdown constraints, explain)
--Testcase 436:
EXPLAIN VERBOSE
SELECT atan(value1, 2), atan(value2, 2), atan(value3, 2), atan(value4, 2), atan(5, 2) FROM s3 WHERE to_hex(value2) = '64';
                                                                                                                                    QUERY PLAN                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..433.40 rows=34 width=40)
   Output: (atan(value1, '2'::double precision)), (atan((value2)::double precision, '2'::double precision)), (atan(value3, '2'::double precision)), (atan((value4)::double precision, '2'::double precision)), (atan('5'::double precision, '2'::double precision))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT atan(`value1`, 2), atan(`value2`, 2), atan(`value3`, 2), atan(`value4`, 2), atan(5, 2), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.atan(value1, 2::double precision), public.atan(value2, 2::double precision), public.atan(value3, 2::double precision), public.atan(value4, 2::double precision), public.atan(5::double precision, 2::double precision), value2 FROM public.s31mysql
(8 rows)

-- select atan (stub function, not pushdown constraints, result)
--Testcase 437:
SELECT atan(value1, 2), atan(value2, 2), atan(value3, 2), atan(value4, 2), atan(5, 2) FROM s3 WHERE to_hex(value2) = '64';
        atan         |       atan        |         atan         |        atan        |        atan        
---------------------+-------------------+----------------------+--------------------+--------------------
 0.04995839646514282 | 1.550798992821746 | -0.04995839646514282 | -1.550798992821746 | 1.1902899496825317
 0.09966865396652452 | 1.550798992821746 | -0.09966865396652452 | -1.550798992821746 | 1.1902899496825317
 0.14888995343880235 | 1.550798992821746 | -0.14888995343880235 | -1.550798992821746 | 1.1902899496825317
(3 rows)

-- select atan (stub function, pushdown constraints, explain)
--Testcase 438:
EXPLAIN VERBOSE
SELECT atan(value1, 2), atan(value2, 2), atan(value3, 2), atan(value4, 2), atan(5, 2) FROM s3 WHERE value2 != 200;
                                                                                                                                            QUERY PLAN                                                                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..8965.12 rows=6792 width=40)
   Output: (atan(value1, '2'::double precision)), (atan((value2)::double precision, '2'::double precision)), (atan(value3, '2'::double precision)), (atan((value4)::double precision, '2'::double precision)), (atan('5'::double precision, '2'::double precision))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT atan(`value1`, 2), atan(`value2`, 2), atan(`value3`, 2), atan(`value4`, 2), atan(5, 2) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.atan(value1, 2::double precision), public.atan(value2, 2::double precision), public.atan(value3, 2::double precision), public.atan(value4, 2::double precision), public.atan(5::double precision, 2::double precision) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select atan (stub function, pushdown constraints, result)
--Testcase 439:
SELECT atan(value1, 2), atan(value2, 2), atan(value3, 2), atan(value4, 2), atan(5, 2) FROM s3 WHERE value2 != 200;
        atan         |       atan        |         atan         |        atan        |        atan        
---------------------+-------------------+----------------------+--------------------+--------------------
 0.04995839646514282 | 1.550798992821746 | -0.04995839646514282 | -1.550798992821746 | 1.1902899496825317
 0.09966865396652452 | 1.550798992821746 | -0.09966865396652452 | -1.550798992821746 | 1.1902899496825317
 0.14888995343880235 | 1.550798992821746 | -0.14888995343880235 | -1.550798992821746 | 1.1902899496825317
(3 rows)

-- select atan (stub function, atan in constraints, explain)
--Testcase 440:
EXPLAIN VERBOSE
SELECT atan(value1, 2), atan(value2, 2), atan(value3, 2), atan(value4, 2), atan(5, 2) FROM s3 WHERE atan(value1, 2) != 1 ORDER BY 1,2,3,4,5;
                                                                                                                                                                        QUERY PLAN                                                                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11103.92..11120.90 rows=6792 width=40)
   Output: (atan(value1, '2'::double precision)), (atan((value2)::double precision, '2'::double precision)), (atan(value3, '2'::double precision)), (atan((value4)::double precision, '2'::double precision)), (atan('5'::double precision, '2'::double precision))
   Sort Key: (atan(s3.value1, '2'::double precision)), (atan((s3.value2)::double precision, '2'::double precision)), (atan(s3.value3, '2'::double precision)), (atan((s3.value4)::double precision, '2'::double precision)), (atan('5'::double precision, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..10671.62 rows=6792 width=40)
         Output: (atan(value1, '2'::double precision)), (atan((value2)::double precision, '2'::double precision)), (atan(value3, '2'::double precision)), (atan((value4)::double precision, '2'::double precision)), (atan('5'::double precision, '2'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan(`value1`, 2), atan(`value2`, 2), atan(`value3`, 2), atan(`value4`, 2), atan(5, 2) FROM `test`.`s32` WHERE ((atan(`value1`, 2) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.atan(value1, 2::double precision), public.atan(value2, 2::double precision), public.atan(value3, 2::double precision), public.atan(value4, 2::double precision), public.atan(5::double precision, 2::double precision) FROM public.s31mysql WHERE ((public.atan(value1, 2::double precision) <> 1::double precision))
(12 rows)

-- select atan (stub function, atan in constraints, result)
--Testcase 441:
SELECT atan(value1, 2), atan(value2, 2), atan(value3, 2), atan(value4, 2), atan(5, 2) FROM s3 WHERE atan(value1, 2) != 1 ORDER BY 1,2,3,4,5;
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.04995839646514282 |  1.550798992821746 | -0.04995839646514282 |  -1.550798992821746 | 1.1902899496825317
 0.09966865396652452 |  1.550798992821746 | -0.09966865396652452 |  -1.550798992821746 | 1.1902899496825317
 0.14888995343880235 |  1.550798992821746 | -0.14888995343880235 |  -1.550798992821746 | 1.1902899496825317
  0.5028432200802054 | 1.5607966601082315 |  -0.5028432200802054 | -1.5607966601082315 | 1.1902899496825317
  0.8329812774626025 | 1.5607966601082315 |  -0.8329812774626025 | -1.5607966601082315 | 1.1902899496825317
  1.0259324049385556 | 1.5607966601082315 |  -1.0259324049385556 | -1.5607966601082315 | 1.1902899496825317
(6 rows)

-- select atan (stub function, atan in constraints, explain)
--Testcase 442:
EXPLAIN VERBOSE
SELECT atan(value1, 2), atan(value2, 2), atan(value3, 2), atan(value4, 2), atan(5, 2) FROM s3 WHERE atan(5, 2) > value1 ORDER BY 1,2,3,4,5;
                                                                                                                                                                        QUERY PLAN                                                                                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5040.64..5046.33 rows=2276 width=40)
   Output: (atan(value1, '2'::double precision)), (atan((value2)::double precision, '2'::double precision)), (atan(value3, '2'::double precision)), (atan((value4)::double precision, '2'::double precision)), (atan('5'::double precision, '2'::double precision))
   Sort Key: (atan(s3.value1, '2'::double precision)), (atan((s3.value2)::double precision, '2'::double precision)), (atan(s3.value3, '2'::double precision)), (atan((s3.value4)::double precision, '2'::double precision)), (atan('5'::double precision, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..4913.73 rows=2276 width=40)
         Output: (atan(value1, '2'::double precision)), (atan((value2)::double precision, '2'::double precision)), (atan(value3, '2'::double precision)), (atan((value4)::double precision, '2'::double precision)), (atan('5'::double precision, '2'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan(`value1`, 2), atan(`value2`, 2), atan(`value3`, 2), atan(`value4`, 2), atan(5, 2) FROM `test`.`s32` WHERE ((atan(5, 2) > `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.atan(value1, 2::double precision), public.atan(value2, 2::double precision), public.atan(value3, 2::double precision), public.atan(value4, 2::double precision), public.atan(5::double precision, 2::double precision) FROM public.s31mysql WHERE ((public.atan(5::double precision, 2::double precision) > value1))
(12 rows)

-- select atan (stub function, atan in constraints, result)
--Testcase 443:
SELECT atan(value1, 2), atan(value2, 2), atan(value3, 2), atan(value4, 2), atan(5, 2) FROM s3 WHERE atan(5, 2) > value1 ORDER BY 1,2,3,4,5;
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.04995839646514282 |  1.550798992821746 | -0.04995839646514282 |  -1.550798992821746 | 1.1902899496825317
 0.09966865396652452 |  1.550798992821746 | -0.09966865396652452 |  -1.550798992821746 | 1.1902899496825317
 0.14888995343880235 |  1.550798992821746 | -0.14888995343880235 |  -1.550798992821746 | 1.1902899496825317
  0.5028432200802054 | 1.5607966601082315 |  -0.5028432200802054 | -1.5607966601082315 | 1.1902899496825317
(4 rows)

-- select atan as nest function with agg (not pushdown, explain)
--Testcase 444:
EXPLAIN VERBOSE
SELECT sum(value3),atan(sum(value3), 2) FROM s3;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (sum(value3)), atan((sum(value3)), '2'::double precision)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select atan as nest function with agg (not pushdown, error)
--Testcase 445:
SELECT sum(value3),atan(sum(value3), 2) FROM s3;
ERROR:  stub atan(float8, float8) is called
CONTEXT:  PL/pgSQL function atan(double precision,double precision) line 3 at RAISE
-- select atan as nest with log2 (pushdown, explain)
--Testcase 446:
EXPLAIN VERBOSE
SELECT atan(log2(value1), 2),atan(log2(1/value1), 2) FROM s3 ORDER BY 1,2;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7702.55..7719.62 rows=6826 width=16)
   Output: (atan(log2(value1), '2'::double precision)), (atan(log2(('1'::double precision / value1)), '2'::double precision))
   Sort Key: (atan(log2(s3.value1), '2'::double precision)), (atan(log2(('1'::double precision / s3.value1)), '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..7267.84 rows=6826 width=16)
         Output: (atan(log2(value1), '2'::double precision)), (atan(log2(('1'::double precision / value1)), '2'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan(log2(`value1`), 2), atan(log2((1 / `value1`)), 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.atan(public.log2(value1), 2::double precision), public.atan(public.log2((1::double precision / value1)), 2::double precision) FROM public.s31mysql
(12 rows)

-- select atan as nest with log2 (pushdown, result)
--Testcase 447:
SELECT atan(log2(value1), 2),atan(log2(1/value1), 2) FROM s3 ORDER BY 1,2;
        atan         |         atan         
---------------------+----------------------
 -1.0288635006528577 |   1.0288635006528577
  -0.859748003088039 |    0.859748003088039
  -0.715126880832206 |    0.715126880832206
 0.06864375823738518 | -0.06864375823738515
  0.5171258967180242 |  -0.5171258967180242
  0.7109793602585378 |  -0.7109793602585378
(6 rows)

-- select atan with non pushdown func and atanlicit constant (explain)
--Testcase 448:
EXPLAIN VERBOSE
SELECT atan(value3, 2), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=48)
   Output: (atan(value3, '2'::double precision)), '3.141592653589793'::double precision, 4.1
   Sort Key: (atan(s3.value3, '2'::double precision)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=48)
         Output: (atan(value3, '2'::double precision)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT atan(`value3`, 2), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.atan(value3, 2::double precision), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select atan with non pushdown func and atanlicit constant (result)
--Testcase 449:
SELECT atan(value3, 2), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
         atan         |        pi         | ?column? 
----------------------+-------------------+----------
 -0.04995839646514282 | 3.141592653589793 |      4.1
 -0.09966865396652452 | 3.141592653589793 |      4.1
 -0.14888995343880235 | 3.141592653589793 |      4.1
  -0.5028432200802054 | 3.141592653589793 |      4.1
  -0.8329812774626025 | 3.141592653589793 |      4.1
  -1.0259324049385556 | 3.141592653589793 |      4.1
(6 rows)

-- select atan with order by (explain)
--Testcase 450:
EXPLAIN VERBOSE
SELECT value1, atan(1-value3, 2) FROM s3 ORDER BY atan(1-value3, 2);
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=16)
   Output: value1, (atan(('1'::double precision - value3), '2'::double precision))
   Sort Key: (atan(('1'::double precision - s3.value3), '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
         Output: value1, (atan(('1'::double precision - value3), '2'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, atan((1 - `value3`), 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.atan((1::double precision - value3), 2::double precision) FROM public.s31mysql
(12 rows)

-- select atan with order by (result)
--Testcase 451:
SELECT value1, atan(1-value3, 2) FROM s3 ORDER BY atan(1-value3, 2);
 value1 |        atan        
--------+--------------------
    0.1 | 0.5028432114998824
    0.2 | 0.5404195013662578
    0.3 | 0.5763752247813169
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(6 rows)

-- select atan with order by index (result)
--Testcase 452:
SELECT value1, atan(1-value3, 2) FROM s3 ORDER BY 2,1;
 value1 |        atan        
--------+--------------------
    0.1 | 0.5028432114998824
    0.2 | 0.5404195013662578
    0.3 | 0.5763752247813169
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(6 rows)

-- select atan with order by index (result)
--Testcase 453:
SELECT value1, atan(1-value3, 2) FROM s3 ORDER BY 1,2;
 value1 |        atan        
--------+--------------------
    0.1 | 0.5028432114998824
    0.2 | 0.5404195013662578
    0.3 | 0.5763752247813169
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(6 rows)

-- select atan with group by (explain)
--Testcase 454:
EXPLAIN VERBOSE
SELECT count(value1), atan(1-value3, 2) FROM s3 GROUP BY atan(1-value3, 2) ORDER BY 1,2;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=16)
   Output: (count(value1)), (atan(('1'::double precision - value3), '2'::double precision))
   Sort Key: (count(s3.value1)), (atan(('1'::double precision - s3.value3), '2'::double precision))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=16)
         Output: count(value1), (atan(('1'::double precision - value3), '2'::double precision))
         Group Key: (atan(('1'::double precision - s3.value3), '2'::double precision))
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
               Output: (atan(('1'::double precision - value3), '2'::double precision)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT atan((1 - `value3`), 2), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.atan((1::double precision - value3), 2::double precision), value1 FROM public.s31mysql
(15 rows)

-- select atan with group by (result)
--Testcase 455:
SELECT count(value1), atan(1-value3, 2) FROM s3 GROUP BY atan(1-value3, 2) ORDER BY 1,2;
 count |        atan        
-------+--------------------
     1 | 0.5028432114998824
     1 | 0.5404195013662578
     1 | 0.5763752247813169
     1 | 0.8097835782400498
     1 | 1.0121970181484852
     1 |  1.135443047402157
(6 rows)

-- select atan with group by index (result)
--Testcase 456:
SELECT value1, atan(1-value3, 2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |        atan        
--------+--------------------
    0.1 | 0.5028432114998824
    0.2 | 0.5404195013662578
    0.3 | 0.5763752247813169
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(6 rows)

-- select atan with group by index (result)
--Testcase 457:
SELECT value1, atan(1-value3, 2) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |        atan        
--------+--------------------
    0.1 | 0.5028432114998824
    0.2 | 0.5404195013662578
    0.3 | 0.5763752247813169
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(6 rows)

-- select atan with group by having (explain)
--Testcase 458:
EXPLAIN VERBOSE
SELECT count(value1), atan(1-value3, 2) FROM s3 GROUP BY atan(1-value3, 2) HAVING avg(value1) > 0 ORDER BY 1,2;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2221.49..2221.66 rows=67 width=16)
   Output: (count(value1)), (atan(('1'::double precision - value3), '2'::double precision))
   Sort Key: (count(s3.value1)), (atan(('1'::double precision - s3.value3), '2'::double precision))
   ->  HashAggregate  (cost=2199.54..2219.46 rows=67 width=16)
         Output: count(value1), (atan(('1'::double precision - value3), '2'::double precision))
         Group Key: (atan(('1'::double precision - s3.value3), '2'::double precision))
         Filter: (avg(s3.value1) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=16)
               Output: (atan(('1'::double precision - value3), '2'::double precision)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT atan((1 - `value3`), 2), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.atan((1::double precision - value3), 2::double precision), value1 FROM public.s31mysql
(16 rows)

-- select atan with group by having (result)
--Testcase 459:
SELECT count(value1), atan(1-value3, 2) FROM s3 GROUP BY atan(1-value3, 2) HAVING avg(value1) > 0 ORDER BY 1,2;
 count |        atan        
-------+--------------------
     1 | 0.5028432114998824
     1 | 0.5404195013662578
     1 | 0.5763752247813169
     1 | 0.8097835782400498
     1 | 1.0121970181484852
     1 |  1.135443047402157
(6 rows)

-- select atan with group by index having (result)
--Testcase 460:
SELECT value3, atan(1-value3, 2) FROM s3 GROUP BY 2,1 HAVING atan(1-value3, 2) > 0 ORDER BY 2,1;
 value3 |        atan        
--------+--------------------
   -0.1 | 0.5028432114998824
   -0.2 | 0.5404195013662578
   -0.3 | 0.5763752247813169
   -1.1 | 0.8097835782400498
   -2.2 | 1.0121970181484852
   -3.3 |  1.135443047402157
(6 rows)

-- select atan with group by index having (result)
--Testcase 461:
SELECT value1, atan(1-value3, 2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |        atan        
--------+--------------------
    1.1 | 0.8097835782400498
    2.2 | 1.0121970181484852
    3.3 |  1.135443047402157
(3 rows)

-- select atan and as
--Testcase 462:
SELECT atan(value3, 2) as atan1 FROM s3 ORDER BY 1 DESC;
        atan1         
----------------------
 -0.04995839646514282
 -0.09966865396652452
 -0.14888995343880235
  -0.5028432200802054
  -0.8329812774626025
  -1.0259324049385556
(6 rows)

-- select ceil (builtin function, explain)
--Testcase 463:
EXPLAIN VERBOSE
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=961.88..978.94 rows=6826 width=64)
   Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision)), '1'::numeric
   Sort Key: (ceil(s3.value1)), (ceil((s3.value2)::double precision)), (ceil(s3.value3)), (ceil((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=64)
         Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision)), '1'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ceil(`value1`), ceil(`value2`), ceil(`value3`), ceil(`value4`), 1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), 1::numeric FROM public.s31mysql
(12 rows)

-- select ceil (builtin function, result)
--Testcase 464:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM s3 ORDER BY 1,2,3,4,5;
 ceil | ceil | ceil | ceil | ceil 
------+------+------+------+------
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
    2 |  200 |   -1 | -200 |    1
    3 |  200 |   -2 | -200 |    1
    4 |  200 |   -3 | -200 |    1
(6 rows)

-- select ceil (builtin function, not pushdown constraints, explain)
--Testcase 465:
EXPLAIN VERBOSE
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=64)
   Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision)), '1'::numeric
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ceil(`value1`), ceil(`value2`), ceil(`value3`), ceil(`value4`), 1, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), 1::numeric, value2 FROM public.s31mysql
(8 rows)

-- select ceil (builtin function, not pushdown constraints, result)
--Testcase 466:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM s3 WHERE to_hex(value2) = '64';
 ceil | ceil | ceil | ceil | ceil 
------+------+------+------+------
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
(3 rows)

-- select ceil (builtin function, pushdown constraints, explain)
--Testcase 467:
EXPLAIN VERBOSE
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM s3 WHERE value2 != 200;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=64)
   Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ceil(`value1`), ceil(`value2`), ceil(`value3`), ceil(`value4`), 1 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), 1::numeric FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select ceil (builtin function, pushdown constraints, result)
--Testcase 468:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM s3 WHERE value2 != 200;
 ceil | ceil | ceil | ceil | ceil 
------+------+------+------+------
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
(3 rows)

-- select ceil (builtin function, ceil in constraints, explain)
--Testcase 469:
EXPLAIN VERBOSE
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM s3 WHERE ceil(value1) != 1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..560.11 rows=6792 width=64)
   Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ceil(`value1`), ceil(`value2`), ceil(`value3`), ceil(`value4`), 1 FROM `test`.`s32` WHERE ((ceil(`value1`) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), 1::numeric FROM public.s31mysql WHERE ((ceil(value1) <> 1::double precision))
(7 rows)

-- select ceil (builtin function, ceil in constraints, result)
--Testcase 470:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM s3 WHERE ceil(value1) != 1;
 ceil | ceil | ceil | ceil | ceil 
------+------+------+------+------
    2 |  200 |   -1 | -200 |    1
    3 |  200 |   -2 | -200 |    1
    4 |  200 |   -3 | -200 |    1
(3 rows)

-- select ceil (builtin function, ceil in constraints, explain)
--Testcase 471:
EXPLAIN VERBOSE
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM s3 WHERE ceil(0.5) > value1;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=64)
   Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ceil(`value1`), ceil(`value2`), ceil(`value3`), ceil(`value4`), 1 FROM `test`.`s32` WHERE ((1 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), 1::numeric FROM public.s31mysql WHERE ((1::double precision > value1))
(7 rows)

-- select ceil (builtin function, ceil in constraints, result)
--Testcase 472:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM s3 WHERE ceil(0.5) > value1;
 ceil | ceil | ceil | ceil | ceil 
------+------+------+------+------
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
(3 rows)

-- select ceil as nest function with agg (pushdown, explain)
--Testcase 473:
EXPLAIN VERBOSE
SELECT sum(value3),ceil(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), ceil((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select ceil as nest function with agg (pushdown, result)
--Testcase 474:
SELECT sum(value3),ceil(sum(value3)) FROM s3;
        sum         | ceil 
--------------------+------
 -7.200000040233135 |   -7
(1 row)

-- select ceil as nest with log2 (pushdown, explain)
--Testcase 475:
EXPLAIN VERBOSE
SELECT ceil(log2(value1)),ceil(log2(1/value1)) FROM s3 ORDER BY 1,2;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=16)
   Output: (ceil(log2(value1))), (ceil(log2(('1'::double precision / value1))))
   Sort Key: (ceil(log2(s3.value1))), (ceil(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=16)
         Output: (ceil(log2(value1))), (ceil(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ceil(log2(`value1`)), ceil(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ceil(public.log2(value1)), ceil(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select ceil as nest with log2 (pushdown, result)
--Testcase 476:
SELECT ceil(log2(value1)),ceil(log2(1/value1)) FROM s3 ORDER BY 1,2;
 ceil | ceil 
------+------
   -3 |    4
   -2 |    3
   -1 |    2
    1 |   -0
    2 |   -1
    2 |   -1
(6 rows)

-- select ceil with non pushdown func and explicit constant (explain)
--Testcase 477:
EXPLAIN VERBOSE
SELECT ceil(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (ceil(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (ceil(s3.value3)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (ceil(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ceil(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ceil(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select ceil with non pushdown func and explicit constant (result)
--Testcase 478:
SELECT ceil(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
 ceil |        pi         | ?column? 
------+-------------------+----------
   -0 | 3.141592653589793 |      4.1
   -0 | 3.141592653589793 |      4.1
   -0 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
   -2 | 3.141592653589793 |      4.1
   -3 | 3.141592653589793 |      4.1
(6 rows)

-- select ceil with order by (explain)
--Testcase 479:
EXPLAIN VERBOSE
SELECT value1, ceil(1-value3) FROM s3 ORDER BY ceil(1-value3);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (ceil(('1'::double precision - value3)))
   Sort Key: (ceil(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (ceil(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, ceil((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, ceil((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select ceil with order by (result)
--Testcase 480:
SELECT value1, ceil(1-value3) FROM s3 ORDER BY ceil(1-value3);
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with order by index (result)
--Testcase 481:
SELECT value1, ceil(1-value3) FROM s3 ORDER BY 2,1;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with order by index (result)
--Testcase 482:
SELECT value1, ceil(1-value3) FROM s3 ORDER BY 1,2;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with group by (explain)
--Testcase 483:
EXPLAIN VERBOSE
SELECT value1, ceil(1-value3) FROM s3 GROUP BY value1, ceil(1-value3) ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: value1, (ceil(('1'::double precision - value3)))
   Sort Key: s3.value1, (ceil(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: value1, (ceil(('1'::double precision - value3)))
         Group Key: s3.value1, (ceil(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (ceil(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, ceil((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, ceil((1::double precision - value3)) FROM public.s31mysql
(15 rows)

-- select ceil with group by (result)
--Testcase 484:
SELECT value1, ceil(1-value3) FROM s3 GROUP BY value1, ceil(1-value3) ORDER BY 1,2;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with group by index (result)
--Testcase 485:
SELECT value1, ceil(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with group by index (result)
--Testcase 486:
SELECT value1, ceil(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with group by having (explain)
--Testcase 487:
EXPLAIN VERBOSE
SELECT value1, ceil(1-value3) FROM s3 GROUP BY value1, ceil(1-value3) HAVING ceil(avg(value1)) > 0 ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: value1, (ceil(('1'::double precision - value3)))
   Sort Key: s3.value1, (ceil(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: value1, (ceil(('1'::double precision - value3)))
         Group Key: s3.value1, (ceil(('1'::double precision - s3.value3)))
         Filter: (ceil(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (ceil(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, ceil((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, ceil((1::double precision - value3)) FROM public.s31mysql
(16 rows)

-- select ceil with group by having (result)
--Testcase 488:
SELECT value1, ceil(1-value3) FROM s3 GROUP BY value1, ceil(1-value3) HAVING ceil(avg(value1)) > 0 ORDER BY 1,2;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with group by index having (result)
--Testcase 489:
SELECT value1, ceil(1-value3) FROM s3 GROUP BY 2,1 HAVING ceil(1-value3) > 0 ORDER BY 1,2;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with group by index having (result)
--Testcase 490:
SELECT value1, ceil(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | ceil 
--------+------
    1.1 |    3
    2.2 |    4
    3.3 |    5
(3 rows)

-- select ceil and as
--Testcase 491:
SELECT ceil(value3) as ceil1 FROM s3 ORDER BY 1 DESC;
 ceil1 
-------
    -0
    -0
    -0
    -1
    -2
    -3
(6 rows)

-- select ceiling (builtin function, explain)
--Testcase 492:
EXPLAIN VERBOSE
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=961.88..978.94 rows=6826 width=64)
   Output: (ceiling(value1)), (ceiling((value2)::double precision)), (ceiling(value3)), (ceiling((value4)::double precision)), '1'::numeric
   Sort Key: (ceiling(s3.value1)), (ceiling((s3.value2)::double precision)), (ceiling(s3.value3)), (ceiling((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=64)
         Output: (ceiling(value1)), (ceiling((value2)::double precision)), (ceiling(value3)), (ceiling((value4)::double precision)), '1'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ceiling(`value1`), ceiling(`value2`), ceiling(`value3`), ceiling(`value4`), 1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), 1::numeric FROM public.s31mysql
(12 rows)

-- select ceiling (builtin function, result)
--Testcase 493:
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM s3 ORDER BY 1,2,3,4,5;
 ceiling | ceiling | ceiling | ceiling | ceiling 
---------+---------+---------+---------+---------
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
       2 |     200 |      -1 |    -200 |       1
       3 |     200 |      -2 |    -200 |       1
       4 |     200 |      -3 |    -200 |       1
(6 rows)

-- select ceiling (builtin function, not pushdown constraints, explain)
--Testcase 494:
EXPLAIN VERBOSE
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=64)
   Output: (ceiling(value1)), (ceiling((value2)::double precision)), (ceiling(value3)), (ceiling((value4)::double precision)), '1'::numeric
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ceiling(`value1`), ceiling(`value2`), ceiling(`value3`), ceiling(`value4`), 1, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), 1::numeric, value2 FROM public.s31mysql
(8 rows)

-- select ceiling (builtin function, not pushdown constraints, result)
--Testcase 495:
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM s3 WHERE to_hex(value2) = '64';
 ceiling | ceiling | ceiling | ceiling | ceiling 
---------+---------+---------+---------+---------
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
(3 rows)

-- select ceiling (builtin function, pushdown constraints, explain)
--Testcase 496:
EXPLAIN VERBOSE
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM s3 WHERE value2 != 200;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=64)
   Output: (ceiling(value1)), (ceiling((value2)::double precision)), (ceiling(value3)), (ceiling((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ceiling(`value1`), ceiling(`value2`), ceiling(`value3`), ceiling(`value4`), 1 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), 1::numeric FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select ceiling (builtin function, pushdown constraints, result)
--Testcase 497:
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM s3 WHERE value2 != 200;
 ceiling | ceiling | ceiling | ceiling | ceiling 
---------+---------+---------+---------+---------
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
(3 rows)

-- select ceiling (builtin function, ceiling in constraints, explain)
--Testcase 498:
EXPLAIN VERBOSE
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM s3 WHERE ceiling(value1) != 1;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..560.11 rows=6792 width=64)
   Output: (ceiling(value1)), (ceiling((value2)::double precision)), (ceiling(value3)), (ceiling((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ceiling(`value1`), ceiling(`value2`), ceiling(`value3`), ceiling(`value4`), 1 FROM `test`.`s32` WHERE ((ceiling(`value1`) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), 1::numeric FROM public.s31mysql WHERE ((ceiling(value1) <> 1::double precision))
(7 rows)

-- select ceiling (builtin function, ceiling in constraints, result)
--Testcase 499:
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM s3 WHERE ceiling(value1) != 1;
 ceiling | ceiling | ceiling | ceiling | ceiling 
---------+---------+---------+---------+---------
       2 |     200 |      -1 |    -200 |       1
       3 |     200 |      -2 |    -200 |       1
       4 |     200 |      -3 |    -200 |       1
(3 rows)

-- select ceiling (builtin function, ceiling in constraints, explain)
--Testcase 500:
EXPLAIN VERBOSE
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM s3 WHERE ceiling(0.5) > value1;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=64)
   Output: (ceiling(value1)), (ceiling((value2)::double precision)), (ceiling(value3)), (ceiling((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ceiling(`value1`), ceiling(`value2`), ceiling(`value3`), ceiling(`value4`), 1 FROM `test`.`s32` WHERE ((1 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), 1::numeric FROM public.s31mysql WHERE ((1::double precision > value1))
(7 rows)

-- select ceiling (builtin function, ceiling in constraints, result)
--Testcase 501:
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM s3 WHERE ceiling(0.5) > value1;
 ceiling | ceiling | ceiling | ceiling | ceiling 
---------+---------+---------+---------+---------
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
(3 rows)

-- select ceiling as nest function with agg (pushdown, explain)
--Testcase 502:
EXPLAIN VERBOSE
SELECT sum(value3),ceiling(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), ceiling((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select ceiling as nest function with agg (pushdown, result)
--Testcase 503:
SELECT sum(value3),ceiling(sum(value3)) FROM s3;
        sum         | ceiling 
--------------------+---------
 -7.200000040233135 |      -7
(1 row)

-- select ceiling as nest with log2 (pushdown, explain)
--Testcase 504:
EXPLAIN VERBOSE
SELECT ceiling(log2(value1)),ceiling(log2(1/value1)) FROM s3 ORDER BY 1,2;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=16)
   Output: (ceiling(log2(value1))), (ceiling(log2(('1'::double precision / value1))))
   Sort Key: (ceiling(log2(s3.value1))), (ceiling(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=16)
         Output: (ceiling(log2(value1))), (ceiling(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ceiling(log2(`value1`)), ceiling(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ceiling(public.log2(value1)), ceiling(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select ceiling as nest with log2 (pushdown, result)
--Testcase 505:
SELECT ceiling(log2(value1)),ceiling(log2(1/value1)) FROM s3 ORDER BY 1,2;
 ceiling | ceiling 
---------+---------
      -3 |       4
      -2 |       3
      -1 |       2
       1 |      -0
       2 |      -1
       2 |      -1
(6 rows)

-- select ceiling with non pushdown func and explicit constant (explain)
--Testcase 506:
EXPLAIN VERBOSE
SELECT ceiling(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (ceiling(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (ceiling(s3.value3)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (ceiling(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ceiling(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ceiling(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select ceiling with non pushdown func and explicit constant (result)
--Testcase 507:
SELECT ceiling(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
 ceiling |        pi         | ?column? 
---------+-------------------+----------
      -0 | 3.141592653589793 |      4.1
      -0 | 3.141592653589793 |      4.1
      -0 | 3.141592653589793 |      4.1
      -1 | 3.141592653589793 |      4.1
      -2 | 3.141592653589793 |      4.1
      -3 | 3.141592653589793 |      4.1
(6 rows)

-- select ceiling with order by (explain)
--Testcase 508:
EXPLAIN VERBOSE
SELECT value1, ceiling(1-value3) FROM s3 ORDER BY ceiling(1-value3);
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (ceiling(('1'::double precision - value3)))
   Sort Key: (ceiling(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (ceiling(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, ceiling((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, ceiling((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select ceiling with order by (result)
--Testcase 509:
SELECT value1, ceiling(1-value3) FROM s3 ORDER BY ceiling(1-value3);
 value1 | ceiling 
--------+---------
    0.1 |       2
    0.2 |       2
    0.3 |       2
    1.1 |       3
    2.2 |       4
    3.3 |       5
(6 rows)

-- select ceiling with order by index (result)
--Testcase 510:
SELECT value1, ceiling(1-value3) FROM s3 ORDER BY 2,1;
 value1 | ceiling 
--------+---------
    0.1 |       2
    0.2 |       2
    0.3 |       2
    1.1 |       3
    2.2 |       4
    3.3 |       5
(6 rows)

-- select ceiling with order by index (result)
--Testcase 511:
SELECT value1, ceiling(1-value3) FROM s3 ORDER BY 1,2;
 value1 | ceiling 
--------+---------
    0.1 |       2
    0.2 |       2
    0.3 |       2
    1.1 |       3
    2.2 |       4
    3.3 |       5
(6 rows)

-- select ceiling with group by (explain)
--Testcase 512:
EXPLAIN VERBOSE
SELECT count(value1), ceiling(1-value3) FROM s3 GROUP BY ceiling(1-value3) ORDER BY 2,1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (ceiling(('1'::double precision - value3)))
   Sort Key: (ceiling(('1'::double precision - s3.value3))), (count(s3.value1))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (ceiling(('1'::double precision - value3)))
         Group Key: (ceiling(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (ceiling(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT ceiling((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT ceiling((1::double precision - value3)), value1 FROM public.s31mysql
(15 rows)

-- select ceiling with group by (result)
--Testcase 513:
SELECT count(value1), ceiling(1-value3) FROM s3 GROUP BY ceiling(1-value3) ORDER BY 2,1;
 count | ceiling 
-------+---------
     3 |       2
     1 |       3
     1 |       4
     1 |       5
(4 rows)

-- select ceiling with group by index (result)
--Testcase 514:
SELECT value1, ceiling(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | ceiling 
--------+---------
    0.1 |       2
    0.2 |       2
    0.3 |       2
    1.1 |       3
    2.2 |       4
    3.3 |       5
(6 rows)

-- select ceiling with group by index (result)
--Testcase 515:
SELECT value1, ceiling(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 | ceiling 
--------+---------
    0.1 |       2
    0.2 |       2
    0.3 |       2
    1.1 |       3
    2.2 |       4
    3.3 |       5
(6 rows)

-- select ceiling with group by having (explain)
--Testcase 516:
EXPLAIN VERBOSE
SELECT count(value1), ceiling(1-value3) FROM s3 GROUP BY ceiling(1-value3) HAVING ceiling(avg(value1)) > 0 ORDER BY 2,1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: (count(value1)), (ceiling(('1'::double precision - value3)))
   Sort Key: (ceiling(('1'::double precision - s3.value3))), (count(s3.value1))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: count(value1), (ceiling(('1'::double precision - value3)))
         Group Key: (ceiling(('1'::double precision - s3.value3)))
         Filter: (ceiling(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (ceiling(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT ceiling((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT ceiling((1::double precision - value3)), value1 FROM public.s31mysql
(16 rows)

-- select ceiling with group by having (result)
--Testcase 517:
SELECT count(value1), ceiling(1-value3) FROM s3 GROUP BY ceiling(1-value3) HAVING ceiling(avg(value1)) > 0 ORDER BY 2,1;
 count | ceiling 
-------+---------
     3 |       2
     1 |       3
     1 |       4
     1 |       5
(4 rows)

-- select ceiling with group by index having (result)
--Testcase 518:
SELECT value1, ceiling(1-value3) FROM s3 GROUP BY 2,1 HAVING ceiling(1-value3) > 0 ORDER BY 1,2;
 value1 | ceiling 
--------+---------
    0.1 |       2
    0.2 |       2
    0.3 |       2
    1.1 |       3
    2.2 |       4
    3.3 |       5
(6 rows)

-- select ceiling with group by index having (result)
--Testcase 519:
SELECT value1, ceiling(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | ceiling 
--------+---------
    1.1 |       3
    2.2 |       4
    3.3 |       5
(3 rows)

-- select ceiling and as
--Testcase 520:
SELECT ceiling(value3) as ceiling1 FROM s3 ORDER BY 1 DESC;
 ceiling1 
----------
       -0
       -0
       -0
       -1
       -2
       -3
(6 rows)

-- select cos (builtin function, explain)
--Testcase 521:
EXPLAIN VERBOSE
SELECT value1, cos(value2), cos(value3), cos(value4), cos(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=944.81..961.88 rows=6826 width=40)
   Output: value1, (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision)), '0.8775825618903728'::double precision
   Sort Key: s3.value1, (cos((s3.value2)::double precision)), (cos(s3.value3)), (cos((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..510.10 rows=6826 width=40)
         Output: value1, (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision)), '0.8775825618903728'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, cos(`value2`), cos(`value3`), cos(`value4`), 0.8775825618903728 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, cos(value2), cos(value3), cos(value4), 0.8775825618903728::double precision FROM public.s31mysql
(12 rows)

-- select cos (builtin function, result)
--Testcase 522:
SELECT value1, cos(value2), cos(value3), cos(value4), cos(0.5) FROM s3 ORDER BY 1,2,3,4,5;
 value1 |         cos         |         cos         |         cos         |        cos         
--------+---------------------+---------------------+---------------------+--------------------
    0.1 |  0.8623188722876839 |  0.9950041651292624 |  0.8623188722876839 | 0.8775825618903728
    0.2 |  0.8623188722876839 |  0.9800665772491609 |  0.8623188722876839 | 0.8775825618903728
    0.3 |  0.8623188722876839 |  0.9553364856027305 |  0.8623188722876839 | 0.8775825618903728
    1.1 | 0.48718767500700594 |   0.453596100177538 | 0.48718767500700594 | 0.8775825618903728
    2.2 | 0.48718767500700594 | -0.5885011558074578 | 0.48718767500700594 | 0.8775825618903728
    3.3 | 0.48718767500700594 | -0.9874797774307646 | 0.48718767500700594 | 0.8775825618903728
(6 rows)

-- select cos (builtin function, not pushdown constraints, explain)
--Testcase 523:
EXPLAIN VERBOSE
SELECT cos(value1), cos(value2), cos(value3), cos(value4), cos(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=40)
   Output: (cos(value1)), (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision)), '0.8775825618903728'::double precision
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT cos(`value1`), cos(`value2`), cos(`value3`), cos(`value4`), 0.8775825618903728, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT cos(value1), cos(value2), cos(value3), cos(value4), 0.8775825618903728::double precision, value2 FROM public.s31mysql
(8 rows)

-- select cos (builtin function, not pushdown constraints, result)
--Testcase 524:
SELECT cos(value1), cos(value2), cos(value3), cos(value4), cos(0.5) FROM s3 WHERE to_hex(value2) = '64';
        cos         |        cos         |        cos         |        cos         |        cos         
--------------------+--------------------+--------------------+--------------------+--------------------
 0.9950041651292624 | 0.8623188722876839 | 0.9950041651292624 | 0.8623188722876839 | 0.8775825618903728
 0.9800665772491609 | 0.8623188722876839 | 0.9800665772491609 | 0.8623188722876839 | 0.8775825618903728
 0.9553364856027305 | 0.8623188722876839 | 0.9553364856027305 | 0.8623188722876839 | 0.8775825618903728
(3 rows)

-- select cos (builtin function, pushdown constraints, explain)
--Testcase 525:
EXPLAIN VERBOSE
SELECT cos(value1), cos(value2), cos(value3), cos(value4), cos(0.5) FROM s3 WHERE value2 != 200;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=40)
   Output: (cos(value1)), (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision)), '0.8775825618903728'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT cos(`value1`), cos(`value2`), cos(`value3`), cos(`value4`), 0.8775825618903728 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT cos(value1), cos(value2), cos(value3), cos(value4), 0.8775825618903728::double precision FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select cos (builtin function, pushdown constraints, result)
--Testcase 526:
SELECT cos(value1), cos(value2), cos(value3), cos(value4), cos(0.5) FROM s3 WHERE value2 != 200;
        cos         |        cos         |        cos         |        cos         |        cos         
--------------------+--------------------+--------------------+--------------------+--------------------
 0.9950041651292624 | 0.8623188722876839 | 0.9950041651292624 | 0.8623188722876839 | 0.8775825618903728
 0.9800665772491609 | 0.8623188722876839 | 0.9800665772491609 | 0.8623188722876839 | 0.8775825618903728
 0.9553364856027305 | 0.8623188722876839 | 0.9553364856027305 | 0.8623188722876839 | 0.8775825618903728
(3 rows)

-- select cos (builtin function, cos in constraints, explain)
--Testcase 527:
EXPLAIN VERBOSE
SELECT value1, cos(value2), cos(value3), cos(value4), cos(0.5) FROM s3 WHERE cos(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=975.43..992.41 rows=6792 width=40)
   Output: value1, (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision)), '0.8775825618903728'::double precision
   Sort Key: s3.value1, (cos((s3.value2)::double precision)), (cos(s3.value3)), (cos((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..543.13 rows=6792 width=40)
         Output: value1, (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision)), '0.8775825618903728'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, cos(`value2`), cos(`value3`), cos(`value4`), 0.8775825618903728 FROM `test`.`s32` WHERE ((cos(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, cos(value2), cos(value3), cos(value4), 0.8775825618903728::double precision FROM public.s31mysql WHERE ((cos(value1) <> 1::double precision))
(12 rows)

-- select cos (builtin function, cos in constraints, result)
--Testcase 528:
SELECT value1, cos(value2), cos(value3), cos(value4), cos(0.5) FROM s3 WHERE cos(value1) != 1 ORDER BY 1,2,3,4,5;
 value1 |         cos         |         cos         |         cos         |        cos         
--------+---------------------+---------------------+---------------------+--------------------
    0.1 |  0.8623188722876839 |  0.9950041651292624 |  0.8623188722876839 | 0.8775825618903728
    0.2 |  0.8623188722876839 |  0.9800665772491609 |  0.8623188722876839 | 0.8775825618903728
    0.3 |  0.8623188722876839 |  0.9553364856027305 |  0.8623188722876839 | 0.8775825618903728
    1.1 | 0.48718767500700594 |   0.453596100177538 | 0.48718767500700594 | 0.8775825618903728
    2.2 | 0.48718767500700594 | -0.5885011558074578 | 0.48718767500700594 | 0.8775825618903728
    3.3 | 0.48718767500700594 | -0.9874797774307646 | 0.48718767500700594 | 0.8775825618903728
(6 rows)

-- select cos (builtin function, cos in constraints, explain)
--Testcase 529:
EXPLAIN VERBOSE
SELECT cos(value1), cos(value2), cos(value3), cos(value4), cos(0.5) FROM s3 WHERE cos(0.5) > value1;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=40)
   Output: (cos(value1)), (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision)), '0.8775825618903728'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT cos(`value1`), cos(`value2`), cos(`value3`), cos(`value4`), 0.8775825618903728 FROM `test`.`s32` WHERE ((0.8775825618903728 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT cos(value1), cos(value2), cos(value3), cos(value4), 0.8775825618903728::double precision FROM public.s31mysql WHERE ((0.8775825618903728::double precision > value1))
(7 rows)

-- select cos (builtin function, cos in constraints, result)
--Testcase 530:
SELECT cos(value1), cos(value2), cos(value3), cos(value4), cos(0.5) FROM s3 WHERE cos(0.5) > value1;
        cos         |        cos         |        cos         |        cos         |        cos         
--------------------+--------------------+--------------------+--------------------+--------------------
 0.9950041651292624 | 0.8623188722876839 | 0.9950041651292624 | 0.8623188722876839 | 0.8775825618903728
 0.9800665772491609 | 0.8623188722876839 | 0.9800665772491609 | 0.8623188722876839 | 0.8775825618903728
 0.9553364856027305 | 0.8623188722876839 | 0.9553364856027305 | 0.8623188722876839 | 0.8775825618903728
(3 rows)

-- select cos as nest function with agg (pushdown, explain)
--Testcase 531:
EXPLAIN VERBOSE
SELECT sum(value3),cos(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), cos((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select cos as nest function with agg (pushdown, result)
--Testcase 532:
SELECT sum(value3),cos(sum(value3)) FROM s3;
        sum         |        cos         
--------------------+--------------------
 -7.200000040233135 | 0.6083512826005076
(1 row)

-- select cos as nest with log2 (pushdown, explain)
--Testcase 533:
EXPLAIN VERBOSE
SELECT value1, cos(log2(value1)),cos(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (cos(log2(value1))), (cos(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (cos(log2(s3.value1))), (cos(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (cos(log2(value1))), (cos(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, cos(log2(`value1`)), cos(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, cos(public.log2(value1)), cos(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select cos as nest with log2 (pushdown, result)
--Testcase 534:
SELECT value1, cos(log2(value1)),cos(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |         cos          |         cos          
--------+----------------------+----------------------
    0.1 |  -0.9837835873812056 |  -0.9837835873812056
    0.2 |  -0.6824664096936612 |  -0.6824664096936612
    0.3 |   -0.165405548705388 | -0.16540554870538823
    1.1 |   0.9905612719298578 |   0.9905612719298578
    2.2 |   0.4198615538592954 |   0.4198615538592954
    3.3 | -0.15108885156202348 | -0.15108885156202326
(6 rows)

-- select cos with non pushdown func and explicit constant (explain)
--Testcase 535:
EXPLAIN VERBOSE
SELECT cos(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (cos(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (cos(s3.value3)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (cos(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT cos(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT cos(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select cos with non pushdown func and explicit constant (result)
--Testcase 536:
SELECT cos(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
         cos         |        pi         | ?column? 
---------------------+-------------------+----------
  0.9950041651292624 | 3.141592653589793 |      4.1
  0.9800665772491609 | 3.141592653589793 |      4.1
  0.9553364856027305 | 3.141592653589793 |      4.1
   0.453596100177538 | 3.141592653589793 |      4.1
 -0.5885011558074578 | 3.141592653589793 |      4.1
 -0.9874797774307646 | 3.141592653589793 |      4.1
(6 rows)

-- select cos with order by (explain)
--Testcase 537:
EXPLAIN VERBOSE
SELECT value1, cos(1-value3) FROM s3 ORDER BY cos(1-value3);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (cos(('1'::double precision - value3)))
   Sort Key: (cos(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (cos(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, cos((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, cos((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select cos with order by (result)
--Testcase 538:
SELECT value1, cos(1-value3) FROM s3 ORDER BY cos(1-value3);
 value1 |         cos         
--------+---------------------
    2.2 | -0.9982947730112559
    1.1 | -0.5048461251803724
    3.3 |  -0.400799215766171
    0.3 |  0.2674988171380787
    0.2 | 0.36235775169898066
    0.1 | 0.45359612009757494
(6 rows)

-- select cos with order by index (result)
--Testcase 539:
SELECT value1, cos(1-value3) FROM s3 ORDER BY 2,1;
 value1 |         cos         
--------+---------------------
    2.2 | -0.9982947730112559
    1.1 | -0.5048461251803724
    3.3 |  -0.400799215766171
    0.3 |  0.2674988171380787
    0.2 | 0.36235775169898066
    0.1 | 0.45359612009757494
(6 rows)

-- select cos with order by index (result)
--Testcase 540:
SELECT value1, cos(1-value3) FROM s3 ORDER BY 1,2;
 value1 |         cos         
--------+---------------------
    0.1 | 0.45359612009757494
    0.2 | 0.36235775169898066
    0.3 |  0.2674988171380787
    1.1 | -0.5048461251803724
    2.2 | -0.9982947730112559
    3.3 |  -0.400799215766171
(6 rows)

-- select cos with group by (explain)
--Testcase 541:
EXPLAIN VERBOSE
SELECT value1, cos(1-value3) FROM s3 GROUP BY value1, cos(1-value3) ORDER BY 1,2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: value1, (cos(('1'::double precision - value3)))
   Sort Key: s3.value1, (cos(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: value1, (cos(('1'::double precision - value3)))
         Group Key: s3.value1, (cos(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (cos(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, cos((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, cos((1::double precision - value3)) FROM public.s31mysql
(15 rows)

-- select cos with group by (result)
--Testcase 542:
SELECT value1, cos(1-value3) FROM s3 GROUP BY value1, cos(1-value3) ORDER BY 1,2;
 value1 |         cos         
--------+---------------------
    0.1 | 0.45359612009757494
    0.2 | 0.36235775169898066
    0.3 |  0.2674988171380787
    1.1 | -0.5048461251803724
    2.2 | -0.9982947730112559
    3.3 |  -0.400799215766171
(6 rows)

-- select cos with group by index (result)
--Testcase 543:
SELECT value1, cos(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |         cos         
--------+---------------------
    0.1 | 0.45359612009757494
    0.2 | 0.36235775169898066
    0.3 |  0.2674988171380787
    1.1 | -0.5048461251803724
    2.2 | -0.9982947730112559
    3.3 |  -0.400799215766171
(6 rows)

-- select cos with group by index (result)
--Testcase 544:
SELECT value1, cos(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |         cos         
--------+---------------------
    0.1 | 0.45359612009757494
    0.2 | 0.36235775169898066
    0.3 |  0.2674988171380787
    1.1 | -0.5048461251803724
    2.2 | -0.9982947730112559
    3.3 |  -0.400799215766171
(6 rows)

-- select cos with group by having (explain)
--Testcase 545:
EXPLAIN VERBOSE
SELECT value1, cos(1-value3) FROM s3 GROUP BY value1, cos(1-value3) HAVING cos(avg(value1)) > 0 ORDER BY 1,2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: value1, (cos(('1'::double precision - value3)))
   Sort Key: s3.value1, (cos(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: value1, (cos(('1'::double precision - value3)))
         Group Key: s3.value1, (cos(('1'::double precision - s3.value3)))
         Filter: (cos(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (cos(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, cos((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, cos((1::double precision - value3)) FROM public.s31mysql
(16 rows)

-- select cos with group by having (result)
--Testcase 546:
SELECT value1, cos(1-value3) FROM s3 GROUP BY value1, cos(1-value3) HAVING cos(avg(value1)) > 0 ORDER BY 1,2;
 value1 |         cos         
--------+---------------------
    0.1 | 0.45359612009757494
    0.2 | 0.36235775169898066
    0.3 |  0.2674988171380787
    1.1 | -0.5048461251803724
(4 rows)

-- select cos with group by index having (result)
--Testcase 547:
SELECT value1, cos(1-value3) FROM s3 GROUP BY 2,1 HAVING cos(1-value3) > 0 ORDER BY 1,2;
 value1 |         cos         
--------+---------------------
    0.1 | 0.45359612009757494
    0.2 | 0.36235775169898066
    0.3 |  0.2674988171380787
(3 rows)

-- select cos with group by index having (result)
--Testcase 548:
SELECT value1, cos(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1;
 value1 |         cos         
--------+---------------------
    1.1 | -0.5048461251803724
    2.2 | -0.9982947730112559
    3.3 |  -0.400799215766171
(3 rows)

-- select cos and as
--Testcase 549:
SELECT cos(value3) as cos1 FROM s3 ORDER BY 1 DESC;
        cos1         
---------------------
  0.9950041651292624
  0.9800665772491609
  0.9553364856027305
   0.453596100177538
 -0.5885011558074578
 -0.9874797774307646
(6 rows)

-- select cot (builtin function, explain)
--Testcase 550:
EXPLAIN VERBOSE
SELECT value1, cot(value2), cot(value3), cot(value4), cot(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=944.81..961.88 rows=6826 width=40)
   Output: value1, (cot((value2)::double precision)), (cot(value3)), (cot((value4)::double precision)), '1.830487721712452'::double precision
   Sort Key: s3.value1, (cot((s3.value2)::double precision)), (cot(s3.value3)), (cot((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..510.10 rows=6826 width=40)
         Output: value1, (cot((value2)::double precision)), (cot(value3)), (cot((value4)::double precision)), '1.830487721712452'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, cot(`value2`), cot(`value3`), cot(`value4`), 1.830487721712452 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, cot(value2), cot(value3), cot(value4), 1.830487721712452::double precision FROM public.s31mysql
(12 rows)

-- select cot (builtin function, result)
--Testcase 551:
SELECT value1, cot(value2), cot(value3), cot(value4), cot(0.5) FROM s3 ORDER BY 1,2,3,4,5;
 value1 |         cot         |         cot         |        cot         |        cot        
--------+---------------------+---------------------+--------------------+-------------------
    0.1 |  -1.702956919426469 |  -9.966644273749928 |  1.702956919426469 | 1.830487721712452
    0.2 |  -1.702956919426469 |   -4.93315480007968 |  1.702956919426469 | 1.830487721712452
    0.3 |  -1.702956919426469 | -3.2327280072648636 |  1.702956919426469 | 1.830487721712452
    1.1 | -0.5578715021347701 | -0.5089680752210085 | 0.5578715021347701 | 1.830487721712452
    2.2 | -0.5578715021347701 |  0.7278958489528831 | 0.5578715021347701 | 1.830487721712452
    3.3 | -0.5578715021347701 |  -6.259949455700704 | 0.5578715021347701 | 1.830487721712452
(6 rows)

-- select cot (builtin function, not pushdown constraints, explain)
--Testcase 552:
EXPLAIN VERBOSE
SELECT cot(value1), cot(value2), cot(value3), cot(value4), cot(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=40)
   Output: (cot(value1)), (cot((value2)::double precision)), (cot(value3)), (cot((value4)::double precision)), '1.830487721712452'::double precision
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT cot(`value1`), cot(`value2`), cot(`value3`), cot(`value4`), 1.830487721712452, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT cot(value1), cot(value2), cot(value3), cot(value4), 1.830487721712452::double precision, value2 FROM public.s31mysql
(8 rows)

-- select cot (builtin function, not pushdown constraints, result)
--Testcase 553:
SELECT cot(value1), cot(value2), cot(value3), cot(value4), cot(0.5) FROM s3 WHERE to_hex(value2) = '64';
        cot         |        cot         |         cot         |        cot        |        cot        
--------------------+--------------------+---------------------+-------------------+-------------------
  9.966644273749928 | -1.702956919426469 |  -9.966644273749928 | 1.702956919426469 | 1.830487721712452
   4.93315480007968 | -1.702956919426469 |   -4.93315480007968 | 1.702956919426469 | 1.830487721712452
 3.2327280072648636 | -1.702956919426469 | -3.2327280072648636 | 1.702956919426469 | 1.830487721712452
(3 rows)

-- select cot (builtin function, pushdown constraints, explain)
--Testcase 554:
EXPLAIN VERBOSE
SELECT cot(value1), cot(value2), cot(value3), cot(value4), cot(0.5) FROM s3 WHERE value2 != 200;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=40)
   Output: (cot(value1)), (cot((value2)::double precision)), (cot(value3)), (cot((value4)::double precision)), '1.830487721712452'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT cot(`value1`), cot(`value2`), cot(`value3`), cot(`value4`), 1.830487721712452 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT cot(value1), cot(value2), cot(value3), cot(value4), 1.830487721712452::double precision FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select cot (builtin function, pushdown constraints, result)
--Testcase 555:
SELECT cot(value1), cot(value2), cot(value3), cot(value4), cot(0.5) FROM s3 WHERE value2 != 200;
        cot         |        cot         |         cot         |        cot        |        cot        
--------------------+--------------------+---------------------+-------------------+-------------------
  9.966644273749928 | -1.702956919426469 |  -9.966644273749928 | 1.702956919426469 | 1.830487721712452
   4.93315480007968 | -1.702956919426469 |   -4.93315480007968 | 1.702956919426469 | 1.830487721712452
 3.2327280072648636 | -1.702956919426469 | -3.2327280072648636 | 1.702956919426469 | 1.830487721712452
(3 rows)

-- select cot (builtin function, cot in constraints, explain)
--Testcase 556:
EXPLAIN VERBOSE
SELECT value1, cot(value2), cot(value3), cot(value4), cot(0.5) FROM s3 WHERE cot(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=975.43..992.41 rows=6792 width=40)
   Output: value1, (cot((value2)::double precision)), (cot(value3)), (cot((value4)::double precision)), '1.830487721712452'::double precision
   Sort Key: s3.value1, (cot((s3.value2)::double precision)), (cot(s3.value3)), (cot((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..543.13 rows=6792 width=40)
         Output: value1, (cot((value2)::double precision)), (cot(value3)), (cot((value4)::double precision)), '1.830487721712452'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, cot(`value2`), cot(`value3`), cot(`value4`), 1.830487721712452 FROM `test`.`s32` WHERE ((cot(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, cot(value2), cot(value3), cot(value4), 1.830487721712452::double precision FROM public.s31mysql WHERE ((cot(value1) <> 1::double precision))
(12 rows)

-- select cot (builtin function, cot in constraints, result)
--Testcase 557:
SELECT value1, cot(value2), cot(value3), cot(value4), cot(0.5) FROM s3 WHERE cot(value1) != 1 ORDER BY 1,2,3,4,5;
 value1 |         cot         |         cot         |        cot         |        cot        
--------+---------------------+---------------------+--------------------+-------------------
    0.1 |  -1.702956919426469 |  -9.966644273749928 |  1.702956919426469 | 1.830487721712452
    0.2 |  -1.702956919426469 |   -4.93315480007968 |  1.702956919426469 | 1.830487721712452
    0.3 |  -1.702956919426469 | -3.2327280072648636 |  1.702956919426469 | 1.830487721712452
    1.1 | -0.5578715021347701 | -0.5089680752210085 | 0.5578715021347701 | 1.830487721712452
    2.2 | -0.5578715021347701 |  0.7278958489528831 | 0.5578715021347701 | 1.830487721712452
    3.3 | -0.5578715021347701 |  -6.259949455700704 | 0.5578715021347701 | 1.830487721712452
(6 rows)

-- select cot (builtin function, cot in constraints, explain)
--Testcase 558:
EXPLAIN VERBOSE
SELECT value1, cot(value2), cot(value3), cot(value4), cot(0.5) FROM s3 WHERE cot(0.5) > value1 ORDER BY 1,2,3,4,5;
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=506.21..511.90 rows=2276 width=40)
   Output: value1, (cot((value2)::double precision)), (cot(value3)), (cot((value4)::double precision)), '1.830487721712452'::double precision
   Sort Key: s3.value1, (cot((s3.value2)::double precision)), (cot(s3.value3)), (cot((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..379.29 rows=2276 width=40)
         Output: value1, (cot((value2)::double precision)), (cot(value3)), (cot((value4)::double precision)), '1.830487721712452'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, cot(`value2`), cot(`value3`), cot(`value4`), 1.830487721712452 FROM `test`.`s32` WHERE ((1.830487721712452 > `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, cot(value2), cot(value3), cot(value4), 1.830487721712452::double precision FROM public.s31mysql WHERE ((1.830487721712452::double precision > value1))
(12 rows)

-- select cot (builtin function, cot in constraints, result)
--Testcase 559:
SELECT value1, cot(value2), cot(value3), cot(value4), cot(0.5) FROM s3 WHERE cot(0.5) > value1 ORDER BY 1,2,3,4,5;
 value1 |         cot         |         cot         |        cot         |        cot        
--------+---------------------+---------------------+--------------------+-------------------
    0.1 |  -1.702956919426469 |  -9.966644273749928 |  1.702956919426469 | 1.830487721712452
    0.2 |  -1.702956919426469 |   -4.93315480007968 |  1.702956919426469 | 1.830487721712452
    0.3 |  -1.702956919426469 | -3.2327280072648636 |  1.702956919426469 | 1.830487721712452
    1.1 | -0.5578715021347701 | -0.5089680752210085 | 0.5578715021347701 | 1.830487721712452
(4 rows)

-- select cot as nest function with agg (pushdown, explain)
--Testcase 560:
EXPLAIN VERBOSE
SELECT sum(value3),cot(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), cot((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select cot as nest function with agg (pushdown, result)
--Testcase 561:
SELECT sum(value3),cot(sum(value3)) FROM s3;
        sum         |         cot         
--------------------+---------------------
 -7.200000040233135 | -0.7665061060796853
(1 row)

-- select cot as nest with log2 (pushdown, explain)
--Testcase 562:
EXPLAIN VERBOSE
SELECT value1, cot(log2(value1)),cot(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (cot(log2(value1))), (cot(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (cot(log2(s3.value1))), (cot(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (cot(log2(value1))), (cot(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, cot(log2(`value1`)), cot(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, cot(public.log2(value1)), cot(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select cot as nest with log2 (pushdown, result)
--Testcase 563:
SELECT value1, cot(log2(value1)),cot(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |         cot         |         cot          
--------+---------------------+----------------------
    0.1 |  -5.484979810524356 |    5.484979810524356
    0.2 |  0.9337126497470218 |  -0.9337126497470218
    0.3 | 0.16771572622183212 | -0.16771572622183237
    1.1 |   7.226646847351797 |   -7.226646847351802
    2.2 |  0.4626124165927711 |  -0.4626124165927711
    3.3 | -0.1528434660613515 |  0.15284346606135124
(6 rows)

-- select cot with non pushdown func and explicit constant (explain)
--Testcase 564:
EXPLAIN VERBOSE
SELECT value1, cot(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=56)
   Output: value1, (cot(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: s3.value1, (cot(s3.value3))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=56)
         Output: value1, (cot(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, cot(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, cot(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select cot with non pushdown func and explicit constant (result)
--Testcase 565:
SELECT value1, cot(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
 value1 |         cot         |        pi         | ?column? 
--------+---------------------+-------------------+----------
    0.1 |  -9.966644273749928 | 3.141592653589793 |      4.1
    0.2 |   -4.93315480007968 | 3.141592653589793 |      4.1
    0.3 | -3.2327280072648636 | 3.141592653589793 |      4.1
    1.1 | -0.5089680752210085 | 3.141592653589793 |      4.1
    2.2 |  0.7278958489528831 | 3.141592653589793 |      4.1
    3.3 |  -6.259949455700704 | 3.141592653589793 |      4.1
(6 rows)

-- select cot with order by (explain)
--Testcase 566:
EXPLAIN VERBOSE
SELECT value1, cot(1-value3) FROM s3 ORDER BY cot(1-value3);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (cot(('1'::double precision - value3)))
   Sort Key: (cot(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (cot(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, cot((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, cot((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select cot with order by (result)
--Testcase 567:
SELECT value1, cot(1-value3) FROM s3 ORDER BY cot(1-value3);
 value1 |         cot         
--------+---------------------
    1.1 | -0.5848478384563578
    0.3 | 0.27761563370144493
    0.2 |  0.3887795659375119
    3.3 |  0.4374744880267397
    0.1 |  0.5089681033629359
    2.2 |   17.10164638510324
(6 rows)

-- select cot with order by index (result)
--Testcase 568:
SELECT value1, cot(1-value3) FROM s3 ORDER BY 2,1;
 value1 |         cot         
--------+---------------------
    1.1 | -0.5848478384563578
    0.3 | 0.27761563370144493
    0.2 |  0.3887795659375119
    3.3 |  0.4374744880267397
    0.1 |  0.5089681033629359
    2.2 |   17.10164638510324
(6 rows)

-- select cot with order by index (result)
--Testcase 569:
SELECT value1, cot(1-value3) FROM s3 ORDER BY 1,2;
 value1 |         cot         
--------+---------------------
    0.1 |  0.5089681033629359
    0.2 |  0.3887795659375119
    0.3 | 0.27761563370144493
    1.1 | -0.5848478384563578
    2.2 |   17.10164638510324
    3.3 |  0.4374744880267397
(6 rows)

-- select cot with group by (explain)
--Testcase 570:
EXPLAIN VERBOSE
SELECT value1, cot(1-value3) FROM s3 GROUP BY value1, cot(1-value3) ORDER BY 1,2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: value1, (cot(('1'::double precision - value3)))
   Sort Key: s3.value1, (cot(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: value1, (cot(('1'::double precision - value3)))
         Group Key: s3.value1, (cot(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (cot(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, cot((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, cot((1::double precision - value3)) FROM public.s31mysql
(15 rows)

-- select cot with group by (result)
--Testcase 571:
SELECT value1, cot(1-value3) FROM s3 GROUP BY value1, cot(1-value3) ORDER BY 1,2;
 value1 |         cot         
--------+---------------------
    0.1 |  0.5089681033629359
    0.2 |  0.3887795659375119
    0.3 | 0.27761563370144493
    1.1 | -0.5848478384563578
    2.2 |   17.10164638510324
    3.3 |  0.4374744880267397
(6 rows)

-- select cot with group by index (result)
--Testcase 572:
SELECT value1, cot(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |         cot         
--------+---------------------
    0.1 |  0.5089681033629359
    0.2 |  0.3887795659375119
    0.3 | 0.27761563370144493
    1.1 | -0.5848478384563578
    2.2 |   17.10164638510324
    3.3 |  0.4374744880267397
(6 rows)

-- select cot with group by index (result)
--Testcase 573:
SELECT value1, cot(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |         cot         
--------+---------------------
    0.1 |  0.5089681033629359
    0.2 |  0.3887795659375119
    0.3 | 0.27761563370144493
    1.1 | -0.5848478384563578
    2.2 |   17.10164638510324
    3.3 |  0.4374744880267397
(6 rows)

-- select cot with group by having (explain)
--Testcase 574:
EXPLAIN VERBOSE
SELECT value1, cot(1-value3) FROM s3 GROUP BY value1, cot(1-value3) HAVING cot(avg(value1)) > 0 ORDER BY 1,2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: value1, (cot(('1'::double precision - value3)))
   Sort Key: s3.value1, (cot(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: value1, (cot(('1'::double precision - value3)))
         Group Key: s3.value1, (cot(('1'::double precision - s3.value3)))
         Filter: (cot(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (cot(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, cot((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, cot((1::double precision - value3)) FROM public.s31mysql
(16 rows)

-- select cot with group by having (result)
--Testcase 575:
SELECT value1, cot(1-value3) FROM s3 GROUP BY value1, cot(1-value3) HAVING cot(avg(value1)) > 0 ORDER BY 1,2;
 value1 |         cot         
--------+---------------------
    0.1 |  0.5089681033629359
    0.2 |  0.3887795659375119
    0.3 | 0.27761563370144493
    1.1 | -0.5848478384563578
    3.3 |  0.4374744880267397
(5 rows)

-- select cot with group by index having (result)
--Testcase 576:
SELECT value1, cot(1-value3) FROM s3 GROUP BY 2,1 HAVING cot(1-value3) > 0 ORDER BY 1,2;
 value1 |         cot         
--------+---------------------
    0.1 |  0.5089681033629359
    0.2 |  0.3887795659375119
    0.3 | 0.27761563370144493
    2.2 |   17.10164638510324
    3.3 |  0.4374744880267397
(5 rows)

-- select cot with group by index having (result)
--Testcase 577:
SELECT value1, cot(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |         cot         
--------+---------------------
    1.1 | -0.5848478384563578
    2.2 |   17.10164638510324
    3.3 |  0.4374744880267397
(3 rows)

-- select cot and as
--Testcase 578:
SELECT value1, cot(value3) as cot1 FROM s3 ORDER BY 1,2;
 value1 |        cot1         
--------+---------------------
    0.1 |  -9.966644273749928
    0.2 |   -4.93315480007968
    0.3 | -3.2327280072648636
    1.1 | -0.5089680752210085
    2.2 |  0.7278958489528831
    3.3 |  -6.259949455700704
(6 rows)

-- select degrees (builtin function, explain)
--Testcase 579:
EXPLAIN VERBOSE
SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), degrees(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=961.88..978.94 rows=6826 width=40)
   Output: (degrees(value1)), (degrees((value2)::double precision)), (degrees(value3)), (degrees((value4)::double precision)), '28.64788975654116'::double precision
   Sort Key: (degrees(s3.value1)), (degrees((s3.value2)::double precision)), (degrees(s3.value3)), (degrees((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=40)
         Output: (degrees(value1)), (degrees((value2)::double precision)), (degrees(value3)), (degrees((value4)::double precision)), '28.64788975654116'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT degrees(`value1`), degrees(`value2`), degrees(`value3`), degrees(`value4`), 28.64788975654116 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), 28.64788975654116::double precision FROM public.s31mysql
(12 rows)

-- select degrees (builtin function, result)
--Testcase 580:
SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), degrees(0.5) FROM s3 ORDER BY 1,2,3,4,5;
      degrees       |      degrees       |       degrees       |       degrees       |      degrees      
--------------------+--------------------+---------------------+---------------------+-------------------
  5.729578036685597 | 5729.5779513082325 |  -5.729578036685597 | -5729.5779513082325 | 28.64788975654116
 11.459156073371194 | 5729.5779513082325 | -11.459156073371194 | -5729.5779513082325 | 28.64788975654116
 17.188734536943613 | 5729.5779513082325 | -17.188734536943613 | -5729.5779513082325 | 28.64788975654116
  63.02535883042839 | 11459.155902616465 |  -63.02535883042839 | -11459.155902616465 | 28.64788975654116
 126.05071766085678 | 11459.155902616465 | -126.05071766085678 | -11459.155902616465 | 28.64788975654116
   189.076069661096 | 11459.155902616465 |   -189.076069661096 | -11459.155902616465 | 28.64788975654116
(6 rows)

-- select degrees (builtin function, not pushdown constraints, explain)
--Testcase 581:
EXPLAIN VERBOSE
SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), degrees(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=40)
   Output: (degrees(value1)), (degrees((value2)::double precision)), (degrees(value3)), (degrees((value4)::double precision)), '28.64788975654116'::double precision
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT degrees(`value1`), degrees(`value2`), degrees(`value3`), degrees(`value4`), 28.64788975654116, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), 28.64788975654116::double precision, value2 FROM public.s31mysql
(8 rows)

-- select degrees (builtin function, not pushdown constraints, result)
--Testcase 582:
SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), degrees(0.5) FROM s3 WHERE to_hex(value2) = '64';
      degrees       |      degrees       |       degrees       |       degrees       |      degrees      
--------------------+--------------------+---------------------+---------------------+-------------------
  5.729578036685597 | 5729.5779513082325 |  -5.729578036685597 | -5729.5779513082325 | 28.64788975654116
 11.459156073371194 | 5729.5779513082325 | -11.459156073371194 | -5729.5779513082325 | 28.64788975654116
 17.188734536943613 | 5729.5779513082325 | -17.188734536943613 | -5729.5779513082325 | 28.64788975654116
(3 rows)

-- select degrees (builtin function, pushdown constraints, explain)
--Testcase 583:
EXPLAIN VERBOSE
SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), degrees(0.5) FROM s3 WHERE value2 != 200;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=40)
   Output: (degrees(value1)), (degrees((value2)::double precision)), (degrees(value3)), (degrees((value4)::double precision)), '28.64788975654116'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT degrees(`value1`), degrees(`value2`), degrees(`value3`), degrees(`value4`), 28.64788975654116 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), 28.64788975654116::double precision FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select degrees (builtin function, pushdown constraints, result)
--Testcase 584:
SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), degrees(0.5) FROM s3 WHERE value2 != 200;
      degrees       |      degrees       |       degrees       |       degrees       |      degrees      
--------------------+--------------------+---------------------+---------------------+-------------------
  5.729578036685597 | 5729.5779513082325 |  -5.729578036685597 | -5729.5779513082325 | 28.64788975654116
 11.459156073371194 | 5729.5779513082325 | -11.459156073371194 | -5729.5779513082325 | 28.64788975654116
 17.188734536943613 | 5729.5779513082325 | -17.188734536943613 | -5729.5779513082325 | 28.64788975654116
(3 rows)

-- select degrees (builtin function, degrees in constraints, explain)
--Testcase 585:
EXPLAIN VERBOSE
SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), degrees(0.5) FROM s3 WHERE degrees(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                                                 QUERY PLAN                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=992.41..1009.39 rows=6792 width=40)
   Output: (degrees(value1)), (degrees((value2)::double precision)), (degrees(value3)), (degrees((value4)::double precision)), '28.64788975654116'::double precision
   Sort Key: (degrees(s3.value1)), (degrees((s3.value2)::double precision)), (degrees(s3.value3)), (degrees((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..560.11 rows=6792 width=40)
         Output: (degrees(value1)), (degrees((value2)::double precision)), (degrees(value3)), (degrees((value4)::double precision)), '28.64788975654116'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT degrees(`value1`), degrees(`value2`), degrees(`value3`), degrees(`value4`), 28.64788975654116 FROM `test`.`s32` WHERE ((degrees(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), 28.64788975654116::double precision FROM public.s31mysql WHERE ((degrees(value1) <> 1::double precision))
(12 rows)

-- select degrees (builtin function, degrees in constraints, result)
--Testcase 586:
SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), degrees(0.5) FROM s3 WHERE degrees(value1) != 1 ORDER BY 1,2,3,4,5;
      degrees       |      degrees       |       degrees       |       degrees       |      degrees      
--------------------+--------------------+---------------------+---------------------+-------------------
  5.729578036685597 | 5729.5779513082325 |  -5.729578036685597 | -5729.5779513082325 | 28.64788975654116
 11.459156073371194 | 5729.5779513082325 | -11.459156073371194 | -5729.5779513082325 | 28.64788975654116
 17.188734536943613 | 5729.5779513082325 | -17.188734536943613 | -5729.5779513082325 | 28.64788975654116
  63.02535883042839 | 11459.155902616465 |  -63.02535883042839 | -11459.155902616465 | 28.64788975654116
 126.05071766085678 | 11459.155902616465 | -126.05071766085678 | -11459.155902616465 | 28.64788975654116
   189.076069661096 | 11459.155902616465 |   -189.076069661096 | -11459.155902616465 | 28.64788975654116
(6 rows)

-- select degrees (builtin function, degrees in constraints, explain)
--Testcase 587:
EXPLAIN VERBOSE
SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), degrees(0.5) FROM s3 WHERE degrees(0.5) > value1 ORDER BY 1,2,3,4,5;
                                                                                                    QUERY PLAN                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=511.90..517.59 rows=2276 width=40)
   Output: (degrees(value1)), (degrees((value2)::double precision)), (degrees(value3)), (degrees((value4)::double precision)), '28.64788975654116'::double precision
   Sort Key: (degrees(s3.value1)), (degrees((s3.value2)::double precision)), (degrees(s3.value3)), (degrees((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=40)
         Output: (degrees(value1)), (degrees((value2)::double precision)), (degrees(value3)), (degrees((value4)::double precision)), '28.64788975654116'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT degrees(`value1`), degrees(`value2`), degrees(`value3`), degrees(`value4`), 28.64788975654116 FROM `test`.`s32` WHERE ((28.64788975654116 > `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), 28.64788975654116::double precision FROM public.s31mysql WHERE ((28.64788975654116::double precision > value1))
(12 rows)

-- select degrees (builtin function, degrees in constraints, result)
--Testcase 588:
SELECT degrees(value1), degrees(value2), degrees(value3), degrees(value4), degrees(0.5) FROM s3 WHERE degrees(0.5) > value1 ORDER BY 1,2,3,4,5;
      degrees       |      degrees       |       degrees       |       degrees       |      degrees      
--------------------+--------------------+---------------------+---------------------+-------------------
  5.729578036685597 | 5729.5779513082325 |  -5.729578036685597 | -5729.5779513082325 | 28.64788975654116
 11.459156073371194 | 5729.5779513082325 | -11.459156073371194 | -5729.5779513082325 | 28.64788975654116
 17.188734536943613 | 5729.5779513082325 | -17.188734536943613 | -5729.5779513082325 | 28.64788975654116
  63.02535883042839 | 11459.155902616465 |  -63.02535883042839 | -11459.155902616465 | 28.64788975654116
 126.05071766085678 | 11459.155902616465 | -126.05071766085678 | -11459.155902616465 | 28.64788975654116
   189.076069661096 | 11459.155902616465 |   -189.076069661096 | -11459.155902616465 | 28.64788975654116
(6 rows)

-- select degrees as nest function with agg (pushdown, explain)
--Testcase 589:
EXPLAIN VERBOSE
SELECT sum(value3),degrees(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), degrees((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select degrees as nest function with agg (pushdown, result)
--Testcase 590:
SELECT sum(value3),degrees(sum(value3)) FROM s3;
        sum         |       degrees       
--------------------+---------------------
 -7.200000040233135 | -412.52961479938153
(1 row)

-- select degrees as nest with log2 (pushdown, explain)
--Testcase 591:
EXPLAIN VERBOSE
SELECT value1, degrees(log2(value1)),degrees(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (degrees(log2(value1))), (degrees(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (degrees(log2(s3.value1))), (degrees(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (degrees(log2(value1))), (degrees(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, degrees(log2(`value1`)), degrees(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, degrees(public.log2(value1)), degrees(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select degrees as nest with log2 (pushdown, result)
--Testcase 592:
SELECT value1, degrees(log2(value1)),degrees(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |       degrees       |      degrees       
--------+---------------------+--------------------
    0.1 | -190.33245845124492 | 190.33245845124492
    0.2 |  -133.0366789381626 |  133.0366789381626
    0.3 |  -99.52079442053036 |  99.52079442053038
    1.1 |   7.878373370662683 |  -7.87837337066268
    2.2 |   65.17415288374501 | -65.17415288374501
    3.3 |   98.69003236246138 | -98.69003236246137
(6 rows)

-- select degrees with non pushdown func and explicit constant (explain)
--Testcase 593:
EXPLAIN VERBOSE
SELECT degrees(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (degrees(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (degrees(s3.value3)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (degrees(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT degrees(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT degrees(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select degrees with non pushdown func and explicit constant (result)
--Testcase 594:
SELECT degrees(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
       degrees       |        pi         | ?column? 
---------------------+-------------------+----------
  -5.729578036685597 | 3.141592653589793 |      4.1
 -11.459156073371194 | 3.141592653589793 |      4.1
 -17.188734536943613 | 3.141592653589793 |      4.1
  -63.02535883042839 | 3.141592653589793 |      4.1
 -126.05071766085678 | 3.141592653589793 |      4.1
   -189.076069661096 | 3.141592653589793 |      4.1
(6 rows)

-- select degrees with order by (explain)
--Testcase 595:
EXPLAIN VERBOSE
SELECT value1, degrees(1-value3) FROM s3 ORDER BY degrees(1-value3);
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (degrees(('1'::double precision - value3)))
   Sort Key: (degrees(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (degrees(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, degrees((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, degrees((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select degrees with order by (result)
--Testcase 596:
SELECT value1, degrees(1-value3) FROM s3 ORDER BY degrees(1-value3);
 value1 |      degrees       
--------+--------------------
    0.1 |  63.02535754976792
    0.2 |  68.75493558645351
    0.3 |  74.48451405002594
    1.1 | 120.32113834351071
    2.2 |  183.3464971739391
    3.3 | 246.37184917417832
(6 rows)

-- select degrees with order by index (result)
--Testcase 597:
SELECT value1, degrees(1-value3) FROM s3 ORDER BY 2,1;
 value1 |      degrees       
--------+--------------------
    0.1 |  63.02535754976792
    0.2 |  68.75493558645351
    0.3 |  74.48451405002594
    1.1 | 120.32113834351071
    2.2 |  183.3464971739391
    3.3 | 246.37184917417832
(6 rows)

-- select degrees with order by index (result)
--Testcase 598:
SELECT value1, degrees(1-value3) FROM s3 ORDER BY 1,2;
 value1 |      degrees       
--------+--------------------
    0.1 |  63.02535754976792
    0.2 |  68.75493558645351
    0.3 |  74.48451405002594
    1.1 | 120.32113834351071
    2.2 |  183.3464971739391
    3.3 | 246.37184917417832
(6 rows)

-- select degrees with group by (explain)
--Testcase 599:
EXPLAIN VERBOSE
SELECT count(value1), degrees(1-value3) FROM s3 GROUP BY degrees(1-value3) ORDER BY 1,2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (degrees(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (degrees(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (degrees(('1'::double precision - value3)))
         Group Key: (degrees(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (degrees(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT degrees((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT degrees((1::double precision - value3)), value1 FROM public.s31mysql
(15 rows)

-- select degrees with group by (result)
--Testcase 600:
SELECT count(value1), degrees(1-value3) FROM s3 GROUP BY degrees(1-value3) ORDER BY 1,2;
 count |      degrees       
-------+--------------------
     1 |  63.02535754976792
     1 |  68.75493558645351
     1 |  74.48451405002594
     1 | 120.32113834351071
     1 |  183.3464971739391
     1 | 246.37184917417832
(6 rows)

-- select degrees with group by index (result)
--Testcase 601:
SELECT value1, degrees(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |      degrees       
--------+--------------------
    0.1 |  63.02535754976792
    0.2 |  68.75493558645351
    0.3 |  74.48451405002594
    1.1 | 120.32113834351071
    2.2 |  183.3464971739391
    3.3 | 246.37184917417832
(6 rows)

-- select degrees with group by index (result)
--Testcase 602:
SELECT value1, degrees(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |      degrees       
--------+--------------------
    0.1 |  63.02535754976792
    0.2 |  68.75493558645351
    0.3 |  74.48451405002594
    1.1 | 120.32113834351071
    2.2 |  183.3464971739391
    3.3 | 246.37184917417832
(6 rows)

-- select degrees with group by having (explain)
--Testcase 603:
EXPLAIN VERBOSE
SELECT count(value1), degrees(1-value3) FROM s3 GROUP BY degrees(1-value3) HAVING degrees(avg(value1)) > 0 ORDER BY 1,2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: (count(value1)), (degrees(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (degrees(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: count(value1), (degrees(('1'::double precision - value3)))
         Group Key: (degrees(('1'::double precision - s3.value3)))
         Filter: (degrees(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (degrees(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT degrees((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT degrees((1::double precision - value3)), value1 FROM public.s31mysql
(16 rows)

-- select degrees with group by having (result)
--Testcase 604:
SELECT count(value1), degrees(1-value3) FROM s3 GROUP BY degrees(1-value3) HAVING degrees(avg(value1)) > 0 ORDER BY 1,2;
 count |      degrees       
-------+--------------------
     1 |  63.02535754976792
     1 |  68.75493558645351
     1 |  74.48451405002594
     1 | 120.32113834351071
     1 |  183.3464971739391
     1 | 246.37184917417832
(6 rows)

-- select degrees with group by index having (result)
--Testcase 605:
SELECT value1, degrees(1-value3) FROM s3 GROUP BY 2,1 HAVING degrees(1-value3) > 0 ORDER BY 1,2;
 value1 |      degrees       
--------+--------------------
    0.1 |  63.02535754976792
    0.2 |  68.75493558645351
    0.3 |  74.48451405002594
    1.1 | 120.32113834351071
    2.2 |  183.3464971739391
    3.3 | 246.37184917417832
(6 rows)

-- select degrees with group by index having (result)
--Testcase 606:
SELECT value1, degrees(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |      degrees       
--------+--------------------
    1.1 | 120.32113834351071
    2.2 |  183.3464971739391
    3.3 | 246.37184917417832
(3 rows)

-- select degrees and as
--Testcase 607:
SELECT degrees(value3) as degrees1 FROM s3 ORDER BY 1 DESC;
      degrees1       
---------------------
  -5.729578036685597
 -11.459156073371194
 -17.188734536943613
  -63.02535883042839
 -126.05071766085678
   -189.076069661096
(6 rows)

-- select div (builtin function, explain)
--Testcase 608:
EXPLAIN VERBOSE
SELECT div(value1::numeric, 2), div(value2::numeric, 2), div(value3::numeric, 2), div(value4::numeric, 2), div(5, 2) FROM s3 ORDER BY 1,2,3,4,5;
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=996.01..1013.07 rows=6826 width=160)
   Output: (div((value1)::numeric, '2'::numeric)), (div((value2)::numeric, '2'::numeric)), (div((value3)::numeric, '2'::numeric)), (div((value4)::numeric, '2'::numeric)), '2'::numeric
   Sort Key: (div((s3.value1)::numeric, '2'::numeric)), (div((s3.value2)::numeric, '2'::numeric)), (div((s3.value3)::numeric, '2'::numeric)), (div((s3.value4)::numeric, '2'::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..561.30 rows=6826 width=160)
         Output: (div((value1)::numeric, '2'::numeric)), (div((value2)::numeric, '2'::numeric)), (div((value3)::numeric, '2'::numeric)), (div((value4)::numeric, '2'::numeric)), '2'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT (`value1` div 2), (`value2` div 2), (`value3` div 2), (`value4` div 2), 2 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT div(value1::numeric, 2::numeric), div(value2::numeric, 2::numeric), div(value3::numeric, 2::numeric), div(value4::numeric, 2::numeric), 2::numeric FROM public.s31mysql
(12 rows)

-- select div (builtin function, result)
--Testcase 609:
SELECT div(value1::numeric, 2), div(value2::numeric, 2), div(value3::numeric, 2), div(value4::numeric, 2), div(5, 2) FROM s3 ORDER BY 1,2,3,4,5;
 div | div | div | div  | div 
-----+-----+-----+------+-----
   0 |  50 |   0 |  -50 |   2
   0 |  50 |   0 |  -50 |   2
   0 |  50 |   0 |  -50 |   2
   0 | 100 |   0 | -100 |   2
   1 | 100 |  -1 | -100 |   2
   1 | 100 |  -1 | -100 |   2
(6 rows)

-- select div (builtin function, not pushdown constraints, explain)
--Testcase 610:
EXPLAIN VERBOSE
SELECT div(value1::numeric, 2), div(value2::numeric, 2), div(value3::numeric, 2), div(value4::numeric, 2), div(5, 2) FROM s3 WHERE to_hex(value2) = '64';
                                                                                               QUERY PLAN                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.41 rows=34 width=160)
   Output: (div((value1)::numeric, '2'::numeric)), (div((value2)::numeric, '2'::numeric)), (div((value3)::numeric, '2'::numeric)), (div((value4)::numeric, '2'::numeric)), '2'::numeric
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT (`value1` div 2), (`value2` div 2), (`value3` div 2), (`value4` div 2), 2, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT div(value1::numeric, 2::numeric), div(value2::numeric, 2::numeric), div(value3::numeric, 2::numeric), div(value4::numeric, 2::numeric), 2::numeric, value2 FROM public.s31mysql
(8 rows)

-- select div (builtin function, not pushdown constraints, result)
--Testcase 611:
SELECT div(value1::numeric, 2), div(value2::numeric, 2), div(value3::numeric, 2), div(value4::numeric, 2), div(5, 2) FROM s3 WHERE to_hex(value2) = '64';
 div | div | div | div | div 
-----+-----+-----+-----+-----
   0 |  50 |   0 | -50 |   2
   0 |  50 |   0 | -50 |   2
   0 |  50 |   0 | -50 |   2
(3 rows)

-- select div (builtin function, pushdown constraints, explain)
--Testcase 612:
EXPLAIN VERBOSE
SELECT div(value1::numeric, 2), div(value2::numeric, 2), div(value3::numeric, 2), div(value4::numeric, 2), div(5, 2) FROM s3 WHERE value2 != 200;
                                                                                                       QUERY PLAN                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..577.00 rows=6792 width=160)
   Output: (div((value1)::numeric, '2'::numeric)), (div((value2)::numeric, '2'::numeric)), (div((value3)::numeric, '2'::numeric)), (div((value4)::numeric, '2'::numeric)), '2'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT (`value1` div 2), (`value2` div 2), (`value3` div 2), (`value4` div 2), 2 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT div(value1::numeric, 2::numeric), div(value2::numeric, 2::numeric), div(value3::numeric, 2::numeric), div(value4::numeric, 2::numeric), 2::numeric FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select div (builtin function, pushdown constraints, result)
--Testcase 613:
SELECT div(value1::numeric, 2), div(value2::numeric, 2), div(value3::numeric, 2), div(value4::numeric, 2), div(5, 2) FROM s3 WHERE value2 != 200;
 div | div | div | div | div 
-----+-----+-----+-----+-----
   0 |  50 |   0 | -50 |   2
   0 |  50 |   0 | -50 |   2
   0 |  50 |   0 | -50 |   2
(3 rows)

-- select div (builtin function, div in constraints, explain)
--Testcase 614:
EXPLAIN VERBOSE
SELECT div(value1::numeric, 2), div(value2::numeric, 2), div(value3::numeric, 2), div(value4::numeric, 2), div(5, 2) FROM s3 WHERE div(value1::numeric, 2) != 1 ORDER BY 1,2,3,4,5;
                                                                                                                          QUERY PLAN                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1043.43..1060.41 rows=6792 width=160)
   Output: (div((value1)::numeric, '2'::numeric)), (div((value2)::numeric, '2'::numeric)), (div((value3)::numeric, '2'::numeric)), (div((value4)::numeric, '2'::numeric)), '2'::numeric
   Sort Key: (div((s3.value1)::numeric, '2'::numeric)), (div((s3.value2)::numeric, '2'::numeric)), (div((s3.value3)::numeric, '2'::numeric)), (div((s3.value4)::numeric, '2'::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..611.14 rows=6792 width=160)
         Output: (div((value1)::numeric, '2'::numeric)), (div((value2)::numeric, '2'::numeric)), (div((value3)::numeric, '2'::numeric)), (div((value4)::numeric, '2'::numeric)), '2'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT (`value1` div 2), (`value2` div 2), (`value3` div 2), (`value4` div 2), 2 FROM `test`.`s32` WHERE (((`value1` div 2) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT div(value1::numeric, 2::numeric), div(value2::numeric, 2::numeric), div(value3::numeric, 2::numeric), div(value4::numeric, 2::numeric), 2::numeric FROM public.s31mysql WHERE ((div(value1::numeric, 2::numeric) <> 1::numeric))
(12 rows)

-- select div (builtin function, div in constraints, result)
--Testcase 615:
SELECT div(value1::numeric, 2), div(value2::numeric, 2), div(value3::numeric, 2), div(value4::numeric, 2), div(5, 2) FROM s3 WHERE div(value1::numeric, 2) != 1 ORDER BY 1,2,3,4,5;
 div | div | div | div  | div 
-----+-----+-----+------+-----
   0 |  50 |   0 |  -50 |   2
   0 |  50 |   0 |  -50 |   2
   0 |  50 |   0 |  -50 |   2
   0 | 100 |   0 | -100 |   2
(4 rows)

-- select div (builtin function, div in constraints, explain)
--Testcase 616:
EXPLAIN VERBOSE
SELECT div(value1::numeric, 2), div(value2::numeric, 2), div(value3::numeric, 2), div(value4::numeric, 2), div(5, 2) FROM s3 WHERE div(5, 2) > value1 ORDER BY 1,2,3,4,5;
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=523.28..528.97 rows=2276 width=160)
   Output: (div((value1)::numeric, '2'::numeric)), (div((value2)::numeric, '2'::numeric)), (div((value3)::numeric, '2'::numeric)), (div((value4)::numeric, '2'::numeric)), '2'::numeric
   Sort Key: (div((s3.value1)::numeric, '2'::numeric)), (div((s3.value2)::numeric, '2'::numeric)), (div((s3.value3)::numeric, '2'::numeric)), (div((s3.value4)::numeric, '2'::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..396.36 rows=2276 width=160)
         Output: (div((value1)::numeric, '2'::numeric)), (div((value2)::numeric, '2'::numeric)), (div((value3)::numeric, '2'::numeric)), (div((value4)::numeric, '2'::numeric)), '2'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT (`value1` div 2), (`value2` div 2), (`value3` div 2), (`value4` div 2), 2 FROM `test`.`s32` WHERE ((2 > `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT div(value1::numeric, 2::numeric), div(value2::numeric, 2::numeric), div(value3::numeric, 2::numeric), div(value4::numeric, 2::numeric), 2::numeric FROM public.s31mysql WHERE ((2::double precision > value1))
(12 rows)

-- select div (builtin function, div in constraints, result)
--Testcase 617:
SELECT div(value1::numeric, 2), div(value2::numeric, 2), div(value3::numeric, 2), div(value4::numeric, 2), div(5, 2) FROM s3 WHERE div(5, 2) > value1 ORDER BY 1,2,3,4,5;
 div | div | div | div  | div 
-----+-----+-----+------+-----
   0 |  50 |   0 |  -50 |   2
   0 |  50 |   0 |  -50 |   2
   0 |  50 |   0 |  -50 |   2
   0 | 100 |   0 | -100 |   2
(4 rows)

-- select div as nest function with agg (pushdown, explain)
--Testcase 618:
EXPLAIN VERBOSE
SELECT sum(value3),div(sum(value3)::numeric, 2) FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=40)
   Output: (sum(value3)), div(((sum(value3)))::numeric, '2'::numeric)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select div as nest function with agg (pushdown, error)
--Testcase 619:
SELECT sum(value3),div(sum(value3)::numeric, 2) FROM s3;
        sum         | div 
--------------------+-----
 -7.200000040233135 |  -3
(1 row)

-- select div as nest with log2 (pushdown, explain)
--Testcase 620:
EXPLAIN VERBOSE
SELECT div(log2(value1)::numeric, 2),div(log2(1/value1)::numeric, 2) FROM s3 ORDER BY 1,2;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4357.81..4374.88 rows=6826 width=64)
   Output: (div((log2(value1))::numeric, '2'::numeric)), (div((log2(('1'::double precision / value1)))::numeric, '2'::numeric))
   Sort Key: (div((log2(s3.value1))::numeric, '2'::numeric)), (div((log2(('1'::double precision / s3.value1)))::numeric, '2'::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..3923.10 rows=6826 width=64)
         Output: (div((log2(value1))::numeric, '2'::numeric)), (div((log2(('1'::double precision / value1)))::numeric, '2'::numeric))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT (log2(`value1`) div 2), (log2((1 / `value1`)) div 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT div(public.log2(value1)::numeric, 2::numeric), div(public.log2((1::double precision / value1))::numeric, 2::numeric) FROM public.s31mysql
(12 rows)

-- select div as nest with log2 (pushdown, result)
--Testcase 621:
SELECT div(log2(value1)::numeric, 2),div(log2(1/value1)::numeric, 2) FROM s3 ORDER BY 1,2;
 div | div 
-----+-----
  -1 |   1
  -1 |   1
   0 |   0
   0 |   0
   0 |   0
   0 |   0
(6 rows)

-- select div with non pushdown func and explicit constant (explain)
--Testcase 622:
EXPLAIN VERBOSE
SELECT div(value3::numeric, 2), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=72)
   Output: (div((value3)::numeric, '2'::numeric)), '3.141592653589793'::double precision, 4.1
   Sort Key: (div((s3.value3)::numeric, '2'::numeric)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=72)
         Output: (div((value3)::numeric, '2'::numeric)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT (`value3` div 2), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT div(value3::numeric, 2::numeric), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select div with non pushdown func and explicit constant (result)
--Testcase 623:
SELECT div(value3::numeric, 2), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
 div |        pi         | ?column? 
-----+-------------------+----------
   0 | 3.141592653589793 |      4.1
   0 | 3.141592653589793 |      4.1
   0 | 3.141592653589793 |      4.1
   0 | 3.141592653589793 |      4.1
  -1 | 3.141592653589793 |      4.1
  -1 | 3.141592653589793 |      4.1
(6 rows)

-- select div with order by (explain)
--Testcase 624:
EXPLAIN VERBOSE
SELECT value1, div((10-value1)::numeric, 2) FROM s3 ORDER BY value1, div((10-value1)::numeric, 2);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort  (cost=910.68..927.75 rows=6826 width=40)
   Output: value1, (div((('10'::double precision - value1))::numeric, '2'::numeric))
   Sort Key: s3.value1, (div((('10'::double precision - s3.value1))::numeric, '2'::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=40)
         Output: value1, (div((('10'::double precision - value1))::numeric, '2'::numeric))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, ((10 - `value1`) div 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, div((10::double precision - value1)::numeric, 2::numeric) FROM public.s31mysql
(12 rows)

-- select div with order by (result)
--Testcase 625:
SELECT value1, div((10-value1)::numeric, 2) FROM s3 ORDER BY value1, div((10-value1)::numeric, 2);
 value1 | div 
--------+-----
    0.1 |   4
    0.2 |   4
    0.3 |   4
    1.1 |   4
    2.2 |   3
    3.3 |   3
(6 rows)

-- select div with order by index (result)
--Testcase 626:
SELECT value1, div((10-value1)::numeric, 2) FROM s3 ORDER BY 2,1;
 value1 | div 
--------+-----
    2.2 |   3
    3.3 |   3
    0.1 |   4
    0.2 |   4
    0.3 |   4
    1.1 |   4
(6 rows)

-- select div with order by index (result)
--Testcase 627:
SELECT value1, div((10-value1)::numeric, 2) FROM s3 ORDER BY 1,2;
 value1 | div 
--------+-----
    0.1 |   4
    0.2 |   4
    0.3 |   4
    1.1 |   4
    2.2 |   3
    3.3 |   3
(6 rows)

-- select div with group by (explain)
--Testcase 628:
EXPLAIN VERBOSE
SELECT value1, div((10-value1)::numeric, 2) FROM s3 GROUP BY value1, div((10-value1)::numeric, 2) ORDER BY 1,2;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=521.25..521.75 rows=200 width=40)
   Output: value1, (div((('10'::double precision - value1))::numeric, '2'::numeric))
   Sort Key: s3.value1, (div((('10'::double precision - s3.value1))::numeric, '2'::numeric))
   ->  HashAggregate  (cost=510.10..513.61 rows=200 width=40)
         Output: value1, (div((('10'::double precision - value1))::numeric, '2'::numeric))
         Group Key: s3.value1, (div((('10'::double precision - s3.value1))::numeric, '2'::numeric))
         ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=40)
               Output: value1, (div((('10'::double precision - value1))::numeric, '2'::numeric))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, ((10 - `value1`) div 2) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, div((10::double precision - value1)::numeric, 2::numeric) FROM public.s31mysql
(15 rows)

-- select div with group by (result)
--Testcase 629:
SELECT value1, div((10-value1)::numeric, 2) FROM s3 GROUP BY value1, div((10-value1)::numeric, 2) ORDER BY 1,2;
 value1 | div 
--------+-----
    0.1 |   4
    0.2 |   4
    0.3 |   4
    1.1 |   4
    2.2 |   3
    3.3 |   3
(6 rows)

-- select div with group by index (result)
--Testcase 630:
SELECT value1, div((10-value1)::numeric, 2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | div 
--------+-----
    0.1 |   4
    0.2 |   4
    0.3 |   4
    1.1 |   4
    2.2 |   3
    3.3 |   3
(6 rows)

-- select div with group by index (result)
--Testcase 631:
SELECT value1, div((10-value1)::numeric, 2) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 | div 
--------+-----
    0.1 |   4
    0.2 |   4
    0.3 |   4
    1.1 |   4
    2.2 |   3
    3.3 |   3
(6 rows)

-- select div with group by having (explain)
--Testcase 632:
EXPLAIN VERBOSE
SELECT value1, div((10-value1)::numeric, 2) FROM s3 GROUP BY value1, div((10-value1)::numeric, 2) HAVING avg(value1) > 0 ORDER BY 1,2;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=532.70..532.87 rows=67 width=40)
   Output: value1, (div((('10'::double precision - value1))::numeric, '2'::numeric))
   Sort Key: s3.value1, (div((('10'::double precision - s3.value1))::numeric, '2'::numeric))
   ->  HashAggregate  (cost=527.17..530.67 rows=67 width=40)
         Output: value1, (div((('10'::double precision - value1))::numeric, '2'::numeric))
         Group Key: s3.value1, (div((('10'::double precision - s3.value1))::numeric, '2'::numeric))
         Filter: (avg(s3.value1) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=40)
               Output: value1, (div((('10'::double precision - value1))::numeric, '2'::numeric))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, ((10 - `value1`) div 2) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, div((10::double precision - value1)::numeric, 2::numeric) FROM public.s31mysql
(16 rows)

-- select div with group by having (result)
--Testcase 633:
SELECT value1, div((10-value1)::numeric, 2) FROM s3 GROUP BY value1, div((10-value1)::numeric, 2) HAVING avg(value1) > 0 ORDER BY 1,2;
 value1 | div 
--------+-----
    0.1 |   4
    0.2 |   4
    0.3 |   4
    1.1 |   4
    2.2 |   3
    3.3 |   3
(6 rows)

-- select div with group by index having (result)
--Testcase 634:
SELECT value1, div((10-value1)::numeric, 2) FROM s3 GROUP BY 2,1 HAVING div((10-value1)::numeric, 2) > 0 ORDER BY 1,2;
 value1 | div 
--------+-----
    0.1 |   4
    0.2 |   4
    0.3 |   4
    1.1 |   4
    2.2 |   3
    3.3 |   3
(6 rows)

-- select div with group by index having (result)
--Testcase 635:
SELECT value1, div((10-value1)::numeric, 2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | div 
--------+-----
    1.1 |   4
    2.2 |   3
    3.3 |   3
(3 rows)

-- select div and as
--Testcase 636:
SELECT div(value3::numeric, 2) as div1 FROM s3 ORDER BY 1 DESC;
 div1 
------
    0
    0
    0
    0
   -1
   -1
(6 rows)

-- select exp (builtin function, explain)
--Testcase 637:
EXPLAIN VERBOSE
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=961.88..978.94 rows=6826 width=64)
   Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision)), 1.6487212707001281
   Sort Key: (exp(s3.value1)), (exp((s3.value2)::double precision)), (exp(s3.value3)), (exp((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=64)
         Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision)), 1.6487212707001281
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT exp(`value1`), exp(`value2`), exp(`value3`), exp(`value4`), 1.6487212707001281 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT exp(value1), exp(value2), exp(value3), exp(value4), 1.6487212707001281 FROM public.s31mysql
(12 rows)

-- select exp (builtin function, result)
--Testcase 638:
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM s3 ORDER BY 1,2,3,4,5;
        exp         |          exp           |         exp         |          exp           |        exp         
--------------------+------------------------+---------------------+------------------------+--------------------
 1.1051709197224806 | 2.6881171418161356e+43 |  0.9048374166876467 |  3.720075976020836e-44 | 1.6487212707001281
 1.2214027618002337 | 2.6881171418161356e+43 |  0.8187307506379741 |  3.720075976020836e-44 | 1.6487212707001281
 1.3498588236675741 | 2.6881171418161356e+43 |  0.7408182118504766 |  3.720075976020836e-44 | 1.6487212707001281
 3.0041660955713336 |  7.225973768125749e+86 | 0.33287107576181457 | 1.3838965267367376e-87 | 1.6487212707001281
  9.025013929780311 |  7.225973768125749e+86 |  0.1108031530788277 | 1.3838965267367376e-87 | 1.6487212707001281
 27.112637627826548 |  7.225973768125749e+86 | 0.03688316915996652 | 1.3838965267367376e-87 | 1.6487212707001281
(6 rows)

-- select exp (builtin function, not pushdown constraints, explain)
--Testcase 639:
EXPLAIN VERBOSE
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=64)
   Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision)), 1.6487212707001281
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT exp(`value1`), exp(`value2`), exp(`value3`), exp(`value4`), 1.6487212707001281, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT exp(value1), exp(value2), exp(value3), exp(value4), 1.6487212707001281, value2 FROM public.s31mysql
(8 rows)

-- select exp (builtin function, not pushdown constraints, result)
--Testcase 640:
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM s3 WHERE to_hex(value2) = '64';
        exp         |          exp           |        exp         |          exp          |        exp         
--------------------+------------------------+--------------------+-----------------------+--------------------
 1.1051709197224806 | 2.6881171418161356e+43 | 0.9048374166876467 | 3.720075976020836e-44 | 1.6487212707001281
 1.2214027618002337 | 2.6881171418161356e+43 | 0.8187307506379741 | 3.720075976020836e-44 | 1.6487212707001281
 1.3498588236675741 | 2.6881171418161356e+43 | 0.7408182118504766 | 3.720075976020836e-44 | 1.6487212707001281
(3 rows)

-- select exp (builtin function, pushdown constraints, explain)
--Testcase 641:
EXPLAIN VERBOSE
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM s3 WHERE value2 != 200;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=64)
   Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision)), 1.6487212707001281
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT exp(`value1`), exp(`value2`), exp(`value3`), exp(`value4`), 1.6487212707001281 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT exp(value1), exp(value2), exp(value3), exp(value4), 1.6487212707001281 FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select exp (builtin function, pushdown constraints, result)
--Testcase 642:
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM s3 WHERE value2 != 200;
        exp         |          exp           |        exp         |          exp          |        exp         
--------------------+------------------------+--------------------+-----------------------+--------------------
 1.1051709197224806 | 2.6881171418161356e+43 | 0.9048374166876467 | 3.720075976020836e-44 | 1.6487212707001281
 1.2214027618002337 | 2.6881171418161356e+43 | 0.8187307506379741 | 3.720075976020836e-44 | 1.6487212707001281
 1.3498588236675741 | 2.6881171418161356e+43 | 0.7408182118504766 | 3.720075976020836e-44 | 1.6487212707001281
(3 rows)

-- select exp (builtin function, exp in constraints, explain)
--Testcase 643:
EXPLAIN VERBOSE
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM s3 WHERE exp(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=992.41..1009.39 rows=6792 width=64)
   Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision)), 1.6487212707001281
   Sort Key: (exp(s3.value1)), (exp((s3.value2)::double precision)), (exp(s3.value3)), (exp((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..560.11 rows=6792 width=64)
         Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision)), 1.6487212707001281
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT exp(`value1`), exp(`value2`), exp(`value3`), exp(`value4`), 1.6487212707001281 FROM `test`.`s32` WHERE ((exp(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT exp(value1), exp(value2), exp(value3), exp(value4), 1.6487212707001281 FROM public.s31mysql WHERE ((exp(value1) <> 1::double precision))
(12 rows)

-- select exp (builtin function, exp in constraints, result)
--Testcase 644:
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM s3 WHERE exp(value1) != 1 ORDER BY 1,2,3,4,5;
        exp         |          exp           |         exp         |          exp           |        exp         
--------------------+------------------------+---------------------+------------------------+--------------------
 1.1051709197224806 | 2.6881171418161356e+43 |  0.9048374166876467 |  3.720075976020836e-44 | 1.6487212707001281
 1.2214027618002337 | 2.6881171418161356e+43 |  0.8187307506379741 |  3.720075976020836e-44 | 1.6487212707001281
 1.3498588236675741 | 2.6881171418161356e+43 |  0.7408182118504766 |  3.720075976020836e-44 | 1.6487212707001281
 3.0041660955713336 |  7.225973768125749e+86 | 0.33287107576181457 | 1.3838965267367376e-87 | 1.6487212707001281
  9.025013929780311 |  7.225973768125749e+86 |  0.1108031530788277 | 1.3838965267367376e-87 | 1.6487212707001281
 27.112637627826548 |  7.225973768125749e+86 | 0.03688316915996652 | 1.3838965267367376e-87 | 1.6487212707001281
(6 rows)

-- select exp (builtin function, exp in constraints, explain)
--Testcase 645:
EXPLAIN VERBOSE
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM s3 WHERE exp(0.5) > value1 ORDER BY 1,2,3,4,5;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=511.90..517.59 rows=2276 width=64)
   Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision)), 1.6487212707001281
   Sort Key: (exp(s3.value1)), (exp((s3.value2)::double precision)), (exp(s3.value3)), (exp((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=64)
         Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision)), 1.6487212707001281
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT exp(`value1`), exp(`value2`), exp(`value3`), exp(`value4`), 1.6487212707001281 FROM `test`.`s32` WHERE ((1.6487212707001282 > `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT exp(value1), exp(value2), exp(value3), exp(value4), 1.6487212707001281 FROM public.s31mysql WHERE ((1.6487212707001282::double precision > value1))
(12 rows)

-- select exp (builtin function, exp in constraints, result)
--Testcase 646:
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM s3 WHERE exp(0.5) > value1 ORDER BY 1,2,3,4,5;
        exp         |          exp           |         exp         |          exp           |        exp         
--------------------+------------------------+---------------------+------------------------+--------------------
 1.1051709197224806 | 2.6881171418161356e+43 |  0.9048374166876467 |  3.720075976020836e-44 | 1.6487212707001281
 1.2214027618002337 | 2.6881171418161356e+43 |  0.8187307506379741 |  3.720075976020836e-44 | 1.6487212707001281
 1.3498588236675741 | 2.6881171418161356e+43 |  0.7408182118504766 |  3.720075976020836e-44 | 1.6487212707001281
 3.0041660955713336 |  7.225973768125749e+86 | 0.33287107576181457 | 1.3838965267367376e-87 | 1.6487212707001281
(4 rows)

-- select exp as nest function with agg (pushdown, explain)
--Testcase 647:
EXPLAIN VERBOSE
SELECT sum(value3),exp(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), exp((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select exp as nest function with agg (pushdown, result)
--Testcase 648:
SELECT sum(value3),exp(sum(value3)) FROM s3;
        sum         |          exp          
--------------------+-----------------------
 -7.200000040233135 | 0.0007465857783391922
(1 row)

-- select exp as nest with log2 (pushdown, explain)
--Testcase 649:
EXPLAIN VERBOSE
SELECT exp(log2(value1)),exp(log2(1/value1)) FROM s3 ORDER BY 1,2;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=16)
   Output: (exp(log2(value1))), (exp(log2(('1'::double precision / value1))))
   Sort Key: (exp(log2(s3.value1))), (exp(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=16)
         Output: (exp(log2(value1))), (exp(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT exp(log2(`value1`)), exp(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT exp(public.log2(value1)), exp(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select exp as nest with log2 (pushdown, result)
--Testcase 650:
SELECT exp(log2(value1)),exp(log2(1/value1)) FROM s3 ORDER BY 1,2;
         exp         |         exp         
---------------------+---------------------
 0.03608319359649761 |  27.713733190652626
 0.09808428946612922 |   10.19531267895174
    0.17605381971773 |    5.68008124790088
  1.1474057850147703 |  0.8715312516810496
   3.118972295274436 | 0.32061842983187216
   5.598316925921947 | 0.17862511416059523
(6 rows)

-- select exp with non pushdown func and explicit constant (explain)
--Testcase 651:
EXPLAIN VERBOSE
SELECT exp(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (exp(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (exp(s3.value3)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (exp(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT exp(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT exp(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select exp with non pushdown func and explicit constant (result)
--Testcase 652:
SELECT exp(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
         exp         |        pi         | ?column? 
---------------------+-------------------+----------
  0.9048374166876467 | 3.141592653589793 |      4.1
  0.8187307506379741 | 3.141592653589793 |      4.1
  0.7408182118504766 | 3.141592653589793 |      4.1
 0.33287107576181457 | 3.141592653589793 |      4.1
  0.1108031530788277 | 3.141592653589793 |      4.1
 0.03688316915996652 | 3.141592653589793 |      4.1
(6 rows)

-- select exp with order by (explain)
--Testcase 653:
EXPLAIN VERBOSE
SELECT value1, exp(1-value3) FROM s3 ORDER BY exp(1-value3);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (exp(('1'::double precision - value3)))
   Sort Key: (exp(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (exp(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, exp((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, exp((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select exp with order by (result)
--Testcase 654:
SELECT value1, exp(1-value3) FROM s3 ORDER BY exp(1-value3);
 value1 |        exp         
--------+--------------------
    0.1 | 3.0041660284229894
    0.2 |  3.320116932631267
    0.3 |  3.669296711360669
    1.1 |  8.166170107264316
    2.2 | 24.532531366911574
    3.3 |  73.69979018531586
(6 rows)

-- select exp with order by index (result)
--Testcase 655:
SELECT value1, exp(1-value3) FROM s3 ORDER BY 2,1;
 value1 |        exp         
--------+--------------------
    0.1 | 3.0041660284229894
    0.2 |  3.320116932631267
    0.3 |  3.669296711360669
    1.1 |  8.166170107264316
    2.2 | 24.532531366911574
    3.3 |  73.69979018531586
(6 rows)

-- select exp with order by index (result)
--Testcase 656:
SELECT value1, exp(1-value3) FROM s3 ORDER BY 1,2;
 value1 |        exp         
--------+--------------------
    0.1 | 3.0041660284229894
    0.2 |  3.320116932631267
    0.3 |  3.669296711360669
    1.1 |  8.166170107264316
    2.2 | 24.532531366911574
    3.3 |  73.69979018531586
(6 rows)

-- select exp with group by (explain)
--Testcase 657:
EXPLAIN VERBOSE
SELECT count(value1), exp(1-value3) FROM s3 GROUP BY exp(1-value3) ORDER BY 1,2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (exp(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (exp(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (exp(('1'::double precision - value3)))
         Group Key: (exp(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (exp(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT exp((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT exp((1::double precision - value3)), value1 FROM public.s31mysql
(15 rows)

-- select exp with group by (result)
--Testcase 658:
SELECT count(value1), exp(1-value3) FROM s3 GROUP BY exp(1-value3) ORDER BY 1,2;
 count |        exp         
-------+--------------------
     1 | 3.0041660284229894
     1 |  3.320116932631267
     1 |  3.669296711360669
     1 |  8.166170107264316
     1 | 24.532531366911574
     1 |  73.69979018531586
(6 rows)

-- select exp with group by index (result)
--Testcase 659:
SELECT value1, exp(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |        exp         
--------+--------------------
    0.1 | 3.0041660284229894
    0.2 |  3.320116932631267
    0.3 |  3.669296711360669
    1.1 |  8.166170107264316
    2.2 | 24.532531366911574
    3.3 |  73.69979018531586
(6 rows)

-- select exp with group by index (result)
--Testcase 660:
SELECT value1, exp(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |        exp         
--------+--------------------
    0.1 | 3.0041660284229894
    0.2 |  3.320116932631267
    0.3 |  3.669296711360669
    1.1 |  8.166170107264316
    2.2 | 24.532531366911574
    3.3 |  73.69979018531586
(6 rows)

-- select exp with group by having (explain)
--Testcase 661:
EXPLAIN VERBOSE
SELECT count(value1), exp(1-value3) FROM s3 GROUP BY exp(1-value3) HAVING exp(avg(value1)) > 0 ORDER BY 1,2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: (count(value1)), (exp(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (exp(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: count(value1), (exp(('1'::double precision - value3)))
         Group Key: (exp(('1'::double precision - s3.value3)))
         Filter: (exp(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (exp(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT exp((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT exp((1::double precision - value3)), value1 FROM public.s31mysql
(16 rows)

-- select exp with group by having (result)
--Testcase 662:
SELECT count(value1), exp(1-value3) FROM s3 GROUP BY exp(1-value3) HAVING exp(avg(value1)) > 0 ORDER BY 1,2;
 count |        exp         
-------+--------------------
     1 | 3.0041660284229894
     1 |  3.320116932631267
     1 |  3.669296711360669
     1 |  8.166170107264316
     1 | 24.532531366911574
     1 |  73.69979018531586
(6 rows)

-- select exp with group by index having (result)
--Testcase 663:
SELECT value1, exp(1-value3) FROM s3 GROUP BY 2,1 HAVING exp(1-value3) > 0 ORDER BY 1,2;
 value1 |        exp         
--------+--------------------
    0.1 | 3.0041660284229894
    0.2 |  3.320116932631267
    0.3 |  3.669296711360669
    1.1 |  8.166170107264316
    2.2 | 24.532531366911574
    3.3 |  73.69979018531586
(6 rows)

-- select exp with group by index having (result)
--Testcase 664:
SELECT value1, exp(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |        exp         
--------+--------------------
    1.1 |  8.166170107264316
    2.2 | 24.532531366911574
    3.3 |  73.69979018531586
(3 rows)

-- select exp and as
--Testcase 665:
SELECT exp(value3) as exp1 FROM s3 ORDER BY 1 DESC;
        exp1         
---------------------
  0.9048374166876467
  0.8187307506379741
  0.7408182118504766
 0.33287107576181457
  0.1108031530788277
 0.03688316915996652
(6 rows)

-- select floor (builtin function, explain)
--Testcase 666:
EXPLAIN VERBOSE
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=961.88..978.94 rows=6826 width=64)
   Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision)), '1'::numeric
   Sort Key: (floor(s3.value1)), (floor((s3.value2)::double precision)), (floor(s3.value3)), (floor((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=64)
         Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision)), '1'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT floor(`value1`), floor(`value2`), floor(`value3`), floor(`value4`), 1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT floor(value1), floor(value2), floor(value3), floor(value4), 1::numeric FROM public.s31mysql
(12 rows)

-- select floor (builtin function, result)
--Testcase 667:
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM s3 ORDER BY 1,2,3,4,5;
 floor | floor | floor | floor | floor 
-------+-------+-------+-------+-------
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     1 |   200 |    -2 |  -200 |     1
     2 |   200 |    -3 |  -200 |     1
     3 |   200 |    -4 |  -200 |     1
(6 rows)

-- select floor (builtin function, not pushdown constraints, explain)
--Testcase 668:
EXPLAIN VERBOSE
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM s3 WHERE to_hex(value2) = '64';
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=64)
   Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision)), '1'::numeric
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT floor(`value1`), floor(`value2`), floor(`value3`), floor(`value4`), 1, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT floor(value1), floor(value2), floor(value3), floor(value4), 1::numeric, value2 FROM public.s31mysql
(8 rows)

-- select floor (builtin function, not pushdown constraints, result)
--Testcase 669:
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM s3 WHERE to_hex(value2) = '64';
 floor | floor | floor | floor | floor 
-------+-------+-------+-------+-------
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
(3 rows)

-- select floor (builtin function, pushdown constraints, explain)
--Testcase 670:
EXPLAIN VERBOSE
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM s3 WHERE value2 != 200;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=64)
   Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT floor(`value1`), floor(`value2`), floor(`value3`), floor(`value4`), 1 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT floor(value1), floor(value2), floor(value3), floor(value4), 1::numeric FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select floor (builtin function, pushdown constraints, result)
--Testcase 671:
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM s3 WHERE value2 != 200;
 floor | floor | floor | floor | floor 
-------+-------+-------+-------+-------
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
(3 rows)

-- select floor (builtin function, floor in constraints, explain)
--Testcase 672:
EXPLAIN VERBOSE
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM s3 WHERE floor(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=992.41..1009.39 rows=6792 width=64)
   Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision)), '1'::numeric
   Sort Key: (floor(s3.value1)), (floor((s3.value2)::double precision)), (floor(s3.value3)), (floor((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..560.11 rows=6792 width=64)
         Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision)), '1'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT floor(`value1`), floor(`value2`), floor(`value3`), floor(`value4`), 1 FROM `test`.`s32` WHERE ((floor(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT floor(value1), floor(value2), floor(value3), floor(value4), 1::numeric FROM public.s31mysql WHERE ((floor(value1) <> 1::double precision))
(12 rows)

-- select floor (builtin function, floor in constraints, result)
--Testcase 673:
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM s3 WHERE floor(value1) != 1 ORDER BY 1,2,3,4,5;
 floor | floor | floor | floor | floor 
-------+-------+-------+-------+-------
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     2 |   200 |    -3 |  -200 |     1
     3 |   200 |    -4 |  -200 |     1
(5 rows)

-- select floor (builtin function, floor in constraints, explain)
--Testcase 674:
EXPLAIN VERBOSE
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM s3 WHERE floor(1.5) > value1;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=64)
   Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT floor(`value1`), floor(`value2`), floor(`value3`), floor(`value4`), 1 FROM `test`.`s32` WHERE ((1 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT floor(value1), floor(value2), floor(value3), floor(value4), 1::numeric FROM public.s31mysql WHERE ((1::double precision > value1))
(7 rows)

-- select floor (builtin function, floor in constraints, result)
--Testcase 675:
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM s3 WHERE floor(1.5) > value1;
 floor | floor | floor | floor | floor 
-------+-------+-------+-------+-------
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
(3 rows)

-- select floor as nest function with agg (pushdown, explain)
--Testcase 676:
EXPLAIN VERBOSE
SELECT sum(value3),floor(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), floor((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select floor as nest function with agg (pushdown, result)
--Testcase 677:
SELECT sum(value3),floor(sum(value3)) FROM s3;
        sum         | floor 
--------------------+-------
 -7.200000040233135 |    -8
(1 row)

-- select floor as nest with log2 (pushdown, explain)
--Testcase 678:
EXPLAIN VERBOSE
SELECT floor(log2(value1)),floor(log2(1/value1)) FROM s3 ORDER BY 1,2;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=16)
   Output: (floor(log2(value1))), (floor(log2(('1'::double precision / value1))))
   Sort Key: (floor(log2(s3.value1))), (floor(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=16)
         Output: (floor(log2(value1))), (floor(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT floor(log2(`value1`)), floor(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT floor(public.log2(value1)), floor(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select floor as nest with log2 (pushdown, result)
--Testcase 679:
SELECT floor(log2(value1)),floor(log2(1/value1)) FROM s3 ORDER BY 1,2;
 floor | floor 
-------+-------
    -4 |     3
    -3 |     2
    -2 |     1
     0 |    -1
     1 |    -2
     1 |    -2
(6 rows)

-- select floor with non pushdown func and explicit constant (explain)
--Testcase 680:
EXPLAIN VERBOSE
SELECT floor(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (floor(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (floor(s3.value3)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (floor(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT floor(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT floor(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select floor with non pushdown func and explicit constant (result)
--Testcase 681:
SELECT floor(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
 floor |        pi         | ?column? 
-------+-------------------+----------
    -1 | 3.141592653589793 |      4.1
    -1 | 3.141592653589793 |      4.1
    -1 | 3.141592653589793 |      4.1
    -2 | 3.141592653589793 |      4.1
    -3 | 3.141592653589793 |      4.1
    -4 | 3.141592653589793 |      4.1
(6 rows)

-- select floor with order by (explain)
--Testcase 682:
EXPLAIN VERBOSE
SELECT value1, floor(10 - value1) FROM s3 ORDER BY floor(10 - value1);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (floor(('10'::double precision - value1)))
   Sort Key: (floor(('10'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (floor(('10'::double precision - value1)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, floor((10 - `value1`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, floor((10::double precision - value1)) FROM public.s31mysql
(12 rows)

-- select floor with order by (result)
--Testcase 683:
SELECT value1, floor(10 - value1) FROM s3 ORDER BY floor(10 - value1);
 value1 | floor 
--------+-------
    3.3 |     6
    2.2 |     7
    1.1 |     8
    0.1 |     9
    0.2 |     9
    0.3 |     9
(6 rows)

-- select floor with order by index (result)
--Testcase 684:
SELECT value1, floor(10 - value1) FROM s3 ORDER BY 2,1;
 value1 | floor 
--------+-------
    3.3 |     6
    2.2 |     7
    1.1 |     8
    0.1 |     9
    0.2 |     9
    0.3 |     9
(6 rows)

-- select floor with order by index (result)
--Testcase 685:
SELECT value1, floor(10 - value1) FROM s3 ORDER BY 1,2;
 value1 | floor 
--------+-------
    0.1 |     9
    0.2 |     9
    0.3 |     9
    1.1 |     8
    2.2 |     7
    3.3 |     6
(6 rows)

-- select floor with group by (explain)
--Testcase 686:
EXPLAIN VERBOSE
SELECT value1, floor(10 - value1) FROM s3 GROUP BY value1, floor(10 - value1) ORDER BY 1,2;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: value1, (floor(('10'::double precision - value1)))
   Sort Key: s3.value1, (floor(('10'::double precision - s3.value1)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: value1, (floor(('10'::double precision - value1)))
         Group Key: s3.value1, (floor(('10'::double precision - s3.value1)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (floor(('10'::double precision - value1)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, floor((10 - `value1`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, floor((10::double precision - value1)) FROM public.s31mysql
(15 rows)

-- select floor with group by (result)
--Testcase 687:
SELECT value1, floor(10 - value1) FROM s3 GROUP BY value1, floor(10 - value1) ORDER BY 1,2;
 value1 | floor 
--------+-------
    0.1 |     9
    0.2 |     9
    0.3 |     9
    1.1 |     8
    2.2 |     7
    3.3 |     6
(6 rows)

-- select floor with group by index (result)
--Testcase 688:
SELECT value1, floor(10 - value1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | floor 
--------+-------
    0.1 |     9
    0.2 |     9
    0.3 |     9
    1.1 |     8
    2.2 |     7
    3.3 |     6
(6 rows)

-- select floor with group by index (result)
--Testcase 689:
SELECT value1, floor(10 - value1) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 | floor 
--------+-------
    0.1 |     9
    0.2 |     9
    0.3 |     9
    1.1 |     8
    2.2 |     7
    3.3 |     6
(6 rows)

-- select floor with group by having (explain)
--Testcase 690:
EXPLAIN VERBOSE
SELECT value1, floor(10 - value1) FROM s3 GROUP BY value1, floor(10 - value1) HAVING floor(avg(value1)) > 0 ORDER BY 1,2;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: value1, (floor(('10'::double precision - value1)))
   Sort Key: s3.value1, (floor(('10'::double precision - s3.value1)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: value1, (floor(('10'::double precision - value1)))
         Group Key: s3.value1, (floor(('10'::double precision - s3.value1)))
         Filter: (floor(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (floor(('10'::double precision - value1)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, floor((10 - `value1`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, floor((10::double precision - value1)) FROM public.s31mysql
(16 rows)

-- select floor with group by having (result)
--Testcase 691:
SELECT value1, floor(10 - value1) FROM s3 GROUP BY value1, floor(10 - value1) HAVING floor(avg(value1)) > 0 ORDER BY 1,2;
 value1 | floor 
--------+-------
    1.1 |     8
    2.2 |     7
    3.3 |     6
(3 rows)

-- select floor with group by index having (result)
--Testcase 692:
SELECT value1, floor(10 - value1) FROM s3 GROUP BY 2,1 HAVING floor(10 - value1) > 0 ORDER BY 1,2;
 value1 | floor 
--------+-------
    0.1 |     9
    0.2 |     9
    0.3 |     9
    1.1 |     8
    2.2 |     7
    3.3 |     6
(6 rows)

-- select floor with group by index having (result)
--Testcase 693:
SELECT value1, floor(10 - value1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | floor 
--------+-------
    1.1 |     8
    2.2 |     7
    3.3 |     6
(3 rows)

-- select floor and as
--Testcase 694:
SELECT floor(value3) as floor1 FROM s3 ORDER BY 1 DESC;
 floor1 
--------
     -1
     -1
     -1
     -2
     -3
     -4
(6 rows)

-- select ln as nest function with agg (pushdown, explain)
--Testcase 695:
EXPLAIN VERBOSE
SELECT sum(value3),ln(sum(value1)) FROM s3;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), ln((sum(value1)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`), sum(`value1`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3), sum(value1) FROM public.s31mysql
(11 rows)

-- select ln as nest function with agg (pushdown, result)
--Testcase 696:
SELECT sum(value3),ln(sum(value1)) FROM s3;
        sum         |        ln         
--------------------+-------------------
 -7.200000040233135 | 1.974081031609945
(1 row)

-- select ln as nest with log2 (pushdown, explain)
--Testcase 697:
EXPLAIN VERBOSE
SELECT value1, ln(log2(value1)),ln(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (ln(log2(value1))), (ln(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (ln(log2(s3.value1))), (ln(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (ln(log2(value1))), (ln(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, ln(log2(`value1`)), ln(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, ln(public.log2(value1)), ln(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select ln as nest with log2 (pushdown, result)
--Testcase 698:
SELECT value1, ln(log2(value1)),ln(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |         ln          |         ln         
--------+---------------------+--------------------
    0.1 |                     | 1.2005453593581281
    0.2 |                     | 0.8423979066501629
    0.3 |                     | 0.5521396464396054
    1.1 | -1.9841055075224108 |                   
    2.2 | 0.12883599712995936 |                   
    3.3 |  0.5437569870634226 |                   
(6 rows)

-- select ln with non pushdown func and explicit constant (explain)
--Testcase 699:
EXPLAIN VERBOSE
SELECT ln(value2), pi(), 4.1 FROM s3 ORDER BY 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=48)
   Output: (ln((value2)::double precision)), '3.141592653589793'::double precision, 4.1
   Sort Key: (ln((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=48)
         Output: (ln((value2)::double precision)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ln(`value2`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ln(value2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select ln with non pushdown func and explicit constant (result)
--Testcase 700:
SELECT ln(value2), pi(), 4.1 FROM s3 ORDER BY 1;
        ln         |        pi         | ?column? 
-------------------+-------------------+----------
 4.605170185988092 | 3.141592653589793 |      4.1
 4.605170185988092 | 3.141592653589793 |      4.1
 4.605170185988092 | 3.141592653589793 |      4.1
 5.298317366548036 | 3.141592653589793 |      4.1
 5.298317366548036 | 3.141592653589793 |      4.1
 5.298317366548036 | 3.141592653589793 |      4.1
(6 rows)

-- select ln with order by (explain)
--Testcase 701:
EXPLAIN VERBOSE
SELECT value1, ln(1-value3) FROM s3 ORDER BY ln(1-value3);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (ln(('1'::double precision - value3)))
   Sort Key: (ln(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (ln(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, ln((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, ln((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select ln with order by (result)
--Testcase 702:
SELECT value1, ln(1-value3) FROM s3 ORDER BY ln(1-value3);
 value1 |         ln          
--------+---------------------
    0.1 | 0.09531018115897588
    0.2 | 0.18232155927748148
    0.3 | 0.26236427363743636
    1.1 |  0.7419373560826429
    2.2 |  1.1631508247068418
    3.3 |  1.4586150116102805
(6 rows)

-- select ln with order by index (result)
--Testcase 703:
SELECT value1, ln(1-value3) FROM s3 ORDER BY 2,1;
 value1 |         ln          
--------+---------------------
    0.1 | 0.09531018115897588
    0.2 | 0.18232155927748148
    0.3 | 0.26236427363743636
    1.1 |  0.7419373560826429
    2.2 |  1.1631508247068418
    3.3 |  1.4586150116102805
(6 rows)

-- select ln with order by index (result)
--Testcase 704:
SELECT value1, ln(1-value3) FROM s3 ORDER BY 1,2;
 value1 |         ln          
--------+---------------------
    0.1 | 0.09531018115897588
    0.2 | 0.18232155927748148
    0.3 | 0.26236427363743636
    1.1 |  0.7419373560826429
    2.2 |  1.1631508247068418
    3.3 |  1.4586150116102805
(6 rows)

-- select ln with group by (explain)
--Testcase 705:
EXPLAIN VERBOSE
SELECT count(value1), ln(1-value3) FROM s3 GROUP BY ln(1-value3) ORDER BY 1,2;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (ln(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (ln(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (ln(('1'::double precision - value3)))
         Group Key: (ln(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (ln(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT ln((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT ln((1::double precision - value3)), value1 FROM public.s31mysql
(15 rows)

-- select ln with group by (result)
--Testcase 706:
SELECT count(value1), ln(1-value3) FROM s3 GROUP BY ln(1-value3) ORDER BY 1,2;
 count |         ln          
-------+---------------------
     1 | 0.09531018115897588
     1 | 0.18232155927748148
     1 | 0.26236427363743636
     1 |  0.7419373560826429
     1 |  1.1631508247068418
     1 |  1.4586150116102805
(6 rows)

-- select ln with group by index (result)
--Testcase 707:
SELECT value1, ln(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |         ln          
--------+---------------------
    0.1 | 0.09531018115897588
    0.2 | 0.18232155927748148
    0.3 | 0.26236427363743636
    1.1 |  0.7419373560826429
    2.2 |  1.1631508247068418
    3.3 |  1.4586150116102805
(6 rows)

-- select ln with group by index (result)
--Testcase 708:
SELECT value1, ln(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |         ln          
--------+---------------------
    0.1 | 0.09531018115897588
    0.2 | 0.18232155927748148
    0.3 | 0.26236427363743636
    1.1 |  0.7419373560826429
    2.2 |  1.1631508247068418
    3.3 |  1.4586150116102805
(6 rows)

-- select ln with group by having (explain)
--Testcase 709:
EXPLAIN VERBOSE
SELECT count(value1), ln(1-value3) FROM s3 GROUP BY ln(1-value3) HAVING ln(avg(value1)) > 0 ORDER BY 1,2;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: (count(value1)), (ln(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (ln(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: count(value1), (ln(('1'::double precision - value3)))
         Group Key: (ln(('1'::double precision - s3.value3)))
         Filter: (ln(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (ln(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT ln((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT ln((1::double precision - value3)), value1 FROM public.s31mysql
(16 rows)

-- select ln with group by having (result)
--Testcase 710:
SELECT count(value1), ln(1-value3) FROM s3 GROUP BY ln(1-value3) HAVING ln(avg(value1)) > 0 ORDER BY 1,2;
 count |         ln         
-------+--------------------
     1 | 0.7419373560826429
     1 | 1.1631508247068418
     1 | 1.4586150116102805
(3 rows)

-- select ln with group by index having (result)
--Testcase 711:
SELECT value1, ln(1-value3) FROM s3 GROUP BY 2,1 HAVING ln(1-value3) < 0;
 value1 | ln 
--------+----
(0 rows)

-- select ln with group by index having (result)
--Testcase 712:
SELECT value1, ln(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |         ln         
--------+--------------------
    1.1 | 0.7419373560826429
    2.2 | 1.1631508247068418
    3.3 | 1.4586150116102805
(3 rows)

-- select ln and as
--Testcase 713:
SELECT ln(value1) as ln1 FROM s3 ORDER BY 1;
         ln1         
---------------------
 -2.3025850780928847
 -1.6094378975329393
 -1.2039727645895069
  0.0953102014787409
  0.7884573820386862
  1.1939224540228235
(6 rows)

-- select ln (builtin function, explain)
--Testcase 714:
EXPLAIN VERBOSE
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM s3 ORDER BY 1,2,3,4;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=944.81..961.88 rows=6826 width=56)
   Output: (ln(value1)), (ln((value2)::double precision)), (ln((value3 + '10'::double precision))), '-0.6931471805599453'::numeric
   Sort Key: (ln(s3.value1)), (ln((s3.value2)::double precision)), (ln((s3.value3 + '10'::double precision)))
   ->  Foreign Scan on public.s3  (cost=200.00..510.10 rows=6826 width=56)
         Output: (ln(value1)), (ln((value2)::double precision)), (ln((value3 + '10'::double precision))), '-0.6931471805599453'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ln(`value1`), ln(`value2`), ln((`value3` + 10)), (-0.6931471805599453) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ln(value1), ln(value2), ln((value3 + 10::double precision)), (-0.6931471805599453) FROM public.s31mysql
(12 rows)

-- select ln (builtin function, result)
--Testcase 715:
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM s3 ORDER BY 1,2,3,4;
         ln          |        ln         |         ln         |         ln          
---------------------+-------------------+--------------------+---------------------
 -2.3025850780928847 | 4.605170185988092 | 2.2925347569900274 | -0.6931471805599453
 -1.6094378975329393 | 4.605170185988092 | 2.2823823853724208 | -0.6931471805599453
 -1.2039727645895069 | 4.605170185988092 | 2.2721258842803755 | -0.6931471805599453
  0.0953102014787409 | 5.298317366548036 | 2.1860512740592335 | -0.6931471805599453
  0.7884573820386862 | 5.298317366548036 | 2.0541237275822493 | -0.6931471805599453
  1.1939224540228235 | 5.298317366548036 | 1.9021075335138928 | -0.6931471805599453
(6 rows)

-- select ln (builtin function, not pushdown constraints, explain)
--Testcase 716:
EXPLAIN VERBOSE
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.15 rows=34 width=56)
   Output: (ln(value1)), (ln((value2)::double precision)), (ln((value3 + '10'::double precision))), '-0.6931471805599453'::numeric
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ln(`value1`), ln(`value2`), ln((`value3` + 10)), (-0.6931471805599453), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ln(value1), ln(value2), ln((value3 + 10::double precision)), (-0.6931471805599453), value2 FROM public.s31mysql
(8 rows)

-- select ln (builtin function, not pushdown constraints, result)
--Testcase 717:
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM s3 WHERE to_hex(value2) = '64';
         ln          |        ln         |         ln         |         ln          
---------------------+-------------------+--------------------+---------------------
 -2.3025850780928847 | 4.605170185988092 | 2.2925347569900274 | -0.6931471805599453
 -1.6094378975329393 | 4.605170185988092 | 2.2823823853724208 | -0.6931471805599453
 -1.2039727645895069 | 4.605170185988092 | 2.2721258842803755 | -0.6931471805599453
(3 rows)

-- select ln (builtin function, pushdown constraints, explain)
--Testcase 718:
EXPLAIN VERBOSE
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM s3 WHERE value2 != 200;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..526.07 rows=6792 width=56)
   Output: (ln(value1)), (ln((value2)::double precision)), (ln((value3 + '10'::double precision))), '-0.6931471805599453'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ln(`value1`), ln(`value2`), ln((`value3` + 10)), (-0.6931471805599453) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ln(value1), ln(value2), ln((value3 + 10::double precision)), (-0.6931471805599453) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select ln (builtin function, pushdown constraints, result)
--Testcase 719:
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM s3 WHERE value2 != 200;
         ln          |        ln         |         ln         |         ln          
---------------------+-------------------+--------------------+---------------------
 -2.3025850780928847 | 4.605170185988092 | 2.2925347569900274 | -0.6931471805599453
 -1.6094378975329393 | 4.605170185988092 | 2.2823823853724208 | -0.6931471805599453
 -1.2039727645895069 | 4.605170185988092 | 2.2721258842803755 | -0.6931471805599453
(3 rows)

-- select ln (builtin function, ln in constraints, explain)
--Testcase 720:
EXPLAIN VERBOSE
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM s3 WHERE ln(value1) != 1 ORDER BY 1,2,3,4;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=975.43..992.41 rows=6792 width=56)
   Output: (ln(value1)), (ln((value2)::double precision)), (ln((value3 + '10'::double precision))), '-0.6931471805599453'::numeric
   Sort Key: (ln(s3.value1)), (ln((s3.value2)::double precision)), (ln((s3.value3 + '10'::double precision)))
   ->  Foreign Scan on public.s3  (cost=200.00..543.13 rows=6792 width=56)
         Output: (ln(value1)), (ln((value2)::double precision)), (ln((value3 + '10'::double precision))), '-0.6931471805599453'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ln(`value1`), ln(`value2`), ln((`value3` + 10)), (-0.6931471805599453) FROM `test`.`s32` WHERE ((ln(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ln(value1), ln(value2), ln((value3 + 10::double precision)), (-0.6931471805599453) FROM public.s31mysql WHERE ((ln(value1) <> 1::double precision))
(12 rows)

-- select ln (builtin function, ln in constraints, result)
--Testcase 721:
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM s3 WHERE ln(value1) != 1 ORDER BY 1,2,3,4;
         ln          |        ln         |         ln         |         ln          
---------------------+-------------------+--------------------+---------------------
 -2.3025850780928847 | 4.605170185988092 | 2.2925347569900274 | -0.6931471805599453
 -1.6094378975329393 | 4.605170185988092 | 2.2823823853724208 | -0.6931471805599453
 -1.2039727645895069 | 4.605170185988092 | 2.2721258842803755 | -0.6931471805599453
  0.0953102014787409 | 5.298317366548036 | 2.1860512740592335 | -0.6931471805599453
  0.7884573820386862 | 5.298317366548036 | 2.0541237275822493 | -0.6931471805599453
  1.1939224540228235 | 5.298317366548036 | 1.9021075335138928 | -0.6931471805599453
(6 rows)

-- select ln (builtin function, ln in constraints, explain)
--Testcase 722:
EXPLAIN VERBOSE
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM s3 WHERE ln(0.5) < value1 ORDER BY 1,2,3,4;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=506.21..511.90 rows=2276 width=56)
   Output: (ln(value1)), (ln((value2)::double precision)), (ln((value3 + '10'::double precision))), '-0.6931471805599453'::numeric
   Sort Key: (ln(s3.value1)), (ln((s3.value2)::double precision)), (ln((s3.value3 + '10'::double precision)))
   ->  Foreign Scan on public.s3  (cost=200.00..379.29 rows=2276 width=56)
         Output: (ln(value1)), (ln((value2)::double precision)), (ln((value3 + '10'::double precision))), '-0.6931471805599453'::numeric
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ln(`value1`), ln(`value2`), ln((`value3` + 10)), (-0.6931471805599453) FROM `test`.`s32` WHERE (((-0.6931471805599453) < `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ln(value1), ln(value2), ln((value3 + 10::double precision)), (-0.6931471805599453) FROM public.s31mysql WHERE (((-0.6931471805599453)::double precision < value1))
(12 rows)

-- select ln (builtin function, ln in constraints, result)
--Testcase 723:
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM s3 WHERE ln(0.5) < value1 ORDER BY 1,2,3,4;
         ln          |        ln         |         ln         |         ln          
---------------------+-------------------+--------------------+---------------------
 -2.3025850780928847 | 4.605170185988092 | 2.2925347569900274 | -0.6931471805599453
 -1.6094378975329393 | 4.605170185988092 | 2.2823823853724208 | -0.6931471805599453
 -1.2039727645895069 | 4.605170185988092 | 2.2721258842803755 | -0.6931471805599453
  0.0953102014787409 | 5.298317366548036 | 2.1860512740592335 | -0.6931471805599453
  0.7884573820386862 | 5.298317366548036 | 2.0541237275822493 | -0.6931471805599453
  1.1939224540228235 | 5.298317366548036 | 1.9021075335138928 | -0.6931471805599453
(6 rows)

-- select mod (builtin function, explain)
--Testcase 724:
EXPLAIN VERBOSE
SELECT value1, mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM s3 ORDER BY 1,2,3,4,5,6;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=996.01..1013.07 rows=6826 width=140)
   Output: value1, (mod((value1)::numeric, '2'::numeric)), (mod((value2)::numeric, '2'::numeric)), (mod((value3)::numeric, '2'::numeric)), (mod((value4)::numeric, '2'::numeric)), 1
   Sort Key: s3.value1, (mod((s3.value1)::numeric, '2'::numeric)), (mod((s3.value2)::numeric, '2'::numeric)), (mod((s3.value3)::numeric, '2'::numeric)), (mod((s3.value4)::numeric, '2'::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..561.30 rows=6826 width=140)
         Output: value1, (mod((value1)::numeric, '2'::numeric)), (mod((value2)::numeric, '2'::numeric)), (mod((value3)::numeric, '2'::numeric)), (mod((value4)::numeric, '2'::numeric)), 1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, (`value1` mod 2), (`value2` mod 2), (`value3` mod 2), (`value4` mod 2), 1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, mod(value1::numeric, 2::numeric), mod(value2::numeric, 2::numeric), mod(value3::numeric, 2::numeric), mod(value4::numeric, 2::numeric), 1 FROM public.s31mysql
(12 rows)

-- select mod (builtin function, result)
--Testcase 725:
SELECT value1, mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM s3 ORDER BY 1,2,3,4,5,6;
 value1 |         mod         | mod |         mod          | mod | mod 
--------+---------------------+-----+----------------------+-----+-----
    0.1 | 0.10000000149011612 |   0 | -0.10000000149011612 |   0 |   1
    0.2 | 0.20000000298023224 |   0 | -0.20000000298023224 |   0 |   1
    0.3 | 0.30000001192092896 |   0 | -0.30000001192092896 |   0 |   1
    1.1 |   1.100000023841858 |   0 |   -1.100000023841858 |   0 |   1
    2.2 | 0.20000004768371582 |   0 | -0.20000004768371582 |   0 |   1
    3.3 |  1.2999999523162842 |   0 |  -1.2999999523162842 |   0 |   1
(6 rows)

-- select mod (builtin function, not pushdown constraints, explain)
--Testcase 726:
EXPLAIN VERBOSE
SELECT mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM s3 WHERE to_hex(value2) = '64';
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.41 rows=34 width=132)
   Output: (mod((value1)::numeric, '2'::numeric)), (mod((value2)::numeric, '2'::numeric)), (mod((value3)::numeric, '2'::numeric)), (mod((value4)::numeric, '2'::numeric)), 1
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT (`value1` mod 2), (`value2` mod 2), (`value3` mod 2), (`value4` mod 2), 1, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT mod(value1::numeric, 2::numeric), mod(value2::numeric, 2::numeric), mod(value3::numeric, 2::numeric), mod(value4::numeric, 2::numeric), 1, value2 FROM public.s31mysql
(8 rows)

-- select mod (builtin function, not pushdown constraints, result)
--Testcase 727:
SELECT mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM s3 WHERE to_hex(value2) = '64';
         mod         | mod |         mod          | mod | mod 
---------------------+-----+----------------------+-----+-----
 0.10000000149011612 |   0 | -0.10000000149011612 |   0 |   1
 0.20000000298023224 |   0 | -0.20000000298023224 |   0 |   1
 0.30000001192092896 |   0 | -0.30000001192092896 |   0 |   1
(3 rows)

-- select mod (builtin function, pushdown constraints, explain)
--Testcase 728:
EXPLAIN VERBOSE
SELECT mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM s3 WHERE value2 != 200;
                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..577.00 rows=6792 width=132)
   Output: (mod((value1)::numeric, '2'::numeric)), (mod((value2)::numeric, '2'::numeric)), (mod((value3)::numeric, '2'::numeric)), (mod((value4)::numeric, '2'::numeric)), 1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT (`value1` mod 2), (`value2` mod 2), (`value3` mod 2), (`value4` mod 2), 1 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT mod(value1::numeric, 2::numeric), mod(value2::numeric, 2::numeric), mod(value3::numeric, 2::numeric), mod(value4::numeric, 2::numeric), 1 FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select mod (builtin function, pushdown constraints, result)
--Testcase 729:
SELECT mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM s3 WHERE value2 != 200;
         mod         | mod |         mod          | mod | mod 
---------------------+-----+----------------------+-----+-----
 0.10000000149011612 |   0 | -0.10000000149011612 |   0 |   1
 0.20000000298023224 |   0 | -0.20000000298023224 |   0 |   1
 0.30000001192092896 |   0 | -0.30000001192092896 |   0 |   1
(3 rows)

-- select mod (builtin function, mod in constraints, explain)
--Testcase 730:
EXPLAIN VERBOSE
SELECT value1, mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM s3 WHERE mod(value1::numeric, 2) != 1 ORDER BY 1,2,3,4,5,6;
                                                                                                                          QUERY PLAN                                                                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1043.43..1060.41 rows=6792 width=140)
   Output: value1, (mod((value1)::numeric, '2'::numeric)), (mod((value2)::numeric, '2'::numeric)), (mod((value3)::numeric, '2'::numeric)), (mod((value4)::numeric, '2'::numeric)), 1
   Sort Key: s3.value1, (mod((s3.value1)::numeric, '2'::numeric)), (mod((s3.value2)::numeric, '2'::numeric)), (mod((s3.value3)::numeric, '2'::numeric)), (mod((s3.value4)::numeric, '2'::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..611.14 rows=6792 width=140)
         Output: value1, (mod((value1)::numeric, '2'::numeric)), (mod((value2)::numeric, '2'::numeric)), (mod((value3)::numeric, '2'::numeric)), (mod((value4)::numeric, '2'::numeric)), 1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, (`value1` mod 2), (`value2` mod 2), (`value3` mod 2), (`value4` mod 2), 1 FROM `test`.`s32` WHERE (((`value1` mod 2) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, mod(value1::numeric, 2::numeric), mod(value2::numeric, 2::numeric), mod(value3::numeric, 2::numeric), mod(value4::numeric, 2::numeric), 1 FROM public.s31mysql WHERE ((mod(value1::numeric, 2::numeric) <> 1::numeric))
(12 rows)

-- select mod (builtin function, mod in constraints, result)
--Testcase 731:
SELECT value1, mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM s3 WHERE mod(value1::numeric, 2) != 1 ORDER BY 1,2,3,4,5,6;
 value1 |         mod         | mod |         mod          | mod | mod 
--------+---------------------+-----+----------------------+-----+-----
    0.1 | 0.10000000149011612 |   0 | -0.10000000149011612 |   0 |   1
    0.2 | 0.20000000298023224 |   0 | -0.20000000298023224 |   0 |   1
    0.3 | 0.30000001192092896 |   0 | -0.30000001192092896 |   0 |   1
    1.1 |   1.100000023841858 |   0 |   -1.100000023841858 |   0 |   1
    2.2 | 0.20000004768371582 |   0 | -0.20000004768371582 |   0 |   1
    3.3 |  1.2999999523162842 |   0 |  -1.2999999523162842 |   0 |   1
(6 rows)

-- select mod (builtin function, mod in constraints, explain)
--Testcase 732:
EXPLAIN VERBOSE
SELECT mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM s3 WHERE mod(5, 2) > value1;
                                                                                                          QUERY PLAN                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..396.36 rows=2276 width=132)
   Output: (mod((value1)::numeric, '2'::numeric)), (mod((value2)::numeric, '2'::numeric)), (mod((value3)::numeric, '2'::numeric)), (mod((value4)::numeric, '2'::numeric)), 1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT (`value1` mod 2), (`value2` mod 2), (`value3` mod 2), (`value4` mod 2), 1 FROM `test`.`s32` WHERE ((1 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT mod(value1::numeric, 2::numeric), mod(value2::numeric, 2::numeric), mod(value3::numeric, 2::numeric), mod(value4::numeric, 2::numeric), 1 FROM public.s31mysql WHERE ((1::double precision > value1))
(7 rows)

-- select mod (builtin function, mod in constraints, result)
--Testcase 733:
SELECT mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM s3 WHERE mod(5, 2) > value1;
         mod         | mod |         mod          | mod | mod 
---------------------+-----+----------------------+-----+-----
 0.10000000149011612 |   0 | -0.10000000149011612 |   0 |   1
 0.20000000298023224 |   0 | -0.20000000298023224 |   0 |   1
 0.30000001192092896 |   0 | -0.30000001192092896 |   0 |   1
(3 rows)

-- select mod as nest function with agg (pushdown, explain)
--Testcase 734:
EXPLAIN VERBOSE
SELECT sum(value3),mod(sum(value3)::numeric, 2) FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=40)
   Output: (sum(value3)), mod(((sum(value3)))::numeric, '2'::numeric)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select mod as nest function with agg (pushdown, error)
--Testcase 735:
SELECT sum(value3),mod(sum(value3)::numeric, 2) FROM s3;
        sum         |        mod        
--------------------+-------------------
 -7.200000040233135 | -1.20000004023314
(1 row)

-- select mod as nest with log2 (pushdown, explain)
--Testcase 736:
EXPLAIN VERBOSE
SELECT value1, mod(log2(value1)::numeric, 2),mod(log2(1/value1)::numeric, 2) FROM s3 ORDER BY 1,2,3;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4357.81..4374.88 rows=6826 width=72)
   Output: value1, (mod((log2(value1))::numeric, '2'::numeric)), (mod((log2(('1'::double precision / value1)))::numeric, '2'::numeric))
   Sort Key: s3.value1, (mod((log2(s3.value1))::numeric, '2'::numeric)), (mod((log2(('1'::double precision / s3.value1)))::numeric, '2'::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..3923.10 rows=6826 width=72)
         Output: value1, (mod((log2(value1))::numeric, '2'::numeric)), (mod((log2(('1'::double precision / value1)))::numeric, '2'::numeric))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, (log2(`value1`) mod 2), (log2((1 / `value1`)) mod 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, mod(public.log2(value1)::numeric, 2::numeric), mod(public.log2((1::double precision / value1))::numeric, 2::numeric) FROM public.s31mysql
(12 rows)

-- select mod as nest with log2 (pushdown, result)
--Testcase 737:
SELECT value1, mod(log2(value1)::numeric, 2),mod(log2(1/value1)::numeric, 2) FROM s3 ORDER BY 1,2,3;
 value1 |         mod         |         mod         
--------+---------------------+---------------------
    0.1 |  -1.321928073389531 |   1.321928073389531
    0.2 | -0.3219280733895311 |  0.3219280733895311
    0.3 |  -1.736965536838657 |  1.7369655368386572
    1.1 | 0.13750355501950745 | -0.1375035550195074
    2.2 |  1.1375035550195074 | -1.1375035550195074
    3.3 |   1.722466003624709 | -1.7224660036247088
(6 rows)

-- select mod with non pushdown func and explicit constant (explain)
--Testcase 738:
EXPLAIN VERBOSE
SELECT value1, mod(value3::numeric, 2), pi(), 4.1 FROM s3 ORDER BY 1,2,3;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=80)
   Output: value1, (mod((value3)::numeric, '2'::numeric)), '3.141592653589793'::double precision, 4.1
   Sort Key: s3.value1, (mod((s3.value3)::numeric, '2'::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=80)
         Output: value1, (mod((value3)::numeric, '2'::numeric)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, (`value3` mod 2), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, mod(value3::numeric, 2::numeric), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select mod with non pushdown func and explicit constant (result)
--Testcase 739:
SELECT value1, mod(value3::numeric, 2), pi(), 4.1 FROM s3 ORDER BY 1,2,3;
 value1 |         mod          |        pi         | ?column? 
--------+----------------------+-------------------+----------
    0.1 | -0.10000000149011612 | 3.141592653589793 |      4.1
    0.2 | -0.20000000298023224 | 3.141592653589793 |      4.1
    0.3 | -0.30000001192092896 | 3.141592653589793 |      4.1
    1.1 |   -1.100000023841858 | 3.141592653589793 |      4.1
    2.2 | -0.20000004768371582 | 3.141592653589793 |      4.1
    3.3 |  -1.2999999523162842 | 3.141592653589793 |      4.1
(6 rows)

-- select mod with order by (explain)
--Testcase 740:
EXPLAIN VERBOSE
SELECT value1, mod((1-value3)::numeric, 2) FROM s3 ORDER BY mod((1-value3)::numeric, 2);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=910.68..927.75 rows=6826 width=40)
   Output: value1, (mod((('1'::double precision - value3))::numeric, '2'::numeric))
   Sort Key: (mod((('1'::double precision - s3.value3))::numeric, '2'::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=40)
         Output: value1, (mod((('1'::double precision - value3))::numeric, '2'::numeric))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, ((1 - `value3`) mod 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, mod((1::double precision - value3)::numeric, 2::numeric) FROM public.s31mysql
(12 rows)

-- select mod with order by (result)
--Testcase 741:
SELECT value1, mod((1-value3)::numeric, 2) FROM s3 ORDER BY mod((1-value3)::numeric, 2);
 value1 |         mod         
--------+---------------------
    1.1 | 0.10000002384185791
    3.3 |  0.2999999523162842
    0.1 |  1.1000000014901161
    0.2 |  1.2000000029802322
    2.2 |  1.2000000476837158
    0.3 |   1.300000011920929
(6 rows)

-- select mod with order by index (result)
--Testcase 742:
SELECT value1, mod((1-value3)::numeric, 2) FROM s3 ORDER BY 2,1;
 value1 |         mod         
--------+---------------------
    1.1 | 0.10000002384185791
    3.3 |  0.2999999523162842
    0.1 |  1.1000000014901161
    0.2 |  1.2000000029802322
    2.2 |  1.2000000476837158
    0.3 |   1.300000011920929
(6 rows)

-- select mod with order by index (result)
--Testcase 743:
SELECT value1, mod((1-value3)::numeric, 2) FROM s3 ORDER BY 1,2;
 value1 |         mod         
--------+---------------------
    0.1 |  1.1000000014901161
    0.2 |  1.2000000029802322
    0.3 |   1.300000011920929
    1.1 | 0.10000002384185791
    2.2 |  1.2000000476837158
    3.3 |  0.2999999523162842
(6 rows)

-- select mod with group by (explain)
--Testcase 744:
EXPLAIN VERBOSE
SELECT value1, mod((1-value3)::numeric, 2) FROM s3 GROUP BY value1, mod((1-value3)::numeric, 2) ORDER BY 1,2;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=521.25..521.75 rows=200 width=40)
   Output: value1, (mod((('1'::double precision - value3))::numeric, '2'::numeric))
   Sort Key: s3.value1, (mod((('1'::double precision - s3.value3))::numeric, '2'::numeric))
   ->  HashAggregate  (cost=510.10..513.61 rows=200 width=40)
         Output: value1, (mod((('1'::double precision - value3))::numeric, '2'::numeric))
         Group Key: s3.value1, (mod((('1'::double precision - s3.value3))::numeric, '2'::numeric))
         ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=40)
               Output: value1, (mod((('1'::double precision - value3))::numeric, '2'::numeric))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, ((1 - `value3`) mod 2) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, mod((1::double precision - value3)::numeric, 2::numeric) FROM public.s31mysql
(15 rows)

-- select mod with group by (result)
--Testcase 745:
SELECT value1, mod((1-value3)::numeric, 2) FROM s3 GROUP BY value1, mod((1-value3)::numeric, 2) ORDER BY 1,2;
 value1 |         mod         
--------+---------------------
    0.1 |  1.1000000014901161
    0.2 |  1.2000000029802322
    0.3 |   1.300000011920929
    1.1 | 0.10000002384185791
    2.2 |  1.2000000476837158
    3.3 |  0.2999999523162842
(6 rows)

-- select mod with group by index (result)
--Testcase 746:
SELECT value1, mod((1-value3)::numeric, 2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |         mod         
--------+---------------------
    0.1 |  1.1000000014901161
    0.2 |  1.2000000029802322
    0.3 |   1.300000011920929
    1.1 | 0.10000002384185791
    2.2 |  1.2000000476837158
    3.3 |  0.2999999523162842
(6 rows)

-- select mod with group by index (result)
--Testcase 747:
SELECT value1, mod((1-value3)::numeric, 2) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |         mod         
--------+---------------------
    0.1 |  1.1000000014901161
    0.2 |  1.2000000029802322
    0.3 |   1.300000011920929
    1.1 | 0.10000002384185791
    2.2 |  1.2000000476837158
    3.3 |  0.2999999523162842
(6 rows)

-- select mod with group by having (explain)
--Testcase 748:
EXPLAIN VERBOSE
SELECT value1, mod((1-value3)::numeric, 2) FROM s3 GROUP BY value1, mod((1-value3)::numeric, 2) HAVING avg(value1) > 0 ORDER BY 1,2;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=532.70..532.87 rows=67 width=40)
   Output: value1, (mod((('1'::double precision - value3))::numeric, '2'::numeric))
   Sort Key: s3.value1, (mod((('1'::double precision - s3.value3))::numeric, '2'::numeric))
   ->  HashAggregate  (cost=527.17..530.67 rows=67 width=40)
         Output: value1, (mod((('1'::double precision - value3))::numeric, '2'::numeric))
         Group Key: s3.value1, (mod((('1'::double precision - s3.value3))::numeric, '2'::numeric))
         Filter: (avg(s3.value1) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=40)
               Output: value1, (mod((('1'::double precision - value3))::numeric, '2'::numeric))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, ((1 - `value3`) mod 2) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, mod((1::double precision - value3)::numeric, 2::numeric) FROM public.s31mysql
(16 rows)

-- select mod with group by having (result)
--Testcase 749:
SELECT value1, mod((1-value3)::numeric, 2) FROM s3 GROUP BY value1, mod((1-value3)::numeric, 2) HAVING avg(value1) > 0 ORDER BY 1,2;
 value1 |         mod         
--------+---------------------
    0.1 |  1.1000000014901161
    0.2 |  1.2000000029802322
    0.3 |   1.300000011920929
    1.1 | 0.10000002384185791
    2.2 |  1.2000000476837158
    3.3 |  0.2999999523162842
(6 rows)

-- select mod with group by index having (result)
--Testcase 750:
SELECT value1, mod((1-value3)::numeric, 2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |         mod         
--------+---------------------
    1.1 | 0.10000002384185791
    2.2 |  1.2000000476837158
    3.3 |  0.2999999523162842
(3 rows)

-- select mod and as
--Testcase 751:
SELECT value1, mod(value3::numeric, 2) as mod1 FROM s3 ORDER BY 1,2;
 value1 |         mod1         
--------+----------------------
    0.1 | -0.10000000149011612
    0.2 | -0.20000000298023224
    0.3 | -0.30000001192092896
    1.1 |   -1.100000023841858
    2.2 | -0.20000004768371582
    3.3 |  -1.2999999523162842
(6 rows)

-- select power (builtin function, explain)
--Testcase 752:
EXPLAIN VERBOSE
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM s3 ORDER BY 1,2,3,4,5;
                                                                                                                   QUERY PLAN                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=961.88..978.94 rows=6826 width=40)
   Output: (power(value1, '2'::double precision)), (power((value2)::double precision, '2'::double precision)), (power(value3, '2'::double precision)), (power((value4)::double precision, '2'::double precision)), '25'::double precision
   Sort Key: (power(s3.value1, '2'::double precision)), (power((s3.value2)::double precision, '2'::double precision)), (power(s3.value3, '2'::double precision)), (power((s3.value4)::double precision, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=40)
         Output: (power(value1, '2'::double precision)), (power((value2)::double precision, '2'::double precision)), (power(value3, '2'::double precision)), (power((value4)::double precision, '2'::double precision)), '25'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT power(`value1`, 2), power(`value2`, 2), power(`value3`, 2), power(`value4`, 2), 25 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT power(value1, 2::double precision), power(value2, 2::double precision), power(value3, 2::double precision), power(value4, 2::double precision), 25::double precision FROM public.s31mysql
(12 rows)

-- select power (builtin function, result)
--Testcase 753:
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM s3 ORDER BY 1,2,3,4,5;
        power         | power |        power         | power | power 
----------------------+-------+----------------------+-------+-------
 0.010000000298023226 | 10000 | 0.010000000298023226 | 10000 |    25
 0.040000001192092904 | 10000 | 0.040000001192092904 | 10000 |    25
  0.09000000715255752 | 10000 |  0.09000000715255752 | 10000 |    25
    1.210000052452088 | 40000 |    1.210000052452088 | 40000 |    25
    4.840000209808352 | 40000 |    4.840000209808352 | 40000 |    25
   10.889999685287478 | 40000 |   10.889999685287478 | 40000 |    25
(6 rows)

-- select power (builtin function, not pushdown constraints, explain)
--Testcase 754:
EXPLAIN VERBOSE
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM s3 WHERE to_hex(value2) = '64';
                                                                                                                QUERY PLAN                                                                                                                
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=40)
   Output: (power(value1, '2'::double precision)), (power((value2)::double precision, '2'::double precision)), (power(value3, '2'::double precision)), (power((value4)::double precision, '2'::double precision)), '25'::double precision
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT power(`value1`, 2), power(`value2`, 2), power(`value3`, 2), power(`value4`, 2), 25, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT power(value1, 2::double precision), power(value2, 2::double precision), power(value3, 2::double precision), power(value4, 2::double precision), 25::double precision, value2 FROM public.s31mysql
(8 rows)

-- select power (builtin function, not pushdown constraints, result)
--Testcase 755:
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM s3 WHERE to_hex(value2) = '64';
        power         | power |        power         | power | power 
----------------------+-------+----------------------+-------+-------
 0.010000000298023226 | 10000 | 0.010000000298023226 | 10000 |    25
 0.040000001192092904 | 10000 | 0.040000001192092904 | 10000 |    25
  0.09000000715255752 | 10000 |  0.09000000715255752 | 10000 |    25
(3 rows)

-- select power (builtin function, pushdown constraints, explain)
--Testcase 756:
EXPLAIN VERBOSE
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM s3 WHERE value2 != 200;
                                                                                                                QUERY PLAN                                                                                                                
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=40)
   Output: (power(value1, '2'::double precision)), (power((value2)::double precision, '2'::double precision)), (power(value3, '2'::double precision)), (power((value4)::double precision, '2'::double precision)), '25'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT power(`value1`, 2), power(`value2`, 2), power(`value3`, 2), power(`value4`, 2), 25 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT power(value1, 2::double precision), power(value2, 2::double precision), power(value3, 2::double precision), power(value4, 2::double precision), 25::double precision FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select power (builtin function, pushdown constraints, result)
--Testcase 757:
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM s3 WHERE value2 != 200;
        power         | power |        power         | power | power 
----------------------+-------+----------------------+-------+-------
 0.010000000298023226 | 10000 | 0.010000000298023226 | 10000 |    25
 0.040000001192092904 | 10000 | 0.040000001192092904 | 10000 |    25
  0.09000000715255752 | 10000 |  0.09000000715255752 | 10000 |    25
(3 rows)

-- select power (builtin function, power in constraints, explain)
--Testcase 758:
EXPLAIN VERBOSE
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM s3 WHERE power(value1, 2) != 1 ORDER BY 1,2,3,4,5;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=992.41..1009.39 rows=6792 width=40)
   Output: (power(value1, '2'::double precision)), (power((value2)::double precision, '2'::double precision)), (power(value3, '2'::double precision)), (power((value4)::double precision, '2'::double precision)), '25'::double precision
   Sort Key: (power(s3.value1, '2'::double precision)), (power((s3.value2)::double precision, '2'::double precision)), (power(s3.value3, '2'::double precision)), (power((s3.value4)::double precision, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..560.11 rows=6792 width=40)
         Output: (power(value1, '2'::double precision)), (power((value2)::double precision, '2'::double precision)), (power(value3, '2'::double precision)), (power((value4)::double precision, '2'::double precision)), '25'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT power(`value1`, 2), power(`value2`, 2), power(`value3`, 2), power(`value4`, 2), 25 FROM `test`.`s32` WHERE ((power(`value1`, 2) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT power(value1, 2::double precision), power(value2, 2::double precision), power(value3, 2::double precision), power(value4, 2::double precision), 25::double precision FROM public.s31mysql WHERE ((power(value1, 2::double precision) <> 1::double precision))
(12 rows)

-- select power (builtin function, power in constraints, result)
--Testcase 759:
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM s3 WHERE power(value1, 2) != 1 ORDER BY 1,2,3,4,5;
        power         | power |        power         | power | power 
----------------------+-------+----------------------+-------+-------
 0.010000000298023226 | 10000 | 0.010000000298023226 | 10000 |    25
 0.040000001192092904 | 10000 | 0.040000001192092904 | 10000 |    25
  0.09000000715255752 | 10000 |  0.09000000715255752 | 10000 |    25
    1.210000052452088 | 40000 |    1.210000052452088 | 40000 |    25
    4.840000209808352 | 40000 |    4.840000209808352 | 40000 |    25
   10.889999685287478 | 40000 |   10.889999685287478 | 40000 |    25
(6 rows)

-- select power (builtin function, power in constraints, explain)
--Testcase 760:
EXPLAIN VERBOSE
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM s3 WHERE power(5, 2) > value1 ORDER BY 1,2,3,4,5;
                                                                                                                           QUERY PLAN                                                                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=511.90..517.59 rows=2276 width=40)
   Output: (power(value1, '2'::double precision)), (power((value2)::double precision, '2'::double precision)), (power(value3, '2'::double precision)), (power((value4)::double precision, '2'::double precision)), '25'::double precision
   Sort Key: (power(s3.value1, '2'::double precision)), (power((s3.value2)::double precision, '2'::double precision)), (power(s3.value3, '2'::double precision)), (power((s3.value4)::double precision, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=40)
         Output: (power(value1, '2'::double precision)), (power((value2)::double precision, '2'::double precision)), (power(value3, '2'::double precision)), (power((value4)::double precision, '2'::double precision)), '25'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT power(`value1`, 2), power(`value2`, 2), power(`value3`, 2), power(`value4`, 2), 25 FROM `test`.`s32` WHERE ((25 > `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT power(value1, 2::double precision), power(value2, 2::double precision), power(value3, 2::double precision), power(value4, 2::double precision), 25::double precision FROM public.s31mysql WHERE ((25::double precision > value1))
(12 rows)

-- select power (builtin function, power in constraints, result)
--Testcase 761:
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM s3 WHERE power(5, 2) > value1 ORDER BY 1,2,3,4,5;
        power         | power |        power         | power | power 
----------------------+-------+----------------------+-------+-------
 0.010000000298023226 | 10000 | 0.010000000298023226 | 10000 |    25
 0.040000001192092904 | 10000 | 0.040000001192092904 | 10000 |    25
  0.09000000715255752 | 10000 |  0.09000000715255752 | 10000 |    25
    1.210000052452088 | 40000 |    1.210000052452088 | 40000 |    25
    4.840000209808352 | 40000 |    4.840000209808352 | 40000 |    25
   10.889999685287478 | 40000 |   10.889999685287478 | 40000 |    25
(6 rows)

-- select power as nest function with agg (pushdown, explain)
--Testcase 762:
EXPLAIN VERBOSE
SELECT sum(value3),power(sum(value3), 2) FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), power((sum(value3)), '2'::double precision)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select power as nest function with agg (pushdown, result)
--Testcase 763:
SELECT sum(value3),power(sum(value3), 2) FROM s3;
        sum         |       power       
--------------------+-------------------
 -7.200000040233135 | 51.84000057935715
(1 row)

-- select power as nest with log2 (pushdown, explain)
--Testcase 764:
EXPLAIN VERBOSE
SELECT value1, power(log2(value1), 2),power(log2(1/value1), 2) FROM s3 ORDER BY 1,2,3;
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (power(log2(value1), '2'::double precision)), (power(log2(('1'::double precision / value1)), '2'::double precision))
   Sort Key: s3.value1, (power(log2(s3.value1), '2'::double precision)), (power(log2(('1'::double precision / s3.value1)), '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (power(log2(value1), '2'::double precision)), (power(log2(('1'::double precision / value1)), '2'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, power(log2(`value1`), 2), power(log2((1 / `value1`)), 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, power(public.log2(value1), 2::double precision), power(public.log2((1::double precision / value1)), 2::double precision) FROM public.s31mysql
(12 rows)

-- select power as nest with log2 (pushdown, result)
--Testcase 765:
SELECT value1, power(log2(value1), 2),power(log2(1/value1), 2) FROM s3 ORDER BY 1,2,3;
 value1 |        power         |       power        
--------+----------------------+--------------------
    0.1 |   11.035206124773483 | 11.035206124773483
    0.2 |     5.39134997799442 |   5.39134997799442
    0.3 |   3.0170492761652037 | 3.0170492761652046
    1.1 | 0.018907227643002712 | 0.0189072276430027
    2.2 |   1.2939143376820175 | 1.2939143376820175
    3.3 |    2.966889133642876 | 2.9668891336428755
(6 rows)

-- select power with non pushdown func and explicit constant (explain)
--Testcase 766:
EXPLAIN VERBOSE
SELECT power(value3, 2), pi(), 4.1 FROM s3 ORDER BY 1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (power(value3, '2'::double precision)), '3.141592653589793'::double precision, 4.1
   Sort Key: (power(s3.value3, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (power(value3, '2'::double precision)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT power(`value3`, 2), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT power(value3, 2::double precision), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select power with non pushdown func and explicit constant (result)
--Testcase 767:
SELECT power(value3, 2), pi(), 4.1 FROM s3 ORDER BY 1;
        power         |        pi         | ?column? 
----------------------+-------------------+----------
 0.010000000298023226 | 3.141592653589793 |      4.1
 0.040000001192092904 | 3.141592653589793 |      4.1
  0.09000000715255752 | 3.141592653589793 |      4.1
    1.210000052452088 | 3.141592653589793 |      4.1
    4.840000209808352 | 3.141592653589793 |      4.1
   10.889999685287478 | 3.141592653589793 |      4.1
(6 rows)

-- select power with order by (explain)
--Testcase 768:
EXPLAIN VERBOSE
SELECT value1, power(1-value3, 2) FROM s3 ORDER BY power(1-value3, 2);
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (power(('1'::double precision - value3), '2'::double precision))
   Sort Key: (power(('1'::double precision - s3.value3), '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (power(('1'::double precision - value3), '2'::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, power((1 - `value3`), 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, power((1::double precision - value3), 2::double precision) FROM public.s31mysql
(12 rows)

-- select power with order by (result)
--Testcase 769:
SELECT value1, power(1-value3, 2) FROM s3 ORDER BY power(1-value3, 2);
 value1 |       power        
--------+--------------------
    0.1 | 1.2100000032782554
    0.2 | 1.4400000071525574
    0.3 | 1.6900000309944154
    1.1 |  4.410000100135804
    2.2 | 10.240000305175784
    3.3 | 18.489999589920046
(6 rows)

-- select power with order by index (result)
--Testcase 770:
SELECT value1, power(1-value3, 2) FROM s3 ORDER BY 2,1;
 value1 |       power        
--------+--------------------
    0.1 | 1.2100000032782554
    0.2 | 1.4400000071525574
    0.3 | 1.6900000309944154
    1.1 |  4.410000100135804
    2.2 | 10.240000305175784
    3.3 | 18.489999589920046
(6 rows)

-- select power with order by index (result)
--Testcase 771:
SELECT value1, power(1-value3, 2) FROM s3 ORDER BY 1,2;
 value1 |       power        
--------+--------------------
    0.1 | 1.2100000032782554
    0.2 | 1.4400000071525574
    0.3 | 1.6900000309944154
    1.1 |  4.410000100135804
    2.2 | 10.240000305175784
    3.3 | 18.489999589920046
(6 rows)

-- select power with group by (explain)
--Testcase 772:
EXPLAIN VERBOSE
SELECT count(value1), power(1-value3, 2) FROM s3 GROUP BY power(1-value3, 2) ORDER BY 2,1;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (power(('1'::double precision - value3), '2'::double precision))
   Sort Key: (power(('1'::double precision - s3.value3), '2'::double precision)), (count(s3.value1))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (power(('1'::double precision - value3), '2'::double precision))
         Group Key: (power(('1'::double precision - s3.value3), '2'::double precision))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (power(('1'::double precision - value3), '2'::double precision)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT power((1 - `value3`), 2), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT power((1::double precision - value3), 2::double precision), value1 FROM public.s31mysql
(15 rows)

-- select power with group by (result)
--Testcase 773:
SELECT count(value1), power(1-value3, 2) FROM s3 GROUP BY power(1-value3, 2) ORDER BY 2,1;
 count |       power        
-------+--------------------
     1 | 1.2100000032782554
     1 | 1.4400000071525574
     1 | 1.6900000309944154
     1 |  4.410000100135804
     1 | 10.240000305175784
     1 | 18.489999589920046
(6 rows)

-- select power with group by index (result)
--Testcase 774:
SELECT value1, power(1-value3, 2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |       power        
--------+--------------------
    0.1 | 1.2100000032782554
    0.2 | 1.4400000071525574
    0.3 | 1.6900000309944154
    1.1 |  4.410000100135804
    2.2 | 10.240000305175784
    3.3 | 18.489999589920046
(6 rows)

-- select power with group by index (result)
--Testcase 775:
SELECT value1, power(1-value3, 2) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |       power        
--------+--------------------
    0.1 | 1.2100000032782554
    0.2 | 1.4400000071525574
    0.3 | 1.6900000309944154
    1.1 |  4.410000100135804
    2.2 | 10.240000305175784
    3.3 | 18.489999589920046
(6 rows)

-- select power with group by having (explain)
--Testcase 776:
EXPLAIN VERBOSE
SELECT count(value1), power(1-value3, 2) FROM s3 GROUP BY power(1-value3, 2) HAVING power(avg(value1), 2) > 0 ORDER BY 1,2;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: (count(value1)), (power(('1'::double precision - value3), '2'::double precision))
   Sort Key: (count(s3.value1)), (power(('1'::double precision - s3.value3), '2'::double precision))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: count(value1), (power(('1'::double precision - value3), '2'::double precision))
         Group Key: (power(('1'::double precision - s3.value3), '2'::double precision))
         Filter: (power(avg(s3.value1), '2'::double precision) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (power(('1'::double precision - value3), '2'::double precision)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT power((1 - `value3`), 2), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT power((1::double precision - value3), 2::double precision), value1 FROM public.s31mysql
(16 rows)

-- select power with group by having (result)
--Testcase 777:
SELECT count(value1), power(1-value3, 2) FROM s3 GROUP BY power(1-value3, 2) HAVING power(avg(value1), 2) > 0 ORDER BY 1,2;
 count |       power        
-------+--------------------
     1 | 1.2100000032782554
     1 | 1.4400000071525574
     1 | 1.6900000309944154
     1 |  4.410000100135804
     1 | 10.240000305175784
     1 | 18.489999589920046
(6 rows)

-- select power with group by index having (result)
--Testcase 778:
SELECT value1, power(1-value3, 2) FROM s3 GROUP BY 2,1 HAVING power(1-value3, 2) > 0 ORDER BY 1,2;
 value1 |       power        
--------+--------------------
    0.1 | 1.2100000032782554
    0.2 | 1.4400000071525574
    0.3 | 1.6900000309944154
    1.1 |  4.410000100135804
    2.2 | 10.240000305175784
    3.3 | 18.489999589920046
(6 rows)

-- select power with group by index having (result)
--Testcase 779:
SELECT value1, power(1-value3, 2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |       power        
--------+--------------------
    1.1 |  4.410000100135804
    2.2 | 10.240000305175784
    3.3 | 18.489999589920046
(3 rows)

-- select power and as
--Testcase 780:
SELECT power(value3, 2) as power1 FROM s3 ORDER BY 1;
        power1        
----------------------
 0.010000000298023226
 0.040000001192092904
  0.09000000715255752
    1.210000052452088
    4.840000209808352
   10.889999685287478
(6 rows)

-- select radians (builtin function, explain)
--Testcase 781:
EXPLAIN VERBOSE
SELECT radians(value1), radians(value2), radians(value3), radians(value4), radians(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=961.88..978.94 rows=6826 width=40)
   Output: (radians(value1)), (radians((value2)::double precision)), (radians(value3)), (radians((value4)::double precision)), '0.008726646259971648'::double precision
   Sort Key: (radians(s3.value1)), (radians((s3.value2)::double precision)), (radians(s3.value3)), (radians((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=40)
         Output: (radians(value1)), (radians((value2)::double precision)), (radians(value3)), (radians((value4)::double precision)), '0.008726646259971648'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT radians(`value1`), radians(`value2`), radians(`value3`), radians(`value4`), 0.008726646259971648 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT radians(value1), radians(value2), radians(value3), radians(value4), 0.008726646259971648::double precision FROM public.s31mysql
(12 rows)

-- select radians (builtin function, result)
--Testcase 782:
SELECT radians(value1), radians(value2), radians(value3), radians(value4), radians(0.5) FROM s3 ORDER BY 1,2,3,4,5;
        radians        |      radians       |        radians         |       radians       |       radians        
-----------------------+--------------------+------------------------+---------------------+----------------------
 0.0017453292780017621 | 1.7453292519943295 | -0.0017453292780017621 | -1.7453292519943295 | 0.008726646259971648
 0.0034906585560035243 | 1.7453292519943295 | -0.0034906585560035243 | -1.7453292519943295 | 0.008726646259971648
  0.005235987964042448 | 1.7453292519943295 |  -0.005235987964042448 | -1.7453292519943295 | 0.008726646259971648
  0.019198622188056545 |  3.490658503988659 |  -0.019198622188056545 |  -3.490658503988659 | 0.008726646259971648
   0.03839724437611309 |  3.490658503988659 |   -0.03839724437611309 |  -3.490658503988659 | 0.008726646259971648
   0.05759586448357504 |  3.490658503988659 |   -0.05759586448357504 |  -3.490658503988659 | 0.008726646259971648
(6 rows)

-- select radians (builtin function, not pushdown constraints, explain)
--Testcase 783:
EXPLAIN VERBOSE
SELECT radians(value1), radians(value2), radians(value3), radians(value4), radians(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=40)
   Output: (radians(value1)), (radians((value2)::double precision)), (radians(value3)), (radians((value4)::double precision)), '0.008726646259971648'::double precision
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT radians(`value1`), radians(`value2`), radians(`value3`), radians(`value4`), 0.008726646259971648, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT radians(value1), radians(value2), radians(value3), radians(value4), 0.008726646259971648::double precision, value2 FROM public.s31mysql
(8 rows)

-- select radians (builtin function, not pushdown constraints, result)
--Testcase 784:
SELECT radians(value1), radians(value2), radians(value3), radians(value4), radians(0.5) FROM s3 WHERE to_hex(value2) = '64';
        radians        |      radians       |        radians         |       radians       |       radians        
-----------------------+--------------------+------------------------+---------------------+----------------------
 0.0017453292780017621 | 1.7453292519943295 | -0.0017453292780017621 | -1.7453292519943295 | 0.008726646259971648
 0.0034906585560035243 | 1.7453292519943295 | -0.0034906585560035243 | -1.7453292519943295 | 0.008726646259971648
  0.005235987964042448 | 1.7453292519943295 |  -0.005235987964042448 | -1.7453292519943295 | 0.008726646259971648
(3 rows)

-- select radians (builtin function, pushdown constraints, explain)
--Testcase 785:
EXPLAIN VERBOSE
SELECT radians(value1), radians(value2), radians(value3), radians(value4), radians(0.5) FROM s3 WHERE value2 != 200;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=40)
   Output: (radians(value1)), (radians((value2)::double precision)), (radians(value3)), (radians((value4)::double precision)), '0.008726646259971648'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT radians(`value1`), radians(`value2`), radians(`value3`), radians(`value4`), 0.008726646259971648 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT radians(value1), radians(value2), radians(value3), radians(value4), 0.008726646259971648::double precision FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select radians (builtin function, pushdown constraints, result)
--Testcase 786:
SELECT radians(value1), radians(value2), radians(value3), radians(value4), radians(0.5) FROM s3 WHERE value2 != 200;
        radians        |      radians       |        radians         |       radians       |       radians        
-----------------------+--------------------+------------------------+---------------------+----------------------
 0.0017453292780017621 | 1.7453292519943295 | -0.0017453292780017621 | -1.7453292519943295 | 0.008726646259971648
 0.0034906585560035243 | 1.7453292519943295 | -0.0034906585560035243 | -1.7453292519943295 | 0.008726646259971648
  0.005235987964042448 | 1.7453292519943295 |  -0.005235987964042448 | -1.7453292519943295 | 0.008726646259971648
(3 rows)

-- select radians (builtin function, radians in constraints, explain)
--Testcase 787:
EXPLAIN VERBOSE
SELECT radians(value1), radians(value2), radians(value3), radians(value4), radians(0.5) FROM s3 WHERE radians(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=992.41..1009.39 rows=6792 width=40)
   Output: (radians(value1)), (radians((value2)::double precision)), (radians(value3)), (radians((value4)::double precision)), '0.008726646259971648'::double precision
   Sort Key: (radians(s3.value1)), (radians((s3.value2)::double precision)), (radians(s3.value3)), (radians((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..560.11 rows=6792 width=40)
         Output: (radians(value1)), (radians((value2)::double precision)), (radians(value3)), (radians((value4)::double precision)), '0.008726646259971648'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT radians(`value1`), radians(`value2`), radians(`value3`), radians(`value4`), 0.008726646259971648 FROM `test`.`s32` WHERE ((radians(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT radians(value1), radians(value2), radians(value3), radians(value4), 0.008726646259971648::double precision FROM public.s31mysql WHERE ((radians(value1) <> 1::double precision))
(12 rows)

-- select radians (builtin function, radians in constraints, result)
--Testcase 788:
SELECT radians(value1), radians(value2), radians(value3), radians(value4), radians(0.5) FROM s3 WHERE radians(value1) != 1 ORDER BY 1,2,3,4,5;
        radians        |      radians       |        radians         |       radians       |       radians        
-----------------------+--------------------+------------------------+---------------------+----------------------
 0.0017453292780017621 | 1.7453292519943295 | -0.0017453292780017621 | -1.7453292519943295 | 0.008726646259971648
 0.0034906585560035243 | 1.7453292519943295 | -0.0034906585560035243 | -1.7453292519943295 | 0.008726646259971648
  0.005235987964042448 | 1.7453292519943295 |  -0.005235987964042448 | -1.7453292519943295 | 0.008726646259971648
  0.019198622188056545 |  3.490658503988659 |  -0.019198622188056545 |  -3.490658503988659 | 0.008726646259971648
   0.03839724437611309 |  3.490658503988659 |   -0.03839724437611309 |  -3.490658503988659 | 0.008726646259971648
   0.05759586448357504 |  3.490658503988659 |   -0.05759586448357504 |  -3.490658503988659 | 0.008726646259971648
(6 rows)

-- select radians (builtin function, radians in constraints, explain)
--Testcase 789:
EXPLAIN VERBOSE
SELECT radians(value1), radians(value2), radians(value3), radians(value4), radians(0.5) FROM s3 WHERE radians(0.5) < value1 ORDER BY 1,2,3,4,5;
                                                                                                       QUERY PLAN                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=511.90..517.59 rows=2276 width=40)
   Output: (radians(value1)), (radians((value2)::double precision)), (radians(value3)), (radians((value4)::double precision)), '0.008726646259971648'::double precision
   Sort Key: (radians(s3.value1)), (radians((s3.value2)::double precision)), (radians(s3.value3)), (radians((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=40)
         Output: (radians(value1)), (radians((value2)::double precision)), (radians(value3)), (radians((value4)::double precision)), '0.008726646259971648'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT radians(`value1`), radians(`value2`), radians(`value3`), radians(`value4`), 0.008726646259971648 FROM `test`.`s32` WHERE ((0.008726646259971648 < `value1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT radians(value1), radians(value2), radians(value3), radians(value4), 0.008726646259971648::double precision FROM public.s31mysql WHERE ((0.008726646259971648::double precision < value1))
(12 rows)

-- select radians (builtin function, radians in constraints, result)
--Testcase 790:
SELECT radians(value1), radians(value2), radians(value3), radians(value4), radians(0.5) FROM s3 WHERE radians(0.5) < value1 ORDER BY 1,2,3,4,5;
        radians        |      radians       |        radians         |       radians       |       radians        
-----------------------+--------------------+------------------------+---------------------+----------------------
 0.0017453292780017621 | 1.7453292519943295 | -0.0017453292780017621 | -1.7453292519943295 | 0.008726646259971648
 0.0034906585560035243 | 1.7453292519943295 | -0.0034906585560035243 | -1.7453292519943295 | 0.008726646259971648
  0.005235987964042448 | 1.7453292519943295 |  -0.005235987964042448 | -1.7453292519943295 | 0.008726646259971648
  0.019198622188056545 |  3.490658503988659 |  -0.019198622188056545 |  -3.490658503988659 | 0.008726646259971648
   0.03839724437611309 |  3.490658503988659 |   -0.03839724437611309 |  -3.490658503988659 | 0.008726646259971648
   0.05759586448357504 |  3.490658503988659 |   -0.05759586448357504 |  -3.490658503988659 | 0.008726646259971648
(6 rows)

-- select radians as nest function with agg (pushdown, explain)
--Testcase 791:
EXPLAIN VERBOSE
SELECT sum(value3),radians(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), radians((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select radians as nest function with agg (pushdown, result)
--Testcase 792:
SELECT sum(value3),radians(sum(value3)) FROM s3;
        sum         |       radians       
--------------------+---------------------
 -7.200000040233135 | -0.1256637068457924
(1 row)

-- select radians as nest with log2 (pushdown, explain)
--Testcase 793:
EXPLAIN VERBOSE
SELECT radians(log2(value1)),radians(log2(1/value1)) FROM s3 ORDER BY 1,2;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=16)
   Output: (radians(log2(value1))), (radians(log2(('1'::double precision / value1))))
   Sort Key: (radians(log2(s3.value1))), (radians(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=16)
         Output: (radians(log2(value1))), (radians(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT radians(log2(`value1`)), radians(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT radians(public.log2(value1)), radians(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select radians as nest with log2 (pushdown, result)
--Testcase 794:
SELECT radians(log2(value1)),radians(log2(1/value1)) FROM s3 ORDER BY 1,2;
        radians        |        radians        
-----------------------+-----------------------
 -0.057978582395079144 |  0.057978582395079144
  -0.04052528987513585 |   0.04052528987513585
 -0.030315767611505423 |  0.030315767611505427
  0.002399889768287581 |  -0.00239988976828758
  0.019853182288230874 | -0.019853182288230874
  0.030062703016919757 |  -0.03006270301691975
(6 rows)

-- select radians with non pushdown func and explicit constant (explain)
--Testcase 795:
EXPLAIN VERBOSE
SELECT radians(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=48)
   Output: (radians(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (radians(s3.value3)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
         Output: (radians(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT radians(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT radians(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select radians with non pushdown func and explicit constant (result)
--Testcase 796:
SELECT radians(value3), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
        radians         |        pi         | ?column? 
------------------------+-------------------+----------
 -0.0017453292780017621 | 3.141592653589793 |      4.1
 -0.0034906585560035243 | 3.141592653589793 |      4.1
  -0.005235987964042448 | 3.141592653589793 |      4.1
  -0.019198622188056545 | 3.141592653589793 |      4.1
   -0.03839724437611309 | 3.141592653589793 |      4.1
   -0.05759586448357504 | 3.141592653589793 |      4.1
(6 rows)

-- select radians with order by (explain)
--Testcase 797:
EXPLAIN VERBOSE
SELECT value1, radians(1-value3) FROM s3 ORDER BY radians(1-value3);
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (radians(('1'::double precision - value3)))
   Sort Key: (radians(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (radians(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, radians((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, radians((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select radians with order by (result)
--Testcase 798:
SELECT value1, radians(1-value3) FROM s3 ORDER BY radians(1-value3);
 value1 |       radians        
--------+----------------------
    0.1 | 0.019198621797945056
    0.2 |  0.02094395107594682
    0.3 | 0.022689280483985743
    1.1 |  0.03665191470799984
    2.2 |  0.05585053689605639
    3.3 |  0.07504915700351833
(6 rows)

-- select radians with order by index (result)
--Testcase 799:
SELECT value1, radians(1-value3) FROM s3 ORDER BY 2,1;
 value1 |       radians        
--------+----------------------
    0.1 | 0.019198621797945056
    0.2 |  0.02094395107594682
    0.3 | 0.022689280483985743
    1.1 |  0.03665191470799984
    2.2 |  0.05585053689605639
    3.3 |  0.07504915700351833
(6 rows)

-- select radians with order by index (result)
--Testcase 800:
SELECT value1, radians(1-value3) FROM s3 ORDER BY 1,2;
 value1 |       radians        
--------+----------------------
    0.1 | 0.019198621797945056
    0.2 |  0.02094395107594682
    0.3 | 0.022689280483985743
    1.1 |  0.03665191470799984
    2.2 |  0.05585053689605639
    3.3 |  0.07504915700351833
(6 rows)

-- select radians with group by (explain)
--Testcase 801:
EXPLAIN VERBOSE
SELECT count(value1), radians(1-value3) FROM s3 GROUP BY radians(1-value3) ORDER BY 1,2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (radians(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (radians(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (radians(('1'::double precision - value3)))
         Group Key: (radians(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (radians(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT radians((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT radians((1::double precision - value3)), value1 FROM public.s31mysql
(15 rows)

-- select radians with group by (result)
--Testcase 802:
SELECT count(value1), radians(1-value3) FROM s3 GROUP BY radians(1-value3) ORDER BY 1,2;
 count |       radians        
-------+----------------------
     1 | 0.019198621797945056
     1 |  0.02094395107594682
     1 | 0.022689280483985743
     1 |  0.03665191470799984
     1 |  0.05585053689605639
     1 |  0.07504915700351833
(6 rows)

-- select radians with group by index (result)
--Testcase 803:
SELECT value1, radians(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |       radians        
--------+----------------------
    0.1 | 0.019198621797945056
    0.2 |  0.02094395107594682
    0.3 | 0.022689280483985743
    1.1 |  0.03665191470799984
    2.2 |  0.05585053689605639
    3.3 |  0.07504915700351833
(6 rows)

-- select radians with group by index (result)
--Testcase 804:
SELECT value1, radians(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |       radians        
--------+----------------------
    0.1 | 0.019198621797945056
    0.2 |  0.02094395107594682
    0.3 | 0.022689280483985743
    1.1 |  0.03665191470799984
    2.2 |  0.05585053689605639
    3.3 |  0.07504915700351833
(6 rows)

-- select radians with group by having (explain)
--Testcase 805:
EXPLAIN VERBOSE
SELECT count(value1), radians(1-value3) FROM s3 GROUP BY radians(1-value3) HAVING radians(avg(value1)) > 0 ORDER BY 1,2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: (count(value1)), (radians(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (radians(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: count(value1), (radians(('1'::double precision - value3)))
         Group Key: (radians(('1'::double precision - s3.value3)))
         Filter: (radians(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (radians(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT radians((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT radians((1::double precision - value3)), value1 FROM public.s31mysql
(16 rows)

-- select radians with group by having (result)
--Testcase 806:
SELECT count(value1), radians(1-value3) FROM s3 GROUP BY radians(1-value3) HAVING radians(avg(value1)) > 0 ORDER BY 1,2;
 count |       radians        
-------+----------------------
     1 | 0.019198621797945056
     1 |  0.02094395107594682
     1 | 0.022689280483985743
     1 |  0.03665191470799984
     1 |  0.05585053689605639
     1 |  0.07504915700351833
(6 rows)

-- select radians with group by index having (result)
--Testcase 807:
SELECT value1, radians(1-value3) FROM s3 GROUP BY 2,1 HAVING radians(1-value3) > 0 ORDER BY 1,2;
 value1 |       radians        
--------+----------------------
    0.1 | 0.019198621797945056
    0.2 |  0.02094395107594682
    0.3 | 0.022689280483985743
    1.1 |  0.03665191470799984
    2.2 |  0.05585053689605639
    3.3 |  0.07504915700351833
(6 rows)

-- select radians with group by index having (result)
--Testcase 808:
SELECT value1, radians(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |       radians       
--------+---------------------
    1.1 | 0.03665191470799984
    2.2 | 0.05585053689605639
    3.3 | 0.07504915700351833
(3 rows)

-- select radians and as
--Testcase 809:
SELECT radians(value3) as radians1 FROM s3 ORDER BY 1 DESC;
        radians1        
------------------------
 -0.0017453292780017621
 -0.0034906585560035243
  -0.005235987964042448
  -0.019198622188056545
   -0.03839724437611309
   -0.05759586448357504
(6 rows)

-- select sign (builtin function, explain)
--Testcase 810:
EXPLAIN VERBOSE
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM s3;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=64)
   Output: (sign(value1)), (sign((value2)::double precision)), (sign(value3)), (sign((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sign(`value1`), sign(`value2`), sign(`value3`), sign(`value4`), 1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sign(value1), sign(value2), sign(value3), sign(value4), 1::numeric FROM public.s31mysql
(7 rows)

-- select sign (builtin function, result)
--Testcase 811:
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM s3;
 sign | sign | sign | sign | sign 
------+------+------+------+------
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
(6 rows)

-- select sign (builtin function, not pushdown constraints, explain)
--Testcase 812:
EXPLAIN VERBOSE
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=64)
   Output: (sign(value1)), (sign((value2)::double precision)), (sign(value3)), (sign((value4)::double precision)), '1'::numeric
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sign(`value1`), sign(`value2`), sign(`value3`), sign(`value4`), 1, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sign(value1), sign(value2), sign(value3), sign(value4), 1::numeric, value2 FROM public.s31mysql
(8 rows)

-- select sign (builtin function, not pushdown constraints, result)
--Testcase 813:
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM s3 WHERE to_hex(value2) = '64';
 sign | sign | sign | sign | sign 
------+------+------+------+------
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
(3 rows)

-- select sign (builtin function, pushdown constraints, explain)
--Testcase 814:
EXPLAIN VERBOSE
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM s3 WHERE value2 != 200;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=64)
   Output: (sign(value1)), (sign((value2)::double precision)), (sign(value3)), (sign((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sign(`value1`), sign(`value2`), sign(`value3`), sign(`value4`), 1 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sign(value1), sign(value2), sign(value3), sign(value4), 1::numeric FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select sign (builtin function, pushdown constraints, result)
--Testcase 815:
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM s3 WHERE value2 != 200;
 sign | sign | sign | sign | sign 
------+------+------+------+------
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
(3 rows)

-- select sign (builtin function, sign in constraints, explain)
--Testcase 816:
EXPLAIN VERBOSE
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM s3 WHERE sign(value1) != -1;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..560.11 rows=6792 width=64)
   Output: (sign(value1)), (sign((value2)::double precision)), (sign(value3)), (sign((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sign(`value1`), sign(`value2`), sign(`value3`), sign(`value4`), 1 FROM `test`.`s32` WHERE ((sign(`value1`) <> (-1)))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sign(value1), sign(value2), sign(value3), sign(value4), 1::numeric FROM public.s31mysql WHERE ((sign(value1) <> (-1)::double precision))
(7 rows)

-- select sign (builtin function, sign in constraints, result)
--Testcase 817:
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM s3 WHERE sign(value1) != -1;
 sign | sign | sign | sign | sign 
------+------+------+------+------
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
(6 rows)

-- select sign (builtin function, sign in constraints, explain)
--Testcase 818:
EXPLAIN VERBOSE
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM s3 WHERE sign(0.5) > value1;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=64)
   Output: (sign(value1)), (sign((value2)::double precision)), (sign(value3)), (sign((value4)::double precision)), '1'::numeric
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sign(`value1`), sign(`value2`), sign(`value3`), sign(`value4`), 1 FROM `test`.`s32` WHERE ((1 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sign(value1), sign(value2), sign(value3), sign(value4), 1::numeric FROM public.s31mysql WHERE ((1::double precision > value1))
(7 rows)

-- select sign (builtin function, sign in constraints, result)
--Testcase 819:
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM s3 WHERE sign(0.5) > value1;
 sign | sign | sign | sign | sign 
------+------+------+------+------
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
(3 rows)

-- select sign as nest function with agg (pushdown, explain)
--Testcase 820:
EXPLAIN VERBOSE
SELECT sum(value3),sign(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), sign((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select sign as nest function with agg (pushdown, result)
--Testcase 821:
SELECT sum(value3),sign(sum(value3)) FROM s3;
        sum         | sign 
--------------------+------
 -7.200000040233135 |   -1
(1 row)

-- select sign as nest with log2 (pushdown, explain)
--Testcase 822:
EXPLAIN VERBOSE
SELECT sign(log2(value1)),sign(log2(1/value1)) FROM s3 ORDER BY 1,2;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=16)
   Output: (sign(log2(value1))), (sign(log2(('1'::double precision / value1))))
   Sort Key: (sign(log2(s3.value1))), (sign(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=16)
         Output: (sign(log2(value1))), (sign(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT sign(log2(`value1`)), sign(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT sign(public.log2(value1)), sign(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select sign as nest with log2 (pushdown, result)
--Testcase 823:
SELECT sign(log2(value1)),sign(log2(1/value1)) FROM s3 ORDER BY 1,2;
 sign | sign 
------+------
   -1 |    1
   -1 |    1
   -1 |    1
    1 |   -1
    1 |   -1
    1 |   -1
(6 rows)

-- select sign with non pushdown func and explicit constant (explain)
--Testcase 824:
EXPLAIN VERBOSE
SELECT sign(value3), pi(), 4.1 FROM s3;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=48)
   Output: (sign(value3)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sign(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sign(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select sign with non pushdown func and explicit constant (result)
--Testcase 825:
SELECT sign(value3), pi(), 4.1 FROM s3;
 sign |        pi         | ?column? 
------+-------------------+----------
   -1 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
(6 rows)

-- select sign with order by (explain)
--Testcase 826:
EXPLAIN VERBOSE
SELECT value1, sign(1-value3) FROM s3 ORDER BY value1, sign(1-value3);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (sign(('1'::double precision - value3)))
   Sort Key: s3.value1, (sign(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (sign(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, sign((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, sign((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select sign with order by (result)
--Testcase 827:
SELECT value1, sign(1-value3) FROM s3 ORDER BY value1, sign(1-value3);
 value1 | sign 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |    1
    2.2 |    1
    3.3 |    1
(6 rows)

-- select sign with order by index (result)
--Testcase 828:
SELECT value1, sign(1-value3) FROM s3 ORDER BY 2,1;
 value1 | sign 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |    1
    2.2 |    1
    3.3 |    1
(6 rows)

-- select sign with order by index (result)
--Testcase 829:
SELECT value1, sign(1-value3) FROM s3 ORDER BY 1,2;
 value1 | sign 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |    1
    2.2 |    1
    3.3 |    1
(6 rows)

-- select sign with group by (explain)
--Testcase 830:
EXPLAIN VERBOSE
SELECT count(value1), sign(1-value3) FROM s3 GROUP BY sign(1-value3);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 HashAggregate  (cost=493.04..496.04 rows=200 width=16)
   Output: count(value1), (sign(('1'::double precision - value3)))
   Group Key: (sign(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: (sign(('1'::double precision - value3))), value1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT sign((1 - `value3`)), `value1` FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT sign((1::double precision - value3)), value1 FROM public.s31mysql
(10 rows)

-- select sign with group by (result)
--Testcase 831:
SELECT count(value1), sign(1-value3) FROM s3 GROUP BY sign(1-value3);
 count | sign 
-------+------
     6 |    1
(1 row)

-- select sign with group by index (result)
--Testcase 832:
SELECT value1, sign(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | sign 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |    1
    2.2 |    1
    3.3 |    1
(6 rows)

-- select sign with group by index (result)
--Testcase 833:
SELECT value1, sign(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 | sign 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |    1
    2.2 |    1
    3.3 |    1
(6 rows)

-- select sign with group by having (explain)
--Testcase 834:
EXPLAIN VERBOSE
SELECT count(value1), sign(1-value3) FROM s3 GROUP BY sign(1-value3) HAVING sign(avg(value1)) > 0;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 HashAggregate  (cost=510.10..513.94 rows=67 width=16)
   Output: count(value1), (sign(('1'::double precision - value3)))
   Group Key: (sign(('1'::double precision - s3.value3)))
   Filter: (sign(avg(s3.value1)) > '0'::double precision)
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: (sign(('1'::double precision - value3))), value1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT sign((1 - `value3`)), `value1` FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT sign((1::double precision - value3)), value1 FROM public.s31mysql
(11 rows)

-- select sign with group by having (result)
--Testcase 835:
SELECT count(value1), sign(1-value3) FROM s3 GROUP BY sign(1-value3) HAVING sign(avg(value1)) > 0;
 count | sign 
-------+------
     6 |    1
(1 row)

-- select sign with group by index having (result)
--Testcase 836:
SELECT value1, sign(1-value3) FROM s3 GROUP BY 2,1 HAVING sign(1-value3) > 0 ORDER BY 1,2;
 value1 | sign 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |    1
    2.2 |    1
    3.3 |    1
(6 rows)

-- select sign with group by index having (result)
--Testcase 837:
SELECT value1, sign(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | sign 
--------+------
    1.1 |    1
    2.2 |    1
    3.3 |    1
(3 rows)

-- select sign and as
--Testcase 838:
SELECT sign(value3) as sign1 FROM s3;
 sign1 
-------
    -1
    -1
    -1
    -1
    -1
    -1
(6 rows)

-- select sin (builtin function, explain)
--Testcase 839:
EXPLAIN VERBOSE
SELECT value1, sin(value2), sin(value3), sin(value4), sin(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=944.81..961.88 rows=6826 width=40)
   Output: value1, (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision)), '0.479425538604203'::double precision
   Sort Key: s3.value1, (sin((s3.value2)::double precision)), (sin(s3.value3)), (sin((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..510.10 rows=6826 width=40)
         Output: value1, (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision)), '0.479425538604203'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, sin(`value2`), sin(`value3`), sin(`value4`), 0.479425538604203 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, sin(value2), sin(value3), sin(value4), 0.479425538604203::double precision FROM public.s31mysql
(12 rows)

-- select sin (builtin function, result)
--Testcase 840:
SELECT value1, sin(value2), sin(value3), sin(value4), sin(0.5) FROM s3 ORDER BY 1,2,3,4,5;
 value1 |         sin         |         sin          |        sin         |        sin        
--------+---------------------+----------------------+--------------------+-------------------
    0.1 | -0.5063656411097588 |  -0.0998334181294999 | 0.5063656411097588 | 0.479425538604203
    0.2 | -0.5063656411097588 | -0.19866933371588721 | 0.5063656411097588 | 0.479425538604203
    0.3 | -0.5063656411097588 | -0.29552021804983797 | 0.5063656411097588 | 0.479425538604203
    1.1 | -0.8732972972139946 |  -0.8912073708760093 | 0.8732972972139946 | 0.479425538604203
    2.2 | -0.8732972972139946 |  -0.8084963757576692 | 0.8732972972139946 | 0.479425538604203
    3.3 | -0.8732972972139946 |  0.15774564705654348 | 0.8732972972139946 | 0.479425538604203
(6 rows)

-- select sin (builtin function, not pushdown constraints, explain)
--Testcase 841:
EXPLAIN VERBOSE
SELECT sin(value1), sin(value2), sin(value3), sin(value4), sin(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=40)
   Output: (sin(value1)), (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision)), '0.479425538604203'::double precision
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sin(`value1`), sin(`value2`), sin(`value3`), sin(`value4`), 0.479425538604203, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sin(value1), sin(value2), sin(value3), sin(value4), 0.479425538604203::double precision, value2 FROM public.s31mysql
(8 rows)

-- select sin (builtin function, not pushdown constraints, result)
--Testcase 842:
SELECT sin(value1), sin(value2), sin(value3), sin(value4), sin(0.5) FROM s3 WHERE to_hex(value2) = '64';
         sin         |         sin         |         sin          |        sin         |        sin        
---------------------+---------------------+----------------------+--------------------+-------------------
  0.0998334181294999 | -0.5063656411097588 |  -0.0998334181294999 | 0.5063656411097588 | 0.479425538604203
 0.19866933371588721 | -0.5063656411097588 | -0.19866933371588721 | 0.5063656411097588 | 0.479425538604203
 0.29552021804983797 | -0.5063656411097588 | -0.29552021804983797 | 0.5063656411097588 | 0.479425538604203
(3 rows)

-- select sin (builtin function, pushdown constraints, explain)
--Testcase 843:
EXPLAIN VERBOSE
SELECT sin(value1), sin(value2), sin(value3), sin(value4), sin(0.5) FROM s3 WHERE value2 != 200;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=40)
   Output: (sin(value1)), (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision)), '0.479425538604203'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sin(`value1`), sin(`value2`), sin(`value3`), sin(`value4`), 0.479425538604203 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sin(value1), sin(value2), sin(value3), sin(value4), 0.479425538604203::double precision FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select sin (builtin function, pushdown constraints, result)
--Testcase 844:
SELECT sin(value1), sin(value2), sin(value3), sin(value4), sin(0.5) FROM s3 WHERE value2 != 200;
         sin         |         sin         |         sin          |        sin         |        sin        
---------------------+---------------------+----------------------+--------------------+-------------------
  0.0998334181294999 | -0.5063656411097588 |  -0.0998334181294999 | 0.5063656411097588 | 0.479425538604203
 0.19866933371588721 | -0.5063656411097588 | -0.19866933371588721 | 0.5063656411097588 | 0.479425538604203
 0.29552021804983797 | -0.5063656411097588 | -0.29552021804983797 | 0.5063656411097588 | 0.479425538604203
(3 rows)

-- select sin (builtin function, sin in constraints, explain)
--Testcase 845:
EXPLAIN VERBOSE
SELECT value1, sin(value2), sin(value3), sin(value4), sin(0.5) FROM s3 WHERE sin(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=975.43..992.41 rows=6792 width=40)
   Output: value1, (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision)), '0.479425538604203'::double precision
   Sort Key: s3.value1, (sin((s3.value2)::double precision)), (sin(s3.value3)), (sin((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..543.13 rows=6792 width=40)
         Output: value1, (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision)), '0.479425538604203'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, sin(`value2`), sin(`value3`), sin(`value4`), 0.479425538604203 FROM `test`.`s32` WHERE ((sin(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, sin(value2), sin(value3), sin(value4), 0.479425538604203::double precision FROM public.s31mysql WHERE ((sin(value1) <> 1::double precision))
(12 rows)

-- select sin (builtin function, sin in constraints, result)
--Testcase 846:
SELECT value1, sin(value2), sin(value3), sin(value4), sin(0.5) FROM s3 WHERE sin(value1) != 1 ORDER BY 1,2,3,4,5;
 value1 |         sin         |         sin          |        sin         |        sin        
--------+---------------------+----------------------+--------------------+-------------------
    0.1 | -0.5063656411097588 |  -0.0998334181294999 | 0.5063656411097588 | 0.479425538604203
    0.2 | -0.5063656411097588 | -0.19866933371588721 | 0.5063656411097588 | 0.479425538604203
    0.3 | -0.5063656411097588 | -0.29552021804983797 | 0.5063656411097588 | 0.479425538604203
    1.1 | -0.8732972972139946 |  -0.8912073708760093 | 0.8732972972139946 | 0.479425538604203
    2.2 | -0.8732972972139946 |  -0.8084963757576692 | 0.8732972972139946 | 0.479425538604203
    3.3 | -0.8732972972139946 |  0.15774564705654348 | 0.8732972972139946 | 0.479425538604203
(6 rows)

-- select sin (builtin function, sin in constraints, explain)
--Testcase 847:
EXPLAIN VERBOSE
SELECT sin(value1), sin(value2), sin(value3), sin(value4), sin(0.5) FROM s3 WHERE sin(0.5) > value1;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=40)
   Output: (sin(value1)), (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision)), '0.479425538604203'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sin(`value1`), sin(`value2`), sin(`value3`), sin(`value4`), 0.479425538604203 FROM `test`.`s32` WHERE ((0.479425538604203 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sin(value1), sin(value2), sin(value3), sin(value4), 0.479425538604203::double precision FROM public.s31mysql WHERE ((0.479425538604203::double precision > value1))
(7 rows)

-- select sin (builtin function, sin in constraints, result)
--Testcase 848:
SELECT sin(value1), sin(value2), sin(value3), sin(value4), sin(0.5) FROM s3 WHERE sin(0.5) > value1;
         sin         |         sin         |         sin          |        sin         |        sin        
---------------------+---------------------+----------------------+--------------------+-------------------
  0.0998334181294999 | -0.5063656411097588 |  -0.0998334181294999 | 0.5063656411097588 | 0.479425538604203
 0.19866933371588721 | -0.5063656411097588 | -0.19866933371588721 | 0.5063656411097588 | 0.479425538604203
 0.29552021804983797 | -0.5063656411097588 | -0.29552021804983797 | 0.5063656411097588 | 0.479425538604203
(3 rows)

-- select sin as nest function with agg (pushdown, explain)
--Testcase 849:
EXPLAIN VERBOSE
SELECT sum(value3),sin(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), sin((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select sin as nest function with agg (pushdown, result)
--Testcase 850:
SELECT sum(value3),sin(sum(value3)) FROM s3;
        sum         |         sin         
--------------------+---------------------
 -7.200000040233135 | -0.7936678883250331
(1 row)

-- select sin as nest with log2 (pushdown, explain)
--Testcase 851:
EXPLAIN VERBOSE
SELECT value1, sin(log2(value1)),sin(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (sin(log2(value1))), (sin(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (sin(log2(s3.value1))), (sin(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (sin(log2(value1))), (sin(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, sin(log2(`value1`)), sin(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, sin(public.log2(value1)), sin(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select sin as nest with log2 (pushdown, result)
--Testcase 852:
SELECT value1, sin(log2(value1)),sin(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |         sin         |         sin          
--------+---------------------+----------------------
    0.1 |  0.1793595640030546 |  -0.1793595640030546
    0.2 | -0.7309169581011538 |   0.7309169581011538
    0.3 | -0.9862256356724203 |   0.9862256356724203
    1.1 | 0.13707066262589662 | -0.13707066262589657
    2.2 |  0.9075881640870257 |  -0.9075881640870257
    3.3 |  0.9885201864067668 |  -0.9885201864067668
(6 rows)

-- select sin with non pushdown func and explicit constant (explain)
--Testcase 853:
EXPLAIN VERBOSE
SELECT value1, sin(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=56)
   Output: value1, (sin(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: s3.value1, (sin(s3.value3))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=56)
         Output: value1, (sin(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, sin(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, sin(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select sin with non pushdown func and explicit constant (result)
--Testcase 854:
SELECT value1, sin(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
 value1 |         sin          |        pi         | ?column? 
--------+----------------------+-------------------+----------
    0.1 |  -0.0998334181294999 | 3.141592653589793 |      4.1
    0.2 | -0.19866933371588721 | 3.141592653589793 |      4.1
    0.3 | -0.29552021804983797 | 3.141592653589793 |      4.1
    1.1 |  -0.8912073708760093 | 3.141592653589793 |      4.1
    2.2 |  -0.8084963757576692 | 3.141592653589793 |      4.1
    3.3 |  0.15774564705654348 | 3.141592653589793 |      4.1
(6 rows)

-- select sin with order by (explain)
--Testcase 855:
EXPLAIN VERBOSE
SELECT value1, sin(1-value3) FROM s3 ORDER BY sin(1-value3);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (sin(('1'::double precision - value3)))
   Sort Key: (sin(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (sin(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, sin((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, sin((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select sin with order by (result)
--Testcase 856:
SELECT value1, sin(1-value3) FROM s3 ORDER BY sin(1-value3);
 value1 |          sin          
--------+-----------------------
    3.3 |   -0.9161659176378601
    2.2 | -0.058374191029984236
    1.1 |    0.8632093546124044
    0.1 |    0.8912073607373462
    0.2 |    0.9320390870471366
    0.3 |    0.9635581886060274
(6 rows)

-- select sin with order by index (result)
--Testcase 857:
SELECT value1, sin(1-value3) FROM s3 ORDER BY 2,1;
 value1 |          sin          
--------+-----------------------
    3.3 |   -0.9161659176378601
    2.2 | -0.058374191029984236
    1.1 |    0.8632093546124044
    0.1 |    0.8912073607373462
    0.2 |    0.9320390870471366
    0.3 |    0.9635581886060274
(6 rows)

-- select sin with order by index (result)
--Testcase 858:
SELECT value1, sin(1-value3) FROM s3 ORDER BY 1,2;
 value1 |          sin          
--------+-----------------------
    0.1 |    0.8912073607373462
    0.2 |    0.9320390870471366
    0.3 |    0.9635581886060274
    1.1 |    0.8632093546124044
    2.2 | -0.058374191029984236
    3.3 |   -0.9161659176378601
(6 rows)

-- select sin with group by (explain)
--Testcase 859:
EXPLAIN VERBOSE
SELECT value1, sin(1-value3) FROM s3 GROUP BY value1, sin(1-value3) ORDER BY 1,2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: value1, (sin(('1'::double precision - value3)))
   Sort Key: s3.value1, (sin(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: value1, (sin(('1'::double precision - value3)))
         Group Key: s3.value1, (sin(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (sin(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, sin((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, sin((1::double precision - value3)) FROM public.s31mysql
(15 rows)

-- select sin with group by (result)
--Testcase 860:
SELECT value1, sin(1-value3) FROM s3 GROUP BY value1, sin(1-value3) ORDER BY 1,2;
 value1 |          sin          
--------+-----------------------
    0.1 |    0.8912073607373462
    0.2 |    0.9320390870471366
    0.3 |    0.9635581886060274
    1.1 |    0.8632093546124044
    2.2 | -0.058374191029984236
    3.3 |   -0.9161659176378601
(6 rows)

-- select sin with group by index (result)
--Testcase 861:
SELECT value1, sin(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |          sin          
--------+-----------------------
    0.1 |    0.8912073607373462
    0.2 |    0.9320390870471366
    0.3 |    0.9635581886060274
    1.1 |    0.8632093546124044
    2.2 | -0.058374191029984236
    3.3 |   -0.9161659176378601
(6 rows)

-- select sin with group by index (result)
--Testcase 862:
SELECT value1, sin(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |          sin          
--------+-----------------------
    0.1 |    0.8912073607373462
    0.2 |    0.9320390870471366
    0.3 |    0.9635581886060274
    1.1 |    0.8632093546124044
    2.2 | -0.058374191029984236
    3.3 |   -0.9161659176378601
(6 rows)

-- select sin with group by having (explain)
--Testcase 863:
EXPLAIN VERBOSE
SELECT value1, sin(1-value3) FROM s3 GROUP BY value1, sin(1-value3) HAVING sin(avg(value1)) > 0 ORDER BY 1,2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: value1, (sin(('1'::double precision - value3)))
   Sort Key: s3.value1, (sin(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: value1, (sin(('1'::double precision - value3)))
         Group Key: s3.value1, (sin(('1'::double precision - s3.value3)))
         Filter: (sin(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (sin(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, sin((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, sin((1::double precision - value3)) FROM public.s31mysql
(16 rows)

-- select sin with group by having (result)
--Testcase 864:
SELECT value1, sin(1-value3) FROM s3 GROUP BY value1, sin(1-value3) HAVING sin(avg(value1)) > 0 ORDER BY 1,2;
 value1 |          sin          
--------+-----------------------
    0.1 |    0.8912073607373462
    0.2 |    0.9320390870471366
    0.3 |    0.9635581886060274
    1.1 |    0.8632093546124044
    2.2 | -0.058374191029984236
(5 rows)

-- select sin with group by index having (result)
--Testcase 865:
SELECT value1, sin(1-value3) FROM s3 GROUP BY 2,1 HAVING sin(1-value3) > 0 ORDER BY 1,2;
 value1 |        sin         
--------+--------------------
    0.1 | 0.8912073607373462
    0.2 | 0.9320390870471366
    0.3 | 0.9635581886060274
    1.1 | 0.8632093546124044
(4 rows)

-- select sin with group by index having (result)
--Testcase 866:
SELECT value1, sin(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |          sin          
--------+-----------------------
    1.1 |    0.8632093546124044
    2.2 | -0.058374191029984236
    3.3 |   -0.9161659176378601
(3 rows)

-- select sin and as
--Testcase 867:
SELECT value1, sin(value3) as sin1 FROM s3 ORDER BY 1,2;
 value1 |         sin1         
--------+----------------------
    0.1 |  -0.0998334181294999
    0.2 | -0.19866933371588721
    0.3 | -0.29552021804983797
    1.1 |  -0.8912073708760093
    2.2 |  -0.8084963757576692
    3.3 |  0.15774564705654348
(6 rows)

-- select sqrt (builtin function, explain)
--Testcase 868:
EXPLAIN VERBOSE
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM s3 ORDER BY 1,2,3;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=910.68..927.75 rows=6826 width=48)
   Output: (sqrt(value1)), (sqrt((value2)::double precision)), 0.70710678118654752
   Sort Key: (sqrt(s3.value1)), (sqrt((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=48)
         Output: (sqrt(value1)), (sqrt((value2)::double precision)), 0.70710678118654752
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT sqrt(`value1`), sqrt(`value2`), 0.70710678118654752 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT sqrt(value1), sqrt(value2), 0.70710678118654752 FROM public.s31mysql
(12 rows)

-- select sqrt (builtin function, result)
--Testcase 869:
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM s3 ORDER BY 1,2,3;
        sqrt        |        sqrt        |        sqrt         
--------------------+--------------------+---------------------
 0.3162277683729184 |                 10 | 0.70710678118654752
 0.4472135988319589 |                 10 | 0.70710678118654752
 0.5477225683874355 |                 10 | 0.70710678118654752
 1.0488088595363112 | 14.142135623730951 | 0.70710678118654752
 1.4832397134933097 | 14.142135623730951 | 0.70710678118654752
 1.8165901993339841 | 14.142135623730951 | 0.70710678118654752
(6 rows)

-- select sqrt (builtin function, not pushdown constraints, explain)
--Testcase 870:
EXPLAIN VERBOSE
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.98 rows=34 width=48)
   Output: (sqrt(value1)), (sqrt((value2)::double precision)), 0.70710678118654752
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sqrt(`value1`), sqrt(`value2`), 0.70710678118654752, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sqrt(value1), sqrt(value2), 0.70710678118654752, value2 FROM public.s31mysql
(8 rows)

-- select sqrt (builtin function, not pushdown constraints, result)
--Testcase 871:
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM s3 WHERE to_hex(value2) = '64';
        sqrt        | sqrt |        sqrt         
--------------------+------+---------------------
 0.3162277683729184 |   10 | 0.70710678118654752
 0.4472135988319589 |   10 | 0.70710678118654752
 0.5477225683874355 |   10 | 0.70710678118654752
(3 rows)

-- select sqrt (builtin function, pushdown constraints, explain)
--Testcase 872:
EXPLAIN VERBOSE
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM s3 WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..492.11 rows=6792 width=48)
   Output: (sqrt(value1)), (sqrt((value2)::double precision)), 0.70710678118654752
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sqrt(`value1`), sqrt(`value2`), 0.70710678118654752 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sqrt(value1), sqrt(value2), 0.70710678118654752 FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select sqrt (builtin function, pushdown constraints, result)
--Testcase 873:
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM s3 WHERE value2 != 200;
        sqrt        | sqrt |        sqrt         
--------------------+------+---------------------
 0.3162277683729184 |   10 | 0.70710678118654752
 0.4472135988319589 |   10 | 0.70710678118654752
 0.5477225683874355 |   10 | 0.70710678118654752
(3 rows)

-- select sqrt (builtin function, sqrt in constraints, explain)
--Testcase 874:
EXPLAIN VERBOSE
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM s3 WHERE sqrt(value1) != 1 ORDER BY 1,2,3;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=941.47..958.45 rows=6792 width=48)
   Output: (sqrt(value1)), (sqrt((value2)::double precision)), 0.70710678118654752
   Sort Key: (sqrt(s3.value1)), (sqrt((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..509.17 rows=6792 width=48)
         Output: (sqrt(value1)), (sqrt((value2)::double precision)), 0.70710678118654752
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT sqrt(`value1`), sqrt(`value2`), 0.70710678118654752 FROM `test`.`s32` WHERE ((sqrt(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT sqrt(value1), sqrt(value2), 0.70710678118654752 FROM public.s31mysql WHERE ((sqrt(value1) <> 1::double precision))
(12 rows)

-- select sqrt (builtin function, sqrt in constraints, result)
--Testcase 875:
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM s3 WHERE sqrt(value1) != 1 ORDER BY 1,2,3;
        sqrt        |        sqrt        |        sqrt         
--------------------+--------------------+---------------------
 0.3162277683729184 |                 10 | 0.70710678118654752
 0.4472135988319589 |                 10 | 0.70710678118654752
 0.5477225683874355 |                 10 | 0.70710678118654752
 1.0488088595363112 | 14.142135623730951 | 0.70710678118654752
 1.4832397134933097 | 14.142135623730951 | 0.70710678118654752
 1.8165901993339841 | 14.142135623730951 | 0.70710678118654752
(6 rows)

-- select sqrt (builtin function, sqrt in constraints, explain)
--Testcase 876:
EXPLAIN VERBOSE
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM s3 WHERE sqrt(0.5) > value1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..367.91 rows=2276 width=48)
   Output: (sqrt(value1)), (sqrt((value2)::double precision)), 0.70710678118654752
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sqrt(`value1`), sqrt(`value2`), 0.70710678118654752 FROM `test`.`s32` WHERE ((0.7071067811865476 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sqrt(value1), sqrt(value2), 0.70710678118654752 FROM public.s31mysql WHERE ((0.7071067811865476::double precision > value1))
(7 rows)

-- select sqrt (builtin function, sqrt in constraints, result)
--Testcase 877:
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM s3 WHERE sqrt(0.5) > value1;
        sqrt        | sqrt |        sqrt         
--------------------+------+---------------------
 0.3162277683729184 |   10 | 0.70710678118654752
 0.4472135988319589 |   10 | 0.70710678118654752
 0.5477225683874355 |   10 | 0.70710678118654752
(3 rows)

-- select sqrt as nest function with agg (pushdown, explain)
--Testcase 878:
EXPLAIN VERBOSE
SELECT sum(value3),sqrt(sum(value1)) FROM s3;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), sqrt((sum(value1)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`), sum(`value1`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3), sum(value1) FROM public.s31mysql
(11 rows)

-- select sqrt as nest function with agg (pushdown, result)
--Testcase 879:
SELECT sum(value3),sqrt(sum(value1)) FROM s3;
        sum         |       sqrt       
--------------------+------------------
 -7.200000040233135 | 2.68328158049675
(1 row)

-- select sqrt as nest with log2 (pushdown, explain)
--Testcase 880:
EXPLAIN VERBOSE
SELECT value1, sqrt(log2(value1)),sqrt(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (sqrt(log2(value1))), (sqrt(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (sqrt(log2(s3.value1))), (sqrt(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (sqrt(log2(value1))), (sqrt(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, sqrt(log2(`value1`)), sqrt(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, sqrt(public.log2(value1)), sqrt(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select sqrt as nest with log2 (pushdown, result)
--Testcase 881:
SELECT value1, sqrt(log2(value1)),sqrt(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |        sqrt        |        sqrt        
--------+--------------------+--------------------
    0.1 |                    |  1.822615722907473
    0.2 |                    | 1.5237874108252538
    0.3 |                    | 1.3179398836208946
    1.1 | 0.3708147179111253 |                   
    2.2 |  1.066538117002626 |                   
    3.3 |  1.312427523189265 |                   
(6 rows)

-- select sqrt with non pushdown func and explicit constant (explain)
--Testcase 882:
EXPLAIN VERBOSE
SELECT sqrt(value2), pi(), 4.1 FROM s3 ORDER BY 1,2;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=48)
   Output: (sqrt((value2)::double precision)), '3.141592653589793'::double precision, 4.1
   Sort Key: (sqrt((s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=48)
         Output: (sqrt((value2)::double precision)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT sqrt(`value2`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT sqrt(value2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select sqrt with non pushdown func and explicit constant (result)
--Testcase 883:
SELECT sqrt(value2), pi(), 4.1 FROM s3 ORDER BY 1,2;
        sqrt        |        pi         | ?column? 
--------------------+-------------------+----------
                 10 | 3.141592653589793 |      4.1
                 10 | 3.141592653589793 |      4.1
                 10 | 3.141592653589793 |      4.1
 14.142135623730951 | 3.141592653589793 |      4.1
 14.142135623730951 | 3.141592653589793 |      4.1
 14.142135623730951 | 3.141592653589793 |      4.1
(6 rows)

-- select sqrt with order by (explain)
--Testcase 884:
EXPLAIN VERBOSE
SELECT value1, sqrt(1-value3) FROM s3 ORDER BY sqrt(1-value3);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (sqrt(('1'::double precision - value3)))
   Sort Key: (sqrt(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (sqrt(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, sqrt((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, sqrt((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select sqrt with order by (result)
--Testcase 885:
SELECT value1, sqrt(1-value3) FROM s3 ORDER BY sqrt(1-value3);
 value1 |        sqrt        
--------+--------------------
    0.1 | 1.0488088488805365
    0.2 | 1.0954451163706158
    0.3 | 1.1401754303268112
    1.1 | 1.4491376828451663
    2.2 | 1.7888543953278355
    3.3 | 2.0736441238352072
(6 rows)

-- select sqrt with order by index (result)
--Testcase 886:
SELECT value1, sqrt(1-value3) FROM s3 ORDER BY 2,1;
 value1 |        sqrt        
--------+--------------------
    0.1 | 1.0488088488805365
    0.2 | 1.0954451163706158
    0.3 | 1.1401754303268112
    1.1 | 1.4491376828451663
    2.2 | 1.7888543953278355
    3.3 | 2.0736441238352072
(6 rows)

-- select sqrt with order by index (result)
--Testcase 887:
SELECT value1, sqrt(1-value3) FROM s3 ORDER BY 1,2;
 value1 |        sqrt        
--------+--------------------
    0.1 | 1.0488088488805365
    0.2 | 1.0954451163706158
    0.3 | 1.1401754303268112
    1.1 | 1.4491376828451663
    2.2 | 1.7888543953278355
    3.3 | 2.0736441238352072
(6 rows)

-- select sqrt with group by (explain)
--Testcase 888:
EXPLAIN VERBOSE
SELECT count(value1), sqrt(1-value3) FROM s3 GROUP BY sqrt(1-value3) ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: (count(value1)), (sqrt(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (sqrt(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: count(value1), (sqrt(('1'::double precision - value3)))
         Group Key: (sqrt(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (sqrt(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT sqrt((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT sqrt((1::double precision - value3)), value1 FROM public.s31mysql
(15 rows)

-- select sqrt with group by (result)
--Testcase 889:
SELECT count(value1), sqrt(1-value3) FROM s3 GROUP BY sqrt(1-value3) ORDER BY 1,2;
 count |        sqrt        
-------+--------------------
     1 | 1.0488088488805365
     1 | 1.0954451163706158
     1 | 1.1401754303268112
     1 | 1.4491376828451663
     1 | 1.7888543953278355
     1 | 2.0736441238352072
(6 rows)

-- select sqrt with group by index (result)
--Testcase 890:
SELECT value1, sqrt(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |        sqrt        
--------+--------------------
    0.1 | 1.0488088488805365
    0.2 | 1.0954451163706158
    0.3 | 1.1401754303268112
    1.1 | 1.4491376828451663
    2.2 | 1.7888543953278355
    3.3 | 2.0736441238352072
(6 rows)

-- select sqrt with group by index (result)
--Testcase 891:
SELECT value1, sqrt(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |        sqrt        
--------+--------------------
    0.1 | 1.0488088488805365
    0.2 | 1.0954451163706158
    0.3 | 1.1401754303268112
    1.1 | 1.4491376828451663
    2.2 | 1.7888543953278355
    3.3 | 2.0736441238352072
(6 rows)

-- select sqrt with group by having (explain)
--Testcase 892:
EXPLAIN VERBOSE
SELECT count(value1), sqrt(1-value3) FROM s3 GROUP BY sqrt(1-value3) HAVING sqrt(avg(value1)) > 0 ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: (count(value1)), (sqrt(('1'::double precision - value3)))
   Sort Key: (count(s3.value1)), (sqrt(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: count(value1), (sqrt(('1'::double precision - value3)))
         Group Key: (sqrt(('1'::double precision - s3.value3)))
         Filter: (sqrt(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: (sqrt(('1'::double precision - value3))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT sqrt((1 - `value3`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT sqrt((1::double precision - value3)), value1 FROM public.s31mysql
(16 rows)

-- select sqrt with group by having (result)
--Testcase 893:
SELECT count(value1), sqrt(1-value3) FROM s3 GROUP BY sqrt(1-value3) HAVING sqrt(avg(value1)) > 0 ORDER BY 1,2;
 count |        sqrt        
-------+--------------------
     1 | 1.0488088488805365
     1 | 1.0954451163706158
     1 | 1.1401754303268112
     1 | 1.4491376828451663
     1 | 1.7888543953278355
     1 | 2.0736441238352072
(6 rows)

-- select sqrt with group by index having (result)
--Testcase 894:
SELECT value1, sqrt(1-value3) FROM s3 GROUP BY 2,1 HAVING sqrt(1-value3) > 0 ORDER BY 1,2;
 value1 |        sqrt        
--------+--------------------
    0.1 | 1.0488088488805365
    0.2 | 1.0954451163706158
    0.3 | 1.1401754303268112
    1.1 | 1.4491376828451663
    2.2 | 1.7888543953278355
    3.3 | 2.0736441238352072
(6 rows)

-- select sqrt with group by index having (result)
--Testcase 895:
SELECT value1, sqrt(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |        sqrt        
--------+--------------------
    1.1 | 1.4491376828451663
    2.2 | 1.7888543953278355
    3.3 | 2.0736441238352072
(3 rows)

-- select sqrt and as (return null with negative number)
--Testcase 896:
SELECT value1, value3 + 1, sqrt(value1 + 1) as sqrt1 FROM s3 ORDER BY 1,2;
 value1 |       ?column?       |       sqrt1        
--------+----------------------+--------------------
    0.1 |   0.8999999985098839 | 1.0488088488805365
    0.2 |   0.7999999970197678 | 1.0954451163706158
    0.3 |    0.699999988079071 | 1.1401754303268112
    1.1 | -0.10000002384185791 | 1.4491376828451663
    2.2 |  -1.2000000476837158 | 1.7888543953278355
    3.3 |   -2.299999952316284 | 2.0736441238352072
(6 rows)

-- select tan (builtin function, explain)
--Testcase 897:
EXPLAIN VERBOSE
SELECT value1, tan(value2), tan(value3), tan(value4), tan(0.5) FROM s3 ORDER BY 1,2,3,4,5;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=944.81..961.88 rows=6826 width=40)
   Output: value1, (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision)), '0.5463024898437905'::double precision
   Sort Key: s3.value1, (tan((s3.value2)::double precision)), (tan(s3.value3)), (tan((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..510.10 rows=6826 width=40)
         Output: value1, (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision)), '0.5463024898437905'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, tan(`value2`), tan(`value3`), tan(`value4`), 0.5463024898437905 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, tan(value2), tan(value3), tan(value4), 0.5463024898437905::double precision FROM public.s31mysql
(12 rows)

-- select tan (builtin function, result)
--Testcase 898:
SELECT value1, tan(value2), tan(value3), tan(value4), tan(0.5) FROM s3 ORDER BY 1,2,3,4,5;
 value1 |         tan         |         tan          |        tan         |        tan         
--------+---------------------+----------------------+--------------------+--------------------
    0.1 | -0.5872139151569291 | -0.10033467359056773 | 0.5872139151569291 | 0.5463024898437905
    0.2 | -0.5872139151569291 | -0.20271003861136652 | 0.5872139151569291 | 0.5463024898437905
    0.3 | -0.5872139151569291 | -0.30933626267125297 | 0.5872139151569291 | 0.5463024898437905
    1.1 | -1.7925274837903817 |  -1.9647597731267747 | 1.7925274837903817 | 0.5463024898437905
    2.2 | -1.7925274837903817 |     1.37382291908733 | 1.7925274837903817 | 0.5463024898437905
    3.3 | -1.7925274837903817 | -0.15974569875949032 | 1.7925274837903817 | 0.5463024898437905
(6 rows)

-- select tan (builtin function, not pushdown constraints, explain)
--Testcase 899:
EXPLAIN VERBOSE
SELECT tan(value1), tan(value2), tan(value3), tan(value4), tan(0.5) FROM s3 WHERE to_hex(value2) = '64';
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..391.24 rows=34 width=40)
   Output: (tan(value1)), (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision)), '0.5463024898437905'::double precision
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT tan(`value1`), tan(`value2`), tan(`value3`), tan(`value4`), 0.5463024898437905, `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT tan(value1), tan(value2), tan(value3), tan(value4), 0.5463024898437905::double precision, value2 FROM public.s31mysql
(8 rows)

-- select tan (builtin function, not pushdown constraints, result)
--Testcase 900:
SELECT tan(value1), tan(value2), tan(value3), tan(value4), tan(0.5) FROM s3 WHERE to_hex(value2) = '64';
         tan         |         tan         |         tan          |        tan         |        tan         
---------------------+---------------------+----------------------+--------------------+--------------------
 0.10033467359056773 | -0.5872139151569291 | -0.10033467359056773 | 0.5872139151569291 | 0.5463024898437905
 0.20271003861136652 | -0.5872139151569291 | -0.20271003861136652 | 0.5872139151569291 | 0.5463024898437905
 0.30933626267125297 | -0.5872139151569291 | -0.30933626267125297 | 0.5872139151569291 | 0.5463024898437905
(3 rows)

-- select tan (builtin function, pushdown constraints, explain)
--Testcase 901:
EXPLAIN VERBOSE
SELECT tan(value1), tan(value2), tan(value3), tan(value4), tan(0.5) FROM s3 WHERE value2 != 200;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=40)
   Output: (tan(value1)), (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision)), '0.5463024898437905'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT tan(`value1`), tan(`value2`), tan(`value3`), tan(`value4`), 0.5463024898437905 FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT tan(value1), tan(value2), tan(value3), tan(value4), 0.5463024898437905::double precision FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select tan (builtin function, pushdown constraints, result)
--Testcase 902:
SELECT tan(value1), tan(value2), tan(value3), tan(value4), tan(0.5) FROM s3 WHERE value2 != 200;
         tan         |         tan         |         tan          |        tan         |        tan         
---------------------+---------------------+----------------------+--------------------+--------------------
 0.10033467359056773 | -0.5872139151569291 | -0.10033467359056773 | 0.5872139151569291 | 0.5463024898437905
 0.20271003861136652 | -0.5872139151569291 | -0.20271003861136652 | 0.5872139151569291 | 0.5463024898437905
 0.30933626267125297 | -0.5872139151569291 | -0.30933626267125297 | 0.5872139151569291 | 0.5463024898437905
(3 rows)

-- select tan (builtin function, tan in constraints, explain)
--Testcase 903:
EXPLAIN VERBOSE
SELECT value1, tan(value2), tan(value3), tan(value4), tan(0.5) FROM s3 WHERE tan(value1) != 1 ORDER BY 1,2,3,4,5;
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=975.43..992.41 rows=6792 width=40)
   Output: value1, (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision)), '0.5463024898437905'::double precision
   Sort Key: s3.value1, (tan((s3.value2)::double precision)), (tan(s3.value3)), (tan((s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=200.00..543.13 rows=6792 width=40)
         Output: value1, (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision)), '0.5463024898437905'::double precision
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, tan(`value2`), tan(`value3`), tan(`value4`), 0.5463024898437905 FROM `test`.`s32` WHERE ((tan(`value1`) <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, tan(value2), tan(value3), tan(value4), 0.5463024898437905::double precision FROM public.s31mysql WHERE ((tan(value1) <> 1::double precision))
(12 rows)

-- select tan (builtin function, tan in constraints, result)
--Testcase 904:
SELECT value1, tan(value2), tan(value3), tan(value4), tan(0.5) FROM s3 WHERE tan(value1) != 1 ORDER BY 1,2,3,4,5;
 value1 |         tan         |         tan          |        tan         |        tan         
--------+---------------------+----------------------+--------------------+--------------------
    0.1 | -0.5872139151569291 | -0.10033467359056773 | 0.5872139151569291 | 0.5463024898437905
    0.2 | -0.5872139151569291 | -0.20271003861136652 | 0.5872139151569291 | 0.5463024898437905
    0.3 | -0.5872139151569291 | -0.30933626267125297 | 0.5872139151569291 | 0.5463024898437905
    1.1 | -1.7925274837903817 |  -1.9647597731267747 | 1.7925274837903817 | 0.5463024898437905
    2.2 | -1.7925274837903817 |     1.37382291908733 | 1.7925274837903817 | 0.5463024898437905
    3.3 | -1.7925274837903817 | -0.15974569875949032 | 1.7925274837903817 | 0.5463024898437905
(6 rows)

-- select tan (builtin function, tan in constraints, explain)
--Testcase 905:
EXPLAIN VERBOSE
SELECT tan(value1), tan(value2), tan(value3), tan(value4), tan(0.5) FROM s3 WHERE tan(0.5) > value1;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=40)
   Output: (tan(value1)), (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision)), '0.5463024898437905'::double precision
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT tan(`value1`), tan(`value2`), tan(`value3`), tan(`value4`), 0.5463024898437905 FROM `test`.`s32` WHERE ((0.5463024898437905 > `value1`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT tan(value1), tan(value2), tan(value3), tan(value4), 0.5463024898437905::double precision FROM public.s31mysql WHERE ((0.5463024898437905::double precision > value1))
(7 rows)

-- select tan (builtin function, tan in constraints, result)
--Testcase 906:
SELECT tan(value1), tan(value2), tan(value3), tan(value4), tan(0.5) FROM s3 WHERE tan(0.5) > value1;
         tan         |         tan         |         tan          |        tan         |        tan         
---------------------+---------------------+----------------------+--------------------+--------------------
 0.10033467359056773 | -0.5872139151569291 | -0.10033467359056773 | 0.5872139151569291 | 0.5463024898437905
 0.20271003861136652 | -0.5872139151569291 | -0.20271003861136652 | 0.5872139151569291 | 0.5463024898437905
 0.30933626267125297 | -0.5872139151569291 | -0.30933626267125297 | 0.5872139151569291 | 0.5463024898437905
(3 rows)

-- select tan as nest function with agg (pushdown, explain)
--Testcase 907:
EXPLAIN VERBOSE
SELECT sum(value3),tan(sum(value3)) FROM s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=16)
   Output: (sum(value3)), tan((sum(value3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3) FROM public.s31mysql
(11 rows)

-- select tan as nest function with agg (pushdown, result)
--Testcase 908:
SELECT sum(value3),tan(sum(value3)) FROM s3;
        sum         |         tan         
--------------------+---------------------
 -7.200000040233135 | -1.3046210487670151
(1 row)

-- select tan as nest with log2 (pushdown, explain)
--Testcase 909:
EXPLAIN VERBOSE
SELECT value1, tan(log2(value1)),tan(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4323.68..4340.75 rows=6826 width=24)
   Output: value1, (tan(log2(value1))), (tan(log2(('1'::double precision / value1))))
   Sort Key: s3.value1, (tan(log2(s3.value1))), (tan(log2(('1'::double precision / s3.value1))))
   ->  Foreign Scan on public.s3  (cost=200.00..3888.98 rows=6826 width=24)
         Output: value1, (tan(log2(value1))), (tan(log2(('1'::double precision / value1))))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, tan(log2(`value1`)), tan(log2((1 / `value1`))) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, tan(public.log2(value1)), tan(public.log2((1::double precision / value1))) FROM public.s31mysql
(12 rows)

-- select tan as nest with log2 (pushdown, result)
--Testcase 910:
SELECT value1, tan(log2(value1)),tan(log2(1/value1)) FROM s3 ORDER BY 1,2,3;
 value1 |         tan         |         tan          
--------+---------------------+----------------------
    0.1 | -0.1823160767303538 |   0.1823160767303538
    0.2 |  1.0709933085633336 |  -1.0709933085633336
    0.3 |   5.962470082723981 |   -5.962470082723973
    1.1 | 0.13837676326558696 | -0.13837676326558687
    2.2 |   2.161636748458226 |   -2.161636748458226
    3.3 |  -6.542641473457552 |    6.542641473457562
(6 rows)

-- select tan with non pushdown func and explicit constant (explain)
--Testcase 911:
EXPLAIN VERBOSE
SELECT value1, tan(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=56)
   Output: value1, (tan(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: s3.value1, (tan(s3.value3))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=56)
         Output: value1, (tan(value3)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, tan(`value3`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, tan(value3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select tan with non pushdown func and explicit constant (result)
--Testcase 912:
SELECT value1, tan(value3), pi(), 4.1 FROM s3 ORDER BY 1,2;
 value1 |         tan          |        pi         | ?column? 
--------+----------------------+-------------------+----------
    0.1 | -0.10033467359056773 | 3.141592653589793 |      4.1
    0.2 | -0.20271003861136652 | 3.141592653589793 |      4.1
    0.3 | -0.30933626267125297 | 3.141592653589793 |      4.1
    1.1 |  -1.9647597731267747 | 3.141592653589793 |      4.1
    2.2 |     1.37382291908733 | 3.141592653589793 |      4.1
    3.3 | -0.15974569875949032 | 3.141592653589793 |      4.1
(6 rows)

-- select tan with order by (explain)
--Testcase 913:
EXPLAIN VERBOSE
SELECT value1, tan(1-value3) FROM s3 ORDER BY tan(1-value3);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: value1, (tan(('1'::double precision - value3)))
   Sort Key: (tan(('1'::double precision - s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: value1, (tan(('1'::double precision - value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, tan((1 - `value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, tan((1::double precision - value3)) FROM public.s31mysql
(12 rows)

-- select tan with order by (result)
--Testcase 914:
SELECT value1, tan(1-value3) FROM s3 ORDER BY tan(1-value3);
 value1 |         tan         
--------+---------------------
    1.1 | -1.7098464493591892
    2.2 | 0.05847390230633418
    0.1 |  1.9647596644910343
    3.3 |  2.2858475805310894
    0.2 |  2.5721516448236605
    0.3 |   3.602102614564661
(6 rows)

-- select tan with order by index (result)
--Testcase 915:
SELECT value1, tan(1-value3) FROM s3 ORDER BY 2,1;
 value1 |         tan         
--------+---------------------
    1.1 | -1.7098464493591892
    2.2 | 0.05847390230633418
    0.1 |  1.9647596644910343
    3.3 |  2.2858475805310894
    0.2 |  2.5721516448236605
    0.3 |   3.602102614564661
(6 rows)

-- select tan with order by index (result)
--Testcase 916:
SELECT value1, tan(1-value3) FROM s3 ORDER BY 1,2;
 value1 |         tan         
--------+---------------------
    0.1 |  1.9647596644910343
    0.2 |  2.5721516448236605
    0.3 |   3.602102614564661
    1.1 | -1.7098464493591892
    2.2 | 0.05847390230633418
    3.3 |  2.2858475805310894
(6 rows)

-- select tan with group by (explain)
--Testcase 917:
EXPLAIN VERBOSE
SELECT value1, tan(1-value3) FROM s3 GROUP BY value1, tan(1-value3) ORDER BY 1,2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=16)
   Output: value1, (tan(('1'::double precision - value3)))
   Sort Key: s3.value1, (tan(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=16)
         Output: value1, (tan(('1'::double precision - value3)))
         Group Key: s3.value1, (tan(('1'::double precision - s3.value3)))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (tan(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, tan((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, tan((1::double precision - value3)) FROM public.s31mysql
(15 rows)

-- select tan with group by (result)
--Testcase 918:
SELECT value1, tan(1-value3) FROM s3 GROUP BY value1, tan(1-value3) ORDER BY 1,2;
 value1 |         tan         
--------+---------------------
    0.1 |  1.9647596644910343
    0.2 |  2.5721516448236605
    0.3 |   3.602102614564661
    1.1 | -1.7098464493591892
    2.2 | 0.05847390230633418
    3.3 |  2.2858475805310894
(6 rows)

-- select tan with group by index (result)
--Testcase 919:
SELECT value1, tan(1-value3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |         tan         
--------+---------------------
    0.1 |  1.9647596644910343
    0.2 |  2.5721516448236605
    0.3 |   3.602102614564661
    1.1 | -1.7098464493591892
    2.2 | 0.05847390230633418
    3.3 |  2.2858475805310894
(6 rows)

-- select tan with group by index (result)
--Testcase 920:
SELECT value1, tan(1-value3) FROM s3 GROUP BY 1,2 ORDER BY 1,2;
 value1 |         tan         
--------+---------------------
    0.1 |  1.9647596644910343
    0.2 |  2.5721516448236605
    0.3 |   3.602102614564661
    1.1 | -1.7098464493591892
    2.2 | 0.05847390230633418
    3.3 |  2.2858475805310894
(6 rows)

-- select tan with group by having (explain)
--Testcase 921:
EXPLAIN VERBOSE
SELECT value1, tan(1-value3) FROM s3 GROUP BY value1, tan(1-value3) HAVING tan(avg(value1)) > 0 ORDER BY 1,2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=515.97..516.14 rows=67 width=16)
   Output: value1, (tan(('1'::double precision - value3)))
   Sort Key: s3.value1, (tan(('1'::double precision - s3.value3)))
   ->  HashAggregate  (cost=510.10..513.94 rows=67 width=16)
         Output: value1, (tan(('1'::double precision - value3)))
         Group Key: s3.value1, (tan(('1'::double precision - s3.value3)))
         Filter: (tan(avg(s3.value1)) > '0'::double precision)
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
               Output: value1, (tan(('1'::double precision - value3)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, tan((1 - `value3`)) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, tan((1::double precision - value3)) FROM public.s31mysql
(16 rows)

-- select tan with group by having (result)
--Testcase 922:
SELECT value1, tan(1-value3) FROM s3 GROUP BY value1, tan(1-value3) HAVING tan(avg(value1)) > 0 ORDER BY 1,2;
 value1 |         tan         
--------+---------------------
    0.1 |  1.9647596644910343
    0.2 |  2.5721516448236605
    0.3 |   3.602102614564661
    1.1 | -1.7098464493591892
    3.3 |  2.2858475805310894
(5 rows)

-- select tan with group by index having (result)
--Testcase 923:
SELECT value1, tan(1-value3) FROM s3 GROUP BY 2,1 HAVING tan(1-value3) > 0 ORDER BY 1,2;
 value1 |         tan         
--------+---------------------
    0.1 |  1.9647596644910343
    0.2 |  2.5721516448236605
    0.3 |   3.602102614564661
    2.2 | 0.05847390230633418
    3.3 |  2.2858475805310894
(5 rows)

-- select tan with group by index having (result)
--Testcase 924:
SELECT value1, tan(1-value3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |         tan         
--------+---------------------
    1.1 | -1.7098464493591892
    2.2 | 0.05847390230633418
    3.3 |  2.2858475805310894
(3 rows)

-- select tan and as
--Testcase 925:
SELECT value1, tan(value3) as tan1 FROM s3 ORDER BY 1,2;
 value1 |         tan1         
--------+----------------------
    0.1 | -0.10033467359056773
    0.2 | -0.20271003861136652
    0.3 | -0.30933626267125297
    1.1 |  -1.9647597731267747
    2.2 |     1.37382291908733
    3.3 | -0.15974569875949032
(6 rows)

-- round()
--Testcase 926:
EXPLAIN VERBOSE
SELECT round(value1), round(value3) FROM s3 ORDER BY 1,2;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=16)
   Output: (round(value1)), (round(value3))
   Sort Key: (round(s3.value1)), (round(s3.value3))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=16)
         Output: (round(value1)), (round(value3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT round(`value1`), round(`value3`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT round(value1), round(value3) FROM public.s31mysql
(12 rows)

--Testcase 927:
SELECT round(value1), round(value3) FROM s3 ORDER BY 1,2;
 round | round 
-------+-------
     0 |    -0
     0 |    -0
     0 |    -0
     1 |    -1
     2 |    -2
     3 |    -3
(6 rows)

--Testcase 928:
EXPLAIN VERBOSE
SELECT round(value1), round(abs(value3)) FROM s3 ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=910.68..927.75 rows=6826 width=16)
   Output: (round(value1)), (round(abs(value3)))
   Sort Key: (round(s3.value1)), (round(abs(s3.value3)))
   ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=16)
         Output: (round(value1)), (round(abs(value3)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT round(`value1`), round(abs(`value3`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT round(value1), round(abs(value3)) FROM public.s31mysql
(12 rows)

--Testcase 929:
SELECT round(value1), round(abs(value3)) FROM s3 ORDER BY 1,2;
 round | round 
-------+-------
     0 |     0
     0 |     0
     0 |     0
     1 |     1
     2 |     2
     3 |     3
(6 rows)

--Testcase 930:
EXPLAIN VERBOSE
SELECT round(abs(value2), 2) FROM s3 ORDER BY 1;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort  (cost=910.68..927.75 rows=6826 width=32)
   Output: (round((abs(value2))::numeric, 2))
   Sort Key: (round((abs(s3.value2))::numeric, 2))
   ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=32)
         Output: (round((abs(value2))::numeric, 2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT round(abs(`value2`), 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT round(abs(value2), 2) FROM public.s31mysql
(12 rows)

--Testcase 931:
SELECT round(abs(value2), 2) FROM s3 ORDER BY 1;
 round 
-------
   100
   100
   100
   200
   200
   200
(6 rows)

--Testcase 932:
EXPLAIN VERBOSE
SELECT * FROM s3 WHERE round(abs(value2), 2) = 100.00;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..357.20 rows=34 width=156)
   Output: id, tag1, value1, value2, value3, value4, str1, str2, __spd_url
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id`, `tag1`, `value1`, `value2`, `value3`, `value4`, `str1`, `str2` FROM `test`.`s32` WHERE ((round(abs(`value2`), 2) = 100.00))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id, tag1, value1, value2, value3, value4, str1, str2, __spd_url FROM public.s31mysql WHERE ((round(abs(value2), 2) = 100.00))
(7 rows)

--Testcase 933:
SELECT * FROM s3 WHERE round(abs(value2), 2) = 100.00;
 id | tag1 | value1 | value2 | value3 | value4 |   str1    |   str2    |        __spd_url         
----+------+--------+--------+--------+--------+-----------+-----------+--------------------------
  0 | a    |    0.1 |    100 |   -0.1 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  1 | a    |    0.2 |    100 |   -0.2 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  2 | a    |    0.3 |    100 |   -0.3 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
(3 rows)

--Testcase 934:
EXPLAIN VERBOSE
SELECT * FROM s3 WHERE round(value1) = 1;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..323.07 rows=34 width=156)
   Output: id, tag1, value1, value2, value3, value4, str1, str2, __spd_url
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id`, `tag1`, `value1`, `value2`, `value3`, `value4`, `str1`, `str2` FROM `test`.`s32` WHERE ((round(`value1`) = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id, tag1, value1, value2, value3, value4, str1, str2, __spd_url FROM public.s31mysql WHERE ((round(value1) = 1::double precision))
(7 rows)

--Testcase 935:
SELECT * FROM s3 WHERE round(value1) = 1;
 id | tag1 | value1 | value2 | value3 | value4 |   str1    |   str2    |  __spd_url  
----+------+--------+--------+--------+--------+-----------+-----------+-------------
  3 | b    |    1.1 |    200 |   -1.1 |   -200 | ---XYZ--- |    XYZ    | /mysql_svr/
(1 row)

--Testcase 936:
EXPLAIN VERBOSE
SELECT * FROM s3 WHERE round(value3) = -1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..323.07 rows=34 width=156)
   Output: id, tag1, value1, value2, value3, value4, str1, str2, __spd_url
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id`, `tag1`, `value1`, `value2`, `value3`, `value4`, `str1`, `str2` FROM `test`.`s32` WHERE ((round(`value3`) = (-1)))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id, tag1, value1, value2, value3, value4, str1, str2, __spd_url FROM public.s31mysql WHERE ((round(value3) = (-1)::double precision))
(7 rows)

--Testcase 937:
SELECT * FROM s3 WHERE round(value3) = -1;
 id | tag1 | value1 | value2 | value3 | value4 |   str1    |   str2    |  __spd_url  
----+------+--------+--------+--------+--------+-----------+-----------+-------------
  3 | b    |    1.1 |    200 |   -1.1 |   -200 | ---XYZ--- |    XYZ    | /mysql_svr/
(1 row)

-- test for cast function:
-- convert()
-- select convert (stub function, explain)
--Testcase 938:
EXPLAIN VERBOSE
SELECT convert(value1, 'decimal(1)'), convert(value2, 'decimal(10, 2)'), convert(id, 'YEAR'), convert(value4, 'binary(1)')::bytea FROM s3;
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..7284.91 rows=6826 width=128)
   Output: (convert(value1, 'decimal(1)'::text)), (convert(value2, 'decimal(10, 2)'::text)), (convert(id, 'YEAR'::text)), ((convert(value4, 'binary(1)'::text))::bytea)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT convert(`value1`,decimal(1)), convert(`value2`,decimal(10, 2)), convert(`id`,YEAR), convert(`value4`,binary(1)) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.convert(value1, 'decimal(1)'::text), public.convert(value2, 'decimal(10, 2)'::text), public.convert(id, 'YEAR'::text), public.convert(value4, 'binary(1)'::text)::bytea FROM public.s31mysql
(7 rows)

-- select convert (stub function, result)
--Testcase 939:
SELECT * FROM (
SELECT convert(value1, 'decimal(1)'), convert(value2, 'decimal(10, 2)'), convert(id, 'YEAR'), convert(value4, 'binary(1)')::bytea FROM s3
) t ORDER BY 1, 2, 3, 4;
 convert | convert | convert | convert 
---------+---------+---------+---------
 0       | 100.00  | 0       | \x2d
 0       | 100.00  | 2001    | \x2d
 0       | 100.00  | 2002    | \x2d
 1       | 200.00  | 2003    | \x2d
 2       | 200.00  | 2004    | \x2d
 3       | 200.00  | 2005    | \x2d
(6 rows)

-- select convert (stub function, not pushdown constraints, explain)
--Testcase 940:
EXPLAIN VERBOSE
SELECT convert(value1, 'decimal(1)'), convert(value2, 'decimal(10, 2)'), convert(id, 'YEAR'), convert(value4, 'binary(1)')::bytea FROM s3 WHERE to_hex(value2) != '64';
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..7284.53 rows=6792 width=128)
   Output: (convert(value1, 'decimal(1)'::text)), (convert(value2, 'decimal(10, 2)'::text)), (convert(id, 'YEAR'::text)), ((convert(value4, 'binary(1)'::text))::bytea)
   Filter: (to_hex(s3.value2) <> '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT convert(`value1`,decimal(1)), convert(`value2`,decimal(10, 2)), convert(`id`,YEAR), convert(`value4`,binary(1)), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.convert(value1, 'decimal(1)'::text), public.convert(value2, 'decimal(10, 2)'::text), public.convert(id, 'YEAR'::text), public.convert(value4, 'binary(1)'::text)::bytea, value2 FROM public.s31mysql
(8 rows)

-- select convert (stub function, not pushdown constraints, result)
--Testcase 941:
SELECT * FROM (
SELECT convert(value1, 'decimal(1)'), convert(value2, 'decimal(10, 2)'), convert(id, 'YEAR'), convert(value4, 'binary(1)')::bytea FROM s3 WHERE to_hex(value2) != '64'
) t ORDER BY 1, 2, 3, 4;
 convert | convert | convert | convert 
---------+---------+---------+---------
 1       | 200.00  | 2003    | \x2d
 2       | 200.00  | 2004    | \x2d
 3       | 200.00  | 2005    | \x2d
(3 rows)

-- select convert (stub function, pushdown constraints, explain)
--Testcase 942:
EXPLAIN VERBOSE
SELECT convert(value1, 'decimal(1)'), convert(value2, 'decimal(10, 2)'), convert(id, 'YEAR'), convert(value4, 'binary(1)')::bytea FROM s3 WHERE value2 != 200;
                                                                                                                     QUERY PLAN                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..7267.12 rows=6792 width=128)
   Output: (convert(value1, 'decimal(1)'::text)), (convert(value2, 'decimal(10, 2)'::text)), (convert(id, 'YEAR'::text)), ((convert(value4, 'binary(1)'::text))::bytea)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT convert(`value1`,decimal(1)), convert(`value2`,decimal(10, 2)), convert(`id`,YEAR), convert(`value4`,binary(1)) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.convert(value1, 'decimal(1)'::text), public.convert(value2, 'decimal(10, 2)'::text), public.convert(id, 'YEAR'::text), public.convert(value4, 'binary(1)'::text)::bytea FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select convert (stub function, pushdown constraints, result)
--Testcase 943:
SELECT * FROM (
SELECT convert(value1, 'decimal(1)'), convert(value2, 'decimal(10, 2)'), convert(id, 'YEAR'), convert(value4, 'binary(1)')::bytea FROM s3 WHERE value2 != 200
) t ORDER BY 1, 2, 3, 4;
 convert | convert | convert | convert 
---------+---------+---------+---------
 0       | 100.00  | 0       | \x2d
 0       | 100.00  | 2001    | \x2d
 0       | 100.00  | 2002    | \x2d
(3 rows)

-- select convert as nest function with agg (pushdown, explain)
--Testcase 944:
EXPLAIN VERBOSE
SELECT sum(id), convert(sum(id), 'YEAR') FROM s3;
                      QUERY PLAN                       
-------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), convert((sum(id)), 'YEAR'::text)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(id) FROM public.s31mysql
(11 rows)

-- select convert as nest function with agg (pushdown, result)
--Testcase 945:
SELECT sum(id), convert(sum(id), 'YEAR') FROM s3;
ERROR:  stub convert(anyelement, text) is called
CONTEXT:  PL/pgSQL function convert(anyelement,text) line 3 at RAISE
-- select convert as nest with log2 (pushdown, explain)
--Testcase 946:
EXPLAIN VERBOSE
SELECT convert(log2(value1), 'decimal(12,4)')::numeric, convert(log2(1/value1), 'decimal(12,4)')::numeric FROM s3;
                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..7336.10 rows=6826 width=64)
   Output: ((convert(log2(value1), 'decimal(12,4)'::text))::numeric), ((convert(log2(('1'::double precision / value1)), 'decimal(12,4)'::text))::numeric)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT convert(log2(`value1`),decimal(12,4)), convert(log2((1 / `value1`)),decimal(12,4)) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.convert(public.log2(value1), 'decimal(12,4)'::text)::numeric, public.convert(public.log2((1::double precision / value1)), 'decimal(12,4)'::text)::numeric FROM public.s31mysql
(7 rows)

-- select convert as nest with log2 (pushdown, result)
--Testcase 947:
SELECT * FROM (
SELECT convert(log2(value1), 'decimal(12,4)')::numeric, convert(log2(1/value1), 'decimal(12,4)')::numeric FROM s3
) t ORDER BY 1, 2;
 convert | convert 
---------+---------
 -3.3219 |  3.3219
 -2.3219 |  2.3219
 -1.7370 |  1.7370
  0.1375 | -0.1375
  1.1375 | -1.1375
  1.7225 | -1.7225
(6 rows)

-- select cast json_extract with type modifier (explain)
--Testcase 948:
EXPLAIN VERBOSE
SELECT convert(json_extract('{"a": "2000-01-01 12:02:01.123456"}', '$.a'), 'datetime(3)')::timestamp, convert(json_extract('{"a": "2000-01-01 12:02:01.123456"}', '$.a'), 'datetime(3)')::timestamptz, convert(json_extract('{"a": "12:10:20.123456"}', '$.a'), 'time(3)')::time, convert(json_extract('{"a": "12:10:20.123456"}', '$.a'), 'time(3)')::timetz FROM s3;


 Foreign Scan on public.s3  (cost=200.00..14213.30 rows=6826 width=36)
   Output: ((convert(json_extract('{"a": "2000-01-01 12:02:01.123456"}'::json, VARIADIC '{$.a}'::text[]), 'datetime(3)'::text))::timestamp without time zone), ((convert(json_extract('{"a": "2000-01-01 12:02:01.123456"}'::json, VARIADIC '{$.a}'::text[]), 'datetime(3)'::text))::timestamp with time zone), ((convert(json_extract('{"a": "12:10:20.123456"}'::json, VARIADIC '{$.a}'::text[]), 'time(3)'::text))::time without time zone), ((convert(json_extract('{"a": "12:10:20.123456"}'::json, VARIADIC '{$.a}'::text[]), 'time(3)'::text))::time with time zone)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT convert(json_extract(CAST('{"a": "2000-01-01 12:02:01.123456"}' AS JSON), '$.a'),datetime(3)), convert(json_extract(CAST('{"a": "2000-01-01 12:02:01.123456"}' AS JSON), '$.a'),datetime(3)), convert(json_extract(CAST('{"a": "12:10:20.123456"}' AS JSON), '$.a'),time(3)), convert(json_extract(CAST('{"a": "12:10:20.123456"}' AS JSON), '$.a'),time(3)) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.convert(public.json_extract('{"a": "2000-01-01 12:02:01.123456"}'::json, VARIADIC '{$.a}'::text[]), 'datetime(3)'::text)::timestamp without time zone, public.convert(public.json_extract('{"a": "2000-01-01 12:02:01.123456"}'::json, VARIADIC '{$.a}'::text[]), 'datetime(3)'::text)::timestamp with time zone, public.convert(public.json_extract('{"a": "12:10:20.123456"}'::json, VARIADIC '{$.a}'::text[]), 'time(3)'::text)::time without time zone, public.convert(public.json_extract('{"a": "12:10:20.123456"}'::json, VARIADIC '{$.a}'::text[]), 'time(3)'::text)::time with time zone FROM public.s31mysql
(7 rows)

-- select cast json_extract with type modifier (result)
--Testcase 949:
SELECT * FROM (
SELECT convert(json_extract('{"a": "2000-01-01 12:02:01.123456"}', '$.a'), 'datetime(3)')::timestamp, convert(json_extract('{"a": "2000-01-01 12:02:01.123456"}', '$.a'), 'datetime(3)')::timestamptz, convert(json_extract('{"a": "12:10:20.123456"}', '$.a'), 'time(3)')::time, convert(json_extract('{"a": "12:10:20.123456"}', '$.a'), 'time(3)')::timetz FROM s3
) t ORDER BY 1, 2, 3, 4;
         convert         |          convert           |   convert    |     convert     
-------------------------+----------------------------+--------------+-----------------
 2000-01-01 12:02:01.123 | 2000-01-01 12:02:01.123+09 | 12:10:20.123 | 12:10:20.123+09
 2000-01-01 12:02:01.123 | 2000-01-01 12:02:01.123+09 | 12:10:20.123 | 12:10:20.123+09
 2000-01-01 12:02:01.123 | 2000-01-01 12:02:01.123+09 | 12:10:20.123 | 12:10:20.123+09
 2000-01-01 12:02:01.123 | 2000-01-01 21:02:01.123+09 | 12:10:20.123 | 12:10:20.123+00
 2000-01-01 12:02:01.123 | 2000-01-01 21:02:01.123+09 | 12:10:20.123 | 12:10:20.123+00
 2000-01-01 12:02:01.123 | 2000-01-01 21:02:01.123+09 | 12:10:20.123 | 12:10:20.123+00
(6 rows)

-- select cast json_extract with type modifier (explain)
--Testcase 950:
EXPLAIN VERBOSE
SELECT convert(json_extract('{"a": 100}', '$.a'), 'decimal(10,2)')::numeric, convert(json_extract('{"a": 10}', '$.a'), 'YEAR')::decimal, convert(json_unquote(json_extract('{"a": "1.123456"}', '$.a')), 'decimal(10, 3)')::numeric FROM s3;
                                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..12472.67 rows=6826 width=96)
   Output: ((convert(json_extract('{"a": 100}'::json, VARIADIC '{$.a}'::text[]), 'decimal(10,2)'::text))::numeric), ((convert(json_extract('{"a": 10}'::json, VARIADIC '{$.a}'::text[]), 'YEAR'::text))::numeric), ((convert(json_unquote(json_extract('{"a": "1.123456"}'::json, VARIADIC '{$.a}'::text[])), 'decimal(10, 3)'::text))::numeric)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT convert(json_extract(CAST('{"a": 100}' AS JSON), '$.a'),decimal(10,2)), convert(json_extract(CAST('{"a": 10}' AS JSON), '$.a'),YEAR), convert(json_unquote(json_extract(CAST('{"a": "1.123456"}' AS JSON), '$.a')),decimal(10, 3)) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.convert(public.json_extract('{"a": 100}'::json, VARIADIC '{$.a}'::text[]), 'decimal(10,2)'::text)::numeric, public.convert(public.json_extract('{"a": 10}'::json, VARIADIC '{$.a}'::text[]), 'YEAR'::text)::numeric, public.convert(public.json_unquote(public.json_extract('{"a": "1.123456"}'::json, VARIADIC '{$.a}'::text[])), 'decimal(10, 3)'::text)::numeric FROM public.s31mysql
(7 rows)

-- select cast json_extract with type modifier (result)
--Testcase 951:
SELECT * FROM (
SELECT convert(json_extract('{"a": 100}', '$.a'), 'decimal(10,2)')::numeric, convert(json_extract('{"a": 10}', '$.a'), 'YEAR')::decimal, convert(json_unquote(json_extract('{"a": "1.123456"}', '$.a')), 'decimal(10, 3)')::numeric FROM s3
) t ORDER BY 1, 2, 3;
 convert | convert | convert 
---------+---------+---------
  100.00 |    2010 |   1.123
  100.00 |    2010 |   1.123
  100.00 |    2010 |   1.123
  100.00 |    2010 |   1.123
  100.00 |    2010 |   1.123
  100.00 |    2010 |   1.123
(6 rows)

-- select convert with non pushdown func and explicit constant (explain)
--Testcase 952:
EXPLAIN VERBOSE
SELECT convert(id, 'YEAR'), pi(), 4.1 FROM s3;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (convert(id, 'YEAR'::text)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT convert(`id`,YEAR), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.convert(id, 'YEAR'::text), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select convert with non pushdown func and explicit constant (result)
--Testcase 953:
SELECT * FROM (
SELECT convert(id, 'YEAR'), pi(), 4.1 FROM s3
) t ORDER BY 1;
 convert |        pi         | ?column? 
---------+-------------------+----------
 0       | 3.141592653589793 |      4.1
 2001    | 3.141592653589793 |      4.1
 2002    | 3.141592653589793 |      4.1
 2003    | 3.141592653589793 |      4.1
 2004    | 3.141592653589793 |      4.1
 2005    | 3.141592653589793 |      4.1
(6 rows)

-- select convert with order by index (result)
--Testcase 954:
SELECT value1, convert(1.123456 - value1,'char(3)') FROM s3 order by 2,1;
 value1 | convert 
--------+---------
    1.1 | 0.0
    0.3 | 0.8
    0.2 | 0.9
    2.2 | -1.
    0.1 | 1.0
    3.3 | -2.
(6 rows)

-- select convert with order by index (result)
--Testcase 955:
SELECT value1, convert(1.123456 - value1,'char(3)') FROM s3 order by 1,2;
 value1 | convert 
--------+---------
    0.1 | 1.0
    0.2 | 0.9
    0.3 | 0.8
    1.1 | 0.0
    2.2 | -1.
    3.3 | -2.
(6 rows)

-- select convert and as
--Testcase 956:
SELECT * FROM (
SELECT convert(id, 'YEAR') as convert1 FROM s3
) t ORDER BY 1;
 convert1 
----------
 0
 2001
 2002
 2003
 2004
 2005
(6 rows)

-- full text search table
-- text search (pushdown, explain)
--Testcase 957:
EXPLAIN VERBOSE
SELECT MATCH_AGAINST(content, 'success catches') AS score, content FROM ftextsearch WHERE MATCH_AGAINST(content, 'success catches','IN BOOLEAN MODE') != 0;
                                                                                                                            QUERY PLAN                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ftextsearch  (cost=200.00..3845.66 rows=6792 width=40)
   Output: (match_against(VARIADIC ARRAY[content, 'success catches'::text])), content
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT MATCH (`content`) AGAINST ( 'success catches' ), `content` FROM `test`.`ftextsearch2` WHERE ((MATCH (`content`) AGAINST ( 'success catches' IN BOOLEAN MODE) <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.match_against(VARIADIC ARRAY[content, 'success catches'::text]), content FROM public.ftextsearch1 WHERE ((public.match_against(VARIADIC ARRAY[content, 'success catches'::text, 'IN BOOLEAN MODE'::text]) <> 0::double precision))
(7 rows)

-- text search (pushdown, result)
--Testcase 958:
SELECT content FROM (
SELECT MATCH_AGAINST(content, 'success catches') AS score, content FROM ftextsearch WHERE MATCH_AGAINST(content, 'success catches','IN BOOLEAN MODE') != 0
) AS t ORDER BY 1;
             content              
----------------------------------
 Failure teaches success.
 The early bird catches the worm.
(2 rows)

-- ===============================================================================
-- test string functions
-- ===============================================================================
--
-- test ascii()
--
-- select ascii (stub function, explain)
--Testcase 959:
EXPLAIN VERBOSE
SELECT ascii(tag1), ascii(str1), ascii(str2) FROM s3 ORDER BY 1,2,3;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sort  (cost=910.68..927.75 rows=6826 width=12)
   Output: (ascii(tag1)), (ascii(str1)), (ascii(str2))
   Sort Key: (ascii(s3.tag1)), (ascii(s3.str1)), (ascii(s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=12)
         Output: (ascii(tag1)), (ascii(str1)), (ascii(str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ascii(`tag1`), ascii(`str1`), ascii(`str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ascii(tag1), ascii(str1), ascii(str2) FROM public.s31mysql
(12 rows)

-- select ascii (stub function, result)
--Testcase 960:
SELECT ascii(tag1), ascii(str1), ascii(str2) FROM s3 ORDER BY 1,2,3;
 ascii | ascii | ascii 
-------+-------+-------
    97 |    45 |    32
    97 |    45 |    32
    97 |    45 |    32
    98 |    45 |    32
    98 |    45 |    32
    98 |    45 |    32
(6 rows)

-- select ascii (stub function, pushdown constraints, explain)
--Testcase 961:
EXPLAIN VERBOSE
SELECT ascii(tag1), ascii(str1), ascii(str2) FROM s3 WHERE value2 != 100;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..492.11 rows=6792 width=12)
   Output: (ascii(tag1)), (ascii(str1)), (ascii(str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ascii(`tag1`), ascii(`str1`), ascii(`str2`) FROM `test`.`s32` WHERE ((`value2` <> 100))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ascii(tag1), ascii(str1), ascii(str2) FROM public.s31mysql WHERE ((value2 <> 100))
(7 rows)

-- select ascii (stub function, pushdown constraints, result)
--Testcase 962:
SELECT ascii(tag1), ascii(str1), ascii(str2) FROM s3 WHERE value2 != 100;
 ascii | ascii | ascii 
-------+-------+-------
    98 |    45 |    32
    98 |    45 |    32
    98 |    45 |    32
(3 rows)

-- select ascii (stub function, ascii in constraints, explain)
--Testcase 963:
EXPLAIN VERBOSE
SELECT ascii(tag1), ascii(str1), ascii(str2) FROM s3 WHERE ascii(str1) <= 97 ORDER BY 1,2,3;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=511.89..517.58 rows=2276 width=12)
   Output: (ascii(tag1)), (ascii(str1)), (ascii(str2))
   Sort Key: (ascii(s3.tag1)), (ascii(s3.str1)), (ascii(s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..384.98 rows=2276 width=12)
         Output: (ascii(tag1)), (ascii(str1)), (ascii(str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ascii(`tag1`), ascii(`str1`), ascii(`str2`) FROM `test`.`s32` WHERE ((ascii(`str1`) <= 97))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ascii(tag1), ascii(str1), ascii(str2) FROM public.s31mysql WHERE ((ascii(str1) <= 97))
(12 rows)

-- select ascii (stub function, ascii in constraints, explain)
--Testcase 964:
SELECT ascii(tag1), ascii(str1), ascii(str2) FROM s3 WHERE ascii(str1) <= 97 ORDER BY 1,2,3;
 ascii | ascii | ascii 
-------+-------+-------
    97 |    45 |    32
    97 |    45 |    32
    97 |    45 |    32
    98 |    45 |    32
    98 |    45 |    32
    98 |    45 |    32
(6 rows)

-- select ascii with non pushdown func and explicit constant (explain)
--Testcase 965:
EXPLAIN VERBOSE
SELECT ascii(str1), pi(), 4.1 FROM s3;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=44)
   Output: (ascii(str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ascii(`str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ascii(str1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select ascii with non pushdown func and explicit constant (result)
--Testcase 966:
SELECT ascii(str1), pi(), 4.1 FROM s3;
 ascii |        pi         | ?column? 
-------+-------------------+----------
    45 | 3.141592653589793 |      4.1
    45 | 3.141592653589793 |      4.1
    45 | 3.141592653589793 |      4.1
    45 | 3.141592653589793 |      4.1
    45 | 3.141592653589793 |      4.1
    45 | 3.141592653589793 |      4.1
(6 rows)

-- select ascii with order by (explain)
--Testcase 967:
EXPLAIN VERBOSE
SELECT value1, ascii(str2) FROM s3 ORDER BY value1, ascii(str2);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=12)
   Output: value1, (ascii(str2))
   Sort Key: s3.value1, (ascii(s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=12)
         Output: value1, (ascii(str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, ascii(`str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, ascii(str2) FROM public.s31mysql
(12 rows)

-- select ascii with order by (result)
--Testcase 968:
SELECT value1, ascii(str2) FROM s3 ORDER BY value1, ascii(str2);
 value1 | ascii 
--------+-------
    0.1 |    32
    0.2 |    32
    0.3 |    32
    1.1 |    32
    2.2 |    32
    3.3 |    32
(6 rows)

-- select ascii with order by index (result)
--Testcase 969:
SELECT value1, ascii(str2) FROM s3 ORDER BY 2,1;
 value1 | ascii 
--------+-------
    0.1 |    32
    0.2 |    32
    0.3 |    32
    1.1 |    32
    2.2 |    32
    3.3 |    32
(6 rows)

-- select ascii with group by (explain)
--Testcase 970:
EXPLAIN VERBOSE
SELECT count(value1), ascii(str1) FROM s3 GROUP BY ascii(str1) ORDER BY 1,2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=12)
   Output: (count(value1)), (ascii(str1))
   Sort Key: (count(s3.value1)), (ascii(s3.str1))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=12)
         Output: count(value1), (ascii(str1))
         Group Key: (ascii(s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=12)
               Output: (ascii(str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT ascii(`str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT ascii(str1), value1 FROM public.s31mysql
(15 rows)

-- select ascii with group by (result)
--Testcase 971:
SELECT count(value1), ascii(str1) FROM s3 GROUP BY ascii(str1) ORDER BY 1,2;
 count | ascii 
-------+-------
     6 |    45
(1 row)

-- select ascii with group by index (result)
--Testcase 972:
SELECT value1, ascii(str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | ascii 
--------+-------
    0.1 |    45
    0.2 |    45
    0.3 |    45
    1.1 |    45
    2.2 |    45
    3.3 |    45
(6 rows)

-- select ascii with group by having (explain)
--Testcase 973:
EXPLAIN VERBOSE
SELECT count(value1), ascii(str1) FROM s3 GROUP BY ascii(str1) HAVING ascii(str1) IS NOT NULL ORDER BY 1,2;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=502.25..502.75 rows=200 width=12)
   Output: (count(value1)), (ascii(str1))
   Sort Key: (count(s3.value1)), (ascii(s3.str1))
   ->  HashAggregate  (cost=492.11..494.61 rows=200 width=12)
         Output: count(value1), (ascii(str1))
         Group Key: (ascii(s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=12)
               Output: (ascii(str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT ascii(`str1`), `value1` FROM `test`.`s32` WHERE ((ascii(`str1`) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT ascii(str1), value1 FROM public.s31mysql WHERE ((ascii(str1) IS NOT NULL))
(15 rows)

-- select ascii with group by having (explain)
--Testcase 974:
SELECT count(value1), ascii(str1) FROM s3 GROUP BY ascii(str1) HAVING ascii(str1) IS NOT NULL ORDER BY 1,2;
 count | ascii 
-------+-------
     6 |    45
(1 row)

-- select ascii with group by index having (result)
--Testcase 975:
SELECT value1, ascii(str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | ascii 
--------+-------
    1.1 |    45
    2.2 |    45
    3.3 |    45
(3 rows)

--
-- test bin()
--
-- select bin (stub function, explain)
--Testcase 976:
EXPLAIN VERBOSE
SELECT id, bin(id), bin(value2), bin(value4) FROM s3 ORDER BY 1,2,3,4;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=6030.18..6047.25 rows=6826 width=100)
   Output: id, (bin((id)::numeric)), (bin((value2)::numeric)), (bin((value4)::numeric))
   Sort Key: s3.id, (bin((s3.id)::numeric)), (bin((s3.value2)::numeric)), (bin((s3.value4)::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..5595.48 rows=6826 width=100)
         Output: id, (bin((id)::numeric)), (bin((value2)::numeric)), (bin((value4)::numeric))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, bin(`id`), bin(`value2`), bin(`value4`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.bin(id), public.bin(value2), public.bin(value4) FROM public.s31mysql
(12 rows)

-- select bin (stub function, result)
--Testcase 977:
SELECT id, bin(id), bin(value2), bin(value4) FROM s3 ORDER BY 1,2,3,4;
 id | bin |   bin    |                               bin                                
----+-----+----------+------------------------------------------------------------------
  0 | 0   | 1100100  | 1111111111111111111111111111111111111111111111111111111110011100
  1 | 1   | 1100100  | 1111111111111111111111111111111111111111111111111111111110011100
  2 | 10  | 1100100  | 1111111111111111111111111111111111111111111111111111111110011100
  3 | 11  | 11001000 | 1111111111111111111111111111111111111111111111111111111100111000
  4 | 100 | 11001000 | 1111111111111111111111111111111111111111111111111111111100111000
  5 | 101 | 11001000 | 1111111111111111111111111111111111111111111111111111111100111000
(6 rows)

-- select bin (stub function, pushdown constraints, explain)
--Testcase 978:
EXPLAIN VERBOSE
SELECT bin(id), bin(value2) FROM s3 WHERE value2 != 200;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3871.12 rows=6792 width=64)
   Output: (bin((id)::numeric)), (bin((value2)::numeric))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT bin(`id`), bin(`value2`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.bin(id), public.bin(value2) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select bin (stub function, pushdown constraints, result)
--Testcase 979:
SELECT bin(id), bin(value2) FROM s3 WHERE value2 != 200;
 bin |   bin   
-----+---------
 0   | 1100100
 1   | 1100100
 10  | 1100100
(3 rows)

-- select bin (stub function, bin in constraints, explain)
--Testcase 980:
EXPLAIN VERBOSE
SELECT bin(id), bin(value2) FROM s3 WHERE bin(value2) != '1100100';
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..5594.69 rows=6792 width=64)
   Output: (bin((id)::numeric)), (bin((value2)::numeric))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT bin(`id`), bin(`value2`) FROM `test`.`s32` WHERE ((bin(`value2`) <> '1100100'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.bin(id), public.bin(value2) FROM public.s31mysql WHERE ((public.bin(value2) <> '1100100'::text))
(7 rows)

-- select bin (stub function, bin in constraints, explain)
--Testcase 981:
SELECT bin(id), bin(value2) FROM s3 WHERE bin(value2) != '1100100';
 bin |   bin    
-----+----------
 11  | 11001000
 100 | 11001000
 101 | 11001000
(3 rows)

--select bin as nest function with agg (explain)
--Testcase 982:
EXPLAIN VERBOSE
SELECT sum(id), bin(sum(value2)) FROM s3;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), bin(((sum(value2)))::numeric)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`), sum(`value2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(id), sum(value2) FROM public.s31mysql
(11 rows)

--select bin as nest function with agg (result)
--Testcase 983:
SELECT sum(id), bin(sum(value2)) FROM s3;
ERROR:  stub bin(numeric) is called
CONTEXT:  PL/pgSQL function bin(numeric) line 3 at RAISE
-- select bin with non pushdown func and explicit constant (explain)
--Testcase 984:
EXPLAIN VERBOSE
SELECT bin(value2), pi(), 4.1 FROM s3 ORDER BY 1;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=72)
   Output: (bin((value2)::numeric)), '3.141592653589793'::double precision, 4.1
   Sort Key: (bin((s3.value2)::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=72)
         Output: (bin((value2)::numeric)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT bin(`value2`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.bin(value2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select bin with non pushdown func and explicit constant (explain)
--Testcase 985:
SELECT bin(value2), pi(), 4.1 FROM s3 ORDER BY 1;
   bin    |        pi         | ?column? 
----------+-------------------+----------
 1100100  | 3.141592653589793 |      4.1
 1100100  | 3.141592653589793 |      4.1
 1100100  | 3.141592653589793 |      4.1
 11001000 | 3.141592653589793 |      4.1
 11001000 | 3.141592653589793 |      4.1
 11001000 | 3.141592653589793 |      4.1
(6 rows)

-- select bin with order by (explain)
--Testcase 986:
EXPLAIN VERBOSE
SELECT id, bin(value2) FROM s3 ORDER BY id, bin(value2);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=36)
   Output: id, (bin((value2)::numeric))
   Sort Key: s3.id, (bin((s3.value2)::numeric))
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=36)
         Output: id, (bin((value2)::numeric))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, bin(`value2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.bin(value2) FROM public.s31mysql
(12 rows)

-- select bin with order by (result)
--Testcase 987:
SELECT id, bin(value2) FROM s3 ORDER BY id, bin(value2);
 id |   bin    
----+----------
  0 | 1100100
  1 | 1100100
  2 | 1100100
  3 | 11001000
  4 | 11001000
  5 | 11001000
(6 rows)

-- select bin with order by index (result)
--Testcase 988:
SELECT value1, bin(value2) FROM s3 ORDER BY 2,1;
 value1 |   bin    
--------+----------
    0.1 | 1100100
    0.2 | 1100100
    0.3 | 1100100
    1.1 | 11001000
    2.2 | 11001000
    3.3 | 11001000
(6 rows)

-- select bin with order by index (result)
--Testcase 989:
SELECT value1, bin(value2) FROM s3 ORDER BY 1,2;
 value1 |   bin    
--------+----------
    0.1 | 1100100
    0.2 | 1100100
    0.3 | 1100100
    1.1 | 11001000
    2.2 | 11001000
    3.3 | 11001000
(6 rows)

-- select bin with group by (explain)
--Testcase 990:
EXPLAIN VERBOSE
SELECT count(value1), bin(value2) FROM s3 GROUP BY bin(value2) ORDER BY 1,2;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=40)
   Output: (count(value1)), (bin((value2)::numeric))
   Sort Key: (count(s3.value1)), (bin((s3.value2)::numeric))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=40)
         Output: count(value1), (bin((value2)::numeric))
         Group Key: (bin((s3.value2)::numeric))
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=40)
               Output: (bin((value2)::numeric)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT bin(`value2`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.bin(value2), value1 FROM public.s31mysql
(15 rows)

-- select bin with group by (result)
--Testcase 991:
SELECT count(value1), bin(value2) FROM s3 GROUP BY bin(value2) ORDER BY 1,2;
 count |   bin    
-------+----------
     3 | 1100100
     3 | 11001000
(2 rows)

-- select bin with group by index (result)
--Testcase 992:
SELECT value1, bin(value2) FROM s3 GROUP BY 2,1  ORDER BY 1,2;
 value1 |   bin    
--------+----------
    0.1 | 1100100
    0.2 | 1100100
    0.3 | 1100100
    1.1 | 11001000
    2.2 | 11001000
    3.3 | 11001000
(6 rows)

-- select bin with group by having (explain)
--Testcase 993:
EXPLAIN VERBOSE
SELECT value1, bin(value2 - 1) FROM s3 GROUP BY 1, bin(value2 - 1) HAVING value1 > 1 ORDER BY 1,2;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1003.25..1003.75 rows=200 width=40)
   Output: value1, (bin(((value2 - 1))::numeric))
   Sort Key: s3.value1, (bin(((s3.value2 - 1))::numeric))
   ->  HashAggregate  (cost=942.60..995.60 rows=200 width=40)
         Output: value1, (bin(((value2 - 1))::numeric))
         Group Key: s3.value1, (bin(((s3.value2 - 1))::numeric))
         ->  Foreign Scan on public.s3  (cost=200.00..931.22 rows=2276 width=40)
               Output: value1, (bin(((value2 - 1))::numeric))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, bin((`value2` - 1)) FROM `test`.`s32` WHERE ((`value1` > 1))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, public.bin((value2 - 1)) FROM public.s31mysql WHERE ((value1 > 1::double precision))
(15 rows)

-- select bin with group by having (result)
--Testcase 994:
SELECT value1, bin(value2 - 1) FROM s3 GROUP BY 1, bin(value2 - 1) HAVING value1 > 1 ORDER BY 1,2;
 value1 |   bin    
--------+----------
    1.1 | 11000111
    2.2 | 11000111
    3.3 | 11000111
(3 rows)

-- select bin with group by index having (result)
--Testcase 995:
SELECT value1, bin(value2 - 1) FROM s3 GROUP BY 1,2 HAVING value1 > 1  ORDER BY 1,2;
 value1 |   bin    
--------+----------
    1.1 | 11000111
    2.2 | 11000111
    3.3 | 11000111
(3 rows)

--
-- test bit_length()
--
-- select bit_length (stub function, explain)
--Testcase 996:
EXPLAIN VERBOSE
SELECT bit_length(tag1), bit_length(str1), bit_length(str2) FROM s3;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..527.17 rows=6826 width=12)
   Output: ((octet_length(tag1) * 8)), ((octet_length(str1) * 8)), ((octet_length(str2) * 8))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT (octet_length(`tag1`) * 8), (octet_length(`str1`) * 8), (octet_length(`str2`) * 8) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT (octet_length(tag1) * 8), (octet_length(str1) * 8), (octet_length(str2) * 8) FROM public.s31mysql
(7 rows)

-- select bit_length (stub function, result)
--Testcase 997:
SELECT bit_length(tag1), bit_length(str1), bit_length(str2) FROM s3;
 bit_length | bit_length | bit_length 
------------+------------+------------
          8 |         72 |         72
          8 |         72 |         72
          8 |         72 |         72
          8 |         72 |         72
          8 |         72 |         72
          8 |         72 |         72
(6 rows)

-- select bit_length (stub function, pushdown constraints, explain)
--Testcase 998:
EXPLAIN VERBOSE
SELECT bit_length(tag1), bit_length(str1), bit_length(str2) FROM s3 WHERE value2 != 100;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=12)
   Output: ((octet_length(tag1) * 8)), ((octet_length(str1) * 8)), ((octet_length(str2) * 8))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT (octet_length(`tag1`) * 8), (octet_length(`str1`) * 8), (octet_length(`str2`) * 8) FROM `test`.`s32` WHERE ((`value2` <> 100))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT (octet_length(tag1) * 8), (octet_length(str1) * 8), (octet_length(str2) * 8) FROM public.s31mysql WHERE ((value2 <> 100))
(7 rows)

-- select bit_length (stub function, pushdown constraints, result)
--Testcase 999:
SELECT bit_length(tag1), bit_length(str1), bit_length(str2) FROM s3 WHERE value2 != 100;
 bit_length | bit_length | bit_length 
------------+------------+------------
          8 |         72 |         72
          8 |         72 |         72
          8 |         72 |         72
(3 rows)

-- select bit_length (stub function, bit_length in constraints, explain)
--Testcase 1000:
EXPLAIN VERBOSE
SELECT bit_length(tag1), bit_length(str1), bit_length(str2) FROM s3 WHERE value2 != 200;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..543.05 rows=6792 width=12)
   Output: ((octet_length(tag1) * 8)), ((octet_length(str1) * 8)), ((octet_length(str2) * 8))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT (octet_length(`tag1`) * 8), (octet_length(`str1`) * 8), (octet_length(`str2`) * 8) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT (octet_length(tag1) * 8), (octet_length(str1) * 8), (octet_length(str2) * 8) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select bit_length (stub function, bit_length in constraints, explain)
--Testcase 1001:
SELECT bit_length(tag1), bit_length(str1), bit_length(str2) FROM s3 WHERE value2 != 200;
 bit_length | bit_length | bit_length 
------------+------------+------------
          8 |         72 |         72
          8 |         72 |         72
          8 |         72 |         72
(3 rows)

-- select bit_length with non pushdown func and explicit constant (explain)
--Testcase 1002:
EXPLAIN VERBOSE
SELECT bit_length(str1), pi(), 4.1 FROM s3;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=44)
   Output: ((octet_length(str1) * 8)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT (octet_length(`str1`) * 8), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT (octet_length(str1) * 8), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select bit_length with non pushdown func and explicit constant (result)
--Testcase 1003:
SELECT bit_length(str1), pi(), 4.1 FROM s3;
 bit_length |        pi         | ?column? 
------------+-------------------+----------
         72 | 3.141592653589793 |      4.1
         72 | 3.141592653589793 |      4.1
         72 | 3.141592653589793 |      4.1
         72 | 3.141592653589793 |      4.1
         72 | 3.141592653589793 |      4.1
         72 | 3.141592653589793 |      4.1
(6 rows)

-- select bit_length with order by (explain)
--Testcase 1004:
EXPLAIN VERBOSE
SELECT value1, bit_length(str2) FROM s3 ORDER BY value1, bit_length(str2);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=12)
   Output: value1, ((octet_length(str2) * 8))
   Sort Key: s3.value1, ((octet_length(s3.str2) * 8))
   ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=12)
         Output: value1, ((octet_length(str2) * 8))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, (octet_length(`str2`) * 8) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, (octet_length(str2) * 8) FROM public.s31mysql
(12 rows)

-- select bit_length with order by (result)
--Testcase 1005:
SELECT value1, bit_length(str2) FROM s3 ORDER BY value1, bit_length(str2);
 value1 | bit_length 
--------+------------
    0.1 |         72
    0.2 |         72
    0.3 |         72
    1.1 |         72
    2.2 |         72
    3.3 |         72
(6 rows)

-- select bit_length with order by index (result)
--Testcase 1006:
SELECT value1, bit_length(str2) FROM s3 ORDER BY 2,1;
 value1 | bit_length 
--------+------------
    0.1 |         72
    0.2 |         72
    0.3 |         72
    1.1 |         72
    2.2 |         72
    3.3 |         72
(6 rows)

-- select bit_length with group by (explain)
--Testcase 1007:
EXPLAIN VERBOSE
SELECT count(value1), bit_length(str1) FROM s3 GROUP BY bit_length(str1) ORDER BY 1,2;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=12)
   Output: (count(value1)), ((octet_length(str1) * 8))
   Sort Key: (count(s3.value1)), ((octet_length(s3.str1) * 8))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=12)
         Output: count(value1), ((octet_length(str1) * 8))
         Group Key: ((octet_length(s3.str1) * 8))
         ->  Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=12)
               Output: ((octet_length(str1) * 8)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT (octet_length(`str1`) * 8), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT (octet_length(str1) * 8), value1 FROM public.s31mysql
(15 rows)

-- select bit_length with group by (result)
--Testcase 1008:
SELECT count(value1), bit_length(str1) FROM s3 GROUP BY bit_length(str1) ORDER BY 1,2;
 count | bit_length 
-------+------------
     6 |         72
(1 row)

-- select bit_length with group by index (result)
--Testcase 1009:
SELECT value1, bit_length(str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | bit_length 
--------+------------
    0.1 |         72
    0.2 |         72
    0.3 |         72
    1.1 |         72
    2.2 |         72
    3.3 |         72
(6 rows)

-- select bit_length with group by having (explain)
--Testcase 1010:
EXPLAIN VERBOSE
SELECT count(value1), bit_length(str1) FROM s3 GROUP BY bit_length(str1), str1 HAVING bit_length(str1) IS NOT NULL ORDER BY 1,2;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=553.77..554.27 rows=200 width=44)
   Output: (count(value1)), ((octet_length(str1) * 8)), str1
   Sort Key: (count(s3.value1)), ((octet_length(s3.str1) * 8))
   ->  HashAggregate  (cost=543.13..546.13 rows=200 width=44)
         Output: count(value1), ((octet_length(str1) * 8)), str1
         Group Key: ((octet_length(s3.str1) * 8)), s3.str1
         ->  Foreign Scan on public.s3  (cost=200.00..492.19 rows=6792 width=44)
               Output: ((octet_length(str1) * 8)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT (octet_length(`str1`) * 8), `str1`, `value1` FROM `test`.`s32` WHERE (((octet_length(`str1`) * 8) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT (octet_length(str1) * 8), str1, value1 FROM public.s31mysql WHERE (((octet_length(str1) * 8) IS NOT NULL))
(15 rows)

-- select bit_length with group by having (explain)
--Testcase 1011:
SELECT count(value1), bit_length(str1) FROM s3 GROUP BY bit_length(str1), str1 HAVING bit_length(str1) IS NOT NULL ORDER BY 1,2;
 count | bit_length 
-------+------------
     6 |         72
(1 row)

-- select bit_length with group by index having (result)
--Testcase 1012:
SELECT value1, bit_length(str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | bit_length 
--------+------------
    1.1 |         72
    2.2 |         72
    3.3 |         72
(3 rows)

--
-- test char()
--
-- select char (stub function, explain)
--Testcase 1013:
EXPLAIN VERBOSE
SELECT mysql_char(value2), mysql_char(value4) FROM s3 ORDER BY 2,1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort  (cost=4306.62..4323.68 rows=6826 width=64)
   Output: (mysql_char((value2)::bigint)), (mysql_char((value4)::bigint))
   Sort Key: (mysql_char((s3.value4)::bigint)), (mysql_char((s3.value2)::bigint))
   ->  Foreign Scan on public.s3  (cost=200.00..3871.91 rows=6826 width=64)
         Output: (mysql_char((value2)::bigint)), (mysql_char((value4)::bigint))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT char(`value2`), char(`value4`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_char(value2), public.mysql_char(value4) FROM public.s31mysql
(12 rows)

-- select char (stub function, result)
--Testcase 1014:
SELECT mysql_char(value2), mysql_char(value4) FROM s3 ORDER BY 2,1;
 mysql_char | mysql_char 
------------+------------
 d          | 
 d          | 
 d          | 
            | 8
            | 8
            | 8
(6 rows)

-- select char (stub function, not pushdown constraints, explain)
--Testcase 1015:
EXPLAIN VERBOSE
SELECT value1, mysql_char(value2) FROM s3 WHERE to_hex(value2) = '64';
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.31 rows=34 width=40)
   Output: value1, (mysql_char((value2)::bigint))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, char(`value2`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mysql_char(value2), value2 FROM public.s31mysql
(8 rows)

-- select char (stub function, not pushdown constraints, result)
--Testcase 1016:
SELECT value1, mysql_char(value2) FROM s3 WHERE to_hex(value2) = '64';
 value1 | mysql_char 
--------+------------
    0.1 | d
    0.2 | d
    0.3 | d
(3 rows)

-- select char (stub function, pushdown constraints, explain)
--Testcase 1017:
EXPLAIN VERBOSE
SELECT value1, mysql_char(value2) FROM s3 WHERE value2 != 200;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2156.14 rows=6792 width=40)
   Output: value1, (mysql_char((value2)::bigint))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, char(`value2`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mysql_char(value2) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select char (stub function, pushdown constraints, result)
--Testcase 1018:
SELECT value1, mysql_char(value2) FROM s3 WHERE value2 != 200;
 value1 | mysql_char 
--------+------------
    0.1 | d
    0.2 | d
    0.3 | d
(3 rows)

-- select char with non pushdown func and explicit constant (explain)
--Testcase 1019:
EXPLAIN VERBOSE
SELECT mysql_char(value2), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=72)
   Output: (mysql_char((value2)::bigint)), '3.141592653589793'::double precision, 4.1
   Sort Key: (mysql_char((s3.value2)::bigint)) DESC
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=72)
         Output: (mysql_char((value2)::bigint)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT char(`value2`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_char(value2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select char with non pushdown func and explicit constant (result)
--Testcase 1020:
SELECT mysql_char(value2), pi(), 4.1 FROM s3 ORDER BY 1 DESC;
 mysql_char |        pi         | ?column? 
------------+-------------------+----------
 d          | 3.141592653589793 |      4.1
 d          | 3.141592653589793 |      4.1
 d          | 3.141592653589793 |      4.1
            | 3.141592653589793 |      4.1
            | 3.141592653589793 |      4.1
            | 3.141592653589793 |      4.1
(6 rows)

-- select char with order by (explain)
--Testcase 1021:
EXPLAIN VERBOSE
SELECT value1, mysql_char(value2) FROM s3 ORDER BY value1, mysql_char(value2);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=40)
   Output: value1, (mysql_char((value2)::bigint))
   Sort Key: s3.value1, (mysql_char((s3.value2)::bigint))
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=40)
         Output: value1, (mysql_char((value2)::bigint))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, char(`value2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.mysql_char(value2) FROM public.s31mysql
(12 rows)

-- select char with order by (result)
--Testcase 1022:
SELECT value1, mysql_char(value2) FROM s3 ORDER BY value1, mysql_char(value2);
 value1 | mysql_char 
--------+------------
    0.1 | d
    0.2 | d
    0.3 | d
    1.1 | 
    2.2 | 
    3.3 | 
(6 rows)

-- select char with order by index (result)
--Testcase 1023:
SELECT value1, mysql_char(value2) FROM s3 ORDER BY 1,2;
 value1 | mysql_char 
--------+------------
    0.1 | d
    0.2 | d
    0.3 | d
    1.1 | 
    2.2 | 
    3.3 | 
(6 rows)

-- select char with group by (explain)
--Testcase 1024:
EXPLAIN VERBOSE
SELECT value1, mysql_char(value2) FROM s3 GROUP BY value1, mysql_char(value2) ORDER BY 1,2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=40)
   Output: value1, (mysql_char((value2)::bigint))
   Sort Key: s3.value1, (mysql_char((s3.value2)::bigint))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=40)
         Output: value1, (mysql_char((value2)::bigint))
         Group Key: s3.value1, (mysql_char((s3.value2)::bigint))
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=40)
               Output: value1, (mysql_char((value2)::bigint))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, char(`value2`) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, public.mysql_char(value2) FROM public.s31mysql
(15 rows)

-- select char with group by (result)
--Testcase 1025:
SELECT value1, mysql_char(value2) FROM s3 GROUP BY value1, mysql_char(value2) ORDER BY 1,2;
 value1 | mysql_char 
--------+------------
    0.1 | d
    0.2 | d
    0.3 | d
    1.1 | 
    2.2 | 
    3.3 | 
(6 rows)

-- select char with group by index (result)
--Testcase 1026:
SELECT value1, mysql_char(value2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | mysql_char 
--------+------------
    0.1 | d
    0.2 | d
    0.3 | d
    1.1 | 
    2.2 | 
    3.3 | 
(6 rows)

-- select char with group by having (explain)
--Testcase 1027:
EXPLAIN VERBOSE
SELECT value1, mysql_char(value2) FROM s3 GROUP BY mysql_char(value2), value2, value1 HAVING mysql_char(value2) IS NOT NULL ORDER BY 1,2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort  (cost=2309.89..2310.38 rows=199 width=44)
   Output: value1, (mysql_char((value2)::bigint)), value2
   Sort Key: s3.value1, (mysql_char((s3.value2)::bigint))
   ->  HashAggregate  (cost=2199.54..2302.29 rows=199 width=44)
         Output: value1, (mysql_char((value2)::bigint)), value2
         Group Key: s3.value1, (mysql_char((s3.value2)::bigint)), s3.value2
         Filter: ((mysql_char((s3.value2)::bigint)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=44)
               Output: value1, (mysql_char((value2)::bigint)), value2
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, char(`value2`), `value2` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, public.mysql_char(value2), value2 FROM public.s31mysql
(16 rows)

-- select char with group by having (result)
--Testcase 1028:
SELECT value1, mysql_char(value2) FROM s3 GROUP BY mysql_char(value2), value2, value1 HAVING mysql_char(value2) IS NOT NULL ORDER BY 1,2;
 value1 | mysql_char 
--------+------------
    0.1 | d
    0.2 | d
    0.3 | d
    1.1 | 
    2.2 | 
    3.3 | 
(6 rows)

-- select char with group by index having (result)
--Testcase 1029:
SELECT value1, mysql_char(value2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | mysql_char 
--------+------------
    1.1 | 
    2.2 | 
    3.3 | 
(3 rows)

--
-- test char_length()
--
-- select char_length (stub function, explain)
--Testcase 1030:
EXPLAIN VERBOSE
SELECT char_length(tag1), char_length(str1), char_length(str2) FROM s3;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=12)
   Output: (char_length(tag1)), (char_length(str1)), (char_length(str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT char_length(`tag1`), char_length(`str1`), char_length(`str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT char_length(tag1), char_length(str1), char_length(str2) FROM public.s31mysql
(7 rows)

-- select char_length (stub function, result)
--Testcase 1031:
SELECT char_length(tag1), char_length(str1), char_length(str2) FROM s3;
 char_length | char_length | char_length 
-------------+-------------+-------------
           1 |           9 |           9
           1 |           9 |           9
           1 |           9 |           9
           1 |           9 |           9
           1 |           9 |           9
           1 |           9 |           9
(6 rows)

-- select char_length (stub function, not pushdown constraints, explain)
--Testcase 1032:
EXPLAIN VERBOSE
SELECT id, char_length(str1) FROM s3 WHERE to_hex(value2) = '64';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=8)
   Output: id, (char_length(str1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id`, char_length(`str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id, char_length(str1), value2 FROM public.s31mysql
(8 rows)

-- select char_length (stub function, not pushdown constraints, explain)
--Testcase 1033:
SELECT id, char_length(str1) FROM s3 WHERE to_hex(value2) = '64';
 id | char_length 
----+-------------
  0 |           9
  1 |           9
  2 |           9
(3 rows)

-- select char_length (stub function, char_length in constraints, explain)
--Testcase 1034:
EXPLAIN VERBOSE
SELECT id, char_length(str1) FROM s3 WHERE char_length(str1) > 0 ORDER BY 1,2;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=500.51..506.20 rows=2276 width=8)
   Output: id, (char_length(str1))
   Sort Key: s3.id, (char_length(s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..373.60 rows=2276 width=8)
         Output: id, (char_length(str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, char_length(`str1`) FROM `test`.`s32` WHERE ((char_length(`str1`) > 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, char_length(str1) FROM public.s31mysql WHERE ((char_length(str1) > 0))
(12 rows)

-- select char_length (stub function, char_length in constraints, result)
--Testcase 1035:
SELECT id, char_length(str1) FROM s3 WHERE char_length(str1) > 0 ORDER BY 1,2;
 id | char_length 
----+-------------
  0 |           9
  1 |           9
  2 |           9
  3 |           9
  4 |           9
  5 |           9
(6 rows)

-- select char_length with non pushdown func and explicit constant (explain)
--Testcase 1036:
EXPLAIN VERBOSE
SELECT char_length(str1), pi(), 4.1 FROM s3;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=44)
   Output: (char_length(str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT char_length(`str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT char_length(str1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select char_length with non pushdown func and explicit constant (result)
--Testcase 1037:
SELECT char_length(str1), pi(), 4.1 FROM s3;
 char_length |        pi         | ?column? 
-------------+-------------------+----------
           9 | 3.141592653589793 |      4.1
           9 | 3.141592653589793 |      4.1
           9 | 3.141592653589793 |      4.1
           9 | 3.141592653589793 |      4.1
           9 | 3.141592653589793 |      4.1
           9 | 3.141592653589793 |      4.1
(6 rows)

-- select char_length with order by (explain)
--Testcase 1038:
EXPLAIN VERBOSE
SELECT value1, char_length(str1) FROM s3 ORDER BY char_length(str1), 1 DESC;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=12)
   Output: value1, (char_length(str1))
   Sort Key: (char_length(s3.str1)), s3.value1 DESC
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=12)
         Output: value1, (char_length(str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, char_length(`str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, char_length(str1) FROM public.s31mysql
(12 rows)

-- select char_length with order by (result)
--Testcase 1039:
SELECT value1, char_length(str1) FROM s3 ORDER BY char_length(str1), 1 DESC;
 value1 | char_length 
--------+-------------
    3.3 |           9
    2.2 |           9
    1.1 |           9
    0.3 |           9
    0.2 |           9
    0.1 |           9
(6 rows)

-- select char_length with group by (explain)
--Testcase 1040:
EXPLAIN VERBOSE
SELECT count(value1), char_length(str1) FROM s3 GROUP BY char_length(str1) ORDER BY 1,2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=12)
   Output: (count(value1)), (char_length(str1))
   Sort Key: (count(s3.value1)), (char_length(s3.str1))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=12)
         Output: count(value1), (char_length(str1))
         Group Key: (char_length(s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=12)
               Output: (char_length(str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT char_length(`str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT char_length(str1), value1 FROM public.s31mysql
(15 rows)

-- select char_length with group by (result)
--Testcase 1041:
SELECT count(value1), char_length(str1) FROM s3 GROUP BY char_length(str1) ORDER BY 1,2;
 count | char_length 
-------+-------------
     6 |           9
(1 row)

-- select char_length with group by index (result)
--Testcase 1042:
SELECT value1, char_length(str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | char_length 
--------+-------------
    0.1 |           9
    0.2 |           9
    0.3 |           9
    1.1 |           9
    2.2 |           9
    3.3 |           9
(6 rows)

-- select char_length with group by having (explain)
--Testcase 1043:
EXPLAIN VERBOSE
SELECT count(value1), char_length(str1) FROM s3 GROUP BY char_length(str1), str1 HAVING char_length(str1) > 0 ORDER BY 1,2;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=400.81..401.31 rows=200 width=44)
   Output: (count(value1)), (char_length(str1)), str1
   Sort Key: (count(s3.value1)), (char_length(s3.str1))
   ->  HashAggregate  (cost=390.67..393.17 rows=200 width=44)
         Output: count(value1), (char_length(str1)), str1
         Group Key: (char_length(s3.str1)), s3.str1
         ->  Foreign Scan on public.s3  (cost=200.00..373.60 rows=2276 width=44)
               Output: (char_length(str1)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT char_length(`str1`), `str1`, `value1` FROM `test`.`s32` WHERE ((char_length(`str1`) > 0))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT char_length(str1), str1, value1 FROM public.s31mysql WHERE ((char_length(str1) > 0))
(15 rows)

-- select char_length with group by having (result)
--Testcase 1044:
SELECT count(value1), char_length(str1) FROM s3 GROUP BY char_length(str1), str1 HAVING char_length(str1) > 0 ORDER BY 1,2;
 count | char_length 
-------+-------------
     6 |           9
(1 row)

-- select char_length with group by index having (result)
--Testcase 1045:
SELECT value1, char_length(str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | char_length 
--------+-------------
    1.1 |           9
    2.2 |           9
    3.3 |           9
(3 rows)

--
-- test character_length()
--
-- select character_length (stub function, explain)
--Testcase 1046:
EXPLAIN VERBOSE
SELECT character_length(tag1), character_length(str1), character_length(str2) FROM s3;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=12)
   Output: (character_length(tag1)), (character_length(str1)), (character_length(str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT character_length(`tag1`), character_length(`str1`), character_length(`str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT character_length(tag1), character_length(str1), character_length(str2) FROM public.s31mysql
(7 rows)

-- select character_length (stub function, result)
--Testcase 1047:
SELECT character_length(tag1), character_length(str1), character_length(str2) FROM s3;
 character_length | character_length | character_length 
------------------+------------------+------------------
                1 |                9 |                9
                1 |                9 |                9
                1 |                9 |                9
                1 |                9 |                9
                1 |                9 |                9
                1 |                9 |                9
(6 rows)

-- select character_length (stub function, not pushdown constraints, explain)
--Testcase 1048:
EXPLAIN VERBOSE
SELECT id, character_length(str1) FROM s3 WHERE to_hex(value2) = '64';
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=8)
   Output: id, (character_length(str1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id`, character_length(`str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id, character_length(str1), value2 FROM public.s31mysql
(8 rows)

-- select character_length (stub function, not pushdown constraints, explain)
--Testcase 1049:
SELECT id, character_length(str1) FROM s3 WHERE to_hex(value2) = '64';
 id | character_length 
----+------------------
  0 |                9
  1 |                9
  2 |                9
(3 rows)

-- select character_length (stub function, character_length in constraints, explain)
--Testcase 1050:
EXPLAIN VERBOSE
SELECT id, character_length(str1) FROM s3 WHERE character_length(str1) > 0 ORDER BY 1,2;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=500.51..506.20 rows=2276 width=8)
   Output: id, (character_length(str1))
   Sort Key: s3.id, (character_length(s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..373.60 rows=2276 width=8)
         Output: id, (character_length(str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, character_length(`str1`) FROM `test`.`s32` WHERE ((character_length(`str1`) > 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, character_length(str1) FROM public.s31mysql WHERE ((character_length(str1) > 0))
(12 rows)

-- select character_length (stub function, character_length in constraints, result)
--Testcase 1051:
SELECT id, character_length(str1) FROM s3 WHERE character_length(str1) > 0 ORDER BY 1,2;
 id | character_length 
----+------------------
  0 |                9
  1 |                9
  2 |                9
  3 |                9
  4 |                9
  5 |                9
(6 rows)

-- select character_length with non pushdown func and explicit constant (explain)
--Testcase 1052:
EXPLAIN VERBOSE
SELECT character_length(str1), pi(), 4.1 FROM s3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=44)
   Output: (character_length(str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT character_length(`str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT character_length(str1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select character_length with non pushdown func and explicit constant (result)
--Testcase 1053:
SELECT character_length(str1), pi(), 4.1 FROM s3;
 character_length |        pi         | ?column? 
------------------+-------------------+----------
                9 | 3.141592653589793 |      4.1
                9 | 3.141592653589793 |      4.1
                9 | 3.141592653589793 |      4.1
                9 | 3.141592653589793 |      4.1
                9 | 3.141592653589793 |      4.1
                9 | 3.141592653589793 |      4.1
(6 rows)

-- select character_length with order by (explain)
--Testcase 1054:
EXPLAIN VERBOSE
SELECT value1, character_length(str1) FROM s3 ORDER BY character_length(str1), 1 DESC;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=12)
   Output: value1, (character_length(str1))
   Sort Key: (character_length(s3.str1)), s3.value1 DESC
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=12)
         Output: value1, (character_length(str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, character_length(`str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, character_length(str1) FROM public.s31mysql
(12 rows)

-- select character_length with order by (result)
--Testcase 1055:
SELECT value1, character_length(str1) FROM s3 ORDER BY character_length(str1), 1 DESC;
 value1 | character_length 
--------+------------------
    3.3 |                9
    2.2 |                9
    1.1 |                9
    0.3 |                9
    0.2 |                9
    0.1 |                9
(6 rows)

-- select character_length with group by (explain)
--Testcase 1056:
EXPLAIN VERBOSE
SELECT count(value1), character_length(str1) FROM s3 GROUP BY character_length(str1) ORDER BY 1,2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=12)
   Output: (count(value1)), (character_length(str1))
   Sort Key: (count(s3.value1)), (character_length(s3.str1))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=12)
         Output: count(value1), (character_length(str1))
         Group Key: (character_length(s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=12)
               Output: (character_length(str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT character_length(`str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT character_length(str1), value1 FROM public.s31mysql
(15 rows)

-- select character_length with group by (result)
--Testcase 1057:
SELECT count(value1), character_length(str1) FROM s3 GROUP BY character_length(str1) ORDER BY 1,2;
 count | character_length 
-------+------------------
     6 |                9
(1 row)

-- select character_length with group by index (result)
--Testcase 1058:
SELECT value1, character_length(str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | character_length 
--------+------------------
    0.1 |                9
    0.2 |                9
    0.3 |                9
    1.1 |                9
    2.2 |                9
    3.3 |                9
(6 rows)

-- select character_length with group by having (explain)
--Testcase 1059:
EXPLAIN VERBOSE
SELECT count(value1), character_length(str1) FROM s3 GROUP BY character_length(str1), str1 HAVING character_length(str1) > 0 ORDER BY 1,2;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=400.81..401.31 rows=200 width=44)
   Output: (count(value1)), (character_length(str1)), str1
   Sort Key: (count(s3.value1)), (character_length(s3.str1))
   ->  HashAggregate  (cost=390.67..393.17 rows=200 width=44)
         Output: count(value1), (character_length(str1)), str1
         Group Key: (character_length(s3.str1)), s3.str1
         ->  Foreign Scan on public.s3  (cost=200.00..373.60 rows=2276 width=44)
               Output: (character_length(str1)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT character_length(`str1`), `str1`, `value1` FROM `test`.`s32` WHERE ((character_length(`str1`) > 0))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT character_length(str1), str1, value1 FROM public.s31mysql WHERE ((character_length(str1) > 0))
(15 rows)

-- select character_length with group by having (result)
--Testcase 1060:
SELECT count(value1), character_length(str1) FROM s3 GROUP BY character_length(str1), str1 HAVING character_length(str1) > 0 ORDER BY 1,2;
 count | character_length 
-------+------------------
     6 |                9
(1 row)

-- select character_length with group by index having (result)
--Testcase 1061:
SELECT value1, character_length(str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | character_length 
--------+------------------
    1.1 |                9
    2.2 |                9
    3.3 |                9
(3 rows)

--
-- test concat()
--
-- select concat (stub function, explain)
--Testcase 1062:
EXPLAIN VERBOSE
SELECT concat(id), concat(tag1), concat(value1), concat(value2), concat(str1) FROM s3 ORDER BY 1,2,3,4,5;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=944.81..961.88 rows=6826 width=160)
   Output: (concat(id)), (concat(tag1)), (concat(value1)), (concat(value2)), (concat(str1))
   Sort Key: (concat(s3.id)), (concat(s3.tag1)), (concat(s3.value1)), (concat(s3.value2)), (concat(s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..510.10 rows=6826 width=160)
         Output: concat(id), concat(tag1), concat(value1), concat(value2), concat(str1)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value1`, `value2`, `str1` FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, tag1, value1, value2, str1 FROM public.s31mysql
(12 rows)

-- select concat (stub function, result)
--Testcase 1063:
SELECT concat(id), concat(tag1), concat(value1), concat(value2), concat(str1) FROM s3 ORDER BY 1,2,3,4,5;
 concat | concat | concat | concat |  concat   
--------+--------+--------+--------+-----------
 0      | a      | 0.1    | 100    | ---XYZ---
 1      | a      | 0.2    | 100    | ---XYZ---
 2      | a      | 0.3    | 100    | ---XYZ---
 3      | b      | 1.1    | 200    | ---XYZ---
 4      | b      | 2.2    | 200    | ---XYZ---
 5      | b      | 3.3    | 200    | ---XYZ---
(6 rows)

-- select concat (stub function, pushdown constraints, explain)
--Testcase 1064:
EXPLAIN VERBOSE
SELECT id, concat(str1, str2) FROM s3 WHERE value2 != 100;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=36)
   Output: id, concat(str1, str2)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id`, `value2`, `str1`, `str2` FROM `test`.`s32` WHERE ((`value2` <> 100))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id, str1, str2 FROM public.s31mysql WHERE ((value2 <> 100))
(7 rows)

-- select concat (stub function, pushdown constraints, result)
--Testcase 1065:
SELECT id, concat(str1, str2) FROM s3 WHERE value2 != 100;
 id |       concat       
----+--------------------
  3 | ---XYZ---   XYZ   
  4 | ---XYZ---   XYZ   
  5 | ---XYZ---   XYZ   
(3 rows)

-- select concat (stub function, concat in constraints, explain)
--Testcase 1066:
EXPLAIN VERBOSE
SELECT id, concat(str1, str2) FROM s3 WHERE concat(str1, str2) != 'XYZ' ORDER BY 1,2;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Sort  (cost=907.85..924.83 rows=6792 width=36)
   Output: id, (concat(str1, str2))
   Sort Key: s3.id, (concat(s3.str1, s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..475.55 rows=6792 width=36)
         Output: id, concat(str1, str2)
         Filter: (concat(s3.str1, s3.str2) <> 'XYZ'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, `str1`, `str2` FROM `test`.`s32` WHERE ((concat(`str1`, `str2`) <> 'XYZ'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, str1, str2 FROM public.s31mysql
(13 rows)

-- select concat (stub function, concat in constraints, explain)
--Testcase 1067:
SELECT id, concat(str1, str2) FROM s3 WHERE concat(str1, str2) != 'XYZ' ORDER BY 1,2;
 id |       concat       
----+--------------------
  0 | ---XYZ---   XYZ   
  1 | ---XYZ---   XYZ   
  2 | ---XYZ---   XYZ   
  3 | ---XYZ---   XYZ   
  4 | ---XYZ---   XYZ   
  5 | ---XYZ---   XYZ   
(6 rows)

-- select concat as nest function with agg (pushdown, explain)
--Testcase 1068:
EXPLAIN VERBOSE
SELECT id, concat(sum(value1), str1) FROM s3 GROUP BY id, str1 ORDER BY 1,2;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort  (cost=187.29..187.29 rows=1 width=68)
   Output: id, (concat((sum(value1)), str1)), str1
   Sort Key: s3.id, (concat((sum(s3.value1)), s3.str1))
   ->  Foreign Scan  (cost=127.06..187.28 rows=1 width=68)
         Output: id, concat((sum(value1)), str1), str1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.s3__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `id`, sum(`value1`), `str1` FROM `test`.`s32` GROUP BY 1, 3
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT id, sum(value1), str1 FROM public.s31mysql GROUP BY 1, 3
(16 rows)

-- select concat as nest function with agg (pushdown, result)
--Testcase 1069:
SELECT id, concat(sum(value1), str1) FROM s3 GROUP BY id, str1 ORDER BY 1,2;
 id |            concat            
----+------------------------------
  0 | 0.10000000149011612---XYZ---
  1 | 0.20000000298023224---XYZ---
  2 | 0.30000001192092896---XYZ---
  3 | 1.100000023841858---XYZ---
  4 | 2.200000047683716---XYZ---
  5 | 3.299999952316284---XYZ---
(6 rows)

-- select concat with non pushdown func and explicit constant (explain)
--Testcase 1070:
EXPLAIN VERBOSE
SELECT concat(str1, str2), pi(), 4.1 FROM s3;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: concat(str1, str2), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `str1`, `str2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT str1, str2 FROM public.s31mysql
(7 rows)

-- select concat with non pushdown func and explicit constant (result)
--Testcase 1071:
SELECT concat(str1, str2), pi(), 4.1 FROM s3;
       concat       |        pi         | ?column? 
--------------------+-------------------+----------
 ---XYZ---   XYZ    | 3.141592653589793 |      4.1
 ---XYZ---   XYZ    | 3.141592653589793 |      4.1
 ---XYZ---   XYZ    | 3.141592653589793 |      4.1
 ---XYZ---   XYZ    | 3.141592653589793 |      4.1
 ---XYZ---   XYZ    | 3.141592653589793 |      4.1
 ---XYZ---   XYZ    | 3.141592653589793 |      4.1
(6 rows)

-- select concat with order by (explain)
--Testcase 1072:
EXPLAIN VERBOSE
SELECT value1, concat(value2, str2) FROM s3 ORDER BY value1, concat(value2, str2);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (concat(value2, str2))
   Sort Key: s3.value1, (concat(s3.value2, s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, concat(value2, str2)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, `value2`, `str2` FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, value2, str2 FROM public.s31mysql
(12 rows)

-- select concat with order by (result)
--Testcase 1073:
SELECT value1, concat(value2, str2) FROM s3 ORDER BY value1, concat(value2, str2);
 value1 |    concat    
--------+--------------
    0.1 | 100   XYZ   
    0.2 | 100   XYZ   
    0.3 | 100   XYZ   
    1.1 | 200   XYZ   
    2.2 | 200   XYZ   
    3.3 | 200   XYZ   
(6 rows)

-- select concat with order by index (result)
--Testcase 1074:
SELECT value1, concat(value2, str2) FROM s3 ORDER BY 2,1;
 value1 |    concat    
--------+--------------
    0.1 | 100   XYZ   
    0.2 | 100   XYZ   
    0.3 | 100   XYZ   
    1.1 | 200   XYZ   
    2.2 | 200   XYZ   
    3.3 | 200   XYZ   
(6 rows)

-- select concat with group by (explain)
--Testcase 1075:
EXPLAIN VERBOSE
SELECT count(value1), concat(str1, str2) FROM s3 GROUP BY concat(str1, str2) ORDER BY 1,2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), (concat(str1, str2))
   Sort Key: (count(s3.value1)), (concat(s3.str1, s3.str2))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), (concat(str1, str2))
         Group Key: concat(s3.str1, s3.str2)
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: concat(str1, str2), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, `str1`, `str2` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, str1, str2 FROM public.s31mysql
(15 rows)

-- select concat with group by (result)
--Testcase 1076:
SELECT count(value1), concat(str1, str2) FROM s3 GROUP BY concat(str1, str2) ORDER BY 1,2;
 count |       concat       
-------+--------------------
     6 | ---XYZ---   XYZ   
(1 row)

-- select concat with group by index (result)
--Testcase 1077:
SELECT value1, concat(str1, str2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |       concat       
--------+--------------------
    0.1 | ---XYZ---   XYZ   
    0.2 | ---XYZ---   XYZ   
    0.3 | ---XYZ---   XYZ   
    1.1 | ---XYZ---   XYZ   
    2.2 | ---XYZ---   XYZ   
    3.3 | ---XYZ---   XYZ   
(6 rows)

-- select concat with group by having (explain)
--Testcase 1078:
EXPLAIN VERBOSE
SELECT count(value1), concat(str1, str2) FROM s3 GROUP BY concat(str1, str2) HAVING concat(str1, str2) IS NOT NULL ORDER BY 1,2;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=502.59..503.09 rows=200 width=40)
   Output: (count(value1)), (concat(str1, str2))
   Sort Key: (count(s3.value1)), (concat(s3.str1, s3.str2))
   ->  HashAggregate  (cost=492.45..494.95 rows=200 width=40)
         Output: count(value1), (concat(str1, str2))
         Group Key: concat(s3.str1, s3.str2)
         ->  Foreign Scan on public.s3  (cost=200.00..458.49 rows=6792 width=40)
               Output: concat(str1, str2), value1
               Filter: (concat(s3.str1, s3.str2) IS NOT NULL)
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, `str1`, `str2` FROM `test`.`s32` WHERE ((concat(`str1`, `str2`) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, str1, str2 FROM public.s31mysql
(16 rows)

-- select concat with group by having (explain)
--Testcase 1079:
SELECT count(value1), concat(str1, str2) FROM s3 GROUP BY concat(str1, str2) HAVING concat(str1, str2) IS NOT NULL ORDER BY 1,2;
 count |       concat       
-------+--------------------
     6 | ---XYZ---   XYZ   
(1 row)

-- select concat with group by index having (result)
--Testcase 1080:
SELECT value1, concat(str1, str2, value1, value2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |          concat          
--------+--------------------------
    1.1 | ---XYZ---   XYZ   1.1200
    2.2 | ---XYZ---   XYZ   2.2200
    3.3 | ---XYZ---   XYZ   3.3200
(3 rows)

--
-- test concat_ws()
--
-- select concat_ws (stub function, explain)
--Testcase 1081:
EXPLAIN VERBOSE
SELECT concat_ws(',', str2, str1, tag1, value2) FROM s3 ORDER BY 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=32)
   Output: (concat_ws(','::text, str2, str1, tag1, value2))
   Sort Key: (concat_ws(','::text, s3.str2, s3.str1, s3.tag1, s3.value2))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=32)
         Output: concat_ws(','::text, str2, str1, tag1, value2)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value2`, `str1`, `str2` FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT tag1, value2, str1, str2 FROM public.s31mysql
(12 rows)

-- select concat_ws (stub function, explain)
--Testcase 1082:
SELECT concat_ws(',', str2, str1, tag1, value2) FROM s3 ORDER BY 1;
         concat_ws         
---------------------------
    XYZ   ,---XYZ---,a,100
    XYZ   ,---XYZ---,a,100
    XYZ   ,---XYZ---,a,100
    XYZ   ,---XYZ---,b,200
    XYZ   ,---XYZ---,b,200
    XYZ   ,---XYZ---,b,200
(6 rows)

-- select concat_ws (stub function, not pushdown constraints, explain)
--Testcase 1083:
EXPLAIN VERBOSE
SELECT value1, concat_ws('.', str2, str1) FROM s3 WHERE to_hex(value2) = '64';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, concat_ws('.'::text, str2, str1)
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, `value2`, `str1`, `str2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, value2, str1, str2 FROM public.s31mysql
(8 rows)

-- select concat_ws (stub function, not pushdown constraints, result)
--Testcase 1084:
SELECT value1, concat_ws('.', str2, str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 |      concat_ws      
--------+---------------------
    0.1 |    XYZ   .---XYZ---
    0.2 |    XYZ   .---XYZ---
    0.3 |    XYZ   .---XYZ---
(3 rows)

-- select concat_ws (stub function, pushdown constraints, explain)
--Testcase 1085:
EXPLAIN VERBOSE
SELECT value1, concat_ws('.', str2, str1) FROM s3 WHERE value2 != 200;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, concat_ws('.'::text, str2, str1)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, `value2`, `str1`, `str2` FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, str1, str2 FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select concat_ws (stub function, pushdown constraints, result)
--Testcase 1086:
SELECT value1, concat_ws('.', str2, str1) FROM s3 WHERE value2 != 200;
 value1 |      concat_ws      
--------+---------------------
    0.1 |    XYZ   .---XYZ---
    0.2 |    XYZ   .---XYZ---
    0.3 |    XYZ   .---XYZ---
(3 rows)

-- select concat_ws with non pushdown func and explicit constant (explain)
--Testcase 1087:
EXPLAIN VERBOSE
SELECT concat_ws('.', str2, str1), pi(), 4.1 FROM s3;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: concat_ws('.'::text, str2, str1), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `str1`, `str2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT str1, str2 FROM public.s31mysql
(7 rows)

-- select concat_ws with non pushdown func and explicit constant (result)
--Testcase 1088:
SELECT concat_ws('.', str2, str1), pi(), 4.1 FROM s3;
      concat_ws      |        pi         | ?column? 
---------------------+-------------------+----------
    XYZ   .---XYZ--- | 3.141592653589793 |      4.1
    XYZ   .---XYZ--- | 3.141592653589793 |      4.1
    XYZ   .---XYZ--- | 3.141592653589793 |      4.1
    XYZ   .---XYZ--- | 3.141592653589793 |      4.1
    XYZ   .---XYZ--- | 3.141592653589793 |      4.1
    XYZ   .---XYZ--- | 3.141592653589793 |      4.1
(6 rows)

-- select concat_ws with order by (explain)
--Testcase 1089:
EXPLAIN VERBOSE
SELECT value1, concat_ws('.', str2, str1) FROM s3 ORDER BY value1, concat_ws('.', str2, str1);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (concat_ws('.'::text, str2, str1))
   Sort Key: s3.value1, (concat_ws('.'::text, s3.str2, s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, concat_ws('.'::text, str2, str1)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, `str1`, `str2` FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, str1, str2 FROM public.s31mysql
(12 rows)

-- select concat_ws with order by (result)
--Testcase 1090:
SELECT value1, concat_ws('.', str2, str1) FROM s3 ORDER BY value1, concat_ws('.', str2, str1);
 value1 |      concat_ws      
--------+---------------------
    0.1 |    XYZ   .---XYZ---
    0.2 |    XYZ   .---XYZ---
    0.3 |    XYZ   .---XYZ---
    1.1 |    XYZ   .---XYZ---
    2.2 |    XYZ   .---XYZ---
    3.3 |    XYZ   .---XYZ---
(6 rows)

-- select concat_ws with order by index (result)
--Testcase 1091:
SELECT value1, concat_ws('.', str2, str1) FROM s3 ORDER BY 2,1;
 value1 |      concat_ws      
--------+---------------------
    0.1 |    XYZ   .---XYZ---
    0.2 |    XYZ   .---XYZ---
    0.3 |    XYZ   .---XYZ---
    1.1 |    XYZ   .---XYZ---
    2.2 |    XYZ   .---XYZ---
    3.3 |    XYZ   .---XYZ---
(6 rows)

-- select concat_ws with order by index (result)
--Testcase 1092:
SELECT value1, concat_ws('.', value1, value4) FROM s3 ORDER BY 1,2;
 value1 | concat_ws 
--------+-----------
    0.1 | 0.1.-100
    0.2 | 0.2.-100
    0.3 | 0.3.-100
    1.1 | 1.1.-200
    2.2 | 2.2.-200
    3.3 | 3.3.-200
(6 rows)

-- select concat_ws with group by (explain)
--Testcase 1093:
EXPLAIN VERBOSE
SELECT count(value1), concat_ws('.', str2, str1) FROM s3 GROUP BY concat_ws('.', str2, str1) ORDER BY 1,2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), (concat_ws('.'::text, str2, str1))
   Sort Key: (count(s3.value1)), (concat_ws('.'::text, s3.str2, s3.str1))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), (concat_ws('.'::text, str2, str1))
         Group Key: concat_ws('.'::text, s3.str2, s3.str1)
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: concat_ws('.'::text, str2, str1), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, `str1`, `str2` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, str1, str2 FROM public.s31mysql
(15 rows)

-- select concat_ws with group by (result)
--Testcase 1094:
SELECT count(value1), concat_ws('.', str2, str1) FROM s3 GROUP BY concat_ws('.', str2, str1) ORDER BY 1,2;
 count |      concat_ws      
-------+---------------------
     6 |    XYZ   .---XYZ---
(1 row)

-- select concat_ws with group by index (result)
--Testcase 1095:
SELECT value1, concat_ws('.', str2, str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |      concat_ws      
--------+---------------------
    0.1 |    XYZ   .---XYZ---
    0.2 |    XYZ   .---XYZ---
    0.3 |    XYZ   .---XYZ---
    1.1 |    XYZ   .---XYZ---
    2.2 |    XYZ   .---XYZ---
    3.3 |    XYZ   .---XYZ---
(6 rows)

-- select concat_ws with group by having (explain)
--Testcase 1096:
EXPLAIN VERBOSE
SELECT count(value1), concat_ws('.', str2, str1) FROM s3 GROUP BY concat_ws('.', str2, str1) HAVING concat_ws('.', str2, str1) IS NOT NULL ORDER BY 1,2;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=502.59..503.09 rows=200 width=40)
   Output: (count(value1)), (concat_ws('.'::text, str2, str1))
   Sort Key: (count(s3.value1)), (concat_ws('.'::text, s3.str2, s3.str1))
   ->  HashAggregate  (cost=492.45..494.95 rows=200 width=40)
         Output: count(value1), (concat_ws('.'::text, str2, str1))
         Group Key: concat_ws('.'::text, s3.str2, s3.str1)
         ->  Foreign Scan on public.s3  (cost=200.00..458.49 rows=6792 width=40)
               Output: concat_ws('.'::text, str2, str1), value1
               Filter: (concat_ws('.'::text, s3.str2, s3.str1) IS NOT NULL)
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, `str1`, `str2` FROM `test`.`s32` WHERE ((concat_ws('.', `str2`, `str1`) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, str1, str2 FROM public.s31mysql
(16 rows)

-- select concat_ws with group by having (result)
--Testcase 1097:
SELECT count(value1), concat_ws('.', str2, str1) FROM s3 GROUP BY concat_ws('.', str2, str1) HAVING concat_ws('.', str2, str1) IS NOT NULL ORDER BY 1,2;
 count |      concat_ws      
-------+---------------------
     6 |    XYZ   .---XYZ---
(1 row)

-- select concat_ws with group by index having (result)
--Testcase 1098:
SELECT value1, concat_ws('.', str2, str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |      concat_ws      
--------+---------------------
    1.1 |    XYZ   .---XYZ---
    2.2 |    XYZ   .---XYZ---
    3.3 |    XYZ   .---XYZ---
(3 rows)

--
-- test elt()
--
-- select elt (stub function, explain)
--Testcase 1099:
EXPLAIN VERBOSE
SELECT elt(1, str2, str1, tag1) FROM s3;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (elt(1, VARIADIC ARRAY[str2, str1, tag1]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT elt(1, `str2`, `str1`, `tag1`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.elt(1, VARIADIC ARRAY[str2, str1, tag1]) FROM public.s31mysql
(7 rows)

-- select elt (stub function, result)
--Testcase 1100:
SELECT elt(1, str2, str1, tag1) FROM s3;
    elt    
-----------
    XYZ   
    XYZ   
    XYZ   
    XYZ   
    XYZ   
    XYZ   
(6 rows)

-- select elt (stub function, not pushdown constraints, explain)
--Testcase 1101:
EXPLAIN VERBOSE
SELECT value1, elt(1, str2, str1) FROM s3 WHERE to_hex(value2) = '64';
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (elt(1, VARIADIC ARRAY[str2, str1]))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, elt(1, `str2`, `str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.elt(1, VARIADIC ARRAY[str2, str1]), value2 FROM public.s31mysql
(8 rows)

-- select elt (stub function, not pushdown constraints, result)
--Testcase 1102:
SELECT value1, elt(1, str2, str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 |    elt    
--------+-----------
    0.1 |    XYZ   
    0.2 |    XYZ   
    0.3 |    XYZ   
(3 rows)

-- select elt (stub function, pushdown constraints, explain)
--Testcase 1103:
EXPLAIN VERBOSE
SELECT value1, elt(1, str2, str1) FROM s3 WHERE value2 != 200;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (elt(1, VARIADIC ARRAY[str2, str1]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, elt(1, `str2`, `str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.elt(1, VARIADIC ARRAY[str2, str1]) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select elt (stub function, pushdown constraints, result)
--Testcase 1104:
SELECT value1, elt(1, str2, str1) FROM s3 WHERE value2 != 200;
 value1 |    elt    
--------+-----------
    0.1 |    XYZ   
    0.2 |    XYZ   
    0.3 |    XYZ   
(3 rows)

-- select elt with non pushdown func and explicit constant (explain)
--Testcase 1105:
EXPLAIN VERBOSE
SELECT elt(1, str2, str1), pi(), 4.1 FROM s3;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (elt(1, VARIADIC ARRAY[str2, str1])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT elt(1, `str2`, `str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.elt(1, VARIADIC ARRAY[str2, str1]), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select elt with non pushdown func and explicit constant (result)
--Testcase 1106:
SELECT elt(1, str2, str1), pi(), 4.1 FROM s3;
    elt    |        pi         | ?column? 
-----------+-------------------+----------
    XYZ    | 3.141592653589793 |      4.1
    XYZ    | 3.141592653589793 |      4.1
    XYZ    | 3.141592653589793 |      4.1
    XYZ    | 3.141592653589793 |      4.1
    XYZ    | 3.141592653589793 |      4.1
    XYZ    | 3.141592653589793 |      4.1
(6 rows)

-- select elt with order by (explain)
--Testcase 1107:
EXPLAIN VERBOSE
SELECT value1, elt(1, str2, str1) FROM s3 ORDER BY value1, elt(1, str2, str1);
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (elt(1, VARIADIC ARRAY[str2, str1]))
   Sort Key: s3.value1, (elt(1, VARIADIC ARRAY[s3.str2, s3.str1]))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (elt(1, VARIADIC ARRAY[str2, str1]))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, elt(1, `str2`, `str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.elt(1, VARIADIC ARRAY[str2, str1]) FROM public.s31mysql
(12 rows)

-- select elt with order by (result)
--Testcase 1108:
SELECT value1, elt(1, str2, str1) FROM s3 ORDER BY value1, elt(1, str2, str1);
 value1 |    elt    
--------+-----------
    0.1 |    XYZ   
    0.2 |    XYZ   
    0.3 |    XYZ   
    1.1 |    XYZ   
    2.2 |    XYZ   
    3.3 |    XYZ   
(6 rows)

-- select elt with order by index (result)
--Testcase 1109:
SELECT value1, elt(1, str2, str1) FROM s3 ORDER BY 2,1;
 value1 |    elt    
--------+-----------
    0.1 |    XYZ   
    0.2 |    XYZ   
    0.3 |    XYZ   
    1.1 |    XYZ   
    2.2 |    XYZ   
    3.3 |    XYZ   
(6 rows)

-- select elt with order by index (result)
--Testcase 1110:
SELECT value1, elt(1, str2, str1) FROM s3 ORDER BY 1,2;
 value1 |    elt    
--------+-----------
    0.1 |    XYZ   
    0.2 |    XYZ   
    0.3 |    XYZ   
    1.1 |    XYZ   
    2.2 |    XYZ   
    3.3 |    XYZ   
(6 rows)

-- select elt with group by (explain)
--Testcase 1111:
EXPLAIN VERBOSE
SELECT count(value1), elt(1, str2, str1) FROM s3 GROUP BY elt(1, str2, str1) ORDER BY 1,2;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (elt(1, VARIADIC ARRAY[str2, str1]))
   Sort Key: (count(s3.value1)), (elt(1, VARIADIC ARRAY[s3.str2, s3.str1]))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (elt(1, VARIADIC ARRAY[str2, str1]))
         Group Key: (elt(1, VARIADIC ARRAY[s3.str2, s3.str1]))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (elt(1, VARIADIC ARRAY[str2, str1])), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT elt(1, `str2`, `str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.elt(1, VARIADIC ARRAY[str2, str1]), value1 FROM public.s31mysql
(15 rows)

-- select elt with group by (result)
--Testcase 1112:
SELECT count(value1), elt(1, str2, str1) FROM s3 GROUP BY elt(1, str2, str1) ORDER BY 1,2;
 count |    elt    
-------+-----------
     6 |    XYZ   
(1 row)

-- select elt with group by index (result)
--Testcase 1113:
SELECT value1, elt(1, str2, str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |    elt    
--------+-----------
    0.1 |    XYZ   
    0.2 |    XYZ   
    0.3 |    XYZ   
    1.1 |    XYZ   
    2.2 |    XYZ   
    3.3 |    XYZ   
(6 rows)

-- select elt with group by having (explain)
--Testcase 1114:
EXPLAIN VERBOSE
SELECT count(value1), elt(1, str2, str1) FROM s3 GROUP BY elt(1, str2, str1), str1, str2 HAVING elt(1, str2, str1) IS NOT NULL ORDER BY 1,2;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2308.89..2309.39 rows=199 width=104)
   Output: (count(value1)), (elt(1, VARIADIC ARRAY[str2, str1])), str1, str2
   Sort Key: (count(s3.value1)), (elt(1, VARIADIC ARRAY[s3.str2, s3.str1]))
   ->  HashAggregate  (cost=2199.54..2301.29 rows=199 width=104)
         Output: count(value1), (elt(1, VARIADIC ARRAY[str2, str1])), str1, str2
         Group Key: (elt(1, VARIADIC ARRAY[s3.str2, s3.str1])), s3.str1, s3.str2
         Filter: ((elt(1, VARIADIC ARRAY[s3.str2, s3.str1])) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=104)
               Output: (elt(1, VARIADIC ARRAY[str2, str1])), str1, str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT elt(1, `str2`, `str1`), `str1`, `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.elt(1, VARIADIC ARRAY[str2, str1]), str1, str2, value1 FROM public.s31mysql
(16 rows)

-- select elt with group by having (result)
--Testcase 1115:
SELECT count(value1), elt(1, str2, str1) FROM s3 GROUP BY elt(1, str2, str1), str1, str2 HAVING elt(1, str2, str1) IS NOT NULL ORDER BY 1,2;
 count |    elt    
-------+-----------
     6 |    XYZ   
(1 row)

-- select elt with group by index having (result)
--Testcase 1116:
SELECT value1, elt(1, str2, str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |    elt    
--------+-----------
    1.1 |    XYZ   
    2.2 |    XYZ   
    3.3 |    XYZ   
(3 rows)

--
-- test export_set()
--
-- select export_set (stub function, explain)
--Testcase 1117:
EXPLAIN VERBOSE
SELECT export_set(5, str2, str1) FROM s3;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (export_set(5, str2, str1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT export_set(5, `str2`, `str1`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.export_set(5, str2, str1) FROM public.s31mysql
(7 rows)

-- select export_set (stub function, result)
--Testcase 1118:
SELECT export_set(5, str2, str1) FROM s3;
                                                                                                                                                                                                                                                                                                                           export_set                                                                                                                                                                                                                                                                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    XYZ   ,---XYZ---,   XYZ   ,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---
    XYZ   ,---XYZ---,   XYZ   ,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---
    XYZ   ,---XYZ---,   XYZ   ,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---
    XYZ   ,---XYZ---,   XYZ   ,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---
    XYZ   ,---XYZ---,   XYZ   ,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---
    XYZ   ,---XYZ---,   XYZ   ,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---
(6 rows)

--Testcase 1119:
EXPLAIN VERBOSE
SELECT export_set(5, str2, str1, ',') FROM s3;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (export_set(5, str2, str1, ','::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT export_set(5, `str2`, `str1`, ',') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.export_set(5, str2, str1, ','::text) FROM public.s31mysql
(7 rows)

-- select export_set (stub function, result)
--Testcase 1120:
SELECT export_set(5, str2, str1, ',') FROM s3;
                                                                                                                                                                                                                                                                                                                           export_set                                                                                                                                                                                                                                                                                                                            

    XYZ   ,---XYZ---,   XYZ   ,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---
    XYZ   ,---XYZ---,   XYZ   ,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---
    XYZ   ,---XYZ---,   XYZ   ,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---
    XYZ   ,---XYZ---,   XYZ   ,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---
    XYZ   ,---XYZ---,   XYZ   ,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---
    XYZ   ,---XYZ---,   XYZ   ,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---,---XYZ---
(6 rows)

-- select export_set (stub function, explain)
--Testcase 1121:
EXPLAIN VERBOSE
SELECT export_set(5, str2, str1, ',', 2) FROM s3;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (export_set(5, str2, str1, ','::text, 2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT export_set(5, `str2`, `str1`, ',', 2) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.export_set(5, str2, str1, ','::text, 2) FROM public.s31mysql
(7 rows)

-- select export_set (stub function, result)
--Testcase 1122:
SELECT export_set(5, str2, str1, ',', 2) FROM s3;
     export_set      
---------------------
    XYZ   ,---XYZ---
    XYZ   ,---XYZ---
    XYZ   ,---XYZ---
    XYZ   ,---XYZ---
    XYZ   ,---XYZ---
    XYZ   ,---XYZ---
(6 rows)

-- select export_set (stub function, not pushdown constraints, explain)
--Testcase 1123:
EXPLAIN VERBOSE
SELECT value1, export_set(5, str2, str1, ',', 2) FROM s3 WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (export_set(5, str2, str1, ','::text, 2))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, export_set(5, `str2`, `str1`, ',', 2), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.export_set(5, str2, str1, ','::text, 2), value2 FROM public.s31mysql
(8 rows)

-- select export_set (stub function, not pushdown constraints, result)
--Testcase 1124:
SELECT value1, export_set(5, str2, str1, ',', 2) FROM s3 WHERE to_hex(value2) = '64';
 value1 |     export_set      
--------+---------------------
    0.1 |    XYZ   ,---XYZ---
    0.2 |    XYZ   ,---XYZ---
    0.3 |    XYZ   ,---XYZ---
(3 rows)

-- select export_set (stub function, pushdown constraints, explain)
--Testcase 1125:
EXPLAIN VERBOSE
SELECT value1, export_set(5, str2, str1, ',', 2) FROM s3 WHERE value2 != 200;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (export_set(5, str2, str1, ','::text, 2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, export_set(5, `str2`, `str1`, ',', 2) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.export_set(5, str2, str1, ','::text, 2) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select export_set (stub function, pushdown constraints, result)
--Testcase 1126:
SELECT value1, export_set(5, str2, str1, ',', 2) FROM s3 WHERE value2 != 200;
 value1 |     export_set      
--------+---------------------
    0.1 |    XYZ   ,---XYZ---
    0.2 |    XYZ   ,---XYZ---
    0.3 |    XYZ   ,---XYZ---
(3 rows)

-- select export_set with non pushdown func and explicit constant (explain)
--Testcase 1127:
EXPLAIN VERBOSE
SELECT export_set(5, str2, str1, ',', 2), pi(), 4.1 FROM s3;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (export_set(5, str2, str1, ','::text, 2)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT export_set(5, `str2`, `str1`, ',', 2), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.export_set(5, str2, str1, ','::text, 2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select export_set with non pushdown func and explicit constant (result)
--Testcase 1128:
SELECT export_set(5, str2, str1, ',', 2), pi(), 4.1 FROM s3;
     export_set      |        pi         | ?column? 
---------------------+-------------------+----------
    XYZ   ,---XYZ--- | 3.141592653589793 |      4.1
    XYZ   ,---XYZ--- | 3.141592653589793 |      4.1
    XYZ   ,---XYZ--- | 3.141592653589793 |      4.1
    XYZ   ,---XYZ--- | 3.141592653589793 |      4.1
    XYZ   ,---XYZ--- | 3.141592653589793 |      4.1
    XYZ   ,---XYZ--- | 3.141592653589793 |      4.1
(6 rows)

-- select export_set with order by (explain)
--Testcase 1129:
EXPLAIN VERBOSE
SELECT value1, export_set(5, str2, str1, ',', 2) FROM s3 ORDER BY value1, export_set(5, str2, str1, ',', 2);
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (export_set(5, str2, str1, ','::text, 2))
   Sort Key: s3.value1, (export_set(5, s3.str2, s3.str1, ','::text, 2))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (export_set(5, str2, str1, ','::text, 2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, export_set(5, `str2`, `str1`, ',', 2) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.export_set(5, str2, str1, ','::text, 2) FROM public.s31mysql
(12 rows)

-- select export_set with order by (result)
--Testcase 1130:
SELECT value1, export_set(5, str2, str1, ',', 2) FROM s3 ORDER BY value1, export_set(5, str2, str1, ',', 2);
 value1 |     export_set      
--------+---------------------
    0.1 |    XYZ   ,---XYZ---
    0.2 |    XYZ   ,---XYZ---
    0.3 |    XYZ   ,---XYZ---
    1.1 |    XYZ   ,---XYZ---
    2.2 |    XYZ   ,---XYZ---
    3.3 |    XYZ   ,---XYZ---
(6 rows)

-- select export_set with order by index (result)
--Testcase 1131:
SELECT value1, export_set(5, str2, str1, ',', 2) FROM s3 ORDER BY 2,1;
 value1 |     export_set      
--------+---------------------
    0.1 |    XYZ   ,---XYZ---
    0.2 |    XYZ   ,---XYZ---
    0.3 |    XYZ   ,---XYZ---
    1.1 |    XYZ   ,---XYZ---
    2.2 |    XYZ   ,---XYZ---
    3.3 |    XYZ   ,---XYZ---
(6 rows)

-- select export_set with order by index (result)
--Testcase 1132:
SELECT value1, export_set(5, str2, str1, ',', 2) FROM s3 ORDER BY 1,2;
 value1 |     export_set      
--------+---------------------
    0.1 |    XYZ   ,---XYZ---
    0.2 |    XYZ   ,---XYZ---
    0.3 |    XYZ   ,---XYZ---
    1.1 |    XYZ   ,---XYZ---
    2.2 |    XYZ   ,---XYZ---
    3.3 |    XYZ   ,---XYZ---
(6 rows)

-- select export_set with group by (explain)
--Testcase 1133:
EXPLAIN VERBOSE
SELECT count(value1), export_set(5, str2, str1, ',', 2) FROM s3 GROUP BY export_set(5, str2, str1, ',', 2) ORDER BY 1,2;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (export_set(5, str2, str1, ','::text, 2))
   Sort Key: (count(s3.value1)), (export_set(5, s3.str2, s3.str1, ','::text, 2))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (export_set(5, str2, str1, ','::text, 2))
         Group Key: (export_set(5, s3.str2, s3.str1, ','::text, 2))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (export_set(5, str2, str1, ','::text, 2)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT export_set(5, `str2`, `str1`, ',', 2), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.export_set(5, str2, str1, ','::text, 2), value1 FROM public.s31mysql
(15 rows)

-- select export_set with group by (result)
--Testcase 1134:
SELECT count(value1), export_set(5, str2, str1, ',', 2) FROM s3 GROUP BY export_set(5, str2, str1, ',', 2) ORDER BY 1,2;
 count |     export_set      
-------+---------------------
     6 |    XYZ   ,---XYZ---
(1 row)

-- select export_set with group by index (result)
--Testcase 1135:
SELECT value1, export_set(5, str2, str1, ',', 2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |     export_set      
--------+---------------------
    0.1 |    XYZ   ,---XYZ---
    0.2 |    XYZ   ,---XYZ---
    0.3 |    XYZ   ,---XYZ---
    1.1 |    XYZ   ,---XYZ---
    2.2 |    XYZ   ,---XYZ---
    3.3 |    XYZ   ,---XYZ---
(6 rows)

-- select export_set with group by having (explain)
--Testcase 1136:
EXPLAIN VERBOSE
SELECT count(value1), export_set(5, str2, str1, ',', 2) FROM s3 GROUP BY export_set(5, str2, str1, ',', 2), str1, str2 HAVING export_set(5, str2, str1, ',', 2) IS NOT NULL ORDER BY 1,2;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2308.89..2309.39 rows=199 width=104)
   Output: (count(value1)), (export_set(5, str2, str1, ','::text, 2)), str1, str2
   Sort Key: (count(s3.value1)), (export_set(5, s3.str2, s3.str1, ','::text, 2))
   ->  HashAggregate  (cost=2199.54..2301.29 rows=199 width=104)
         Output: count(value1), (export_set(5, str2, str1, ','::text, 2)), str1, str2
         Group Key: (export_set(5, s3.str2, s3.str1, ','::text, 2)), s3.str1, s3.str2
         Filter: ((export_set(5, s3.str2, s3.str1, ','::text, 2)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=104)
               Output: (export_set(5, str2, str1, ','::text, 2)), str1, str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT export_set(5, `str2`, `str1`, ',', 2), `str1`, `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.export_set(5, str2, str1, ','::text, 2), str1, str2, value1 FROM public.s31mysql
(16 rows)

-- select export_set with group by having (result)
--Testcase 1137:
SELECT count(value1), export_set(5, str2, str1, ',', 2) FROM s3 GROUP BY export_set(5, str2, str1, ',', 2), str1, str2 HAVING export_set(5, str2, str1, ',', 2) IS NOT NULL ORDER BY 1,2;
 count |     export_set      
-------+---------------------
     6 |    XYZ   ,---XYZ---
(1 row)

-- select export_set with group by index having (result)
--Testcase 1138:
SELECT value1, export_set(5, str2, str1, ',', 2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |     export_set      
--------+---------------------
    1.1 |    XYZ   ,---XYZ---
    2.2 |    XYZ   ,---XYZ---
    3.3 |    XYZ   ,---XYZ---
(3 rows)

--
-- test field()
--
-- select field (stub function, explain)
--Testcase 1139:
EXPLAIN VERBOSE
SELECT field('---XYZ---', str2, str1) FROM s3;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=4)
   Output: (field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT field('---XYZ---', `str2`, `str1`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]) FROM public.s31mysql
(7 rows)

-- select field (stub function, result)
--Testcase 1140:
SELECT field('---XYZ---', str2, str1) FROM s3;
 field 
-------
     2
     2
     2
     2
     2
     2
(6 rows)

-- select field (stub function, not pushdown constraints, explain)
--Testcase 1141:
EXPLAIN VERBOSE
SELECT value1, field('---XYZ---', str2, str1) FROM s3 WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=12)
   Output: value1, (field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, field('---XYZ---', `str2`, `str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]), value2 FROM public.s31mysql
(8 rows)

-- select field (stub function, not pushdown constraints, result)
--Testcase 1142:
SELECT value1, field('---XYZ---', str2, str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 | field 
--------+-------
    0.1 |     2
    0.2 |     2
    0.3 |     2
(3 rows)

-- select field (stub function, pushdown constraints, explain)
--Testcase 1143:
EXPLAIN VERBOSE
SELECT value1, field('---XYZ---', str2, str1) FROM s3 WHERE value2 != 200;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=12)
   Output: value1, (field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, field('---XYZ---', `str2`, `str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select field (stub function, pushdown constraints, result)
--Testcase 1144:
SELECT value1, field('---XYZ---', str2, str1) FROM s3 WHERE value2 != 200;
 value1 | field 
--------+-------
    0.1 |     2
    0.2 |     2
    0.3 |     2
(3 rows)

-- select field with non pushdown func and explicit constant (explain)
--Testcase 1145:
EXPLAIN VERBOSE
SELECT field('---XYZ---', str2, str1), pi(), 4.1 FROM s3;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=44)
   Output: (field('---XYZ---'::text, VARIADIC ARRAY[str2, str1])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT field('---XYZ---', `str2`, `str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select field with non pushdown func and explicit constant (result)
--Testcase 1146:
SELECT field('---XYZ---', str2, str1), pi(), 4.1 FROM s3;
 field |        pi         | ?column? 
-------+-------------------+----------
     2 | 3.141592653589793 |      4.1
     2 | 3.141592653589793 |      4.1
     2 | 3.141592653589793 |      4.1
     2 | 3.141592653589793 |      4.1
     2 | 3.141592653589793 |      4.1
     2 | 3.141592653589793 |      4.1
(6 rows)

-- select field with order by (explain)
--Testcase 1147:
EXPLAIN VERBOSE
SELECT value1, field('---XYZ---', str2, str1) FROM s3 ORDER BY value1, field('---XYZ---', str2, str1);
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=12)
   Output: value1, (field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]))
   Sort Key: s3.value1, (field('---XYZ---'::text, VARIADIC ARRAY[s3.str2, s3.str1]))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=12)
         Output: value1, (field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, field('---XYZ---', `str2`, `str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]) FROM public.s31mysql
(12 rows)

-- select field with order by (result)
--Testcase 1148:
SELECT value1, field('---XYZ---', str2, str1) FROM s3 ORDER BY value1, field('---XYZ---', str2, str1);
 value1 | field 
--------+-------
    0.1 |     2
    0.2 |     2
    0.3 |     2
    1.1 |     2
    2.2 |     2
    3.3 |     2
(6 rows)

-- select field with order by index (result)
--Testcase 1149:
SELECT value1, field('---XYZ---', str2, str1) FROM s3 ORDER BY 2,1;
 value1 | field 
--------+-------
    0.1 |     2
    0.2 |     2
    0.3 |     2
    1.1 |     2
    2.2 |     2
    3.3 |     2
(6 rows)

-- select field with order by index (result)
--Testcase 1150:
SELECT value1, field('---XYZ---', str2, str1) FROM s3 ORDER BY 1,2;
 value1 | field 
--------+-------
    0.1 |     2
    0.2 |     2
    0.3 |     2
    1.1 |     2
    2.2 |     2
    3.3 |     2
(6 rows)

-- select field with group by (explain)
--Testcase 1151:
EXPLAIN VERBOSE
SELECT count(value1), field('---XYZ---', str2, str1) FROM s3 GROUP BY field('---XYZ---', str2, str1) ORDER BY 1,2;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=12)
   Output: (count(value1)), (field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]))
   Sort Key: (count(s3.value1)), (field('---XYZ---'::text, VARIADIC ARRAY[s3.str2, s3.str1]))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
         Output: count(value1), (field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]))
         Group Key: (field('---XYZ---'::text, VARIADIC ARRAY[s3.str2, s3.str1]))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (field('---XYZ---'::text, VARIADIC ARRAY[str2, str1])), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT field('---XYZ---', `str2`, `str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]), value1 FROM public.s31mysql
(15 rows)

-- select field with group by (result)
--Testcase 1152:
SELECT count(value1), field('---XYZ---', str2, str1) FROM s3 GROUP BY field('---XYZ---', str2, str1) ORDER BY 1,2;
 count | field 
-------+-------
     6 |     2
(1 row)

-- select field with group by index (result)
--Testcase 1153:
SELECT value1, field('---XYZ---', str2, str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | field 
--------+-------
    0.1 |     2
    0.2 |     2
    0.3 |     2
    1.1 |     2
    2.2 |     2
    3.3 |     2
(6 rows)

-- select field with group by having (explain)
--Testcase 1154:
EXPLAIN VERBOSE
SELECT count(value1), field('---XYZ---', str2, str1) FROM s3 GROUP BY field('---XYZ---', str2, str1), str1, str2 HAVING field('---XYZ---', str2, str1) > 0 ORDER BY 1,2;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2270.82..2270.99 rows=67 width=76)
   Output: (count(value1)), (field('---XYZ---'::text, VARIADIC ARRAY[str2, str1])), str1, str2
   Sort Key: (count(s3.value1)), (field('---XYZ---'::text, VARIADIC ARRAY[s3.str2, s3.str1]))
   ->  HashAggregate  (cost=2199.54..2268.79 rows=67 width=76)
         Output: count(value1), (field('---XYZ---'::text, VARIADIC ARRAY[str2, str1])), str1, str2
         Group Key: (field('---XYZ---'::text, VARIADIC ARRAY[s3.str2, s3.str1])), s3.str1, s3.str2
         Filter: ((field('---XYZ---'::text, VARIADIC ARRAY[s3.str2, s3.str1])) > 0)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=76)
               Output: (field('---XYZ---'::text, VARIADIC ARRAY[str2, str1])), str1, str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT field('---XYZ---', `str2`, `str1`), `str1`, `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.field('---XYZ---'::text, VARIADIC ARRAY[str2, str1]), str1, str2, value1 FROM public.s31mysql
(16 rows)

-- select field with group by having (result)
--Testcase 1155:
SELECT count(value1), field('---XYZ---', str2, str1) FROM s3 GROUP BY field('---XYZ---', str2, str1), str1, str2 HAVING field('---XYZ---', str2, str1) > 0 ORDER BY 1,2;
 count | field 
-------+-------
     6 |     2
(1 row)

-- select field with group by index having (result)
--Testcase 1156:
SELECT value1, field('---XYZ---', str2, str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | field 
--------+-------
    1.1 |     2
    2.2 |     2
    3.3 |     2
(3 rows)

--
-- test find_in_set()
--
-- select find_in_set (stub function, explain)
--Testcase 1157:
EXPLAIN VERBOSE
SELECT find_in_set('---XYZ---', str1) FROM s3;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=4)
   Output: (find_in_set('---XYZ---'::text, str1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT find_in_set('---XYZ---', `str1`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.find_in_set('---XYZ---'::text, str1) FROM public.s31mysql
(7 rows)

-- select find_in_set (stub function, result)
--Testcase 1158:
SELECT find_in_set('---XYZ---', str1) FROM s3;
 find_in_set 
-------------
           1
           1
           1
           1
           1
           1
(6 rows)

-- select find_in_set (stub function, not pushdown constraints, explain)
--Testcase 1159:
EXPLAIN VERBOSE
SELECT value1, find_in_set('---XYZ---', str1) FROM s3 WHERE to_hex(value2) = '64';
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=12)
   Output: value1, (find_in_set('---XYZ---'::text, str1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, find_in_set('---XYZ---', `str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.find_in_set('---XYZ---'::text, str1), value2 FROM public.s31mysql
(8 rows)

-- select find_in_set (stub function, not pushdown constraints, result)
--Testcase 1160:
SELECT value1, find_in_set('---XYZ---', str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 | find_in_set 
--------+-------------
    0.1 |           1
    0.2 |           1
    0.3 |           1
(3 rows)

-- select find_in_set (stub function, pushdown constraints, explain)
--Testcase 1161:
EXPLAIN VERBOSE
SELECT value1, find_in_set('---XYZ---', str1) FROM s3 WHERE value2 != 200;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=12)
   Output: value1, (find_in_set('---XYZ---'::text, str1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, find_in_set('---XYZ---', `str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.find_in_set('---XYZ---'::text, str1) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select find_in_set (stub function, pushdown constraints, result)
--Testcase 1162:
SELECT value1, find_in_set('---XYZ---', str1) FROM s3 WHERE value2 != 200;
 value1 | find_in_set 
--------+-------------
    0.1 |           1
    0.2 |           1
    0.3 |           1
(3 rows)

-- select find_in_set with non pushdown func and explicit constant (explain)
--Testcase 1163:
EXPLAIN VERBOSE
SELECT find_in_set('---XYZ---', str1), pi(), 4.1 FROM s3;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=44)
   Output: (find_in_set('---XYZ---'::text, str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT find_in_set('---XYZ---', `str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.find_in_set('---XYZ---'::text, str1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select find_in_set with non pushdown func and explicit constant (result)
--Testcase 1164:
SELECT find_in_set('---XYZ---', str1), pi(), 4.1 FROM s3;
 find_in_set |        pi         | ?column? 
-------------+-------------------+----------
           1 | 3.141592653589793 |      4.1
           1 | 3.141592653589793 |      4.1
           1 | 3.141592653589793 |      4.1
           1 | 3.141592653589793 |      4.1
           1 | 3.141592653589793 |      4.1
           1 | 3.141592653589793 |      4.1
(6 rows)

-- select find_in_set with order by (explain)
--Testcase 1165:
EXPLAIN VERBOSE
SELECT value1, find_in_set('---XYZ---', str1) FROM s3 ORDER BY value1, find_in_set('---XYZ---', str1);
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=12)
   Output: value1, (find_in_set('---XYZ---'::text, str1))
   Sort Key: s3.value1, (find_in_set('---XYZ---'::text, s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=12)
         Output: value1, (find_in_set('---XYZ---'::text, str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, find_in_set('---XYZ---', `str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.find_in_set('---XYZ---'::text, str1) FROM public.s31mysql
(12 rows)

-- select find_in_set with order by (result)
--Testcase 1166:
SELECT value1, find_in_set('---XYZ---', str1) FROM s3 ORDER BY value1, find_in_set('---XYZ---', str1);
 value1 | find_in_set 
--------+-------------
    0.1 |           1
    0.2 |           1
    0.3 |           1
    1.1 |           1
    2.2 |           1
    3.3 |           1
(6 rows)

-- select find_in_set with order by index (result)
--Testcase 1167:
SELECT value1, find_in_set('---XYZ---', str1) FROM s3 ORDER BY 2,1;
 value1 | find_in_set 
--------+-------------
    0.1 |           1
    0.2 |           1
    0.3 |           1
    1.1 |           1
    2.2 |           1
    3.3 |           1
(6 rows)

-- select find_in_set with order by index (result)
--Testcase 1168:
SELECT value1, find_in_set('---XYZ---', str1) FROM s3 ORDER BY 1,2;
 value1 | find_in_set 
--------+-------------
    0.1 |           1
    0.2 |           1
    0.3 |           1
    1.1 |           1
    2.2 |           1
    3.3 |           1
(6 rows)

-- select find_in_set with group by (explain)
--Testcase 1169:
EXPLAIN VERBOSE
SELECT count(value1), find_in_set('---XYZ---', str1) FROM s3 GROUP BY find_in_set('---XYZ---', str1) ORDER BY 1,2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=12)
   Output: (count(value1)), (find_in_set('---XYZ---'::text, str1))
   Sort Key: (count(s3.value1)), (find_in_set('---XYZ---'::text, s3.str1))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
         Output: count(value1), (find_in_set('---XYZ---'::text, str1))
         Group Key: (find_in_set('---XYZ---'::text, s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (find_in_set('---XYZ---'::text, str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT find_in_set('---XYZ---', `str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.find_in_set('---XYZ---'::text, str1), value1 FROM public.s31mysql
(15 rows)

-- select find_in_set with group by (result)
--Testcase 1170:
SELECT count(value1), find_in_set('---XYZ---', str1) FROM s3 GROUP BY find_in_set('---XYZ---', str1) ORDER BY 1,2;
 count | find_in_set 
-------+-------------
     6 |           1
(1 row)

-- select find_in_set with group by index (result)
--Testcase 1171:
SELECT value1, find_in_set('---XYZ---', str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | find_in_set 
--------+-------------
    0.1 |           1
    0.2 |           1
    0.3 |           1
    1.1 |           1
    2.2 |           1
    3.3 |           1
(6 rows)

-- select find_in_set with group by having (explain)
--Testcase 1172:
EXPLAIN VERBOSE
SELECT count(value1), find_in_set('---XYZ---', str1) FROM s3 GROUP BY find_in_set('---XYZ---', str1), str1, str2 HAVING count(find_in_set('---XYZ---', str1)) IS NOT NULL ORDER BY 1,2;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3982.45..3982.95 rows=199 width=76)
   Output: (count(value1)), (find_in_set('---XYZ---'::text, str1)), str1, str2
   Sort Key: (count(s3.value1)), (find_in_set('---XYZ---'::text, s3.str1))
   ->  HashAggregate  (cost=3923.11..3974.86 rows=199 width=76)
         Output: count(value1), (find_in_set('---XYZ---'::text, str1)), str1, str2
         Group Key: (find_in_set('---XYZ---'::text, s3.str1)), s3.str1, s3.str2
         Filter: (count((find_in_set('---XYZ---'::text, s3.str1))) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=76)
               Output: (find_in_set('---XYZ---'::text, str1)), str1, str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT find_in_set('---XYZ---', `str1`), `str1`, `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.find_in_set('---XYZ---'::text, str1), str1, str2, value1 FROM public.s31mysql
(16 rows)

-- select find_in_set with group by having (result)
--Testcase 1173:
SELECT count(value1), find_in_set('---XYZ---', str1) FROM s3 GROUP BY find_in_set('---XYZ---', str1), str1, str2 HAVING count(find_in_set('---XYZ---', str1)) IS NOT NULL ORDER BY 1,2;
 count | find_in_set 
-------+-------------
     6 |           1
(1 row)

-- select find_in_set with group by index having (result)
--Testcase 1174:
SELECT value1, find_in_set('---XYZ---', str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | find_in_set 
--------+-------------
    1.1 |           1
    2.2 |           1
    3.3 |           1
(3 rows)

--
-- test mysql_format()
--
-- select mysql_format (stub function, explain)
--Testcase 1175:
EXPLAIN VERBOSE
SELECT mysql_format(value1, 4), mysql_format(value2, 4), mysql_format(value4, 4) FROM s3 ORDER BY 1,2,3;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6013.12..6030.18 rows=6826 width=96)
   Output: (mysql_format(value1, 4)), (mysql_format((value2)::double precision, 4)), (mysql_format((value4)::double precision, 4))
   Sort Key: (mysql_format(s3.value1, 4)), (mysql_format((s3.value2)::double precision, 4)), (mysql_format((s3.value4)::double precision, 4))
   ->  Foreign Scan on public.s3  (cost=200.00..5578.41 rows=6826 width=96)
         Output: (mysql_format(value1, 4)), (mysql_format((value2)::double precision, 4)), (mysql_format((value4)::double precision, 4))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT format(`value1`, 4), format(`value2`, 4), format(`value4`, 4) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_format(value1, 4), public.mysql_format(value2, 4), public.mysql_format(value4, 4) FROM public.s31mysql
(12 rows)

-- select mysql_format (stub function, result)
--Testcase 1176:
SELECT mysql_format(value1, 4), mysql_format(value2, 4), mysql_format(value4, 4) FROM s3 ORDER BY 1,2,3;
 mysql_format | mysql_format | mysql_format 
--------------+--------------+--------------
 0.1000       | 100.0000     | -100.0000
 0.2000       | 100.0000     | -100.0000
 0.3000       | 100.0000     | -100.0000
 1.1000       | 200.0000     | -200.0000
 2.2000       | 200.0000     | -200.0000
 3.3000       | 200.0000     | -200.0000
(6 rows)

-- select mysql_format (stub function, explain)
--Testcase 1177:
EXPLAIN VERBOSE
SELECT mysql_format(value1, 4, 'de_DE'), mysql_format(value2, 4, 'de_DE'), mysql_format(value4, 4, 'de_DE') FROM s3 ORDER BY 1,2,3;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6013.12..6030.18 rows=6826 width=96)
   Output: (mysql_format(value1, 4, 'de_DE'::text)), (mysql_format((value2)::double precision, 4, 'de_DE'::text)), (mysql_format((value4)::double precision, 4, 'de_DE'::text))
   Sort Key: (mysql_format(s3.value1, 4, 'de_DE'::text)), (mysql_format((s3.value2)::double precision, 4, 'de_DE'::text)), (mysql_format((s3.value4)::double precision, 4, 'de_DE'::text))
   ->  Foreign Scan on public.s3  (cost=200.00..5578.41 rows=6826 width=96)
         Output: (mysql_format(value1, 4, 'de_DE'::text)), (mysql_format((value2)::double precision, 4, 'de_DE'::text)), (mysql_format((value4)::double precision, 4, 'de_DE'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT format(`value1`, 4, 'de_DE'), format(`value2`, 4, 'de_DE'), format(`value4`, 4, 'de_DE') FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_format(value1, 4, 'de_DE'::text), public.mysql_format(value2, 4, 'de_DE'::text), public.mysql_format(value4, 4, 'de_DE'::text) FROM public.s31mysql
(12 rows)

-- select mysql_format (stub function, result)
--Testcase 1178:
SELECT mysql_format(value1, 4, 'de_DE'), mysql_format(value2, 4, 'de_DE'), mysql_format(value4, 4, 'de_DE') FROM s3 ORDER BY 1,2,3;
 mysql_format | mysql_format | mysql_format 
--------------+--------------+--------------
 0,1000       | 100,0000     | -100,0000
 0,2000       | 100,0000     | -100,0000
 0,3000       | 100,0000     | -100,0000
 1,1000       | 200,0000     | -200,0000
 2,2000       | 200,0000     | -200,0000
 3,3000       | 200,0000     | -200,0000
(6 rows)

-- select mysql_format (stub function, not pushdown constraints, explain)
--Testcase 1179:
EXPLAIN VERBOSE
SELECT value1, mysql_format(value1, 4) FROM s3 WHERE to_hex(value2) = '64';
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (mysql_format(value1, 4))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, format(`value1`, 4), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mysql_format(value1, 4), value2 FROM public.s31mysql
(8 rows)

-- select mysql_format (stub function, not pushdown constraints, result)
--Testcase 1180:
SELECT value1, mysql_format(value1, 4) FROM s3 WHERE to_hex(value2) = '64';
 value1 | mysql_format 
--------+--------------
    0.1 | 0.1000
    0.2 | 0.2000
    0.3 | 0.3000
(3 rows)

-- select mysql_format (stub function, pushdown constraints, explain)
--Testcase 1181:
EXPLAIN VERBOSE
SELECT value1, mysql_format(value1, 4) FROM s3 WHERE value2 != 200;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (mysql_format(value1, 4))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, format(`value1`, 4) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mysql_format(value1, 4) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select mysql_format (stub function, pushdown constraints, result)
--Testcase 1182:
SELECT value1, mysql_format(value1, 4) FROM s3 WHERE value2 != 200;
 value1 | mysql_format 
--------+--------------
    0.1 | 0.1000
    0.2 | 0.2000
    0.3 | 0.3000
(3 rows)

-- select mysql_format with non pushdown func and explicit constant (explain)
--Testcase 1183:
EXPLAIN VERBOSE
SELECT mysql_format(value1, 4), pi(), 4.1 FROM s3 ORDER BY 1;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=72)
   Output: (mysql_format(value1, 4)), '3.141592653589793'::double precision, 4.1
   Sort Key: (mysql_format(s3.value1, 4))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
         Output: (mysql_format(value1, 4)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT format(`value1`, 4), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_format(value1, 4), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select mysql_format with non pushdown func and explicit constant (result)
--Testcase 1184:
SELECT mysql_format(value1, 4), pi(), 4.1 FROM s3 ORDER BY 1;
 mysql_format |        pi         | ?column? 
--------------+-------------------+----------
 0.1000       | 3.141592653589793 |      4.1
 0.2000       | 3.141592653589793 |      4.1
 0.3000       | 3.141592653589793 |      4.1
 1.1000       | 3.141592653589793 |      4.1
 2.2000       | 3.141592653589793 |      4.1
 3.3000       | 3.141592653589793 |      4.1
(6 rows)

-- select mysql_format with order by (explain)
--Testcase 1185:
EXPLAIN VERBOSE
SELECT value1, mysql_format(value1, 4) FROM s3 ORDER BY value1, mysql_format(value1, 4);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (mysql_format(value1, 4))
   Sort Key: s3.value1, (mysql_format(s3.value1, 4))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (mysql_format(value1, 4))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, format(`value1`, 4) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.mysql_format(value1, 4) FROM public.s31mysql
(12 rows)

-- select mysql_format with order by (result)
--Testcase 1186:
SELECT value1, mysql_format(value1, 4) FROM s3 ORDER BY value1, mysql_format(value1, 4);
 value1 | mysql_format 
--------+--------------
    0.1 | 0.1000
    0.2 | 0.2000
    0.3 | 0.3000
    1.1 | 1.1000
    2.2 | 2.2000
    3.3 | 3.3000
(6 rows)

-- select mysql_format with order by index (result)
--Testcase 1187:
SELECT value1, mysql_format(value1, 4) FROM s3 ORDER BY 2,1;
 value1 | mysql_format 
--------+--------------
    0.1 | 0.1000
    0.2 | 0.2000
    0.3 | 0.3000
    1.1 | 1.1000
    2.2 | 2.2000
    3.3 | 3.3000
(6 rows)

-- select mysql_format with order by index (result)
--Testcase 1188:
SELECT value1, mysql_format(value1, 4) FROM s3 ORDER BY 1,2;
 value1 | mysql_format 
--------+--------------
    0.1 | 0.1000
    0.2 | 0.2000
    0.3 | 0.3000
    1.1 | 1.1000
    2.2 | 2.2000
    3.3 | 3.3000
(6 rows)

-- select mysql_format with group by (explain)
--Testcase 1189:
EXPLAIN VERBOSE
SELECT count(value1), mysql_format(value1, 4) FROM s3 GROUP BY mysql_format(value1, 4) ORDER BY 1,2;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (mysql_format(value1, 4))
   Sort Key: (count(s3.value1)), (mysql_format(s3.value1, 4))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (mysql_format(value1, 4))
         Group Key: (mysql_format(s3.value1, 4))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (mysql_format(value1, 4)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT format(`value1`, 4), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_format(value1, 4), value1 FROM public.s31mysql
(15 rows)

-- select mysql_format with group by (result)
--Testcase 1190:
SELECT count(value1), mysql_format(value1, 4) FROM s3 GROUP BY mysql_format(value1, 4) ORDER BY 1,2;
 count | mysql_format 
-------+--------------
     1 | 0.1000
     1 | 0.2000
     1 | 0.3000
     1 | 1.1000
     1 | 2.2000
     1 | 3.3000
(6 rows)

-- select mysql_format with group by index (result)
--Testcase 1191:
SELECT value1, mysql_format(value1, 4) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | mysql_format 
--------+--------------
    0.1 | 0.1000
    0.2 | 0.2000
    0.3 | 0.3000
    1.1 | 1.1000
    2.2 | 2.2000
    3.3 | 3.3000
(6 rows)

-- select mysql_format with group by having (explain)
--Testcase 1192:
EXPLAIN VERBOSE
SELECT count(value1), mysql_format(value1, 4) FROM s3 GROUP BY mysql_format(value1, 4), value1 HAVING mysql_format(value1, 4) IS NOT NULL ORDER BY 1,2;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=48)
   Output: (count(value1)), (mysql_format(value1, 4)), value1
   Sort Key: (count(s3.value1)), (mysql_format(s3.value1, 4))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=48)
         Output: count(value1), (mysql_format(value1, 4)), value1
         Group Key: (mysql_format(s3.value1, 4)), s3.value1
         Filter: ((mysql_format(s3.value1, 4)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (mysql_format(value1, 4)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT format(`value1`, 4), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_format(value1, 4), value1 FROM public.s31mysql
(16 rows)

-- select mysql_format with group by having (result)
--Testcase 1193:
SELECT count(value1), mysql_format(value1, 4) FROM s3 GROUP BY mysql_format(value1, 4), value1 HAVING mysql_format(value1, 4) IS NOT NULL ORDER BY 1,2;
 count | mysql_format 
-------+--------------
     1 | 0.1000
     1 | 0.2000
     1 | 0.3000
     1 | 1.1000
     1 | 2.2000
     1 | 3.3000
(6 rows)

-- select mysql_format with group by index having (result)
--Testcase 1194:
SELECT value1, mysql_format(value1, 4) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | mysql_format 
--------+--------------
    1.1 | 1.1000
    2.2 | 2.2000
    3.3 | 3.3000
(3 rows)

--
-- test from_base64()
--
-- select from_base64 (stub function, explain)
--Testcase 1195:
EXPLAIN VERBOSE
SELECT from_base64(tag1), from_base64(str1), from_base64(str2) FROM s3;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..5544.28 rows=6826 width=96)
   Output: (from_base64(tag1)), (from_base64(str1)), (from_base64(str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT from_base64(`tag1`), from_base64(`str1`), from_base64(`str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.from_base64(tag1), public.from_base64(str1), public.from_base64(str2) FROM public.s31mysql
(7 rows)

-- select from_base64 (stub function, result)
--Testcase 1196:
SELECT from_base64(tag1), from_base64(str1), from_base64(str2) FROM s3;
 from_base64 | from_base64 | from_base64 
-------------+-------------+-------------
             |             | 
             |             | 
             |             | 
             |             | 
             |             | 
             |             | 
(6 rows)

-- select from_base64 (stub function, explain)
--Testcase 1197:
EXPLAIN VERBOSE
SELECT from_base64(to_base64(tag1)), from_base64(to_base64(str1)), from_base64(to_base64(str2)) FROM s3 ORDER BY 1,2,3;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11098.49..11115.55 rows=6826 width=96)
   Output: (from_base64(to_base64(tag1))), (from_base64(to_base64(str1))), (from_base64(to_base64(str2)))
   Sort Key: (from_base64(to_base64(s3.tag1))), (from_base64(to_base64(s3.str1))), (from_base64(to_base64(s3.str2)))
   ->  Foreign Scan on public.s3  (cost=200.00..10663.78 rows=6826 width=96)
         Output: (from_base64(to_base64(tag1))), (from_base64(to_base64(str1))), (from_base64(to_base64(str2)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_base64(to_base64(`tag1`)), from_base64(to_base64(`str1`)), from_base64(to_base64(`str2`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_base64(public.to_base64(tag1)), public.from_base64(public.to_base64(str1)), public.from_base64(public.to_base64(str2)) FROM public.s31mysql
(12 rows)

-- select from_base64 (stub function, result)
--Testcase 1198:
SELECT from_base64(to_base64(tag1)), from_base64(to_base64(str1)), from_base64(to_base64(str2)) FROM s3 ORDER BY 1,2,3;
 from_base64 | from_base64 | from_base64 
-------------+-------------+-------------
 a           | ---XYZ---   |    XYZ   
 a           | ---XYZ---   |    XYZ   
 a           | ---XYZ---   |    XYZ   
 b           | ---XYZ---   |    XYZ   
 b           | ---XYZ---   |    XYZ   
 b           | ---XYZ---   |    XYZ   
(6 rows)

-- select from_base64 (stub function, not pushdown constraints, explain)
--Testcase 1199:
EXPLAIN VERBOSE
SELECT value1, from_base64(to_base64(str1)) FROM s3 WHERE to_hex(value2) = '64';
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..407.73 rows=34 width=40)
   Output: value1, (from_base64(to_base64(str1)))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, from_base64(to_base64(`str1`)), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.from_base64(public.to_base64(str1)), value2 FROM public.s31mysql
(8 rows)

-- select from_base64 (stub function, not pushdown constraints, result)
--Testcase 1200:
SELECT value1, from_base64(to_base64(str1)) FROM s3 WHERE to_hex(value2) = '64';
 value1 | from_base64 
--------+-------------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
(3 rows)

-- select from_base64 (stub function, pushdown constraints, explain)
--Testcase 1201:
EXPLAIN VERBOSE
SELECT value1, from_base64(to_base64(str1)) FROM s3 WHERE value2 != 200;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.16 rows=6792 width=40)
   Output: value1, (from_base64(to_base64(str1)))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, from_base64(to_base64(`str1`)) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.from_base64(public.to_base64(str1)) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select from_base64 (stub function, pushdown constraints, result)
--Testcase 1202:
SELECT value1, from_base64(to_base64(str1)) FROM s3 WHERE value2 != 200;
 value1 | from_base64 
--------+-------------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
(3 rows)

-- select from_base64 with non pushdown func and explicit constant (explain)
--Testcase 1203:
EXPLAIN VERBOSE
SELECT from_base64(to_base64(str1)), pi(), 4.1 FROM s3;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=72)
   Output: (from_base64(to_base64(str1))), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT from_base64(to_base64(`str1`)), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.from_base64(public.to_base64(str1)), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select from_base64 with non pushdown func and explicit constant (result)
--Testcase 1204:
SELECT from_base64(to_base64(str1)), pi(), 4.1 FROM s3;
 from_base64 |        pi         | ?column? 
-------------+-------------------+----------
 ---XYZ---   | 3.141592653589793 |      4.1
 ---XYZ---   | 3.141592653589793 |      4.1
 ---XYZ---   | 3.141592653589793 |      4.1
 ---XYZ---   | 3.141592653589793 |      4.1
 ---XYZ---   | 3.141592653589793 |      4.1
 ---XYZ---   | 3.141592653589793 |      4.1
(6 rows)

-- select from_base64 with order by (explain)
--Testcase 1205:
EXPLAIN VERBOSE
SELECT value1, from_base64(to_base64(str1)) FROM s3 ORDER BY value1, from_base64(to_base64(str1));
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=40)
   Output: value1, (from_base64(to_base64(str1)))
   Sort Key: s3.value1, (from_base64(to_base64(s3.str1)))
   ->  Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=40)
         Output: value1, (from_base64(to_base64(str1)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, from_base64(to_base64(`str1`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.from_base64(public.to_base64(str1)) FROM public.s31mysql
(12 rows)

-- select from_base64 with order by (result)
--Testcase 1206:
SELECT value1, from_base64(to_base64(str1)) FROM s3 ORDER BY value1, from_base64(to_base64(str1));
 value1 | from_base64 
--------+-------------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select from_base64 with order by index (result)
--Testcase 1207:
SELECT value1, from_base64(to_base64(str1)) FROM s3 ORDER BY 2,1;
 value1 | from_base64 
--------+-------------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select from_base64 with order by index (result)
--Testcase 1208:
SELECT value1, from_base64(to_base64(str1)) FROM s3 ORDER BY 1,2;
 value1 | from_base64 
--------+-------------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select from_base64 with group by (explain)
--Testcase 1209:
EXPLAIN VERBOSE
SELECT count(value1), from_base64(to_base64(str1)) FROM s3 GROUP BY from_base64(to_base64(str1)) ORDER BY 1,2;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort  (cost=3981.55..3982.05 rows=200 width=40)
   Output: (count(value1)), (from_base64(to_base64(str1)))
   Sort Key: (count(s3.value1)), (from_base64(to_base64(s3.str1)))
   ->  HashAggregate  (cost=3871.91..3973.91 rows=200 width=40)
         Output: count(value1), (from_base64(to_base64(str1)))
         Group Key: (from_base64(to_base64(s3.str1)))
         ->  Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=40)
               Output: (from_base64(to_base64(str1))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT from_base64(to_base64(`str1`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.from_base64(public.to_base64(str1)), value1 FROM public.s31mysql
(15 rows)

-- select from_base64 with group by (result)
--Testcase 1210:
SELECT count(value1), from_base64(to_base64(str1)) FROM s3 GROUP BY from_base64(to_base64(str1)) ORDER BY 1,2;
 count | from_base64 
-------+-------------
     6 | ---XYZ---
(1 row)

-- select from_base64 with group by index (result)
--Testcase 1211:
SELECT value1, from_base64(to_base64(str1)) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | from_base64 
--------+-------------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select from_base64 with group by having (explain)
--Testcase 1212:
EXPLAIN VERBOSE
SELECT count(value1), from_base64(to_base64(str1)) FROM s3 GROUP BY from_base64(to_base64(str1)), str1 HAVING from_base64(to_base64(str1)) IS NOT NULL ORDER BY 1,2;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4098.07..4098.57 rows=199 width=72)
   Output: (count(value1)), (from_base64(to_base64(str1))), str1
   Sort Key: (count(s3.value1)), (from_base64(to_base64(s3.str1)))
   ->  HashAggregate  (cost=3888.97..4090.47 rows=199 width=72)
         Output: count(value1), (from_base64(to_base64(str1))), str1
         Group Key: (from_base64(to_base64(s3.str1))), s3.str1
         Filter: ((from_base64(to_base64(s3.str1))) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=72)
               Output: (from_base64(to_base64(str1))), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT from_base64(to_base64(`str1`)), `str1`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.from_base64(public.to_base64(str1)), str1, value1 FROM public.s31mysql
(16 rows)

-- select from_base64 with group by having (result)
--Testcase 1213:
SELECT count(value1), from_base64(to_base64(str1)) FROM s3 GROUP BY from_base64(to_base64(str1)), str1 HAVING from_base64(to_base64(str1)) IS NOT NULL ORDER BY 1,2;
 count | from_base64 
-------+-------------
     6 | ---XYZ---
(1 row)

-- select from_base64 with group by index having (result)
--Testcase 1214:
SELECT value1, from_base64(to_base64(str1)) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | from_base64 
--------+-------------
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(3 rows)

--
-- test hex()
--
-- select hex (stub function, explain)
--Testcase 1215:
EXPLAIN VERBOSE
SELECT hex(tag1), hex(value2), hex(value4), hex(str1), hex(str2) FROM s3 ORDER BY 1,2,3,4,5;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9426.12..9443.18 rows=6826 width=160)
   Output: (hex(tag1)), (hex((value2)::bigint)), (hex((value4)::bigint)), (hex(str1)), (hex(str2))
   Sort Key: (hex(s3.tag1)), (hex((s3.value2)::bigint)), (hex((s3.value4)::bigint)), (hex(s3.str1)), (hex(s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..8991.41 rows=6826 width=160)
         Output: (hex(tag1)), (hex((value2)::bigint)), (hex((value4)::bigint)), (hex(str1)), (hex(str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT hex(`tag1`), hex(`value2`), hex(`value4`), hex(`str1`), hex(`str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.hex(tag1), public.hex(value2), public.hex(value4), public.hex(str1), public.hex(str2) FROM public.s31mysql
(12 rows)

-- select hex (stub function, result)
--Testcase 1216:
SELECT hex(tag1), hex(value2), hex(value4), hex(str1), hex(str2) FROM s3 ORDER BY 1,2,3,4,5;
 hex | hex |       hex        |        hex         |        hex         
-----+-----+------------------+--------------------+--------------------
 61  | 64  | FFFFFFFFFFFFFF9C | 2D2D2D58595A2D2D2D | 20202058595A202020
 61  | 64  | FFFFFFFFFFFFFF9C | 2D2D2D58595A2D2D2D | 20202058595A202020
 61  | 64  | FFFFFFFFFFFFFF9C | 2D2D2D58595A2D2D2D | 20202058595A202020
 62  | C8  | FFFFFFFFFFFFFF38 | 2D2D2D58595A2D2D2D | 20202058595A202020
 62  | C8  | FFFFFFFFFFFFFF38 | 2D2D2D58595A2D2D2D | 20202058595A202020
 62  | C8  | FFFFFFFFFFFFFF38 | 2D2D2D58595A2D2D2D | 20202058595A202020
(6 rows)

-- select hex (stub function, not pushdown constraints, explain)
--Testcase 1217:
EXPLAIN VERBOSE
SELECT value1, hex(str1) FROM s3 WHERE to_hex(value2) = '64';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (hex(str1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, hex(`str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.hex(str1), value2 FROM public.s31mysql
(8 rows)

-- select hex (stub function, not pushdown constraints, result)
--Testcase 1218:
SELECT value1, hex(str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 |        hex         
--------+--------------------
    0.1 | 2D2D2D58595A2D2D2D
    0.2 | 2D2D2D58595A2D2D2D
    0.3 | 2D2D2D58595A2D2D2D
(3 rows)

-- select hex (stub function, pushdown constraints, explain)
--Testcase 1219:
EXPLAIN VERBOSE
SELECT value1, hex(str1) FROM s3 WHERE value2 != 200;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (hex(str1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, hex(`str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.hex(str1) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select hex (stub function, pushdown constraints, result)
--Testcase 1220:
SELECT value1, hex(str1) FROM s3 WHERE value2 != 200;
 value1 |        hex         
--------+--------------------
    0.1 | 2D2D2D58595A2D2D2D
    0.2 | 2D2D2D58595A2D2D2D
    0.3 | 2D2D2D58595A2D2D2D
(3 rows)

-- select hex with non pushdown func and explicit constant (explain)
--Testcase 1221:
EXPLAIN VERBOSE
SELECT hex(str1), pi(), 4.1 FROM s3;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (hex(str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT hex(`str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.hex(str1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select hex with non pushdown func and explicit constant (result)
--Testcase 1222:
SELECT hex(str1), pi(), 4.1 FROM s3;
        hex         |        pi         | ?column? 
--------------------+-------------------+----------
 2D2D2D58595A2D2D2D | 3.141592653589793 |      4.1
 2D2D2D58595A2D2D2D | 3.141592653589793 |      4.1
 2D2D2D58595A2D2D2D | 3.141592653589793 |      4.1
 2D2D2D58595A2D2D2D | 3.141592653589793 |      4.1
 2D2D2D58595A2D2D2D | 3.141592653589793 |      4.1
 2D2D2D58595A2D2D2D | 3.141592653589793 |      4.1
(6 rows)

-- select hex with order by (explain)
--Testcase 1223:
EXPLAIN VERBOSE
SELECT value1, hex(str1) FROM s3 ORDER BY value1, hex(str1);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (hex(str1))
   Sort Key: s3.value1, (hex(s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (hex(str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, hex(`str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.hex(str1) FROM public.s31mysql
(12 rows)

-- select hex with order by (result)
--Testcase 1224:
SELECT value1, hex(str1) FROM s3 ORDER BY value1, hex(str1);
 value1 |        hex         
--------+--------------------
    0.1 | 2D2D2D58595A2D2D2D
    0.2 | 2D2D2D58595A2D2D2D
    0.3 | 2D2D2D58595A2D2D2D
    1.1 | 2D2D2D58595A2D2D2D
    2.2 | 2D2D2D58595A2D2D2D
    3.3 | 2D2D2D58595A2D2D2D
(6 rows)

-- select hex with order by index (result)
--Testcase 1225:
SELECT value1, hex(str1) FROM s3 ORDER BY 2,1;
 value1 |        hex         
--------+--------------------
    0.1 | 2D2D2D58595A2D2D2D
    0.2 | 2D2D2D58595A2D2D2D
    0.3 | 2D2D2D58595A2D2D2D
    1.1 | 2D2D2D58595A2D2D2D
    2.2 | 2D2D2D58595A2D2D2D
    3.3 | 2D2D2D58595A2D2D2D
(6 rows)

-- select hex with order by index (result)
--Testcase 1226:
SELECT value1, hex(str1) FROM s3 ORDER BY 1,2;
 value1 |        hex         
--------+--------------------
    0.1 | 2D2D2D58595A2D2D2D
    0.2 | 2D2D2D58595A2D2D2D
    0.3 | 2D2D2D58595A2D2D2D
    1.1 | 2D2D2D58595A2D2D2D
    2.2 | 2D2D2D58595A2D2D2D
    3.3 | 2D2D2D58595A2D2D2D
(6 rows)

-- select hex with group by (explain)
--Testcase 1227:
EXPLAIN VERBOSE
SELECT count(value1), hex(str1) FROM s3 GROUP BY hex(str1) ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (hex(str1))
   Sort Key: (count(s3.value1)), (hex(s3.str1))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (hex(str1))
         Group Key: (hex(s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (hex(str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT hex(`str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.hex(str1), value1 FROM public.s31mysql
(15 rows)

-- select hex with group by (result)
--Testcase 1228:
SELECT count(value1), hex(str1) FROM s3 GROUP BY hex(str1) ORDER BY 1,2;
 count |        hex         
-------+--------------------
     6 | 2D2D2D58595A2D2D2D
(1 row)

-- select hex with group by index (result)
--Testcase 1229:
SELECT value1, hex(str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |        hex         
--------+--------------------
    0.1 | 2D2D2D58595A2D2D2D
    0.2 | 2D2D2D58595A2D2D2D
    0.3 | 2D2D2D58595A2D2D2D
    1.1 | 2D2D2D58595A2D2D2D
    2.2 | 2D2D2D58595A2D2D2D
    3.3 | 2D2D2D58595A2D2D2D
(6 rows)

-- select hex with group by having (explain)
--Testcase 1230:
EXPLAIN VERBOSE
SELECT count(value1), hex(str1) FROM s3 GROUP BY hex(str1), str1 HAVING hex(str1) IS NOT NULL ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=72)
   Output: (count(value1)), (hex(str1)), str1
   Sort Key: (count(s3.value1)), (hex(s3.str1))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=72)
         Output: count(value1), (hex(str1)), str1
         Group Key: (hex(s3.str1)), s3.str1
         Filter: ((hex(s3.str1)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
               Output: (hex(str1)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT hex(`str1`), `str1`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.hex(str1), str1, value1 FROM public.s31mysql
(16 rows)

-- select hex with group by having (result)
--Testcase 1231:
SELECT count(value1), hex(str1) FROM s3 GROUP BY hex(str1), str1 HAVING hex(str1) IS NOT NULL ORDER BY 1,2;
 count |        hex         
-------+--------------------
     6 | 2D2D2D58595A2D2D2D
(1 row)

-- select hex with group by index having (result)
--Testcase 1232:
SELECT value1, hex(value4) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |       hex        
--------+------------------
    1.1 | FFFFFFFFFFFFFF38
    2.2 | FFFFFFFFFFFFFF38
    3.3 | FFFFFFFFFFFFFF38
(3 rows)

--
-- test insert()
--
-- select insert (stub function, explain)
--Testcase 1233:
EXPLAIN VERBOSE
SELECT insert(str1, 3, 4, str2) FROM s3;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (insert(str1, 3, 4, str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT insert(`str1`, 3, 4, `str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.insert(str1, 3, 4, str2) FROM public.s31mysql
(7 rows)

-- select hex (stub function, result)
--Testcase 1234:
SELECT insert(str1, 3, 4, str2) FROM s3;
     insert     
----------------
 --   XYZ   ---
 --   XYZ   ---
 --   XYZ   ---
 --   XYZ   ---
 --   XYZ   ---
 --   XYZ   ---
(6 rows)

-- select insert (stub function, not pushdown constraints, explain)
--Testcase 1235:
EXPLAIN VERBOSE
SELECT value1, insert(str1, 3, 4, str2) FROM s3 WHERE to_hex(value2) = '64';
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (insert(str1, 3, 4, str2))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, insert(`str1`, 3, 4, `str2`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.insert(str1, 3, 4, str2), value2 FROM public.s31mysql
(8 rows)

-- select insert (stub function, not pushdown constraints, result)
--Testcase 1236:
SELECT value1, insert(str1, 3, 4, str2) FROM s3 WHERE to_hex(value2) = '64';
 value1 |     insert     
--------+----------------
    0.1 | --   XYZ   ---
    0.2 | --   XYZ   ---
    0.3 | --   XYZ   ---
(3 rows)

-- select insert (stub function, pushdown constraints, explain)
--Testcase 1237:
EXPLAIN VERBOSE
SELECT value1, insert(str1, 3, 4, str2) FROM s3 WHERE value2 != 200;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (insert(str1, 3, 4, str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, insert(`str1`, 3, 4, `str2`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.insert(str1, 3, 4, str2) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select insert (stub function, pushdown constraints, result)
--Testcase 1238:
SELECT value1, insert(str1, 3, 4, str2) FROM s3 WHERE value2 != 200;
 value1 |     insert     
--------+----------------
    0.1 | --   XYZ   ---
    0.2 | --   XYZ   ---
    0.3 | --   XYZ   ---
(3 rows)

-- select insert with non pushdown func and explicit constant (explain)
--Testcase 1239:
EXPLAIN VERBOSE
SELECT insert(str1, 3, 4, str2), pi(), 4.1 FROM s3;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (insert(str1, 3, 4, str2)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT insert(`str1`, 3, 4, `str2`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.insert(str1, 3, 4, str2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select insert with non pushdown func and explicit constant (result)
--Testcase 1240:
SELECT insert(str1, 3, 4, str2), pi(), 4.1 FROM s3;
     insert     |        pi         | ?column? 
----------------+-------------------+----------
 --   XYZ   --- | 3.141592653589793 |      4.1
 --   XYZ   --- | 3.141592653589793 |      4.1
 --   XYZ   --- | 3.141592653589793 |      4.1
 --   XYZ   --- | 3.141592653589793 |      4.1
 --   XYZ   --- | 3.141592653589793 |      4.1
 --   XYZ   --- | 3.141592653589793 |      4.1
(6 rows)

-- select insert with order by (explain)
--Testcase 1241:
EXPLAIN VERBOSE
SELECT value1, insert(str1, 3, 4, str2) FROM s3 ORDER BY value1, insert(str1, 3, 4, str2);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (insert(str1, 3, 4, str2))
   Sort Key: s3.value1, (insert(s3.str1, 3, 4, s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (insert(str1, 3, 4, str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, insert(`str1`, 3, 4, `str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.insert(str1, 3, 4, str2) FROM public.s31mysql
(12 rows)

-- select insert with order by (result)
--Testcase 1242:
SELECT value1, insert(str1, 3, 4, str2) FROM s3 ORDER BY value1, insert(str1, 3, 4, str2);
 value1 |     insert     
--------+----------------
    0.1 | --   XYZ   ---
    0.2 | --   XYZ   ---
    0.3 | --   XYZ   ---
    1.1 | --   XYZ   ---
    2.2 | --   XYZ   ---
    3.3 | --   XYZ   ---
(6 rows)

-- select insert with order by index (result)
--Testcase 1243:
SELECT value1, insert(str1, 3, 4, str2) FROM s3 ORDER BY 2,1;
 value1 |     insert     
--------+----------------
    0.1 | --   XYZ   ---
    0.2 | --   XYZ   ---
    0.3 | --   XYZ   ---
    1.1 | --   XYZ   ---
    2.2 | --   XYZ   ---
    3.3 | --   XYZ   ---
(6 rows)

-- select insert with order by index (result)
--Testcase 1244:
SELECT value1, insert(str1, 3, 4, str2) FROM s3 ORDER BY 1,2;
 value1 |     insert     
--------+----------------
    0.1 | --   XYZ   ---
    0.2 | --   XYZ   ---
    0.3 | --   XYZ   ---
    1.1 | --   XYZ   ---
    2.2 | --   XYZ   ---
    3.3 | --   XYZ   ---
(6 rows)

-- select insert with group by (explain)
--Testcase 1245:
EXPLAIN VERBOSE
SELECT count(value1), insert(str1, 3, 4, str2) FROM s3 GROUP BY insert(str1, 3, 4, str2) ORDER BY 1,2;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (insert(str1, 3, 4, str2))
   Sort Key: (count(s3.value1)), (insert(s3.str1, 3, 4, s3.str2))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (insert(str1, 3, 4, str2))
         Group Key: (insert(s3.str1, 3, 4, s3.str2))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (insert(str1, 3, 4, str2)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT insert(`str1`, 3, 4, `str2`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.insert(str1, 3, 4, str2), value1 FROM public.s31mysql
(15 rows)

-- select insert with group by (result)
--Testcase 1246:
SELECT count(value1), insert(str1, 3, 4, str2) FROM s3 GROUP BY insert(str1, 3, 4, str2) ORDER BY 1,2;
 count |     insert     
-------+----------------
     6 | --   XYZ   ---
(1 row)

-- select insert with group by index (result)
--Testcase 1247:
SELECT value1, insert(str1, 3, 4, str2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |     insert     
--------+----------------
    0.1 | --   XYZ   ---
    0.2 | --   XYZ   ---
    0.3 | --   XYZ   ---
    1.1 | --   XYZ   ---
    2.2 | --   XYZ   ---
    3.3 | --   XYZ   ---
(6 rows)

-- select insert with group by having (explain)
--Testcase 1248:
EXPLAIN VERBOSE
SELECT count(value1), insert(str1, 3, 4, str2) FROM s3 GROUP BY insert(str1, 3, 4, str2), str1, str2 HAVING insert(str1, 3, 4, str2) IS NOT NULL ORDER BY 1,2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort  (cost=2308.89..2309.39 rows=199 width=104)
   Output: (count(value1)), (insert(str1, 3, 4, str2)), str1, str2
   Sort Key: (count(s3.value1)), (insert(s3.str1, 3, 4, s3.str2))
   ->  HashAggregate  (cost=2199.54..2301.29 rows=199 width=104)
         Output: count(value1), (insert(str1, 3, 4, str2)), str1, str2
         Group Key: (insert(s3.str1, 3, 4, s3.str2)), s3.str1, s3.str2
         Filter: ((insert(s3.str1, 3, 4, s3.str2)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=104)
               Output: (insert(str1, 3, 4, str2)), str1, str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT insert(`str1`, 3, 4, `str2`), `str1`, `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.insert(str1, 3, 4, str2), str1, str2, value1 FROM public.s31mysql
(16 rows)

-- select insert with group by having (result)
--Testcase 1249:
SELECT count(value1), insert(str1, 3, 4, str2) FROM s3 GROUP BY insert(str1, 3, 4, str2), str1, str2 HAVING insert(str1, 3, 4, str2) IS NOT NULL ORDER BY 1,2;
 count |     insert     
-------+----------------
     6 | --   XYZ   ---
(1 row)

-- select insert with group by index having (result)
--Testcase 1250:
SELECT value1, insert(str1, 3, 4, str2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |     insert     
--------+----------------
    1.1 | --   XYZ   ---
    2.2 | --   XYZ   ---
    3.3 | --   XYZ   ---
(3 rows)

--
-- test instr()
--
-- select instr (stub function, explain)
--Testcase 1251:
EXPLAIN VERBOSE
SELECT instr(str1, str2) FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (instr(str1, str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT instr(`str1`, `str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.instr(str1, str2) FROM public.s31mysql
(7 rows)

-- select instr (stub function, result)
--Testcase 1252:
SELECT instr(str1, str2) FROM s3;
 instr 
-------
     0
     0
     0
     0
     0
     0
(6 rows)

-- select instr (stub function, not pushdown constraints, explain)
--Testcase 1253:
EXPLAIN VERBOSE
SELECT value1, instr(str1, str2) FROM s3 WHERE to_hex(value2) = '64';
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=16)
   Output: value1, (instr(str1, str2))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, instr(`str1`, `str2`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.instr(str1, str2), value2 FROM public.s31mysql
(8 rows)

-- select instr (stub function, not pushdown constraints, result)
--Testcase 1254:
SELECT value1, instr(str1, str2) FROM s3 WHERE to_hex(value2) = '64';
 value1 | instr 
--------+-------
    0.1 |     0
    0.2 |     0
    0.3 |     0
(3 rows)

-- select instr (stub function, pushdown constraints, explain)
--Testcase 1255:
EXPLAIN VERBOSE
SELECT value1, instr(str1, str2) FROM s3 WHERE value2 != 200;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=16)
   Output: value1, (instr(str1, str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, instr(`str1`, `str2`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.instr(str1, str2) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select instr (stub function, pushdown constraints, result)
--Testcase 1256:
SELECT value1, instr(str1, str2) FROM s3 WHERE value2 != 200;
 value1 | instr 
--------+-------
    0.1 |     0
    0.2 |     0
    0.3 |     0
(3 rows)

-- select instr with non pushdown func and explicit constant (explain)
--Testcase 1257:
EXPLAIN VERBOSE
SELECT instr(str1, str2), pi(), 4.1 FROM s3;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=48)
   Output: (instr(str1, str2)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT instr(`str1`, `str2`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.instr(str1, str2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select instr with non pushdown func and explicit constant (result)
--Testcase 1258:
SELECT instr(str1, str2), pi(), 4.1 FROM s3;
 instr |        pi         | ?column? 
-------+-------------------+----------
     0 | 3.141592653589793 |      4.1
     0 | 3.141592653589793 |      4.1
     0 | 3.141592653589793 |      4.1
     0 | 3.141592653589793 |      4.1
     0 | 3.141592653589793 |      4.1
     0 | 3.141592653589793 |      4.1
(6 rows)

-- select instr with order by (explain)
--Testcase 1259:
EXPLAIN VERBOSE
SELECT value1, instr(str1, str2) FROM s3 ORDER BY value1, instr(str1, str2);
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=16)
   Output: value1, (instr(str1, str2))
   Sort Key: s3.value1, (instr(s3.str1, s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=16)
         Output: value1, (instr(str1, str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, instr(`str1`, `str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.instr(str1, str2) FROM public.s31mysql
(12 rows)

-- select instr with order by (result)
--Testcase 1260:
SELECT value1, instr(str1, str2) FROM s3 ORDER BY value1, instr(str1, str2);
 value1 | instr 
--------+-------
    0.1 |     0
    0.2 |     0
    0.3 |     0
    1.1 |     0
    2.2 |     0
    3.3 |     0
(6 rows)

-- select instr with order by index (result)
--Testcase 1261:
SELECT value1, instr(str1, str2) FROM s3 ORDER BY 2,1;
 value1 | instr 
--------+-------
    0.1 |     0
    0.2 |     0
    0.3 |     0
    1.1 |     0
    2.2 |     0
    3.3 |     0
(6 rows)

-- select instr with order by index (result)
--Testcase 1262:
SELECT value1, instr(str1, str2) FROM s3 ORDER BY 1,2;
 value1 | instr 
--------+-------
    0.1 |     0
    0.2 |     0
    0.3 |     0
    1.1 |     0
    2.2 |     0
    3.3 |     0
(6 rows)

-- select instr with group by (explain)
--Testcase 1263:
EXPLAIN VERBOSE
SELECT count(value1), instr(str1, str2) FROM s3 GROUP BY instr(str1, str2) ORDER BY 1,2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=16)
   Output: (count(value1)), (instr(str1, str2))
   Sort Key: (count(s3.value1)), (instr(s3.str1, s3.str2))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=16)
         Output: count(value1), (instr(str1, str2))
         Group Key: (instr(s3.str1, s3.str2))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (instr(str1, str2)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT instr(`str1`, `str2`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.instr(str1, str2), value1 FROM public.s31mysql
(15 rows)

-- select instr with group by (result)
--Testcase 1264:
SELECT count(value1), instr(str1, str2) FROM s3 GROUP BY instr(str1, str2) ORDER BY 1,2;
 count | instr 
-------+-------
     6 |     0
(1 row)

-- select instr with group by index (result)
--Testcase 1265:
SELECT value1, instr(str1, str2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | instr 
--------+-------
    0.1 |     0
    0.2 |     0
    0.3 |     0
    1.1 |     0
    2.2 |     0
    3.3 |     0
(6 rows)

-- select instr with group by having (explain)
--Testcase 1266:
EXPLAIN VERBOSE
SELECT count(value1), instr(str1, str2) FROM s3 GROUP BY instr(str1, str2), str1, str2 HAVING instr(str1, str2) IS NOT NULL ORDER BY 1,2;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort  (cost=2308.89..2309.39 rows=199 width=80)
   Output: (count(value1)), (instr(str1, str2)), str1, str2
   Sort Key: (count(s3.value1)), (instr(s3.str1, s3.str2))
   ->  HashAggregate  (cost=2199.54..2301.29 rows=199 width=80)
         Output: count(value1), (instr(str1, str2)), str1, str2
         Group Key: (instr(s3.str1, s3.str2)), s3.str1, s3.str2
         Filter: ((instr(s3.str1, s3.str2)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=80)
               Output: (instr(str1, str2)), str1, str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT instr(`str1`, `str2`), `str1`, `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.instr(str1, str2), str1, str2, value1 FROM public.s31mysql
(16 rows)

-- select instr with group by having (result)
--Testcase 1267:
SELECT count(value1), instr(str1, str2) FROM s3 GROUP BY instr(str1, str2), str1, str2 HAVING instr(str1, str2) IS NOT NULL ORDER BY 1,2;
 count | instr 
-------+-------
     6 |     0
(1 row)

-- select instr with group by index having (result)
--Testcase 1268:
SELECT value1, instr(str1, str2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | instr 
--------+-------
    1.1 |     0
    2.2 |     0
    3.3 |     0
(3 rows)

--
-- test lcase()
--
-- select lcase (stub function, explain)
--Testcase 1269:
EXPLAIN VERBOSE
SELECT lcase(tag1), lcase(str1), lcase(str2) FROM s3 ORDER BY 1,2,3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=5978.99..5996.05 rows=6826 width=96)
   Output: (lcase(tag1)), (lcase(str1)), (lcase(str2))
   Sort Key: (lcase(s3.tag1)), (lcase(s3.str1)), (lcase(s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..5544.28 rows=6826 width=96)
         Output: (lcase(tag1)), (lcase(str1)), (lcase(str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT lcase(`tag1`), lcase(`str1`), lcase(`str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.lcase(tag1), public.lcase(str1), public.lcase(str2) FROM public.s31mysql
(12 rows)

-- select lcase (stub function, result)
--Testcase 1270:
SELECT lcase(tag1), lcase(str1), lcase(str2) FROM s3 ORDER BY 1,2,3;
 lcase |   lcase   |   lcase   
-------+-----------+-----------
 a     | ---xyz--- |    xyz   
 a     | ---xyz--- |    xyz   
 a     | ---xyz--- |    xyz   
 b     | ---xyz--- |    xyz   
 b     | ---xyz--- |    xyz   
 b     | ---xyz--- |    xyz   
(6 rows)

-- select lcase (stub function, not pushdown constraints, explain)
--Testcase 1271:
EXPLAIN VERBOSE
SELECT value1, lcase(str1) FROM s3 WHERE to_hex(value2) = '64';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (lcase(str1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, lcase(`str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.lcase(str1), value2 FROM public.s31mysql
(8 rows)

-- select lcase (stub function, not pushdown constraints, result)
--Testcase 1272:
SELECT value1, lcase(str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 |   lcase   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
(3 rows)

-- select lcase (stub function, pushdown constraints, explain)
--Testcase 1273:
EXPLAIN VERBOSE
SELECT value1, lcase(str1) FROM s3 WHERE value2 != 200;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (lcase(str1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, lcase(`str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.lcase(str1) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select lcase (stub function, pushdown constraints, result)
--Testcase 1274:
SELECT value1, lcase(str1) FROM s3 WHERE value2 != 200;
 value1 |   lcase   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
(3 rows)

-- select lcase with non pushdown func and explicit constant (explain)
--Testcase 1275:
EXPLAIN VERBOSE
SELECT lcase(str1), pi(), 4.1 FROM s3;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (lcase(str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT lcase(`str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.lcase(str1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select lcase with non pushdown func and explicit constant (result)
--Testcase 1276:
SELECT lcase(str1), pi(), 4.1 FROM s3;
   lcase   |        pi         | ?column? 
-----------+-------------------+----------
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
(6 rows)

-- select lcase with order by (explain)
--Testcase 1277:
EXPLAIN VERBOSE
SELECT value1, lcase(str1) FROM s3 ORDER BY value1, lcase(str1);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (lcase(str1))
   Sort Key: s3.value1, (lcase(s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (lcase(str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, lcase(`str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.lcase(str1) FROM public.s31mysql
(12 rows)

-- select lcase with order by (result)
--Testcase 1278:
SELECT value1, lcase(str1) FROM s3 ORDER BY value1, lcase(str1);
 value1 |   lcase   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(6 rows)

-- select lcase with order by index (result)
--Testcase 1279:
SELECT value1, lcase(str1) FROM s3 ORDER BY 2,1;
 value1 |   lcase   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(6 rows)

-- select lcase with order by index (result)
--Testcase 1280:
SELECT value1, lcase(str1) FROM s3 ORDER BY 1,2;
 value1 |   lcase   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(6 rows)

-- select lcase with group by (explain)
--Testcase 1281:
EXPLAIN VERBOSE
SELECT count(value1), lcase(str1) FROM s3 GROUP BY lcase(str1) ORDER BY 1,2;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (lcase(str1))
   Sort Key: (count(s3.value1)), (lcase(s3.str1))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (lcase(str1))
         Group Key: (lcase(s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (lcase(str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT lcase(`str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.lcase(str1), value1 FROM public.s31mysql
(15 rows)

-- select lcase with group by (result)
--Testcase 1282:
SELECT count(value1), lcase(str1) FROM s3 GROUP BY lcase(str1) ORDER BY 1,2;
 count |   lcase   
-------+-----------
     6 | ---xyz---
(1 row)

-- select lcase with group by index (result)
--Testcase 1283:
SELECT value1, lcase(str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |   lcase   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(6 rows)

-- select lcase with group by having (explain)
--Testcase 1284:
EXPLAIN VERBOSE
SELECT count(value1), lcase(str1) FROM s3 GROUP BY lcase(str1), str1 HAVING lcase(str1) IS NOT NULL ORDER BY 1,2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=72)
   Output: (count(value1)), (lcase(str1)), str1
   Sort Key: (count(s3.value1)), (lcase(s3.str1))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=72)
         Output: count(value1), (lcase(str1)), str1
         Group Key: (lcase(s3.str1)), s3.str1
         Filter: ((lcase(s3.str1)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
               Output: (lcase(str1)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT lcase(`str1`), `str1`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.lcase(str1), str1, value1 FROM public.s31mysql
(16 rows)

-- select lcase with group by having (result)
--Testcase 1285:
SELECT count(value1), lcase(str1) FROM s3 GROUP BY lcase(str1), str1 HAVING lcase(str1) IS NOT NULL ORDER BY 1,2;
 count |   lcase   
-------+-----------
     6 | ---xyz---
(1 row)

-- select lcase with group by index having (result)
--Testcase 1286:
SELECT value1, lcase(str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |   lcase   
--------+-----------
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(3 rows)

--
-- test left()
--
-- select left (stub function, explain)
--Testcase 1287:
EXPLAIN VERBOSE
SELECT left(str1, 5), left(str2, 5) FROM s3;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: ("left"(str1, 5)), ("left"(str2, 5))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT left(`str1`, 5), left(`str2`, 5) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT "left"(str1, 5), "left"(str2, 5) FROM public.s31mysql
(7 rows)

-- select left (stub function, result)
--Testcase 1288:
SELECT left(str1, 5), left(str2, 5) FROM s3;
 left  | left  
-------+-------
 ---XY |    XY
 ---XY |    XY
 ---XY |    XY
 ---XY |    XY
 ---XY |    XY
 ---XY |    XY
(6 rows)

-- select left (stub function, not pushdown constraints, explain)
--Testcase 1289:
EXPLAIN VERBOSE
SELECT value1, left(str1, 5) FROM s3 WHERE to_hex(value2) = '64';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, ("left"(str1, 5))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, left(`str1`, 5), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, "left"(str1, 5), value2 FROM public.s31mysql
(8 rows)

-- select left (stub function, not pushdown constraints, result)
--Testcase 1290:
SELECT value1, left(str1, 5) FROM s3 WHERE to_hex(value2) = '64';
 value1 | left  
--------+-------
    0.1 | ---XY
    0.2 | ---XY
    0.3 | ---XY
(3 rows)

-- select left (stub function, pushdown constraints, explain)
--Testcase 1291:
EXPLAIN VERBOSE
SELECT value1, left(str1, 5) FROM s3 WHERE value2 != 200;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, ("left"(str1, 5))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, left(`str1`, 5) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, "left"(str1, 5) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select left (stub function, pushdown constraints, result)
--Testcase 1292:
SELECT value1, left(str1, 5) FROM s3 WHERE value2 != 200;
 value1 | left  
--------+-------
    0.1 | ---XY
    0.2 | ---XY
    0.3 | ---XY
(3 rows)

-- select left with non pushdown func and explicit constant (explain)
--Testcase 1293:
EXPLAIN VERBOSE
SELECT left(str1, 5), pi(), 4.1 FROM s3;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: ("left"(str1, 5)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT left(`str1`, 5), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT "left"(str1, 5), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select left with non pushdown func and explicit constant (result)
--Testcase 1294:
SELECT left(str1, 5), pi(), 4.1 FROM s3;
 left  |        pi         | ?column? 
-------+-------------------+----------
 ---XY | 3.141592653589793 |      4.1
 ---XY | 3.141592653589793 |      4.1
 ---XY | 3.141592653589793 |      4.1
 ---XY | 3.141592653589793 |      4.1
 ---XY | 3.141592653589793 |      4.1
 ---XY | 3.141592653589793 |      4.1
(6 rows)

-- select left with order by (explain)
--Testcase 1295:
EXPLAIN VERBOSE
SELECT value1, left(str1, 5) FROM s3 ORDER BY value1, left(str1, 5);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, ("left"(str1, 5))
   Sort Key: s3.value1, ("left"(s3.str1, 5))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, ("left"(str1, 5))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, left(`str1`, 5) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, "left"(str1, 5) FROM public.s31mysql
(12 rows)

-- select left with order by (result)
--Testcase 1296:
SELECT value1, left(str1, 5) FROM s3 ORDER BY value1, left(str1, 5);
 value1 | left  
--------+-------
    0.1 | ---XY
    0.2 | ---XY
    0.3 | ---XY
    1.1 | ---XY
    2.2 | ---XY
    3.3 | ---XY
(6 rows)

-- select left with order by index (result)
--Testcase 1297:
SELECT value1, left(str1, 5) FROM s3 ORDER BY 2,1;
 value1 | left  
--------+-------
    0.1 | ---XY
    0.2 | ---XY
    0.3 | ---XY
    1.1 | ---XY
    2.2 | ---XY
    3.3 | ---XY
(6 rows)

-- select left with order by index (result)
--Testcase 1298:
SELECT value1, left(str1, 5) FROM s3 ORDER BY 1,2;
 value1 | left  
--------+-------
    0.1 | ---XY
    0.2 | ---XY
    0.3 | ---XY
    1.1 | ---XY
    2.2 | ---XY
    3.3 | ---XY
(6 rows)

-- select left with group by (explain)
--Testcase 1299:
EXPLAIN VERBOSE
SELECT count(value1), left(str1, 5) FROM s3 GROUP BY left(str1, 5) ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), ("left"(str1, 5))
   Sort Key: (count(s3.value1)), ("left"(s3.str1, 5))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), ("left"(str1, 5))
         Group Key: ("left"(s3.str1, 5))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: ("left"(str1, 5)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT left(`str1`, 5), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT "left"(str1, 5), value1 FROM public.s31mysql
(15 rows)

-- select left with group by (result)
--Testcase 1300:
SELECT count(value1), left(str1, 5) FROM s3 GROUP BY left(str1, 5) ORDER BY 1,2;
 count | left  
-------+-------
     6 | ---XY
(1 row)

-- select left with group by index (result)
--Testcase 1301:
SELECT value1, left(str1, 5) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | left  
--------+-------
    0.1 | ---XY
    0.2 | ---XY
    0.3 | ---XY
    1.1 | ---XY
    2.2 | ---XY
    3.3 | ---XY
(6 rows)

-- select left with group by having (explain)
--Testcase 1302:
EXPLAIN VERBOSE
SELECT count(value1), left(str1, 5) FROM s3 GROUP BY left(str1, 5), str1 HAVING left(str1, 5) IS NOT NULL ORDER BY 1,2;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=72)
   Output: (count(value1)), ("left"(str1, 5)), str1
   Sort Key: (count(s3.value1)), ("left"(s3.str1, 5))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=72)
         Output: count(value1), ("left"(str1, 5)), str1
         Group Key: ("left"(s3.str1, 5)), s3.str1
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=72)
               Output: ("left"(str1, 5)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT left(`str1`, 5), `str1`, `value1` FROM `test`.`s32` WHERE ((left(`str1`, 5) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT "left"(str1, 5), str1, value1 FROM public.s31mysql WHERE (("left"(str1, 5) IS NOT NULL))
(15 rows)

-- select left with group by having (result)
--Testcase 1303:
SELECT count(value1), left(str1, 5) FROM s3 GROUP BY left(str1, 5), str1 HAVING left(str1, 5) IS NOT NULL ORDER BY 1,2;
 count | left  
-------+-------
     6 | ---XY
(1 row)

-- select left with group by index having (result)
--Testcase 1304:
SELECT value1, left(str1, 5) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | left  
--------+-------
    1.1 | ---XY
    2.2 | ---XY
    3.3 | ---XY
(3 rows)

--
-- test length()
--
-- select length (stub function, explain)
--Testcase 1305:
EXPLAIN VERBOSE
SELECT length(str1), length(str2) FROM s3;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=8)
   Output: (length(str1)), (length(str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT length(`str1`), length(`str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT length(str1), length(str2) FROM public.s31mysql
(7 rows)

-- select length (stub function, result)
--Testcase 1306:
SELECT length(str1), length(str2) FROM s3;
 length | length 
--------+--------
      9 |      9
      9 |      9
      9 |      9
      9 |      9
      9 |      9
      9 |      9
(6 rows)

-- select length (stub function, not pushdown constraints, explain)
--Testcase 1307:
EXPLAIN VERBOSE
SELECT value1, length(str1) FROM s3 WHERE to_hex(value2) = '64';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=12)
   Output: value1, (length(str1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, length(`str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, length(str1), value2 FROM public.s31mysql
(8 rows)

-- select length (stub function, not pushdown constraints, result)
--Testcase 1308:
SELECT value1, length(str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 | length 
--------+--------
    0.1 |      9
    0.2 |      9
    0.3 |      9
(3 rows)

-- select length (stub function, pushdown constraints, explain)
--Testcase 1309:
EXPLAIN VERBOSE
SELECT value1, length(str1) FROM s3 WHERE value2 != 200;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=12)
   Output: value1, (length(str1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, length(`str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, length(str1) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select length (stub function, pushdown constraints, result)
--Testcase 1310:
SELECT value1, length(str1) FROM s3 WHERE value2 != 200;
 value1 | length 
--------+--------
    0.1 |      9
    0.2 |      9
    0.3 |      9
(3 rows)

-- select length with non pushdown func and explicit constant (explain)
--Testcase 1311:
EXPLAIN VERBOSE
SELECT length(str1), pi(), 4.1 FROM s3;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=44)
   Output: (length(str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT length(`str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT length(str1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select length with non pushdown func and explicit constant (result)
--Testcase 1312:
SELECT length(str1), pi(), 4.1 FROM s3;
 length |        pi         | ?column? 
--------+-------------------+----------
      9 | 3.141592653589793 |      4.1
      9 | 3.141592653589793 |      4.1
      9 | 3.141592653589793 |      4.1
      9 | 3.141592653589793 |      4.1
      9 | 3.141592653589793 |      4.1
      9 | 3.141592653589793 |      4.1
(6 rows)

-- select length with order by (explain)
--Testcase 1313:
EXPLAIN VERBOSE
SELECT value1, length(str1) FROM s3 ORDER BY value1, length(str1);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=12)
   Output: value1, (length(str1))
   Sort Key: s3.value1, (length(s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=12)
         Output: value1, (length(str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, length(`str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, length(str1) FROM public.s31mysql
(12 rows)

-- select length with order by (result)
--Testcase 1314:
SELECT value1, length(str1) FROM s3 ORDER BY value1, length(str1);
 value1 | length 
--------+--------
    0.1 |      9
    0.2 |      9
    0.3 |      9
    1.1 |      9
    2.2 |      9
    3.3 |      9
(6 rows)

-- select length with order by index (result)
--Testcase 1315:
SELECT value1, length(str1) FROM s3 ORDER BY 2,1;
 value1 | length 
--------+--------
    0.1 |      9
    0.2 |      9
    0.3 |      9
    1.1 |      9
    2.2 |      9
    3.3 |      9
(6 rows)

-- select length with order by index (result)
--Testcase 1316:
SELECT value1, length(str1) FROM s3 ORDER BY 1,2;
 value1 | length 
--------+--------
    0.1 |      9
    0.2 |      9
    0.3 |      9
    1.1 |      9
    2.2 |      9
    3.3 |      9
(6 rows)

-- select length with group by (explain)
--Testcase 1317:
EXPLAIN VERBOSE
SELECT count(value1), length(str1) FROM s3 GROUP BY length(str1) ORDER BY 1,2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=12)
   Output: (count(value1)), (length(str1))
   Sort Key: (count(s3.value1)), (length(s3.str1))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=12)
         Output: count(value1), (length(str1))
         Group Key: (length(s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=12)
               Output: (length(str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT length(`str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT length(str1), value1 FROM public.s31mysql
(15 rows)

-- select length with group by (result)
--Testcase 1318:
SELECT count(value1), length(str1) FROM s3 GROUP BY length(str1) ORDER BY 1,2;
 count | length 
-------+--------
     6 |      9
(1 row)

-- select length with group by index (result)
--Testcase 1319:
SELECT value1, length(str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | length 
--------+--------
    0.1 |      9
    0.2 |      9
    0.3 |      9
    1.1 |      9
    2.2 |      9
    3.3 |      9
(6 rows)

-- select length with group by having (explain)
--Testcase 1320:
EXPLAIN VERBOSE
SELECT count(value1), length(str1) FROM s3 GROUP BY length(str1), str1 HAVING length(str1) IS NOT NULL ORDER BY 1,2;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=44)
   Output: (count(value1)), (length(str1)), str1
   Sort Key: (count(s3.value1)), (length(s3.str1))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=44)
         Output: count(value1), (length(str1)), str1
         Group Key: (length(s3.str1)), s3.str1
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=44)
               Output: (length(str1)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT length(`str1`), `str1`, `value1` FROM `test`.`s32` WHERE ((length(`str1`) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT length(str1), str1, value1 FROM public.s31mysql WHERE ((length(str1) IS NOT NULL))
(15 rows)

-- select length with group by having (result)
--Testcase 1321:
SELECT count(value1), length(str1) FROM s3 GROUP BY length(str1), str1 HAVING length(str1) IS NOT NULL ORDER BY 1,2;
 count | length 
-------+--------
     6 |      9
(1 row)

-- select length with group by index having (result)
--Testcase 1322:
SELECT value1, length(str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | length 
--------+--------
    1.1 |      9
    2.2 |      9
    3.3 |      9
(3 rows)

--
-- test locate()
--
-- select locate (stub function, explain)
--Testcase 1323:
EXPLAIN VERBOSE
SELECT locate(str1, str2), locate(str2, str1, 3) FROM s3;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=16)
   Output: (locate(str1, str2)), (locate(str2, str1, '3'::bigint))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT locate(`str1`, `str2`), locate(`str2`, `str1`, 3) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.locate(str1, str2), public.locate(str2, str1, 3::bigint) FROM public.s31mysql
(7 rows)

-- select locate (stub function, result)
--Testcase 1324:
SELECT locate(str1, str2), locate(str2, str1, 3) FROM s3;
 locate | locate 
--------+--------
      0 |      0
      0 |      0
      0 |      0
      0 |      0
      0 |      0
      0 |      0
(6 rows)

-- select locate (stub function, not pushdown constraints, explain)
--Testcase 1325:
EXPLAIN VERBOSE
SELECT value1, locate(str1, str2) FROM s3 WHERE to_hex(value2) = '64';
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=16)
   Output: value1, (locate(str1, str2))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, locate(`str1`, `str2`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.locate(str1, str2), value2 FROM public.s31mysql
(8 rows)

-- select locate (stub function, not pushdown constraints, result)
--Testcase 1326:
SELECT value1, locate(str1, str2) FROM s3 WHERE to_hex(value2) = '64';
 value1 | locate 
--------+--------
    0.1 |      0
    0.2 |      0
    0.3 |      0
(3 rows)

-- select locate (stub function, pushdown constraints, explain)
--Testcase 1327:
EXPLAIN VERBOSE
SELECT value1, locate(str1, str2) FROM s3 WHERE value2 != 200;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=16)
   Output: value1, (locate(str1, str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, locate(`str1`, `str2`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.locate(str1, str2) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select locate (stub function, pushdown constraints, result)
--Testcase 1328:
SELECT value1, locate(str1, str2) FROM s3 WHERE value2 != 200;
 value1 | locate 
--------+--------
    0.1 |      0
    0.2 |      0
    0.3 |      0
(3 rows)

-- select locate with non pushdown func and explicit constant (explain)
--Testcase 1329:
EXPLAIN VERBOSE
SELECT locate(str1, str2), pi(), 4.1 FROM s3;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=48)
   Output: (locate(str1, str2)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT locate(`str1`, `str2`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.locate(str1, str2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select locate with non pushdown func and explicit constant (result)
--Testcase 1330:
SELECT locate(str1, str2), pi(), 4.1 FROM s3;
 locate |        pi         | ?column? 
--------+-------------------+----------
      0 | 3.141592653589793 |      4.1
      0 | 3.141592653589793 |      4.1
      0 | 3.141592653589793 |      4.1
      0 | 3.141592653589793 |      4.1
      0 | 3.141592653589793 |      4.1
      0 | 3.141592653589793 |      4.1
(6 rows)

-- select locate with order by (explain)
--Testcase 1331:
EXPLAIN VERBOSE
SELECT value1, locate(str1, str2) FROM s3 ORDER BY value1, locate(str1, str2);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=16)
   Output: value1, (locate(str1, str2))
   Sort Key: s3.value1, (locate(s3.str1, s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=16)
         Output: value1, (locate(str1, str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, locate(`str1`, `str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.locate(str1, str2) FROM public.s31mysql
(12 rows)

-- select locate with order by (result)
--Testcase 1332:
SELECT value1, locate(str1, str2) FROM s3 ORDER BY value1, locate(str1, str2);
 value1 | locate 
--------+--------
    0.1 |      0
    0.2 |      0
    0.3 |      0
    1.1 |      0
    2.2 |      0
    3.3 |      0
(6 rows)

-- select locate with order by index (result)
--Testcase 1333:
SELECT value1, locate(str1, str2) FROM s3 ORDER BY 2,1;
 value1 | locate 
--------+--------
    0.1 |      0
    0.2 |      0
    0.3 |      0
    1.1 |      0
    2.2 |      0
    3.3 |      0
(6 rows)

-- select locate with order by index (result)
--Testcase 1334:
SELECT value1, locate(str1, str2) FROM s3 ORDER BY 1,2;
 value1 | locate 
--------+--------
    0.1 |      0
    0.2 |      0
    0.3 |      0
    1.1 |      0
    2.2 |      0
    3.3 |      0
(6 rows)

-- select locate with group by (explain)
--Testcase 1335:
EXPLAIN VERBOSE
SELECT count(value1), locate(str1, str2) FROM s3 GROUP BY locate(str1, str2) ORDER BY 1,2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=16)
   Output: (count(value1)), (locate(str1, str2))
   Sort Key: (count(s3.value1)), (locate(s3.str1, s3.str2))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=16)
         Output: count(value1), (locate(str1, str2))
         Group Key: (locate(s3.str1, s3.str2))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (locate(str1, str2)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT locate(`str1`, `str2`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.locate(str1, str2), value1 FROM public.s31mysql
(15 rows)

-- select locate with group by (result)
--Testcase 1336:
SELECT count(value1), locate(str1, str2) FROM s3 GROUP BY locate(str1, str2) ORDER BY 1,2;
 count | locate 
-------+--------
     6 |      0
(1 row)

-- select locate with group by index (result)
--Testcase 1337:
SELECT value1, locate(str1, str2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | locate 
--------+--------
    0.1 |      0
    0.2 |      0
    0.3 |      0
    1.1 |      0
    2.2 |      0
    3.3 |      0
(6 rows)

-- select locate with group by having (explain)
--Testcase 1338:
EXPLAIN VERBOSE
SELECT count(value1), locate(str1, str2) FROM s3 GROUP BY locate(str1, str2), str1, str2 HAVING locate(str1, str2) IS NOT NULL ORDER BY 1,2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=2308.89..2309.39 rows=199 width=80)
   Output: (count(value1)), (locate(str1, str2)), str1, str2
   Sort Key: (count(s3.value1)), (locate(s3.str1, s3.str2))
   ->  HashAggregate  (cost=2199.54..2301.29 rows=199 width=80)
         Output: count(value1), (locate(str1, str2)), str1, str2
         Group Key: (locate(s3.str1, s3.str2)), s3.str1, s3.str2
         Filter: ((locate(s3.str1, s3.str2)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=80)
               Output: (locate(str1, str2)), str1, str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT locate(`str1`, `str2`), `str1`, `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.locate(str1, str2), str1, str2, value1 FROM public.s31mysql
(16 rows)

-- select locate with group by having (result)
--Testcase 1339:
SELECT count(value1), locate(str1, str2) FROM s3 GROUP BY locate(str1, str2), str1, str2 HAVING locate(str1, str2) IS NOT NULL ORDER BY 1,2;
 count | locate 
-------+--------
     6 |      0
(1 row)

-- select locate with group by index having (result)
--Testcase 1340:
SELECT value1, locate(str1, str2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | locate 
--------+--------
    1.1 |      0
    2.2 |      0
    3.3 |      0
(3 rows)

--
-- test lower()
--
-- select lower (stub function, explain)
--Testcase 1341:
EXPLAIN VERBOSE
SELECT lower(str1), lower(str2) FROM s3;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (lower(str1)), (lower(str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT lower(`str1`), lower(`str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT lower(str1), lower(str2) FROM public.s31mysql
(7 rows)

-- select lower (stub function, result)
--Testcase 1342:
SELECT lower(str1), lower(str2) FROM s3;
   lower   |   lower   
-----------+-----------
 ---xyz--- |    xyz   
 ---xyz--- |    xyz   
 ---xyz--- |    xyz   
 ---xyz--- |    xyz   
 ---xyz--- |    xyz   
 ---xyz--- |    xyz   
(6 rows)

-- select lower (stub function, not pushdown constraints, explain)
--Testcase 1343:
EXPLAIN VERBOSE
SELECT value1, lower(str1) FROM s3 WHERE to_hex(value2) = '64';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, (lower(str1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, lower(`str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, lower(str1), value2 FROM public.s31mysql
(8 rows)

-- select lower (stub function, not pushdown constraints, result)
--Testcase 1344:
SELECT value1, lower(str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 |   lower   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
(3 rows)

-- select lower (stub function, pushdown constraints, explain)
--Testcase 1345:
EXPLAIN VERBOSE
SELECT value1, lower(str1) FROM s3 WHERE value2 != 200;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, (lower(str1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, lower(`str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, lower(str1) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select lower (stub function, pushdown constraints, result)
--Testcase 1346:
SELECT value1, lower(str1) FROM s3 WHERE value2 != 200;
 value1 |   lower   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
(3 rows)

-- select lower with non pushdown func and explicit constant (explain)
--Testcase 1347:
EXPLAIN VERBOSE
SELECT lower(str1), pi(), 4.1 FROM s3;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: (lower(str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT lower(`str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT lower(str1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select lower with non pushdown func and explicit constant (result)
--Testcase 1348:
SELECT lower(str1), pi(), 4.1 FROM s3;
   lower   |        pi         | ?column? 
-----------+-------------------+----------
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
(6 rows)

-- select lower with order by (explain)
--Testcase 1349:
EXPLAIN VERBOSE
SELECT value1, lower(str1) FROM s3 ORDER BY value1, lower(str1);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (lower(str1))
   Sort Key: s3.value1, (lower(s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, (lower(str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, lower(`str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, lower(str1) FROM public.s31mysql
(12 rows)

-- select lower with order by (result)
--Testcase 1350:
SELECT value1, lower(str1) FROM s3 ORDER BY value1, lower(str1);
 value1 |   lower   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(6 rows)

-- select lower with order by index (result)
--Testcase 1351:
SELECT value1, lower(str1) FROM s3 ORDER BY 2,1;
 value1 |   lower   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(6 rows)

-- select lower with order by index (result)
--Testcase 1352:
SELECT value1, lower(str1) FROM s3 ORDER BY 1,2;
 value1 |   lower   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(6 rows)

-- select lower with group by (explain)
--Testcase 1353:
EXPLAIN VERBOSE
SELECT count(value1), lower(str1) FROM s3 GROUP BY lower(str1) ORDER BY 1,2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), (lower(str1))
   Sort Key: (count(s3.value1)), (lower(s3.str1))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), (lower(str1))
         Group Key: (lower(s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: (lower(str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT lower(`str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT lower(str1), value1 FROM public.s31mysql
(15 rows)

-- select lower with group by (result)
--Testcase 1354:
SELECT count(value1), lower(str1) FROM s3 GROUP BY lower(str1) ORDER BY 1,2;
 count |   lower   
-------+-----------
     6 | ---xyz---
(1 row)

-- select lower with group by index (result)
--Testcase 1355:
SELECT value1, lower(str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |   lower   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(6 rows)

-- select lower with group by having (explain)
--Testcase 1356:
EXPLAIN VERBOSE
SELECT count(value1), lower(str1) FROM s3 GROUP BY lower(str1), str1 HAVING lower(str1) IS NOT NULL ORDER BY 1,2;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=72)
   Output: (count(value1)), (lower(str1)), str1
   Sort Key: (count(s3.value1)), (lower(s3.str1))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=72)
         Output: count(value1), (lower(str1)), str1
         Group Key: (lower(s3.str1)), s3.str1
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=72)
               Output: (lower(str1)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT lower(`str1`), `str1`, `value1` FROM `test`.`s32` WHERE ((lower(`str1`) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT lower(str1), str1, value1 FROM public.s31mysql WHERE ((lower(str1) IS NOT NULL))
(15 rows)

-- select lower with group by having (result)
--Testcase 1357:
SELECT count(value1), lower(str1) FROM s3 GROUP BY lower(str1), str1 HAVING lower(str1) IS NOT NULL ORDER BY 1,2;
 count |   lower   
-------+-----------
     6 | ---xyz---
(1 row)

-- select lower with group by index having (result)
--Testcase 1358:
SELECT value1, lower(str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |   lower   
--------+-----------
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(3 rows)

--
-- test lpad()
--
-- select lpad (stub function, explain)
--Testcase 1359:
EXPLAIN VERBOSE
SELECT lpad(str1, 4, 'ABCD'), lpad(str2, 4, 'ABCD') FROM s3;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (lpad(str1, 4, 'ABCD'::text)), (lpad(str2, 4, 'ABCD'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT lpad(`str1`, 4, 'ABCD'), lpad(`str2`, 4, 'ABCD') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT lpad(str1, 4, 'ABCD'::text), lpad(str2, 4, 'ABCD'::text) FROM public.s31mysql
(7 rows)

-- select lpad (stub function, result)
--Testcase 1360:
SELECT lpad(str1, 4, 'ABCD'), lpad(str2, 4, 'ABCD') FROM s3;
 lpad | lpad 
------+------
 ---X |    X
 ---X |    X
 ---X |    X
 ---X |    X
 ---X |    X
 ---X |    X
(6 rows)

-- select lpad (stub function, not pushdown constraints, explain)
--Testcase 1361:
EXPLAIN VERBOSE
SELECT value1, lpad(str1, 4, 'ABCD') FROM s3 WHERE to_hex(value2) = '64';
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, (lpad(str1, 4, 'ABCD'::text))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, lpad(`str1`, 4, 'ABCD'), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, lpad(str1, 4, 'ABCD'::text), value2 FROM public.s31mysql
(8 rows)

-- select lpad (stub function, not pushdown constraints, result)
--Testcase 1362:
SELECT value1, lpad(str1, 4, 'ABCD') FROM s3 WHERE to_hex(value2) = '64';
 value1 | lpad 
--------+------
    0.1 | ---X
    0.2 | ---X
    0.3 | ---X
(3 rows)

-- select lpad (stub function, pushdown constraints, explain)
--Testcase 1363:
EXPLAIN VERBOSE
SELECT value1, lpad(str1, 4, 'ABCD') FROM s3 WHERE value2 != 200;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, (lpad(str1, 4, 'ABCD'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, lpad(`str1`, 4, 'ABCD') FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, lpad(str1, 4, 'ABCD'::text) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select lpad (stub function, pushdown constraints, result)
--Testcase 1364:
SELECT value1, lpad(str1, 4, 'ABCD') FROM s3 WHERE value2 != 200;
 value1 | lpad 
--------+------
    0.1 | ---X
    0.2 | ---X
    0.3 | ---X
(3 rows)

-- select lpad with non pushdown func and explicit constant (explain)
--Testcase 1365:
EXPLAIN VERBOSE
SELECT lpad(str1, 4, 'ABCD'), pi(), 4.1 FROM s3;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: (lpad(str1, 4, 'ABCD'::text)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT lpad(`str1`, 4, 'ABCD'), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT lpad(str1, 4, 'ABCD'::text), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select lpad with non pushdown func and explicit constant (result)
--Testcase 1366:
SELECT lpad(str1, 4, 'ABCD'), pi(), 4.1 FROM s3;
 lpad |        pi         | ?column? 
------+-------------------+----------
 ---X | 3.141592653589793 |      4.1
 ---X | 3.141592653589793 |      4.1
 ---X | 3.141592653589793 |      4.1
 ---X | 3.141592653589793 |      4.1
 ---X | 3.141592653589793 |      4.1
 ---X | 3.141592653589793 |      4.1
(6 rows)

-- select lpad with order by (explain)
--Testcase 1367:
EXPLAIN VERBOSE
SELECT value1, lpad(str1, 4, 'ABCD') FROM s3 ORDER BY value1, lpad(str1, 4, 'ABCD');
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (lpad(str1, 4, 'ABCD'::text))
   Sort Key: s3.value1, (lpad(s3.str1, 4, 'ABCD'::text))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, (lpad(str1, 4, 'ABCD'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, lpad(`str1`, 4, 'ABCD') FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, lpad(str1, 4, 'ABCD'::text) FROM public.s31mysql
(12 rows)

-- select lpad with order by (result)
--Testcase 1368:
SELECT value1, lpad(str1, 4, 'ABCD') FROM s3 ORDER BY value1, lpad(str1, 4, 'ABCD');
 value1 | lpad 
--------+------
    0.1 | ---X
    0.2 | ---X
    0.3 | ---X
    1.1 | ---X
    2.2 | ---X
    3.3 | ---X
(6 rows)

-- select lpad with order by index (result)
--Testcase 1369:
SELECT value1, lpad(str1, 4, 'ABCD') FROM s3 ORDER BY 2,1;
 value1 | lpad 
--------+------
    0.1 | ---X
    0.2 | ---X
    0.3 | ---X
    1.1 | ---X
    2.2 | ---X
    3.3 | ---X
(6 rows)

-- select lpad with order by index (result)
--Testcase 1370:
SELECT value1, lpad(str1, 4, 'ABCD') FROM s3 ORDER BY 1,2;
 value1 | lpad 
--------+------
    0.1 | ---X
    0.2 | ---X
    0.3 | ---X
    1.1 | ---X
    2.2 | ---X
    3.3 | ---X
(6 rows)

-- select lpad with group by (explain)
--Testcase 1371:
EXPLAIN VERBOSE
SELECT count(value1), lpad(str1, 4, 'ABCD') FROM s3 GROUP BY lpad(str1, 4, 'ABCD') ORDER BY 1,2;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), (lpad(str1, 4, 'ABCD'::text))
   Sort Key: (count(s3.value1)), (lpad(s3.str1, 4, 'ABCD'::text))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), (lpad(str1, 4, 'ABCD'::text))
         Group Key: (lpad(s3.str1, 4, 'ABCD'::text))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: (lpad(str1, 4, 'ABCD'::text)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT lpad(`str1`, 4, 'ABCD'), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT lpad(str1, 4, 'ABCD'::text), value1 FROM public.s31mysql
(15 rows)

-- select lpad with group by (result)
--Testcase 1372:
SELECT count(value1), lpad(str1, 4, 'ABCD') FROM s3 GROUP BY lpad(str1, 4, 'ABCD') ORDER BY 1,2;
 count | lpad 
-------+------
     6 | ---X
(1 row)

-- select lpad with group by index (result)
--Testcase 1373:
SELECT value1, lpad(str1, 4, 'ABCD') FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | lpad 
--------+------
    0.1 | ---X
    0.2 | ---X
    0.3 | ---X
    1.1 | ---X
    2.2 | ---X
    3.3 | ---X
(6 rows)

-- select lpad with group by having (explain)
--Testcase 1374:
EXPLAIN VERBOSE
SELECT count(value1), lpad(str1, 4, 'ABCD') FROM s3 GROUP BY lpad(str1, 4, 'ABCD'), str1 HAVING lpad(str1, 4, 'ABCD') IS NOT NULL ORDER BY 1,2;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=72)
   Output: (count(value1)), (lpad(str1, 4, 'ABCD'::text)), str1
   Sort Key: (count(s3.value1)), (lpad(s3.str1, 4, 'ABCD'::text))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=72)
         Output: count(value1), (lpad(str1, 4, 'ABCD'::text)), str1
         Group Key: (lpad(s3.str1, 4, 'ABCD'::text)), s3.str1
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=72)
               Output: (lpad(str1, 4, 'ABCD'::text)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT lpad(`str1`, 4, 'ABCD'), `str1`, `value1` FROM `test`.`s32` WHERE ((lpad(`str1`, 4, 'ABCD') IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT lpad(str1, 4, 'ABCD'::text), str1, value1 FROM public.s31mysql WHERE ((lpad(str1, 4, 'ABCD'::text) IS NOT NULL))
(15 rows)

-- select lpad with group by having (result)
--Testcase 1375:
SELECT count(value1), lpad(str1, 4, 'ABCD') FROM s3 GROUP BY lpad(str1, 4, 'ABCD'), str1 HAVING lpad(str1, 4, 'ABCD') IS NOT NULL ORDER BY 1,2;
 count | lpad 
-------+------
     6 | ---X
(1 row)

-- select lpad with group by index having (result)
--Testcase 1376:
SELECT value1, lpad(str1, 4, 'ABCD') FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | lpad 
--------+------
    1.1 | ---X
    2.2 | ---X
    3.3 | ---X
(3 rows)

--
-- test ltrim()
--
-- select ltrim (stub function, explain)
--Testcase 1377:
EXPLAIN VERBOSE
SELECT ltrim(str1), ltrim(str2, ' ') FROM s3;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (ltrim(str1)), (ltrim(str2, ' '::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ltrim(`str1`), trim(LEADING ' ' FROM `str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ltrim(str1), ltrim(str2, ' '::text) FROM public.s31mysql
(7 rows)

-- select ltrim (stub function, result)
--Testcase 1378:
SELECT ltrim(str1), ltrim(str2, ' ') FROM s3;
   ltrim   | ltrim  
-----------+--------
 ---XYZ--- | XYZ   
 ---XYZ--- | XYZ   
 ---XYZ--- | XYZ   
 ---XYZ--- | XYZ   
 ---XYZ--- | XYZ   
 ---XYZ--- | XYZ   
(6 rows)

-- select ltrim (stub function, not pushdown constraints, explain)
--Testcase 1379:
EXPLAIN VERBOSE
SELECT value1, ltrim(str1, '-') FROM s3 WHERE to_hex(value2) = '64';
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, (ltrim(str1, '-'::text))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, trim(LEADING '-' FROM `str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, ltrim(str1, '-'::text), value2 FROM public.s31mysql
(8 rows)

-- select ltrim (stub function, not pushdown constraints, result)
--Testcase 1380:
SELECT value1, ltrim(str1, '-') FROM s3 WHERE to_hex(value2) = '64';
 value1 | ltrim  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
(3 rows)

-- select ltrim (stub function, pushdown constraints, explain)
--Testcase 1381:
EXPLAIN VERBOSE
SELECT value1, ltrim(str1, '-') FROM s3 WHERE value2 != 200;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, (ltrim(str1, '-'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, trim(LEADING '-' FROM `str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, ltrim(str1, '-'::text) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select ltrim (stub function, pushdown constraints, result)
--Testcase 1382:
SELECT value1, ltrim(str1, '-') FROM s3 WHERE value2 != 200;
 value1 | ltrim  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
(3 rows)

-- select ltrim with non pushdown func and explicit constant (explain)
--Testcase 1383:
EXPLAIN VERBOSE
SELECT ltrim(str1, '-'), pi(), 4.1 FROM s3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: (ltrim(str1, '-'::text)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT trim(LEADING '-' FROM `str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ltrim(str1, '-'::text), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select ltrim with non pushdown func and explicit constant (result)
--Testcase 1384:
SELECT ltrim(str1, '-'), pi(), 4.1 FROM s3;
 ltrim  |        pi         | ?column? 
--------+-------------------+----------
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
(6 rows)

-- select ltrim with order by (explain)
--Testcase 1385:
EXPLAIN VERBOSE
SELECT value1, ltrim(str1, '-') FROM s3 ORDER BY value1, ltrim(str1, '-');
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (ltrim(str1, '-'::text))
   Sort Key: s3.value1, (ltrim(s3.str1, '-'::text))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, (ltrim(str1, '-'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, trim(LEADING '-' FROM `str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, ltrim(str1, '-'::text) FROM public.s31mysql
(12 rows)

-- select ltrim with order by (result)
--Testcase 1386:
SELECT value1, ltrim(str1, '-') FROM s3 ORDER BY value1, ltrim(str1, '-');
 value1 | ltrim  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(6 rows)

-- select ltrim with order by index (result)
--Testcase 1387:
SELECT value1, ltrim(str1, '-') FROM s3 ORDER BY 2,1;
 value1 | ltrim  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(6 rows)

-- select ltrim with order by index (result)
--Testcase 1388:
SELECT value1, ltrim(str1, '-') FROM s3 ORDER BY 1,2;
 value1 | ltrim  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(6 rows)

-- select ltrim with group by (explain)
--Testcase 1389:
EXPLAIN VERBOSE
SELECT count(value1), ltrim(str1, '-') FROM s3 GROUP BY ltrim(str1, '-') ORDER BY 1,2;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), (ltrim(str1, '-'::text))
   Sort Key: (count(s3.value1)), (ltrim(s3.str1, '-'::text))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), (ltrim(str1, '-'::text))
         Group Key: (ltrim(s3.str1, '-'::text))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: (ltrim(str1, '-'::text)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT trim(LEADING '-' FROM `str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT ltrim(str1, '-'::text), value1 FROM public.s31mysql
(15 rows)

-- select ltrim with group by (result)
--Testcase 1390:
SELECT count(value1), ltrim(str1, '-') FROM s3 GROUP BY ltrim(str1, '-') ORDER BY 1,2;
 count | ltrim  
-------+--------
     6 | XYZ---
(1 row)

-- select ltrim with group by index (result)
--Testcase 1391:
SELECT value1, ltrim(str1, '-') FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | ltrim  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(6 rows)

-- select ltrim with group by having (explain)
--Testcase 1392:
EXPLAIN VERBOSE
SELECT count(value1), ltrim(str1, '-') FROM s3 GROUP BY ltrim(str1, '-'), str2 HAVING ltrim(str1, '-') IS NOT NULL ORDER BY 1,2;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=72)
   Output: (count(value1)), (ltrim(str1, '-'::text)), str2
   Sort Key: (count(s3.value1)), (ltrim(s3.str1, '-'::text))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=72)
         Output: count(value1), (ltrim(str1, '-'::text)), str2
         Group Key: (ltrim(s3.str1, '-'::text)), s3.str2
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=72)
               Output: (ltrim(str1, '-'::text)), str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT trim(LEADING '-' FROM `str1`), `str2`, `value1` FROM `test`.`s32` WHERE ((trim(LEADING '-' FROM `str1`) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT ltrim(str1, '-'::text), str2, value1 FROM public.s31mysql WHERE ((ltrim(str1, '-'::text) IS NOT NULL))
(15 rows)

-- select ltrim with group by having (result)
--Testcase 1393:
SELECT count(value1), ltrim(str1, '-') FROM s3 GROUP BY ltrim(str1, '-'), str2 HAVING ltrim(str1, '-') IS NOT NULL ORDER BY 1,2;
 count | ltrim  
-------+--------
     6 | XYZ---
(1 row)

-- select ltrim with group by index having (result)
--Testcase 1394:
SELECT value1, ltrim(str2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | ltrim  
--------+--------
    1.1 | XYZ   
    2.2 | XYZ   
    3.3 | XYZ   
(3 rows)

--
-- test make_set()
--
-- select make_set (stub function, explain)
--Testcase 1395:
EXPLAIN VERBOSE
SELECT make_set(1, str1, str2), make_set(1 | 4, str1, str2) FROM s3;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=64)
   Output: (make_set('1'::bigint, VARIADIC ARRAY[str1, str2])), (make_set('5'::bigint, VARIADIC ARRAY[str1, str2]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT make_set(1, `str1`, `str2`), make_set(5, `str1`, `str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.make_set(1::bigint, VARIADIC ARRAY[str1, str2]), public.make_set(5::bigint, VARIADIC ARRAY[str1, str2]) FROM public.s31mysql
(7 rows)

-- select make_set (stub function, result)
--Testcase 1396:
SELECT make_set(1, str1, str2), make_set(1 | 4, str1, str2) FROM s3;
 make_set  | make_set  
-----------+-----------
 ---XYZ--- | ---XYZ---
 ---XYZ--- | ---XYZ---
 ---XYZ--- | ---XYZ---
 ---XYZ--- | ---XYZ---
 ---XYZ--- | ---XYZ---
 ---XYZ--- | ---XYZ---
(6 rows)

-- select make_set (stub function, not pushdown constraints, explain)
--Testcase 1397:
EXPLAIN VERBOSE
SELECT value1, make_set(1 | 4, str1, str2) FROM s3 WHERE to_hex(value2) = '64';
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (make_set('5'::bigint, VARIADIC ARRAY[str1, str2]))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, make_set(5, `str1`, `str2`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.make_set(5::bigint, VARIADIC ARRAY[str1, str2]), value2 FROM public.s31mysql
(8 rows)

-- select make_set (stub function, not pushdown constraints, result)
--Testcase 1398:
SELECT value1, make_set(1 | 4, str1, str2) FROM s3 WHERE to_hex(value2) = '64';
 value1 | make_set  
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
(3 rows)

-- select make_set (stub function, pushdown constraints, explain)
--Testcase 1399:
EXPLAIN VERBOSE
SELECT value1, make_set(1 | 4, str1, str2) FROM s3 WHERE value2 != 200;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (make_set('5'::bigint, VARIADIC ARRAY[str1, str2]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, make_set(5, `str1`, `str2`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.make_set(5::bigint, VARIADIC ARRAY[str1, str2]) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select make_set (stub function, pushdown constraints, result)
--Testcase 1400:
SELECT value1, make_set(1 | 4, str1, str2) FROM s3 WHERE value2 != 200;
 value1 | make_set  
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
(3 rows)

-- select make_set with non pushdown func and explicit constant (explain)
--Testcase 1401:
EXPLAIN VERBOSE
SELECT make_set(1 | 4, str1, str2), pi(), 4.1 FROM s3;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (make_set('5'::bigint, VARIADIC ARRAY[str1, str2])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT make_set(5, `str1`, `str2`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.make_set(5::bigint, VARIADIC ARRAY[str1, str2]), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select make_set with non pushdown func and explicit constant (result)
--Testcase 1402:
SELECT make_set(1 | 4, str1, str2), pi(), 4.1 FROM s3;
 make_set  |        pi         | ?column? 
-----------+-------------------+----------
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
(6 rows)

-- select make_set with order by (explain)
--Testcase 1403:
EXPLAIN VERBOSE
SELECT value1, make_set(1 | 4, str1, str2) FROM s3 ORDER BY value1, make_set(1 | 4, str1, str2);
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (make_set('5'::bigint, VARIADIC ARRAY[str1, str2]))
   Sort Key: s3.value1, (make_set('5'::bigint, VARIADIC ARRAY[s3.str1, s3.str2]))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (make_set('5'::bigint, VARIADIC ARRAY[str1, str2]))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, make_set(5, `str1`, `str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.make_set(5::bigint, VARIADIC ARRAY[str1, str2]) FROM public.s31mysql
(12 rows)

-- select make_set with order by (result)
--Testcase 1404:
SELECT value1, make_set(1 | 4, str1, str2) FROM s3 ORDER BY value1, make_set(1 | 4, str1, str2);
 value1 | make_set  
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select make_set with order by index (result)
--Testcase 1405:
SELECT value1, make_set(1 | 4, str1, str2) FROM s3 ORDER BY 2,1;
 value1 | make_set  
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select make_set with order by index (result)
--Testcase 1406:
SELECT value1, make_set(1 | 4, str1, str2) FROM s3 ORDER BY 1,2;
 value1 | make_set  
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select make_set with group by (explain)
--Testcase 1407:
EXPLAIN VERBOSE
SELECT count(value1), make_set(1 | 4, str1, str2) FROM s3 GROUP BY make_set(1 | 4, str1, str2) ORDER BY 1,2;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (make_set('5'::bigint, VARIADIC ARRAY[str1, str2]))
   Sort Key: (count(s3.value1)), (make_set('5'::bigint, VARIADIC ARRAY[s3.str1, s3.str2]))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (make_set('5'::bigint, VARIADIC ARRAY[str1, str2]))
         Group Key: (make_set('5'::bigint, VARIADIC ARRAY[s3.str1, s3.str2]))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (make_set('5'::bigint, VARIADIC ARRAY[str1, str2])), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT make_set(5, `str1`, `str2`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.make_set(5::bigint, VARIADIC ARRAY[str1, str2]), value1 FROM public.s31mysql
(15 rows)

-- select make_set with group by (result)
--Testcase 1408:
SELECT count(value1), make_set(1 | 4, str1, str2) FROM s3 GROUP BY make_set(1 | 4, str1, str2) ORDER BY 1,2;
 count | make_set  
-------+-----------
     6 | ---XYZ---
(1 row)

-- select make_set with group by index (result)
--Testcase 1409:
SELECT value1, make_set(1 | 4, str1, str2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | make_set  
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select make_set with group by having (explain)
--Testcase 1410:
EXPLAIN VERBOSE
SELECT count(value1), make_set(1 | 4, str1, str2) FROM s3 GROUP BY make_set(1 | 4, str1, str2), str1, str2 HAVING make_set(1 | 4, str1, str2) IS NOT NULL ORDER BY 1,2;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2308.89..2309.39 rows=199 width=104)
   Output: (count(value1)), (make_set('5'::bigint, VARIADIC ARRAY[str1, str2])), str1, str2
   Sort Key: (count(s3.value1)), (make_set('5'::bigint, VARIADIC ARRAY[s3.str1, s3.str2]))
   ->  HashAggregate  (cost=2199.54..2301.29 rows=199 width=104)
         Output: count(value1), (make_set('5'::bigint, VARIADIC ARRAY[str1, str2])), str1, str2
         Group Key: (make_set('5'::bigint, VARIADIC ARRAY[s3.str1, s3.str2])), s3.str1, s3.str2
         Filter: ((make_set('5'::bigint, VARIADIC ARRAY[s3.str1, s3.str2])) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=104)
               Output: (make_set('5'::bigint, VARIADIC ARRAY[str1, str2])), str1, str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT make_set(5, `str1`, `str2`), `str1`, `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.make_set(5::bigint, VARIADIC ARRAY[str1, str2]), str1, str2, value1 FROM public.s31mysql
(16 rows)

-- select make_set with group by having (result)
--Testcase 1411:
SELECT count(value1), make_set(1 | 4, str1, str2) FROM s3 GROUP BY make_set(1 | 4, str1, str2), str1, str2 HAVING make_set(1 | 4, str1, str2) IS NOT NULL ORDER BY 1,2;
 count | make_set  
-------+-----------
     6 | ---XYZ---
(1 row)

-- select make_set with group by index having (result)
--Testcase 1412:
SELECT value1, make_set(1 | 4, str1, str2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | make_set  
--------+-----------
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(3 rows)

--
-- test mid()
--
-- select mid (stub function, explain)
--Testcase 1413:
EXPLAIN VERBOSE
SELECT mid(str1, 2, 4), mid(str2, 2, 4) FROM s3;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=64)
   Output: (mid(str1, '2'::bigint, '4'::bigint)), (mid(str2, '2'::bigint, '4'::bigint))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT mid(`str1`, 2, 4), mid(`str2`, 2, 4) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mid(str1, 2::bigint, 4::bigint), public.mid(str2, 2::bigint, 4::bigint) FROM public.s31mysql
(7 rows)

-- select mid (stub function, result)
--Testcase 1414:
SELECT mid(str1, 2, 4), mid(str2, 2, 4) FROM s3;
 mid  | mid  
------+------
 --XY |   XY
 --XY |   XY
 --XY |   XY
 --XY |   XY
 --XY |   XY
 --XY |   XY
(6 rows)

-- select mid (stub function, not pushdown constraints, explain)
--Testcase 1415:
EXPLAIN VERBOSE
SELECT value1, mid(str2, 2, 4) FROM s3 WHERE to_hex(value2) = '64';
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (mid(str2, '2'::bigint, '4'::bigint))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, mid(`str2`, 2, 4), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mid(str2, 2::bigint, 4::bigint), value2 FROM public.s31mysql
(8 rows)

-- select mid (stub function, not pushdown constraints, result)
--Testcase 1416:
SELECT value1, mid(str2, 2, 4) FROM s3 WHERE to_hex(value2) = '64';
 value1 | mid  
--------+------
    0.1 |   XY
    0.2 |   XY
    0.3 |   XY
(3 rows)

-- select mid (stub function, pushdown constraints, explain)
--Testcase 1417:
EXPLAIN VERBOSE
SELECT value1, mid(str2, 2, 4) FROM s3 WHERE value2 != 200;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (mid(str2, '2'::bigint, '4'::bigint))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, mid(`str2`, 2, 4) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mid(str2, 2::bigint, 4::bigint) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select mid (stub function, pushdown constraints, result)
--Testcase 1418:
SELECT value1, mid(str2, 2, 4) FROM s3 WHERE value2 != 200;
 value1 | mid  
--------+------
    0.1 |   XY
    0.2 |   XY
    0.3 |   XY
(3 rows)

-- select mid with non pushdown func and explicit constant (explain)
--Testcase 1419:
EXPLAIN VERBOSE
SELECT mid(str2, 2, 4), pi(), 4.1 FROM s3;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (mid(str2, '2'::bigint, '4'::bigint)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT mid(`str2`, 2, 4), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mid(str2, 2::bigint, 4::bigint), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select mid with non pushdown func and explicit constant (result)
--Testcase 1420:
SELECT mid(str2, 2, 4), pi(), 4.1 FROM s3;
 mid  |        pi         | ?column? 
------+-------------------+----------
   XY | 3.141592653589793 |      4.1
   XY | 3.141592653589793 |      4.1
   XY | 3.141592653589793 |      4.1
   XY | 3.141592653589793 |      4.1
   XY | 3.141592653589793 |      4.1
   XY | 3.141592653589793 |      4.1
(6 rows)

-- select mid with order by (explain)
--Testcase 1421:
EXPLAIN VERBOSE
SELECT value1, mid(str2, 2, 4) FROM s3 ORDER BY value1, mid(str2, 2, 4);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (mid(str2, '2'::bigint, '4'::bigint))
   Sort Key: s3.value1, (mid(s3.str2, '2'::bigint, '4'::bigint))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (mid(str2, '2'::bigint, '4'::bigint))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, mid(`str2`, 2, 4) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.mid(str2, 2::bigint, 4::bigint) FROM public.s31mysql
(12 rows)

-- select mid with order by (result)
--Testcase 1422:
SELECT value1, mid(str2, 2, 4) FROM s3 ORDER BY value1, mid(str2, 2, 4);
 value1 | mid  
--------+------
    0.1 |   XY
    0.2 |   XY
    0.3 |   XY
    1.1 |   XY
    2.2 |   XY
    3.3 |   XY
(6 rows)

-- select mid with order by index (result)
--Testcase 1423:
SELECT value1, mid(str2, 2, 4) FROM s3 ORDER BY 2,1;
 value1 | mid  
--------+------
    0.1 |   XY
    0.2 |   XY
    0.3 |   XY
    1.1 |   XY
    2.2 |   XY
    3.3 |   XY
(6 rows)

-- select mid with order by index (result)
--Testcase 1424:
SELECT value1, mid(str2, 2, 4) FROM s3 ORDER BY 1,2;
 value1 | mid  
--------+------
    0.1 |   XY
    0.2 |   XY
    0.3 |   XY
    1.1 |   XY
    2.2 |   XY
    3.3 |   XY
(6 rows)

-- select mid with group by (explain)
--Testcase 1425:
EXPLAIN VERBOSE
SELECT count(value1), mid(str2, 2, 4) FROM s3 GROUP BY mid(str2, 2, 4) ORDER BY 1,2;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (mid(str2, '2'::bigint, '4'::bigint))
   Sort Key: (count(s3.value1)), (mid(s3.str2, '2'::bigint, '4'::bigint))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (mid(str2, '2'::bigint, '4'::bigint))
         Group Key: (mid(s3.str2, '2'::bigint, '4'::bigint))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (mid(str2, '2'::bigint, '4'::bigint)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT mid(`str2`, 2, 4), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mid(str2, 2::bigint, 4::bigint), value1 FROM public.s31mysql
(15 rows)

-- select mid with group by (result)
--Testcase 1426:
SELECT count(value1), mid(str2, 2, 4) FROM s3 GROUP BY mid(str2, 2, 4) ORDER BY 1,2;
 count | mid  
-------+------
     6 |   XY
(1 row)

-- select mid with group by index (result)
--Testcase 1427:
SELECT value1, mid(str2, 2, 4) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | mid  
--------+------
    0.1 |   XY
    0.2 |   XY
    0.3 |   XY
    1.1 |   XY
    2.2 |   XY
    3.3 |   XY
(6 rows)

-- select mid with group by having (explain)
--Testcase 1428:
EXPLAIN VERBOSE
SELECT count(value1), mid(str2, 2, 4) FROM s3 GROUP BY mid(str2, 2, 4), str2 HAVING mid(str2, 2, 4) IS NOT NULL ORDER BY 1,2;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=72)
   Output: (count(value1)), (mid(str2, '2'::bigint, '4'::bigint)), str2
   Sort Key: (count(s3.value1)), (mid(s3.str2, '2'::bigint, '4'::bigint))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=72)
         Output: count(value1), (mid(str2, '2'::bigint, '4'::bigint)), str2
         Group Key: (mid(s3.str2, '2'::bigint, '4'::bigint)), s3.str2
         Filter: ((mid(s3.str2, '2'::bigint, '4'::bigint)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
               Output: (mid(str2, '2'::bigint, '4'::bigint)), str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT mid(`str2`, 2, 4), `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mid(str2, 2::bigint, 4::bigint), str2, value1 FROM public.s31mysql
(16 rows)

-- select mid with group by having (result)
--Testcase 1429:
SELECT count(value1), mid(str2, 2, 4) FROM s3 GROUP BY mid(str2, 2, 4), str2 HAVING mid(str2, 2, 4) IS NOT NULL ORDER BY 1,2;
 count | mid  
-------+------
     6 |   XY
(1 row)

-- select mid with group by index having (result)
--Testcase 1430:
SELECT value1, mid(str2, 2, 4) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | mid  
--------+------
    1.1 |   XY
    2.2 |   XY
    3.3 |   XY
(3 rows)

--
-- test oct()
--
-- select oct (stub function, explain)
--Testcase 1431:
EXPLAIN VERBOSE
SELECT oct(value2), oct(value4) FROM s3 ORDER BY 1,2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=4306.62..4323.68 rows=6826 width=64)
   Output: (oct((value2)::bigint)), (oct((value4)::bigint))
   Sort Key: (oct((s3.value2)::bigint)), (oct((s3.value4)::bigint))
   ->  Foreign Scan on public.s3  (cost=200.00..3871.91 rows=6826 width=64)
         Output: (oct((value2)::bigint)), (oct((value4)::bigint))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT oct(`value2`), oct(`value4`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.oct(value2), public.oct(value4) FROM public.s31mysql
(12 rows)

-- select oct (stub function, result)
--Testcase 1432:
SELECT oct(value2), oct(value4) FROM s3 ORDER BY 1,2;
 oct |          oct           
-----+------------------------
 144 | 1777777777777777777634
 144 | 1777777777777777777634
 144 | 1777777777777777777634
 310 | 1777777777777777777470
 310 | 1777777777777777777470
 310 | 1777777777777777777470
(6 rows)

-- select oct (stub function, not pushdown constraints, explain)
--Testcase 1433:
EXPLAIN VERBOSE
SELECT value1, oct(value4) FROM s3 WHERE to_hex(value2) = '64';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.31 rows=34 width=40)
   Output: value1, (oct((value4)::bigint))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, oct(`value4`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.oct(value4), value2 FROM public.s31mysql
(8 rows)

-- select oct (stub function, not pushdown constraints, result)
--Testcase 1434:
SELECT value1, oct(value4) FROM s3 WHERE to_hex(value2) = '64';
 value1 |          oct           
--------+------------------------
    0.1 | 1777777777777777777634
    0.2 | 1777777777777777777634
    0.3 | 1777777777777777777634
(3 rows)

-- select oct (stub function, pushdown constraints, explain)
--Testcase 1435:
EXPLAIN VERBOSE
SELECT value1, oct(value4) FROM s3 WHERE value2 != 200;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2156.14 rows=6792 width=40)
   Output: value1, (oct((value4)::bigint))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, oct(`value4`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.oct(value4) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select oct (stub function, pushdown constraints, result)
--Testcase 1436:
SELECT value1, oct(value4) FROM s3 WHERE value2 != 200;
 value1 |          oct           
--------+------------------------
    0.1 | 1777777777777777777634
    0.2 | 1777777777777777777634
    0.3 | 1777777777777777777634
(3 rows)

-- select oct with non pushdown func and explicit constant (explain)
--Testcase 1437:
EXPLAIN VERBOSE
SELECT oct(value4), pi(), 4.1 FROM s3 ORDER BY 1;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=72)
   Output: (oct((value4)::bigint)), '3.141592653589793'::double precision, 4.1
   Sort Key: (oct((s3.value4)::bigint))
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=72)
         Output: (oct((value4)::bigint)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT oct(`value4`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.oct(value4), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select oct with non pushdown func and explicit constant (result)
--Testcase 1438:
SELECT oct(value4), pi(), 4.1 FROM s3 ORDER BY 1;
          oct           |        pi         | ?column? 
------------------------+-------------------+----------
 1777777777777777777470 | 3.141592653589793 |      4.1
 1777777777777777777470 | 3.141592653589793 |      4.1
 1777777777777777777470 | 3.141592653589793 |      4.1
 1777777777777777777634 | 3.141592653589793 |      4.1
 1777777777777777777634 | 3.141592653589793 |      4.1
 1777777777777777777634 | 3.141592653589793 |      4.1
(6 rows)

-- select oct with order by (explain)
--Testcase 1439:
EXPLAIN VERBOSE
SELECT value1, oct(value4) FROM s3 ORDER BY oct(value4);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=40)
   Output: value1, (oct((value4)::bigint))
   Sort Key: (oct((s3.value4)::bigint))
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=40)
         Output: value1, (oct((value4)::bigint))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, oct(`value4`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.oct(value4) FROM public.s31mysql
(12 rows)

-- select oct with order by (result)
--Testcase 1440:
SELECT value1, oct(value4) FROM s3 ORDER BY oct(value4);
 value1 |          oct           
--------+------------------------
    1.1 | 1777777777777777777470
    2.2 | 1777777777777777777470
    3.3 | 1777777777777777777470
    0.1 | 1777777777777777777634
    0.2 | 1777777777777777777634
    0.3 | 1777777777777777777634
(6 rows)

-- select oct with order by index (result)
--Testcase 1441:
SELECT value1, oct(value4) FROM s3 ORDER BY 2,1;
 value1 |          oct           
--------+------------------------
    1.1 | 1777777777777777777470
    2.2 | 1777777777777777777470
    3.3 | 1777777777777777777470
    0.1 | 1777777777777777777634
    0.2 | 1777777777777777777634
    0.3 | 1777777777777777777634
(6 rows)

-- select oct with order by index (result)
--Testcase 1442:
SELECT value1, oct(value4) FROM s3 ORDER BY 1,2;
 value1 |          oct           
--------+------------------------
    0.1 | 1777777777777777777634
    0.2 | 1777777777777777777634
    0.3 | 1777777777777777777634
    1.1 | 1777777777777777777470
    2.2 | 1777777777777777777470
    3.3 | 1777777777777777777470
(6 rows)

-- select oct with group by (explain)
--Testcase 1443:
EXPLAIN VERBOSE
SELECT count(value1), oct(value4) FROM s3 GROUP BY oct(value4) ORDER BY 1,2;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=40)
   Output: (count(value1)), (oct((value4)::bigint))
   Sort Key: (count(s3.value1)), (oct((s3.value4)::bigint))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=40)
         Output: count(value1), (oct((value4)::bigint))
         Group Key: (oct((s3.value4)::bigint))
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=40)
               Output: (oct((value4)::bigint)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT oct(`value4`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.oct(value4), value1 FROM public.s31mysql
(15 rows)

-- select oct with group by (result)
--Testcase 1444:
SELECT count(value1), oct(value4) FROM s3 GROUP BY oct(value4) ORDER BY 1,2;
 count |          oct           
-------+------------------------
     3 | 1777777777777777777470
     3 | 1777777777777777777634
(2 rows)

-- select oct with group by index (result)
--Testcase 1445:
SELECT value1, oct(value4) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |          oct           
--------+------------------------
    0.1 | 1777777777777777777634
    0.2 | 1777777777777777777634
    0.3 | 1777777777777777777634
    1.1 | 1777777777777777777470
    2.2 | 1777777777777777777470
    3.3 | 1777777777777777777470
(6 rows)

-- select oct with group by having (explain)
--Testcase 1446:
EXPLAIN VERBOSE
SELECT count(value1), oct(value4) FROM s3 GROUP BY oct(value4), value4 HAVING oct(value4) IS NOT NULL ORDER BY 1,2;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort  (cost=2309.89..2310.38 rows=199 width=44)
   Output: (count(value1)), (oct((value4)::bigint)), value4
   Sort Key: (count(s3.value1)), (oct((s3.value4)::bigint))
   ->  HashAggregate  (cost=2199.54..2302.29 rows=199 width=44)
         Output: count(value1), (oct((value4)::bigint)), value4
         Group Key: (oct((s3.value4)::bigint)), s3.value4
         Filter: ((oct((s3.value4)::bigint)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=44)
               Output: (oct((value4)::bigint)), value4, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT oct(`value4`), `value4`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.oct(value4), value4, value1 FROM public.s31mysql
(16 rows)

-- select oct with group by having (result)
--Testcase 1447:
SELECT count(value1), oct(value4) FROM s3 GROUP BY oct(value4), value4 HAVING oct(value4) IS NOT NULL ORDER BY 1,2;
 count |          oct           
-------+------------------------
     3 | 1777777777777777777470
     3 | 1777777777777777777634
(2 rows)

-- select oct with group by index having (result)
--Testcase 1448:
SELECT value1, oct(value4) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |          oct           
--------+------------------------
    1.1 | 1777777777777777777470
    2.2 | 1777777777777777777470
    3.3 | 1777777777777777777470
(3 rows)

--
-- test octet_length()
--
-- select octet_length (stub function, explain)
--Testcase 1449:
EXPLAIN VERBOSE
SELECT octet_length(str1), octet_length(str2) FROM s3;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=8)
   Output: (octet_length(str1)), (octet_length(str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT octet_length(`str1`), octet_length(`str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT octet_length(str1), octet_length(str2) FROM public.s31mysql
(7 rows)

-- select octet_length (stub function, result)
--Testcase 1450:
SELECT octet_length(str1), octet_length(str2) FROM s3;
 octet_length | octet_length 
--------------+--------------
            9 |            9
            9 |            9
            9 |            9
            9 |            9
            9 |            9
            9 |            9
(6 rows)

-- select octet_length (stub function, not pushdown constraints, explain)
--Testcase 1451:
EXPLAIN VERBOSE
SELECT value1, octet_length(str1) FROM s3 WHERE to_hex(value2) = '64';
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=12)
   Output: value1, (octet_length(str1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, octet_length(`str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, octet_length(str1), value2 FROM public.s31mysql
(8 rows)

-- select octet_length (stub function, not pushdown constraints, result)
--Testcase 1452:
SELECT value1, octet_length(str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 | octet_length 
--------+--------------
    0.1 |            9
    0.2 |            9
    0.3 |            9
(3 rows)

-- select octet_length (stub function, pushdown constraints, explain)
--Testcase 1453:
EXPLAIN VERBOSE
SELECT value1, octet_length(str1) FROM s3 WHERE value2 != 200;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=12)
   Output: value1, (octet_length(str1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, octet_length(`str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, octet_length(str1) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select octet_length (stub function, pushdown constraints, result)
--Testcase 1454:
SELECT value1, octet_length(str1) FROM s3 WHERE value2 != 200;
 value1 | octet_length 
--------+--------------
    0.1 |            9
    0.2 |            9
    0.3 |            9
(3 rows)

-- select octet_length with non pushdown func and explicit constant (explain)
--Testcase 1455:
EXPLAIN VERBOSE
SELECT octet_length(str1), pi(), 4.1 FROM s3;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=44)
   Output: (octet_length(str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT octet_length(`str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT octet_length(str1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select octet_length with non pushdown func and explicit constant (result)
--Testcase 1456:
SELECT octet_length(str1), pi(), 4.1 FROM s3;
 octet_length |        pi         | ?column? 
--------------+-------------------+----------
            9 | 3.141592653589793 |      4.1
            9 | 3.141592653589793 |      4.1
            9 | 3.141592653589793 |      4.1
            9 | 3.141592653589793 |      4.1
            9 | 3.141592653589793 |      4.1
            9 | 3.141592653589793 |      4.1
(6 rows)

-- select octet_length with order by (explain)
--Testcase 1457:
EXPLAIN VERBOSE
SELECT value1, octet_length(str1) FROM s3 ORDER BY value1, octet_length(str1);
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=12)
   Output: value1, (octet_length(str1))
   Sort Key: s3.value1, (octet_length(s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=12)
         Output: value1, (octet_length(str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, octet_length(`str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, octet_length(str1) FROM public.s31mysql
(12 rows)

-- select octet_length with order by (result)
--Testcase 1458:
SELECT value1, octet_length(str1) FROM s3 ORDER BY value1, octet_length(str1);
 value1 | octet_length 
--------+--------------
    0.1 |            9
    0.2 |            9
    0.3 |            9
    1.1 |            9
    2.2 |            9
    3.3 |            9
(6 rows)

-- select octet_length with order by index (result)
--Testcase 1459:
SELECT value1, octet_length(str1) FROM s3 ORDER BY 2,1;
 value1 | octet_length 
--------+--------------
    0.1 |            9
    0.2 |            9
    0.3 |            9
    1.1 |            9
    2.2 |            9
    3.3 |            9
(6 rows)

-- select octet_length with order by index (result)
--Testcase 1460:
SELECT value1, octet_length(str1) FROM s3 ORDER BY 1,2;
 value1 | octet_length 
--------+--------------
    0.1 |            9
    0.2 |            9
    0.3 |            9
    1.1 |            9
    2.2 |            9
    3.3 |            9
(6 rows)

-- select octet_length with group by (explain)
--Testcase 1461:
EXPLAIN VERBOSE
SELECT count(value1), octet_length(str1) FROM s3 GROUP BY octet_length(str1) ORDER BY 1,2;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=12)
   Output: (count(value1)), (octet_length(str1))
   Sort Key: (count(s3.value1)), (octet_length(s3.str1))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=12)
         Output: count(value1), (octet_length(str1))
         Group Key: (octet_length(s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=12)
               Output: (octet_length(str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT octet_length(`str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT octet_length(str1), value1 FROM public.s31mysql
(15 rows)

-- select octet_length with group by (result)
--Testcase 1462:
SELECT count(value1), octet_length(str1) FROM s3 GROUP BY octet_length(str1) ORDER BY 1,2;
 count | octet_length 
-------+--------------
     6 |            9
(1 row)

-- select octet_length with group by index (result)
--Testcase 1463:
SELECT value1, octet_length(str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | octet_length 
--------+--------------
    0.1 |            9
    0.2 |            9
    0.3 |            9
    1.1 |            9
    2.2 |            9
    3.3 |            9
(6 rows)

-- select octet_length with group by having (explain)
--Testcase 1464:
EXPLAIN VERBOSE
SELECT count(value1), octet_length(str1) FROM s3 GROUP BY octet_length(str1), str1 HAVING octet_length(str1) IS NOT NULL ORDER BY 1,2;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=44)
   Output: (count(value1)), (octet_length(str1)), str1
   Sort Key: (count(s3.value1)), (octet_length(s3.str1))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=44)
         Output: count(value1), (octet_length(str1)), str1
         Group Key: (octet_length(s3.str1)), s3.str1
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=44)
               Output: (octet_length(str1)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT octet_length(`str1`), `str1`, `value1` FROM `test`.`s32` WHERE ((octet_length(`str1`) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT octet_length(str1), str1, value1 FROM public.s31mysql WHERE ((octet_length(str1) IS NOT NULL))
(15 rows)

-- select octet_length with group by having (result)
--Testcase 1465:
SELECT count(value1), octet_length(str1) FROM s3 GROUP BY octet_length(str1), str1 HAVING octet_length(str1) IS NOT NULL ORDER BY 1,2;
 count | octet_length 
-------+--------------
     6 |            9
(1 row)

-- select octet_length with group by index having (result)
--Testcase 1466:
SELECT value1, octet_length(str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | octet_length 
--------+--------------
    1.1 |            9
    2.2 |            9
    3.3 |            9
(3 rows)

--
-- test ord()
--
-- select ord (stub function, explain)
--Testcase 1467:
EXPLAIN VERBOSE
SELECT ord(value1), ord(value2), ord(value3), ord(value4), ord(str1), ord(str2) FROM s3 ORDER BY 1,2,3,4,5,6;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11098.49..11115.55 rows=6826 width=24)
   Output: (ord(value1)), (ord(value2)), (ord(value3)), (ord(value4)), (ord(str1)), (ord(str2))
   Sort Key: (ord(s3.value1)), (ord(s3.value2)), (ord(s3.value3)), (ord(s3.value4)), (ord(s3.str1)), (ord(s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..10663.78 rows=6826 width=24)
         Output: (ord(value1)), (ord(value2)), (ord(value3)), (ord(value4)), (ord(str1)), (ord(str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ord(`value1`), ord(`value2`), ord(`value3`), ord(`value4`), ord(`str1`), ord(`str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.ord(value1), public.ord(value2), public.ord(value3), public.ord(value4), public.ord(str1), public.ord(str2) FROM public.s31mysql
(12 rows)

-- select ord (stub function, result)
--Testcase 1468:
SELECT ord(value1), ord(value2), ord(value3), ord(value4), ord(str1), ord(str2) FROM s3 ORDER BY 1,2,3,4,5,6;
 ord | ord | ord | ord | ord | ord 
-----+-----+-----+-----+-----+-----
  48 |  49 |  45 |  45 |  45 |  32
  48 |  49 |  45 |  45 |  45 |  32
  48 |  49 |  45 |  45 |  45 |  32
  49 |  50 |  45 |  45 |  45 |  32
  50 |  50 |  45 |  45 |  45 |  32
  51 |  50 |  45 |  45 |  45 |  32
(6 rows)

-- select ord (stub function, not pushdown constraints, explain)
--Testcase 1469:
EXPLAIN VERBOSE
SELECT value1, ord(str2) FROM s3 WHERE to_hex(value2) = '64';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=12)
   Output: value1, (ord(str2))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, ord(`str2`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.ord(str2), value2 FROM public.s31mysql
(8 rows)

-- select ord (stub function, not pushdown constraints, result)
--Testcase 1470:
SELECT value1, ord(str2) FROM s3 WHERE to_hex(value2) = '64';
 value1 | ord 
--------+-----
    0.1 |  32
    0.2 |  32
    0.3 |  32
(3 rows)

-- select ord (stub function, pushdown constraints, explain)
--Testcase 1471:
EXPLAIN VERBOSE
SELECT value1, ord(str2) FROM s3 WHERE value2 != 200;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=12)
   Output: value1, (ord(str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, ord(`str2`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.ord(str2) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select ord (stub function, pushdown constraints, result)
--Testcase 1472:
SELECT value1, ord(str2) FROM s3 WHERE value2 != 200;
 value1 | ord 
--------+-----
    0.1 |  32
    0.2 |  32
    0.3 |  32
(3 rows)

-- select ord with non pushdown func and explicit constant (explain)
--Testcase 1473:
EXPLAIN VERBOSE
SELECT ord(str2), pi(), 4.1 FROM s3;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=44)
   Output: (ord(str2)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT ord(`str2`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.ord(str2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select ord with non pushdown func and explicit constant (result)
--Testcase 1474:
SELECT ord(str2), pi(), 4.1 FROM s3;
 ord |        pi         | ?column? 
-----+-------------------+----------
  32 | 3.141592653589793 |      4.1
  32 | 3.141592653589793 |      4.1
  32 | 3.141592653589793 |      4.1
  32 | 3.141592653589793 |      4.1
  32 | 3.141592653589793 |      4.1
  32 | 3.141592653589793 |      4.1
(6 rows)

-- select ord with order by (explain)
--Testcase 1475:
EXPLAIN VERBOSE
SELECT value1, ord(str2) FROM s3 ORDER BY value1, ord(str2);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=12)
   Output: value1, (ord(str2))
   Sort Key: s3.value1, (ord(s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=12)
         Output: value1, (ord(str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, ord(`str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.ord(str2) FROM public.s31mysql
(12 rows)

-- select ord with order by (result)
--Testcase 1476:
SELECT value1, ord(str2) FROM s3 ORDER BY value1, ord(str2);
 value1 | ord 
--------+-----
    0.1 |  32
    0.2 |  32
    0.3 |  32
    1.1 |  32
    2.2 |  32
    3.3 |  32
(6 rows)

-- select ord with order by index (result)
--Testcase 1477:
SELECT value1, ord(str2) FROM s3 ORDER BY 2,1;
 value1 | ord 
--------+-----
    0.1 |  32
    0.2 |  32
    0.3 |  32
    1.1 |  32
    2.2 |  32
    3.3 |  32
(6 rows)

-- select ord with order by index (result)
--Testcase 1478:
SELECT value1, ord(str2) FROM s3 ORDER BY 1,2;
 value1 | ord 
--------+-----
    0.1 |  32
    0.2 |  32
    0.3 |  32
    1.1 |  32
    2.2 |  32
    3.3 |  32
(6 rows)

-- select ord with group by (explain)
--Testcase 1479:
EXPLAIN VERBOSE
SELECT count(value1), ord(str2) FROM s3 GROUP BY ord(str2) ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=12)
   Output: (count(value1)), (ord(str2))
   Sort Key: (count(s3.value1)), (ord(s3.str2))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
         Output: count(value1), (ord(str2))
         Group Key: (ord(s3.str2))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (ord(str2)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT ord(`str2`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.ord(str2), value1 FROM public.s31mysql
(15 rows)

-- select ord with group by (result)
--Testcase 1480:
SELECT count(value1), ord(str2) FROM s3 GROUP BY ord(str2) ORDER BY 1,2;
 count | ord 
-------+-----
     6 |  32
(1 row)

-- select ord with group by index (result)
--Testcase 1481:
SELECT value1, ord(str2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | ord 
--------+-----
    0.1 |  32
    0.2 |  32
    0.3 |  32
    1.1 |  32
    2.2 |  32
    3.3 |  32
(6 rows)

-- select ord with group by having (explain)
--Testcase 1482:
EXPLAIN VERBOSE
SELECT count(value1), ord(str2) FROM s3 GROUP BY ord(str2), str2 HAVING ord(str2) IS NOT NULL ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=44)
   Output: (count(value1)), (ord(str2)), str2
   Sort Key: (count(s3.value1)), (ord(s3.str2))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=44)
         Output: count(value1), (ord(str2)), str2
         Group Key: (ord(s3.str2)), s3.str2
         Filter: ((ord(s3.str2)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=44)
               Output: (ord(str2)), str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT ord(`str2`), `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.ord(str2), str2, value1 FROM public.s31mysql
(16 rows)

-- select ord with group by having (result)
--Testcase 1483:
SELECT count(value1), ord(str2) FROM s3 GROUP BY ord(str2), str2 HAVING ord(str2) IS NOT NULL ORDER BY 1,2;
 count | ord 
-------+-----
     6 |  32
(1 row)

-- select ord with group by index having (result)
--Testcase 1484:
SELECT value1, ord(str2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | ord 
--------+-----
    1.1 |  32
    2.2 |  32
    3.3 |  32
(3 rows)

--
-- test position()
--
-- select position (stub function, explain)
--Testcase 1485:
EXPLAIN VERBOSE
SELECT position('XYZ' IN str1), position('XYZ' IN str2) FROM s3;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=8)
   Output: (POSITION(('XYZ'::text) IN (str1))), (POSITION(('XYZ'::text) IN (str2)))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT position('XYZ' IN `str1`), position('XYZ' IN `str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT "position"(str1, 'XYZ'::text), "position"(str2, 'XYZ'::text) FROM public.s31mysql
(7 rows)

-- select position (stub function, result)
--Testcase 1486:
SELECT position('XYZ' IN str1), position('XYZ' IN str2) FROM s3;
 position | position 
----------+----------
        4 |        4
        4 |        4
        4 |        4
        4 |        4
        4 |        4
        4 |        4
(6 rows)

-- select position (stub function, not pushdown constraints, explain)
--Testcase 1487:
EXPLAIN VERBOSE
SELECT value1, position('XYZ' IN str1) FROM s3 WHERE to_hex(value2) = '64';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=12)
   Output: value1, (POSITION(('XYZ'::text) IN (str1)))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, position('XYZ' IN `str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, "position"(str1, 'XYZ'::text), value2 FROM public.s31mysql
(8 rows)

-- select position (stub function, not pushdown constraints, result)
--Testcase 1488:
SELECT value1, position('XYZ' IN str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 | position 
--------+----------
    0.1 |        4
    0.2 |        4
    0.3 |        4
(3 rows)

-- select position (stub function, pushdown constraints, explain)
--Testcase 1489:
EXPLAIN VERBOSE
SELECT value1, position('XYZ' IN str1) FROM s3 WHERE value2 != 200;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=12)
   Output: value1, (POSITION(('XYZ'::text) IN (str1)))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, position('XYZ' IN `str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, "position"(str1, 'XYZ'::text) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select position (stub function, pushdown constraints, result)
--Testcase 1490:
SELECT value1, position('XYZ' IN str1) FROM s3 WHERE value2 != 200;
 value1 | position 
--------+----------
    0.1 |        4
    0.2 |        4
    0.3 |        4
(3 rows)

-- select position with non pushdown func and explicit constant (explain)
--Testcase 1491:
EXPLAIN VERBOSE
SELECT position('XYZ' IN str1), pi(), 4.1 FROM s3;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=44)
   Output: (POSITION(('XYZ'::text) IN (str1))), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT position('XYZ' IN `str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT "position"(str1, 'XYZ'::text), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select position with non pushdown func and explicit constant (result)
--Testcase 1492:
SELECT position('XYZ' IN str1), pi(), 4.1 FROM s3;
 position |        pi         | ?column? 
----------+-------------------+----------
        4 | 3.141592653589793 |      4.1
        4 | 3.141592653589793 |      4.1
        4 | 3.141592653589793 |      4.1
        4 | 3.141592653589793 |      4.1
        4 | 3.141592653589793 |      4.1
        4 | 3.141592653589793 |      4.1
(6 rows)

-- select position with order by (explain)
--Testcase 1493:
EXPLAIN VERBOSE
SELECT value1, position('XYZ' IN str1) FROM s3 ORDER BY value1, position('XYZ' IN str1);
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=12)
   Output: value1, (POSITION(('XYZ'::text) IN (str1)))
   Sort Key: s3.value1, (POSITION(('XYZ'::text) IN (s3.str1)))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=12)
         Output: value1, (POSITION(('XYZ'::text) IN (str1)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, position('XYZ' IN `str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, "position"(str1, 'XYZ'::text) FROM public.s31mysql
(12 rows)

-- select position with order by (result)
--Testcase 1494:
SELECT value1, position('XYZ' IN str1) FROM s3 ORDER BY value1, position('XYZ' IN str1);
 value1 | position 
--------+----------
    0.1 |        4
    0.2 |        4
    0.3 |        4
    1.1 |        4
    2.2 |        4
    3.3 |        4
(6 rows)

-- select position with order by index (result)
--Testcase 1495:
SELECT value1, position('XYZ' IN str1) FROM s3 ORDER BY 2,1;
 value1 | position 
--------+----------
    0.1 |        4
    0.2 |        4
    0.3 |        4
    1.1 |        4
    2.2 |        4
    3.3 |        4
(6 rows)

-- select position with order by index (result)
--Testcase 1496:
SELECT value1, position('XYZ' IN str1) FROM s3 ORDER BY 1,2;
 value1 | position 
--------+----------
    0.1 |        4
    0.2 |        4
    0.3 |        4
    1.1 |        4
    2.2 |        4
    3.3 |        4
(6 rows)

-- select position with group by (explain)
--Testcase 1497:
EXPLAIN VERBOSE
SELECT count(value1), position('XYZ' IN str1) FROM s3 GROUP BY position('XYZ' IN str1) ORDER BY 1,2;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort  (cost=174.17..174.18 rows=1 width=12)
   Output: (count(value1)), (POSITION(('XYZ'::text) IN (str1)))
   Sort Key: (count(s3.value1)), (POSITION(('XYZ'::text) IN (s3.str1)))
   ->  Foreign Scan  (cost=118.53..174.16 rows=1 width=12)
         Output: (count(value1)), (POSITION(('XYZ'::text) IN (str1)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.s3__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT count(`value1`), position('XYZ' IN `str1`) FROM `test`.`s32` GROUP BY 2
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT count(value1), "position"(str1, 'XYZ'::text) FROM public.s31mysql GROUP BY 2
(16 rows)

-- select position with group by (result)
--Testcase 1498:
SELECT count(value1), position('XYZ' IN str1) FROM s3 GROUP BY position('XYZ' IN str1) ORDER BY 1,2;
 count | position 
-------+----------
     6 |        4
(1 row)

-- select position with group by index (result)
--Testcase 1499:
SELECT value1, position('XYZ' IN str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | position 
--------+----------
    0.1 |        4
    0.2 |        4
    0.3 |        4
    1.1 |        4
    2.2 |        4
    3.3 |        4
(6 rows)

-- select position with group by having (explain)
--Testcase 1500:
EXPLAIN VERBOSE
SELECT count(value1), position('XYZ' IN str1) FROM s3 GROUP BY position('XYZ' IN str1), str1 HAVING position('XYZ' IN str1) IS NOT NULL ORDER BY 1,2;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=191.15..191.16 rows=1 width=44)
   Output: (count(value1)), (POSITION(('XYZ'::text) IN (str1))), str1
   Sort Key: (count(s3.value1)), (POSITION(('XYZ'::text) IN (s3.str1)))
   ->  Foreign Scan  (cost=126.98..191.14 rows=1 width=44)
         Output: (count(value1)), (POSITION(('XYZ'::text) IN (str1))), str1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.s3__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT count(`value1`), position('XYZ' IN `str1`), `str1` FROM `test`.`s32` WHERE ((position('XYZ' IN `str1`) IS NOT NULL)) GROUP BY 2, 3
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT count(value1), "position"(str1, 'XYZ'::text), str1 FROM public.s31mysql WHERE (("position"(str1, 'XYZ'::text) IS NOT NULL)) GROUP BY 2, 3
(16 rows)

-- select position with group by having (result)
--Testcase 1501:
SELECT count(value1), position('XYZ' IN str1) FROM s3 GROUP BY position('XYZ' IN str1), str1 HAVING position('XYZ' IN str1) IS NOT NULL ORDER BY 1,2;
 count | position 
-------+----------
     6 |        4
(1 row)

-- select position with group by index having (result)
--Testcase 1502:
SELECT value1, position('XYZ' IN str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | position 
--------+----------
    1.1 |        4
    2.2 |        4
    3.3 |        4
(3 rows)

--
-- test quote()
--
-- select quote (stub function, explain)
--Testcase 1503:
EXPLAIN VERBOSE
SELECT quote(str1), quote(str2) FROM s3;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=64)
   Output: (quote(str1)), (quote(str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT quote(`str1`), quote(`str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.quote(str1), public.quote(str2) FROM public.s31mysql
(7 rows)

-- select quote (stub function, result)
--Testcase 1504:
SELECT quote(str1), quote(str2) FROM s3;
    quote    |    quote    
-------------+-------------
 '---XYZ---' | '   XYZ   '
 '---XYZ---' | '   XYZ   '
 '---XYZ---' | '   XYZ   '
 '---XYZ---' | '   XYZ   '
 '---XYZ---' | '   XYZ   '
 '---XYZ---' | '   XYZ   '
(6 rows)

-- select quote (stub function, not pushdown constraints, explain)
--Testcase 1505:
EXPLAIN VERBOSE
SELECT value1, quote(str2) FROM s3 WHERE to_hex(value2) = '64';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (quote(str2))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, quote(`str2`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.quote(str2), value2 FROM public.s31mysql
(8 rows)

-- select quote (stub function, not pushdown constraints, result)
--Testcase 1506:
SELECT value1, quote(str2) FROM s3 WHERE to_hex(value2) = '64';
 value1 |    quote    
--------+-------------
    0.1 | '   XYZ   '
    0.2 | '   XYZ   '
    0.3 | '   XYZ   '
(3 rows)

-- select quote (stub function, pushdown constraints, explain)
--Testcase 1507:
EXPLAIN VERBOSE
SELECT value1, quote(str2) FROM s3 WHERE value2 != 200;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (quote(str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, quote(`str2`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.quote(str2) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select quote (stub function, pushdown constraints, result)
--Testcase 1508:
SELECT value1, quote(str2) FROM s3 WHERE value2 != 200;
 value1 |    quote    
--------+-------------
    0.1 | '   XYZ   '
    0.2 | '   XYZ   '
    0.3 | '   XYZ   '
(3 rows)

-- select quote with non pushdown func and explicit constant (explain)
--Testcase 1509:
EXPLAIN VERBOSE
SELECT quote(str2), pi(), 4.1 FROM s3;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (quote(str2)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT quote(`str2`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.quote(str2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select quote with non pushdown func and explicit constant (result)
--Testcase 1510:
SELECT quote(str2), pi(), 4.1 FROM s3;
    quote    |        pi         | ?column? 
-------------+-------------------+----------
 '   XYZ   ' | 3.141592653589793 |      4.1
 '   XYZ   ' | 3.141592653589793 |      4.1
 '   XYZ   ' | 3.141592653589793 |      4.1
 '   XYZ   ' | 3.141592653589793 |      4.1
 '   XYZ   ' | 3.141592653589793 |      4.1
 '   XYZ   ' | 3.141592653589793 |      4.1
(6 rows)

-- select quote with order by (explain)
--Testcase 1511:
EXPLAIN VERBOSE
SELECT value1, quote(str2) FROM s3 ORDER BY value1, quote(str2);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (quote(str2))
   Sort Key: s3.value1, (quote(s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (quote(str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, quote(`str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.quote(str2) FROM public.s31mysql
(12 rows)

-- select quote with order by (result)
--Testcase 1512:
SELECT value1, quote(str2) FROM s3 ORDER BY value1, quote(str2);
 value1 |    quote    
--------+-------------
    0.1 | '   XYZ   '
    0.2 | '   XYZ   '
    0.3 | '   XYZ   '
    1.1 | '   XYZ   '
    2.2 | '   XYZ   '
    3.3 | '   XYZ   '
(6 rows)

-- select quote with order by index (result)
--Testcase 1513:
SELECT value1, quote(str2) FROM s3 ORDER BY 2,1;
 value1 |    quote    
--------+-------------
    0.1 | '   XYZ   '
    0.2 | '   XYZ   '
    0.3 | '   XYZ   '
    1.1 | '   XYZ   '
    2.2 | '   XYZ   '
    3.3 | '   XYZ   '
(6 rows)

-- select quote with order by index (result)
--Testcase 1514:
SELECT value1, quote(str2) FROM s3 ORDER BY 1,2;
 value1 |    quote    
--------+-------------
    0.1 | '   XYZ   '
    0.2 | '   XYZ   '
    0.3 | '   XYZ   '
    1.1 | '   XYZ   '
    2.2 | '   XYZ   '
    3.3 | '   XYZ   '
(6 rows)

-- select quote with group by (explain)
--Testcase 1515:
EXPLAIN VERBOSE
SELECT count(value1), quote(str2) FROM s3 GROUP BY quote(str2) ORDER BY 1,2;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (quote(str2))
   Sort Key: (count(s3.value1)), (quote(s3.str2))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (quote(str2))
         Group Key: (quote(s3.str2))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (quote(str2)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT quote(`str2`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.quote(str2), value1 FROM public.s31mysql
(15 rows)

-- select quote with group by (result)
--Testcase 1516:
SELECT count(value1), quote(str2) FROM s3 GROUP BY quote(str2) ORDER BY 1,2;
 count |    quote    
-------+-------------
     6 | '   XYZ   '
(1 row)

-- select quote with group by index (result)
--Testcase 1517:
SELECT value1, quote(str2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |    quote    
--------+-------------
    0.1 | '   XYZ   '
    0.2 | '   XYZ   '
    0.3 | '   XYZ   '
    1.1 | '   XYZ   '
    2.2 | '   XYZ   '
    3.3 | '   XYZ   '
(6 rows)

-- select quote with group by having (explain)
--Testcase 1518:
EXPLAIN VERBOSE
SELECT count(value1), quote(str2) FROM s3 GROUP BY quote(str2), str2 HAVING quote(str2) IS NOT NULL ORDER BY 1,2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=72)
   Output: (count(value1)), (quote(str2)), str2
   Sort Key: (count(s3.value1)), (quote(s3.str2))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=72)
         Output: count(value1), (quote(str2)), str2
         Group Key: (quote(s3.str2)), s3.str2
         Filter: ((quote(s3.str2)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
               Output: (quote(str2)), str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT quote(`str2`), `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.quote(str2), str2, value1 FROM public.s31mysql
(16 rows)

-- select quote with group by having (result)
--Testcase 1519:
SELECT count(value1), quote(str2) FROM s3 GROUP BY quote(str2), str2 HAVING quote(str2) IS NOT NULL ORDER BY 1,2;
 count |    quote    
-------+-------------
     6 | '   XYZ   '
(1 row)

-- select quote with group by index having (result)
--Testcase 1520:
SELECT value1, quote(str2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |    quote    
--------+-------------
    1.1 | '   XYZ   '
    2.2 | '   XYZ   '
    3.3 | '   XYZ   '
(3 rows)

--
-- test mysql_regexp_instr()
--
-- select mysql_regexp_instr (stub function, explain)
--Testcase 1521:
EXPLAIN VERBOSE
SELECT mysql_regexp_instr(str1, 'XY'), mysql_regexp_instr(str2, 'XYZ') FROM s3;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=8)
   Output: (mysql_regexp_instr(str1, 'XY'::text)), (mysql_regexp_instr(str2, 'XYZ'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_instr(`str1`, 'XY'), regexp_instr(`str2`, 'XYZ') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_instr(str1, 'XY'::text), public.mysql_regexp_instr(str2, 'XYZ'::text) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_instr (stub function, result)
--Testcase 1522:
SELECT mysql_regexp_instr(str1, 'XY'), mysql_regexp_instr(str2, 'XYZ') FROM s3;
 mysql_regexp_instr | mysql_regexp_instr 
--------------------+--------------------
                  4 |                  4
                  4 |                  4
                  4 |                  4
                  4 |                  4
                  4 |                  4
                  4 |                  4
(6 rows)

-- select mysql_regexp_instr (stub function, explain)
--Testcase 1523:
EXPLAIN VERBOSE
SELECT mysql_regexp_instr(str1, 'XY', 3), mysql_regexp_instr(str2, 'XYZ', 3) FROM s3;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=8)
   Output: (mysql_regexp_instr(str1, 'XY'::text, 3)), (mysql_regexp_instr(str2, 'XYZ'::text, 3))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_instr(`str1`, 'XY', 3), regexp_instr(`str2`, 'XYZ', 3) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_instr(str1, 'XY'::text, 3), public.mysql_regexp_instr(str2, 'XYZ'::text, 3) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_instr (stub function, result)
--Testcase 1524:
SELECT mysql_regexp_instr(str1, 'XY', 3), mysql_regexp_instr(str2, 'XYZ', 3) FROM s3;
 mysql_regexp_instr | mysql_regexp_instr 
--------------------+--------------------
                  4 |                  4
                  4 |                  4
                  4 |                  4
                  4 |                  4
                  4 |                  4
                  4 |                  4
(6 rows)

-- select mysql_regexp_instr (stub function, explain)
--Testcase 1525:
EXPLAIN VERBOSE
SELECT mysql_regexp_instr(str1, 'XY', 3, 0), mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=8)
   Output: (mysql_regexp_instr(str1, 'XY'::text, 3, 0)), (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_instr(`str1`, 'XY', 3, 0), regexp_instr(`str2`, 'XYZ', 3, 0) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_instr(str1, 'XY'::text, 3, 0), public.mysql_regexp_instr(str2, 'XYZ'::text, 3, 0) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_instr (stub function, result)
--Testcase 1526:
SELECT mysql_regexp_instr(str1, 'XY', 3, 0), mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3;
 mysql_regexp_instr | mysql_regexp_instr 
--------------------+--------------------
                  4 |                  4
                  4 |                  4
                  4 |                  4
                  4 |                  4
                  4 |                  4
                  4 |                  4
(6 rows)

-- select mysql_regexp_instr (stub function, explain)
--Testcase 1527:
EXPLAIN VERBOSE
SELECT mysql_regexp_instr(str1, 'XY', 3, 0, 1), mysql_regexp_instr(str2, 'XYZ', 3, 0, 1) FROM s3;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=8)
   Output: (mysql_regexp_instr(str1, 'XY'::text, 3, 0, 1)), (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0, 1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_instr(`str1`, 'XY', 3, 0, 1), regexp_instr(`str2`, 'XYZ', 3, 0, 1) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_instr(str1, 'XY'::text, 3, 0, 1), public.mysql_regexp_instr(str2, 'XYZ'::text, 3, 0, 1) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_instr (stub function, result)
--Testcase 1528:
SELECT mysql_regexp_instr(str1, 'XY', 3, 0, 1), mysql_regexp_instr(str2, 'XYZ', 3, 0, 1) FROM s3;
 mysql_regexp_instr | mysql_regexp_instr 
--------------------+--------------------
                  6 |                  7
                  6 |                  7
                  6 |                  7
                  6 |                  7
                  6 |                  7
                  6 |                  7
(6 rows)

-- select mysql_regexp_instr (stub function, explain)
--Testcase 1529:
EXPLAIN VERBOSE
SELECT mysql_regexp_instr(str1, 'xy', 3, 0, 1, 'i'), mysql_regexp_instr(str2, 'xyz', 3, 0, 1, 'i') FROM s3;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=8)
   Output: (mysql_regexp_instr(str1, 'xy'::text, 3, 0, 1, 'i'::text)), (mysql_regexp_instr(str2, 'xyz'::text, 3, 0, 1, 'i'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_instr(`str1`, 'xy', 3, 0, 1, 'i'), regexp_instr(`str2`, 'xyz', 3, 0, 1, 'i') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_instr(str1, 'xy'::text, 3, 0, 1, 'i'::text), public.mysql_regexp_instr(str2, 'xyz'::text, 3, 0, 1, 'i'::text) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_instr (stub function, result)
--Testcase 1530:
SELECT mysql_regexp_instr(str1, 'xy', 3, 0, 1, 'i'), mysql_regexp_instr(str2, 'xyz', 3, 0, 1, 'i') FROM s3;
 mysql_regexp_instr | mysql_regexp_instr 
--------------------+--------------------
                  6 |                  7
                  6 |                  7
                  6 |                  7
                  6 |                  7
                  6 |                  7
                  6 |                  7
(6 rows)

-- select mysql_regexp_instr (stub function, not pushdown constraints, explain)
--Testcase 1531:
EXPLAIN VERBOSE
SELECT value1, mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 WHERE to_hex(value2) = '64';
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=12)
   Output: value1, (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, regexp_instr(`str2`, 'XYZ', 3, 0), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mysql_regexp_instr(str2, 'XYZ'::text, 3, 0), value2 FROM public.s31mysql
(8 rows)

-- select mysql_regexp_instr (stub function, not pushdown constraints, result)
--Testcase 1532:
SELECT value1, mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 WHERE to_hex(value2) = '64';
 value1 | mysql_regexp_instr 
--------+--------------------
    0.1 |                  4
    0.2 |                  4
    0.3 |                  4
(3 rows)

-- select mysql_regexp_instr (stub function, pushdown constraints, explain)
--Testcase 1533:
EXPLAIN VERBOSE
SELECT value1, mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 WHERE value2 != 200;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=12)
   Output: value1, (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, regexp_instr(`str2`, 'XYZ', 3, 0) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mysql_regexp_instr(str2, 'XYZ'::text, 3, 0) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select mysql_regexp_instr (stub function, pushdown constraints, result)
--Testcase 1534:
SELECT value1, mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 WHERE value2 != 200;
 value1 | mysql_regexp_instr 
--------+--------------------
    0.1 |                  4
    0.2 |                  4
    0.3 |                  4
(3 rows)

-- select mysql_regexp_instr with non pushdown func and explicit constant (explain)
--Testcase 1535:
EXPLAIN VERBOSE
SELECT mysql_regexp_instr(str2, 'XYZ', 3, 0), pi(), 4.1 FROM s3;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=44)
   Output: (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_instr(`str2`, 'XYZ', 3, 0), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_instr(str2, 'XYZ'::text, 3, 0), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select mysql_regexp_instr with non pushdown func and explicit constant (result)
--Testcase 1536:
SELECT mysql_regexp_instr(str2, 'XYZ', 3, 0), pi(), 4.1 FROM s3;
 mysql_regexp_instr |        pi         | ?column? 
--------------------+-------------------+----------
                  4 | 3.141592653589793 |      4.1
                  4 | 3.141592653589793 |      4.1
                  4 | 3.141592653589793 |      4.1
                  4 | 3.141592653589793 |      4.1
                  4 | 3.141592653589793 |      4.1
                  4 | 3.141592653589793 |      4.1
(6 rows)

-- select mysql_regexp_instr with order by (explain)
--Testcase 1537:
EXPLAIN VERBOSE
SELECT value1, mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 ORDER BY value1, mysql_regexp_instr(str2, 'XYZ', 3, 0);
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=12)
   Output: value1, (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0))
   Sort Key: s3.value1, (mysql_regexp_instr(s3.str2, 'XYZ'::text, 3, 0))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=12)
         Output: value1, (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, regexp_instr(`str2`, 'XYZ', 3, 0) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.mysql_regexp_instr(str2, 'XYZ'::text, 3, 0) FROM public.s31mysql
(12 rows)

-- select mysql_regexp_instr with order by (result)
--Testcase 1538:
SELECT value1, mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 ORDER BY value1, mysql_regexp_instr(str2, 'XYZ', 3, 0);
 value1 | mysql_regexp_instr 
--------+--------------------
    0.1 |                  4
    0.2 |                  4
    0.3 |                  4
    1.1 |                  4
    2.2 |                  4
    3.3 |                  4
(6 rows)

-- select mysql_regexp_instr with order by index (result)
--Testcase 1539:
SELECT value1, mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 ORDER BY 2,1;
 value1 | mysql_regexp_instr 
--------+--------------------
    0.1 |                  4
    0.2 |                  4
    0.3 |                  4
    1.1 |                  4
    2.2 |                  4
    3.3 |                  4
(6 rows)

-- select mysql_regexp_instr with order by index (result)
--Testcase 1540:
SELECT value1, mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 ORDER BY 1,2;
 value1 | mysql_regexp_instr 
--------+--------------------
    0.1 |                  4
    0.2 |                  4
    0.3 |                  4
    1.1 |                  4
    2.2 |                  4
    3.3 |                  4
(6 rows)

-- select mysql_regexp_instr with group by (explain)
--Testcase 1541:
EXPLAIN VERBOSE
SELECT count(value1), mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 GROUP BY mysql_regexp_instr(str2, 'XYZ', 3, 0) ORDER BY 1,2;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=12)
   Output: (count(value1)), (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0))
   Sort Key: (count(s3.value1)), (mysql_regexp_instr(s3.str2, 'XYZ'::text, 3, 0))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
         Output: count(value1), (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0))
         Group Key: (mysql_regexp_instr(s3.str2, 'XYZ'::text, 3, 0))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT regexp_instr(`str2`, 'XYZ', 3, 0), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_regexp_instr(str2, 'XYZ'::text, 3, 0), value1 FROM public.s31mysql
(15 rows)

-- select mysql_regexp_instr with group by (result)
--Testcase 1542:
SELECT count(value1), mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 GROUP BY mysql_regexp_instr(str2, 'XYZ', 3, 0) ORDER BY 1,2;
 count | mysql_regexp_instr 
-------+--------------------
     6 |                  4
(1 row)

-- select mysql_regexp_instr with group by index (result)
--Testcase 1543:
SELECT value1, mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | mysql_regexp_instr 
--------+--------------------
    0.1 |                  4
    0.2 |                  4
    0.3 |                  4
    1.1 |                  4
    2.2 |                  4
    3.3 |                  4
(6 rows)

-- select mysql_regexp_instr with group by having (explain)
--Testcase 1544:
EXPLAIN VERBOSE
SELECT count(value1), mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 GROUP BY mysql_regexp_instr(str2, 'XYZ', 3, 0), str2 HAVING mysql_regexp_instr(str2, 'XYZ', 3, 0) IS NOT NULL ORDER BY 1,2;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=44)
   Output: (count(value1)), (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0)), str2
   Sort Key: (count(s3.value1)), (mysql_regexp_instr(s3.str2, 'XYZ'::text, 3, 0))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=44)
         Output: count(value1), (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0)), str2
         Group Key: (mysql_regexp_instr(s3.str2, 'XYZ'::text, 3, 0)), s3.str2
         Filter: ((mysql_regexp_instr(s3.str2, 'XYZ'::text, 3, 0)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=44)
               Output: (mysql_regexp_instr(str2, 'XYZ'::text, 3, 0)), str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT regexp_instr(`str2`, 'XYZ', 3, 0), `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_regexp_instr(str2, 'XYZ'::text, 3, 0), str2, value1 FROM public.s31mysql
(16 rows)

-- select mysql_regexp_instr with group by having (result)
--Testcase 1545:
SELECT count(value1), mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 GROUP BY mysql_regexp_instr(str2, 'XYZ', 3, 0), str2 HAVING mysql_regexp_instr(str2, 'XYZ', 3, 0) IS NOT NULL ORDER BY 1,2;
 count | mysql_regexp_instr 
-------+--------------------
     6 |                  4
(1 row)

-- select mysql_regexp_instr with group by index having (result)
--Testcase 1546:
SELECT value1, mysql_regexp_instr(str2, 'XYZ', 3, 0) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | mysql_regexp_instr 
--------+--------------------
    1.1 |                  4
    2.2 |                  4
    3.3 |                  4
(3 rows)

--
-- test mysql_regexp_like()
--
-- select mysql_regexp_like (stub function, explain)
--Testcase 1547:
EXPLAIN VERBOSE
SELECT mysql_regexp_instr(str1, 'XY'), mysql_regexp_instr(str2, 'XYZ') FROM s3;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=8)
   Output: (mysql_regexp_instr(str1, 'XY'::text)), (mysql_regexp_instr(str2, 'XYZ'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_instr(`str1`, 'XY'), regexp_instr(`str2`, 'XYZ') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_instr(str1, 'XY'::text), public.mysql_regexp_instr(str2, 'XYZ'::text) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_like (stub function, result)
--Testcase 1548:
SELECT mysql_regexp_instr(str1, 'XY'), mysql_regexp_instr(str2, 'XYZ') FROM s3;
 mysql_regexp_instr | mysql_regexp_instr 
--------------------+--------------------
                  4 |                  4
                  4 |                  4
                  4 |                  4
                  4 |                  4
                  4 |                  4
                  4 |                  4
(6 rows)

-- select mysql_regexp_like (stub function, explain)
--Testcase 1549:
EXPLAIN VERBOSE
SELECT mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=4)
   Output: (mysql_regexp_like('   XyZ   '::text, str2, 'i'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_like('   XyZ   ', `str2`, 'i') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_like('   XyZ   '::text, str2, 'i'::text) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_like (stub function, result)
--Testcase 1550:
SELECT mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3;
 mysql_regexp_like 
-------------------
                 1
                 1
                 1
                 1
                 1
                 1
(6 rows)

-- select mysql_regexp_like (stub function, not pushdown constraints, explain)
--Testcase 1551:
EXPLAIN VERBOSE
SELECT value1, mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 WHERE to_hex(value2) = '64';
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=12)
   Output: value1, (mysql_regexp_like('   XyZ   '::text, str2, 'i'::text))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, regexp_like('   XyZ   ', `str2`, 'i'), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mysql_regexp_like('   XyZ   '::text, str2, 'i'::text), value2 FROM public.s31mysql
(8 rows)

-- select mysql_regexp_like (stub function, not pushdown constraints, result)
--Testcase 1552:
SELECT value1, mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 WHERE to_hex(value2) = '64';
 value1 | mysql_regexp_like 
--------+-------------------
    0.1 |                 1
    0.2 |                 1
    0.3 |                 1
(3 rows)

-- select mysql_regexp_like (stub function, pushdown constraints, explain)
--Testcase 1553:
EXPLAIN VERBOSE
SELECT value1, mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 WHERE value2 != 200;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=12)
   Output: value1, (mysql_regexp_like('   XyZ   '::text, str2, 'i'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, regexp_like('   XyZ   ', `str2`, 'i') FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mysql_regexp_like('   XyZ   '::text, str2, 'i'::text) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select mysql_regexp_like (stub function, pushdown constraints, result)
--Testcase 1554:
SELECT value1, mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 WHERE value2 != 200;
 value1 | mysql_regexp_like 
--------+-------------------
    0.1 |                 1
    0.2 |                 1
    0.3 |                 1
(3 rows)

-- select mysql_regexp_like with non pushdown func and explicit constant (explain)
--Testcase 1555:
EXPLAIN VERBOSE
SELECT mysql_regexp_like('   XyZ   ', str2, 'i'), pi(), 4.1 FROM s3;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=44)
   Output: (mysql_regexp_like('   XyZ   '::text, str2, 'i'::text)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_like('   XyZ   ', `str2`, 'i'), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_like('   XyZ   '::text, str2, 'i'::text), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select mysql_regexp_like with non pushdown func and explicit constant (result)
--Testcase 1556:
SELECT mysql_regexp_like('   XyZ   ', str2, 'i'), pi(), 4.1 FROM s3;
 mysql_regexp_like |        pi         | ?column? 
-------------------+-------------------+----------
                 1 | 3.141592653589793 |      4.1
                 1 | 3.141592653589793 |      4.1
                 1 | 3.141592653589793 |      4.1
                 1 | 3.141592653589793 |      4.1
                 1 | 3.141592653589793 |      4.1
                 1 | 3.141592653589793 |      4.1
(6 rows)

-- select mysql_regexp_like with order by (explain)
--Testcase 1557:
EXPLAIN VERBOSE
SELECT value1, mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 ORDER BY value1, mysql_regexp_like('   XyZ   ', str2, 'i');
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=12)
   Output: value1, (mysql_regexp_like('   XyZ   '::text, str2, 'i'::text))
   Sort Key: s3.value1, (mysql_regexp_like('   XyZ   '::text, s3.str2, 'i'::text))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=12)
         Output: value1, (mysql_regexp_like('   XyZ   '::text, str2, 'i'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, regexp_like('   XyZ   ', `str2`, 'i') FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.mysql_regexp_like('   XyZ   '::text, str2, 'i'::text) FROM public.s31mysql
(12 rows)

-- select mysql_regexp_like with order by (result)
--Testcase 1558:
SELECT value1, mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 ORDER BY value1, mysql_regexp_like('   XyZ   ', str2, 'i');
 value1 | mysql_regexp_like 
--------+-------------------
    0.1 |                 1
    0.2 |                 1
    0.3 |                 1
    1.1 |                 1
    2.2 |                 1
    3.3 |                 1
(6 rows)

-- select mysql_regexp_like with order by index (result)
--Testcase 1559:
SELECT value1, mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 ORDER BY 2,1;
 value1 | mysql_regexp_like 
--------+-------------------
    0.1 |                 1
    0.2 |                 1
    0.3 |                 1
    1.1 |                 1
    2.2 |                 1
    3.3 |                 1
(6 rows)

-- select mysql_regexp_like with order by index (result)
--Testcase 1560:
SELECT value1, mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 ORDER BY 1,2;
 value1 | mysql_regexp_like 
--------+-------------------
    0.1 |                 1
    0.2 |                 1
    0.3 |                 1
    1.1 |                 1
    2.2 |                 1
    3.3 |                 1
(6 rows)

-- select mysql_regexp_like with group by (explain)
--Testcase 1561:
EXPLAIN VERBOSE
SELECT count(value1), mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 GROUP BY mysql_regexp_like('   XyZ   ', str2, 'i') ORDER BY 1,2;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=12)
   Output: (count(value1)), (mysql_regexp_like('   XyZ   '::text, str2, 'i'::text))
   Sort Key: (count(s3.value1)), (mysql_regexp_like('   XyZ   '::text, s3.str2, 'i'::text))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
         Output: count(value1), (mysql_regexp_like('   XyZ   '::text, str2, 'i'::text))
         Group Key: (mysql_regexp_like('   XyZ   '::text, s3.str2, 'i'::text))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (mysql_regexp_like('   XyZ   '::text, str2, 'i'::text)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT regexp_like('   XyZ   ', `str2`, 'i'), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_regexp_like('   XyZ   '::text, str2, 'i'::text), value1 FROM public.s31mysql
(15 rows)

-- select mysql_regexp_like with group by (result)
--Testcase 1562:
SELECT count(value1), mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 GROUP BY mysql_regexp_like('   XyZ   ', str2, 'i') ORDER BY 1,2;
 count | mysql_regexp_like 
-------+-------------------
     6 |                 1
(1 row)

-- select mysql_regexp_like with group by index (result)
--Testcase 1563:
SELECT value1, mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | mysql_regexp_like 
--------+-------------------
    0.1 |                 1
    0.2 |                 1
    0.3 |                 1
    1.1 |                 1
    2.2 |                 1
    3.3 |                 1
(6 rows)

-- select mysql_regexp_like with group by having (explain)
--Testcase 1564:
EXPLAIN VERBOSE
SELECT count(value1), mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 GROUP BY mysql_regexp_like('   XyZ   ', str2, 'i'), str2 HAVING mysql_regexp_like('   XyZ   ', str2, 'i') > 0 ORDER BY 1,2;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2253.76..2253.92 rows=67 width=44)
   Output: (count(value1)), (mysql_regexp_like('   XyZ   '::text, str2, 'i'::text)), str2
   Sort Key: (count(s3.value1)), (mysql_regexp_like('   XyZ   '::text, s3.str2, 'i'::text))
   ->  HashAggregate  (cost=2182.47..2251.72 rows=67 width=44)
         Output: count(value1), (mysql_regexp_like('   XyZ   '::text, str2, 'i'::text)), str2
         Group Key: (mysql_regexp_like('   XyZ   '::text, s3.str2, 'i'::text)), s3.str2
         Filter: ((mysql_regexp_like('   XyZ   '::text, s3.str2, 'i'::text)) > 0)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=44)
               Output: (mysql_regexp_like('   XyZ   '::text, str2, 'i'::text)), str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT regexp_like('   XyZ   ', `str2`, 'i'), `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_regexp_like('   XyZ   '::text, str2, 'i'::text), str2, value1 FROM public.s31mysql
(16 rows)

-- select mysql_regexp_like with group by having (result)
--Testcase 1565:
SELECT count(value1), mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 GROUP BY mysql_regexp_like('   XyZ   ', str2, 'i'), str2 HAVING mysql_regexp_like('   XyZ   ', str2, 'i') > 0 ORDER BY 1,2;
 count | mysql_regexp_like 
-------+-------------------
     6 |                 1
(1 row)

-- select mysql_regexp_like with group by index having (result)
--Testcase 1566:
SELECT value1, mysql_regexp_like('   XyZ   ', str2, 'i') FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | mysql_regexp_like 
--------+-------------------
    1.1 |                 1
    2.2 |                 1
    3.3 |                 1
(3 rows)

--
-- test mysql_regexp_replace()
--
-- select mysql_regexp_replace (stub function, explain)
--Testcase 1567:
EXPLAIN VERBOSE
SELECT mysql_regexp_replace(str1, 'X', 'x') FROM s3;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (mysql_regexp_replace(str1, 'X'::text, 'x'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_replace(`str1`, 'X', 'x') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_replace(str1, 'X'::text, 'x'::text) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_replace (stub function, result)
--Testcase 1568:
SELECT mysql_regexp_replace(str1, 'X', 'x') FROM s3;
 mysql_regexp_replace 
----------------------
 ---xYZ---
 ---xYZ---
 ---xYZ---
 ---xYZ---
 ---xYZ---
 ---xYZ---
(6 rows)

-- select mysql_regexp_replace (stub function, explain)
--Testcase 1569:
EXPLAIN VERBOSE
SELECT mysql_regexp_replace(str1, 'Y', 'y', 3) FROM s3;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_replace(`str1`, 'Y', 'y', 3) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_replace (stub function, result)
--Testcase 1570:
SELECT mysql_regexp_replace(str1, 'Y', 'y', 3) FROM s3;
 mysql_regexp_replace 
----------------------
 ---XyZ---
 ---XyZ---
 ---XyZ---
 ---XyZ---
 ---XyZ---
 ---XyZ---
(6 rows)

-- select mysql_regexp_replace (stub function, explain)
--Testcase 1571:
EXPLAIN VERBOSE
SELECT mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_replace(`str1`, 'Y', 'y', 3, 3) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_replace (stub function, result)
--Testcase 1572:
SELECT mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3;
 mysql_regexp_replace 
----------------------
 ---XYZ---
 ---XYZ---
 ---XYZ---
 ---XYZ---
 ---XYZ---
 ---XYZ---
(6 rows)

-- select mysql_regexp_replace (stub function, explain)
--Testcase 1573:
EXPLAIN VERBOSE
SELECT mysql_regexp_replace(str1, 'y', 'K', 3, 0, 'i') FROM s3;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (mysql_regexp_replace(str1, 'y'::text, 'K'::text, 3, 0, 'i'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_replace(`str1`, 'y', 'K', 3, 0, 'i') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_replace(str1, 'y'::text, 'K'::text, 3, 0, 'i'::text) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_replace (stub function, result)
--Testcase 1574:
SELECT mysql_regexp_replace(str1, 'y', 'K', 3, 0, 'i') FROM s3;
 mysql_regexp_replace 
----------------------
 ---XKZ---
 ---XKZ---
 ---XKZ---
 ---XKZ---
 ---XKZ---
 ---XKZ---
(6 rows)

-- select mysql_regexp_replace (stub function, explain)
--Testcase 1575:
EXPLAIN VERBOSE
SELECT mysql_regexp_replace(str1, 'y', NULL, 3, 3, 'i') FROM s3;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (mysql_regexp_replace(str1, 'y'::text, NULL::text, 3, 3, 'i'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_replace(`str1`, 'y', NULL, 3, 3, 'i') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_replace(str1, 'y'::text, NULL::text, 3, 3, 'i'::text) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_replace (stub function, result)
--Testcase 1576:
SELECT mysql_regexp_replace(str1, 'y', NULL, 3, 3, 'i') FROM s3;
 mysql_regexp_replace 
----------------------
 
 
 
 
 
 
(6 rows)

-- select mysql_regexp_replace (stub function, not pushdown constraints, explain)
--Testcase 1577:
EXPLAIN VERBOSE
SELECT value1, mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 WHERE to_hex(value2) = '64';
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, regexp_replace(`str1`, 'Y', 'y', 3, 3), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3), value2 FROM public.s31mysql
(8 rows)

-- select mysql_regexp_replace (stub function, not pushdown constraints, result)
--Testcase 1578:
SELECT value1, mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 WHERE to_hex(value2) = '64';
 value1 | mysql_regexp_replace 
--------+----------------------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
(3 rows)

-- select mysql_regexp_replace (stub function, pushdown constraints, explain)
--Testcase 1579:
EXPLAIN VERBOSE
SELECT value1, mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 WHERE value2 != 200;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, regexp_replace(`str1`, 'Y', 'y', 3, 3) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select mysql_regexp_replace (stub function, pushdown constraints, result)
--Testcase 1580:
SELECT value1, mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 WHERE value2 != 200;
 value1 | mysql_regexp_replace 
--------+----------------------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
(3 rows)

-- select mysql_regexp_replace with non pushdown func and explicit constant (explain)
--Testcase 1581:
EXPLAIN VERBOSE
SELECT mysql_regexp_replace(str1, 'Y', 'y', 3, 3), pi(), 4.1 FROM s3;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_replace(`str1`, 'Y', 'y', 3, 3), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select mysql_regexp_replace with non pushdown func and explicit constant (result)
--Testcase 1582:
SELECT mysql_regexp_replace(str1, 'Y', 'y', 3, 3), pi(), 4.1 FROM s3;
 mysql_regexp_replace |        pi         | ?column? 
----------------------+-------------------+----------
 ---XYZ---            | 3.141592653589793 |      4.1
 ---XYZ---            | 3.141592653589793 |      4.1
 ---XYZ---            | 3.141592653589793 |      4.1
 ---XYZ---            | 3.141592653589793 |      4.1
 ---XYZ---            | 3.141592653589793 |      4.1
 ---XYZ---            | 3.141592653589793 |      4.1
(6 rows)

-- select mysql_regexp_replace with order by (explain)
--Testcase 1583:
EXPLAIN VERBOSE
SELECT value1, mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 ORDER BY value1, mysql_regexp_replace(str1, 'Y', 'y', 3, 3);
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3))
   Sort Key: s3.value1, (mysql_regexp_replace(s3.str1, 'Y'::text, 'y'::text, 3, 3))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, regexp_replace(`str1`, 'Y', 'y', 3, 3) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3) FROM public.s31mysql
(12 rows)

-- select mysql_regexp_replace with order by (result)
--Testcase 1584:
SELECT value1, mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 ORDER BY value1, mysql_regexp_replace(str1, 'Y', 'y', 3, 3);
 value1 | mysql_regexp_replace 
--------+----------------------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select mysql_regexp_replace with order by index (result)
--Testcase 1585:
SELECT value1, mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 ORDER BY 2,1;
 value1 | mysql_regexp_replace 
--------+----------------------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select mysql_regexp_replace with order by index (result)
--Testcase 1586:
SELECT value1, mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 ORDER BY 1,2;
 value1 | mysql_regexp_replace 
--------+----------------------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select mysql_regexp_replace with group by (explain)
--Testcase 1587:
EXPLAIN VERBOSE
SELECT count(value1), mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 GROUP BY mysql_regexp_replace(str1, 'Y', 'y', 3, 3) ORDER BY 1,2;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3))
   Sort Key: (count(s3.value1)), (mysql_regexp_replace(s3.str1, 'Y'::text, 'y'::text, 3, 3))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3))
         Group Key: (mysql_regexp_replace(s3.str1, 'Y'::text, 'y'::text, 3, 3))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT regexp_replace(`str1`, 'Y', 'y', 3, 3), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3), value1 FROM public.s31mysql
(15 rows)

-- select mysql_regexp_replace with group by (result)
--Testcase 1588:
SELECT count(value1), mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 GROUP BY mysql_regexp_replace(str1, 'Y', 'y', 3, 3) ORDER BY 1,2;
 count | mysql_regexp_replace 
-------+----------------------
     6 | ---XYZ---
(1 row)

-- select mysql_regexp_replace with group by index (result)
--Testcase 1589:
SELECT value1, mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | mysql_regexp_replace 
--------+----------------------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select mysql_regexp_replace with group by having (explain)
--Testcase 1590:
EXPLAIN VERBOSE
SELECT count(value1), mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 GROUP BY mysql_regexp_replace(str1, 'Y', 'y', 3, 3), str1 HAVING mysql_regexp_replace(str1, 'Y', 'y', 3, 3) IS NOT NULL ORDER BY 1,2;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=72)
   Output: (count(value1)), (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3)), str1
   Sort Key: (count(s3.value1)), (mysql_regexp_replace(s3.str1, 'Y'::text, 'y'::text, 3, 3))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=72)
         Output: count(value1), (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3)), str1
         Group Key: (mysql_regexp_replace(s3.str1, 'Y'::text, 'y'::text, 3, 3)), s3.str1
         Filter: ((mysql_regexp_replace(s3.str1, 'Y'::text, 'y'::text, 3, 3)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
               Output: (mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT regexp_replace(`str1`, 'Y', 'y', 3, 3), `str1`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_regexp_replace(str1, 'Y'::text, 'y'::text, 3, 3), str1, value1 FROM public.s31mysql
(16 rows)

-- select mysql_regexp_replace with group by having (result)
--Testcase 1591:
SELECT count(value1), mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 GROUP BY mysql_regexp_replace(str1, 'Y', 'y', 3, 3), str1 HAVING mysql_regexp_replace(str1, 'Y', 'y', 3, 3) IS NOT NULL ORDER BY 1,2;
 count | mysql_regexp_replace 
-------+----------------------
     6 | ---XYZ---
(1 row)

-- select mysql_regexp_replace with group by index having (result)
--Testcase 1592:
SELECT value1, mysql_regexp_replace(str1, 'Y', 'y', 3, 3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | mysql_regexp_replace 
--------+----------------------
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(3 rows)

--
-- test mysql_regexp_substr()
--
-- select mysql_regexp_substr (stub function, explain)
--Testcase 1593:
EXPLAIN VERBOSE
SELECT mysql_regexp_substr(str1, 'XYZ') FROM s3;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (mysql_regexp_substr(str1, 'XYZ'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_substr(`str1`, 'XYZ') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_substr(str1, 'XYZ'::text) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_substr (stub function, result)
--Testcase 1594:
SELECT mysql_regexp_substr(str1, 'XYZ') FROM s3;
 mysql_regexp_substr 
---------------------
 XYZ
 XYZ
 XYZ
 XYZ
 XYZ
 XYZ
(6 rows)

-- select mysql_regexp_substr (stub function, explain)
--Testcase 1595:
EXPLAIN VERBOSE
SELECT mysql_regexp_substr(str1, 'XYZ', 3) FROM s3;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (mysql_regexp_substr(str1, 'XYZ'::text, 3))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_substr(`str1`, 'XYZ', 3) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_substr(str1, 'XYZ'::text, 3) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_substr (stub function, result)
--Testcase 1596:
SELECT mysql_regexp_substr(str1, 'XYZ', 3) FROM s3;
 mysql_regexp_substr 
---------------------
 XYZ
 XYZ
 XYZ
 XYZ
 XYZ
 XYZ
(6 rows)

-- select mysql_regexp_substr (stub function, explain)
--Testcase 1597:
EXPLAIN VERBOSE
SELECT mysql_regexp_substr(str2, 'XYZ', 4, 0) FROM s3;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (mysql_regexp_substr(str2, 'XYZ'::text, 4, 0))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_substr(`str2`, 'XYZ', 4, 0) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_substr(str2, 'XYZ'::text, 4, 0) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_substr (stub function, result)
--Testcase 1598:
SELECT mysql_regexp_substr(str2, 'XYZ', 4, 0) FROM s3;
 mysql_regexp_substr 
---------------------
 XYZ
 XYZ
 XYZ
 XYZ
 XYZ
 XYZ
(6 rows)

-- select mysql_regexp_substr (stub function, explain)
--Testcase 1599:
EXPLAIN VERBOSE
SELECT mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_substr(`str1`, 'xyz', 4, 0, 'i') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_substr (stub function, result)
--Testcase 1600:
SELECT mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3;
 mysql_regexp_substr 
---------------------
 XYZ
 XYZ
 XYZ
 XYZ
 XYZ
 XYZ
(6 rows)

-- select mysql_regexp_substr (stub function, explain)
--Testcase 1601:
EXPLAIN VERBOSE
SELECT mysql_regexp_substr(str1, NULL, 4, 0, 'i') FROM s3;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (mysql_regexp_substr(str1, NULL::text, 4, 0, 'i'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_substr(`str1`, NULL, 4, 0, 'i') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_substr(str1, NULL::text, 4, 0, 'i'::text) FROM public.s31mysql
(7 rows)

-- select mysql_regexp_substr (stub function, result)
--Testcase 1602:
SELECT mysql_regexp_substr(str1, NULL, 4, 0, 'i') FROM s3;
 mysql_regexp_substr 
---------------------
 
 
 
 
 
 
(6 rows)

-- select mysql_regexp_substr (stub function, not pushdown constraints, explain)
--Testcase 1603:
EXPLAIN VERBOSE
SELECT value1, mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 WHERE to_hex(value2) = '64';
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, regexp_substr(`str1`, 'xyz', 4, 0, 'i'), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text), value2 FROM public.s31mysql
(8 rows)

-- select mysql_regexp_substr (stub function, not pushdown constraints, result)
--Testcase 1604:
SELECT value1, mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 WHERE to_hex(value2) = '64';
 value1 | mysql_regexp_substr 
--------+---------------------
    0.1 | XYZ
    0.2 | XYZ
    0.3 | XYZ
(3 rows)

-- select mysql_regexp_substr (stub function, pushdown constraints, explain)
--Testcase 1605:
EXPLAIN VERBOSE
SELECT value1, mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 WHERE value2 != 200;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, regexp_substr(`str1`, 'xyz', 4, 0, 'i') FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select mysql_regexp_substr (stub function, pushdown constraints, result)
--Testcase 1606:
SELECT value1, mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 WHERE value2 != 200;
 value1 | mysql_regexp_substr 
--------+---------------------
    0.1 | XYZ
    0.2 | XYZ
    0.3 | XYZ
(3 rows)

-- select mysql_regexp_substr with non pushdown func and explicit constant (explain)
--Testcase 1607:
EXPLAIN VERBOSE
SELECT mysql_regexp_substr(str1, 'xyz', 4, 0, 'i'), pi(), 4.1 FROM s3;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT regexp_substr(`str1`, 'xyz', 4, 0, 'i'), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select mysql_regexp_substr with non pushdown func and explicit constant (result)
--Testcase 1608:
SELECT mysql_regexp_substr(str1, 'xyz', 4, 0, 'i'), pi(), 4.1 FROM s3;
 mysql_regexp_substr |        pi         | ?column? 
---------------------+-------------------+----------
 XYZ                 | 3.141592653589793 |      4.1
 XYZ                 | 3.141592653589793 |      4.1
 XYZ                 | 3.141592653589793 |      4.1
 XYZ                 | 3.141592653589793 |      4.1
 XYZ                 | 3.141592653589793 |      4.1
 XYZ                 | 3.141592653589793 |      4.1
(6 rows)

-- select mysql_regexp_substr with order by (explain)
--Testcase 1609:
EXPLAIN VERBOSE
SELECT value1, mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 ORDER BY value1, mysql_regexp_substr(str1, 'xyz', 4, 0, 'i');
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text))
   Sort Key: s3.value1, (mysql_regexp_substr(s3.str1, 'xyz'::text, 4, 0, 'i'::text))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, regexp_substr(`str1`, 'xyz', 4, 0, 'i') FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text) FROM public.s31mysql
(12 rows)

-- select mysql_regexp_substr with order by (result)
--Testcase 1610:
SELECT value1, mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 ORDER BY value1, mysql_regexp_substr(str1, 'xyz', 4, 0, 'i');
 value1 | mysql_regexp_substr 
--------+---------------------
    0.1 | XYZ
    0.2 | XYZ
    0.3 | XYZ
    1.1 | XYZ
    2.2 | XYZ
    3.3 | XYZ
(6 rows)

-- select mysql_regexp_substr with order by index (result)
--Testcase 1611:
SELECT value1, mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 ORDER BY 2,1;
 value1 | mysql_regexp_substr 
--------+---------------------
    0.1 | XYZ
    0.2 | XYZ
    0.3 | XYZ
    1.1 | XYZ
    2.2 | XYZ
    3.3 | XYZ
(6 rows)

-- select mysql_regexp_substr with order by index (result)
--Testcase 1612:
SELECT value1, mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 ORDER BY 1,2;
 value1 | mysql_regexp_substr 
--------+---------------------
    0.1 | XYZ
    0.2 | XYZ
    0.3 | XYZ
    1.1 | XYZ
    2.2 | XYZ
    3.3 | XYZ
(6 rows)

-- select mysql_regexp_substr with group by (explain)
--Testcase 1613:
EXPLAIN VERBOSE
SELECT count(value1), mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 GROUP BY mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') ORDER BY 1,2;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text))
   Sort Key: (count(s3.value1)), (mysql_regexp_substr(s3.str1, 'xyz'::text, 4, 0, 'i'::text))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text))
         Group Key: (mysql_regexp_substr(s3.str1, 'xyz'::text, 4, 0, 'i'::text))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT regexp_substr(`str1`, 'xyz', 4, 0, 'i'), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text), value1 FROM public.s31mysql
(15 rows)

-- select mysql_regexp_substr with group by (result)
--Testcase 1614:
SELECT count(value1), mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 GROUP BY mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') ORDER BY 1,2;
 count | mysql_regexp_substr 
-------+---------------------
     6 | XYZ
(1 row)

-- select mysql_regexp_substr with group by index (result)
--Testcase 1615:
SELECT value1, mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | mysql_regexp_substr 
--------+---------------------
    0.1 | XYZ
    0.2 | XYZ
    0.3 | XYZ
    1.1 | XYZ
    2.2 | XYZ
    3.3 | XYZ
(6 rows)

-- select mysql_regexp_substr with group by having (explain)
--Testcase 1616:
EXPLAIN VERBOSE
SELECT count(value1), mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 GROUP BY mysql_regexp_substr(str1, 'xyz', 4, 0, 'i'), str1 HAVING mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') IS NOT NULL ORDER BY 1,2;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=72)
   Output: (count(value1)), (mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text)), str1
   Sort Key: (count(s3.value1)), (mysql_regexp_substr(s3.str1, 'xyz'::text, 4, 0, 'i'::text))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=72)
         Output: count(value1), (mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text)), str1
         Group Key: (mysql_regexp_substr(s3.str1, 'xyz'::text, 4, 0, 'i'::text)), s3.str1
         Filter: ((mysql_regexp_substr(s3.str1, 'xyz'::text, 4, 0, 'i'::text)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
               Output: (mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT regexp_substr(`str1`, 'xyz', 4, 0, 'i'), `str1`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_regexp_substr(str1, 'xyz'::text, 4, 0, 'i'::text), str1, value1 FROM public.s31mysql
(16 rows)

-- select mysql_regexp_substr with group by having (result)
--Testcase 1617:
SELECT count(value1), mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 GROUP BY mysql_regexp_substr(str1, 'xyz', 4, 0, 'i'), str2 HAVING mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') IS NOT NULL ORDER BY 1,2;
 count | mysql_regexp_substr 
-------+---------------------
     6 | XYZ
(1 row)

-- select mysql_regexp_substr with group by index having (result)
--Testcase 1618:
SELECT value1, mysql_regexp_substr(str1, 'xyz', 4, 0, 'i') FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | mysql_regexp_substr 
--------+---------------------
    1.1 | XYZ
    2.2 | XYZ
    3.3 | XYZ
(3 rows)

--
-- test repeat()
--
-- select repeat (stub function, explain)
--Testcase 1619:
EXPLAIN VERBOSE
SELECT repeat(str1, 3), repeat(str2, 3) FROM s3;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (repeat(str1, 3)), (repeat(str2, 3))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT repeat(`str1`, 3), repeat(`str2`, 3) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT repeat(str1, 3), repeat(str2, 3) FROM public.s31mysql
(7 rows)

-- select repeat (stub function, result)
--Testcase 1620:
SELECT repeat(str1, 3), repeat(str2, 3) FROM s3;
           repeat            |           repeat            
-----------------------------+-----------------------------
 ---XYZ------XYZ------XYZ--- |    XYZ      XYZ      XYZ   
 ---XYZ------XYZ------XYZ--- |    XYZ      XYZ      XYZ   
 ---XYZ------XYZ------XYZ--- |    XYZ      XYZ      XYZ   
 ---XYZ------XYZ------XYZ--- |    XYZ      XYZ      XYZ   
 ---XYZ------XYZ------XYZ--- |    XYZ      XYZ      XYZ   
 ---XYZ------XYZ------XYZ--- |    XYZ      XYZ      XYZ   
(6 rows)

-- select repeat (stub function, not pushdown constraints, explain)
--Testcase 1621:
EXPLAIN VERBOSE
SELECT value1, repeat(str1, 3) FROM s3 WHERE to_hex(value2) = '64';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, (repeat(str1, 3))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, repeat(`str1`, 3), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, repeat(str1, 3), value2 FROM public.s31mysql
(8 rows)

-- select repeat (stub function, not pushdown constraints, result)
--Testcase 1622:
SELECT value1, repeat(str1, 3) FROM s3 WHERE to_hex(value2) = '64';
 value1 |           repeat            
--------+-----------------------------
    0.1 | ---XYZ------XYZ------XYZ---
    0.2 | ---XYZ------XYZ------XYZ---
    0.3 | ---XYZ------XYZ------XYZ---
(3 rows)

-- select repeat (stub function, pushdown constraints, explain)
--Testcase 1623:
EXPLAIN VERBOSE
SELECT value1, repeat(str1, 3) FROM s3 WHERE value2 != 200;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, (repeat(str1, 3))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, repeat(`str1`, 3) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, repeat(str1, 3) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select repeat (stub function, pushdown constraints, result)
--Testcase 1624:
SELECT value1, repeat(str1, 3) FROM s3 WHERE value2 != 200;
 value1 |           repeat            
--------+-----------------------------
    0.1 | ---XYZ------XYZ------XYZ---
    0.2 | ---XYZ------XYZ------XYZ---
    0.3 | ---XYZ------XYZ------XYZ---
(3 rows)

-- select repeat with non pushdown func and explicit constant (explain)
--Testcase 1625:
EXPLAIN VERBOSE
SELECT repeat(str1, 3), pi(), 4.1 FROM s3;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: (repeat(str1, 3)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT repeat(`str1`, 3), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT repeat(str1, 3), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select repeat with non pushdown func and explicit constant (result)
--Testcase 1626:
SELECT repeat(str1, 3), pi(), 4.1 FROM s3;
           repeat            |        pi         | ?column? 
-----------------------------+-------------------+----------
 ---XYZ------XYZ------XYZ--- | 3.141592653589793 |      4.1
 ---XYZ------XYZ------XYZ--- | 3.141592653589793 |      4.1
 ---XYZ------XYZ------XYZ--- | 3.141592653589793 |      4.1
 ---XYZ------XYZ------XYZ--- | 3.141592653589793 |      4.1
 ---XYZ------XYZ------XYZ--- | 3.141592653589793 |      4.1
 ---XYZ------XYZ------XYZ--- | 3.141592653589793 |      4.1
(6 rows)

-- select repeat with order by (explain)
--Testcase 1627:
EXPLAIN VERBOSE
SELECT value1, repeat(str1, 3) FROM s3 ORDER BY value1, repeat(str1, 3);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (repeat(str1, 3))
   Sort Key: s3.value1, (repeat(s3.str1, 3))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, (repeat(str1, 3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, repeat(`str1`, 3) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, repeat(str1, 3) FROM public.s31mysql
(12 rows)

-- select repeat with order by (result)
--Testcase 1628:
SELECT value1, repeat(str1, 3) FROM s3 ORDER BY value1, repeat(str1, 3);
 value1 |           repeat            
--------+-----------------------------
    0.1 | ---XYZ------XYZ------XYZ---
    0.2 | ---XYZ------XYZ------XYZ---
    0.3 | ---XYZ------XYZ------XYZ---
    1.1 | ---XYZ------XYZ------XYZ---
    2.2 | ---XYZ------XYZ------XYZ---
    3.3 | ---XYZ------XYZ------XYZ---
(6 rows)

-- select repeat with order by index (result)
--Testcase 1629:
SELECT value1, repeat(str1, 3) FROM s3 ORDER BY 2,1;
 value1 |           repeat            
--------+-----------------------------
    0.1 | ---XYZ------XYZ------XYZ---
    0.2 | ---XYZ------XYZ------XYZ---
    0.3 | ---XYZ------XYZ------XYZ---
    1.1 | ---XYZ------XYZ------XYZ---
    2.2 | ---XYZ------XYZ------XYZ---
    3.3 | ---XYZ------XYZ------XYZ---
(6 rows)

-- select repeat with order by index (result)
--Testcase 1630:
SELECT value1, repeat(str1, 3) FROM s3 ORDER BY 1,2;
 value1 |           repeat            
--------+-----------------------------
    0.1 | ---XYZ------XYZ------XYZ---
    0.2 | ---XYZ------XYZ------XYZ---
    0.3 | ---XYZ------XYZ------XYZ---
    1.1 | ---XYZ------XYZ------XYZ---
    2.2 | ---XYZ------XYZ------XYZ---
    3.3 | ---XYZ------XYZ------XYZ---
(6 rows)

-- select repeat with group by (explain)
--Testcase 1631:
EXPLAIN VERBOSE
SELECT count(value1), repeat(str1, 3) FROM s3 GROUP BY repeat(str1, 3) ORDER BY 1,2;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), (repeat(str1, 3))
   Sort Key: (count(s3.value1)), (repeat(s3.str1, 3))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), (repeat(str1, 3))
         Group Key: (repeat(s3.str1, 3))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: (repeat(str1, 3)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT repeat(`str1`, 3), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT repeat(str1, 3), value1 FROM public.s31mysql
(15 rows)

-- select repeat with group by (result)
--Testcase 1632:
SELECT count(value1), repeat(str1, 3) FROM s3 GROUP BY repeat(str1, 3) ORDER BY 1,2;
 count |           repeat            
-------+-----------------------------
     6 | ---XYZ------XYZ------XYZ---
(1 row)

-- select repeat with group by index (result)
--Testcase 1633:
SELECT value1, repeat(str1, 3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |           repeat            
--------+-----------------------------
    0.1 | ---XYZ------XYZ------XYZ---
    0.2 | ---XYZ------XYZ------XYZ---
    0.3 | ---XYZ------XYZ------XYZ---
    1.1 | ---XYZ------XYZ------XYZ---
    2.2 | ---XYZ------XYZ------XYZ---
    3.3 | ---XYZ------XYZ------XYZ---
(6 rows)

-- select repeat with group by having (explain)
--Testcase 1634:
EXPLAIN VERBOSE
SELECT count(value1), repeat(str1, 3) FROM s3 GROUP BY repeat(str1, 3), str1 HAVING repeat(str1, 3) IS NOT NULL ORDER BY 1,2;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=72)
   Output: (count(value1)), (repeat(str1, 3)), str1
   Sort Key: (count(s3.value1)), (repeat(s3.str1, 3))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=72)
         Output: count(value1), (repeat(str1, 3)), str1
         Group Key: (repeat(s3.str1, 3)), s3.str1
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=72)
               Output: (repeat(str1, 3)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT repeat(`str1`, 3), `str1`, `value1` FROM `test`.`s32` WHERE ((repeat(`str1`, 3) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT repeat(str1, 3), str1, value1 FROM public.s31mysql WHERE ((repeat(str1, 3) IS NOT NULL))
(15 rows)

-- select repeat with group by having (result)
--Testcase 1635:
SELECT count(value1), repeat(str1, 3) FROM s3 GROUP BY repeat(str1, 3), str1 HAVING repeat(str1, 3) IS NOT NULL ORDER BY 1,2;
 count |           repeat            
-------+-----------------------------
     6 | ---XYZ------XYZ------XYZ---
(1 row)

-- select repeat with group by index having (result)
--Testcase 1636:
SELECT value1, repeat(str1, 3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |           repeat            
--------+-----------------------------
    1.1 | ---XYZ------XYZ------XYZ---
    2.2 | ---XYZ------XYZ------XYZ---
    3.3 | ---XYZ------XYZ------XYZ---
(3 rows)

--
-- test replace()
--
-- select replace (stub function, explain)
--Testcase 1637:
EXPLAIN VERBOSE
SELECT replace(str1, 'XYZ', 'ABC'), replace(str2, 'XYZ', 'ABC') FROM s3;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (replace(str1, 'XYZ'::text, 'ABC'::text)), (replace(str2, 'XYZ'::text, 'ABC'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT replace(`str1`, 'XYZ', 'ABC'), replace(`str2`, 'XYZ', 'ABC') FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT replace(str1, 'XYZ'::text, 'ABC'::text), replace(str2, 'XYZ'::text, 'ABC'::text) FROM public.s31mysql
(7 rows)

-- select replace (stub function, result)
--Testcase 1638:
SELECT replace(str1, 'XYZ', 'ABC'), replace(str2, 'XYZ', 'ABC') FROM s3;
  replace  |  replace  
-----------+-----------
 ---ABC--- |    ABC   
 ---ABC--- |    ABC   
 ---ABC--- |    ABC   
 ---ABC--- |    ABC   
 ---ABC--- |    ABC   
 ---ABC--- |    ABC   
(6 rows)

-- select replace (stub function, not pushdown constraints, explain)
--Testcase 1639:
EXPLAIN VERBOSE
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM s3 WHERE to_hex(value2) = '64';
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, (replace(str1, 'XYZ'::text, 'ABC'::text))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, replace(`str1`, 'XYZ', 'ABC'), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, replace(str1, 'XYZ'::text, 'ABC'::text), value2 FROM public.s31mysql
(8 rows)

-- select replace (stub function, not pushdown constraints, result)
--Testcase 1640:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM s3 WHERE to_hex(value2) = '64';
 value1 |  replace  
--------+-----------
    0.1 | ---ABC---
    0.2 | ---ABC---
    0.3 | ---ABC---
(3 rows)

-- select replace (stub function, pushdown constraints, explain)
--Testcase 1641:
EXPLAIN VERBOSE
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM s3 WHERE value2 != 200;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, (replace(str1, 'XYZ'::text, 'ABC'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, replace(`str1`, 'XYZ', 'ABC') FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, replace(str1, 'XYZ'::text, 'ABC'::text) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select replace (stub function, pushdown constraints, result)
--Testcase 1642:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM s3 WHERE value2 != 200;
 value1 |  replace  
--------+-----------
    0.1 | ---ABC---
    0.2 | ---ABC---
    0.3 | ---ABC---
(3 rows)

-- select replace with non pushdown func and explicit constant (explain)
--Testcase 1643:
EXPLAIN VERBOSE
SELECT replace(str1, 'XYZ', 'ABC'), pi(), 4.1 FROM s3;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: (replace(str1, 'XYZ'::text, 'ABC'::text)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT replace(`str1`, 'XYZ', 'ABC'), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT replace(str1, 'XYZ'::text, 'ABC'::text), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select replace with non pushdown func and explicit constant (result)
--Testcase 1644:
SELECT replace(str1, 'XYZ', 'ABC'), pi(), 4.1 FROM s3;
  replace  |        pi         | ?column? 
-----------+-------------------+----------
 ---ABC--- | 3.141592653589793 |      4.1
 ---ABC--- | 3.141592653589793 |      4.1
 ---ABC--- | 3.141592653589793 |      4.1
 ---ABC--- | 3.141592653589793 |      4.1
 ---ABC--- | 3.141592653589793 |      4.1
 ---ABC--- | 3.141592653589793 |      4.1
(6 rows)

-- select replace with order by (explain)
--Testcase 1645:
EXPLAIN VERBOSE
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM s3 ORDER BY value1, replace(str1, 'XYZ', 'ABC');
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (replace(str1, 'XYZ'::text, 'ABC'::text))
   Sort Key: s3.value1, (replace(s3.str1, 'XYZ'::text, 'ABC'::text))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, (replace(str1, 'XYZ'::text, 'ABC'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, replace(`str1`, 'XYZ', 'ABC') FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, replace(str1, 'XYZ'::text, 'ABC'::text) FROM public.s31mysql
(12 rows)

-- select replace with order by (result)
--Testcase 1646:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM s3 ORDER BY value1, replace(str1, 'XYZ', 'ABC');
 value1 |  replace  
--------+-----------
    0.1 | ---ABC---
    0.2 | ---ABC---
    0.3 | ---ABC---
    1.1 | ---ABC---
    2.2 | ---ABC---
    3.3 | ---ABC---
(6 rows)

-- select replace with order by index (result)
--Testcase 1647:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM s3 ORDER BY 2,1;
 value1 |  replace  
--------+-----------
    0.1 | ---ABC---
    0.2 | ---ABC---
    0.3 | ---ABC---
    1.1 | ---ABC---
    2.2 | ---ABC---
    3.3 | ---ABC---
(6 rows)

-- select replace with order by index (result)
--Testcase 1648:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM s3 ORDER BY 1,2;
 value1 |  replace  
--------+-----------
    0.1 | ---ABC---
    0.2 | ---ABC---
    0.3 | ---ABC---
    1.1 | ---ABC---
    2.2 | ---ABC---
    3.3 | ---ABC---
(6 rows)

-- select replace with group by (explain)
--Testcase 1649:
EXPLAIN VERBOSE
SELECT count(value1), replace(str1, 'XYZ', 'ABC') FROM s3 GROUP BY replace(str1, 'XYZ', 'ABC') ORDER BY 1,2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), (replace(str1, 'XYZ'::text, 'ABC'::text))
   Sort Key: (count(s3.value1)), (replace(s3.str1, 'XYZ'::text, 'ABC'::text))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), (replace(str1, 'XYZ'::text, 'ABC'::text))
         Group Key: (replace(s3.str1, 'XYZ'::text, 'ABC'::text))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: (replace(str1, 'XYZ'::text, 'ABC'::text)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT replace(`str1`, 'XYZ', 'ABC'), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT replace(str1, 'XYZ'::text, 'ABC'::text), value1 FROM public.s31mysql
(15 rows)

-- select replace with group by (result)
--Testcase 1650:
SELECT count(value1), replace(str1, 'XYZ', 'ABC') FROM s3 GROUP BY replace(str1, 'XYZ', 'ABC') ORDER BY 1,2;
 count |  replace  
-------+-----------
     6 | ---ABC---
(1 row)

-- select replace with group by index (result)
--Testcase 1651:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |  replace  
--------+-----------
    0.1 | ---ABC---
    0.2 | ---ABC---
    0.3 | ---ABC---
    1.1 | ---ABC---
    2.2 | ---ABC---
    3.3 | ---ABC---
(6 rows)

-- select replace with group by having (explain)
--Testcase 1652:
EXPLAIN VERBOSE
SELECT count(value1), replace(str1, 'XYZ', 'ABC') FROM s3 GROUP BY replace(str1, 'XYZ', 'ABC'), str1 HAVING replace(str1, 'XYZ', 'ABC') IS NOT NULL ORDER BY 1,2;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=72)
   Output: (count(value1)), (replace(str1, 'XYZ'::text, 'ABC'::text)), str1
   Sort Key: (count(s3.value1)), (replace(s3.str1, 'XYZ'::text, 'ABC'::text))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=72)
         Output: count(value1), (replace(str1, 'XYZ'::text, 'ABC'::text)), str1
         Group Key: (replace(s3.str1, 'XYZ'::text, 'ABC'::text)), s3.str1
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=72)
               Output: (replace(str1, 'XYZ'::text, 'ABC'::text)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT replace(`str1`, 'XYZ', 'ABC'), `str1`, `value1` FROM `test`.`s32` WHERE ((replace(`str1`, 'XYZ', 'ABC') IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT replace(str1, 'XYZ'::text, 'ABC'::text), str1, value1 FROM public.s31mysql WHERE ((replace(str1, 'XYZ'::text, 'ABC'::text) IS NOT NULL))
(15 rows)

-- select replace with group by having (result)
--Testcase 1653:
SELECT count(value1), replace(str1, 'XYZ', 'ABC') FROM s3 GROUP BY replace(str1, 'XYZ', 'ABC'), str1 HAVING replace(str1, 'XYZ', 'ABC') IS NOT NULL ORDER BY 1,2;
 count |  replace  
-------+-----------
     6 | ---ABC---
(1 row)

-- select replace with group by index having (result)
--Testcase 1654:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |  replace  
--------+-----------
    1.1 | ---ABC---
    2.2 | ---ABC---
    3.3 | ---ABC---
(3 rows)

--
-- test reverse()
--
-- select reverse (stub function, explain)
--Testcase 1655:
EXPLAIN VERBOSE
SELECT reverse(str1), reverse(str2) FROM s3;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (reverse(str1)), (reverse(str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT reverse(`str1`), reverse(`str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT reverse(str1), reverse(str2) FROM public.s31mysql
(7 rows)

-- select reverse (stub function, result)
--Testcase 1656:
SELECT reverse(str1), reverse(str2) FROM s3;
  reverse  |  reverse  
-----------+-----------
 ---ZYX--- |    ZYX   
 ---ZYX--- |    ZYX   
 ---ZYX--- |    ZYX   
 ---ZYX--- |    ZYX   
 ---ZYX--- |    ZYX   
 ---ZYX--- |    ZYX   
(6 rows)

-- select reverse (stub function, not pushdown constraints, explain)
--Testcase 1657:
EXPLAIN VERBOSE
SELECT value1, reverse(str1) FROM s3 WHERE to_hex(value2) = '64';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, (reverse(str1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, reverse(`str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, reverse(str1), value2 FROM public.s31mysql
(8 rows)

-- select reverse (stub function, not pushdown constraints, result)
--Testcase 1658:
SELECT value1, reverse(str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 |  reverse  
--------+-----------
    0.1 | ---ZYX---
    0.2 | ---ZYX---
    0.3 | ---ZYX---
(3 rows)

-- select reverse (stub function, pushdown constraints, explain)
--Testcase 1659:
EXPLAIN VERBOSE
SELECT value1, reverse(str1) FROM s3 WHERE value2 != 200;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, (reverse(str1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, reverse(`str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, reverse(str1) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select reverse (stub function, pushdown constraints, result)
--Testcase 1660:
SELECT value1, reverse(str1) FROM s3 WHERE value2 != 200;
 value1 |  reverse  
--------+-----------
    0.1 | ---ZYX---
    0.2 | ---ZYX---
    0.3 | ---ZYX---
(3 rows)

-- select reverse with non pushdown func and explicit constant (explain)
--Testcase 1661:
EXPLAIN VERBOSE
SELECT reverse(str1), pi(), 4.1 FROM s3;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: (reverse(str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT reverse(`str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT reverse(str1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select reverse with non pushdown func and explicit constant (result)
--Testcase 1662:
SELECT reverse(str1), pi(), 4.1 FROM s3;
  reverse  |        pi         | ?column? 
-----------+-------------------+----------
 ---ZYX--- | 3.141592653589793 |      4.1
 ---ZYX--- | 3.141592653589793 |      4.1
 ---ZYX--- | 3.141592653589793 |      4.1
 ---ZYX--- | 3.141592653589793 |      4.1
 ---ZYX--- | 3.141592653589793 |      4.1
 ---ZYX--- | 3.141592653589793 |      4.1
(6 rows)

-- select reverse with order by (explain)
--Testcase 1663:
EXPLAIN VERBOSE
SELECT value1, reverse(str1) FROM s3 ORDER BY value1, reverse(str1);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (reverse(str1))
   Sort Key: s3.value1, (reverse(s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, (reverse(str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, reverse(`str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, reverse(str1) FROM public.s31mysql
(12 rows)

-- select reverse with order by (result)
--Testcase 1664:
SELECT value1, reverse(str1) FROM s3 ORDER BY value1, reverse(str1);
 value1 |  reverse  
--------+-----------
    0.1 | ---ZYX---
    0.2 | ---ZYX---
    0.3 | ---ZYX---
    1.1 | ---ZYX---
    2.2 | ---ZYX---
    3.3 | ---ZYX---
(6 rows)

-- select reverse with order by index (result)
--Testcase 1665:
SELECT value1, reverse(str1) FROM s3 ORDER BY 2,1;
 value1 |  reverse  
--------+-----------
    0.1 | ---ZYX---
    0.2 | ---ZYX---
    0.3 | ---ZYX---
    1.1 | ---ZYX---
    2.2 | ---ZYX---
    3.3 | ---ZYX---
(6 rows)

-- select reverse with order by index (result)
--Testcase 1666:
SELECT value1, reverse(str1) FROM s3 ORDER BY 1,2;
 value1 |  reverse  
--------+-----------
    0.1 | ---ZYX---
    0.2 | ---ZYX---
    0.3 | ---ZYX---
    1.1 | ---ZYX---
    2.2 | ---ZYX---
    3.3 | ---ZYX---
(6 rows)

-- select reverse with group by (explain)
--Testcase 1667:
EXPLAIN VERBOSE
SELECT count(value1), reverse(str1) FROM s3 GROUP BY reverse(str1) ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), (reverse(str1))
   Sort Key: (count(s3.value1)), (reverse(s3.str1))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), (reverse(str1))
         Group Key: (reverse(s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: (reverse(str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT reverse(`str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT reverse(str1), value1 FROM public.s31mysql
(15 rows)

-- select reverse with group by (result)
--Testcase 1668:
SELECT count(value1), reverse(str1) FROM s3 GROUP BY reverse(str1) ORDER BY 1,2;
 count |  reverse  
-------+-----------
     6 | ---ZYX---
(1 row)

-- select reverse with group by index (result)
--Testcase 1669:
SELECT value1, reverse(str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |  reverse  
--------+-----------
    0.1 | ---ZYX---
    0.2 | ---ZYX---
    0.3 | ---ZYX---
    1.1 | ---ZYX---
    2.2 | ---ZYX---
    3.3 | ---ZYX---
(6 rows)

-- select reverse with group by having (explain)
--Testcase 1670:
EXPLAIN VERBOSE
SELECT count(value1), reverse(str1) FROM s3 GROUP BY reverse(str1), str1 HAVING reverse(str1) IS NOT NULL ORDER BY 1,2;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=72)
   Output: (count(value1)), (reverse(str1)), str1
   Sort Key: (count(s3.value1)), (reverse(s3.str1))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=72)
         Output: count(value1), (reverse(str1)), str1
         Group Key: (reverse(s3.str1)), s3.str1
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=72)
               Output: (reverse(str1)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT reverse(`str1`), `str1`, `value1` FROM `test`.`s32` WHERE ((reverse(`str1`) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT reverse(str1), str1, value1 FROM public.s31mysql WHERE ((reverse(str1) IS NOT NULL))
(15 rows)

-- select reverse with group by having (result)
--Testcase 1671:
SELECT count(value1), reverse(str1) FROM s3 GROUP BY reverse(str1), str1 HAVING reverse(str1) IS NOT NULL ORDER BY 1,2;
 count |  reverse  
-------+-----------
     6 | ---ZYX---
(1 row)

-- select reverse with group by index having (result)
--Testcase 1672:
SELECT value1, reverse(str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |  reverse  
--------+-----------
    1.1 | ---ZYX---
    2.2 | ---ZYX---
    3.3 | ---ZYX---
(3 rows)

--
-- test right()
--
-- select right (stub function, explain)
--Testcase 1673:
EXPLAIN VERBOSE
SELECT right(str1, 4), right(str2, 4) FROM s3;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: ("right"(str1, 4)), ("right"(str2, 4))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT right(`str1`, 4), right(`str2`, 4) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT "right"(str1, 4), "right"(str2, 4) FROM public.s31mysql
(7 rows)

-- select right (stub function, result)
--Testcase 1674:
SELECT right(str1, 4), right(str2, 4) FROM s3;
 right | right 
-------+-------
 Z---  | Z   
 Z---  | Z   
 Z---  | Z   
 Z---  | Z   
 Z---  | Z   
 Z---  | Z   
(6 rows)

-- select right (stub function, not pushdown constraints, explain)
--Testcase 1675:
EXPLAIN VERBOSE
SELECT value1, right(str1, 6) FROM s3 WHERE to_hex(value2) = '64';
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, ("right"(str1, 6))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, right(`str1`, 6), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, "right"(str1, 6), value2 FROM public.s31mysql
(8 rows)

-- select right (stub function, not pushdown constraints, result)
--Testcase 1676:
SELECT value1, right(str1, 6) FROM s3 WHERE to_hex(value2) = '64';
 value1 | right  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
(3 rows)

-- select right (stub function, pushdown constraints, explain)
--Testcase 1677:
EXPLAIN VERBOSE
SELECT value1, right(str1, 6) FROM s3 WHERE value2 != 200;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, ("right"(str1, 6))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, right(`str1`, 6) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, "right"(str1, 6) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select right (stub function, pushdown constraints, result)
--Testcase 1678:
SELECT value1, right(str1, 6) FROM s3 WHERE value2 != 200;
 value1 | right  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
(3 rows)

-- select right with non pushdown func and explicit constant (explain)
--Testcase 1679:
EXPLAIN VERBOSE
SELECT right(str1, 6), pi(), 4.1 FROM s3;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: ("right"(str1, 6)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT right(`str1`, 6), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT "right"(str1, 6), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select right with non pushdown func and explicit constant (result)
--Testcase 1680:
SELECT right(str1, 6), pi(), 4.1 FROM s3;
 right  |        pi         | ?column? 
--------+-------------------+----------
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
(6 rows)

-- select right with order by (explain)
--Testcase 1681:
EXPLAIN VERBOSE
SELECT value1, right(str1, 6) FROM s3 ORDER BY value1, right(str1, 6);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, ("right"(str1, 6))
   Sort Key: s3.value1, ("right"(s3.str1, 6))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, ("right"(str1, 6))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, right(`str1`, 6) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, "right"(str1, 6) FROM public.s31mysql
(12 rows)

-- select right with order by (result)
--Testcase 1682:
SELECT value1, right(str1, 6) FROM s3 ORDER BY value1, right(str1, 6);
 value1 | right  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(6 rows)

-- select right with order by index (result)
--Testcase 1683:
SELECT value1, right(str1, 6) FROM s3 ORDER BY 2,1;
 value1 | right  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(6 rows)

-- select right with order by index (result)
--Testcase 1684:
SELECT value1, right(str1, 6) FROM s3 ORDER BY 1,2;
 value1 | right  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(6 rows)

-- select right with group by (explain)
--Testcase 1685:
EXPLAIN VERBOSE
SELECT count(value1), right(str1, 6) FROM s3 GROUP BY right(str1, 6) ORDER BY 1,2;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), ("right"(str1, 6))
   Sort Key: (count(s3.value1)), ("right"(s3.str1, 6))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), ("right"(str1, 6))
         Group Key: ("right"(s3.str1, 6))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: ("right"(str1, 6)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT right(`str1`, 6), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT "right"(str1, 6), value1 FROM public.s31mysql
(15 rows)

-- select right with group by (result)
--Testcase 1686:
SELECT count(value1), right(str1, 6) FROM s3 GROUP BY right(str1, 6) ORDER BY 1,2;
 count | right  
-------+--------
     6 | XYZ---
(1 row)

-- select right with group by index (result)
--Testcase 1687:
SELECT value1, right(str1, 6) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | right  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(6 rows)

-- select right with group by having (explain)
--Testcase 1688:
EXPLAIN VERBOSE
SELECT count(value1), right(str1, 6) FROM s3 GROUP BY right(str1, 6), str1 HAVING right(str1, 6) IS NOT NULL ORDER BY 1,2;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=72)
   Output: (count(value1)), ("right"(str1, 6)), str1
   Sort Key: (count(s3.value1)), ("right"(s3.str1, 6))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=72)
         Output: count(value1), ("right"(str1, 6)), str1
         Group Key: ("right"(s3.str1, 6)), s3.str1
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=72)
               Output: ("right"(str1, 6)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT right(`str1`, 6), `str1`, `value1` FROM `test`.`s32` WHERE ((right(`str1`, 6) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT "right"(str1, 6), str1, value1 FROM public.s31mysql WHERE (("right"(str1, 6) IS NOT NULL))
(15 rows)

-- select right with group by having (result)
--Testcase 1689:
SELECT count(value1), right(str1, 6) FROM s3 GROUP BY right(str1, 6), str1 HAVING right(str1, 6) IS NOT NULL ORDER BY 1,2;
 count | right  
-------+--------
     6 | XYZ---
(1 row)

-- select right with group by index having (result)
--Testcase 1690:
SELECT value1, right(str1, 6) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | right  
--------+--------
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(3 rows)

--
-- test rpad()
--
-- select rpad (stub function, explain)
--Testcase 1691:
EXPLAIN VERBOSE
SELECT rpad(str1, 16, str2), rpad(str1, 4, str2) FROM s3;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (rpad(str1, 16, str2)), (rpad(str1, 4, str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT rpad(`str1`, 16, `str2`), rpad(`str1`, 4, `str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT rpad(str1, 16, str2), rpad(str1, 4, str2) FROM public.s31mysql
(7 rows)

-- select rpad (stub function, result)
--Testcase 1692:
SELECT rpad(str1, 16, str2), rpad(str1, 4, str2) FROM s3;
       rpad       | rpad 
------------------+------
 ---XYZ---   XYZ  | ---X
 ---XYZ---   XYZ  | ---X
 ---XYZ---   XYZ  | ---X
 ---XYZ---   XYZ  | ---X
 ---XYZ---   XYZ  | ---X
 ---XYZ---   XYZ  | ---X
(6 rows)

-- select rpad (stub function, not pushdown constraints, explain)
--Testcase 1693:
EXPLAIN VERBOSE
SELECT value1, rpad(str1, 16, str2) FROM s3 WHERE to_hex(value2) = '64';
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, (rpad(str1, 16, str2))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, rpad(`str1`, 16, `str2`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, rpad(str1, 16, str2), value2 FROM public.s31mysql
(8 rows)

-- select rpad (stub function, not pushdown constraints, result)
--Testcase 1694:
SELECT value1, rpad(str1, 16, str2) FROM s3 WHERE to_hex(value2) = '64';
 value1 |       rpad       
--------+------------------
    0.1 | ---XYZ---   XYZ 
    0.2 | ---XYZ---   XYZ 
    0.3 | ---XYZ---   XYZ 
(3 rows)

-- select rpad (stub function, pushdown constraints, explain)
--Testcase 1695:
EXPLAIN VERBOSE
SELECT value1, rpad(str1, 16, str2) FROM s3 WHERE value2 != 200;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, (rpad(str1, 16, str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, rpad(`str1`, 16, `str2`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, rpad(str1, 16, str2) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select rpad (stub function, pushdown constraints, result)
--Testcase 1696:
SELECT value1, rpad(str1, 16, str2) FROM s3 WHERE value2 != 200;
 value1 |       rpad       
--------+------------------
    0.1 | ---XYZ---   XYZ 
    0.2 | ---XYZ---   XYZ 
    0.3 | ---XYZ---   XYZ 
(3 rows)

-- select rpad with non pushdown func and explicit constant (explain)
--Testcase 1697:
EXPLAIN VERBOSE
SELECT rpad(str1, 16, str2), pi(), 4.1 FROM s3;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: (rpad(str1, 16, str2)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT rpad(`str1`, 16, `str2`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT rpad(str1, 16, str2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select rpad with non pushdown func and explicit constant (result)
--Testcase 1698:
SELECT rpad(str1, 16, str2), pi(), 4.1 FROM s3;
       rpad       |        pi         | ?column? 
------------------+-------------------+----------
 ---XYZ---   XYZ  | 3.141592653589793 |      4.1
 ---XYZ---   XYZ  | 3.141592653589793 |      4.1
 ---XYZ---   XYZ  | 3.141592653589793 |      4.1
 ---XYZ---   XYZ  | 3.141592653589793 |      4.1
 ---XYZ---   XYZ  | 3.141592653589793 |      4.1
 ---XYZ---   XYZ  | 3.141592653589793 |      4.1
(6 rows)

-- select rpad with order by (explain)
--Testcase 1699:
EXPLAIN VERBOSE
SELECT value1, rpad(str1, 16, str2) FROM s3 ORDER BY value1, rpad(str1, 16, str2);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (rpad(str1, 16, str2))
   Sort Key: s3.value1, (rpad(s3.str1, 16, s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, (rpad(str1, 16, str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, rpad(`str1`, 16, `str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, rpad(str1, 16, str2) FROM public.s31mysql
(12 rows)

-- select rpad with order by (result)
--Testcase 1700:
SELECT value1, rpad(str1, 16, str2) FROM s3 ORDER BY value1, rpad(str1, 16, str2);
 value1 |       rpad       
--------+------------------
    0.1 | ---XYZ---   XYZ 
    0.2 | ---XYZ---   XYZ 
    0.3 | ---XYZ---   XYZ 
    1.1 | ---XYZ---   XYZ 
    2.2 | ---XYZ---   XYZ 
    3.3 | ---XYZ---   XYZ 
(6 rows)

-- select rpad with order by index (result)
--Testcase 1701:
SELECT value1, rpad(str1, 16, str2) FROM s3 ORDER BY 2,1;
 value1 |       rpad       
--------+------------------
    0.1 | ---XYZ---   XYZ 
    0.2 | ---XYZ---   XYZ 
    0.3 | ---XYZ---   XYZ 
    1.1 | ---XYZ---   XYZ 
    2.2 | ---XYZ---   XYZ 
    3.3 | ---XYZ---   XYZ 
(6 rows)

-- select rpad with order by index (result)
--Testcase 1702:
SELECT value1, rpad(str1, 16, str2) FROM s3 ORDER BY 1,2;
 value1 |       rpad       
--------+------------------
    0.1 | ---XYZ---   XYZ 
    0.2 | ---XYZ---   XYZ 
    0.3 | ---XYZ---   XYZ 
    1.1 | ---XYZ---   XYZ 
    2.2 | ---XYZ---   XYZ 
    3.3 | ---XYZ---   XYZ 
(6 rows)

-- select rpad with group by (explain)
--Testcase 1703:
EXPLAIN VERBOSE
SELECT count(value1), rpad(str1, 16, str2) FROM s3 GROUP BY rpad(str1, 16, str2) ORDER BY 1,2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), (rpad(str1, 16, str2))
   Sort Key: (count(s3.value1)), (rpad(s3.str1, 16, s3.str2))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), (rpad(str1, 16, str2))
         Group Key: (rpad(s3.str1, 16, s3.str2))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: (rpad(str1, 16, str2)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT rpad(`str1`, 16, `str2`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT rpad(str1, 16, str2), value1 FROM public.s31mysql
(15 rows)

-- select rpad with group by (result)
--Testcase 1704:
SELECT count(value1), rpad(str1, 16, str2) FROM s3 GROUP BY rpad(str1, 16, str2) ORDER BY 1,2;
 count |       rpad       
-------+------------------
     6 | ---XYZ---   XYZ 
(1 row)

-- select rpad with group by index (result)
--Testcase 1705:
SELECT value1, rpad(str1, 16, str2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |       rpad       
--------+------------------
    0.1 | ---XYZ---   XYZ 
    0.2 | ---XYZ---   XYZ 
    0.3 | ---XYZ---   XYZ 
    1.1 | ---XYZ---   XYZ 
    2.2 | ---XYZ---   XYZ 
    3.3 | ---XYZ---   XYZ 
(6 rows)

-- select rpad with group by having (explain)
--Testcase 1706:
EXPLAIN VERBOSE
SELECT count(value1), rpad(str1, 16, str2) FROM s3 GROUP BY rpad(str1, 16, str2) HAVING rpad(str1, 16, str2) IS NOT NULL ORDER BY 1,2;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=502.25..502.75 rows=200 width=40)
   Output: (count(value1)), (rpad(str1, 16, str2))
   Sort Key: (count(s3.value1)), (rpad(s3.str1, 16, s3.str2))
   ->  HashAggregate  (cost=492.11..494.61 rows=200 width=40)
         Output: count(value1), (rpad(str1, 16, str2))
         Group Key: (rpad(s3.str1, 16, s3.str2))
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
               Output: (rpad(str1, 16, str2)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT rpad(`str1`, 16, `str2`), `value1` FROM `test`.`s32` WHERE ((rpad(`str1`, 16, `str2`) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT rpad(str1, 16, str2), value1 FROM public.s31mysql WHERE ((rpad(str1, 16, str2) IS NOT NULL))
(15 rows)

-- select rpad with group by having (result)
--Testcase 1707:
SELECT count(value1), rpad(str1, 16, str2) FROM s3 GROUP BY rpad(str1, 16, str2) HAVING rpad(str1, 16, str2) IS NOT NULL ORDER BY 1,2;
 count |       rpad       
-------+------------------
     6 | ---XYZ---   XYZ 
(1 row)

-- select rpad with group by index having (result)
--Testcase 1708:
SELECT value1, rpad(str1, 16, str2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |       rpad       
--------+------------------
    1.1 | ---XYZ---   XYZ 
    2.2 | ---XYZ---   XYZ 
    3.3 | ---XYZ---   XYZ 
(3 rows)

--
-- test rtrim()
--
-- select rtrim (stub function, explain)
--Testcase 1709:
EXPLAIN VERBOSE
SELECT rtrim(str1), rtrim(str2, ' ') FROM s3;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (rtrim(str1)), (rtrim(str2, ' '::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT rtrim(`str1`), trim(TRAILING ' ' FROM `str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT rtrim(str1), rtrim(str2, ' '::text) FROM public.s31mysql
(7 rows)

-- select rtrim (stub function, result)
--Testcase 1710:
SELECT rtrim(str1), rtrim(str2, ' ') FROM s3;
   rtrim   | rtrim  
-----------+--------
 ---XYZ--- |    XYZ
 ---XYZ--- |    XYZ
 ---XYZ--- |    XYZ
 ---XYZ--- |    XYZ
 ---XYZ--- |    XYZ
 ---XYZ--- |    XYZ
(6 rows)

-- select rtrim (stub function, not pushdown constraints, explain)
--Testcase 1711:
EXPLAIN VERBOSE
SELECT value1, rtrim(str1, '-') FROM s3 WHERE to_hex(value2) = '64';
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, (rtrim(str1, '-'::text))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, trim(TRAILING '-' FROM `str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, rtrim(str1, '-'::text), value2 FROM public.s31mysql
(8 rows)

-- select rtrim (stub function, not pushdown constraints, result)
--Testcase 1712:
SELECT value1, rtrim(str1, '-') FROM s3 WHERE to_hex(value2) = '64';
 value1 | rtrim  
--------+--------
    0.1 | ---XYZ
    0.2 | ---XYZ
    0.3 | ---XYZ
(3 rows)

-- select rtrim (stub function, pushdown constraints, explain)
--Testcase 1713:
EXPLAIN VERBOSE
SELECT value1, rtrim(str1, '-') FROM s3 WHERE value2 != 200;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, (rtrim(str1, '-'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, trim(TRAILING '-' FROM `str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, rtrim(str1, '-'::text) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select rtrim (stub function, pushdown constraints, result)
--Testcase 1714:
SELECT value1, rtrim(str1, '-') FROM s3 WHERE value2 != 200;
 value1 | rtrim  
--------+--------
    0.1 | ---XYZ
    0.2 | ---XYZ
    0.3 | ---XYZ
(3 rows)

-- select rtrim with non pushdown func and explicit constant (explain)
--Testcase 1715:
EXPLAIN VERBOSE
SELECT rtrim(str1, '-'), pi(), 4.1 FROM s3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: (rtrim(str1, '-'::text)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT trim(TRAILING '-' FROM `str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT rtrim(str1, '-'::text), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select rtrim with non pushdown func and explicit constant (result)
--Testcase 1716:
SELECT rtrim(str1, '-'), pi(), 4.1 FROM s3;
 rtrim  |        pi         | ?column? 
--------+-------------------+----------
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
(6 rows)

-- select rtrim with order by (explain)
--Testcase 1717:
EXPLAIN VERBOSE
SELECT value1, rtrim(str1, '-') FROM s3 ORDER BY value1, rtrim(str1, '-');
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (rtrim(str1, '-'::text))
   Sort Key: s3.value1, (rtrim(s3.str1, '-'::text))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, (rtrim(str1, '-'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, trim(TRAILING '-' FROM `str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, rtrim(str1, '-'::text) FROM public.s31mysql
(12 rows)

-- select rtrim with order by (result)
--Testcase 1718:
SELECT value1, rtrim(str1, '-') FROM s3 ORDER BY value1, rtrim(str1, '-');
 value1 | rtrim  
--------+--------
    0.1 | ---XYZ
    0.2 | ---XYZ
    0.3 | ---XYZ
    1.1 | ---XYZ
    2.2 | ---XYZ
    3.3 | ---XYZ
(6 rows)

-- select rtrim with order by index (result)
--Testcase 1719:
SELECT value1, rtrim(str1, '-') FROM s3 ORDER BY 2,1;
 value1 | rtrim  
--------+--------
    0.1 | ---XYZ
    0.2 | ---XYZ
    0.3 | ---XYZ
    1.1 | ---XYZ
    2.2 | ---XYZ
    3.3 | ---XYZ
(6 rows)

-- select rtrim with order by index (result)
--Testcase 1720:
SELECT value1, rtrim(str1, '-') FROM s3 ORDER BY 1,2;
 value1 | rtrim  
--------+--------
    0.1 | ---XYZ
    0.2 | ---XYZ
    0.3 | ---XYZ
    1.1 | ---XYZ
    2.2 | ---XYZ
    3.3 | ---XYZ
(6 rows)

-- select rtrim with group by (explain)
--Testcase 1721:
EXPLAIN VERBOSE
SELECT count(value1), rtrim(str1, '-') FROM s3 GROUP BY rtrim(str1, '-') ORDER BY 1,2;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), (rtrim(str1, '-'::text))
   Sort Key: (count(s3.value1)), (rtrim(s3.str1, '-'::text))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), (rtrim(str1, '-'::text))
         Group Key: (rtrim(s3.str1, '-'::text))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: (rtrim(str1, '-'::text)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT trim(TRAILING '-' FROM `str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT rtrim(str1, '-'::text), value1 FROM public.s31mysql
(15 rows)

-- select rtrim with group by (result)
--Testcase 1722:
SELECT count(value1), rtrim(str1, '-') FROM s3 GROUP BY rtrim(str1, '-') ORDER BY 1,2;
 count | rtrim  
-------+--------
     6 | ---XYZ
(1 row)

-- select rtrim with group by index (result)
--Testcase 1723:
SELECT value1, rtrim(str2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | rtrim  
--------+--------
    0.1 |    XYZ
    0.2 |    XYZ
    0.3 |    XYZ
    1.1 |    XYZ
    2.2 |    XYZ
    3.3 |    XYZ
(6 rows)

-- select rtrim with group by having (explain)
--Testcase 1724:
EXPLAIN VERBOSE
SELECT count(value1), rtrim(str1, '-') FROM s3 GROUP BY rtrim(str1, '-') HAVING rtrim(str1, '-') IS NOT NULL ORDER BY 1,2;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=502.25..502.75 rows=200 width=40)
   Output: (count(value1)), (rtrim(str1, '-'::text))
   Sort Key: (count(s3.value1)), (rtrim(s3.str1, '-'::text))
   ->  HashAggregate  (cost=492.11..494.61 rows=200 width=40)
         Output: count(value1), (rtrim(str1, '-'::text))
         Group Key: (rtrim(s3.str1, '-'::text))
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
               Output: (rtrim(str1, '-'::text)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT trim(TRAILING '-' FROM `str1`), `value1` FROM `test`.`s32` WHERE ((trim(TRAILING '-' FROM `str1`) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT rtrim(str1, '-'::text), value1 FROM public.s31mysql WHERE ((rtrim(str1, '-'::text) IS NOT NULL))
(15 rows)

-- select rtrim with group by having (result)
--Testcase 1725:
SELECT count(value1), rtrim(str1, '-') FROM s3 GROUP BY rtrim(str1, '-') HAVING rtrim(str1, '-') IS NOT NULL ORDER BY 1,2;
 count | rtrim  
-------+--------
     6 | ---XYZ
(1 row)

-- select rtrim with group by index having (result)
--Testcase 1726:
SELECT value1, rtrim(str1, '-') FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | rtrim  
--------+--------
    1.1 | ---XYZ
    2.2 | ---XYZ
    3.3 | ---XYZ
(3 rows)

--
-- test space()
--
-- select space (stub function, explain)
--Testcase 1727:
EXPLAIN VERBOSE
SELECT space(value2), space(value4) FROM s3;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3871.91 rows=6826 width=64)
   Output: (space((value2)::bigint)), (space((value4)::bigint))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT space(`value2`), space(`value4`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.space(value2), public.space(value4) FROM public.s31mysql
(7 rows)

-- select space (stub function, result)
--Testcase 1728:
SELECT space(value2), space(value4) FROM s3;
                                                                                                  space                                                                                                   | space 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------
                                                                                                                                                                                                          | 
                                                                                                                                                                                                          | 
                                                                                                                                                                                                          | 
                                                                                                                                                                                                          | 
                                                                                                                                                                                                          | 
                                                                                                                                                                                                          | 
(6 rows)

-- select space (stub function, not pushdown constraints, explain)
--Testcase 1729:
EXPLAIN VERBOSE
SELECT value1, space(id) FROM s3 WHERE to_hex(value2) = '64';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.31 rows=34 width=40)
   Output: value1, (space((id)::bigint))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, space(`id`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.space(id), value2 FROM public.s31mysql
(8 rows)

-- select space (stub function, not pushdown constraints, result)
--Testcase 1730:
SELECT value1, space(id) FROM s3 WHERE to_hex(value2) = '64';
 value1 | space 
--------+-------
    0.1 | 
    0.2 |  
    0.3 |   
(3 rows)

-- select space (stub function, pushdown constraints, explain)
--Testcase 1731:
EXPLAIN VERBOSE
SELECT value1, space(id) FROM s3 WHERE value2 != 200;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2156.14 rows=6792 width=40)
   Output: value1, (space((id)::bigint))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, space(`id`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.space(id) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select space (stub function, pushdown constraints, result)
--Testcase 1732:
SELECT value1, space(id) FROM s3 WHERE value2 != 200;
 value1 | space 
--------+-------
    0.1 | 
    0.2 |  
    0.3 |   
(3 rows)

-- select space as nest function with agg (pushdown, explain)
--Testcase 1733:
EXPLAIN VERBOSE
SELECT sum(value3), space(sum(id)) FROM s3;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(value3)), space((sum(id)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s3__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`value3`), sum(`id`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3), sum(id) FROM public.s31mysql
(11 rows)

-- select space as nest function with agg (pushdown, result)
--Testcase 1734:
SELECT sum(value3), space(sum(id)) FROM s3;
ERROR:  stub space(bigint) is called
CONTEXT:  PL/pgSQL function space(bigint) line 3 at RAISE
-- select space with non pushdown func and explicit constant (explain)
--Testcase 1735:
EXPLAIN VERBOSE
SELECT space(id), pi(), 4.1 FROM s3;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=72)
   Output: (space((id)::bigint)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT space(`id`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.space(id), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select space with non pushdown func and explicit constant (result)
--Testcase 1736:
SELECT space(id), pi(), 4.1 FROM s3;
 space |        pi         | ?column? 
-------+-------------------+----------
       | 3.141592653589793 |      4.1
       | 3.141592653589793 |      4.1
       | 3.141592653589793 |      4.1
       | 3.141592653589793 |      4.1
       | 3.141592653589793 |      4.1
       | 3.141592653589793 |      4.1
(6 rows)

-- select space with order by (explain)
--Testcase 1737:
EXPLAIN VERBOSE
SELECT value1, space(id) FROM s3 ORDER BY value1, space(id);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=40)
   Output: value1, (space((id)::bigint))
   Sort Key: s3.value1, (space((s3.id)::bigint))
   ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=40)
         Output: value1, (space((id)::bigint))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, space(`id`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.space(id) FROM public.s31mysql
(12 rows)

-- select space with order by (result)
--Testcase 1738:
SELECT value1, space(id) FROM s3 ORDER BY value1, space(id);
 value1 | space 
--------+-------
    0.1 | 
    0.2 |  
    0.3 |   
    1.1 |    
    2.2 |     
    3.3 |      
(6 rows)

-- select space with order by index (result)
--Testcase 1739:
SELECT value1, space(id) FROM s3 ORDER BY 2,1;
 value1 | space 
--------+-------
    0.1 | 
    0.2 |  
    0.3 |   
    1.1 |    
    2.2 |     
    3.3 |      
(6 rows)

-- select space with order by index (result)
--Testcase 1740:
SELECT value1, space(id) FROM s3 ORDER BY 1,2;
 value1 | space 
--------+-------
    0.1 | 
    0.2 |  
    0.3 |   
    1.1 |    
    2.2 |     
    3.3 |      
(6 rows)

-- select space with group by (explain)
--Testcase 1741:
EXPLAIN VERBOSE
SELECT value1, space(id) FROM s3 GROUP BY value1, space(id) ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=40)
   Output: value1, (space((id)::bigint))
   Sort Key: s3.value1, (space((s3.id)::bigint))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=40)
         Output: value1, (space((id)::bigint))
         Group Key: s3.value1, (space((s3.id)::bigint))
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=40)
               Output: value1, (space((id)::bigint))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `value1`, space(`id`) FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT value1, public.space(id) FROM public.s31mysql
(15 rows)

-- select space with group by (result)
--Testcase 1742:
SELECT value1, space(id) FROM s3 GROUP BY value1, space(id) ORDER BY 1,2;
 value1 | space 
--------+-------
    0.1 | 
    0.2 |  
    0.3 |   
    1.1 |    
    2.2 |     
    3.3 |      
(6 rows)

-- select space with group by index (result)
--Testcase 1743:
SELECT value1, space(id) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | space 
--------+-------
    0.1 | 
    0.2 |  
    0.3 |   
    1.1 |    
    2.2 |     
    3.3 |      
(6 rows)

-- select space with group by having (explain)
--Testcase 1744:
EXPLAIN VERBOSE
SELECT count(value1), space(id) FROM s3 GROUP BY space(id), id HAVING space(id) IS NOT NULL ORDER BY 1,2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort  (cost=2309.89..2310.38 rows=199 width=44)
   Output: (count(value1)), (space((id)::bigint)), id
   Sort Key: (count(s3.value1)), (space((s3.id)::bigint))
   ->  HashAggregate  (cost=2199.54..2302.29 rows=199 width=44)
         Output: count(value1), (space((id)::bigint)), id
         Group Key: (space((s3.id)::bigint)), s3.id
         Filter: ((space((s3.id)::bigint)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2148.35 rows=6826 width=44)
               Output: (space((id)::bigint)), id, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT space(`id`), `id`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.space(id), id, value1 FROM public.s31mysql
(16 rows)

-- select space with group by having (result)
--Testcase 1745:
SELECT count(value1), space(id) FROM s3 GROUP BY space(id), id HAVING space(id) IS NOT NULL ORDER BY 1,2;
 count | space 
-------+-------
     1 | 
     1 |  
     1 |   
     1 |    
     1 |     
     1 |      
(6 rows)

-- select space with group by index having (result)
--Testcase 1746:
SELECT value1, space(id) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | space 
--------+-------
    1.1 |    
    2.2 |     
    3.3 |      
(3 rows)

--
-- test strcmp()
--
-- select strcmp (stub function, explain)
--Testcase 1747:
EXPLAIN VERBOSE
SELECT strcmp(str1, str2) FROM s3;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=4)
   Output: (strcmp(str1, str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT strcmp(`str1`, `str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.strcmp(str1, str2) FROM public.s31mysql
(7 rows)

-- select strcmp (stub function, result)
--Testcase 1748:
SELECT strcmp(str1, str2) FROM s3;
 strcmp 
--------
      1
      1
      1
      1
      1
      1
(6 rows)

-- select strcmp (stub function, not pushdown constraints, explain)
--Testcase 1749:
EXPLAIN VERBOSE
SELECT value1, strcmp(str1, str2) FROM s3 WHERE to_hex(value2) = '64';
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=12)
   Output: value1, (strcmp(str1, str2))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, strcmp(`str1`, `str2`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.strcmp(str1, str2), value2 FROM public.s31mysql
(8 rows)

-- select strcmp (stub function, not pushdown constraints, result)
--Testcase 1750:
SELECT value1, strcmp(str1, str2) FROM s3 WHERE to_hex(value2) = '64';
 value1 | strcmp 
--------+--------
    0.1 |      1
    0.2 |      1
    0.3 |      1
(3 rows)

-- select strcmp (stub function, pushdown constraints, explain)
--Testcase 1751:
EXPLAIN VERBOSE
SELECT value1, strcmp(str1, str2) FROM s3 WHERE value2 != 200;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=12)
   Output: value1, (strcmp(str1, str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, strcmp(`str1`, `str2`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.strcmp(str1, str2) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select strcmp (stub function, pushdown constraints, result)
--Testcase 1752:
SELECT value1, strcmp(str1, str2) FROM s3 WHERE value2 != 200;
 value1 | strcmp 
--------+--------
    0.1 |      1
    0.2 |      1
    0.3 |      1
(3 rows)

-- select strcmp with non pushdown func and explicit constant (explain)
--Testcase 1753:
EXPLAIN VERBOSE
SELECT strcmp(str1, str2), pi(), 4.1 FROM s3;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=44)
   Output: (strcmp(str1, str2)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT strcmp(`str1`, `str2`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.strcmp(str1, str2), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select strcmp with non pushdown func and explicit constant (result)
--Testcase 1754:
SELECT strcmp(str1, str2), pi(), 4.1 FROM s3;
 strcmp |        pi         | ?column? 
--------+-------------------+----------
      1 | 3.141592653589793 |      4.1
      1 | 3.141592653589793 |      4.1
      1 | 3.141592653589793 |      4.1
      1 | 3.141592653589793 |      4.1
      1 | 3.141592653589793 |      4.1
      1 | 3.141592653589793 |      4.1
(6 rows)

-- select strcmp with order by (explain)
--Testcase 1755:
EXPLAIN VERBOSE
SELECT value1, strcmp(str1, str2) FROM s3 ORDER BY value1, strcmp(str1, str2);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=12)
   Output: value1, (strcmp(str1, str2))
   Sort Key: s3.value1, (strcmp(s3.str1, s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=12)
         Output: value1, (strcmp(str1, str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, strcmp(`str1`, `str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.strcmp(str1, str2) FROM public.s31mysql
(12 rows)

-- select strcmp with order by (result)
--Testcase 1756:
SELECT value1, strcmp(str1, str2) FROM s3 ORDER BY value1, strcmp(str1, str2);
 value1 | strcmp 
--------+--------
    0.1 |      1
    0.2 |      1
    0.3 |      1
    1.1 |      1
    2.2 |      1
    3.3 |      1
(6 rows)

-- select strcmp with order by index (result)
--Testcase 1757:
SELECT value1, strcmp(str1, str2) FROM s3 ORDER BY 2,1;
 value1 | strcmp 
--------+--------
    0.1 |      1
    0.2 |      1
    0.3 |      1
    1.1 |      1
    2.2 |      1
    3.3 |      1
(6 rows)

-- select strcmp with order by index (result)
--Testcase 1758:
SELECT value1, strcmp(str1, str2) FROM s3 ORDER BY 1,2;
 value1 | strcmp 
--------+--------
    0.1 |      1
    0.2 |      1
    0.3 |      1
    1.1 |      1
    2.2 |      1
    3.3 |      1
(6 rows)

-- select strcmp with group by (explain)
--Testcase 1759:
EXPLAIN VERBOSE
SELECT count(value1), strcmp(str1, str2) FROM s3 GROUP BY strcmp(str1, str2) ORDER BY 1,2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=12)
   Output: (count(value1)), (strcmp(str1, str2))
   Sort Key: (count(s3.value1)), (strcmp(s3.str1, s3.str2))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
         Output: count(value1), (strcmp(str1, str2))
         Group Key: (strcmp(s3.str1, s3.str2))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (strcmp(str1, str2)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT strcmp(`str1`, `str2`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.strcmp(str1, str2), value1 FROM public.s31mysql
(15 rows)

-- select strcmp with group by (result)
--Testcase 1760:
SELECT count(value1), strcmp(str1, str2) FROM s3 GROUP BY strcmp(str1, str2) ORDER BY 1,2;
 count | strcmp 
-------+--------
     6 |      1
(1 row)

-- select strcmp with group by index (result)
--Testcase 1761:
SELECT value1, strcmp(str1, str2) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | strcmp 
--------+--------
    0.1 |      1
    0.2 |      1
    0.3 |      1
    1.1 |      1
    2.2 |      1
    3.3 |      1
(6 rows)

-- select strcmp with group by having (explain)
--Testcase 1762:
EXPLAIN VERBOSE
SELECT count(value1), strcmp(str1, str2) FROM s3 GROUP BY strcmp(str1, str2), str1, str2 HAVING strcmp(str1, str2) IS NOT NULL ORDER BY 1,2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=2308.89..2309.39 rows=199 width=76)
   Output: (count(value1)), (strcmp(str1, str2)), str1, str2
   Sort Key: (count(s3.value1)), (strcmp(s3.str1, s3.str2))
   ->  HashAggregate  (cost=2199.54..2301.29 rows=199 width=76)
         Output: count(value1), (strcmp(str1, str2)), str1, str2
         Group Key: (strcmp(s3.str1, s3.str2)), s3.str1, s3.str2
         Filter: ((strcmp(s3.str1, s3.str2)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=76)
               Output: (strcmp(str1, str2)), str1, str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT strcmp(`str1`, `str2`), `str1`, `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.strcmp(str1, str2), str1, str2, value1 FROM public.s31mysql
(16 rows)

-- select strcmp with group by having (result)
--Testcase 1763:
SELECT count(value1), strcmp(str1, str2) FROM s3 GROUP BY strcmp(str1, str2), str1, str2 HAVING strcmp(str1, str2) IS NOT NULL ORDER BY 1,2;
 count | strcmp 
-------+--------
     6 |      1
(1 row)

-- select strcmp with group by index having (result)
--Testcase 1764:
SELECT value1, strcmp(str1, str2) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | strcmp 
--------+--------
    1.1 |      1
    2.2 |      1
    3.3 |      1
(3 rows)

--
-- test substr()
--
-- select substr (stub function, explain)
--Testcase 1765:
EXPLAIN VERBOSE
SELECT substr(str1, 3), substr(str2, 3, 4) FROM s3;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (substr(str1, 3)), (substr(str2, 3, 4))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT substr(`str1`, 3), substr(`str2`, 3, 4) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT substr(str1, 3), substr(str2, 3, 4) FROM public.s31mysql
(7 rows)

-- select substr (stub function, result)
--Testcase 1766:
SELECT substr(str1, 3), substr(str2, 3, 4) FROM s3;
 substr  | substr 
---------+--------
 -XYZ--- |  XYZ
 -XYZ--- |  XYZ
 -XYZ--- |  XYZ
 -XYZ--- |  XYZ
 -XYZ--- |  XYZ
 -XYZ--- |  XYZ
(6 rows)

-- select substr (stub function, not pushdown constraints, explain)
--Testcase 1767:
EXPLAIN VERBOSE
SELECT value1, substr(str2, 3, 4) FROM s3 WHERE to_hex(value2) = '64';
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, (substr(str2, 3, 4))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, substr(`str2`, 3, 4), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, substr(str2, 3, 4), value2 FROM public.s31mysql
(8 rows)

-- select substr (stub function, not pushdown constraints, result)
--Testcase 1768:
SELECT value1, substr(str2, 3, 4) FROM s3 WHERE to_hex(value2) = '64';
 value1 | substr 
--------+--------
    0.1 |  XYZ
    0.2 |  XYZ
    0.3 |  XYZ
(3 rows)

-- select substr (stub function, pushdown constraints, explain)
--Testcase 1769:
EXPLAIN VERBOSE
SELECT value1, substr(str2, 3, 4) FROM s3 WHERE value2 != 200;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, (substr(str2, 3, 4))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, substr(`str2`, 3, 4) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, substr(str2, 3, 4) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select substr (stub function, pushdown constraints, result)
--Testcase 1770:
SELECT value1, substr(str2, 3, 4) FROM s3 WHERE value2 != 200;
 value1 | substr 
--------+--------
    0.1 |  XYZ
    0.2 |  XYZ
    0.3 |  XYZ
(3 rows)

-- select substr with non pushdown func and explicit constant (explain)
--Testcase 1771:
EXPLAIN VERBOSE
SELECT substr(str2, 3, 4), pi(), 4.1 FROM s3;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: (substr(str2, 3, 4)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT substr(`str2`, 3, 4), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT substr(str2, 3, 4), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select substr with non pushdown func and explicit constant (result)
--Testcase 1772:
SELECT substr(str2, 3, 4), pi(), 4.1 FROM s3;
 substr |        pi         | ?column? 
--------+-------------------+----------
  XYZ   | 3.141592653589793 |      4.1
  XYZ   | 3.141592653589793 |      4.1
  XYZ   | 3.141592653589793 |      4.1
  XYZ   | 3.141592653589793 |      4.1
  XYZ   | 3.141592653589793 |      4.1
  XYZ   | 3.141592653589793 |      4.1
(6 rows)

-- select substr with order by (explain)
--Testcase 1773:
EXPLAIN VERBOSE
SELECT value1, substr(str2, 3, 4) FROM s3 ORDER BY value1, substr(str2, 3, 4);
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (substr(str2, 3, 4))
   Sort Key: s3.value1, (substr(s3.str2, 3, 4))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, (substr(str2, 3, 4))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, substr(`str2`, 3, 4) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, substr(str2, 3, 4) FROM public.s31mysql
(12 rows)

-- select substr with order by (result)
--Testcase 1774:
SELECT value1, substr(str2, 3, 4) FROM s3 ORDER BY value1, substr(str2, 3, 4);
 value1 | substr 
--------+--------
    0.1 |  XYZ
    0.2 |  XYZ
    0.3 |  XYZ
    1.1 |  XYZ
    2.2 |  XYZ
    3.3 |  XYZ
(6 rows)

-- select substr with order by index (result)
--Testcase 1775:
SELECT value1, substr(str2, 3, 4) FROM s3 ORDER BY 2,1;
 value1 | substr 
--------+--------
    0.1 |  XYZ
    0.2 |  XYZ
    0.3 |  XYZ
    1.1 |  XYZ
    2.2 |  XYZ
    3.3 |  XYZ
(6 rows)

-- select substr with order by index (result)
--Testcase 1776:
SELECT value1, substr(str2, 3, 4) FROM s3 ORDER BY 1,2;
 value1 | substr 
--------+--------
    0.1 |  XYZ
    0.2 |  XYZ
    0.3 |  XYZ
    1.1 |  XYZ
    2.2 |  XYZ
    3.3 |  XYZ
(6 rows)

-- select substr with group by (explain)
--Testcase 1777:
EXPLAIN VERBOSE
SELECT count(value1), substr(str2, 3, 4) FROM s3 GROUP BY substr(str2, 3, 4) ORDER BY 1,2;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), (substr(str2, 3, 4))
   Sort Key: (count(s3.value1)), (substr(s3.str2, 3, 4))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), (substr(str2, 3, 4))
         Group Key: (substr(s3.str2, 3, 4))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: (substr(str2, 3, 4)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT substr(`str2`, 3, 4), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT substr(str2, 3, 4), value1 FROM public.s31mysql
(15 rows)

-- select substr with group by (result)
--Testcase 1778:
SELECT count(value1), substr(str2, 3, 4) FROM s3 GROUP BY substr(str2, 3, 4) ORDER BY 1,2;
 count | substr 
-------+--------
     6 |  XYZ
(1 row)

-- select substr with group by index (result)
--Testcase 1779:
SELECT value1, substr(str2, 3, 4) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | substr 
--------+--------
    0.1 |  XYZ
    0.2 |  XYZ
    0.3 |  XYZ
    1.1 |  XYZ
    2.2 |  XYZ
    3.3 |  XYZ
(6 rows)

-- select substr with group by having (explain)
--Testcase 1780:
EXPLAIN VERBOSE
SELECT count(value1), substr(str2, 3, 4) FROM s3 GROUP BY substr(str2, 3, 4), str2 HAVING substr(str2, 3, 4) IS NOT NULL ORDER BY 1,2;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=72)
   Output: (count(value1)), (substr(str2, 3, 4)), str2
   Sort Key: (count(s3.value1)), (substr(s3.str2, 3, 4))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=72)
         Output: count(value1), (substr(str2, 3, 4)), str2
         Group Key: (substr(s3.str2, 3, 4)), s3.str2
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=72)
               Output: (substr(str2, 3, 4)), str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT substr(`str2`, 3, 4), `str2`, `value1` FROM `test`.`s32` WHERE ((substr(`str2`, 3, 4) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT substr(str2, 3, 4), str2, value1 FROM public.s31mysql WHERE ((substr(str2, 3, 4) IS NOT NULL))
(15 rows)

-- select substr with group by having (result)
--Testcase 1781:
SELECT count(value1), substr(str2, 3, 4) FROM s3 GROUP BY substr(str2, 3, 4), str2 HAVING substr(str2, 3, 4) IS NOT NULL ORDER BY 1,2;
 count | substr 
-------+--------
     6 |  XYZ
(1 row)

-- select substr with group by index having (result)
--Testcase 1782:
SELECT value1, substr(str2, 3, 4) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | substr 
--------+--------
    1.1 |  XYZ
    2.2 |  XYZ
    3.3 |  XYZ
(3 rows)

--
-- test substring()
--
-- select substring (stub function, explain)
--Testcase 1783:
EXPLAIN VERBOSE
SELECT substring(str1, 3), substring(str2, 3, 4) FROM s3;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: ("substring"(str1, 3)), ("substring"(str2, 3, 4))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT substring(`str1`, 3), substring(`str2`, 3, 4) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT "substring"(str1, 3), "substring"(str2, 3, 4) FROM public.s31mysql
(7 rows)

-- select substring (stub function, result)
--Testcase 1784:
SELECT substring(str1, 3), substring(str2, 3, 4) FROM s3;
 substring | substring 
-----------+-----------
 -XYZ---   |  XYZ
 -XYZ---   |  XYZ
 -XYZ---   |  XYZ
 -XYZ---   |  XYZ
 -XYZ---   |  XYZ
 -XYZ---   |  XYZ
(6 rows)

-- select substring (stub function, explain)
--Testcase 1785:
EXPLAIN VERBOSE
SELECT substring(str1 FROM 3), substring(str2 FROM 3 FOR 4) FROM s3;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (SUBSTRING(str1 FROM 3)), (SUBSTRING(str2 FROM 3 FOR 4))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT substring(`str1`, 3), substring(`str2`, 3, 4) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT "substring"(str1, 3), "substring"(str2, 3, 4) FROM public.s31mysql
(7 rows)

-- select substring (stub function, result)
--Testcase 1786:
SELECT substring(str1 FROM 3), substring(str2 FROM 3 FOR 4) FROM s3;
 substring | substring 
-----------+-----------
 -XYZ---   |  XYZ
 -XYZ---   |  XYZ
 -XYZ---   |  XYZ
 -XYZ---   |  XYZ
 -XYZ---   |  XYZ
 -XYZ---   |  XYZ
(6 rows)

-- select substring (stub function, not pushdown constraints, explain)
--Testcase 1787:
EXPLAIN VERBOSE
SELECT value1, substring(str2, 3, 4) FROM s3 WHERE to_hex(value2) = '64';
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, ("substring"(str2, 3, 4))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, substring(`str2`, 3, 4), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, "substring"(str2, 3, 4), value2 FROM public.s31mysql
(8 rows)

-- select substring (stub function, not pushdown constraints, result)
--Testcase 1788:
SELECT value1, substring(str2, 3, 4) FROM s3 WHERE to_hex(value2) = '64';
 value1 | substring 
--------+-----------
    0.1 |  XYZ
    0.2 |  XYZ
    0.3 |  XYZ
(3 rows)

-- select substring (stub function, pushdown constraints, explain)
--Testcase 1789:
EXPLAIN VERBOSE
SELECT value1, substring(str2 FROM 3 FOR 4) FROM s3 WHERE value2 != 200;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, (SUBSTRING(str2 FROM 3 FOR 4))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, substring(`str2`, 3, 4) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, "substring"(str2, 3, 4) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select substring (stub function, pushdown constraints, result)
--Testcase 1790:
SELECT value1, substring(str2 FROM 3 FOR 4) FROM s3 WHERE value2 != 200;
 value1 | substring 
--------+-----------
    0.1 |  XYZ
    0.2 |  XYZ
    0.3 |  XYZ
(3 rows)

-- select substring with non pushdown func and explicit constant (explain)
--Testcase 1791:
EXPLAIN VERBOSE
SELECT substring(str2 FROM 3 FOR 4), pi(), 4.1 FROM s3;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: (SUBSTRING(str2 FROM 3 FOR 4)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT substring(`str2`, 3, 4), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT "substring"(str2, 3, 4), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select substring with non pushdown func and explicit constant (result)
--Testcase 1792:
SELECT substring(str2 FROM 3 FOR 4), pi(), 4.1 FROM s3;
 substring |        pi         | ?column? 
-----------+-------------------+----------
  XYZ      | 3.141592653589793 |      4.1
  XYZ      | 3.141592653589793 |      4.1
  XYZ      | 3.141592653589793 |      4.1
  XYZ      | 3.141592653589793 |      4.1
  XYZ      | 3.141592653589793 |      4.1
  XYZ      | 3.141592653589793 |      4.1
(6 rows)

-- select substring with order by (explain)
--Testcase 1793:
EXPLAIN VERBOSE
SELECT value1, substring(str2 FROM 3 FOR 4) FROM s3 ORDER BY value1, substring(str2 FROM 3 FOR 4);
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (SUBSTRING(str2 FROM 3 FOR 4))
   Sort Key: s3.value1, (SUBSTRING(s3.str2 FROM 3 FOR 4))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, (SUBSTRING(str2 FROM 3 FOR 4))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, substring(`str2`, 3, 4) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, "substring"(str2, 3, 4) FROM public.s31mysql
(12 rows)

-- select substring with order by (result)
--Testcase 1794:
SELECT value1, substring(str2 FROM 3 FOR 4) FROM s3 ORDER BY value1, substring(str2 FROM 3 FOR 4);
 value1 | substring 
--------+-----------
    0.1 |  XYZ
    0.2 |  XYZ
    0.3 |  XYZ
    1.1 |  XYZ
    2.2 |  XYZ
    3.3 |  XYZ
(6 rows)

-- select substring with order by index (result)
--Testcase 1795:
SELECT value1, substring(str2 FROM 3 FOR 4) FROM s3 ORDER BY 2,1;
 value1 | substring 
--------+-----------
    0.1 |  XYZ
    0.2 |  XYZ
    0.3 |  XYZ
    1.1 |  XYZ
    2.2 |  XYZ
    3.3 |  XYZ
(6 rows)

-- select substring with order by index (result)
--Testcase 1796:
SELECT value1, substring(str2 FROM 3 FOR 4) FROM s3 ORDER BY 1,2;
 value1 | substring 
--------+-----------
    0.1 |  XYZ
    0.2 |  XYZ
    0.3 |  XYZ
    1.1 |  XYZ
    2.2 |  XYZ
    3.3 |  XYZ
(6 rows)

-- select substring with group by (explain)
--Testcase 1797:
EXPLAIN VERBOSE
SELECT count(value1), substring(str2, 3, 4) FROM s3 GROUP BY substring(str2, 3, 4) ORDER BY 1,2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), ("substring"(str2, 3, 4))
   Sort Key: (count(s3.value1)), ("substring"(s3.str2, 3, 4))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), ("substring"(str2, 3, 4))
         Group Key: ("substring"(s3.str2, 3, 4))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: ("substring"(str2, 3, 4)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT substring(`str2`, 3, 4), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT "substring"(str2, 3, 4), value1 FROM public.s31mysql
(15 rows)

-- select substring with group by (result)
--Testcase 1798:
SELECT count(value1), substring(str2, 3, 4) FROM s3 GROUP BY substring(str2, 3, 4) ORDER BY 1,2;
 count | substring 
-------+-----------
     6 |  XYZ
(1 row)

-- select substring with group by index (result)
--Testcase 1799:
SELECT value1, substring(str2, 3, 4) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | substring 
--------+-----------
    0.1 |  XYZ
    0.2 |  XYZ
    0.3 |  XYZ
    1.1 |  XYZ
    2.2 |  XYZ
    3.3 |  XYZ
(6 rows)

-- select substring with group by having (explain)
--Testcase 1800:
EXPLAIN VERBOSE
SELECT count(value1), substring(str2, 3, 4) FROM s3 GROUP BY substring(str2, 3, 4), str2 HAVING substring(str2, 3, 4) IS NOT NULL ORDER BY 1,2;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=72)
   Output: (count(value1)), ("substring"(str2, 3, 4)), str2
   Sort Key: (count(s3.value1)), ("substring"(s3.str2, 3, 4))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=72)
         Output: count(value1), ("substring"(str2, 3, 4)), str2
         Group Key: ("substring"(s3.str2, 3, 4)), s3.str2
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=72)
               Output: ("substring"(str2, 3, 4)), str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT substring(`str2`, 3, 4), `str2`, `value1` FROM `test`.`s32` WHERE ((substring(`str2`, 3, 4) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT "substring"(str2, 3, 4), str2, value1 FROM public.s31mysql WHERE (("substring"(str2, 3, 4) IS NOT NULL))
(15 rows)

-- select substring with group by having (result)
--Testcase 1801:
SELECT count(value1), substring(str2, 3, 4) FROM s3 GROUP BY substring(str2, 3, 4), str2 HAVING substring(str2, 3, 4) IS NOT NULL ORDER BY 1,2;
 count | substring 
-------+-----------
     6 |  XYZ
(1 row)

-- select substring with group by index having (result)
--Testcase 1802:
SELECT value1, substring(str2, 3, 4) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | substring 
--------+-----------
    1.1 |  XYZ
    2.2 |  XYZ
    3.3 |  XYZ
(3 rows)

--
-- test substring_index()
--
-- select substring_index (stub function, explain)
--Testcase 1803:
EXPLAIN VERBOSE
SELECT substring_index(str1, '-', 5), substring_index(str1, '-', -5) FROM s3;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=64)
   Output: (substring_index(str1, '-'::text, '5'::bigint)), (substring_index(str1, '-'::text, '-5'::bigint))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT substring_index(`str1`, '-', 5), substring_index(`str1`, '-', (-5)) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.substring_index(str1, '-'::text, 5::bigint), public.substring_index(str1, '-'::text, (-5)::bigint) FROM public.s31mysql
(7 rows)

-- select substring_index (stub function, result)
--Testcase 1804:
SELECT substring_index(str1, '-', 5), substring_index(str1, '-', -5) FROM s3;
 substring_index | substring_index 
-----------------+-----------------
 ---XYZ-         | -XYZ---
 ---XYZ-         | -XYZ---
 ---XYZ-         | -XYZ---
 ---XYZ-         | -XYZ---
 ---XYZ-         | -XYZ---
 ---XYZ-         | -XYZ---
(6 rows)

-- select substring_index (stub function, not pushdown constraints, explain)
--Testcase 1805:
EXPLAIN VERBOSE
SELECT value1, substring_index(str1, '-', 5) FROM s3 WHERE to_hex(value2) = '64';
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (substring_index(str1, '-'::text, '5'::bigint))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, substring_index(`str1`, '-', 5), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.substring_index(str1, '-'::text, 5::bigint), value2 FROM public.s31mysql
(8 rows)

-- select substring_index (stub function, not pushdown constraints, result)
--Testcase 1806:
SELECT value1, substring_index(str1, '-', 5) FROM s3 WHERE to_hex(value2) = '64';
 value1 | substring_index 
--------+-----------------
    0.1 | ---XYZ-
    0.2 | ---XYZ-
    0.3 | ---XYZ-
(3 rows)

-- select substring_index (stub function, pushdown constraints, explain)
--Testcase 1807:
EXPLAIN VERBOSE
SELECT value1, substring_index(str1, '-', 5) FROM s3 WHERE value2 != 200;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (substring_index(str1, '-'::text, '5'::bigint))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, substring_index(`str1`, '-', 5) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.substring_index(str1, '-'::text, 5::bigint) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select substring_index (stub function, pushdown constraints, result)
--Testcase 1808:
SELECT value1, substring_index(str1, '-', 5) FROM s3 WHERE value2 != 200;
 value1 | substring_index 
--------+-----------------
    0.1 | ---XYZ-
    0.2 | ---XYZ-
    0.3 | ---XYZ-
(3 rows)

-- select substring_index with non pushdown func and explicit constant (explain)
--Testcase 1809:
EXPLAIN VERBOSE
SELECT substring_index(str1, '-', 5), pi(), 4.1 FROM s3;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (substring_index(str1, '-'::text, '5'::bigint)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT substring_index(`str1`, '-', 5), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.substring_index(str1, '-'::text, 5::bigint), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select substring_index with non pushdown func and explicit constant (result)
--Testcase 1810:
SELECT substring_index(str1, '-', 5), pi(), 4.1 FROM s3;
 substring_index |        pi         | ?column? 
-----------------+-------------------+----------
 ---XYZ-         | 3.141592653589793 |      4.1
 ---XYZ-         | 3.141592653589793 |      4.1
 ---XYZ-         | 3.141592653589793 |      4.1
 ---XYZ-         | 3.141592653589793 |      4.1
 ---XYZ-         | 3.141592653589793 |      4.1
 ---XYZ-         | 3.141592653589793 |      4.1
(6 rows)

-- select substring_index with order by (explain)
--Testcase 1811:
EXPLAIN VERBOSE
SELECT value1, substring_index(str1, '-', 5) FROM s3 ORDER BY value1, substring_index(str1, '-', 5);
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (substring_index(str1, '-'::text, '5'::bigint))
   Sort Key: s3.value1, (substring_index(s3.str1, '-'::text, '5'::bigint))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (substring_index(str1, '-'::text, '5'::bigint))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, substring_index(`str1`, '-', 5) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.substring_index(str1, '-'::text, 5::bigint) FROM public.s31mysql
(12 rows)

-- select substring_index with order by (result)
--Testcase 1812:
SELECT value1, substring_index(str1, '-', 5) FROM s3 ORDER BY value1, substring_index(str1, '-', 5);
 value1 | substring_index 
--------+-----------------
    0.1 | ---XYZ-
    0.2 | ---XYZ-
    0.3 | ---XYZ-
    1.1 | ---XYZ-
    2.2 | ---XYZ-
    3.3 | ---XYZ-
(6 rows)

-- select substring_index with order by index (result)
--Testcase 1813:
SELECT value1, substring_index(str1, '-', 5) FROM s3 ORDER BY 2,1;
 value1 | substring_index 
--------+-----------------
    0.1 | ---XYZ-
    0.2 | ---XYZ-
    0.3 | ---XYZ-
    1.1 | ---XYZ-
    2.2 | ---XYZ-
    3.3 | ---XYZ-
(6 rows)

-- select substring_index with order by index (result)
--Testcase 1814:
SELECT value1, substring_index(str1, '-', 5) FROM s3 ORDER BY 1,2;
 value1 | substring_index 
--------+-----------------
    0.1 | ---XYZ-
    0.2 | ---XYZ-
    0.3 | ---XYZ-
    1.1 | ---XYZ-
    2.2 | ---XYZ-
    3.3 | ---XYZ-
(6 rows)

-- select substring_index with group by (explain)
--Testcase 1815:
EXPLAIN VERBOSE
SELECT count(value1), substring_index(str1, '-', 5) FROM s3 GROUP BY substring_index(str1, '-', 5) ORDER BY 1,2;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (substring_index(str1, '-'::text, '5'::bigint))
   Sort Key: (count(s3.value1)), (substring_index(s3.str1, '-'::text, '5'::bigint))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (substring_index(str1, '-'::text, '5'::bigint))
         Group Key: (substring_index(s3.str1, '-'::text, '5'::bigint))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (substring_index(str1, '-'::text, '5'::bigint)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT substring_index(`str1`, '-', 5), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.substring_index(str1, '-'::text, 5::bigint), value1 FROM public.s31mysql
(15 rows)

-- select substring_index with group by (result)
--Testcase 1816:
SELECT count(value1), substring_index(str1, '-', 5) FROM s3 GROUP BY substring_index(str1, '-', 5) ORDER BY 1,2;
 count | substring_index 
-------+-----------------
     6 | ---XYZ-
(1 row)

-- select substring_index with group by index (result)
--Testcase 1817:
SELECT value1, substring_index(str1, '-', 5) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | substring_index 
--------+-----------------
    0.1 | ---XYZ-
    0.2 | ---XYZ-
    0.3 | ---XYZ-
    1.1 | ---XYZ-
    2.2 | ---XYZ-
    3.3 | ---XYZ-
(6 rows)

-- select substring_index with group by having (explain)
--Testcase 1818:
EXPLAIN VERBOSE
SELECT count(value1), substring_index(str1, '-', 5) FROM s3 GROUP BY substring_index(str1, '-', 5), str1 HAVING substring_index(str1, '-', 5) IS NOT NULL ORDER BY 1,2;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=72)
   Output: (count(value1)), (substring_index(str1, '-'::text, '5'::bigint)), str1
   Sort Key: (count(s3.value1)), (substring_index(s3.str1, '-'::text, '5'::bigint))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=72)
         Output: count(value1), (substring_index(str1, '-'::text, '5'::bigint)), str1
         Group Key: (substring_index(s3.str1, '-'::text, '5'::bigint)), s3.str1
         Filter: ((substring_index(s3.str1, '-'::text, '5'::bigint)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
               Output: (substring_index(str1, '-'::text, '5'::bigint)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT substring_index(`str1`, '-', 5), `str1`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.substring_index(str1, '-'::text, 5::bigint), str1, value1 FROM public.s31mysql
(16 rows)

-- select substring_index with group by having (result)
--Testcase 1819:
SELECT count(value1), substring_index(str1, '-', 5) FROM s3 GROUP BY substring_index(str1, '-', 5), str1 HAVING substring_index(str1, '-', 5) IS NOT NULL ORDER BY 1,2;
 count | substring_index 
-------+-----------------
     6 | ---XYZ-
(1 row)

-- select substring_index with group by index having (result)
--Testcase 1820:
SELECT value1, substring_index(str1, '-', 5) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | substring_index 
--------+-----------------
    1.1 | ---XYZ-
    2.2 | ---XYZ-
    3.3 | ---XYZ-
(3 rows)

--
-- test to_base64()
--
-- select to_base64 (stub function, explain)
--Testcase 1821:
EXPLAIN VERBOSE
SELECT id, to_base64(tag1), to_base64(str1), to_base64(str2) FROM s3 ORDER BY 1,2,3,4;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5978.99..5996.05 rows=6826 width=100)
   Output: id, (to_base64(tag1)), (to_base64(str1)), (to_base64(str2))
   Sort Key: s3.id, (to_base64(s3.tag1)), (to_base64(s3.str1)), (to_base64(s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..5544.28 rows=6826 width=100)
         Output: id, (to_base64(tag1)), (to_base64(str1)), (to_base64(str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, to_base64(`tag1`), to_base64(`str1`), to_base64(`str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.to_base64(tag1), public.to_base64(str1), public.to_base64(str2) FROM public.s31mysql
(12 rows)

-- select to_base64 (stub function, result)
--Testcase 1822:
SELECT id, to_base64(tag1), to_base64(str1), to_base64(str2) FROM s3 ORDER BY 1,2,3,4;
 id | to_base64 |  to_base64   |  to_base64   
----+-----------+--------------+--------------
  0 | YQ==      | LS0tWFlaLS0t | ICAgWFlaICAg
  1 | YQ==      | LS0tWFlaLS0t | ICAgWFlaICAg
  2 | YQ==      | LS0tWFlaLS0t | ICAgWFlaICAg
  3 | Yg==      | LS0tWFlaLS0t | ICAgWFlaICAg
  4 | Yg==      | LS0tWFlaLS0t | ICAgWFlaICAg
  5 | Yg==      | LS0tWFlaLS0t | ICAgWFlaICAg
(6 rows)

-- select to_base64 (stub function, not pushdown constraints, explain)
--Testcase 1823:
EXPLAIN VERBOSE
SELECT value1, to_base64(str1) FROM s3 WHERE to_hex(value2) = '64';
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (to_base64(str1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, to_base64(`str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.to_base64(str1), value2 FROM public.s31mysql
(8 rows)

-- select to_base64 (stub function, not pushdown constraints, result)
--Testcase 1824:
SELECT value1, to_base64(str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 |  to_base64   
--------+--------------
    0.1 | LS0tWFlaLS0t
    0.2 | LS0tWFlaLS0t
    0.3 | LS0tWFlaLS0t
(3 rows)

-- select to_base64 (stub function, pushdown constraints, explain)
--Testcase 1825:
EXPLAIN VERBOSE
SELECT value1, to_base64(str1) FROM s3 WHERE value2 != 200;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (to_base64(str1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, to_base64(`str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.to_base64(str1) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select to_base64 (stub function, pushdown constraints, result)
--Testcase 1826:
SELECT value1, to_base64(str1) FROM s3 WHERE value2 != 200;
 value1 |  to_base64   
--------+--------------
    0.1 | LS0tWFlaLS0t
    0.2 | LS0tWFlaLS0t
    0.3 | LS0tWFlaLS0t
(3 rows)

-- select to_base64 with non pushdown func and explicit constant (explain)
--Testcase 1827:
EXPLAIN VERBOSE
SELECT to_base64(str1), pi(), 4.1 FROM s3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (to_base64(str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT to_base64(`str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.to_base64(str1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select to_base64 with non pushdown func and explicit constant (result)
--Testcase 1828:
SELECT to_base64(str1), pi(), 4.1 FROM s3;
  to_base64   |        pi         | ?column? 
--------------+-------------------+----------
 LS0tWFlaLS0t | 3.141592653589793 |      4.1
 LS0tWFlaLS0t | 3.141592653589793 |      4.1
 LS0tWFlaLS0t | 3.141592653589793 |      4.1
 LS0tWFlaLS0t | 3.141592653589793 |      4.1
 LS0tWFlaLS0t | 3.141592653589793 |      4.1
 LS0tWFlaLS0t | 3.141592653589793 |      4.1
(6 rows)

-- select to_base64 with order by (explain)
--Testcase 1829:
EXPLAIN VERBOSE
SELECT value1, to_base64(str1) FROM s3 ORDER BY value1, to_base64(str1);
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (to_base64(str1))
   Sort Key: s3.value1, (to_base64(s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (to_base64(str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, to_base64(`str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.to_base64(str1) FROM public.s31mysql
(12 rows)

-- select to_base64 with order by (result)
--Testcase 1830:
SELECT value1, to_base64(str1) FROM s3 ORDER BY value1, to_base64(str1);
 value1 |  to_base64   
--------+--------------
    0.1 | LS0tWFlaLS0t
    0.2 | LS0tWFlaLS0t
    0.3 | LS0tWFlaLS0t
    1.1 | LS0tWFlaLS0t
    2.2 | LS0tWFlaLS0t
    3.3 | LS0tWFlaLS0t
(6 rows)

-- select to_base64 with order by index (result)
--Testcase 1831:
SELECT value1, to_base64(str1) FROM s3 ORDER BY 2,1;
 value1 |  to_base64   
--------+--------------
    0.1 | LS0tWFlaLS0t
    0.2 | LS0tWFlaLS0t
    0.3 | LS0tWFlaLS0t
    1.1 | LS0tWFlaLS0t
    2.2 | LS0tWFlaLS0t
    3.3 | LS0tWFlaLS0t
(6 rows)

-- select to_base64 with order by index (result)
--Testcase 1832:
SELECT value1, to_base64(str1) FROM s3 ORDER BY 2,1;
 value1 |  to_base64   
--------+--------------
    0.1 | LS0tWFlaLS0t
    0.2 | LS0tWFlaLS0t
    0.3 | LS0tWFlaLS0t
    1.1 | LS0tWFlaLS0t
    2.2 | LS0tWFlaLS0t
    3.3 | LS0tWFlaLS0t
(6 rows)

-- select to_base64 with group by (explain)
--Testcase 1833:
EXPLAIN VERBOSE
SELECT count(value1), to_base64(str1) FROM s3 GROUP BY to_base64(str1) ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (to_base64(str1))
   Sort Key: (count(s3.value1)), (to_base64(s3.str1))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (to_base64(str1))
         Group Key: (to_base64(s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (to_base64(str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT to_base64(`str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.to_base64(str1), value1 FROM public.s31mysql
(15 rows)

-- select to_base64 with group by (result)
--Testcase 1834:
SELECT count(value1), to_base64(str1) FROM s3 GROUP BY to_base64(str1) ORDER BY 1,2;
 count |  to_base64   
-------+--------------
     6 | LS0tWFlaLS0t
(1 row)

-- select to_base64 with group by index (result)
--Testcase 1835:
SELECT value1, to_base64(str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |  to_base64   
--------+--------------
    0.1 | LS0tWFlaLS0t
    0.2 | LS0tWFlaLS0t
    0.3 | LS0tWFlaLS0t
    1.1 | LS0tWFlaLS0t
    2.2 | LS0tWFlaLS0t
    3.3 | LS0tWFlaLS0t
(6 rows)

-- select to_base64 with group by having (explain)
--Testcase 1836:
EXPLAIN VERBOSE
SELECT count(value1), to_base64(str1) FROM s3 GROUP BY to_base64(str1), str1 HAVING to_base64(str1) IS NOT NULL ORDER BY 1,2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=72)
   Output: (count(value1)), (to_base64(str1)), str1
   Sort Key: (count(s3.value1)), (to_base64(s3.str1))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=72)
         Output: count(value1), (to_base64(str1)), str1
         Group Key: (to_base64(s3.str1)), s3.str1
         Filter: ((to_base64(s3.str1)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
               Output: (to_base64(str1)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT to_base64(`str1`), `str1`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.to_base64(str1), str1, value1 FROM public.s31mysql
(16 rows)

-- select to_base64 with group by having (result)
--Testcase 1837:
SELECT count(value1), to_base64(str1) FROM s3 GROUP BY to_base64(str1), str1 HAVING to_base64(str1) IS NOT NULL ORDER BY 1,2;
 count |  to_base64   
-------+--------------
     6 | LS0tWFlaLS0t
(1 row)

-- select to_base64 with group by index having (result)
--Testcase 1838:
SELECT value1, to_base64(str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |  to_base64   
--------+--------------
    1.1 | LS0tWFlaLS0t
    2.2 | LS0tWFlaLS0t
    3.3 | LS0tWFlaLS0t
(3 rows)

--
-- test trim()
--
-- select trim (stub function, explain)
--Testcase 1839:
EXPLAIN VERBOSE
SELECT trim(str1), trim(str2) FROM s3;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (TRIM(BOTH FROM str1)), (TRIM(BOTH FROM str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT trim(`str1`), trim(`str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT btrim(str1), btrim(str2) FROM public.s31mysql
(7 rows)

-- select trim (stub function, result)
--Testcase 1840:
SELECT trim(str1), trim(str2) FROM s3;
   btrim   | btrim 
-----------+-------
 ---XYZ--- | XYZ
 ---XYZ--- | XYZ
 ---XYZ--- | XYZ
 ---XYZ--- | XYZ
 ---XYZ--- | XYZ
 ---XYZ--- | XYZ
(6 rows)

-- select trim (stub function, explain)
--Testcase 1841:
EXPLAIN VERBOSE
SELECT trim(LEADING '-' FROM str1), trim(LEADING ' ' FROM str2) FROM s3;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (TRIM(LEADING '-'::text FROM str1)), (TRIM(LEADING ' '::text FROM str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT trim(LEADING '-' FROM `str1`), trim(LEADING ' ' FROM `str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ltrim(str1, '-'::text), ltrim(str2, ' '::text) FROM public.s31mysql
(7 rows)

-- select trim (stub function, result)
--Testcase 1842:
SELECT trim(LEADING '-' FROM str1), trim(LEADING ' ' FROM str2) FROM s3;
 ltrim  | ltrim  
--------+--------
 XYZ--- | XYZ   
 XYZ--- | XYZ   
 XYZ--- | XYZ   
 XYZ--- | XYZ   
 XYZ--- | XYZ   
 XYZ--- | XYZ   
(6 rows)

-- select trim (stub function, explain)
--Testcase 1843:
EXPLAIN VERBOSE
SELECT trim(BOTH '-' FROM str1), trim(BOTH ' ' FROM str2) FROM s3;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (TRIM(BOTH '-'::text FROM str1)), (TRIM(BOTH ' '::text FROM str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT trim(BOTH '-' FROM `str1`), trim(BOTH ' ' FROM `str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT btrim(str1, '-'::text), btrim(str2, ' '::text) FROM public.s31mysql
(7 rows)

-- select trim (stub function, result)
--Testcase 1844:
SELECT trim(BOTH '-' FROM str1), trim(BOTH ' ' FROM str2) FROM s3;
 btrim | btrim 
-------+-------
 XYZ   | XYZ
 XYZ   | XYZ
 XYZ   | XYZ
 XYZ   | XYZ
 XYZ   | XYZ
 XYZ   | XYZ
(6 rows)

-- select trim (stub function, explain)
--Testcase 1845:
EXPLAIN VERBOSE
SELECT trim(TRAILING '-' FROM str1), trim(TRAILING ' ' FROM str2) FROM s3;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (TRIM(TRAILING '-'::text FROM str1)), (TRIM(TRAILING ' '::text FROM str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT trim(TRAILING '-' FROM `str1`), trim(TRAILING ' ' FROM `str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT rtrim(str1, '-'::text), rtrim(str2, ' '::text) FROM public.s31mysql
(7 rows)

-- select trim (stub function, result)
--Testcase 1846:
SELECT trim(TRAILING '-' FROM str1), trim(TRAILING ' ' FROM str2) FROM s3;
 rtrim  | rtrim  
--------+--------
 ---XYZ |    XYZ
 ---XYZ |    XYZ
 ---XYZ |    XYZ
 ---XYZ |    XYZ
 ---XYZ |    XYZ
 ---XYZ |    XYZ
(6 rows)

-- select trim (stub function, explain)
--Testcase 1847:
EXPLAIN VERBOSE
SELECT trim('-' FROM str1), trim(' ' FROM str2) FROM s3;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.91 rows=6826 width=64)
   Output: (TRIM(BOTH '-'::text FROM str1)), (TRIM(BOTH ' '::text FROM str2))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT trim(BOTH '-' FROM `str1`), trim(BOTH ' ' FROM `str2`) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT btrim(str1, '-'::text), btrim(str2, ' '::text) FROM public.s31mysql
(7 rows)

-- select trim (stub function, result)
--Testcase 1848:
SELECT trim('-' FROM str1), trim(' ' FROM str2) FROM s3;
 btrim | btrim 
-------+-------
 XYZ   | XYZ
 XYZ   | XYZ
 XYZ   | XYZ
 XYZ   | XYZ
 XYZ   | XYZ
 XYZ   | XYZ
(6 rows)

-- select trim (stub function, not pushdown constraints, explain)
--Testcase 1849:
EXPLAIN VERBOSE
SELECT value1, trim('-' FROM str1) FROM s3 WHERE to_hex(value2) = '64';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, (TRIM(BOTH '-'::text FROM str1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, trim(BOTH '-' FROM `str1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, btrim(str1, '-'::text), value2 FROM public.s31mysql
(8 rows)

-- select trim (stub function, not pushdown constraints, result)
--Testcase 1850:
SELECT value1, trim('-' FROM str1) FROM s3 WHERE to_hex(value2) = '64';
 value1 | btrim 
--------+-------
    0.1 | XYZ
    0.2 | XYZ
    0.3 | XYZ
(3 rows)

-- select trim (stub function, pushdown constraints, explain)
--Testcase 1851:
EXPLAIN VERBOSE
SELECT value1, trim(TRAILING '-' FROM str1) FROM s3 WHERE value2 != 200;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, (TRIM(TRAILING '-'::text FROM str1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, trim(TRAILING '-' FROM `str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, rtrim(str1, '-'::text) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select trim (stub function, pushdown constraints, result)
--Testcase 1852:
SELECT value1, trim(TRAILING '-' FROM str1) FROM s3 WHERE value2 != 200;
 value1 | rtrim  
--------+--------
    0.1 | ---XYZ
    0.2 | ---XYZ
    0.3 | ---XYZ
(3 rows)

-- select trim with non pushdown func and explicit constant (explain)
--Testcase 1853:
EXPLAIN VERBOSE
SELECT trim(TRAILING '-' FROM str1), pi(), 4.1 FROM s3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: (TRIM(TRAILING '-'::text FROM str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT trim(TRAILING '-' FROM `str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT rtrim(str1, '-'::text), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select trim with non pushdown func and explicit constant (result)
--Testcase 1854:
SELECT trim(TRAILING '-' FROM str1), pi(), 4.1 FROM s3;
 rtrim  |        pi         | ?column? 
--------+-------------------+----------
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
(6 rows)

-- select trim with order by (explain)
--Testcase 1855:
EXPLAIN VERBOSE
SELECT value1, trim(TRAILING '-' FROM str1) FROM s3 ORDER BY value1, trim(TRAILING '-' FROM str1);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (TRIM(TRAILING '-'::text FROM str1))
   Sort Key: s3.value1, (TRIM(TRAILING '-'::text FROM s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, (TRIM(TRAILING '-'::text FROM str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, trim(TRAILING '-' FROM `str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, rtrim(str1, '-'::text) FROM public.s31mysql
(12 rows)

-- select trim with order by (result)
--Testcase 1856:
SELECT value1, trim(TRAILING '-' FROM str1) FROM s3 ORDER BY value1, trim(TRAILING '-' FROM str1);
 value1 | rtrim  
--------+--------
    0.1 | ---XYZ
    0.2 | ---XYZ
    0.3 | ---XYZ
    1.1 | ---XYZ
    2.2 | ---XYZ
    3.3 | ---XYZ
(6 rows)

-- select trim with order by index (result)
--Testcase 1857:
SELECT value1, trim('-' FROM str1) FROM s3 ORDER BY 2,1;
 value1 | btrim 
--------+-------
    0.1 | XYZ
    0.2 | XYZ
    0.3 | XYZ
    1.1 | XYZ
    2.2 | XYZ
    3.3 | XYZ
(6 rows)

-- select trim with order by index (result)
--Testcase 1858:
SELECT value1, trim('-' FROM str1) FROM s3 ORDER BY 1,2;
 value1 | btrim 
--------+-------
    0.1 | XYZ
    0.2 | XYZ
    0.3 | XYZ
    1.1 | XYZ
    2.2 | XYZ
    3.3 | XYZ
(6 rows)

-- select trim with group by (explain)
--Testcase 1859:
EXPLAIN VERBOSE
SELECT count(value1), trim('-' FROM str1) FROM s3 GROUP BY trim('-' FROM str1) ORDER BY 1,2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=174.17..174.18 rows=1 width=40)
   Output: (count(value1)), (TRIM(BOTH '-'::text FROM str1))
   Sort Key: (count(s3.value1)), (TRIM(BOTH '-'::text FROM s3.str1))
   ->  Foreign Scan  (cost=118.53..174.16 rows=1 width=40)
         Output: (count(value1)), (TRIM(BOTH '-'::text FROM str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.s3__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT count(`value1`), trim(BOTH '-' FROM `str1`) FROM `test`.`s32` GROUP BY 2
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT count(value1), btrim(str1, '-'::text) FROM public.s31mysql GROUP BY 2
(16 rows)

-- select trim with group by (result)
--Testcase 1860:
SELECT count(value1), trim('-' FROM str1) FROM s3 GROUP BY trim('-' FROM str1) ORDER BY 1,2;
 count | btrim 
-------+-------
     6 | XYZ
(1 row)

-- select trim with group by index (result)
--Testcase 1861:
SELECT value1, trim('-' FROM str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | btrim 
--------+-------
    0.1 | XYZ
    0.2 | XYZ
    0.3 | XYZ
    1.1 | XYZ
    2.2 | XYZ
    3.3 | XYZ
(6 rows)

-- select trim with group by having (explain)
--Testcase 1862:
EXPLAIN VERBOSE
SELECT count(value1), trim('-' FROM str1) FROM s3 GROUP BY trim('-' FROM str1) , str1 HAVING trim('-' FROM str1) IS NOT NULL ORDER BY 1,2;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=191.15..191.16 rows=1 width=72)
   Output: (count(value1)), (TRIM(BOTH '-'::text FROM str1)), str1
   Sort Key: (count(s3.value1)), (TRIM(BOTH '-'::text FROM s3.str1))
   ->  Foreign Scan  (cost=126.98..191.14 rows=1 width=72)
         Output: (count(value1)), (TRIM(BOTH '-'::text FROM str1)), str1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.s3__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT count(`value1`), trim(BOTH '-' FROM `str1`), `str1` FROM `test`.`s32` WHERE ((trim(BOTH '-' FROM `str1`) IS NOT NULL)) GROUP BY 2, 3
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT count(value1), btrim(str1, '-'::text), str1 FROM public.s31mysql WHERE ((btrim(str1, '-'::text) IS NOT NULL)) GROUP BY 2, 3
(16 rows)

-- select trim with group by having (result)
--Testcase 1863:
SELECT count(value1), trim('-' FROM str1) FROM s3 GROUP BY trim('-' FROM str1) , str1 HAVING trim('-' FROM str1) IS NOT NULL ORDER BY 1,2;
 count | btrim 
-------+-------
     6 | XYZ
(1 row)

-- select trim with group by index having (result)
--Testcase 1864:
SELECT value1, trim('-' FROM str1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | btrim 
--------+-------
    1.1 | XYZ
    2.2 | XYZ
    3.3 | XYZ
(3 rows)

--
-- test ucase()
--
-- select ucase (stub function, explain)
--Testcase 1865:
EXPLAIN VERBOSE
SELECT ucase(tag1) FROM s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=32)
   Output: (ucase(tag1))
   Sort Key: (ucase(s3.tag1))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
         Output: (ucase(tag1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ucase(`tag1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.ucase(tag1) FROM public.s31mysql
(12 rows)

-- select ucase (stub function, result)
--Testcase 1866:
SELECT ucase(tag1) FROM s3 ORDER BY 1;
 ucase 
-------
 A
 A
 A
 B
 B
 B
(6 rows)

-- select ucase (stub function, not pushdown constraints, explain)
--Testcase 1867:
EXPLAIN VERBOSE
SELECT value1, ucase(tag1) FROM s3 WHERE to_hex(value2) = '64';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (ucase(tag1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, ucase(`tag1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.ucase(tag1), value2 FROM public.s31mysql
(8 rows)

-- select ucase (stub function, not pushdown constraints, result)
--Testcase 1868:
SELECT value1, ucase(tag1) FROM s3 WHERE to_hex(value2) = '64';
 value1 | ucase 
--------+-------
    0.1 | A
    0.2 | A
    0.3 | A
(3 rows)

-- select ucase (stub function, pushdown constraints, explain)
--Testcase 1869:
EXPLAIN VERBOSE
SELECT value1, ucase(tag1) FROM s3 WHERE value2 != 200;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (ucase(tag1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, ucase(`tag1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.ucase(tag1) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select ucase (stub function, pushdown constraints, result)
--Testcase 1870:
SELECT value1, ucase(tag1) FROM s3 WHERE value2 != 200;
 value1 | ucase 
--------+-------
    0.1 | A
    0.2 | A
    0.3 | A
(3 rows)

-- select ucase with non pushdown func and explicit constant (explain)
--Testcase 1871:
EXPLAIN VERBOSE
SELECT ucase(tag1), pi(), 4.1 FROM s3 ORDER BY 1;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=72)
   Output: (ucase(tag1)), '3.141592653589793'::double precision, 4.1
   Sort Key: (ucase(s3.tag1))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
         Output: (ucase(tag1)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT ucase(`tag1`), 3.141592653589793, 4.1 FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.ucase(tag1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(12 rows)

-- select ucase with non pushdown func and explicit constant (result)
--Testcase 1872:
SELECT ucase(tag1), pi(), 4.1 FROM s3 ORDER BY 1;
 ucase |        pi         | ?column? 
-------+-------------------+----------
 A     | 3.141592653589793 |      4.1
 A     | 3.141592653589793 |      4.1
 A     | 3.141592653589793 |      4.1
 B     | 3.141592653589793 |      4.1
 B     | 3.141592653589793 |      4.1
 B     | 3.141592653589793 |      4.1
(6 rows)

-- select ucase with order by (explain)
--Testcase 1873:
EXPLAIN VERBOSE
SELECT value1, ucase(tag1) FROM s3 ORDER BY ucase(tag1);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (ucase(tag1))
   Sort Key: (ucase(s3.tag1))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (ucase(tag1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, ucase(`tag1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.ucase(tag1) FROM public.s31mysql
(12 rows)

-- select ucase with order by (result)
--Testcase 1874:
SELECT value1, ucase(tag1) FROM s3 ORDER BY ucase(tag1);
 value1 | ucase 
--------+-------
    0.1 | A
    0.2 | A
    0.3 | A
    1.1 | B
    2.2 | B
    3.3 | B
(6 rows)

-- select ucase with order by index (result)
--Testcase 1875:
SELECT value1, ucase(tag1) FROM s3 ORDER BY 2,1;
 value1 | ucase 
--------+-------
    0.1 | A
    0.2 | A
    0.3 | A
    1.1 | B
    2.2 | B
    3.3 | B
(6 rows)

-- select ucase with order by index (result)
--Testcase 1876:
SELECT value1, ucase(tag1) FROM s3 ORDER BY 1,2;
 value1 | ucase 
--------+-------
    0.1 | A
    0.2 | A
    0.3 | A
    1.1 | B
    2.2 | B
    3.3 | B
(6 rows)

-- select ucase with group by (explain)
--Testcase 1877:
EXPLAIN VERBOSE
SELECT count(value1), ucase(tag1) FROM s3 GROUP BY ucase(tag1) ORDER BY 1,2;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (ucase(tag1))
   Sort Key: (count(s3.value1)), (ucase(s3.tag1))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (ucase(tag1))
         Group Key: (ucase(s3.tag1))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (ucase(tag1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT ucase(`tag1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.ucase(tag1), value1 FROM public.s31mysql
(15 rows)

-- select ucase with group by (result)
--Testcase 1878:
SELECT count(value1), ucase(tag1) FROM s3 GROUP BY ucase(tag1) ORDER BY 1,2;
 count | ucase 
-------+-------
     3 | A
     3 | B
(2 rows)

-- select ucase with group by index (result)
--Testcase 1879:
SELECT value1, ucase(tag1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 | ucase 
--------+-------
    0.1 | A
    0.2 | A
    0.3 | A
    1.1 | B
    2.2 | B
    3.3 | B
(6 rows)

-- select ucase with group by having (explain)
--Testcase 1880:
EXPLAIN VERBOSE
SELECT count(value1), ucase(tag1) FROM s3 GROUP BY ucase(tag1), tag1 HAVING ucase(tag1) IS NOT NULL ORDER BY 1,2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=72)
   Output: (count(value1)), (ucase(tag1)), tag1
   Sort Key: (count(s3.value1)), (ucase(s3.tag1))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=72)
         Output: count(value1), (ucase(tag1)), tag1
         Group Key: (ucase(s3.tag1)), s3.tag1
         Filter: ((ucase(s3.tag1)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
               Output: (ucase(tag1)), tag1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT ucase(`tag1`), `tag1`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.ucase(tag1), tag1, value1 FROM public.s31mysql
(16 rows)

-- select ucase with group by having (result)
--Testcase 1881:
SELECT count(value1), ucase(tag1) FROM s3 GROUP BY ucase(tag1), tag1 HAVING ucase(tag1) IS NOT NULL ORDER BY 1,2;
 count | ucase 
-------+-------
     3 | A
     3 | B
(2 rows)

-- select ucase with group by index having (result)
--Testcase 1882:
SELECT value1, ucase(tag1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | ucase 
--------+-------
    1.1 | B
    2.2 | B
    3.3 | B
(3 rows)

--
-- test unhex()
--
-- select unhex (stub function, explain)
--Testcase 1883:
EXPLAIN VERBOSE
SELECT unhex(hex(str1)), unhex(hex(str2)) FROM s3;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..7250.78 rows=6826 width=64)
   Output: (unhex(hex(str1))), (unhex(hex(str2)))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT unhex(hex(`str1`)), unhex(hex(`str2`)) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.unhex(public.hex(str1)), public.unhex(public.hex(str2)) FROM public.s31mysql
(7 rows)

-- select unhex (stub function, result)
--Testcase 1884:
SELECT unhex(hex(str1)), unhex(hex(str2)) FROM s3;
   unhex   |   unhex   
-----------+-----------
 ---XYZ--- |    XYZ   
 ---XYZ--- |    XYZ   
 ---XYZ--- |    XYZ   
 ---XYZ--- |    XYZ   
 ---XYZ--- |    XYZ   
 ---XYZ--- |    XYZ   
(6 rows)

-- select unhex (stub function, not pushdown constraints, explain)
--Testcase 1885:
EXPLAIN VERBOSE
SELECT value1, unhex(hex(str2)) FROM s3 WHERE to_hex(value2) = '64';
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..407.73 rows=34 width=40)
   Output: value1, (unhex(hex(str2)))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, unhex(hex(`str2`)), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.unhex(public.hex(str2)), value2 FROM public.s31mysql
(8 rows)

-- select unhex (stub function, not pushdown constraints, result)
--Testcase 1886:
SELECT value1, unhex(hex(str2)) FROM s3 WHERE to_hex(value2) = '64';
 value1 |   unhex   
--------+-----------
    0.1 |    XYZ   
    0.2 |    XYZ   
    0.3 |    XYZ   
(3 rows)

-- select unhex (stub function, pushdown constraints, explain)
--Testcase 1887:
EXPLAIN VERBOSE
SELECT value1, unhex(hex(str2)) FROM s3 WHERE value2 != 200;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.16 rows=6792 width=40)
   Output: value1, (unhex(hex(str2)))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, unhex(hex(`str2`)) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.unhex(public.hex(str2)) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select unhex (stub function, pushdown constraints, result)
--Testcase 1888:
SELECT value1, unhex(hex(str2)) FROM s3 WHERE value2 != 200;
 value1 |   unhex   
--------+-----------
    0.1 |    XYZ   
    0.2 |    XYZ   
    0.3 |    XYZ   
(3 rows)

-- select unhex with non pushdown func and explicit constant (explain)
--Testcase 1889:
EXPLAIN VERBOSE
SELECT unhex(hex(str2)), pi(), 4.1 FROM s3;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=72)
   Output: (unhex(hex(str2))), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT unhex(hex(`str2`)), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.unhex(public.hex(str2)), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select unhex with non pushdown func and explicit constant (result)
--Testcase 1890:
SELECT unhex(hex(str2)), pi(), 4.1 FROM s3;
   unhex   |        pi         | ?column? 
-----------+-------------------+----------
    XYZ    | 3.141592653589793 |      4.1
    XYZ    | 3.141592653589793 |      4.1
    XYZ    | 3.141592653589793 |      4.1
    XYZ    | 3.141592653589793 |      4.1
    XYZ    | 3.141592653589793 |      4.1
    XYZ    | 3.141592653589793 |      4.1
(6 rows)

-- select unhex with order by (explain)
--Testcase 1891:
EXPLAIN VERBOSE
SELECT value1, unhex(hex(str2)) FROM s3 ORDER BY value1, unhex(hex(str2));
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=40)
   Output: value1, (unhex(hex(str2)))
   Sort Key: s3.value1, (unhex(hex(s3.str2)))
   ->  Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=40)
         Output: value1, (unhex(hex(str2)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, unhex(hex(`str2`)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.unhex(public.hex(str2)) FROM public.s31mysql
(12 rows)

-- select unhex with order by (result)
--Testcase 1892:
SELECT value1, unhex(hex(str2)) FROM s3 ORDER BY value1, unhex(hex(str2));
 value1 |   unhex   
--------+-----------
    0.1 |    XYZ   
    0.2 |    XYZ   
    0.3 |    XYZ   
    1.1 |    XYZ   
    2.2 |    XYZ   
    3.3 |    XYZ   
(6 rows)

-- select unhex with order by index (result)
--Testcase 1893:
SELECT value1, unhex(hex(str2)) FROM s3 ORDER BY 2,1;
 value1 |   unhex   
--------+-----------
    0.1 |    XYZ   
    0.2 |    XYZ   
    0.3 |    XYZ   
    1.1 |    XYZ   
    2.2 |    XYZ   
    3.3 |    XYZ   
(6 rows)

-- select unhex with order by index (result)
--Testcase 1894:
SELECT value1, unhex(hex(str2)) FROM s3 ORDER BY 1,2;
 value1 |   unhex   
--------+-----------
    0.1 |    XYZ   
    0.2 |    XYZ   
    0.3 |    XYZ   
    1.1 |    XYZ   
    2.2 |    XYZ   
    3.3 |    XYZ   
(6 rows)

-- select unhex with group by (explain)
--Testcase 1895:
EXPLAIN VERBOSE
SELECT count(value1), unhex(hex(str2)) FROM s3 GROUP BY unhex(hex(str2)) ORDER BY 1,2;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=3981.55..3982.05 rows=200 width=40)
   Output: (count(value1)), (unhex(hex(str2)))
   Sort Key: (count(s3.value1)), (unhex(hex(s3.str2)))
   ->  HashAggregate  (cost=3871.91..3973.91 rows=200 width=40)
         Output: count(value1), (unhex(hex(str2)))
         Group Key: (unhex(hex(s3.str2)))
         ->  Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=40)
               Output: (unhex(hex(str2))), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT unhex(hex(`str2`)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.unhex(public.hex(str2)), value1 FROM public.s31mysql
(15 rows)

-- select unhex with group by (result)
--Testcase 1896:
SELECT count(value1), unhex(hex(str2)) FROM s3 GROUP BY unhex(hex(str2)) ORDER BY 1,2;
 count |   unhex   
-------+-----------
     6 |    XYZ   
(1 row)

-- select unhex with group by index (result)
--Testcase 1897:
SELECT value1, unhex(hex(str2)) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |   unhex   
--------+-----------
    0.1 |    XYZ   
    0.2 |    XYZ   
    0.3 |    XYZ   
    1.1 |    XYZ   
    2.2 |    XYZ   
    3.3 |    XYZ   
(6 rows)

-- select unhex with group by having (explain)
--Testcase 1898:
EXPLAIN VERBOSE
SELECT count(value1), unhex(hex(str2)) FROM s3 GROUP BY unhex(hex(str2)), str2 HAVING unhex(hex(str2)) IS NOT NULL ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=4098.07..4098.57 rows=199 width=72)
   Output: (count(value1)), (unhex(hex(str2))), str2
   Sort Key: (count(s3.value1)), (unhex(hex(s3.str2)))
   ->  HashAggregate  (cost=3888.97..4090.47 rows=199 width=72)
         Output: count(value1), (unhex(hex(str2))), str2
         Group Key: (unhex(hex(s3.str2))), s3.str2
         Filter: ((unhex(hex(s3.str2))) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..3837.78 rows=6826 width=72)
               Output: (unhex(hex(str2))), str2, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT unhex(hex(`str2`)), `str2`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.unhex(public.hex(str2)), str2, value1 FROM public.s31mysql
(16 rows)

-- select unhex with group by having (result)
--Testcase 1899:
SELECT count(value1), unhex(hex(str2)) FROM s3 GROUP BY unhex(hex(str2)), str2 HAVING unhex(hex(str2)) IS NOT NULL ORDER BY 1,2;
 count |   unhex   
-------+-----------
     6 |    XYZ   
(1 row)

-- select unhex with group by index having (result)
--Testcase 1900:
SELECT value1, unhex(hex(str2)) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |   unhex   
--------+-----------
    1.1 |    XYZ   
    2.2 |    XYZ   
    3.3 |    XYZ   
(3 rows)

--
-- test upper()
--
-- select upper (stub function, explain)
--Testcase 1901:
EXPLAIN VERBOSE
SELECT upper(tag1), upper(str1), upper(str2) FROM s3 ORDER BY 1,2,3;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sort  (cost=910.68..927.75 rows=6826 width=96)
   Output: (upper(tag1)), (upper(str1)), (upper(str2))
   Sort Key: (upper(s3.tag1)), (upper(s3.str1)), (upper(s3.str2))
   ->  Foreign Scan on public.s3  (cost=200.00..475.97 rows=6826 width=96)
         Output: (upper(tag1)), (upper(str1)), (upper(str2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT upper(`tag1`), upper(`str1`), upper(`str2`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT upper(tag1), upper(str1), upper(str2) FROM public.s31mysql
(12 rows)

-- select upper (stub function, result)
--Testcase 1902:
SELECT upper(tag1), upper(str1), upper(str2) FROM s3 ORDER BY 1,2,3;
 upper |   upper   |   upper   
-------+-----------+-----------
 A     | ---XYZ--- |    XYZ   
 A     | ---XYZ--- |    XYZ   
 A     | ---XYZ--- |    XYZ   
 B     | ---XYZ--- |    XYZ   
 B     | ---XYZ--- |    XYZ   
 B     | ---XYZ--- |    XYZ   
(6 rows)

-- select upper (stub function, not pushdown constraints, explain)
--Testcase 1903:
EXPLAIN VERBOSE
SELECT value1, upper(tag1) FROM s3 WHERE to_hex(value2) = '64';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..390.81 rows=34 width=40)
   Output: value1, (upper(tag1))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, upper(`tag1`), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, upper(tag1), value2 FROM public.s31mysql
(8 rows)

-- select upper (stub function, not pushdown constraints, result)
--Testcase 1904:
SELECT value1, upper(tag1) FROM s3 WHERE to_hex(value2) = '64';
 value1 | upper 
--------+-------
    0.1 | A
    0.2 | A
    0.3 | A
(3 rows)

-- select upper (stub function, pushdown constraints, explain)
--Testcase 1905:
EXPLAIN VERBOSE
SELECT value1, upper(str1) FROM s3 WHERE value2 != 200;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=40)
   Output: value1, (upper(str1))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, upper(`str1`) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, upper(str1) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select upper (stub function, pushdown constraints, result)
--Testcase 1906:
SELECT value1, upper(str1) FROM s3 WHERE value2 != 200;
 value1 |   upper   
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
(3 rows)

-- select upper with non pushdown func and explicit constant (explain)
--Testcase 1907:
EXPLAIN VERBOSE
SELECT upper(str1), pi(), 4.1 FROM s3;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=72)
   Output: (upper(str1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT upper(`str1`), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT upper(str1), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select ucase with non pushdown func and explicit constant (result)
--Testcase 1908:
SELECT upper(str1), pi(), 4.1 FROM s3;
   upper   |        pi         | ?column? 
-----------+-------------------+----------
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
(6 rows)

-- select upper with order by (explain)
--Testcase 1909:
EXPLAIN VERBOSE
SELECT value1, upper(str1) FROM s3 ORDER BY value1, upper(str1);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort  (cost=876.55..893.62 rows=6826 width=40)
   Output: value1, (upper(str1))
   Sort Key: s3.value1, (upper(s3.str1))
   ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
         Output: value1, (upper(str1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, upper(`str1`) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, upper(str1) FROM public.s31mysql
(12 rows)

-- select upper with order by (result)
--Testcase 1910:
SELECT value1, upper(str1) FROM s3 ORDER BY value1, upper(str1);
 value1 |   upper   
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select upper with order by index (result)
--Testcase 1911:
SELECT value1, upper(str1) FROM s3 ORDER BY 2,1;
 value1 |   upper   
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select upper with order by index (result)
--Testcase 1912:
SELECT value1, upper(str1) FROM s3 ORDER BY 1,2;
 value1 |   upper   
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select upper with group by (explain)
--Testcase 1913:
EXPLAIN VERBOSE
SELECT count(value1), upper(str1) FROM s3 GROUP BY upper(str1) ORDER BY 1,2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=486.12..486.62 rows=200 width=40)
   Output: (count(value1)), (upper(str1))
   Sort Key: (count(s3.value1)), (upper(s3.str1))
   ->  HashAggregate  (cost=475.97..478.47 rows=200 width=40)
         Output: count(value1), (upper(str1))
         Group Key: (upper(s3.str1))
         ->  Foreign Scan on public.s3  (cost=200.00..441.84 rows=6826 width=40)
               Output: (upper(str1)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT upper(`str1`), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT upper(str1), value1 FROM public.s31mysql
(15 rows)

-- select upper with group by (result)
--Testcase 1914:
SELECT count(value1), upper(str1) FROM s3 GROUP BY upper(str1) ORDER BY 1,2;
 count |   upper   
-------+-----------
     6 | ---XYZ---
(1 row)

-- select upper with group by index (result)
--Testcase 1915:
SELECT value1, upper(str1) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |   upper   
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select upper with group by having (explain)
--Testcase 1916:
EXPLAIN VERBOSE
SELECT count(value1), upper(str1) FROM s3 GROUP BY upper(str1), tag1 HAVING upper(str1) IS NOT NULL ORDER BY 1,2;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=519.23..519.73 rows=200 width=72)
   Output: (count(value1)), (upper(str1)), tag1
   Sort Key: (count(s3.value1)), (upper(s3.str1))
   ->  HashAggregate  (cost=509.09..511.59 rows=200 width=72)
         Output: count(value1), (upper(str1)), tag1
         Group Key: (upper(s3.str1)), s3.tag1
         ->  Foreign Scan on public.s3  (cost=200.00..458.15 rows=6792 width=72)
               Output: (upper(str1)), tag1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT upper(`str1`), `tag1`, `value1` FROM `test`.`s32` WHERE ((upper(`str1`) IS NOT NULL))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT upper(str1), tag1, value1 FROM public.s31mysql WHERE ((upper(str1) IS NOT NULL))
(15 rows)

-- select upper with group by having (result)
--Testcase 1917:
SELECT count(value1), upper(str1) FROM s3 GROUP BY upper(str1), tag1 HAVING upper(str1) IS NOT NULL ORDER BY 1,2;
 count |   upper   
-------+-----------
     3 | ---XYZ---
     3 | ---XYZ---
(2 rows)

-- select upper with group by index having (result)
--Testcase 1918:
SELECT value1, upper(tag1) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 | upper 
--------+-------
    1.1 | B
    2.2 | B
    3.3 | B
(3 rows)

--
-- test weight_string()
--
-- select weight_string (stub function, explain)
--Testcase 1919:
EXPLAIN VERBOSE
SELECT weight_string('NULL') FROM s3;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (weight_string('NULL'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT weight_string(NULL) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.weight_string('NULL'::text) FROM public.s31mysql
(7 rows)

-- select weight_string (stub function, result)
--Testcase 1920:
SELECT weight_string('NULL') FROM s3;
 weight_string 
---------------
 
 
 
 
 
 
(6 rows)

-- select weight_string (stub function, explain)
--Testcase 1921:
EXPLAIN VERBOSE
SELECT weight_string(str1), weight_string(str1, 'CHAR', 3), weight_string(str1, 'BINARY', 5) FROM s3;
                                                                                                 QUERY PLAN                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..5544.28 rows=6826 width=96)
   Output: (weight_string(str1)), (weight_string(str1, 'CHAR'::mysql_string_type, 3)), (weight_string(str1, 'BINARY'::mysql_string_type, 5))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT weight_string(`str1`), weight_string(`str1` AS CHAR(3)), weight_string(`str1` AS BINARY(5)) FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.weight_string(str1), public.weight_string(str1, 'CHAR'::public.mysql_string_type, 3), public.weight_string(str1, 'BINARY'::public.mysql_string_type, 5) FROM public.s31mysql
(7 rows)

-- select weight_string (stub function, result)
--Testcase 1922:
SELECT weight_string(str1), weight_string(str1, 'CHAR', 3), weight_string(str1, 'BINARY', 5) FROM s3;
                     weight_string                     |   weight_string    | weight_string 
-------------------------------------------------------+--------------------+---------------
 \x02\r\x02\r\x02\r\x1E\x1F\x0B\x1F!\x02\r\x02\r\x02\r | \x02\r\x02\r\x02\r | ---XY
 \x02\r\x02\r\x02\r\x1E\x1F\x0B\x1F!\x02\r\x02\r\x02\r | \x02\r\x02\r\x02\r | ---XY
 \x02\r\x02\r\x02\r\x1E\x1F\x0B\x1F!\x02\r\x02\r\x02\r | \x02\r\x02\r\x02\r | ---XY
 \x02\r\x02\r\x02\r\x1E\x1F\x0B\x1F!\x02\r\x02\r\x02\r | \x02\r\x02\r\x02\r | ---XY
 \x02\r\x02\r\x02\r\x1E\x1F\x0B\x1F!\x02\r\x02\r\x02\r | \x02\r\x02\r\x02\r | ---XY
 \x02\r\x02\r\x02\r\x1E\x1F\x0B\x1F!\x02\r\x02\r\x02\r | \x02\r\x02\r\x02\r | ---XY
(6 rows)

-- select weight_string (stub function, not pushdown constraints, explain)
--Testcase 1923:
EXPLAIN VERBOSE
SELECT value1, weight_string(str1, 'CHAR', 3) FROM s3 WHERE to_hex(value2) = '64';
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..399.23 rows=34 width=40)
   Output: value1, (weight_string(str1, 'CHAR'::mysql_string_type, 3))
   Filter: (to_hex(s3.value2) = '64'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, weight_string(`str1` AS CHAR(3)), `value2` FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.weight_string(str1, 'CHAR'::public.mysql_string_type, 3), value2 FROM public.s31mysql
(8 rows)

-- select weight_string (stub function, not pushdown constraints, result)
--Testcase 1924:
SELECT value1, weight_string(str1, 'CHAR', 3) FROM s3 WHERE to_hex(value2) = '64';
 value1 |   weight_string    
--------+--------------------
    0.1 | \x02\r\x02\r\x02\r
    0.2 | \x02\r\x02\r\x02\r
    0.3 | \x02\r\x02\r\x02\r
(3 rows)

-- select weight_string (stub function, pushdown constraints, explain)
--Testcase 1925:
EXPLAIN VERBOSE
SELECT value1, weight_string(str1, 'BINARY', 5) FROM s3 WHERE value2 != 200;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2139.16 rows=6792 width=40)
   Output: value1, (weight_string(str1, 'BINARY'::mysql_string_type, 5))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `value1`, weight_string(`str1` AS BINARY(5)) FROM `test`.`s32` WHERE ((`value2` <> 200))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT value1, public.weight_string(str1, 'BINARY'::public.mysql_string_type, 5) FROM public.s31mysql WHERE ((value2 <> 200))
(7 rows)

-- select weight_string (stub function, pushdown constraints, result)
--Testcase 1926:
SELECT value1, weight_string(str1, 'BINARY', 5) FROM s3 WHERE value2 != 200;
 value1 | weight_string 
--------+---------------
    0.1 | ---XY
    0.2 | ---XY
    0.3 | ---XY
(3 rows)

-- select weight_string with non pushdown func and explicit constant (explain)
--Testcase 1927:
EXPLAIN VERBOSE
SELECT weight_string(str1, 'BINARY', 5), pi(), 4.1 FROM s3;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (weight_string(str1, 'BINARY'::mysql_string_type, 5)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT weight_string(`str1` AS BINARY(5)), 3.141592653589793, 4.1 FROM `test`.`s32`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.weight_string(str1, 'BINARY'::public.mysql_string_type, 5), 3.141592653589793::double precision, 4.1 FROM public.s31mysql
(7 rows)

-- select weight_string with non pushdown func and explicit constant (result)
--Testcase 1928:
SELECT weight_string(str1, 'BINARY', 5), pi(), 4.1 FROM s3;
 weight_string |        pi         | ?column? 
---------------+-------------------+----------
 ---XY         | 3.141592653589793 |      4.1
 ---XY         | 3.141592653589793 |      4.1
 ---XY         | 3.141592653589793 |      4.1
 ---XY         | 3.141592653589793 |      4.1
 ---XY         | 3.141592653589793 |      4.1
 ---XY         | 3.141592653589793 |      4.1
(6 rows)

-- select weight_string with order by (explain)
--Testcase 1929:
EXPLAIN VERBOSE
SELECT value1, weight_string(str1, 'BINARY', 5) FROM s3 ORDER BY value1, weight_string(str1, 'BINARY', 5);
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=40)
   Output: value1, (weight_string(str1, 'BINARY'::mysql_string_type, 5))
   Sort Key: s3.value1, (weight_string(s3.str1, 'BINARY'::mysql_string_type, 5))
   ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
         Output: value1, (weight_string(str1, 'BINARY'::mysql_string_type, 5))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `value1`, weight_string(`str1` AS BINARY(5)) FROM `test`.`s32`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, public.weight_string(str1, 'BINARY'::public.mysql_string_type, 5) FROM public.s31mysql
(12 rows)

-- select weight_string with order by (result)
--Testcase 1930:
SELECT value1, weight_string(str1, 'BINARY', 5) FROM s3 ORDER BY value1, weight_string(str1, 'BINARY', 5);
 value1 | weight_string 
--------+---------------
    0.1 | ---XY
    0.2 | ---XY
    0.3 | ---XY
    1.1 | ---XY
    2.2 | ---XY
    3.3 | ---XY
(6 rows)

-- select weight_string with order by index (result)
--Testcase 1931:
SELECT value1, weight_string(str1, 'CHAR', 3) FROM s3 ORDER BY 2,1;
 value1 |   weight_string    
--------+--------------------
    0.1 | \x02\r\x02\r\x02\r
    0.2 | \x02\r\x02\r\x02\r
    0.3 | \x02\r\x02\r\x02\r
    1.1 | \x02\r\x02\r\x02\r
    2.2 | \x02\r\x02\r\x02\r
    3.3 | \x02\r\x02\r\x02\r
(6 rows)

-- select weight_string with order by index (result)
--Testcase 1932:
SELECT value1, weight_string(str1, 'CHAR', 3) FROM s3 ORDER BY 1,2;
 value1 |   weight_string    
--------+--------------------
    0.1 | \x02\r\x02\r\x02\r
    0.2 | \x02\r\x02\r\x02\r
    0.3 | \x02\r\x02\r\x02\r
    1.1 | \x02\r\x02\r\x02\r
    2.2 | \x02\r\x02\r\x02\r
    3.3 | \x02\r\x02\r\x02\r
(6 rows)

-- select weight_string with group by (explain)
--Testcase 1933:
EXPLAIN VERBOSE
SELECT count(value1), weight_string(str1, 'CHAR', 3) FROM s3 GROUP BY weight_string(str1, 'CHAR', 3) ORDER BY 1,2;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=40)
   Output: (count(value1)), (weight_string(str1, 'CHAR'::mysql_string_type, 3))
   Sort Key: (count(s3.value1)), (weight_string(s3.str1, 'CHAR'::mysql_string_type, 3))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
         Output: count(value1), (weight_string(str1, 'CHAR'::mysql_string_type, 3))
         Group Key: (weight_string(s3.str1, 'CHAR'::mysql_string_type, 3))
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (weight_string(str1, 'CHAR'::mysql_string_type, 3)), value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT weight_string(`str1` AS CHAR(3)), `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.weight_string(str1, 'CHAR'::public.mysql_string_type, 3), value1 FROM public.s31mysql
(15 rows)

-- select weight_string with group by (result)
--Testcase 1934:
SELECT count(value1), weight_string(str1, 'CHAR', 3) FROM s3 GROUP BY weight_string(str1, 'CHAR', 3) ORDER BY 1,2;
 count |   weight_string    
-------+--------------------
     6 | \x02\r\x02\r\x02\r
(1 row)

-- select weight_string with group by index (result)
--Testcase 1935:
SELECT value1, weight_string(str1, 'CHAR', 3) FROM s3 GROUP BY 2,1 ORDER BY 1,2;
 value1 |   weight_string    
--------+--------------------
    0.1 | \x02\r\x02\r\x02\r
    0.2 | \x02\r\x02\r\x02\r
    0.3 | \x02\r\x02\r\x02\r
    1.1 | \x02\r\x02\r\x02\r
    2.2 | \x02\r\x02\r\x02\r
    3.3 | \x02\r\x02\r\x02\r
(6 rows)

-- select weight_string with group by having (explain)
--Testcase 1936:
EXPLAIN VERBOSE
SELECT count(value1), weight_string(str1, 'CHAR', 3) FROM s3 GROUP BY weight_string(str1, 'CHAR', 3), str1 HAVING weight_string(str1, 'CHAR', 3) IS NOT NULL ORDER BY 1,2;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2291.82..2292.32 rows=199 width=72)
   Output: (count(value1)), (weight_string(str1, 'CHAR'::mysql_string_type, 3)), str1
   Sort Key: (count(s3.value1)), (weight_string(s3.str1, 'CHAR'::mysql_string_type, 3))
   ->  HashAggregate  (cost=2182.47..2284.22 rows=199 width=72)
         Output: count(value1), (weight_string(str1, 'CHAR'::mysql_string_type, 3)), str1
         Group Key: (weight_string(s3.str1, 'CHAR'::mysql_string_type, 3)), s3.str1
         Filter: ((weight_string(s3.str1, 'CHAR'::mysql_string_type, 3)) IS NOT NULL)
         ->  Foreign Scan on public.s3  (cost=200.00..2131.28 rows=6826 width=72)
               Output: (weight_string(str1, 'CHAR'::mysql_string_type, 3)), str1, value1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT weight_string(`str1` AS CHAR(3)), `str1`, `value1` FROM `test`.`s32`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.weight_string(str1, 'CHAR'::public.mysql_string_type, 3), str1, value1 FROM public.s31mysql
(16 rows)

-- select weight_string with group by having (result)
--Testcase 1937:
SELECT count(value1), weight_string(str1, 'CHAR', 3) FROM s3 GROUP BY weight_string(str1, 'CHAR', 3), str1 HAVING weight_string(str1, 'CHAR', 3) IS NOT NULL ORDER BY 1,2;
 count |   weight_string    
-------+--------------------
     6 | \x02\r\x02\r\x02\r
(1 row)

-- select weight_string with group by index having (result)
--Testcase 1938:
SELECT value1, weight_string(str1, 'CHAR', 3) FROM s3 GROUP BY 1,2 HAVING value1 > 1 ORDER BY 1,2;
 value1 |   weight_string    
--------+--------------------
    1.1 | \x02\r\x02\r\x02\r
    2.2 | \x02\r\x02\r\x02\r
    3.3 | \x02\r\x02\r\x02\r
(3 rows)

--
-- test for date/time function
--
--Testcase 1939:
CREATE FOREIGN TABLE time_tbl (id int, c1 time without time zone, c2 date, c3 timestamp, __spd_url text) SERVER pgspider_core_svr;
--Testcase 1940:
CREATE FOREIGN TABLE time_tbl__pgspider_svr__0 (id int, c1 time without time zone, c2 date, c3 timestamp, __spd_url text) SERVER pgspider_svr OPTIONS (table_name 'time_tbl1mysql');
--Testcase 1941:
CREATE FOREIGN TABLE time_tbl__mysql_svr__0 (id int, c1 time without time zone, c2 date, c3 timestamp) SERVER mysql_svr OPTIONS(dbname 'test', table_name 'time_tbl2');
-- ADDDATE()
-- select adddate (stub function, explain)
--Testcase 1942:
EXPLAIN VERBOSE
SELECT adddate(c2, 31), adddate(c2, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, 31) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                                                                 QUERY PLAN                                                                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7719.62..7736.68 rows=6826 width=24)
   Output: (adddate((c2)::timestamp without time zone, 31)), (adddate((c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
   Sort Key: (adddate((time_tbl.c2)::timestamp without time zone, 31)), (adddate((time_tbl.c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7284.91 rows=6826 width=24)
         Output: (adddate((c2)::timestamp without time zone, 31)), (adddate((c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT adddate(`c2`, 31), adddate(`c2`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND), adddate('2021-01-02 00:00:00', INTERVAL '180 2:30:0.0' DAY_MICROSECOND), adddate('2021-01-02 00:00:00', 31) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.adddate(c2, 31), public.adddate(c2, '6 mons 02:30:00'::interval), public.adddate('2021-01-02 00:00:00'::timestamp without time zone, '6 mons 02:30:00'::interval), public.adddate('2021-01-02 00:00:00'::timestamp without time zone, 31) FROM public.time_tbl1mysql
(12 rows)

-- select adddate (stub function, result)
--Testcase 1943:
SELECT adddate(c2, 31), adddate(c2, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, 31) FROM time_tbl ORDER BY 1,2,3,4;
  adddate   |       adddate       |       adddate       |  adddate   
------------+---------------------+---------------------+------------
 2021-02-01 | 2021-06-30 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-02-02 | 2021-07-01 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-02-10 | 2021-07-09 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-02-15 | 2021-07-14 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-03-01 | 2021-07-28 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
(5 rows)

-- select adddate (stub function, not pushdown constraints, explain)
--Testcase 1944:
EXPLAIN VERBOSE
SELECT adddate(c2, 31), adddate(c2, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, 31) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                                                                 QUERY PLAN                                                                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=425.76..425.85 rows=34 width=24)
   Output: (adddate((c2)::timestamp without time zone, 31)), (adddate((c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
   Sort Key: (adddate((time_tbl.c2)::timestamp without time zone, 31)), (adddate((time_tbl.c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..424.90 rows=34 width=24)
         Output: (adddate((c2)::timestamp without time zone, 31)), (adddate((c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT adddate(`c2`, 31), adddate(`c2`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND), adddate('2021-01-02 00:00:00', INTERVAL '180 2:30:0.0' DAY_MICROSECOND), adddate('2021-01-02 00:00:00', 31), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.adddate(c2, 31), public.adddate(c2, '6 mons 02:30:00'::interval), public.adddate('2021-01-02 00:00:00'::timestamp without time zone, '6 mons 02:30:00'::interval), public.adddate('2021-01-02 00:00:00'::timestamp without time zone, 31), id FROM public.time_tbl1mysql
(13 rows)

-- select adddate (stub function, not pushdown constraints, result)
--Testcase 1945:
SELECT adddate(c2, 31), adddate(c2, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, 31) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
  adddate   |       adddate       |       adddate       |  adddate   
------------+---------------------+---------------------+------------
 2021-02-01 | 2021-06-30 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
(1 row)

-- select adddate (stub function, pushdown constraints, explain)
--Testcase 1946:
EXPLAIN VERBOSE
SELECT adddate(c2, 31), adddate(c2, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, 31) FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
                                                                                                                                                                 QUERY PLAN                                                                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7699.42..7716.40 rows=6792 width=24)
   Output: (adddate((c2)::timestamp without time zone, 31)), (adddate((c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
   Sort Key: (adddate((time_tbl.c2)::timestamp without time zone, 31)), (adddate((time_tbl.c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7267.12 rows=6792 width=24)
         Output: (adddate((c2)::timestamp without time zone, 31)), (adddate((c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT adddate(`c2`, 31), adddate(`c2`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND), adddate('2021-01-02 00:00:00', INTERVAL '180 2:30:0.0' DAY_MICROSECOND), adddate('2021-01-02 00:00:00', 31) FROM `test`.`time_tbl2` WHERE ((`id` <> 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.adddate(c2, 31), public.adddate(c2, '6 mons 02:30:00'::interval), public.adddate('2021-01-02 00:00:00'::timestamp without time zone, '6 mons 02:30:00'::interval), public.adddate('2021-01-02 00:00:00'::timestamp without time zone, 31) FROM public.time_tbl1mysql WHERE ((id <> 0))
(12 rows)

-- select adddate (stub function, pushdown constraints, result)
--Testcase 1947:
SELECT adddate(c2, 31), adddate(c2, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, 31) FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
  adddate   |       adddate       |       adddate       |  adddate   
------------+---------------------+---------------------+------------
 2021-02-01 | 2021-06-30 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-02-10 | 2021-07-09 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-02-15 | 2021-07-14 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-03-01 | 2021-07-28 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
(4 rows)

-- select adddate (stub function, adddate in constraints, explain)
--Testcase 1948:
EXPLAIN VERBOSE
SELECT adddate(c2, 31), adddate(c2, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, 31) FROM time_tbl WHERE adddate(c2, 31) != '2021-01-02' ORDER BY 1,2,3,4;
                                                                                                                                                                           QUERY PLAN                                                                                                                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9422.99..9439.97 rows=6792 width=24)
   Output: (adddate((c2)::timestamp without time zone, 31)), (adddate((c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
   Sort Key: (adddate((time_tbl.c2)::timestamp without time zone, 31)), (adddate((time_tbl.c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8990.69 rows=6792 width=24)
         Output: (adddate((c2)::timestamp without time zone, 31)), (adddate((c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT adddate(`c2`, 31), adddate(`c2`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND), adddate('2021-01-02 00:00:00', INTERVAL '180 2:30:0.0' DAY_MICROSECOND), adddate('2021-01-02 00:00:00', 31) FROM `test`.`time_tbl2` WHERE ((adddate(`c2`, 31) <> '2021-01-02'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.adddate(c2, 31), public.adddate(c2, '6 mons 02:30:00'::interval), public.adddate('2021-01-02 00:00:00'::timestamp without time zone, '6 mons 02:30:00'::interval), public.adddate('2021-01-02 00:00:00'::timestamp without time zone, 31) FROM public.time_tbl1mysql WHERE ((public.adddate(c2, 31) <> '2021-01-02'::date))
(12 rows)

-- select adddate (stub function, adddate in constraints, result)
--Testcase 1949:
SELECT adddate(c2, 31), adddate(c2, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, 31) FROM time_tbl WHERE adddate(c2, 31) != '2021-01-02' ORDER BY 1,2,3,4;
  adddate   |       adddate       |       adddate       |  adddate   
------------+---------------------+---------------------+------------
 2021-02-01 | 2021-06-30 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-02-02 | 2021-07-01 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-02-10 | 2021-07-09 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-02-15 | 2021-07-14 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-03-01 | 2021-07-28 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
(5 rows)

-- select adddate (stub function, adddate in constraints, explain)
--Testcase 1950:
EXPLAIN VERBOSE
SELECT adddate(c2, 31), adddate(c2, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, 31) FROM time_tbl WHERE adddate('2021-01-02'::date, 31) > '2021-01-02' ORDER BY 1,2,3,4;
                                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4471.64..4477.33 rows=2276 width=24)
   Output: (adddate((c2)::timestamp without time zone, 31)), (adddate((c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
   Sort Key: (adddate((time_tbl.c2)::timestamp without time zone, 31)), (adddate((time_tbl.c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4344.73 rows=2276 width=24)
         Output: (adddate((c2)::timestamp without time zone, 31)), (adddate((c2)::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), (adddate('2021-01-02 00:00:00'::timestamp without time zone, 31))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT adddate(`c2`, 31), adddate(`c2`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND), adddate('2021-01-02 00:00:00', INTERVAL '180 2:30:0.0' DAY_MICROSECOND), adddate('2021-01-02 00:00:00', 31) FROM `test`.`time_tbl2` WHERE ((adddate('2021-01-02 00:00:00', 31) > '2021-01-02'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.adddate(c2, 31), public.adddate(c2, '6 mons 02:30:00'::interval), public.adddate('2021-01-02 00:00:00'::timestamp without time zone, '6 mons 02:30:00'::interval), public.adddate('2021-01-02 00:00:00'::timestamp without time zone, 31) FROM public.time_tbl1mysql WHERE ((public.adddate('2021-01-02 00:00:00'::timestamp without time zone, 31) > '2021-01-02'::date))
(12 rows)

-- select adddate (stub function, adddate in constraints, result)
--Testcase 1951:
SELECT adddate(c2, 31), adddate(c2, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes'), adddate('2021-01-02'::date, 31) FROM time_tbl WHERE adddate('2021-01-02'::date, 31) > '2021-01-02' ORDER BY 1,2,3,4;
  adddate   |       adddate       |       adddate       |  adddate   
------------+---------------------+---------------------+------------
 2021-02-01 | 2021-06-30 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-02-02 | 2021-07-01 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-02-10 | 2021-07-09 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-02-15 | 2021-07-14 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
 2021-03-01 | 2021-07-28 02:30:00 | 2021-07-01 02:30:00 | 2021-02-02
(5 rows)

-- select adddate as nest function with agg (pushdown, explain)
--Testcase 1952:
EXPLAIN VERBOSE
SELECT max(id), adddate('2021-01-02'::date, max(id)) FROM time_tbl;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=8)
   Output: (max(id)), adddate('2021-01-02 00:00:00'::timestamp without time zone, (max(id)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`id`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(id) FROM public.time_tbl1mysql
(11 rows)

-- select adddate as nest function with agg (pushdown, result)
--Testcase 1953:
SELECT max(id), adddate('2021-01-02'::date, max(id)) FROM time_tbl;
ERROR:  stub adddate(timestamp, int) is called
CONTEXT:  PL/pgSQL function adddate(timestamp without time zone,integer) line 3 at RAISE
-- select adddate as nest with stub (pushdown, explain)
--Testcase 1954:
EXPLAIN VERBOSE
SELECT adddate(makedate(2019, id), 31) FROM time_tbl ORDER BY 1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=4)
   Output: (adddate((makedate(2019, id))::timestamp without time zone, 31))
   Sort Key: (adddate((makedate(2019, time_tbl.id))::timestamp without time zone, 31))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=4)
         Output: (adddate((makedate(2019, id))::timestamp without time zone, 31))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT adddate(makedate(2019, `id`), 31) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.adddate(public.makedate(2019, id), 31) FROM public.time_tbl1mysql
(12 rows)

-- select adddate as nest with stub (pushdown, result)
--Testcase 1955:
SELECT adddate(makedate(2019, id), 31) FROM time_tbl ORDER BY 1;
  adddate   
------------
 2019-02-01
 2019-02-02
 2019-02-03
 2019-02-04
 
(5 rows)

-- select adddate with non pushdown func and explicit constant (explain)
--Testcase 1956:
EXPLAIN VERBOSE
SELECT adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes'), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=48)
   Output: (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), '3.141592653589793'::double precision, 4.1
   Sort Key: (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=48)
         Output: (adddate('2021-01-02 00:00:00'::timestamp without time zone, '@ 6 mons 2 hours 30 mins'::interval)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT adddate('2021-01-02 00:00:00', INTERVAL '180 2:30:0.0' DAY_MICROSECOND), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.adddate('2021-01-02 00:00:00'::timestamp without time zone, '6 mons 02:30:00'::interval), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select adddate with non pushdown func and explicit constant (result)
--Testcase 1957:
SELECT adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes'), pi(), 4.1 FROM time_tbl ORDER BY 1;
       adddate       |        pi         | ?column? 
---------------------+-------------------+----------
 2021-07-01 02:30:00 | 3.141592653589793 |      4.1
 2021-07-01 02:30:00 | 3.141592653589793 |      4.1
 2021-07-01 02:30:00 | 3.141592653589793 |      4.1
 2021-07-01 02:30:00 | 3.141592653589793 |      4.1
 2021-07-01 02:30:00 | 3.141592653589793 |      4.1
(5 rows)

-- select adddate with order by (explain)
--Testcase 1958:
EXPLAIN VERBOSE
SELECT id, adddate(c2, id + 5) FROM time_tbl order by id,adddate(c2, id + 5);
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort  (cost=2600.12..2617.18 rows=6826 width=8)
   Output: id, (adddate((c2)::timestamp without time zone, (id + 5)))
   Sort Key: time_tbl.id, (adddate((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=8)
         Output: id, (adddate((c2)::timestamp without time zone, (id + 5)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, adddate(`c2`, (`id` + 5)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.adddate(c2, (id + 5)) FROM public.time_tbl1mysql
(12 rows)

-- select adddate with order by (result)
--Testcase 1959:
SELECT id, adddate(c2, id + 5) FROM time_tbl order by id,adddate(c2, id + 5);
 id |  adddate   
----+------------
  0 | 2021-01-07
  1 | 2021-01-07
  2 | 2021-01-17
  3 | 2021-01-23
  4 | 2021-02-07
(5 rows)

-- select adddate with order by index (explain)
--Testcase 1960:
EXPLAIN VERBOSE
SELECT id, adddate(c2, id + 5) FROM time_tbl order by 1,2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort  (cost=2600.12..2617.18 rows=6826 width=8)
   Output: id, (adddate((c2)::timestamp without time zone, (id + 5)))
   Sort Key: time_tbl.id, (adddate((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=8)
         Output: id, (adddate((c2)::timestamp without time zone, (id + 5)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, adddate(`c2`, (`id` + 5)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.adddate(c2, (id + 5)) FROM public.time_tbl1mysql
(12 rows)

-- select adddate with order by index (result)
--Testcase 1961:
SELECT id, adddate(c2, id + 5) FROM time_tbl order by 1,2;
 id |  adddate   
----+------------
  0 | 2021-01-07
  1 | 2021-01-07
  2 | 2021-01-17
  3 | 2021-01-23
  4 | 2021-02-07
(5 rows)

-- select adddate with group by (explain)
--Testcase 1962:
EXPLAIN VERBOSE
SELECT count(id), adddate(c2, id + 5) FROM time_tbl group by adddate(c2, id + 5) ORDER BY 1,2;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort  (cost=2260.18..2260.68 rows=200 width=12)
   Output: (count(id)), (adddate((c2)::timestamp without time zone, (id + 5)))
   Sort Key: (count(time_tbl.id)), (adddate((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5)))
   ->  HashAggregate  (cost=2199.54..2252.54 rows=200 width=12)
         Output: count(id), (adddate((c2)::timestamp without time zone, (id + 5)))
         Group Key: (adddate((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=8)
               Output: (adddate((c2)::timestamp without time zone, (id + 5))), id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT adddate(`c2`, (`id` + 5)), `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.adddate(c2, (id + 5)), id FROM public.time_tbl1mysql
(15 rows)

-- select adddate with group by (result)
--Testcase 1963:
SELECT count(id), adddate(c2, id + 5) FROM time_tbl group by adddate(c2, id + 5) ORDER BY 1,2;
 count |  adddate   
-------+------------
     1 | 2021-01-17
     1 | 2021-01-23
     1 | 2021-02-07
     2 | 2021-01-07
(4 rows)

-- select adddate with group by index (result)
--Testcase 1964:
SELECT id, adddate(c2, id + 5) FROM time_tbl group by 2,1 ORDER BY 1,2;
 id |  adddate   
----+------------
  0 | 2021-01-07
  1 | 2021-01-07
  2 | 2021-01-17
  3 | 2021-01-23
  4 | 2021-02-07
(5 rows)

-- select adddate with group by index (result)
--Testcase 1965:
SELECT id, adddate(c2, id + 5) FROM time_tbl group by 1,2 ORDER BY 1,2;
 id |  adddate   
----+------------
  0 | 2021-01-07
  1 | 2021-01-07
  2 | 2021-01-17
  3 | 2021-01-23
  4 | 2021-02-07
(5 rows)

-- select adddate with group by having (explain)
--Testcase 1966:
EXPLAIN VERBOSE
SELECT count(id), adddate(c2, id + 5) FROM time_tbl group by adddate(c2, id + 5), id,c2 HAVING adddate(c2, id + 5) > '2000-01-02' ORDER BY 1,2;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2306.29..2306.45 rows=67 width=20)
   Output: (count(id)), (adddate((c2)::timestamp without time zone, (id + 5))), id, c2
   Sort Key: (count(time_tbl.id)), (adddate((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5)))
   ->  HashAggregate  (cost=2233.67..2304.26 rows=67 width=20)
         Output: count(id), (adddate((c2)::timestamp without time zone, (id + 5))), id, c2
         Group Key: (adddate((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5))), time_tbl.id, time_tbl.c2
         Filter: ((adddate((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5))) > '2000-01-02'::date)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=12)
               Output: (adddate((c2)::timestamp without time zone, (id + 5))), id, c2
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT adddate(`c2`, (`id` + 5)), `id`, `c2` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.adddate(c2, (id + 5)), id, c2 FROM public.time_tbl1mysql
(16 rows)

-- select adddate with group by having (result)
--Testcase 1967:
SELECT count(id), adddate(c2, id + 5) FROM time_tbl group by adddate(c2, id + 5), id,c2 HAVING adddate(c2, id + 5) > '2000-01-02' ORDER BY 1,2;
 count |  adddate   
-------+------------
     1 | 2021-01-07
     1 | 2021-01-07
     1 | 2021-01-17
     1 | 2021-01-23
     1 | 2021-02-07
(5 rows)

-- select adddate with group by index having (result)
--Testcase 1968:
SELECT id, adddate(c2, id + 5), c2 FROM time_tbl group by 3,2,1 HAVING adddate(c2, id + 5) > '2000-01-02' ORDER BY 1,2;
 id |  adddate   |     c2     
----+------------+------------
  0 | 2021-01-07 | 2021-01-02
  1 | 2021-01-07 | 2021-01-01
  2 | 2021-01-17 | 2021-01-10
  3 | 2021-01-23 | 2021-01-15
  4 | 2021-02-07 | 2021-01-29
(5 rows)

-- select adddate with group by index having (result)
--Testcase 1969:
SELECT id, adddate(c2, id + 5), c2 FROM time_tbl group by 1,2,3 HAVING adddate(c2, id + 5) > '2000-01-02' ORDER BY 1,2;
 id |  adddate   |     c2     
----+------------+------------
  0 | 2021-01-07 | 2021-01-02
  1 | 2021-01-07 | 2021-01-01
  2 | 2021-01-17 | 2021-01-10
  3 | 2021-01-23 | 2021-01-15
  4 | 2021-02-07 | 2021-01-29
(5 rows)

-- select adddate and as
--Testcase 1970:
SELECT adddate('2021-01-02'::date, INTERVAL '6 months 2 hours 30 minutes') as adddate1 FROM time_tbl;
      adddate1       
---------------------
 2021-07-01 02:30:00
 2021-07-01 02:30:00
 2021-07-01 02:30:00
 2021-07-01 02:30:00
 2021-07-01 02:30:00
(5 rows)

-- ADDTIME()
-- select addtime (stub function, explain)
--Testcase 1971:
EXPLAIN VERBOSE
SELECT addtime(c3, '1 12:59:10'), addtime(c3, INTERVAL '6 months 2 hours 30 minutes'), addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), addtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9391.99..9409.05 rows=6826 width=48)
   Output: (addtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (addtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(time_tbl.c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8957.28 rows=6826 width=48)
         Output: (addtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT addtime(`c3`, '1 12:59:10.0'), addtime(`c3`, '180 2:30:0.0'), addtime(timediff(`c3`, '2008-01-01 00:00:00.000001'), '180 2:30:0.0'), addtime('1 12:59:10.0', '180 2:30:0.0') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.addtime(c3, '1 day 12:59:10'::interval), public.addtime(c3, '6 mons 02:30:00'::interval), public.addtime(public.timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '6 mons 02:30:00'::interval), public.addtime('1 day 12:59:10'::interval, '6 mons 02:30:00'::interval) FROM public.time_tbl1mysql
(12 rows)

-- select addtime (stub function, result)
--Testcase 1972:
SELECT addtime(c3, '1 12:59:10'), addtime(c3, INTERVAL '6 months 2 hours 30 minutes'), addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), addtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl ORDER BY 1,2,3,4;
       addtime       |       addtime       |           addtime           |           addtime           
---------------------+---------------------+-----------------------------+-----------------------------
 2021-01-05 01:09:40 | 2021-02-07 11:10:29 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-06 12:11:23 | 2021-02-08 22:12:12 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-07 00:11:22 | 2021-02-09 10:12:11 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-08 04:59:10 | 2021-02-10 14:59:59 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-08 13:59:09 | 2021-02-10 23:59:58 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
(5 rows)

-- select addtime (stub function, not pushdown constraints, explain)
--Testcase 1973:
EXPLAIN VERBOSE
SELECT addtime(c3, '1 12:59:10'), addtime(c3, INTERVAL '6 months 2 hours 30 minutes'), addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), addtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.09..434.18 rows=34 width=48)
   Output: (addtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (addtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(time_tbl.c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.23 rows=34 width=48)
         Output: (addtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT addtime(`c3`, '1 12:59:10.0'), addtime(`c3`, '180 2:30:0.0'), addtime(timediff(`c3`, '2008-01-01 00:00:00.000001'), '180 2:30:0.0'), addtime('1 12:59:10.0', '180 2:30:0.0'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.addtime(c3, '1 day 12:59:10'::interval), public.addtime(c3, '6 mons 02:30:00'::interval), public.addtime(public.timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '6 mons 02:30:00'::interval), public.addtime('1 day 12:59:10'::interval, '6 mons 02:30:00'::interval), id FROM public.time_tbl1mysql
(13 rows)

-- select addtime (stub function, not pushdown constraints, result)
--Testcase 1974:
SELECT addtime(c3, '1 12:59:10'), addtime(c3, INTERVAL '6 months 2 hours 30 minutes'), addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), addtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
       addtime       |       addtime       |           addtime           |           addtime           
---------------------+---------------------+-----------------------------+-----------------------------
 2021-01-06 12:11:23 | 2021-02-08 22:12:12 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
(1 row)

-- select addtime (stub function, pushdown constraints, explain)
--Testcase 1975:
EXPLAIN VERBOSE
SELECT addtime(c3, '1 12:59:10'), addtime(c3, INTERVAL '6 months 2 hours 30 minutes'), addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), addtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9363.46..9380.44 rows=6792 width=48)
   Output: (addtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (addtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(time_tbl.c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8931.17 rows=6792 width=48)
         Output: (addtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT addtime(`c3`, '1 12:59:10.0'), addtime(`c3`, '180 2:30:0.0'), addtime(timediff(`c3`, '2008-01-01 00:00:00.000001'), '180 2:30:0.0'), addtime('1 12:59:10.0', '180 2:30:0.0') FROM `test`.`time_tbl2` WHERE ((`id` <> 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.addtime(c3, '1 day 12:59:10'::interval), public.addtime(c3, '6 mons 02:30:00'::interval), public.addtime(public.timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '6 mons 02:30:00'::interval), public.addtime('1 day 12:59:10'::interval, '6 mons 02:30:00'::interval) FROM public.time_tbl1mysql WHERE ((id <> 0))
(12 rows)

-- select addtime (stub function, pushdown constraints, result)
--Testcase 1976:
SELECT addtime(c3, '1 12:59:10'), addtime(c3, INTERVAL '6 months 2 hours 30 minutes'), addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), addtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
       addtime       |       addtime       |           addtime           |           addtime           
---------------------+---------------------+-----------------------------+-----------------------------
 2021-01-06 12:11:23 | 2021-02-08 22:12:12 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-07 00:11:22 | 2021-02-09 10:12:11 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-08 04:59:10 | 2021-02-10 14:59:59 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-08 13:59:09 | 2021-02-10 23:59:58 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
(4 rows)

-- select addtime (stub function, addtime in constraints, explain)
--Testcase 1977:
EXPLAIN VERBOSE
SELECT addtime(c3, '1 12:59:10'), addtime(c3, INTERVAL '6 months 2 hours 30 minutes'), addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), addtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE addtime(c3, '1 12:59:10') != '2000-01-01' ORDER BY 1,2,3,4;
                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11069.96..11086.94 rows=6792 width=48)
   Output: (addtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (addtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(time_tbl.c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..10637.67 rows=6792 width=48)
         Output: (addtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT addtime(`c3`, '1 12:59:10.0'), addtime(`c3`, '180 2:30:0.0'), addtime(timediff(`c3`, '2008-01-01 00:00:00.000001'), '180 2:30:0.0'), addtime('1 12:59:10.0', '180 2:30:0.0') FROM `test`.`time_tbl2` WHERE ((addtime(`c3`, '1 12:59:10.0') <> '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.addtime(c3, '1 day 12:59:10'::interval), public.addtime(c3, '6 mons 02:30:00'::interval), public.addtime(public.timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '6 mons 02:30:00'::interval), public.addtime('1 day 12:59:10'::interval, '6 mons 02:30:00'::interval) FROM public.time_tbl1mysql WHERE ((public.addtime(c3, '1 day 12:59:10'::interval) <> '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- select addtime (stub function, addtime in constraints, result)
--Testcase 1978:
SELECT addtime(c3, '1 12:59:10'), addtime(c3, INTERVAL '6 months 2 hours 30 minutes'), addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), addtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE addtime(c3, '1 12:59:10') != '2000-01-01' ORDER BY 1,2,3,4;
       addtime       |       addtime       |           addtime           |           addtime           
---------------------+---------------------+-----------------------------+-----------------------------
 2021-01-05 01:09:40 | 2021-02-07 11:10:29 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-06 12:11:23 | 2021-02-08 22:12:12 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-07 00:11:22 | 2021-02-09 10:12:11 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-08 04:59:10 | 2021-02-10 14:59:59 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-08 13:59:09 | 2021-02-10 23:59:58 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
(5 rows)

-- select addtime (stub function, addtime in constraints, explain)
--Testcase 1979:
EXPLAIN VERBOSE
SELECT addtime(c3, '1 12:59:10'), addtime(c3, INTERVAL '6 months 2 hours 30 minutes'), addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), addtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE addtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') > '1' ORDER BY 1,2,3,4;
                                                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5029.26..5034.95 rows=2276 width=48)
   Output: (addtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (addtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(time_tbl.c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4902.35 rows=2276 width=48)
         Output: (addtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (addtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (addtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (addtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT addtime(`c3`, '1 12:59:10.0'), addtime(`c3`, '180 2:30:0.0'), addtime(timediff(`c3`, '2008-01-01 00:00:00.000001'), '180 2:30:0.0'), addtime('1 12:59:10.0', '180 2:30:0.0') FROM `test`.`time_tbl2` WHERE ((addtime('1 12:59:10.0', '180 2:30:0.0') > '0 0:0:1.0'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.addtime(c3, '1 day 12:59:10'::interval), public.addtime(c3, '6 mons 02:30:00'::interval), public.addtime(public.timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '6 mons 02:30:00'::interval), public.addtime('1 day 12:59:10'::interval, '6 mons 02:30:00'::interval) FROM public.time_tbl1mysql WHERE ((public.addtime('1 day 12:59:10'::interval, '6 mons 02:30:00'::interval) > '00:00:01'::interval))
(12 rows)

-- select addtime (stub function, addtime in constraints, result)
--Testcase 1980:
SELECT addtime(c3, '1 12:59:10'), addtime(c3, INTERVAL '6 months 2 hours 30 minutes'), addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), addtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE addtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') > '1' ORDER BY 1,2,3,4;
       addtime       |       addtime       |           addtime           |           addtime           
---------------------+---------------------+-----------------------------+-----------------------------
 2021-01-05 01:09:40 | 2021-02-07 11:10:29 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-06 12:11:23 | 2021-02-08 22:12:12 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-07 00:11:22 | 2021-02-09 10:12:11 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-08 04:59:10 | 2021-02-10 14:59:59 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
 2021-01-08 13:59:09 | 2021-02-10 23:59:58 | @ 838 hours 59 mins 59 secs | @ 838 hours 59 mins 59 secs
(5 rows)

-- select addtime with agg (pushdown, explain)
--Testcase 1981:
EXPLAIN VERBOSE
SELECT max(c1), addtime('2021-01-02'::date, max(c1)) FROM time_tbl;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (max(c1)), addtime('2021-01-02 00:00:00'::timestamp without time zone, ((max(c1)))::interval)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c1`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c1) FROM public.time_tbl1mysql
(11 rows)

-- select addtime as nest function with agg (pushdown, result)
--Testcase 1982:
SELECT max(c1), addtime('2021-01-02'::date, max(c1)) FROM time_tbl;
ERROR:  stub addtime(timestamp, interval) is called
CONTEXT:  PL/pgSQL function addtime(timestamp without time zone,interval) line 3 at RAISE
-- select addtime as nest with stub (pushdown, explain)
--Testcase 1983:
EXPLAIN VERBOSE
SELECT addtime(maketime(12, 15, 30), '1 12:59:10') FROM time_tbl;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=16)
   Output: (addtime((maketime(12, 15, 30))::interval, '@ 1 day 12 hours 59 mins 10 secs'::interval))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT addtime(maketime(12, 15, 30), '1 12:59:10.0') FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.addtime(public.maketime(12, 15, 30), '1 day 12:59:10'::interval) FROM public.time_tbl1mysql
(7 rows)

-- select addtime as nest with stub (pushdown, result)
--Testcase 1984:
SELECT addtime(maketime(12, 15, 30), '1 12:59:10') FROM time_tbl;
          addtime           
----------------------------
 @ 49 hours 14 mins 40 secs
 @ 49 hours 14 mins 40 secs
 @ 49 hours 14 mins 40 secs
 @ 49 hours 14 mins 40 secs
 @ 49 hours 14 mins 40 secs
(5 rows)

-- select addtime with non pushdown func and explicit constant (explain)
--Testcase 1985:
EXPLAIN VERBOSE
SELECT addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), pi(), 4.1 FROM time_tbl;
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=56)
   Output: (addtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT addtime(timediff(`c3`, '2008-01-01 00:00:00.000001'), '180 2:30:0.0'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.addtime(public.timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '6 mons 02:30:00'::interval), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(7 rows)

-- select addtime with non pushdown func and explicit constant (result)
--Testcase 1986:
SELECT addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), pi(), 4.1 FROM time_tbl;
           addtime           |        pi         | ?column? 
-----------------------------+-------------------+----------
 @ 838 hours 59 mins 59 secs | 3.141592653589793 |      4.1
 @ 838 hours 59 mins 59 secs | 3.141592653589793 |      4.1
 @ 838 hours 59 mins 59 secs | 3.141592653589793 |      4.1
 @ 838 hours 59 mins 59 secs | 3.141592653589793 |      4.1
 @ 838 hours 59 mins 59 secs | 3.141592653589793 |      4.1
(5 rows)

-- select addtime with order by (explain)
--Testcase 1987:
EXPLAIN VERBOSE
SELECT id, addtime(c1, c1 + '1 12:59:10') FROM time_tbl order by id,addtime(c1, c1 + '1 12:59:10');
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2617.18..2634.25 rows=6826 width=20)
   Output: id, (addtime((c1)::interval, ((c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval))
   Sort Key: time_tbl.id, (addtime((time_tbl.c1)::interval, ((time_tbl.c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2182.47 rows=6826 width=20)
         Output: id, (addtime((c1)::interval, ((c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, addtime(`c1`, (`c1` + '1 12:59:10.0')) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.addtime(c1, (c1 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select addtime with order by (result)
--Testcase 1988:
SELECT id, addtime(c1, c1 + '1 12:59:10') FROM time_tbl order by id,addtime(c1, c1 + '1 12:59:10');
 id |          addtime           
----+----------------------------
  0 | @ 24 hours 21 mins 1 sec
  1 | @ 46 hours 24 mins 27 secs
  2 | @ 22 hours 24 mins 25 secs
  3 | @ 32 hours 1 sec
  4 | 
(5 rows)

-- select addtime with order by index (result)
--Testcase 1989:
SELECT id, addtime(c1, c1 + '1 12:59:10') FROM time_tbl order by 2,1;
 id |          addtime           
----+----------------------------
  2 | @ 22 hours 24 mins 25 secs
  0 | @ 24 hours 21 mins 1 sec
  3 | @ 32 hours 1 sec
  1 | @ 46 hours 24 mins 27 secs
  4 | 
(5 rows)

-- select addtime with order by index (result)
--Testcase 1990:
SELECT id, addtime(c1, c1 + '1 12:59:10') FROM time_tbl order by 1,2;
 id |          addtime           
----+----------------------------
  0 | @ 24 hours 21 mins 1 sec
  1 | @ 46 hours 24 mins 27 secs
  2 | @ 22 hours 24 mins 25 secs
  3 | @ 32 hours 1 sec
  4 | 
(5 rows)

-- select addtime with group by (explain)
--Testcase 1991:
EXPLAIN VERBOSE
SELECT count(id), addtime(c1, c1 + '1 12:59:10') FROM time_tbl group by addtime(c1, c1 + '1 12:59:10') ORDER BY 1,2;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2277.75..2278.25 rows=200 width=24)
   Output: (count(id)), (addtime((c1)::interval, ((c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval))
   Sort Key: (count(time_tbl.id)), (addtime((time_tbl.c1)::interval, ((time_tbl.c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval))
   ->  HashAggregate  (cost=2216.61..2270.11 rows=200 width=24)
         Output: count(id), (addtime((c1)::interval, ((c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval))
         Group Key: (addtime((time_tbl.c1)::interval, ((time_tbl.c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2182.47 rows=6826 width=20)
               Output: (addtime((c1)::interval, ((c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval)), id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT addtime(`c1`, (`c1` + '1 12:59:10.0')), `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.addtime(c1, (c1 + '1 day 12:59:10'::interval)), id FROM public.time_tbl1mysql
(15 rows)

-- select addtime with group by (result)
--Testcase 1992:
SELECT count(id), addtime(c1, c1 + '1 12:59:10') FROM time_tbl group by addtime(c1, c1 + '1 12:59:10') ORDER BY 1,2;
 count |          addtime           
-------+----------------------------
     1 | @ 22 hours 24 mins 25 secs
     1 | @ 24 hours 21 mins 1 sec
     1 | @ 32 hours 1 sec
     1 | @ 46 hours 24 mins 27 secs
     1 | 
(5 rows)

-- select addtime with group by index (result)
--Testcase 1993:
SELECT id, addtime(c1, c1 + '1 12:59:10') FROM time_tbl group by 2,1;
 id |          addtime           
----+----------------------------
  0 | @ 24 hours 21 mins 1 sec
  1 | @ 46 hours 24 mins 27 secs
  2 | @ 22 hours 24 mins 25 secs
  4 | 
  3 | @ 32 hours 1 sec
(5 rows)

-- select addtime with group by index (result)
--Testcase 1994:
SELECT id, addtime(c1, c1 + '1 12:59:10') FROM time_tbl group by 1,2;
 id |          addtime           
----+----------------------------
  3 | @ 32 hours 1 sec
  0 | @ 24 hours 21 mins 1 sec
  1 | @ 46 hours 24 mins 27 secs
  4 | 
  2 | @ 22 hours 24 mins 25 secs
(5 rows)

-- select addtime with group by having (explain)
--Testcase 1995:
EXPLAIN VERBOSE
SELECT count(id), addtime(c1, c1 + '1 12:59:10') FROM time_tbl group by addtime(c1, c1 + '1 12:59:10'), c1 HAVING addtime(c1, c1 + '1 12:59:10') > '1 12:59:10' ORDER BY 1,2;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2306.95..2307.12 rows=67 width=32)
   Output: (count(id)), (addtime((c1)::interval, ((c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval)), c1
   Sort Key: (count(time_tbl.id)), (addtime((time_tbl.c1)::interval, ((time_tbl.c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval))
   ->  HashAggregate  (cost=2233.67..2304.92 rows=67 width=32)
         Output: count(id), (addtime((c1)::interval, ((c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval)), c1
         Group Key: (addtime((time_tbl.c1)::interval, ((time_tbl.c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval)), time_tbl.c1
         Filter: ((addtime((time_tbl.c1)::interval, ((time_tbl.c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval)) > '@ 1 day 12 hours 59 mins 10 secs'::interval)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2182.47 rows=6826 width=28)
               Output: (addtime((c1)::interval, ((c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))::interval)), c1, id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT addtime(`c1`, (`c1` + '1 12:59:10.0')), `c1`, `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.addtime(c1, (c1 + '1 day 12:59:10'::interval)), c1, id FROM public.time_tbl1mysql
(16 rows)

-- select addtime with group by having (result)
--Testcase 1996:
SELECT count(id), addtime(c1, c1 + '1 12:59:10') FROM time_tbl group by addtime(c1, c1 + '1 12:59:10'), c1 HAVING addtime(c1, c1 + '1 12:59:10') > '1 12:59:10' ORDER BY 1,2;
 count |          addtime           
-------+----------------------------
     1 | @ 46 hours 24 mins 27 secs
(1 row)

-- select addtime and as
--Testcase 1997:
SELECT addtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes') as addtime1 FROM time_tbl;
          addtime1           
-----------------------------
 @ 838 hours 59 mins 59 secs
 @ 838 hours 59 mins 59 secs
 @ 838 hours 59 mins 59 secs
 @ 838 hours 59 mins 59 secs
 @ 838 hours 59 mins 59 secs
(5 rows)

-- CONVERT_TZ
-- select convert_tz (stub function, explain)
--Testcase 1998:
EXPLAIN VERBOSE
SELECT convert_tz(c3,'+00:00','+10:00'), convert_tz(c3, 'GMT', 'MET'), convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00','+00:00','+10:00') FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                                                                             QUERY PLAN                                                                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9391.99..9409.05 rows=6826 width=32)
   Output: (convert_tz(c3, '+00:00'::text, '+10:00'::text)), (convert_tz(c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
   Sort Key: (convert_tz(time_tbl.c3, '+00:00'::text, '+10:00'::text)), (convert_tz(time_tbl.c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8957.28 rows=6826 width=32)
         Output: (convert_tz(c3, '+00:00'::text, '+10:00'::text)), (convert_tz(c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT convert_tz(`c3`, '+00:00', '+10:00'), convert_tz(`c3`, 'GMT', 'MET'), convert_tz(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00', '+00:00', '+10:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.convert_tz(c3, '+00:00'::text, '+10:00'::text), public.convert_tz(c3, 'GMT'::text, 'MET'::text), public.convert_tz(public.date_sub(c3, '1 day 12:59:10'::interval), 'GMT'::text, 'MET'::text), public.convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text) FROM public.time_tbl1mysql
(12 rows)

-- select convert_tz (stub function, result)
--Testcase 1999:
SELECT convert_tz(c3,'+00:00','+10:00'), convert_tz(c3, 'GMT', 'MET'), convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00','+00:00','+10:00') FROM time_tbl ORDER BY 1,2,3,4;
     convert_tz      |     convert_tz      |     convert_tz      |     convert_tz      
---------------------+---------------------+---------------------+---------------------
 2021-01-03 22:10:30 | 2021-01-03 13:10:30 | 2021-01-02 00:11:20 | 2021-01-01 22:00:00
 2021-01-05 09:12:13 | 2021-01-05 00:12:13 | 2021-01-03 11:13:03 | 2021-01-01 22:00:00
 2021-01-05 21:12:12 | 2021-01-05 12:12:12 | 2021-01-03 23:13:02 | 2021-01-01 22:00:00
 2021-01-07 02:00:00 | 2021-01-06 17:00:00 | 2021-01-05 04:00:50 | 2021-01-01 22:00:00
 2021-01-07 10:59:59 | 2021-01-07 01:59:59 | 2021-01-05 13:00:49 | 2021-01-01 22:00:00
(5 rows)

-- select convert_tz (stub function, not pushdown constraints, explain)
--Testcase 2000:
EXPLAIN VERBOSE
SELECT convert_tz(c3,'+00:00','+10:00'), convert_tz(c3, 'GMT', 'MET'), convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00','+00:00','+10:00') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.09..434.18 rows=34 width=32)
   Output: (convert_tz(c3, '+00:00'::text, '+10:00'::text)), (convert_tz(c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
   Sort Key: (convert_tz(time_tbl.c3, '+00:00'::text, '+10:00'::text)), (convert_tz(time_tbl.c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.23 rows=34 width=32)
         Output: (convert_tz(c3, '+00:00'::text, '+10:00'::text)), (convert_tz(c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT convert_tz(`c3`, '+00:00', '+10:00'), convert_tz(`c3`, 'GMT', 'MET'), convert_tz(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00', '+00:00', '+10:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.convert_tz(c3, '+00:00'::text, '+10:00'::text), public.convert_tz(c3, 'GMT'::text, 'MET'::text), public.convert_tz(public.date_sub(c3, '1 day 12:59:10'::interval), 'GMT'::text, 'MET'::text), public.convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text), id FROM public.time_tbl1mysql
(13 rows)

-- select convert_tz (stub function, not pushdown constraints, result)
--Testcase 2001:
SELECT convert_tz(c3,'+00:00','+10:00'), convert_tz(c3, 'GMT', 'MET'), convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00','+00:00','+10:00') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
     convert_tz      |     convert_tz      |     convert_tz      |     convert_tz      
---------------------+---------------------+---------------------+---------------------
 2021-01-05 09:12:13 | 2021-01-05 00:12:13 | 2021-01-03 11:13:03 | 2021-01-01 22:00:00
(1 row)

-- select convert_tz (stub function, pushdown constraints, explain)
--Testcase 2002:
EXPLAIN VERBOSE
SELECT convert_tz(c3,'+00:00','+10:00'), convert_tz(c3, 'GMT', 'MET'), convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00','+00:00','+10:00') FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
                                                                                                                                                                                      QUERY PLAN                                                                                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9363.46..9380.44 rows=6792 width=32)
   Output: (convert_tz(c3, '+00:00'::text, '+10:00'::text)), (convert_tz(c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
   Sort Key: (convert_tz(time_tbl.c3, '+00:00'::text, '+10:00'::text)), (convert_tz(time_tbl.c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8931.17 rows=6792 width=32)
         Output: (convert_tz(c3, '+00:00'::text, '+10:00'::text)), (convert_tz(c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT convert_tz(`c3`, '+00:00', '+10:00'), convert_tz(`c3`, 'GMT', 'MET'), convert_tz(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00', '+00:00', '+10:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.convert_tz(c3, '+00:00'::text, '+10:00'::text), public.convert_tz(c3, 'GMT'::text, 'MET'::text), public.convert_tz(public.date_sub(c3, '1 day 12:59:10'::interval), 'GMT'::text, 'MET'::text), public.convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text) FROM public.time_tbl1mysql WHERE ((id <> 0))
(12 rows)

-- select convert_tz (stub function, pushdown constraints, result)
--Testcase 2003:
SELECT convert_tz(c3,'+00:00','+10:00'), convert_tz(c3, 'GMT', 'MET'), convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00','+00:00','+10:00') FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
     convert_tz      |     convert_tz      |     convert_tz      |     convert_tz      
---------------------+---------------------+---------------------+---------------------
 2021-01-05 09:12:13 | 2021-01-05 00:12:13 | 2021-01-03 11:13:03 | 2021-01-01 22:00:00
 2021-01-05 21:12:12 | 2021-01-05 12:12:12 | 2021-01-03 23:13:02 | 2021-01-01 22:00:00
 2021-01-07 02:00:00 | 2021-01-06 17:00:00 | 2021-01-05 04:00:50 | 2021-01-01 22:00:00
 2021-01-07 10:59:59 | 2021-01-07 01:59:59 | 2021-01-05 13:00:49 | 2021-01-01 22:00:00
(4 rows)

-- select convert_tz (stub function, convert_tz in constraints, explain)
--Testcase 2004:
EXPLAIN VERBOSE
SELECT convert_tz(c3,'+00:00','+10:00'), convert_tz(c3, 'GMT', 'MET'), convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00','+00:00','+10:00') FROM time_tbl WHERE convert_tz(c3,'+00:00','+10:00') != '2000-01-01' ORDER BY 1,2,3,4;
                                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11069.96..11086.94 rows=6792 width=32)
   Output: (convert_tz(c3, '+00:00'::text, '+10:00'::text)), (convert_tz(c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
   Sort Key: (convert_tz(time_tbl.c3, '+00:00'::text, '+10:00'::text)), (convert_tz(time_tbl.c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..10637.67 rows=6792 width=32)
         Output: (convert_tz(c3, '+00:00'::text, '+10:00'::text)), (convert_tz(c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT convert_tz(`c3`, '+00:00', '+10:00'), convert_tz(`c3`, 'GMT', 'MET'), convert_tz(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00', '+00:00', '+10:00') FROM `test`.`time_tbl2` WHERE ((convert_tz(`c3`, '+00:00', '+10:00') <> '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.convert_tz(c3, '+00:00'::text, '+10:00'::text), public.convert_tz(c3, 'GMT'::text, 'MET'::text), public.convert_tz(public.date_sub(c3, '1 day 12:59:10'::interval), 'GMT'::text, 'MET'::text), public.convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text) FROM public.time_tbl1mysql WHERE ((public.convert_tz(c3, '+00:00'::text, '+10:00'::text) <> '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- select convert_tz (stub function, convert_tz in constraints, result)
--Testcase 2005:
SELECT convert_tz(c3,'+00:00','+10:00'), convert_tz(c3, 'GMT', 'MET'), convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00','+00:00','+10:00') FROM time_tbl WHERE convert_tz(c3,'+00:00','+10:00') != '2000-01-01' ORDER BY 1,2,3,4;
     convert_tz      |     convert_tz      |     convert_tz      |     convert_tz      
---------------------+---------------------+---------------------+---------------------
 2021-01-03 22:10:30 | 2021-01-03 13:10:30 | 2021-01-02 00:11:20 | 2021-01-01 22:00:00
 2021-01-05 09:12:13 | 2021-01-05 00:12:13 | 2021-01-03 11:13:03 | 2021-01-01 22:00:00
 2021-01-05 21:12:12 | 2021-01-05 12:12:12 | 2021-01-03 23:13:02 | 2021-01-01 22:00:00
 2021-01-07 02:00:00 | 2021-01-06 17:00:00 | 2021-01-05 04:00:50 | 2021-01-01 22:00:00
 2021-01-07 10:59:59 | 2021-01-07 01:59:59 | 2021-01-05 13:00:49 | 2021-01-01 22:00:00
(5 rows)

-- select convert_tz (stub function, convert_tz in constraints, explain)
--Testcase 2006:
EXPLAIN VERBOSE
SELECT convert_tz(c3,'+00:00','+10:00'), convert_tz(c3, 'GMT', 'MET'), convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00','+00:00','+10:00') FROM time_tbl WHERE convert_tz('2021-01-01 12:00:00','+00:00','+10:00') > '2000-01-01' ORDER BY 1,2,3,4;


 Sort  (cost=5029.26..5034.95 rows=2276 width=32)
   Output: (convert_tz(c3, '+00:00'::text, '+10:00'::text)), (convert_tz(c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
   Sort Key: (convert_tz(time_tbl.c3, '+00:00'::text, '+10:00'::text)), (convert_tz(time_tbl.c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4902.35 rows=2276 width=32)
         Output: (convert_tz(c3, '+00:00'::text, '+10:00'::text)), (convert_tz(c3, 'GMT'::text, 'MET'::text)), (convert_tz(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), (convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT convert_tz(`c3`, '+00:00', '+10:00'), convert_tz(`c3`, 'GMT', 'MET'), convert_tz(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00', '+00:00', '+10:00') FROM `test`.`time_tbl2` WHERE ((convert_tz('2021-01-01 12:00:00', '+00:00', '+10:00') > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.convert_tz(c3, '+00:00'::text, '+10:00'::text), public.convert_tz(c3, 'GMT'::text, 'MET'::text), public.convert_tz(public.date_sub(c3, '1 day 12:59:10'::interval), 'GMT'::text, 'MET'::text), public.convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text) FROM public.time_tbl1mysql WHERE ((public.convert_tz('2021-01-01 12:00:00'::timestamp without time zone, '+00:00'::text, '+10:00'::text) > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- select convert_tz (stub function, convert_tz in constraints, result)
--Testcase 2007:
SELECT convert_tz(c3,'+00:00','+10:00'), convert_tz(c3, 'GMT', 'MET'), convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET'), convert_tz('2021-01-01 12:00:00','+00:00','+10:00') FROM time_tbl WHERE convert_tz('2021-01-01 12:00:00','+00:00','+10:00') > '2000-01-01' ORDER BY 1,2,3,4;
     convert_tz      |     convert_tz      |     convert_tz      |     convert_tz      
---------------------+---------------------+---------------------+---------------------
 2021-01-03 22:10:30 | 2021-01-03 13:10:30 | 2021-01-02 00:11:20 | 2021-01-01 22:00:00
 2021-01-05 09:12:13 | 2021-01-05 00:12:13 | 2021-01-03 11:13:03 | 2021-01-01 22:00:00
 2021-01-05 21:12:12 | 2021-01-05 12:12:12 | 2021-01-03 23:13:02 | 2021-01-01 22:00:00
 2021-01-07 02:00:00 | 2021-01-06 17:00:00 | 2021-01-05 04:00:50 | 2021-01-01 22:00:00
 2021-01-07 10:59:59 | 2021-01-07 01:59:59 | 2021-01-05 13:00:49 | 2021-01-01 22:00:00
(5 rows)

-- select convert_tz with agg (pushdown, explain)
--Testcase 2008:
EXPLAIN VERBOSE
SELECT max(c3), convert_tz(max(c3), '+00:00','+10:00') FROM time_tbl;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (max(c3)), convert_tz((max(c3)), '+00:00'::text, '+10:00'::text)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select convert_tz as nest function with agg (pushdown, result)
--Testcase 2009:
SELECT max(c3), convert_tz(max(c3), '+00:00','+10:00') FROM time_tbl;
ERROR:  stub convert_tz(timestamp, text, text) is called
CONTEXT:  PL/pgSQL function convert_tz(timestamp without time zone,text,text) line 3 at RAISE
-- select convert_tz with non pushdown func and explicit constant (explain)
--Testcase 2010:
EXPLAIN VERBOSE
SELECT convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET'), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=48)
   Output: (convert_tz(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), '3.141592653589793'::double precision, 4.1
   Sort Key: (convert_tz(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=48)
         Output: (convert_tz(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), 'GMT'::text, 'MET'::text)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT convert_tz(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), 'GMT', 'MET'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.convert_tz(public.date_sub(c3, '1 day 12:59:10'::interval), 'GMT'::text, 'MET'::text), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select convert_tz with non pushdown func and explicit constant (result)
--Testcase 2011:
SELECT convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET'), pi(), 4.1 FROM time_tbl ORDER BY 1;
     convert_tz      |        pi         | ?column? 
---------------------+-------------------+----------
 2021-01-02 00:11:20 | 3.141592653589793 |      4.1
 2021-01-03 11:13:03 | 3.141592653589793 |      4.1
 2021-01-03 23:13:02 | 3.141592653589793 |      4.1
 2021-01-05 04:00:50 | 3.141592653589793 |      4.1
 2021-01-05 13:00:49 | 3.141592653589793 |      4.1
(5 rows)

-- select convert_tz with order by (explain)
--Testcase 2012:
EXPLAIN VERBOSE
SELECT id, convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') FROM time_tbl order by id,convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00');
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=12)
   Output: id, (convert_tz((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text))
   Sort Key: time_tbl.id, (convert_tz((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
         Output: id, (convert_tz((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, convert_tz((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND), '+00:00', '+10:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.convert_tz((c3 + '1 day 12:59:10'::interval), '+00:00'::text, '+10:00'::text) FROM public.time_tbl1mysql
(12 rows)

-- select convert_tz with order by (result)
--Testcase 2013:
SELECT id, convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') FROM time_tbl order by id,convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00');
 id |     convert_tz      
----+---------------------
  0 | 2021-01-05 11:09:40
  1 | 2021-01-06 22:11:23
  2 | 2021-01-07 10:11:22
  3 | 2021-01-08 14:59:10
  4 | 2021-01-08 23:59:09
(5 rows)

-- select convert_tz with order by index (result)
--Testcase 2014:
SELECT id, convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') FROM time_tbl order by 2,1;
 id |     convert_tz      
----+---------------------
  0 | 2021-01-05 11:09:40
  1 | 2021-01-06 22:11:23
  2 | 2021-01-07 10:11:22
  3 | 2021-01-08 14:59:10
  4 | 2021-01-08 23:59:09
(5 rows)

-- select convert_tz with order by index (result)
--Testcase 2015:
SELECT id, convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') FROM time_tbl order by 1,2;
 id |     convert_tz      
----+---------------------
  0 | 2021-01-05 11:09:40
  1 | 2021-01-06 22:11:23
  2 | 2021-01-07 10:11:22
  3 | 2021-01-08 14:59:10
  4 | 2021-01-08 23:59:09
(5 rows)

-- select convert_tz with group by (explain)
--Testcase 2016:
EXPLAIN VERBOSE
SELECT count(id), convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') FROM time_tbl group by convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') ORDER BY 1,2;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=16)
   Output: (count(id)), (convert_tz((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text))
   Sort Key: (count(time_tbl.id)), (convert_tz((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=16)
         Output: count(id), (convert_tz((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text))
         Group Key: (convert_tz((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (convert_tz((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text)), id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT convert_tz((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND), '+00:00', '+10:00'), `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.convert_tz((c3 + '1 day 12:59:10'::interval), '+00:00'::text, '+10:00'::text), id FROM public.time_tbl1mysql
(15 rows)

-- select convert_tz with group by (result)
--Testcase 2017:
SELECT count(id), convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') FROM time_tbl group by convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') ORDER BY 1,2;
 count |     convert_tz      
-------+---------------------
     1 | 2021-01-05 11:09:40
     1 | 2021-01-06 22:11:23
     1 | 2021-01-07 10:11:22
     1 | 2021-01-08 14:59:10
     1 | 2021-01-08 23:59:09
(5 rows)

-- select convert_tz with group by index (result)
--Testcase 2018:
SELECT id, convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') FROM time_tbl group by 2,1;
 id |     convert_tz      
----+---------------------
  1 | 2021-01-06 22:11:23
  4 | 2021-01-08 23:59:09
  3 | 2021-01-08 14:59:10
  0 | 2021-01-05 11:09:40
  2 | 2021-01-07 10:11:22
(5 rows)

-- select convert_tz with group by index (result)
--Testcase 2019:
SELECT id, convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') FROM time_tbl group by 1,2;
 id |     convert_tz      
----+---------------------
  4 | 2021-01-08 23:59:09
  3 | 2021-01-08 14:59:10
  2 | 2021-01-07 10:11:22
  0 | 2021-01-05 11:09:40
  1 | 2021-01-06 22:11:23
(5 rows)

-- select convert_tz with group by having (explain)
--Testcase 2020:
EXPLAIN VERBOSE
SELECT count(id), convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') FROM time_tbl group by convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00'),id,c3 HAVING convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') > '2000-01-01 12:59:10' ORDER BY 1,2;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2288.55..2288.72 rows=67 width=28)
   Output: (count(id)), (convert_tz((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text)), id, c3
   Sort Key: (count(time_tbl.id)), (convert_tz((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text))
   ->  HashAggregate  (cost=2216.61..2286.52 rows=67 width=28)
         Output: count(id), (convert_tz((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text)), id, c3
         Group Key: (convert_tz((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text)), time_tbl.id, time_tbl.c3
         Filter: ((convert_tz((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text)) > '2000-01-01 12:59:10'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=20)
               Output: (convert_tz((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '+00:00'::text, '+10:00'::text)), id, c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT convert_tz((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND), '+00:00', '+10:00'), `id`, `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.convert_tz((c3 + '1 day 12:59:10'::interval), '+00:00'::text, '+10:00'::text), id, c3 FROM public.time_tbl1mysql
(16 rows)

-- select convert_tz with group by having (result)
--Testcase 2021:
SELECT count(id), convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') FROM time_tbl group by convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00'),id,c3 HAVING convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') > '2000-01-01 12:59:10' ORDER BY 1,2;
 count |     convert_tz      
-------+---------------------
     1 | 2021-01-05 11:09:40
     1 | 2021-01-06 22:11:23
     1 | 2021-01-07 10:11:22
     1 | 2021-01-08 14:59:10
     1 | 2021-01-08 23:59:09
(5 rows)

-- select convert_tz with group by index having (result)
--Testcase 2022:
SELECT id, c3, convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') FROM time_tbl group by 3,2,1 HAVING convert_tz(c3 + '1 12:59:10' , '+00:00','+10:00') > '2000-01-01 12:59:10' ORDER BY 1,2;
 id |         c3          |     convert_tz      
----+---------------------+---------------------
  0 | 2021-01-03 12:10:30 | 2021-01-05 11:09:40
  1 | 2021-01-04 23:12:13 | 2021-01-06 22:11:23
  2 | 2021-01-05 11:12:12 | 2021-01-07 10:11:22
  3 | 2021-01-06 16:00:00 | 2021-01-08 14:59:10
  4 | 2021-01-07 00:59:59 | 2021-01-08 23:59:09
(5 rows)

-- select convert_tz and as
--Testcase 2023:
SELECT convert_tz(date_sub(c3, '1 12:59:10'), 'GMT', 'MET') as convert_tz1 FROM time_tbl ORDER BY 1;
     convert_tz1     
---------------------
 2021-01-02 00:11:20
 2021-01-03 11:13:03
 2021-01-03 23:13:02
 2021-01-05 04:00:50
 2021-01-05 13:00:49
(5 rows)

-- CURDATE()
-- curdate is mutable function, some executes will return different result
-- select curdate (stub function, explain)
--Testcase 2024:
EXPLAIN VERBOSE
SELECT curdate() FROM time_tbl;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=4)
   Output: (curdate())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT curdate() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.curdate() FROM public.time_tbl1mysql
(7 rows)

-- select curdate (stub function, not pushdown constraints, explain)
--Testcase 2025:
EXPLAIN VERBOSE
SELECT curdate() FROM time_tbl WHERE to_hex(id) > '0';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..982.41 rows=2276 width=4)
   Output: (curdate())
   Filter: (to_hex(time_tbl.id) > '0'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT curdate(), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.curdate(), id FROM public.time_tbl1mysql
(8 rows)

-- select curdate (stub function, pushdown constraints, explain)
--Testcase 2026:
EXPLAIN VERBOSE
SELECT curdate() FROM time_tbl WHERE id = 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..314.50 rows=34 width=4)
   Output: (curdate())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT curdate() FROM `test`.`time_tbl2` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.curdate() FROM public.time_tbl1mysql WHERE ((id = 1))
(7 rows)

-- select curdate (stub function, curdate in constraints, explain)
--Testcase 2027:
EXPLAIN VERBOSE
SELECT curdate() FROM time_tbl WHERE curdate() > '2000-01-01';
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=4)
   Output: (curdate())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT curdate() FROM `test`.`time_tbl2` WHERE ((curdate() > '2000-01-01'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.curdate() FROM public.time_tbl1mysql WHERE ((public.curdate() > '2000-01-01'::date))
(7 rows)

-- curdate in constrains (stub function, explain)
--Testcase 2028:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE curdate() > '2000-01-01' ORDER BY 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2057.35 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((curdate() > '2000-01-01'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.curdate() > '2000-01-01'::date))
(12 rows)

-- curdate in constrains (stub function, result)
--Testcase 2029:
SELECT c1 FROM time_tbl WHERE curdate() > '2000-01-01' ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- curdate as parameter of adddate(stub function, explain)
--Testcase 2030:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE adddate(curdate(), 31) > '2000-01-01' ORDER BY 1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3907.82..3913.51 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3780.91 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((adddate(curdate(), 31) > '2000-01-01'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.adddate(public.curdate(), 31) > '2000-01-01'::date))
(12 rows)

-- curdate as parameter of adddate(stub function, result)
--Testcase 2031:
SELECT c1 FROM time_tbl WHERE adddate(curdate(), 31) > '2000-01-01' ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select curdate and agg (pushdown, explain)
--Testcase 2032:
EXPLAIN VERBOSE
SELECT curdate(), sum(id) FROM time_tbl ORDER BY 1,2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort  (cost=159.42..159.42 rows=1 width=12)
   Output: (curdate()), (sum(id))
   Sort Key: (curdate()), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
         Output: curdate(), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select curdate and log2 (pushdown, explain)
--Testcase 2033:
EXPLAIN VERBOSE
SELECT curdate(), log2(id) FROM time_tbl ORDER BY 1,2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=12)
   Output: (curdate()), (log2((id)::double precision))
   Sort Key: (curdate()), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=12)
         Output: (curdate()), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT curdate(), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.curdate(), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select curdate with non pushdown func and explicit constant (explain)
--Testcase 2034:
EXPLAIN VERBOSE
SELECT curdate(), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=40)
   Output: (curdate()), (to_hex(id)), 4
   Sort Key: (curdate()), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=40)
         Output: curdate(), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select curdate with order by (explain)
--Testcase 2035:
EXPLAIN VERBOSE
SELECT curdate(), c1 FROM time_tbl ORDER BY c1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=12)
   Output: curdate(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- select curdate with order by index (explain)
--Testcase 2036:
EXPLAIN VERBOSE
SELECT curdate(), c1 FROM time_tbl ORDER BY 2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=12)
   Output: curdate(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- curdate constraints with order by (explain)
--Testcase 2037:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE adddate(curdate(), 31) > '2000-01-01' ORDER BY c1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3907.82..3913.51 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3780.91 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((adddate(curdate(), 31) > '2000-01-01'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.adddate(public.curdate(), 31) > '2000-01-01'::date))
(12 rows)

-- curdate constraints with order by (result)
--Testcase 2038:
SELECT c1 FROM time_tbl WHERE adddate(curdate(), 31) > '2000-01-01' ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select curdate with group by (explain)
--Testcase 2039:
EXPLAIN VERBOSE
SELECT curdate(), c1 FROM time_tbl GROUP BY c1 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=12)
   Output: (curdate()), c1
   Sort Key: (curdate()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=12)
         Output: curdate(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select curdate with group by index (explain)
--Testcase 2040:
EXPLAIN VERBOSE
SELECT curdate(), c1 FROM time_tbl GROUP BY 2 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=12)
   Output: (curdate()), c1
   Sort Key: (curdate()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=12)
         Output: curdate(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select curdate with group by having (explain)
--Testcase 2041:
EXPLAIN VERBOSE
SELECT curdate(), c1 FROM time_tbl GROUP BY curdate(),c1 HAVING curdate() > '2000-01-01' ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=12)
   Output: (curdate()), c1
   Sort Key: (curdate()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=12)
         Output: (curdate()), c1
         Group Key: (curdate()), time_tbl.c1
         Filter: ((curdate()) > '2000-01-01'::date)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (curdate()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT curdate(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.curdate(), c1 FROM public.time_tbl1mysql
(16 rows)

-- select curdate with group by index having (explain)
--Testcase 2042:
EXPLAIN VERBOSE
SELECT curdate(), c1 FROM time_tbl GROUP BY 1,2 HAVING curdate() > '2000-01-01' ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=12)
   Output: (curdate()), c1
   Sort Key: (curdate()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=12)
         Output: (curdate()), c1
         Group Key: (curdate()), time_tbl.c1
         Filter: ((curdate()) > '2000-01-01'::date)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (curdate()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT curdate(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.curdate(), c1 FROM public.time_tbl1mysql
(16 rows)

-- curdate constraints with group by (explain)
--Testcase 2043:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE adddate(curdate(), 31) > '2000-01-01' GROUP BY c1 ORDER BY 1;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1891.55..1891.56 rows=0 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan  (cost=112.84..1891.54 rows=0 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((adddate(curdate(), 31) > '2000-01-01')) GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.adddate(public.curdate(), 31) > '2000-01-01'::date)) GROUP BY 1
(16 rows)

-- curdate constraints with group by (result)
--Testcase 2044:
SELECT c1 FROM time_tbl WHERE adddate(curdate(), 31) > '2000-01-01' GROUP BY c1 ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select curdate and as
--Testcase 2045:
EXPLAIN VERBOSE
SELECT curdate() as curdate1 FROM time_tbl ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=4)
   Output: (curdate())
   Sort Key: (curdate())
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=4)
         Output: (curdate())
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT curdate() FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.curdate() FROM public.time_tbl1mysql
(12 rows)

-- CURRENT_DATE()
-- mysql_current_date is mutable function, some executes will return different result
-- select mysql_current_date (stub function, explain)
--Testcase 2046:
EXPLAIN VERBOSE
SELECT mysql_current_date() FROM time_tbl;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=4)
   Output: (mysql_current_date())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_date() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_date() FROM public.time_tbl1mysql
(7 rows)

-- select mysql_current_date (stub function, not pushdown constraints, explain)
--Testcase 2047:
EXPLAIN VERBOSE
SELECT mysql_current_date() FROM time_tbl WHERE to_hex(id) > '0';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..982.41 rows=2276 width=4)
   Output: (mysql_current_date())
   Filter: (to_hex(time_tbl.id) > '0'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_date(), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_date(), id FROM public.time_tbl1mysql
(8 rows)

-- select mysql_current_date (stub function, pushdown constraints, explain)
--Testcase 2048:
EXPLAIN VERBOSE
SELECT mysql_current_date() FROM time_tbl WHERE id = 1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..314.50 rows=34 width=4)
   Output: (mysql_current_date())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_date() FROM `test`.`time_tbl2` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_date() FROM public.time_tbl1mysql WHERE ((id = 1))
(7 rows)

-- select mysql_current_date (stub function, mysql_current_date in constraints, explain)
--Testcase 2049:
EXPLAIN VERBOSE
SELECT mysql_current_date() FROM time_tbl WHERE mysql_current_date() > '2000-01-01';
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=4)
   Output: (mysql_current_date())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_date() FROM `test`.`time_tbl2` WHERE ((current_date() > '2000-01-01'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_date() FROM public.time_tbl1mysql WHERE ((public.mysql_current_date() > '2000-01-01'::date))
(7 rows)

-- mysql_current_date in constrains (stub function, explain)
--Testcase 2050:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE mysql_current_date() > '2000-01-01' ORDER BY 1;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2057.35 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((current_date() > '2000-01-01'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.mysql_current_date() > '2000-01-01'::date))
(12 rows)

-- mysql_current_date in constrains (stub function, result)
--Testcase 2051:
SELECT c1 FROM time_tbl WHERE mysql_current_date() > '2000-01-01' ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- mysql_current_date as parameter of adddate(stub function, explain)
--Testcase 2052:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE adddate(mysql_current_date(), 31) > '2000-01-01' ORDER BY 1;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3907.82..3913.51 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3780.91 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((adddate(current_date(), 31) > '2000-01-01'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.adddate(public.mysql_current_date(), 31) > '2000-01-01'::date))
(12 rows)

-- mysql_current_date as parameter of adddate(stub function, result)
--Testcase 2053:
SELECT c1 FROM time_tbl WHERE adddate(mysql_current_date(), 31) > '2000-01-01' ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_current_date and agg (pushdown, explain)
--Testcase 2054:
EXPLAIN VERBOSE
SELECT mysql_current_date(), sum(id) FROM time_tbl ORDER BY 1,2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort  (cost=159.42..159.42 rows=1 width=12)
   Output: (mysql_current_date()), (sum(id))
   Sort Key: (mysql_current_date()), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
         Output: mysql_current_date(), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select mysql_current_date and log2 (pushdown, explain)
--Testcase 2055:
EXPLAIN VERBOSE
SELECT mysql_current_date(), log2(id) FROM time_tbl ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=12)
   Output: (mysql_current_date()), (log2((id)::double precision))
   Sort Key: (mysql_current_date()), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=12)
         Output: (mysql_current_date()), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT current_date(), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_current_date(), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select mysql_current_date with non pushdown func and explicit constant (explain)
--Testcase 2056:
EXPLAIN VERBOSE
SELECT mysql_current_date(), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=40)
   Output: (mysql_current_date()), (to_hex(id)), 4
   Sort Key: (mysql_current_date()), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=40)
         Output: mysql_current_date(), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select mysql_current_date with order by (explain)
--Testcase 2057:
EXPLAIN VERBOSE
SELECT mysql_current_date(), c1 FROM time_tbl ORDER BY c1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=12)
   Output: mysql_current_date(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- select mysql_current_date with order by index (explain)
--Testcase 2058:
EXPLAIN VERBOSE
SELECT mysql_current_date(), c1 FROM time_tbl ORDER BY 2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=12)
   Output: mysql_current_date(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- mysql_current_date constraints with order by (explain)
--Testcase 2059:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE adddate(mysql_current_date(), 31) > '2000-01-01' ORDER BY c1;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3907.82..3913.51 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3780.91 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((adddate(current_date(), 31) > '2000-01-01'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.adddate(public.mysql_current_date(), 31) > '2000-01-01'::date))
(12 rows)

-- mysql_current_date constraints with order by (result)
--Testcase 2060:
SELECT c1 FROM time_tbl WHERE adddate(mysql_current_date(), 31) > '2000-01-01' ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_current_date with group by (explain)
--Testcase 2061:
EXPLAIN VERBOSE
SELECT mysql_current_date(), c1 FROM time_tbl GROUP BY c1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Foreign Scan  (cost=118.53..223.66 rows=0 width=12)
   Output: mysql_current_date(), c1
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(11 rows)

-- select mysql_current_date with group by index (explain)
--Testcase 2062:
EXPLAIN VERBOSE
SELECT mysql_current_date(), c1 FROM time_tbl GROUP BY 2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Foreign Scan  (cost=118.53..223.66 rows=0 width=12)
   Output: mysql_current_date(), c1
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(11 rows)

-- select mysql_current_date with group by having (explain)
--Testcase 2063:
EXPLAIN VERBOSE
SELECT mysql_current_date(), c1 FROM time_tbl GROUP BY mysql_current_date(), c1 HAVING mysql_current_date() > '2000-01-01';
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..4525.99 rows=2275 width=12)
   Output: (mysql_current_date()), c1
   Group Key: (mysql_current_date()), time_tbl.c1
   Filter: ((mysql_current_date()) > '2000-01-01'::date)
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
         Output: (mysql_current_date()), c1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT current_date(), `c1` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.mysql_current_date(), c1 FROM public.time_tbl1mysql
(11 rows)

-- select mysql_current_date with group by index having (explain)
--Testcase 2064:
EXPLAIN VERBOSE
SELECT mysql_current_date(), c1 FROM time_tbl GROUP BY 2,1 HAVING mysql_current_date() > '2000-01-01';
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..4525.99 rows=2275 width=12)
   Output: (mysql_current_date()), c1
   Group Key: time_tbl.c1, (mysql_current_date())
   Filter: ((mysql_current_date()) > '2000-01-01'::date)
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
         Output: (mysql_current_date()), c1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT current_date(), `c1` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.mysql_current_date(), c1 FROM public.time_tbl1mysql
(11 rows)

-- mysql_current_date constraints with group by (explain)
--Testcase 2065:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE adddate(mysql_current_date(), 31) > '2000-01-01' GROUP BY c1 ORDER BY 1;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1891.55..1891.56 rows=0 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan  (cost=112.84..1891.54 rows=0 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((adddate(current_date(), 31) > '2000-01-01')) GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.adddate(public.mysql_current_date(), 31) > '2000-01-01'::date)) GROUP BY 1
(16 rows)

-- mysql_current_date constraints with group by (result)
--Testcase 2066:
SELECT c1 FROM time_tbl WHERE adddate(mysql_current_date(), 31) > '2000-01-01' GROUP BY c1 ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_current_date and as
--Testcase 2067:
EXPLAIN VERBOSE
SELECT mysql_current_date() as mysql_current_date1 FROM time_tbl;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=4)
   Output: (mysql_current_date())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_date() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_date() FROM public.time_tbl1mysql
(7 rows)

-- CURTIME()
-- curtime is mutable function, some executes will return different result
-- select curtime (stub function, explain)
--Testcase 2068:
EXPLAIN VERBOSE
SELECT curtime() FROM time_tbl;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (curtime())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT curtime() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.curtime() FROM public.time_tbl1mysql
(7 rows)

-- select curtime (stub function, not pushdown constraints, explain)
--Testcase 2069:
EXPLAIN VERBOSE
SELECT curtime() FROM time_tbl WHERE to_hex(id) > '0';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..982.41 rows=2276 width=8)
   Output: (curtime())
   Filter: (to_hex(time_tbl.id) > '0'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT curtime(), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.curtime(), id FROM public.time_tbl1mysql
(8 rows)

-- select curtime (stub function, pushdown constraints, explain)
--Testcase 2070:
EXPLAIN VERBOSE
SELECT curtime() FROM time_tbl WHERE id = 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..314.50 rows=34 width=8)
   Output: (curtime())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT curtime() FROM `test`.`time_tbl2` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.curtime() FROM public.time_tbl1mysql WHERE ((id = 1))
(7 rows)

-- select curtime (stub function, curtime in constraints, explain)
--Testcase 2071:
EXPLAIN VERBOSE
SELECT curtime() FROM time_tbl WHERE curtime() > '00:00:00';
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=8)
   Output: (curtime())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT curtime() FROM `test`.`time_tbl2` WHERE ((curtime() > '00:00:00'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.curtime() FROM public.time_tbl1mysql WHERE ((public.curtime() > '00:00:00'::time without time zone))
(7 rows)

-- curtime in constrains (stub function, explain)
--Testcase 2072:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE curtime() > '00:00:00' ORDER BY 1;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2057.35 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((curtime() > '00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.curtime() > '00:00:00'::time without time zone))
(12 rows)

-- curtime in constrains (stub function, result)
--Testcase 2073:
SELECT c1 FROM time_tbl WHERE curtime() > '00:00:00' ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- curtime as parameter of addtime(stub function, explain)
--Testcase 2074:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(curtime(), '1 12:59:10') > '00:00:00' ORDER BY 1;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3907.82..3913.51 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3780.91 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(curtime(), '1 12:59:10.0') > '0'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.curtime(), '1 day 12:59:10'::interval) > '00:00:00'::interval))
(12 rows)

-- curtime as parameter of addtime(stub function, result)
--Testcase 2075:
SELECT c1 FROM time_tbl WHERE addtime(curtime(), '1 12:59:10') > '00:00:00' ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select curtime and agg (pushdown, explain)
--Testcase 2076:
EXPLAIN VERBOSE
SELECT curtime(), sum(id) FROM time_tbl ORDER BY 1,2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort  (cost=159.42..159.42 rows=1 width=16)
   Output: (curtime()), (sum(id))
   Sort Key: (curtime()), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
         Output: curtime(), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select curtime and log2 (pushdown, explain)
--Testcase 2077:
EXPLAIN VERBOSE
SELECT curtime(), log2(id) FROM time_tbl ORDER BY 1,2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=16)
   Output: (curtime()), (log2((id)::double precision))
   Sort Key: (curtime()), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=16)
         Output: (curtime()), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT curtime(), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.curtime(), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select curtime with non pushdown func and explicit constant (explain)
--Testcase 2078:
EXPLAIN VERBOSE
SELECT curtime(), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=44)
   Output: (curtime()), (to_hex(id)), 4
   Sort Key: (curtime()), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=44)
         Output: curtime(), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select curtime with order by (explain)
--Testcase 2079:
EXPLAIN VERBOSE
SELECT curtime(), c1 FROM time_tbl ORDER BY c1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: curtime(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- select curtime with order by index (explain)
--Testcase 2080:
EXPLAIN VERBOSE
SELECT curtime(), c1 FROM time_tbl ORDER BY 2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: curtime(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- curtime constraints with order by (explain)
--Testcase 2081:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(curtime(), '1 12:59:10') > '00:00:00' ORDER BY c1;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3907.82..3913.51 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3780.91 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(curtime(), '1 12:59:10.0') > '0'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.curtime(), '1 day 12:59:10'::interval) > '00:00:00'::interval))
(12 rows)

-- curtime constraints with order by (result)
--Testcase 2082:
SELECT c1 FROM time_tbl WHERE addtime(curtime(), '1 12:59:10') > '00:00:00' ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select curtime with group by (explain)
--Testcase 2083:
EXPLAIN VERBOSE
SELECT curtime(), c1 FROM time_tbl GROUP BY c1 ORDER BY 1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (curtime()), c1
   Sort Key: (curtime())
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: curtime(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select curtime with group by index (explain)
--Testcase 2084:
EXPLAIN VERBOSE
SELECT curtime(), c1 FROM time_tbl GROUP BY 2 ORDER BY 1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (curtime()), c1
   Sort Key: (curtime())
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: curtime(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select curtime with group by having (explain)
--Testcase 2085:
EXPLAIN VERBOSE
SELECT curtime(), c1 FROM time_tbl GROUP BY curtime(),c1 HAVING curtime() > '00:00:00';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
   Output: (curtime()), c1
   Group Key: (curtime()), time_tbl.c1
   Filter: ((curtime()) > '00:00:00'::time without time zone)
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
         Output: (curtime()), c1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT curtime(), `c1` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.curtime(), c1 FROM public.time_tbl1mysql
(11 rows)

-- select curtime with group by index having (explain)
--Testcase 2086:
EXPLAIN VERBOSE
SELECT curtime(), c1 FROM time_tbl GROUP BY 2,1 HAVING curtime() > '00:00:00' ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (curtime()), c1
   Sort Key: (curtime()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (curtime()), c1
         Group Key: (curtime()), time_tbl.c1
         Filter: ((curtime()) > '00:00:00'::time without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (curtime()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT curtime(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.curtime(), c1 FROM public.time_tbl1mysql
(16 rows)

-- curtime constraints with group by (explain)
--Testcase 2087:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(curtime(), '1 12:59:10') > '00:00:00' GROUP BY c1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1891.55..1891.56 rows=0 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan  (cost=112.84..1891.54 rows=0 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(curtime(), '1 12:59:10.0') > '0')) GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.curtime(), '1 day 12:59:10'::interval) > '00:00:00'::interval)) GROUP BY 1
(16 rows)

-- curtime constraints with group by (result)
--Testcase 2088:
SELECT c1 FROM time_tbl WHERE addtime(curtime(), '1 12:59:10') > '00:00:00' GROUP BY c1 ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select curtime and as
--Testcase 2089:
EXPLAIN VERBOSE
SELECT curtime() as curtime1 FROM time_tbl ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=8)
   Output: (curtime())
   Sort Key: (curtime())
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (curtime())
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT curtime() FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.curtime() FROM public.time_tbl1mysql
(12 rows)

-- CURRENT_TIME()
-- mysql_current_time is mutable function, some executes will return different result
-- select mysql_current_time (stub function, explain)
--Testcase 2090:
EXPLAIN VERBOSE
SELECT mysql_current_time() FROM time_tbl;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (mysql_current_time())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_time() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_time() FROM public.time_tbl1mysql
(7 rows)

-- select mysql_current_time (stub function, not pushdown constraints, explain)
--Testcase 2091:
EXPLAIN VERBOSE
SELECT mysql_current_time() FROM time_tbl WHERE to_hex(id) > '0';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..982.41 rows=2276 width=8)
   Output: (mysql_current_time())
   Filter: (to_hex(time_tbl.id) > '0'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_time(), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_time(), id FROM public.time_tbl1mysql
(8 rows)

-- select mysql_current_time (stub function, pushdown constraints, explain)
--Testcase 2092:
EXPLAIN VERBOSE
SELECT mysql_current_time() FROM time_tbl WHERE id = 1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..314.50 rows=34 width=8)
   Output: (mysql_current_time())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_time() FROM `test`.`time_tbl2` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_time() FROM public.time_tbl1mysql WHERE ((id = 1))
(7 rows)

-- select mysql_current_time (stub function, mysql_current_time in constraints, explain)
--Testcase 2093:
EXPLAIN VERBOSE
SELECT mysql_current_time() FROM time_tbl WHERE mysql_current_time() > '00:00:00';
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=8)
   Output: (mysql_current_time())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_time() FROM `test`.`time_tbl2` WHERE ((current_time() > '00:00:00'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_time() FROM public.time_tbl1mysql WHERE ((public.mysql_current_time() > '00:00:00'::time without time zone))
(7 rows)

-- mysql_current_time in constrains (stub function, explain)
--Testcase 2094:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE mysql_current_time() > '00:00:00' ORDER BY 1;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2057.35 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((current_time() > '00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.mysql_current_time() > '00:00:00'::time without time zone))
(12 rows)

-- mysql_current_time in constrains (stub function, result)
--Testcase 2095:
SELECT c1 FROM time_tbl WHERE mysql_current_time() > '00:00:00' ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- mysql_current_time as parameter of addtime(stub function, explain)
--Testcase 2096:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_current_time(), '1 12:59:10') > '00:00:00' ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3907.82..3913.51 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3780.91 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(current_time(), '1 12:59:10.0') > '0'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_current_time(), '1 day 12:59:10'::interval) > '00:00:00'::interval))
(12 rows)

-- mysql_current_time as parameter of addtime(stub function, result)
--Testcase 2097:
SELECT c1 FROM time_tbl WHERE addtime(mysql_current_time(), '1 12:59:10') > '00:00:00' ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_current_time and agg (pushdown, explain)
--Testcase 2098:
EXPLAIN VERBOSE
SELECT mysql_current_time(), sum(id) FROM time_tbl ORDER BY 1,2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort  (cost=159.42..159.42 rows=1 width=16)
   Output: (mysql_current_time()), (sum(id))
   Sort Key: (mysql_current_time()), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
         Output: mysql_current_time(), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select mysql_current_time and log2 (pushdown, explain)
--Testcase 2099:
EXPLAIN VERBOSE
SELECT mysql_current_time(), log2(id) FROM time_tbl ORDER BY 1,2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=16)
   Output: (mysql_current_time()), (log2((id)::double precision))
   Sort Key: (mysql_current_time()), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=16)
         Output: (mysql_current_time()), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT current_time(), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_current_time(), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select mysql_current_time with non pushdown func and explicit constant (explain)
--Testcase 2100:
EXPLAIN VERBOSE
SELECT mysql_current_time(), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=44)
   Output: (mysql_current_time()), (to_hex(id)), 4
   Sort Key: (mysql_current_time()), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=44)
         Output: mysql_current_time(), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select mysql_current_time with order by (explain)
--Testcase 2101:
EXPLAIN VERBOSE
SELECT mysql_current_time(), c1 FROM time_tbl ORDER BY c1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: mysql_current_time(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- select mysql_current_time with order by index (explain)
--Testcase 2102:
EXPLAIN VERBOSE
SELECT mysql_current_time(), c1 FROM time_tbl ORDER BY 2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: mysql_current_time(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- mysql_current_time constraints with order by (explain)
--Testcase 2103:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_current_time(), '1 12:59:10') > '00:00:00' ORDER BY c1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3907.82..3913.51 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3780.91 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(current_time(), '1 12:59:10.0') > '0'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_current_time(), '1 day 12:59:10'::interval) > '00:00:00'::interval))
(12 rows)

-- mysql_current_time constraints with order by (result)
--Testcase 2104:
SELECT c1 FROM time_tbl WHERE addtime(mysql_current_time(), '1 12:59:10') > '00:00:00' ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_current_time with group by (explain)
--Testcase 2105:
EXPLAIN VERBOSE
SELECT mysql_current_time(), c1 FROM time_tbl GROUP BY c1 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (mysql_current_time()), c1
   Sort Key: (mysql_current_time()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: mysql_current_time(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select mysql_current_time with group by index (explain)
--Testcase 2106:
EXPLAIN VERBOSE
SELECT mysql_current_time(), c1 FROM time_tbl GROUP BY 2 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (mysql_current_time()), c1
   Sort Key: (mysql_current_time()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: mysql_current_time(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select mysql_current_time with group by having (explain)
--Testcase 2107:
EXPLAIN VERBOSE
SELECT mysql_current_time(), c1 FROM time_tbl GROUP BY mysql_current_time(),c1 HAVING mysql_current_time() > '00:00:00' ORDER BY 1,2;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (mysql_current_time()), c1
   Sort Key: (mysql_current_time()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (mysql_current_time()), c1
         Group Key: (mysql_current_time()), time_tbl.c1
         Filter: ((mysql_current_time()) > '00:00:00'::time without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (mysql_current_time()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT current_time(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_current_time(), c1 FROM public.time_tbl1mysql
(16 rows)

-- select mysql_current_time with group by index having (explain)
--Testcase 2108:
EXPLAIN VERBOSE
SELECT mysql_current_time(), c1 FROM time_tbl GROUP BY 2,1 HAVING mysql_current_time() > '00:00:00' ORDER BY 1,2;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (mysql_current_time()), c1
   Sort Key: (mysql_current_time()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (mysql_current_time()), c1
         Group Key: (mysql_current_time()), time_tbl.c1
         Filter: ((mysql_current_time()) > '00:00:00'::time without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (mysql_current_time()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT current_time(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_current_time(), c1 FROM public.time_tbl1mysql
(16 rows)

-- mysql_current_time constraints with group by (explain)
--Testcase 2109:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_current_time(), '1 12:59:10') > '00:00:00' GROUP BY c1 ORDER BY 1;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1891.55..1891.56 rows=0 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan  (cost=112.84..1891.54 rows=0 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(current_time(), '1 12:59:10.0') > '0')) GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_current_time(), '1 day 12:59:10'::interval) > '00:00:00'::interval)) GROUP BY 1
(16 rows)

-- mysql_current_time constraints with group by (result)
--Testcase 2110:
SELECT c1 FROM time_tbl WHERE addtime(mysql_current_time(), '1 12:59:10') > '00:00:00' GROUP BY c1 ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_current_time and as
--Testcase 2111:
EXPLAIN VERBOSE
SELECT mysql_current_time() as mysql_current_time1 FROM time_tbl;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (mysql_current_time())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_time() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_time() FROM public.time_tbl1mysql
(7 rows)

-- CURRENT_TIMESTAMP
-- mysql_current_timestamp is mutable function, some executes will return different result
-- select mysql_current_timestamp (stub function, explain)
--Testcase 2112:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp() FROM time_tbl;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (mysql_current_timestamp())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_timestamp() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_timestamp() FROM public.time_tbl1mysql
(7 rows)

-- select mysql_current_timestamp (stub function, not pushdown constraints, explain)
--Testcase 2113:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp() FROM time_tbl WHERE to_hex(id) > '0';
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..982.41 rows=2276 width=8)
   Output: (mysql_current_timestamp())
   Filter: (to_hex(time_tbl.id) > '0'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_timestamp(), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_timestamp(), id FROM public.time_tbl1mysql
(8 rows)

-- select mysql_current_timestamp (stub function, pushdown constraints, explain)
--Testcase 2114:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp() FROM time_tbl WHERE id = 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..314.50 rows=34 width=8)
   Output: (mysql_current_timestamp())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_timestamp() FROM `test`.`time_tbl2` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_timestamp() FROM public.time_tbl1mysql WHERE ((id = 1))
(7 rows)

-- select mysql_current_timestamp (stub function, mysql_current_timestamp in constraints, explain)
--Testcase 2115:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp() FROM time_tbl WHERE mysql_current_timestamp() > '2000-01-01 00:00:00'::timestamp;
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=8)
   Output: (mysql_current_timestamp())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT current_timestamp() FROM `test`.`time_tbl2` WHERE ((current_timestamp() > '2000-01-01 00:00:00'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_current_timestamp() FROM public.time_tbl1mysql WHERE ((public.mysql_current_timestamp() > '2000-01-01 00:00:00'::timestamp without time zone))
(7 rows)

-- mysql_current_timestamp in constrains (stub function, explain)
--Testcase 2116:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE mysql_current_timestamp() > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2057.35 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((current_timestamp() > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.mysql_current_timestamp() > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- mysql_current_timestamp in constrains (stub function, result)
--Testcase 2117:
SELECT c1 FROM time_tbl WHERE mysql_current_timestamp() > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- mysql_current_timestamp as parameter of addtime(stub function, explain)
--Testcase 2118:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_current_timestamp(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
                                                                                               QUERY PLAN                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(current_timestamp(), '1 12:59:10.0') > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_current_timestamp(), '1 day 12:59:10'::interval) > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- mysql_current_timestamp as parameter of addtime(stub function, result)
--Testcase 2119:
SELECT c1 FROM time_tbl WHERE addtime(mysql_current_timestamp(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_current_timestamp and agg (pushdown, explain)
--Testcase 2120:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp(), sum(id) FROM time_tbl ORDER BY 1,2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort  (cost=159.42..159.42 rows=1 width=16)
   Output: (mysql_current_timestamp()), (sum(id))
   Sort Key: (mysql_current_timestamp()), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
         Output: mysql_current_timestamp(), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select mysql_current_timestamp and log2 (pushdown, explain)
--Testcase 2121:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp(), log2(id) FROM time_tbl ORDER BY 1,2;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=16)
   Output: (mysql_current_timestamp()), (log2((id)::double precision))
   Sort Key: (mysql_current_timestamp()), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=16)
         Output: (mysql_current_timestamp()), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT current_timestamp(), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_current_timestamp(), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select mysql_current_timestamp with non pushdown func and explicit constant (explain)
--Testcase 2122:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp(), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=44)
   Output: (mysql_current_timestamp()), (to_hex(id)), 4
   Sort Key: (mysql_current_timestamp()), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=44)
         Output: mysql_current_timestamp(), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select mysql_current_timestamp with order by (explain)
--Testcase 2123:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp(), c1 FROM time_tbl ORDER BY mysql_current_timestamp(),c1;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=16)
   Output: (mysql_current_timestamp()), c1
   Sort Key: (mysql_current_timestamp()), time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
         Output: (mysql_current_timestamp()), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT current_timestamp(), `c1` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_current_timestamp(), c1 FROM public.time_tbl1mysql
(12 rows)

-- select mysql_current_timestamp with order by index (explain)
--Testcase 2124:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp(), c1 FROM time_tbl ORDER BY 1,2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=16)
   Output: (mysql_current_timestamp()), c1
   Sort Key: (mysql_current_timestamp()), time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
         Output: (mysql_current_timestamp()), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT current_timestamp(), `c1` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_current_timestamp(), c1 FROM public.time_tbl1mysql
(12 rows)

-- mysql_current_timestamp constraints with order by (explain)
--Testcase 2125:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_current_timestamp(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY c1;
                                                                                               QUERY PLAN                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(current_timestamp(), '1 12:59:10.0') > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_current_timestamp(), '1 day 12:59:10'::interval) > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- mysql_current_timestamp constraints with order by (result)
--Testcase 2126:
SELECT c1 FROM time_tbl WHERE addtime(mysql_current_timestamp(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_current_timestamp with group by (explain)
--Testcase 2127:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp(), c1 FROM time_tbl GROUP BY c1 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (mysql_current_timestamp()), c1
   Sort Key: (mysql_current_timestamp()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: mysql_current_timestamp(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select mysql_current_timestamp with group by index (explain)
--Testcase 2128:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp(), c1 FROM time_tbl GROUP BY 2 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (mysql_current_timestamp()), c1
   Sort Key: (mysql_current_timestamp()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: mysql_current_timestamp(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select mysql_current_timestamp with group by having (explain)
--Testcase 2129:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp(), c1 FROM time_tbl GROUP BY mysql_current_timestamp(),c1 HAVING mysql_current_timestamp() > '2000-01-01 00:00:00'::timestamp ORDER BY 1,2;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (mysql_current_timestamp()), c1
   Sort Key: (mysql_current_timestamp()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (mysql_current_timestamp()), c1
         Group Key: (mysql_current_timestamp()), time_tbl.c1
         Filter: ((mysql_current_timestamp()) > '2000-01-01 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (mysql_current_timestamp()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT current_timestamp(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_current_timestamp(), c1 FROM public.time_tbl1mysql
(16 rows)

-- select mysql_current_timestamp with group by index having (explain)
--Testcase 2130:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp(), c1 FROM time_tbl GROUP BY 2,1 HAVING mysql_current_timestamp() > '2000-01-01 00:00:00'::timestamp ORDER BY 1,2;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (mysql_current_timestamp()), c1
   Sort Key: (mysql_current_timestamp()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (mysql_current_timestamp()), c1
         Group Key: (mysql_current_timestamp()), time_tbl.c1
         Filter: ((mysql_current_timestamp()) > '2000-01-01 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (mysql_current_timestamp()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT current_timestamp(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_current_timestamp(), c1 FROM public.time_tbl1mysql
(16 rows)

-- mysql_current_timestamp constraints with group by (explain)
--Testcase 2131:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_current_timestamp(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp GROUP BY c1 ORDER BY 1;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1883.02..1883.02 rows=0 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan  (cost=112.84..1883.01 rows=0 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(current_timestamp(), '1 12:59:10.0') > '2000-01-01 00:00:00')) GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_current_timestamp(), '1 day 12:59:10'::interval) > '2000-01-01 00:00:00'::timestamp without time zone)) GROUP BY 1
(16 rows)

-- mysql_current_timestamp constraints with group by (result)
--Testcase 2132:
SELECT c1 FROM time_tbl WHERE addtime(mysql_current_timestamp(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp GROUP BY c1 ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_current_timestamp and as
--Testcase 2133:
EXPLAIN VERBOSE
SELECT mysql_current_timestamp() as mysql_current_timestamp1 FROM time_tbl ORDER BY 1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=8)
   Output: (mysql_current_timestamp())
   Sort Key: (mysql_current_timestamp())
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (mysql_current_timestamp())
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT current_timestamp() FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_current_timestamp() FROM public.time_tbl1mysql
(12 rows)

-- DATE()
-- select date (stub function, explain)
--Testcase 2134:
EXPLAIN VERBOSE
SELECT date(c3), date(c2), date(date_sub(c3, '1 12:59:10')), date('2021-01-01 12:00:00') FROM time_tbl ORDER BY 1,2,3,4;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2600.12..2617.18 rows=6826 width=16)
   Output: (date(c3)), c2, (date(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '2021-01-01'::date
   Sort Key: (date(time_tbl.c3)), time_tbl.c2, (date(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=16)
         Output: (date(c3)), c2, (date(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '2021-01-01'::date
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date(`c3`), `c2`, date(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), '2021-01-01' FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT date(c3), c2, date(public.date_sub(c3, '1 day 12:59:10'::interval)), '2021-01-01'::date FROM public.time_tbl1mysql
(12 rows)

-- select date (stub function, result)
--Testcase 2135:
SELECT date(c3), date(c2), date(date_sub(c3, '1 12:59:10')), date('2021-01-01 12:00:00') FROM time_tbl ORDER BY 1,2,3,4;
    date    |    date    |    date    |    date    
------------+------------+------------+------------
 2021-01-03 | 2021-01-02 | 2021-01-01 | 2021-01-01
 2021-01-04 | 2021-01-01 | 2021-01-03 | 2021-01-01
 2021-01-05 | 2021-01-10 | 2021-01-03 | 2021-01-01
 2021-01-06 | 2021-01-15 | 2021-01-05 | 2021-01-01
 2021-01-07 | 2021-01-29 | 2021-01-05 | 2021-01-01
(5 rows)

-- select date (stub function, not pushdown constraints, explain)
--Testcase 2136:
EXPLAIN VERBOSE
SELECT date(c3), date(c2), date(date_sub(c3, '1 12:59:10')), date('2021-01-01 12:00:00') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=400.26..400.35 rows=34 width=16)
   Output: (date(c3)), c2, (date(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '2021-01-01'::date
   Sort Key: (date(time_tbl.c3)), time_tbl.c2, (date(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..399.40 rows=34 width=16)
         Output: (date(c3)), c2, (date(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '2021-01-01'::date
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date(`c3`), `c2`, date(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), '2021-01-01', `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT date(c3), c2, date(public.date_sub(c3, '1 day 12:59:10'::interval)), '2021-01-01'::date, id FROM public.time_tbl1mysql
(13 rows)

-- select date (stub function, not pushdown constraints, result)
--Testcase 2137:
SELECT date(c3), date(c2), date(date_sub(c3, '1 12:59:10')), date('2021-01-01 12:00:00') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
    date    |    date    |    date    |    date    
------------+------------+------------+------------
 2021-01-04 | 2021-01-01 | 2021-01-03 | 2021-01-01
(1 row)

-- select date (stub function, pushdown constraints, explain)
--Testcase 2138:
EXPLAIN VERBOSE
SELECT date(c3), date(c2), date(date_sub(c3, '1 12:59:10')), date('2021-01-01 12:00:00') FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2605.42..2622.40 rows=6792 width=16)
   Output: (date(c3)), c2, (date(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '2021-01-01'::date
   Sort Key: (date(time_tbl.c3)), time_tbl.c2, (date(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2173.12 rows=6792 width=16)
         Output: (date(c3)), c2, (date(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '2021-01-01'::date
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date(`c3`), `c2`, date(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), '2021-01-01' FROM `test`.`time_tbl2` WHERE ((`id` <> 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT date(c3), c2, date(public.date_sub(c3, '1 day 12:59:10'::interval)), '2021-01-01'::date FROM public.time_tbl1mysql WHERE ((id <> 0))
(12 rows)

-- select date (stub function, pushdown constraints, result)
--Testcase 2139:
SELECT date(c3), date(c2), date(date_sub(c3, '1 12:59:10')), date('2021-01-01 12:00:00') FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
    date    |    date    |    date    |    date    
------------+------------+------------+------------
 2021-01-04 | 2021-01-01 | 2021-01-03 | 2021-01-01
 2021-01-05 | 2021-01-10 | 2021-01-03 | 2021-01-01
 2021-01-06 | 2021-01-15 | 2021-01-05 | 2021-01-01
 2021-01-07 | 2021-01-29 | 2021-01-05 | 2021-01-01
(4 rows)

-- select date (stub function, date in constraints, explain)
--Testcase 2140:
EXPLAIN VERBOSE
SELECT date(c3), date(c2), date(date_sub(c3, '1 12:59:10')), date('2021-01-01 12:00:00') FROM time_tbl WHERE date(c3) != '2000-01-01' ORDER BY 1,2,3,4;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2622.49..2639.47 rows=6792 width=16)
   Output: (date(c3)), c2, (date(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '2021-01-01'::date
   Sort Key: (date(time_tbl.c3)), time_tbl.c2, (date(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2190.19 rows=6792 width=16)
         Output: (date(c3)), c2, (date(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '2021-01-01'::date
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date(`c3`), `c2`, date(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), '2021-01-01' FROM `test`.`time_tbl2` WHERE ((date(`c3`) <> '2000-01-01'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT date(c3), c2, date(public.date_sub(c3, '1 day 12:59:10'::interval)), '2021-01-01'::date FROM public.time_tbl1mysql WHERE ((date(c3) <> '2000-01-01'::date))
(12 rows)

-- select date (stub function, date in constraints, result)
--Testcase 2141:
SELECT date(c3), date(c2), date(date_sub(c3, '1 12:59:10')), date('2021-01-01 12:00:00') FROM time_tbl WHERE date(c3) != '2000-01-01' ORDER BY 1,2,3,4;
    date    |    date    |    date    |    date    
------------+------------+------------+------------
 2021-01-03 | 2021-01-02 | 2021-01-01 | 2021-01-01
 2021-01-04 | 2021-01-01 | 2021-01-03 | 2021-01-01
 2021-01-05 | 2021-01-10 | 2021-01-03 | 2021-01-01
 2021-01-06 | 2021-01-15 | 2021-01-05 | 2021-01-01
 2021-01-07 | 2021-01-29 | 2021-01-05 | 2021-01-01
(5 rows)

-- select date (stub function, date in constraints, explain)
--Testcase 2142:
EXPLAIN VERBOSE
SELECT date(c3), date(c2), date(date_sub(c3, '1 12:59:10')), date('2021-01-01 12:00:00') FROM time_tbl WHERE date('2021-01-01 12:00:00') > '2000-01-01' ORDER BY 1,2,3,4;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2600.12..2617.18 rows=6826 width=16)
   Output: (date(c3)), c2, (date(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '2021-01-01'::date
   Sort Key: (date(time_tbl.c3)), time_tbl.c2, (date(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=16)
         Output: (date(c3)), c2, (date(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '2021-01-01'::date
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date(`c3`), `c2`, date(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), '2021-01-01' FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT date(c3), c2, date(public.date_sub(c3, '1 day 12:59:10'::interval)), '2021-01-01'::date FROM public.time_tbl1mysql
(12 rows)

-- select date (stub function, date in constraints, result)
--Testcase 2143:
SELECT date(c3), date(c2), date(date_sub(c3, '1 12:59:10')), date('2021-01-01 12:00:00') FROM time_tbl WHERE date('2021-01-01 12:00:00') > '2000-01-01' ORDER BY 1,2,3,4;
    date    |    date    |    date    |    date    
------------+------------+------------+------------
 2021-01-03 | 2021-01-02 | 2021-01-01 | 2021-01-01
 2021-01-04 | 2021-01-01 | 2021-01-03 | 2021-01-01
 2021-01-05 | 2021-01-10 | 2021-01-03 | 2021-01-01
 2021-01-06 | 2021-01-15 | 2021-01-05 | 2021-01-01
 2021-01-07 | 2021-01-29 | 2021-01-05 | 2021-01-01
(5 rows)

-- select date with agg (pushdown, explain)
--Testcase 2144:
EXPLAIN VERBOSE
SELECT max(c3), date(max(c3)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=12)
   Output: (max(c3)), date((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select date as nest function with agg (pushdown, result)
--Testcase 2145:
SELECT max(c3), date(max(c3)) FROM time_tbl;
         max         |    date    
---------------------+------------
 2021-01-07 00:59:59 | 2021-01-07
(1 row)

-- select date with non pushdown func and explicit constant (explain)
--Testcase 2146:
EXPLAIN VERBOSE
SELECT date(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=44)
   Output: (date(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (date(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=44)
         Output: (date(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT date(public.date_sub(c3, '1 day 12:59:10'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select date with non pushdown func and explicit constant (result)
--Testcase 2147:
SELECT date(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
    date    |        pi         | ?column? 
------------+-------------------+----------
 2021-01-01 | 3.141592653589793 |      4.1
 2021-01-03 | 3.141592653589793 |      4.1
 2021-01-03 | 3.141592653589793 |      4.1
 2021-01-05 | 3.141592653589793 |      4.1
 2021-01-05 | 3.141592653589793 |      4.1
(5 rows)

-- select date with order by (explain)
--Testcase 2148:
EXPLAIN VERBOSE
SELECT id, date(c3 + '1 12:59:10') FROM time_tbl order by id,date(c3 + '1 12:59:10');
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=893.62..910.68 rows=6826 width=8)
   Output: id, (date((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: time_tbl.id, (date((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..458.91 rows=6826 width=8)
         Output: id, (date((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, date((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, date((c3 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select date with order by (result)
--Testcase 2149:
SELECT id, date(c3 + '1 12:59:10') FROM time_tbl order by id,date(c3 + '1 12:59:10');
 id |    date    
----+------------
  0 | 2021-01-05
  1 | 2021-01-06
  2 | 2021-01-07
  3 | 2021-01-08
  4 | 2021-01-08
(5 rows)

-- select date with order by index (result)
--Testcase 2150:
SELECT id, date(c3 + '1 12:59:10') FROM time_tbl order by 2,1;
 id |    date    
----+------------
  0 | 2021-01-05
  1 | 2021-01-06
  2 | 2021-01-07
  3 | 2021-01-08
  4 | 2021-01-08
(5 rows)

-- select date with order by index (result)
--Testcase 2151:
SELECT id, date(c3 + '1 12:59:10') FROM time_tbl order by 1,2;
 id |    date    
----+------------
  0 | 2021-01-05
  1 | 2021-01-06
  2 | 2021-01-07
  3 | 2021-01-08
  4 | 2021-01-08
(5 rows)

-- select date with group by (explain)
--Testcase 2152:
EXPLAIN VERBOSE
SELECT max(c3), date(c3 + '1 12:59:10') FROM time_tbl group by date(c3 + '1 12:59:10') ORDER BY 1,2;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=503.68..504.18 rows=200 width=12)
   Output: (max(c3)), (date((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: (max(time_tbl.c3)), (date((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=493.04..496.04 rows=200 width=12)
         Output: max(c3), (date((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Group Key: (date((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..458.91 rows=6826 width=12)
               Output: (date((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT date((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT date((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(15 rows)

-- select date with group by (result)
--Testcase 2153:
SELECT max(c3), date(c3 + '1 12:59:10') FROM time_tbl group by date(c3 + '1 12:59:10') ORDER BY 1,2;
         max         |    date    
---------------------+------------
 2021-01-03 12:10:30 | 2021-01-05
 2021-01-04 23:12:13 | 2021-01-06
 2021-01-05 11:12:12 | 2021-01-07
 2021-01-07 00:59:59 | 2021-01-08
(4 rows)

-- select date with group by index (result)
--Testcase 2154:
SELECT id, date(c3 + '1 12:59:10') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id |    date    
----+------------
  0 | 2021-01-05
  1 | 2021-01-06
  2 | 2021-01-07
  3 | 2021-01-08
  4 | 2021-01-08
(5 rows)

-- select date with group by index (result)
--Testcase 2155:
SELECT id, date(c3 + '1 12:59:10') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id |    date    
----+------------
  0 | 2021-01-05
  1 | 2021-01-06
  2 | 2021-01-07
  3 | 2021-01-08
  4 | 2021-01-08
(5 rows)

-- select date with group by having (explain)
--Testcase 2156:
EXPLAIN VERBOSE
SELECT max(c3), date(c3 + '1 12:59:10') FROM time_tbl group by date(c3 + '1 12:59:10'), c3 HAVING date(c3) > '2000-01-01' ORDER BY 1,2;
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=407.00..407.50 rows=200 width=20)
   Output: (max(c3)), (date((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
   Sort Key: (max(time_tbl.c3)), (date((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=396.36..399.36 rows=200 width=20)
         Output: max(c3), (date((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
         Group Key: (date((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), time_tbl.c3
         ->  Foreign Scan on public.time_tbl  (cost=200.00..379.29 rows=2276 width=12)
               Output: (date((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT date((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2` WHERE ((date(`c3`) > '2000-01-01'))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT date((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql WHERE ((date(c3) > '2000-01-01'::date))
(15 rows)

-- select date with group by having (result)
--Testcase 2157:
SELECT max(c3), date(c3 + '1 12:59:10') FROM time_tbl group by date(c3 + '1 12:59:10'), c3 HAVING date(c3) > '2000-01-01' ORDER BY 1,2;
         max         |    date    
---------------------+------------
 2021-01-03 12:10:30 | 2021-01-05
 2021-01-04 23:12:13 | 2021-01-06
 2021-01-05 11:12:12 | 2021-01-07
 2021-01-06 16:00:00 | 2021-01-08
 2021-01-07 00:59:59 | 2021-01-08
(5 rows)

-- select date with group by index having (result)
--Testcase 2158:
SELECT id, date(c3 + '1 12:59:10'), c3 FROM time_tbl group by 3, 2, 1 HAVING date(c3 + '1 12:59:10') > '2000-01-01' ORDER BY 1,2;
 id |    date    |         c3          
----+------------+---------------------
  0 | 2021-01-05 | 2021-01-03 12:10:30
  1 | 2021-01-06 | 2021-01-04 23:12:13
  2 | 2021-01-07 | 2021-01-05 11:12:12
  3 | 2021-01-08 | 2021-01-06 16:00:00
  4 | 2021-01-08 | 2021-01-07 00:59:59
(5 rows)

-- select date with group by index having (result)
--Testcase 2159:
SELECT id, date(c3 + '1 12:59:10'), c3 FROM time_tbl group by 1, 2, 3 HAVING date(c3 + '1 12:59:10') > '2000-01-01' ORDER BY 1,2;
 id |    date    |         c3          
----+------------+---------------------
  0 | 2021-01-05 | 2021-01-03 12:10:30
  1 | 2021-01-06 | 2021-01-04 23:12:13
  2 | 2021-01-07 | 2021-01-05 11:12:12
  3 | 2021-01-08 | 2021-01-06 16:00:00
  4 | 2021-01-08 | 2021-01-07 00:59:59
(5 rows)

-- select date and as
--Testcase 2160:
SELECT date(date_sub(c3, '1 12:59:10')) as date1 FROM time_tbl ORDER BY 1;
   date1    
------------
 2021-01-01
 2021-01-03
 2021-01-03
 2021-01-05
 2021-01-05
(5 rows)

-- DATE_ADD()
-- select date_add (stub function, explain)
--Testcase 2161:
EXPLAIN VERBOSE
SELECT date_add(c2, '1 12:59:10'::interval), date_add('2021-01-02', '1-2'::interval), date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval), date_add('2021-01-02', '1-2'::interval) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9409.05..9426.12 rows=6826 width=32)
   Output: (date_add((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
   Sort Key: (date_add((time_tbl.c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8974.35 rows=6826 width=32)
         Output: (date_add((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_add(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), date_add('2021-01-02 00:00:00', INTERVAL '1-2' YEAR_MONTH), date_add(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1-2' YEAR_MONTH) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_add(c2, '1 day 12:59:10'::interval), public.date_add('2021-01-02 00:00:00'::timestamp without time zone, '1 year 2 mons'::interval), public.date_add(public.date_sub(c3, '1 day 12:59:10'::interval), '1 year 2 mons'::interval) FROM public.time_tbl1mysql
(12 rows)

-- select date_add (stub function, result)
--Testcase 2162:
SELECT date_add(c2, '1 12:59:10'::interval), date_add('2021-01-02', '1-2'::interval), date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval), date_add('2021-01-02', '1-2'::interval) FROM time_tbl ORDER BY 1,2,3,4;
      date_add       |      date_add       |      date_add       |      date_add       
---------------------+---------------------+---------------------+---------------------
 2021-01-02 12:59:10 | 2022-03-02 00:00:00 | 2022-03-03 10:13:03 | 2022-03-02 00:00:00
 2021-01-03 12:59:10 | 2022-03-02 00:00:00 | 2022-03-01 23:11:20 | 2022-03-02 00:00:00
 2021-01-11 12:59:10 | 2022-03-02 00:00:00 | 2022-03-03 22:13:02 | 2022-03-02 00:00:00
 2021-01-16 12:59:10 | 2022-03-02 00:00:00 | 2022-03-05 03:00:50 | 2022-03-02 00:00:00
 2021-01-30 12:59:10 | 2022-03-02 00:00:00 | 2022-03-05 12:00:49 | 2022-03-02 00:00:00
(5 rows)

-- select date_add (stub function, not pushdown constraints, explain)
--Testcase 2163:
EXPLAIN VERBOSE
SELECT date_add(c2, '1 12:59:10'::interval), date_add('2021-01-02', '1-2'::interval), date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval), date_add('2021-01-02', '1-2'::interval) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.18..434.26 rows=34 width=32)
   Output: (date_add((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
   Sort Key: (date_add((time_tbl.c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.31 rows=34 width=32)
         Output: (date_add((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_add(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), date_add('2021-01-02 00:00:00', INTERVAL '1-2' YEAR_MONTH), date_add(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1-2' YEAR_MONTH), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_add(c2, '1 day 12:59:10'::interval), public.date_add('2021-01-02 00:00:00'::timestamp without time zone, '1 year 2 mons'::interval), public.date_add(public.date_sub(c3, '1 day 12:59:10'::interval), '1 year 2 mons'::interval), id FROM public.time_tbl1mysql
(13 rows)

-- select date_add (stub function, not pushdown constraints, result)
--Testcase 2164:
SELECT date_add(c2, '1 12:59:10'::interval), date_add('2021-01-02', '1-2'::interval), date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval), date_add('2021-01-02', '1-2'::interval) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
      date_add       |      date_add       |      date_add       |      date_add       
---------------------+---------------------+---------------------+---------------------
 2021-01-02 12:59:10 | 2022-03-02 00:00:00 | 2022-03-03 10:13:03 | 2022-03-02 00:00:00
(1 row)

-- select date_add (stub function, pushdown constraints, explain)
--Testcase 2165:
EXPLAIN VERBOSE
SELECT date_add(c2, '1 12:59:10'::interval), date_add('2021-01-02', '1-2'::interval), date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval), date_add('2021-01-02', '1-2'::interval) FROM time_tbl WHERE id != 1 ORDER BY 1,2,3,4;
                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9380.44..9397.42 rows=6792 width=32)
   Output: (date_add((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
   Sort Key: (date_add((time_tbl.c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8948.15 rows=6792 width=32)
         Output: (date_add((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_add(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), date_add('2021-01-02 00:00:00', INTERVAL '1-2' YEAR_MONTH), date_add(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1-2' YEAR_MONTH) FROM `test`.`time_tbl2` WHERE ((`id` <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_add(c2, '1 day 12:59:10'::interval), public.date_add('2021-01-02 00:00:00'::timestamp without time zone, '1 year 2 mons'::interval), public.date_add(public.date_sub(c3, '1 day 12:59:10'::interval), '1 year 2 mons'::interval) FROM public.time_tbl1mysql WHERE ((id <> 1))
(12 rows)

-- select date_add (stub function, pushdown constraints, result)
--Testcase 2166:
SELECT date_add(c2, '1 12:59:10'::interval), date_add('2021-01-02', '1-2'::interval), date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval), date_add('2021-01-02', '1-2'::interval) FROM time_tbl WHERE id != 1 ORDER BY 1,2,3,4;
      date_add       |      date_add       |      date_add       |      date_add       
---------------------+---------------------+---------------------+---------------------
 2021-01-03 12:59:10 | 2022-03-02 00:00:00 | 2022-03-01 23:11:20 | 2022-03-02 00:00:00
 2021-01-11 12:59:10 | 2022-03-02 00:00:00 | 2022-03-03 22:13:02 | 2022-03-02 00:00:00
 2021-01-16 12:59:10 | 2022-03-02 00:00:00 | 2022-03-05 03:00:50 | 2022-03-02 00:00:00
 2021-01-30 12:59:10 | 2022-03-02 00:00:00 | 2022-03-05 12:00:49 | 2022-03-02 00:00:00
(4 rows)

-- select date_add (stub function, date_add in constraints, explain)
--Testcase 2167:
EXPLAIN VERBOSE
SELECT date_add(c2, '1 12:59:10'::interval), date_add('2021-01-02', '1-2'::interval), date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval), date_add('2021-01-02', '1-2'::interval) FROM time_tbl WHERE date_add(c2, '1 12:59:10'::interval) != '2000-01-01' ORDER BY 1,2,3,4;
                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11104.01..11120.99 rows=6792 width=32)
   Output: (date_add((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
   Sort Key: (date_add((time_tbl.c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..10671.71 rows=6792 width=32)
         Output: (date_add((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_add(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), date_add('2021-01-02 00:00:00', INTERVAL '1-2' YEAR_MONTH), date_add(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1-2' YEAR_MONTH) FROM `test`.`time_tbl2` WHERE ((date_add(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND) <> '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_add(c2, '1 day 12:59:10'::interval), public.date_add('2021-01-02 00:00:00'::timestamp without time zone, '1 year 2 mons'::interval), public.date_add(public.date_sub(c3, '1 day 12:59:10'::interval), '1 year 2 mons'::interval) FROM public.time_tbl1mysql WHERE ((public.date_add(c2, '1 day 12:59:10'::interval) <> '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- select date_add (stub function, date_add in constraints, result)
--Testcase 2168:
SELECT date_add(c2, '1 12:59:10'::interval), date_add('2021-01-02', '1-2'::interval), date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval), date_add('2021-01-02', '1-2'::interval) FROM time_tbl WHERE date_add(c2, '1 12:59:10'::interval) != '2000-01-01' ORDER BY 1,2,3,4;
      date_add       |      date_add       |      date_add       |      date_add       
---------------------+---------------------+---------------------+---------------------
 2021-01-02 12:59:10 | 2022-03-02 00:00:00 | 2022-03-03 10:13:03 | 2022-03-02 00:00:00
 2021-01-03 12:59:10 | 2022-03-02 00:00:00 | 2022-03-01 23:11:20 | 2022-03-02 00:00:00
 2021-01-11 12:59:10 | 2022-03-02 00:00:00 | 2022-03-03 22:13:02 | 2022-03-02 00:00:00
 2021-01-16 12:59:10 | 2022-03-02 00:00:00 | 2022-03-05 03:00:50 | 2022-03-02 00:00:00
 2021-01-30 12:59:10 | 2022-03-02 00:00:00 | 2022-03-05 12:00:49 | 2022-03-02 00:00:00
(5 rows)

-- select date_add (stub function, date_add in constraints, explain)
--Testcase 2169:
EXPLAIN VERBOSE
SELECT date_add(c2, '1 12:59:10'::interval), date_add('2021-01-02', '1-2'::interval), date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval), date_add('2021-01-02', '1-2'::interval) FROM time_tbl WHERE date_add('2021-01-02', '1-2'::interval) > '2000-01-01' ORDER BY 1,2,3,4;
                                                                                                                                                                                                                             QUERY PLAN                                                                                                                                                                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5034.95..5040.64 rows=2276 width=32)
   Output: (date_add((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
   Sort Key: (date_add((time_tbl.c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4908.03 rows=2276 width=32)
         Output: (date_add((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval)), (date_add(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), (date_add('2021-01-02 00:00:00'::timestamp without time zone, '@ 1 year 2 mons'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_add(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), date_add('2021-01-02 00:00:00', INTERVAL '1-2' YEAR_MONTH), date_add(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1-2' YEAR_MONTH) FROM `test`.`time_tbl2` WHERE ((date_add('2021-01-02 00:00:00', INTERVAL '1-2' YEAR_MONTH) > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_add(c2, '1 day 12:59:10'::interval), public.date_add('2021-01-02 00:00:00'::timestamp without time zone, '1 year 2 mons'::interval), public.date_add(public.date_sub(c3, '1 day 12:59:10'::interval), '1 year 2 mons'::interval) FROM public.time_tbl1mysql WHERE ((public.date_add('2021-01-02 00:00:00'::timestamp without time zone, '1 year 2 mons'::interval) > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- select date_add (stub function, date_add in constraints, result)
--Testcase 2170:
SELECT date_add(c2, '1 12:59:10'::interval), date_add('2021-01-02', '1-2'::interval), date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval), date_add('2021-01-02', '1-2'::interval) FROM time_tbl WHERE date_add('2021-01-02', '1-2'::interval) > '2000-01-01' ORDER BY 1,2,3,4;
      date_add       |      date_add       |      date_add       |      date_add       
---------------------+---------------------+---------------------+---------------------
 2021-01-02 12:59:10 | 2022-03-02 00:00:00 | 2022-03-03 10:13:03 | 2022-03-02 00:00:00
 2021-01-03 12:59:10 | 2022-03-02 00:00:00 | 2022-03-01 23:11:20 | 2022-03-02 00:00:00
 2021-01-11 12:59:10 | 2022-03-02 00:00:00 | 2022-03-03 22:13:02 | 2022-03-02 00:00:00
 2021-01-16 12:59:10 | 2022-03-02 00:00:00 | 2022-03-05 03:00:50 | 2022-03-02 00:00:00
 2021-01-30 12:59:10 | 2022-03-02 00:00:00 | 2022-03-05 12:00:49 | 2022-03-02 00:00:00
(5 rows)

-- select date_add with agg (pushdown, explain)
--Testcase 2171:
EXPLAIN VERBOSE
SELECT max(c3), date_add(max(c2) , '1-2'::interval) FROM time_tbl;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (max(c3)), date_add(((max(c2)))::timestamp without time zone, '@ 1 year 2 mons'::interval)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`), max(`c2`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3), max(c2) FROM public.time_tbl1mysql
(11 rows)

-- select date_add as nest function with agg (pushdown, result)
--Testcase 2172:
SELECT max(c3), date_add(max(c2) , '1-2'::interval) FROM time_tbl;
ERROR:  stub date_add(timestamp, interval) is called
CONTEXT:  PL/pgSQL function date_add(timestamp without time zone,interval) line 3 at RAISE
-- select date_add with non pushdown func and explicit constant (explain)
--Testcase 2173:
EXPLAIN VERBOSE
SELECT date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=48)
   Output: (date_add(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), '3.141592653589793'::double precision, 4.1
   Sort Key: (date_add(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=48)
         Output: (date_add(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 2 mons'::interval)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_add(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1-2' YEAR_MONTH), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_add(public.date_sub(c3, '1 day 12:59:10'::interval), '1 year 2 mons'::interval), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select date_add with non pushdown func and explicit constant (result)
--Testcase 2174:
SELECT date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval), pi(), 4.1 FROM time_tbl ORDER BY 1;
      date_add       |        pi         | ?column? 
---------------------+-------------------+----------
 2022-03-01 23:11:20 | 3.141592653589793 |      4.1
 2022-03-03 10:13:03 | 3.141592653589793 |      4.1
 2022-03-03 22:13:02 | 3.141592653589793 |      4.1
 2022-03-05 03:00:50 | 3.141592653589793 |      4.1
 2022-03-05 12:00:49 | 3.141592653589793 |      4.1
(5 rows)

-- select date_add with order by (explain)
--Testcase 2175:
EXPLAIN VERBOSE
SELECT id, date_add(c2 + '1 d'::interval , '1-2'::interval) FROM time_tbl order by id,date_add(c2 + '1 d'::interval , '1-2'::interval);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=12)
   Output: id, (date_add((c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval))
   Sort Key: time_tbl.id, (date_add((time_tbl.c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
         Output: id, (date_add((c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, date_add((`c2` + INTERVAL '1 0:0:0.0' DAY_MICROSECOND), INTERVAL '1-2' YEAR_MONTH) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.date_add((c2 + '1 day'::interval), '1 year 2 mons'::interval) FROM public.time_tbl1mysql
(12 rows)

-- select date_add with order by (result)
--Testcase 2176:
SELECT id, date_add(c2 + '1 d'::interval , '1-2'::interval) FROM time_tbl order by id,date_add(c2 + '1 d'::interval , '1-2'::interval);
 id |      date_add       
----+---------------------
  0 | 2022-03-03 00:00:00
  1 | 2022-03-02 00:00:00
  2 | 2022-03-11 00:00:00
  3 | 2022-03-16 00:00:00
  4 | 2022-03-30 00:00:00
(5 rows)

-- select date_add with order by index (result)
--Testcase 2177:
SELECT id, date_add(c2 + '1 d'::interval , '1-2'::interval) FROM time_tbl order by 2,1;
 id |      date_add       
----+---------------------
  1 | 2022-03-02 00:00:00
  0 | 2022-03-03 00:00:00
  2 | 2022-03-11 00:00:00
  3 | 2022-03-16 00:00:00
  4 | 2022-03-30 00:00:00
(5 rows)

-- select date_add with order by index (result)
--Testcase 2178:
SELECT id, date_add(c2 + '1 d'::interval , '1-2'::interval) FROM time_tbl order by 1,2;
 id |      date_add       
----+---------------------
  0 | 2022-03-03 00:00:00
  1 | 2022-03-02 00:00:00
  2 | 2022-03-11 00:00:00
  3 | 2022-03-16 00:00:00
  4 | 2022-03-30 00:00:00
(5 rows)

-- select date_add with group by (explain)
--Testcase 2179:
EXPLAIN VERBOSE
SELECT max(c3), date_add(c2 + '1 d'::interval , '1-2'::interval) FROM time_tbl group by date_add(c2 + '1 d'::interval , '1-2'::interval) ORDER BY 1;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=16)
   Output: (max(c3)), (date_add((c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval))
   Sort Key: (max(time_tbl.c3))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=16)
         Output: max(c3), (date_add((c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval))
         Group Key: (date_add((time_tbl.c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=16)
               Output: (date_add((c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT date_add((`c2` + INTERVAL '1 0:0:0.0' DAY_MICROSECOND), INTERVAL '1-2' YEAR_MONTH), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.date_add((c2 + '1 day'::interval), '1 year 2 mons'::interval), c3 FROM public.time_tbl1mysql
(15 rows)

-- select date_add with group by (result)
--Testcase 2180:
SELECT max(c3), date_add(c2 + '1 d'::interval , '1-2'::interval) FROM time_tbl group by date_add(c2 + '1 d'::interval , '1-2'::interval) ORDER BY 1;
         max         |      date_add       
---------------------+---------------------
 2021-01-03 12:10:30 | 2022-03-03 00:00:00
 2021-01-04 23:12:13 | 2022-03-02 00:00:00
 2021-01-05 11:12:12 | 2022-03-11 00:00:00
 2021-01-06 16:00:00 | 2022-03-16 00:00:00
 2021-01-07 00:59:59 | 2022-03-30 00:00:00
(5 rows)

-- select date_add with group by index (result)
--Testcase 2181:
SELECT id, date_add(c2 + '1 d'::interval , '1-2'::interval) FROM time_tbl group by 2,1;
 id |      date_add       
----+---------------------
  2 | 2022-03-11 00:00:00
  0 | 2022-03-03 00:00:00
  3 | 2022-03-16 00:00:00
  1 | 2022-03-02 00:00:00
  4 | 2022-03-30 00:00:00
(5 rows)

-- select date_add with group by index (result)
--Testcase 2182:
SELECT id, date_add(c2 + '1 d'::interval , '1-2'::interval) FROM time_tbl group by 1,2;
 id |      date_add       
----+---------------------
  2 | 2022-03-11 00:00:00
  0 | 2022-03-03 00:00:00
  3 | 2022-03-16 00:00:00
  4 | 2022-03-30 00:00:00
  1 | 2022-03-02 00:00:00
(5 rows)

-- select date_add with group by having (explain)
--Testcase 2183:
EXPLAIN VERBOSE
SELECT max(c3), date_add(c2 + '1 d'::interval , '1-2'::interval), c2 FROM time_tbl group by date_add(c2 + '1 d'::interval , '1-2'::interval), c3,c2 HAVING date_add(c2 + '1 d'::interval , '1-2'::interval) > '2000-01-01' ORDER BY 1,2,3;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2288.55..2288.72 rows=67 width=28)
   Output: (max(c3)), (date_add((c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval)), c2, c3
   Sort Key: (max(time_tbl.c3)), (date_add((time_tbl.c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval)), time_tbl.c2
   ->  HashAggregate  (cost=2216.61..2286.52 rows=67 width=28)
         Output: max(c3), (date_add((c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval)), c2, c3
         Group Key: (date_add((time_tbl.c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval)), time_tbl.c3, time_tbl.c2
         Filter: ((date_add((time_tbl.c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval)) > '2000-01-01 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=20)
               Output: (date_add((c2 + '@ 1 day'::interval), '@ 1 year 2 mons'::interval)), c2, c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT date_add((`c2` + INTERVAL '1 0:0:0.0' DAY_MICROSECOND), INTERVAL '1-2' YEAR_MONTH), `c2`, `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.date_add((c2 + '1 day'::interval), '1 year 2 mons'::interval), c2, c3 FROM public.time_tbl1mysql
(16 rows)

-- select date_add with group by having (result)
--Testcase 2184:
SELECT max(c3), date_add(c2 + '1 d'::interval , '1-2'::interval), c2 FROM time_tbl group by date_add(c2 + '1 d'::interval , '1-2'::interval), c3,c2 HAVING date_add(c2 + '1 d'::interval , '1-2'::interval) > '2000-01-01' ORDER BY 1,2,3;
         max         |      date_add       |     c2     
---------------------+---------------------+------------
 2021-01-03 12:10:30 | 2022-03-03 00:00:00 | 2021-01-02
 2021-01-04 23:12:13 | 2022-03-02 00:00:00 | 2021-01-01
 2021-01-05 11:12:12 | 2022-03-11 00:00:00 | 2021-01-10
 2021-01-06 16:00:00 | 2022-03-16 00:00:00 | 2021-01-15
 2021-01-07 00:59:59 | 2022-03-30 00:00:00 | 2021-01-29
(5 rows)

-- select date_add with group by index having (result)
--Testcase 2185:
SELECT c2, date_add(c2 + '1 d'::interval , '1-2'::interval), c3 FROM time_tbl group by 3, 2, 1 HAVING date_add(c2 + '1 d'::interval , '1-2'::interval) > '2000-01-01' ORDER BY 1,2,3;
     c2     |      date_add       |         c3          
------------+---------------------+---------------------
 2021-01-01 | 2022-03-02 00:00:00 | 2021-01-04 23:12:13
 2021-01-02 | 2022-03-03 00:00:00 | 2021-01-03 12:10:30
 2021-01-10 | 2022-03-11 00:00:00 | 2021-01-05 11:12:12
 2021-01-15 | 2022-03-16 00:00:00 | 2021-01-06 16:00:00
 2021-01-29 | 2022-03-30 00:00:00 | 2021-01-07 00:59:59
(5 rows)

-- select date_add with group by index having (result)
--Testcase 2186:
SELECT c2, date_add(c2 + '1 d'::interval , '1-2'::interval), c3 FROM time_tbl group by 1, 2, 3 HAVING date_add(c2 + '1 d'::interval , '1-2'::interval) > '2000-01-01' ORDER BY 1,2,3;
     c2     |      date_add       |         c3          
------------+---------------------+---------------------
 2021-01-01 | 2022-03-02 00:00:00 | 2021-01-04 23:12:13
 2021-01-02 | 2022-03-03 00:00:00 | 2021-01-03 12:10:30
 2021-01-10 | 2022-03-11 00:00:00 | 2021-01-05 11:12:12
 2021-01-15 | 2022-03-16 00:00:00 | 2021-01-06 16:00:00
 2021-01-29 | 2022-03-30 00:00:00 | 2021-01-07 00:59:59
(5 rows)

-- select date_add and as
--Testcase 2187:
SELECT date_add(date_sub(c3, '1 12:59:10'),  '1-2'::interval) as date_add1 FROM time_tbl ORDER BY 1;
      date_add1      
---------------------
 2022-03-01 23:11:20
 2022-03-03 10:13:03
 2022-03-03 22:13:02
 2022-03-05 03:00:50
 2022-03-05 12:00:49
(5 rows)

-- DATE_FORMAT()
-- select date_format (stub function, explain)
--Testcase 2188:
EXPLAIN VERBOSE
SELECT date_format(c3,'%H %k %I %r %T %S %w'), date_format(c3, '%W %M %Y'), date_format(c2, '%X %V'), date_format('2009-10-04 22:23:00'::timestamp, '%W %M %Y') FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                                       QUERY PLAN                                                                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7702.55..7719.62 rows=6826 width=128)
   Output: (date_format(c3, '%H %k %I %r %T %S %w'::text)), (date_format(c3, '%W %M %Y'::text)), (date_format((c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
   Sort Key: (date_format(time_tbl.c3, '%H %k %I %r %T %S %w'::text)), (date_format(time_tbl.c3, '%W %M %Y'::text)), (date_format((time_tbl.c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7267.84 rows=6826 width=128)
         Output: (date_format(c3, '%H %k %I %r %T %S %w'::text)), (date_format(c3, '%W %M %Y'::text)), (date_format((c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_format(`c3`, '%H %k %I %r %T %S %w'), date_format(`c3`, '%W %M %Y'), date_format(`c2`, '%X %V'), date_format('2009-10-04 22:23:00', '%W %M %Y') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_format(c3, '%H %k %I %r %T %S %w'::text), public.date_format(c3, '%W %M %Y'::text), public.date_format(c2, '%X %V'::text), public.date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text) FROM public.time_tbl1mysql
(12 rows)

-- select date_format (stub function, result)
--Testcase 2189:
SELECT date_format(c3,'%H %k %I %r %T %S %w'), date_format(c3, '%W %M %Y'), date_format(c2, '%X %V'), date_format('2009-10-04 22:23:00'::timestamp, '%W %M %Y') FROM time_tbl ORDER BY 1,2,3,4;
            date_format             |      date_format       | date_format |     date_format     
------------------------------------+------------------------+-------------+---------------------
 00 0 12 12:59:59 AM 00:59:59 59 4  | Thursday January 2021  | 2021 04     | Sunday October 2009
 11 11 11 11:12:12 AM 11:12:12 12 2 | Tuesday January 2021   | 2021 02     | Sunday October 2009
 12 12 12 12:10:30 PM 12:10:30 30 0 | Sunday January 2021    | 2020 52     | Sunday October 2009
 16 16 04 04:00:00 PM 16:00:00 00 3 | Wednesday January 2021 | 2021 02     | Sunday October 2009
 23 23 11 11:12:13 PM 23:12:13 13 1 | Monday January 2021    | 2020 52     | Sunday October 2009
(5 rows)

-- select date_format (stub function, not pushdown constraints, explain)
--Testcase 2190:
EXPLAIN VERBOSE
SELECT date_format(c3,'%H %k %I %r %T %S %w'), date_format(c3, '%W %M %Y'), date_format(c2, '%X %V'), date_format('2009-10-04 22:23:00'::timestamp, '%W %M %Y') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                                         QUERY PLAN                                                                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=425.68..425.76 rows=34 width=128)
   Output: (date_format(c3, '%H %k %I %r %T %S %w'::text)), (date_format(c3, '%W %M %Y'::text)), (date_format((c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
   Sort Key: (date_format(time_tbl.c3, '%H %k %I %r %T %S %w'::text)), (date_format(time_tbl.c3, '%W %M %Y'::text)), (date_format((time_tbl.c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..424.81 rows=34 width=128)
         Output: (date_format(c3, '%H %k %I %r %T %S %w'::text)), (date_format(c3, '%W %M %Y'::text)), (date_format((c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_format(`c3`, '%H %k %I %r %T %S %w'), date_format(`c3`, '%W %M %Y'), date_format(`c2`, '%X %V'), date_format('2009-10-04 22:23:00', '%W %M %Y'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_format(c3, '%H %k %I %r %T %S %w'::text), public.date_format(c3, '%W %M %Y'::text), public.date_format(c2, '%X %V'::text), public.date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text), id FROM public.time_tbl1mysql
(13 rows)

-- select date_format (stub function, not pushdown constraints, result)
--Testcase 2191:
SELECT date_format(c3,'%H %k %I %r %T %S %w'), date_format(c3, '%W %M %Y'), date_format(c2, '%X %V'), date_format('2009-10-04 22:23:00'::timestamp, '%W %M %Y') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
            date_format             |     date_format     | date_format |     date_format     
------------------------------------+---------------------+-------------+---------------------
 23 23 11 11:12:13 PM 23:12:13 13 1 | Monday January 2021 | 2020 52     | Sunday October 2009
(1 row)

-- select date_format (stub function, pushdown constraints, explain)
--Testcase 2192:
EXPLAIN VERBOSE
SELECT date_format(c3,'%H %k %I %r %T %S %w'), date_format(c3, '%W %M %Y'), date_format(c2, '%X %V'), date_format('2009-10-04 22:23:00'::timestamp, '%W %M %Y') FROM time_tbl WHERE id != 1 ORDER BY 1,2,3,4;
                                                                                                                                                QUERY PLAN                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7682.44..7699.42 rows=6792 width=128)
   Output: (date_format(c3, '%H %k %I %r %T %S %w'::text)), (date_format(c3, '%W %M %Y'::text)), (date_format((c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
   Sort Key: (date_format(time_tbl.c3, '%H %k %I %r %T %S %w'::text)), (date_format(time_tbl.c3, '%W %M %Y'::text)), (date_format((time_tbl.c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7250.14 rows=6792 width=128)
         Output: (date_format(c3, '%H %k %I %r %T %S %w'::text)), (date_format(c3, '%W %M %Y'::text)), (date_format((c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_format(`c3`, '%H %k %I %r %T %S %w'), date_format(`c3`, '%W %M %Y'), date_format(`c2`, '%X %V'), date_format('2009-10-04 22:23:00', '%W %M %Y') FROM `test`.`time_tbl2` WHERE ((`id` <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_format(c3, '%H %k %I %r %T %S %w'::text), public.date_format(c3, '%W %M %Y'::text), public.date_format(c2, '%X %V'::text), public.date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text) FROM public.time_tbl1mysql WHERE ((id <> 1))
(12 rows)

-- select date_format (stub function, pushdown constraints, result)
--Testcase 2193:
SELECT date_format(c3,'%H %k %I %r %T %S %w'), date_format(c3, '%W %M %Y'), date_format(c2, '%X %V'), date_format('2009-10-04 22:23:00'::timestamp, '%W %M %Y') FROM time_tbl WHERE id != 1 ORDER BY 1,2,3,4;
            date_format             |      date_format       | date_format |     date_format     
------------------------------------+------------------------+-------------+---------------------
 00 0 12 12:59:59 AM 00:59:59 59 4  | Thursday January 2021  | 2021 04     | Sunday October 2009
 11 11 11 11:12:12 AM 11:12:12 12 2 | Tuesday January 2021   | 2021 02     | Sunday October 2009
 12 12 12 12:10:30 PM 12:10:30 30 0 | Sunday January 2021    | 2020 52     | Sunday October 2009
 16 16 04 04:00:00 PM 16:00:00 00 3 | Wednesday January 2021 | 2021 02     | Sunday October 2009
(4 rows)

-- select date_format (stub function, date_format in constraints, explain)
--Testcase 2194:
EXPLAIN VERBOSE
SELECT date_format(c3,'%H %k %I %r %T %S %w'), date_format(c3, '%W %M %Y'), date_format(c2, '%X %V'), date_format('2009-10-04 22:23:00'::timestamp, '%W %M %Y') FROM time_tbl WHERE date_format(c3,'%H %k %I %r %T %S %w') NOT LIKE '2000-01-01' ORDER BY 1,2,3,4;
                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9388.94..9405.92 rows=6792 width=128)
   Output: (date_format(c3, '%H %k %I %r %T %S %w'::text)), (date_format(c3, '%W %M %Y'::text)), (date_format((c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
   Sort Key: (date_format(time_tbl.c3, '%H %k %I %r %T %S %w'::text)), (date_format(time_tbl.c3, '%W %M %Y'::text)), (date_format((time_tbl.c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8956.65 rows=6792 width=128)
         Output: (date_format(c3, '%H %k %I %r %T %S %w'::text)), (date_format(c3, '%W %M %Y'::text)), (date_format((c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_format(`c3`, '%H %k %I %r %T %S %w'), date_format(`c3`, '%W %M %Y'), date_format(`c2`, '%X %V'), date_format('2009-10-04 22:23:00', '%W %M %Y') FROM `test`.`time_tbl2` WHERE ((date_format(`c3`, '%H %k %I %r %T %S %w') NOT LIKE BINARY '2000-01-01'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_format(c3, '%H %k %I %r %T %S %w'::text), public.date_format(c3, '%W %M %Y'::text), public.date_format(c2, '%X %V'::text), public.date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text) FROM public.time_tbl1mysql WHERE ((public.date_format(c3, '%H %k %I %r %T %S %w'::text) !~~ '2000-01-01'::text))
(12 rows)

-- select date_format (stub function, date_format in constraints, result)
--Testcase 2195:
SELECT date_format(c3,'%H %k %I %r %T %S %w'), date_format(c3, '%W %M %Y'), date_format(c2, '%X %V'), date_format('2009-10-04 22:23:00'::timestamp, '%W %M %Y') FROM time_tbl WHERE date_format(c3,'%H %k %I %r %T %S %w') NOT LIKE '2000-01-01' ORDER BY 1,2,3,4;
            date_format             |      date_format       | date_format |     date_format     
------------------------------------+------------------------+-------------+---------------------
 00 0 12 12:59:59 AM 00:59:59 59 4  | Thursday January 2021  | 2021 04     | Sunday October 2009
 11 11 11 11:12:12 AM 11:12:12 12 2 | Tuesday January 2021   | 2021 02     | Sunday October 2009
 12 12 12 12:10:30 PM 12:10:30 30 0 | Sunday January 2021    | 2020 52     | Sunday October 2009
 16 16 04 04:00:00 PM 16:00:00 00 3 | Wednesday January 2021 | 2021 02     | Sunday October 2009
 23 23 11 11:12:13 PM 23:12:13 13 1 | Monday January 2021    | 2020 52     | Sunday October 2009
(5 rows)

-- select date_format (stub function, date_format in constraints, explain)
--Testcase 2196:
EXPLAIN VERBOSE
SELECT date_format(c3,'%H %k %I %r %T %S %w'), date_format(c3, '%W %M %Y'), date_format(c2, '%X %V'), date_format('2009-10-04 22:23:00'::timestamp, '%W %M %Y') FROM time_tbl WHERE date_format('2009-10-04 22:23:00'::timestamp, '%W %M %Y') IS NOT NULL ORDER BY 1,2,3,4;
                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9371.88..9388.86 rows=6792 width=128)
   Output: (date_format(c3, '%H %k %I %r %T %S %w'::text)), (date_format(c3, '%W %M %Y'::text)), (date_format((c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
   Sort Key: (date_format(time_tbl.c3, '%H %k %I %r %T %S %w'::text)), (date_format(time_tbl.c3, '%W %M %Y'::text)), (date_format((time_tbl.c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8939.58 rows=6792 width=128)
         Output: (date_format(c3, '%H %k %I %r %T %S %w'::text)), (date_format(c3, '%W %M %Y'::text)), (date_format((c2)::timestamp without time zone, '%X %V'::text)), (date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_format(`c3`, '%H %k %I %r %T %S %w'), date_format(`c3`, '%W %M %Y'), date_format(`c2`, '%X %V'), date_format('2009-10-04 22:23:00', '%W %M %Y') FROM `test`.`time_tbl2` WHERE ((date_format('2009-10-04 22:23:00', '%W %M %Y') IS NOT NULL))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_format(c3, '%H %k %I %r %T %S %w'::text), public.date_format(c3, '%W %M %Y'::text), public.date_format(c2, '%X %V'::text), public.date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text) FROM public.time_tbl1mysql WHERE ((public.date_format('2009-10-04 22:23:00'::timestamp without time zone, '%W %M %Y'::text) IS NOT NULL))
(12 rows)

-- select date_format (stub function, date_format in constraints, result)
--Testcase 2197:
SELECT date_format(c3,'%H %k %I %r %T %S %w'), date_format(c3, '%W %M %Y'), date_format(c2, '%X %V'), date_format('2009-10-04 22:23:00'::timestamp, '%W %M %Y') FROM time_tbl WHERE date_format('2009-10-04 22:23:00'::timestamp, '%W %M %Y') IS NOT NULL ORDER BY 1,2,3,4;
            date_format             |      date_format       | date_format |     date_format     
------------------------------------+------------------------+-------------+---------------------
 00 0 12 12:59:59 AM 00:59:59 59 4  | Thursday January 2021  | 2021 04     | Sunday October 2009
 11 11 11 11:12:12 AM 11:12:12 12 2 | Tuesday January 2021   | 2021 02     | Sunday October 2009
 12 12 12 12:10:30 PM 12:10:30 30 0 | Sunday January 2021    | 2020 52     | Sunday October 2009
 16 16 04 04:00:00 PM 16:00:00 00 3 | Wednesday January 2021 | 2021 02     | Sunday October 2009
 23 23 11 11:12:13 PM 23:12:13 13 1 | Monday January 2021    | 2020 52     | Sunday October 2009
(5 rows)

-- select date_format with agg (pushdown, explain)
--Testcase 2198:
EXPLAIN VERBOSE
SELECT max(c3), date_format(max(c3), '%H %k %I %r %T %S %w') FROM time_tbl;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (max(c3)), date_format((max(c3)), '%H %k %I %r %T %S %w'::text)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select date_format as nest function with agg (pushdown, result)
--Testcase 2199:
SELECT max(c3), date_format(max(c3), '%H %k %I %r %T %S %w') FROM time_tbl;
ERROR:  stub date_format(timestamp, text) is called
CONTEXT:  PL/pgSQL function date_format(timestamp without time zone,text) line 3 at RAISE
-- select date_format with non pushdown func and explicit constant (explain)
--Testcase 2200:
EXPLAIN VERBOSE
SELECT date_format(c2, '%X %V'), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=72)
   Output: (date_format((c2)::timestamp without time zone, '%X %V'::text)), '3.141592653589793'::double precision, 4.1
   Sort Key: (date_format((time_tbl.c2)::timestamp without time zone, '%X %V'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=72)
         Output: (date_format((c2)::timestamp without time zone, '%X %V'::text)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_format(`c2`, '%X %V'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_format(c2, '%X %V'::text), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select date_format with non pushdown func and explicit constant (result)
--Testcase 2201:
SELECT date_format(c2, '%X %V'), pi(), 4.1 FROM time_tbl ORDER BY 1;
 date_format |        pi         | ?column? 
-------------+-------------------+----------
 2020 52     | 3.141592653589793 |      4.1
 2020 52     | 3.141592653589793 |      4.1
 2021 02     | 3.141592653589793 |      4.1
 2021 02     | 3.141592653589793 |      4.1
 2021 04     | 3.141592653589793 |      4.1
(5 rows)

-- select date_format with order by (explain)
--Testcase 2202:
EXPLAIN VERBOSE
SELECT id, date_format(c3 + '1 12:59:10', '%H:%i:%s') FROM time_tbl order by id,date_format(c3 + '1 12:59:10', '%H:%i:%s');
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=36)
   Output: id, (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text))
   Sort Key: time_tbl.id, (date_format((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=36)
         Output: id, (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, date_format((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND), '%H:%i:%s') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.date_format((c3 + '1 day 12:59:10'::interval), '%H:%i:%s'::text) FROM public.time_tbl1mysql
(12 rows)

-- select date_format with order by (result)
--Testcase 2203:
SELECT id, date_format(c3 + '1 12:59:10', '%H:%i:%s') FROM time_tbl order by id,date_format(c3 + '1 12:59:10', '%H:%i:%s');
 id | date_format 
----+-------------
  0 | 01:09:40
  1 | 12:11:23
  2 | 00:11:22
  3 | 04:59:10
  4 | 13:59:09
(5 rows)

-- select date_format with order by index (result)
--Testcase 2204:
SELECT id, date_format(c3 + '1 12:59:10', '%H:%i:%s') FROM time_tbl order by 2,1;
 id | date_format 
----+-------------
  2 | 00:11:22
  0 | 01:09:40
  3 | 04:59:10
  1 | 12:11:23
  4 | 13:59:09
(5 rows)

-- select date_format with order by index (result)
--Testcase 2205:
SELECT id, date_format(c3 + '1 12:59:10', '%H:%i:%s') FROM time_tbl order by 1,2;
 id | date_format 
----+-------------
  0 | 01:09:40
  1 | 12:11:23
  2 | 00:11:22
  3 | 04:59:10
  4 | 13:59:09
(5 rows)

-- select date_format with group by (explain)
--Testcase 2206:
EXPLAIN VERBOSE
SELECT max(c3), date_format(c3 + '1 12:59:10', '%H:%i:%s') FROM time_tbl group by date_format(c3 + '1 12:59:10', '%H:%i:%s') ORDER BY 1,2;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=40)
   Output: (max(c3)), (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text))
   Sort Key: (max(time_tbl.c3)), (date_format((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=40)
         Output: max(c3), (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text))
         Group Key: (date_format((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=40)
               Output: (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT date_format((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND), '%H:%i:%s'), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.date_format((c3 + '1 day 12:59:10'::interval), '%H:%i:%s'::text), c3 FROM public.time_tbl1mysql
(15 rows)

-- select date_format with group by (result)
--Testcase 2207:
SELECT max(c3), date_format(c3 + '1 12:59:10', '%H:%i:%s') FROM time_tbl group by date_format(c3 + '1 12:59:10', '%H:%i:%s') ORDER BY 1,2;
         max         | date_format 
---------------------+-------------
 2021-01-03 12:10:30 | 01:09:40
 2021-01-04 23:12:13 | 12:11:23
 2021-01-05 11:12:12 | 00:11:22
 2021-01-06 16:00:00 | 04:59:10
 2021-01-07 00:59:59 | 13:59:09
(5 rows)

-- select date_format with group by index (result)
--Testcase 2208:
SELECT id, date_format(c3 + '1 12:59:10', '%H:%i:%s') FROM time_tbl group by 2,1;
 id | date_format 
----+-------------
  3 | 04:59:10
  0 | 01:09:40
  2 | 00:11:22
  4 | 13:59:09
  1 | 12:11:23
(5 rows)

-- select date_format with group by index (result)
--Testcase 2209:
SELECT id, date_format(c3 + '1 12:59:10', '%H:%i:%s') FROM time_tbl group by 1,2;
 id | date_format 
----+-------------
  2 | 00:11:22
  3 | 04:59:10
  0 | 01:09:40
  4 | 13:59:09
  1 | 12:11:23
(5 rows)

-- select date_format with group by having (explain)
--Testcase 2210:
EXPLAIN VERBOSE
SELECT max(c3), date_format(c3 + '1 12:59:10', '%H:%i:%s') FROM time_tbl group by date_format(c3 + '1 12:59:10', '%H:%i:%s'), c3 HAVING date_format(c3 + '1 12:59:10', '%H:%i:%s') > '2000-01-01' ORDER BY 1,2;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=48)
   Output: (max(c3)), (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text)), c3
   Sort Key: (max(time_tbl.c3)), (date_format((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text))
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=48)
         Output: max(c3), (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text)), c3
         Group Key: (date_format((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text)), time_tbl.c3
         Filter: ((date_format((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text)) > '2000-01-01'::text)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=40)
               Output: (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '%H:%i:%s'::text)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT date_format((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND), '%H:%i:%s'), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.date_format((c3 + '1 day 12:59:10'::interval), '%H:%i:%s'::text), c3 FROM public.time_tbl1mysql
(16 rows)

-- select date_format with group by having (result)
--Testcase 2211:
SELECT max(c3), date_format(c3 + '1 12:59:10', '%H:%i:%s') FROM time_tbl group by date_format(c3 + '1 12:59:10', '%H:%i:%s'), c3 HAVING date_format(c3 + '1 12:59:10', '%H:%i:%s') > '2000-01-01' ORDER BY 1,2;
 max | date_format 
-----+-------------
(0 rows)

-- select date_format with group by index having (result)
--Testcase 2212:
SELECT id, date_format(c3 + '1 12:59:10', '%H:%i:%s'), c3 FROM time_tbl group by 3, 2, 1 HAVING date_format(c3 + '1 12:59:10', '%H:%i:%s') IS NOT NULL ORDER BY 1,2;
 id | date_format |         c3          
----+-------------+---------------------
  0 | 01:09:40    | 2021-01-03 12:10:30
  1 | 12:11:23    | 2021-01-04 23:12:13
  2 | 00:11:22    | 2021-01-05 11:12:12
  3 | 04:59:10    | 2021-01-06 16:00:00
  4 | 13:59:09    | 2021-01-07 00:59:59
(5 rows)

-- select date_format with group by index having (result)
--Testcase 2213:
SELECT id, date_format(c3 + '1 12:59:10', '%H:%i:%s'), c3 FROM time_tbl group by 1, 2, 3 HAVING date_format(c3 + '1 12:59:10', '%H:%i:%s') IS NOT NULL ORDER BY 1,2;
 id | date_format |         c3          
----+-------------+---------------------
  0 | 01:09:40    | 2021-01-03 12:10:30
  1 | 12:11:23    | 2021-01-04 23:12:13
  2 | 00:11:22    | 2021-01-05 11:12:12
  3 | 04:59:10    | 2021-01-06 16:00:00
  4 | 13:59:09    | 2021-01-07 00:59:59
(5 rows)

-- select date_format and as
--Testcase 2214:
SELECT date_format(c2, '%X %V') as date_format1 FROM time_tbl ORDER BY 1;
 date_format1 
--------------
 2020 52
 2020 52
 2021 02
 2021 02
 2021 04
(5 rows)

-- DATE_SUB()
-- select date_sub (stub function, explain)
--Testcase 2215:
EXPLAIN VERBOSE
SELECT date_sub(c2, '1 12:59:10'), date_sub(c2, '1-1'), date_sub(date_sub(c3, '1 12:59:10'), '1-1'), date_sub('2021-01-01 12:00:00'::timestamp, '1-1') FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                                                                    QUERY PLAN                                                                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9391.99..9409.05 rows=6826 width=24)
   Output: (date_sub(c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
   Sort Key: (date_sub(time_tbl.c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(time_tbl.c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8957.28 rows=6826 width=24)
         Output: (date_sub(c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_sub(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), date_sub(`c2`, INTERVAL '1-1' YEAR_MONTH), date_sub(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1-1' YEAR_MONTH), date_sub('2021-01-01 12:00:00', INTERVAL '1-1' YEAR_MONTH) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_sub(c2, '1 day 12:59:10'::interval), public.date_sub(c2, '1 year 1 mon'::interval), public.date_sub(public.date_sub(c3, '1 day 12:59:10'::interval), '1 year 1 mon'::interval), public.date_sub('2021-01-01 12:00:00'::timestamp without time zone, '1 year 1 mon'::interval) FROM public.time_tbl1mysql
(12 rows)

-- select date_sub (stub function, result)
--Testcase 2216:
SELECT date_sub(c2, '1 12:59:10'), date_sub(c2, '1-1'), date_sub(date_sub(c3, '1 12:59:10'), '1-1'), date_sub('2021-01-01 12:00:00'::timestamp, '1-1') FROM time_tbl ORDER BY 1,2,3,4;
  date_sub  |  date_sub  |      date_sub       |      date_sub       
------------+------------+---------------------+---------------------
 2020-12-30 | 2019-12-01 | 2019-12-03 10:13:03 | 2019-12-01 12:00:00
 2020-12-31 | 2019-12-02 | 2019-12-01 23:11:20 | 2019-12-01 12:00:00
 2021-01-08 | 2019-12-10 | 2019-12-03 22:13:02 | 2019-12-01 12:00:00
 2021-01-13 | 2019-12-15 | 2019-12-05 03:00:50 | 2019-12-01 12:00:00
 2021-01-27 | 2019-12-29 | 2019-12-05 12:00:49 | 2019-12-01 12:00:00
(5 rows)

-- select date_sub (stub function, not pushdown constraints, explain)
--Testcase 2217:
EXPLAIN VERBOSE
SELECT date_sub(c2, '1 12:59:10'), date_sub(c2, '1-1'), date_sub(date_sub(c3, '1 12:59:10'), '1-1'), date_sub('2021-01-01 12:00:00'::timestamp, '1-1') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                                                                      QUERY PLAN                                                                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.09..434.18 rows=34 width=24)
   Output: (date_sub(c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
   Sort Key: (date_sub(time_tbl.c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(time_tbl.c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.23 rows=34 width=24)
         Output: (date_sub(c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_sub(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), date_sub(`c2`, INTERVAL '1-1' YEAR_MONTH), date_sub(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1-1' YEAR_MONTH), date_sub('2021-01-01 12:00:00', INTERVAL '1-1' YEAR_MONTH), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_sub(c2, '1 day 12:59:10'::interval), public.date_sub(c2, '1 year 1 mon'::interval), public.date_sub(public.date_sub(c3, '1 day 12:59:10'::interval), '1 year 1 mon'::interval), public.date_sub('2021-01-01 12:00:00'::timestamp without time zone, '1 year 1 mon'::interval), id FROM public.time_tbl1mysql
(13 rows)

-- select date_sub (stub function, not pushdown constraints, result)
--Testcase 2218:
SELECT date_sub(c2, '1 12:59:10'), date_sub(c2, '1-1'), date_sub(date_sub(c3, '1 12:59:10'), '1-1'), date_sub('2021-01-01 12:00:00'::timestamp, '1-1') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
  date_sub  |  date_sub  |      date_sub       |      date_sub       
------------+------------+---------------------+---------------------
 2020-12-30 | 2019-12-01 | 2019-12-03 10:13:03 | 2019-12-01 12:00:00
(1 row)

-- select date_sub (stub function, pushdown constraints, explain)
--Testcase 2219:
EXPLAIN VERBOSE
SELECT date_sub(c2, '1 12:59:10'), date_sub(c2, '1-1'), date_sub(date_sub(c3, '1 12:59:10'), '1-1'), date_sub('2021-01-01 12:00:00'::timestamp, '1-1') FROM time_tbl WHERE id != 1 ORDER BY 1,2,3,4;
                                                                                                                                                                             QUERY PLAN                                                                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9363.46..9380.44 rows=6792 width=24)
   Output: (date_sub(c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
   Sort Key: (date_sub(time_tbl.c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(time_tbl.c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8931.17 rows=6792 width=24)
         Output: (date_sub(c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_sub(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), date_sub(`c2`, INTERVAL '1-1' YEAR_MONTH), date_sub(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1-1' YEAR_MONTH), date_sub('2021-01-01 12:00:00', INTERVAL '1-1' YEAR_MONTH) FROM `test`.`time_tbl2` WHERE ((`id` <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_sub(c2, '1 day 12:59:10'::interval), public.date_sub(c2, '1 year 1 mon'::interval), public.date_sub(public.date_sub(c3, '1 day 12:59:10'::interval), '1 year 1 mon'::interval), public.date_sub('2021-01-01 12:00:00'::timestamp without time zone, '1 year 1 mon'::interval) FROM public.time_tbl1mysql WHERE ((id <> 1))
(12 rows)

-- select date_sub (stub function, pushdown constraints, result)
--Testcase 2220:
SELECT date_sub(c2, '1 12:59:10'), date_sub(c2, '1-1'), date_sub(date_sub(c3, '1 12:59:10'), '1-1'), date_sub('2021-01-01 12:00:00'::timestamp, '1-1') FROM time_tbl WHERE id != 1 ORDER BY 1,2,3,4;
  date_sub  |  date_sub  |      date_sub       |      date_sub       
------------+------------+---------------------+---------------------
 2020-12-31 | 2019-12-02 | 2019-12-01 23:11:20 | 2019-12-01 12:00:00
 2021-01-08 | 2019-12-10 | 2019-12-03 22:13:02 | 2019-12-01 12:00:00
 2021-01-13 | 2019-12-15 | 2019-12-05 03:00:50 | 2019-12-01 12:00:00
 2021-01-27 | 2019-12-29 | 2019-12-05 12:00:49 | 2019-12-01 12:00:00
(4 rows)

-- select date_sub (stub function, date_sub in constraints, explain)
--Testcase 2221:
EXPLAIN VERBOSE
SELECT date_sub(c2, '1 12:59:10'), date_sub(c2, '1-1'), date_sub(date_sub(c3, '1 12:59:10'), '1-1'), date_sub('2021-01-01 12:00:00'::timestamp, '1-1') FROM time_tbl WHERE date_sub(c2, '1 12:59:10') != '2000-01-01' ORDER BY 1,2,3,4;
                                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                                             
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11069.96..11086.94 rows=6792 width=24)
   Output: (date_sub(c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
   Sort Key: (date_sub(time_tbl.c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(time_tbl.c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..10637.67 rows=6792 width=24)
         Output: (date_sub(c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_sub(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), date_sub(`c2`, INTERVAL '1-1' YEAR_MONTH), date_sub(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1-1' YEAR_MONTH), date_sub('2021-01-01 12:00:00', INTERVAL '1-1' YEAR_MONTH) FROM `test`.`time_tbl2` WHERE ((date_sub(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND) <> '2000-01-01'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_sub(c2, '1 day 12:59:10'::interval), public.date_sub(c2, '1 year 1 mon'::interval), public.date_sub(public.date_sub(c3, '1 day 12:59:10'::interval), '1 year 1 mon'::interval), public.date_sub('2021-01-01 12:00:00'::timestamp without time zone, '1 year 1 mon'::interval) FROM public.time_tbl1mysql WHERE ((public.date_sub(c2, '1 day 12:59:10'::interval) <> '2000-01-01'::date))
(12 rows)

-- select date_sub (stub function, date_sub in constraints, result)
--Testcase 2222:
SELECT date_sub(c2, '1 12:59:10'), date_sub(c2, '1-1'), date_sub(date_sub(c3, '1 12:59:10'), '1-1'), date_sub('2021-01-01 12:00:00'::timestamp, '1-1') FROM time_tbl WHERE date_sub(c2, '1 12:59:10') != '2000-01-01' ORDER BY 1,2,3,4;
  date_sub  |  date_sub  |      date_sub       |      date_sub       
------------+------------+---------------------+---------------------
 2020-12-30 | 2019-12-01 | 2019-12-03 10:13:03 | 2019-12-01 12:00:00
 2020-12-31 | 2019-12-02 | 2019-12-01 23:11:20 | 2019-12-01 12:00:00
 2021-01-08 | 2019-12-10 | 2019-12-03 22:13:02 | 2019-12-01 12:00:00
 2021-01-13 | 2019-12-15 | 2019-12-05 03:00:50 | 2019-12-01 12:00:00
 2021-01-27 | 2019-12-29 | 2019-12-05 12:00:49 | 2019-12-01 12:00:00
(5 rows)

-- select date_sub (stub function, date_sub in constraints, explain)
--Testcase 2223:
EXPLAIN VERBOSE
SELECT date_sub(c2, '1 12:59:10'), date_sub(c2, '1-1'), date_sub(date_sub(c3, '1 12:59:10'), '1-1'), date_sub('2021-01-01 12:00:00'::timestamp, '1-1') FROM time_tbl WHERE date_sub('2021-01-01 12:00:00'::timestamp, '1-1') > '2000-01-01' ORDER BY 1,2,3,4;
                                                                                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5029.26..5034.95 rows=2276 width=24)
   Output: (date_sub(c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
   Sort Key: (date_sub(time_tbl.c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(time_tbl.c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4902.35 rows=2276 width=24)
         Output: (date_sub(c2, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (date_sub(c2, '@ 1 year 1 mon'::interval)), (date_sub(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), (date_sub('2021-01-01 12:00:00'::timestamp without time zone, '@ 1 year 1 mon'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_sub(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), date_sub(`c2`, INTERVAL '1-1' YEAR_MONTH), date_sub(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1-1' YEAR_MONTH), date_sub('2021-01-01 12:00:00', INTERVAL '1-1' YEAR_MONTH) FROM `test`.`time_tbl2` WHERE ((date_sub('2021-01-01 12:00:00', INTERVAL '1-1' YEAR_MONTH) > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_sub(c2, '1 day 12:59:10'::interval), public.date_sub(c2, '1 year 1 mon'::interval), public.date_sub(public.date_sub(c3, '1 day 12:59:10'::interval), '1 year 1 mon'::interval), public.date_sub('2021-01-01 12:00:00'::timestamp without time zone, '1 year 1 mon'::interval) FROM public.time_tbl1mysql WHERE ((public.date_sub('2021-01-01 12:00:00'::timestamp without time zone, '1 year 1 mon'::interval) > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- select date_sub (stub function, date_sub in constraints, result)
--Testcase 2224:
SELECT date_sub(c2, '1 12:59:10'), date_sub(c2, '1-1'), date_sub(date_sub(c3, '1 12:59:10'), '1-1'), date_sub('2021-01-01 12:00:00'::timestamp, '1-1') FROM time_tbl WHERE date_sub('2021-01-01 12:00:00'::timestamp, '1-1') > '2000-01-01' ORDER BY 1,2,3,4;
  date_sub  |  date_sub  |      date_sub       |      date_sub       
------------+------------+---------------------+---------------------
 2020-12-30 | 2019-12-01 | 2019-12-03 10:13:03 | 2019-12-01 12:00:00
 2020-12-31 | 2019-12-02 | 2019-12-01 23:11:20 | 2019-12-01 12:00:00
 2021-01-08 | 2019-12-10 | 2019-12-03 22:13:02 | 2019-12-01 12:00:00
 2021-01-13 | 2019-12-15 | 2019-12-05 03:00:50 | 2019-12-01 12:00:00
 2021-01-27 | 2019-12-29 | 2019-12-05 12:00:49 | 2019-12-01 12:00:00
(5 rows)

-- select date_sub with agg (pushdown, explain)
--Testcase 2225:
EXPLAIN VERBOSE
SELECT max(c3), date_sub(max(c3), '1 12:59:10') FROM time_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (max(c3)), date_sub((max(c3)), '@ 1 day 12 hours 59 mins 10 secs'::interval)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select date_sub as nest function with agg (pushdown, result)
--Testcase 2226:
SELECT max(c3), date_sub(max(c3), '1 12:59:10') FROM time_tbl;
ERROR:  stub date_sub(timestamp, interval) is called
CONTEXT:  PL/pgSQL function date_sub(timestamp without time zone,interval) line 3 at RAISE
-- select date_sub with non pushdown func and explicit constant (explain)
--Testcase 2227:
EXPLAIN VERBOSE
SELECT date_sub(date_sub(c3, '1 12:59:10'), '1-1'), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=48)
   Output: (date_sub(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), '3.141592653589793'::double precision, 4.1
   Sort Key: (date_sub(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=48)
         Output: (date_sub(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 year 1 mon'::interval)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT date_sub(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1-1' YEAR_MONTH), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.date_sub(public.date_sub(c3, '1 day 12:59:10'::interval), '1 year 1 mon'::interval), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select date_sub with non pushdown func and explicit constant (result)
--Testcase 2228:
SELECT date_sub(date_sub(c3, '1 12:59:10'), '1-1'), pi(), 4.1 FROM time_tbl ORDER BY 1;
      date_sub       |        pi         | ?column? 
---------------------+-------------------+----------
 2019-12-01 23:11:20 | 3.141592653589793 |      4.1
 2019-12-03 10:13:03 | 3.141592653589793 |      4.1
 2019-12-03 22:13:02 | 3.141592653589793 |      4.1
 2019-12-05 03:00:50 | 3.141592653589793 |      4.1
 2019-12-05 12:00:49 | 3.141592653589793 |      4.1
(5 rows)

-- select date_sub with order by (explain)
--Testcase 2229:
EXPLAIN VERBOSE
SELECT id, date_sub(c3 + '1 12:59:10', '1 12:59:10') FROM time_tbl order by id,date_sub(c3 + '1 12:59:10', '1 12:59:10');
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=12)
   Output: id, (date_sub((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval))
   Sort Key: time_tbl.id, (date_sub((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
         Output: id, (date_sub((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, date_sub((`c3` + INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1 12:59:10.0' DAY_MICROSECOND) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.date_sub((c3 + '1 day 12:59:10'::interval), '1 day 12:59:10'::interval) FROM public.time_tbl1mysql
(12 rows)

-- select date_sub with order by (result)
--Testcase 2230:
SELECT id, date_sub(c3 + '1 12:59:10', '1 12:59:10') FROM time_tbl order by id,date_sub(c3 + '1 12:59:10', '1 12:59:10');
 id |      date_sub       
----+---------------------
  0 | 2021-01-03 12:10:30
  1 | 2021-01-04 23:12:13
  2 | 2021-01-05 11:12:12
  3 | 2021-01-06 16:00:00
  4 | 2021-01-07 00:59:59
(5 rows)

-- select date_sub with order by index (result)
--Testcase 2231:
SELECT id, date_sub(c3 + '1 12:59:10', '1 12:59:10') FROM time_tbl order by 2,1;
 id |      date_sub       
----+---------------------
  0 | 2021-01-03 12:10:30
  1 | 2021-01-04 23:12:13
  2 | 2021-01-05 11:12:12
  3 | 2021-01-06 16:00:00
  4 | 2021-01-07 00:59:59
(5 rows)

-- select date_sub with order by index (result)
--Testcase 2232:
SELECT id, date_sub(c3 + '1 12:59:10', '1 12:59:10') FROM time_tbl order by 1,2;
 id |      date_sub       
----+---------------------
  0 | 2021-01-03 12:10:30
  1 | 2021-01-04 23:12:13
  2 | 2021-01-05 11:12:12
  3 | 2021-01-06 16:00:00
  4 | 2021-01-07 00:59:59
(5 rows)

-- select date_sub with group by (explain)
--Testcase 2233:
EXPLAIN VERBOSE
SELECT max(c3), date_sub(c3 + '1 12:59:10', '1 12:59:10') FROM time_tbl group by date_sub(c3 + '1 12:59:10', '1 12:59:10') ORDER BY 1,2;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=16)
   Output: (max(c3)), (date_sub((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval))
   Sort Key: (max(time_tbl.c3)), (date_sub((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=16)
         Output: max(c3), (date_sub((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval))
         Group Key: (date_sub((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=16)
               Output: (date_sub((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT date_sub((`c3` + INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1 12:59:10.0' DAY_MICROSECOND), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.date_sub((c3 + '1 day 12:59:10'::interval), '1 day 12:59:10'::interval), c3 FROM public.time_tbl1mysql
(15 rows)

-- select date_sub with group by (result)
--Testcase 2234:
SELECT max(c3), date_sub(c3 + '1 12:59:10', '1 12:59:10') FROM time_tbl group by date_sub(c3 + '1 12:59:10', '1 12:59:10') ORDER BY 1,2;
         max         |      date_sub       
---------------------+---------------------
 2021-01-03 12:10:30 | 2021-01-03 12:10:30
 2021-01-04 23:12:13 | 2021-01-04 23:12:13
 2021-01-05 11:12:12 | 2021-01-05 11:12:12
 2021-01-06 16:00:00 | 2021-01-06 16:00:00
 2021-01-07 00:59:59 | 2021-01-07 00:59:59
(5 rows)

-- select date_sub with group by index (result)
--Testcase 2235:
SELECT id, date_sub(c3 + '1 12:59:10', '1 12:59:10') FROM time_tbl group by 2,1;
 id |      date_sub       
----+---------------------
  1 | 2021-01-04 23:12:13
  3 | 2021-01-06 16:00:00
  4 | 2021-01-07 00:59:59
  2 | 2021-01-05 11:12:12
  0 | 2021-01-03 12:10:30
(5 rows)

-- select date_sub with group by index (result)
--Testcase 2236:
SELECT id, date_sub(c3 + '1 12:59:10', '1 12:59:10') FROM time_tbl group by 1,2;
 id |      date_sub       
----+---------------------
  0 | 2021-01-03 12:10:30
  3 | 2021-01-06 16:00:00
  2 | 2021-01-05 11:12:12
  1 | 2021-01-04 23:12:13
  4 | 2021-01-07 00:59:59
(5 rows)

-- select date_sub with group by having (explain)
--Testcase 2237:
EXPLAIN VERBOSE
SELECT max(c3), date_sub(c3 + '1 12:59:10', '1 12:59:10') FROM time_tbl group by date_sub(c3 + '1 12:59:10', '1 12:59:10'), c3 HAVING date_sub(c3 + '1 12:59:10', '1 12:59:10') > '2000-01-01' ORDER BY 1,2;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=24)
   Output: (max(c3)), (date_sub((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval)), c3
   Sort Key: (max(time_tbl.c3)), (date_sub((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval))
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=24)
         Output: max(c3), (date_sub((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval)), c3
         Group Key: (date_sub((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval)), time_tbl.c3
         Filter: ((date_sub((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval)) > '2000-01-01 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=16)
               Output: (date_sub((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT date_sub((`c3` + INTERVAL '1 12:59:10.0' DAY_MICROSECOND), INTERVAL '1 12:59:10.0' DAY_MICROSECOND), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.date_sub((c3 + '1 day 12:59:10'::interval), '1 day 12:59:10'::interval), c3 FROM public.time_tbl1mysql
(16 rows)

-- select date_sub with group by having (result)
--Testcase 2238:
SELECT max(c3), date_sub(c3 + '1 12:59:10', '1 12:59:10') FROM time_tbl group by date_sub(c3 + '1 12:59:10', '1 12:59:10'), c3 HAVING date_sub(c3 + '1 12:59:10', '1 12:59:10') > '2000-01-01' ORDER BY 1,2;
         max         |      date_sub       
---------------------+---------------------
 2021-01-03 12:10:30 | 2021-01-03 12:10:30
 2021-01-04 23:12:13 | 2021-01-04 23:12:13
 2021-01-05 11:12:12 | 2021-01-05 11:12:12
 2021-01-06 16:00:00 | 2021-01-06 16:00:00
 2021-01-07 00:59:59 | 2021-01-07 00:59:59
(5 rows)

-- select date_sub with group by index having (result)
--Testcase 2239:
SELECT id, date_sub(c3 + '1 12:59:10', '1 12:59:10'), c3 FROM time_tbl group by 3, 2, 1 HAVING date_sub(c3 + '1 12:59:10', '1 12:59:10') > '2000-01-01' ORDER BY 1,2;
 id |      date_sub       |         c3          
----+---------------------+---------------------
  0 | 2021-01-03 12:10:30 | 2021-01-03 12:10:30
  1 | 2021-01-04 23:12:13 | 2021-01-04 23:12:13
  2 | 2021-01-05 11:12:12 | 2021-01-05 11:12:12
  3 | 2021-01-06 16:00:00 | 2021-01-06 16:00:00
  4 | 2021-01-07 00:59:59 | 2021-01-07 00:59:59
(5 rows)

-- select date_sub with group by index having (result)
--Testcase 2240:
SELECT id, date_sub(c3 + '1 12:59:10', '1 12:59:10'), c3 FROM time_tbl group by 1, 2, 3 HAVING date_sub(c3 + '1 12:59:10', '1 12:59:10') > '2000-01-01' ORDER BY 1,2;
 id |      date_sub       |         c3          
----+---------------------+---------------------
  0 | 2021-01-03 12:10:30 | 2021-01-03 12:10:30
  1 | 2021-01-04 23:12:13 | 2021-01-04 23:12:13
  2 | 2021-01-05 11:12:12 | 2021-01-05 11:12:12
  3 | 2021-01-06 16:00:00 | 2021-01-06 16:00:00
  4 | 2021-01-07 00:59:59 | 2021-01-07 00:59:59
(5 rows)

-- select date_sub and as
--Testcase 2241:
SELECT date_sub(date_sub(c3, '1 12:59:10'), '1-1') as date_sub1 FROM time_tbl ORDER BY 1;
      date_sub1      
---------------------
 2019-12-01 23:11:20
 2019-12-03 10:13:03
 2019-12-03 22:13:02
 2019-12-05 03:00:50
 2019-12-05 12:00:49
(5 rows)

-- DATEDIFF()
-- select datediff (stub function, explain)
--Testcase 2242:
EXPLAIN VERBOSE
SELECT datediff(c3, c2), datediff(c2, '2004-10-19 10:23:54'::timestamp), datediff(c2, '2007-12-31'::date), datediff('2007-12-31 23:59:59'::timestamp, '2007-12-30') FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7736.68..7753.75 rows=6826 width=16)
   Output: (datediff(c3, (c2)::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
   Sort Key: (datediff(time_tbl.c3, (time_tbl.c2)::timestamp without time zone)), (datediff((time_tbl.c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((time_tbl.c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7301.98 rows=6826 width=16)
         Output: (datediff(c3, (c2)::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT datediff(`c3`, `c2`), datediff(`c2`, '2004-10-19 10:23:54'), datediff(`c2`, '2007-12-31 00:00:00'), datediff('2007-12-31 23:59:59', '2007-12-30 00:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.datediff(c3, c2), public.datediff(c2, '2004-10-19 10:23:54'::timestamp without time zone), public.datediff(c2, '2007-12-31 00:00:00'::timestamp without time zone), public.datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select datediff (stub function, result)
--Testcase 2243:
SELECT datediff(c3, c2), datediff(c2, '2004-10-19 10:23:54'::timestamp), datediff(c2, '2007-12-31'::date), datediff('2007-12-31 23:59:59'::timestamp, '2007-12-30') FROM time_tbl ORDER BY 1,2,3,4;
 datediff | datediff | datediff | datediff 
----------+----------+----------+----------
      -22 |     5946 |     4778 |        1
       -9 |     5932 |     4764 |        1
       -5 |     5927 |     4759 |        1
        1 |     5919 |     4751 |        1
        3 |     5918 |     4750 |        1
(5 rows)

-- select datediff (stub function, not pushdown constraints, explain)
--Testcase 2244:
EXPLAIN VERBOSE
SELECT datediff(c3, c2), datediff(c2, '2004-10-19 10:23:54'::timestamp), datediff(c2, '2007-12-31'::date), datediff('2007-12-31 23:59:59'::timestamp, '2007-12-30') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=425.85..425.93 rows=34 width=16)
   Output: (datediff(c3, (c2)::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
   Sort Key: (datediff(time_tbl.c3, (time_tbl.c2)::timestamp without time zone)), (datediff((time_tbl.c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((time_tbl.c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..424.98 rows=34 width=16)
         Output: (datediff(c3, (c2)::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT datediff(`c3`, `c2`), datediff(`c2`, '2004-10-19 10:23:54'), datediff(`c2`, '2007-12-31 00:00:00'), datediff('2007-12-31 23:59:59', '2007-12-30 00:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.datediff(c3, c2), public.datediff(c2, '2004-10-19 10:23:54'::timestamp without time zone), public.datediff(c2, '2007-12-31 00:00:00'::timestamp without time zone), public.datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select datediff (stub function, not pushdown constraints, result)
--Testcase 2245:
SELECT datediff(c3, c2), datediff(c2, '2004-10-19 10:23:54'::timestamp), datediff(c2, '2007-12-31'::date), datediff('2007-12-31 23:59:59'::timestamp, '2007-12-30') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
 datediff | datediff | datediff | datediff 
----------+----------+----------+----------
        3 |     5918 |     4750 |        1
(1 row)

-- select datediff (stub function, pushdown constraints, explain)
--Testcase 2246:
EXPLAIN VERBOSE
SELECT datediff(c3, c2), datediff(c2, '2004-10-19 10:23:54'::timestamp), datediff(c2, '2007-12-31'::date), datediff('2007-12-31 23:59:59'::timestamp, '2007-12-30') FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
                                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7716.40..7733.38 rows=6792 width=16)
   Output: (datediff(c3, (c2)::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
   Sort Key: (datediff(time_tbl.c3, (time_tbl.c2)::timestamp without time zone)), (datediff((time_tbl.c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((time_tbl.c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7284.11 rows=6792 width=16)
         Output: (datediff(c3, (c2)::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT datediff(`c3`, `c2`), datediff(`c2`, '2004-10-19 10:23:54'), datediff(`c2`, '2007-12-31 00:00:00'), datediff('2007-12-31 23:59:59', '2007-12-30 00:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.datediff(c3, c2), public.datediff(c2, '2004-10-19 10:23:54'::timestamp without time zone), public.datediff(c2, '2007-12-31 00:00:00'::timestamp without time zone), public.datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 0))
(12 rows)

-- select datediff (stub function, pushdown constraints, result)
--Testcase 2247:
SELECT datediff(c3, c2), datediff(c2, '2004-10-19 10:23:54'::timestamp), datediff(c2, '2007-12-31'::date), datediff('2007-12-31 23:59:59'::timestamp, '2007-12-30') FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
 datediff | datediff | datediff | datediff 
----------+----------+----------+----------
      -22 |     5946 |     4778 |        1
       -9 |     5932 |     4764 |        1
       -5 |     5927 |     4759 |        1
        3 |     5918 |     4750 |        1
(4 rows)

-- select datediff (stub function, datediff in constraints, explain)
--Testcase 2248:
EXPLAIN VERBOSE
SELECT datediff(c3, c2), datediff(c2, '2004-10-19 10:23:54'::timestamp), datediff(c2, '2007-12-31'::date), datediff('2007-12-31 23:59:59'::timestamp, '2007-12-30') FROM time_tbl WHERE datediff(c3, c2) != 0 ORDER BY 1,2,3,4;
                                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9439.97..9456.95 rows=6792 width=16)
   Output: (datediff(c3, (c2)::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
   Sort Key: (datediff(time_tbl.c3, (time_tbl.c2)::timestamp without time zone)), (datediff((time_tbl.c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((time_tbl.c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..9007.67 rows=6792 width=16)
         Output: (datediff(c3, (c2)::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT datediff(`c3`, `c2`), datediff(`c2`, '2004-10-19 10:23:54'), datediff(`c2`, '2007-12-31 00:00:00'), datediff('2007-12-31 23:59:59', '2007-12-30 00:00:00') FROM `test`.`time_tbl2` WHERE ((datediff(`c3`, `c2`) <> 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.datediff(c3, c2), public.datediff(c2, '2004-10-19 10:23:54'::timestamp without time zone), public.datediff(c2, '2007-12-31 00:00:00'::timestamp without time zone), public.datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.datediff(c3, c2) <> 0))
(12 rows)

-- select datediff (stub function, datediff in constraints, result)
--Testcase 2249:
SELECT datediff(c3, c2), datediff(c2, '2004-10-19 10:23:54'::timestamp), datediff(c2, '2007-12-31'::date), datediff('2007-12-31 23:59:59'::timestamp, '2007-12-30') FROM time_tbl WHERE datediff(c3, c2) != 0 ORDER BY 1,2,3,4;
 datediff | datediff | datediff | datediff 
----------+----------+----------+----------
      -22 |     5946 |     4778 |        1
       -9 |     5932 |     4764 |        1
       -5 |     5927 |     4759 |        1
        1 |     5919 |     4751 |        1
        3 |     5918 |     4750 |        1
(5 rows)

-- select datediff (stub function, datediff in constraints, explain)
--Testcase 2250:
EXPLAIN VERBOSE
SELECT datediff(c3, c2), datediff(c2, '2004-10-19 10:23:54'::timestamp), datediff(c2, '2007-12-31'::date), datediff('2007-12-31 23:59:59'::timestamp, '2007-12-30') FROM time_tbl WHERE datediff('2007-12-31 23:59:59'::timestamp, '2007-12-30') > 0 ORDER BY 1,2,3,4;
                                                                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4477.33..4483.02 rows=2276 width=16)
   Output: (datediff(c3, (c2)::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
   Sort Key: (datediff(time_tbl.c3, (time_tbl.c2)::timestamp without time zone)), (datediff((time_tbl.c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((time_tbl.c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4350.42 rows=2276 width=16)
         Output: (datediff(c3, (c2)::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2004-10-19 10:23:54'::timestamp without time zone)), (datediff((c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), (datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT datediff(`c3`, `c2`), datediff(`c2`, '2004-10-19 10:23:54'), datediff(`c2`, '2007-12-31 00:00:00'), datediff('2007-12-31 23:59:59', '2007-12-30 00:00:00') FROM `test`.`time_tbl2` WHERE ((datediff('2007-12-31 23:59:59', '2007-12-30 00:00:00') > 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.datediff(c3, c2), public.datediff(c2, '2004-10-19 10:23:54'::timestamp without time zone), public.datediff(c2, '2007-12-31 00:00:00'::timestamp without time zone), public.datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.datediff('2007-12-31 23:59:59'::timestamp without time zone, '2007-12-30 00:00:00'::timestamp without time zone) > 0))
(12 rows)

-- select datediff (stub function, datediff in constraints, result)
--Testcase 2251:
SELECT datediff(c3, c2), datediff(c2, '2004-10-19 10:23:54'::timestamp), datediff(c2, '2007-12-31'::date), datediff('2007-12-31 23:59:59'::timestamp, '2007-12-30') FROM time_tbl WHERE datediff('2007-12-31 23:59:59'::timestamp, '2007-12-30') > 0 ORDER BY 1,2,3,4;
 datediff | datediff | datediff | datediff 
----------+----------+----------+----------
      -22 |     5946 |     4778 |        1
       -9 |     5932 |     4764 |        1
       -5 |     5927 |     4759 |        1
        1 |     5919 |     4751 |        1
        3 |     5918 |     4750 |        1
(5 rows)

-- select datediff as nest function with agg (pushdown, explain)
--Testcase 2252:
EXPLAIN VERBOSE
SELECT max(c2), datediff('2021-01-02'::date, max(c2)) FROM time_tbl;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=8)
   Output: (max(c2)), datediff('2021-01-02 00:00:00'::timestamp without time zone, ((max(c2)))::timestamp without time zone)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c2`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c2) FROM public.time_tbl1mysql
(11 rows)

-- select datediff as nest function with agg (pushdown, result)
--Testcase 2253:
SELECT max(c2), datediff('2021-01-02'::date, max(c2)) FROM time_tbl;
ERROR:  stub datediff(timestamp, timestamp) is called
CONTEXT:  PL/pgSQL function datediff(timestamp without time zone,timestamp without time zone) line 3 at RAISE
-- select datediff as nest with stub (pushdown, explain)
--Testcase 2254:
EXPLAIN VERBOSE
SELECT datediff(makedate(2019, id), c2) FROM time_tbl ORDER BY 1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4306.62..4323.68 rows=6826 width=4)
   Output: (datediff((makedate(2019, id))::timestamp without time zone, (c2)::timestamp without time zone))
   Sort Key: (datediff((makedate(2019, time_tbl.id))::timestamp without time zone, (time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3871.91 rows=6826 width=4)
         Output: (datediff((makedate(2019, id))::timestamp without time zone, (c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT datediff(makedate(2019, `id`), `c2`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.datediff(public.makedate(2019, id), c2) FROM public.time_tbl1mysql
(12 rows)

-- select datediff as nest with stub (pushdown, result)
--Testcase 2255:
SELECT datediff(makedate(2019, id), c2) FROM time_tbl ORDER BY 1;
 datediff 
----------
     -756
     -743
     -739
     -731
         
(5 rows)

-- select datediff with non pushdown func and explicit constant (explain)
--Testcase 2256:
EXPLAIN VERBOSE
SELECT datediff(c2, '2007-12-31'::date), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=44)
   Output: (datediff((c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), '3.141592653589793'::double precision, 4.1
   Sort Key: (datediff((time_tbl.c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=44)
         Output: (datediff((c2)::timestamp without time zone, '2007-12-31 00:00:00'::timestamp without time zone)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT datediff(`c2`, '2007-12-31 00:00:00'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.datediff(c2, '2007-12-31 00:00:00'::timestamp without time zone), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select datediff with non pushdown func and explicit constant (result)
--Testcase 2257:
SELECT datediff(c2, '2007-12-31'::date), pi(), 4.1 FROM time_tbl ORDER BY 1;
 datediff |        pi         | ?column? 
----------+-------------------+----------
     4750 | 3.141592653589793 |      4.1
     4751 | 3.141592653589793 |      4.1
     4759 | 3.141592653589793 |      4.1
     4764 | 3.141592653589793 |      4.1
     4778 | 3.141592653589793 |      4.1
(5 rows)

-- select datediff with order by (explain)
--Testcase 2258:
EXPLAIN VERBOSE
SELECT id, datediff(c3 + '1 12:59:10', c2 ) FROM time_tbl order by id,datediff(c3 + '1 12:59:10', c2 );
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2600.12..2617.18 rows=6826 width=8)
   Output: id, (datediff((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (c2)::timestamp without time zone))
   Sort Key: time_tbl.id, (datediff((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=8)
         Output: id, (datediff((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, datediff((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND), `c2`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.datediff((c3 + '1 day 12:59:10'::interval), c2) FROM public.time_tbl1mysql
(12 rows)

-- select datediff with order by (result)
--Testcase 2259:
SELECT id, datediff(c3 + '1 12:59:10', c2 ) FROM time_tbl order by id,datediff(c3 + '1 12:59:10', c2 );
 id | datediff 
----+----------
  0 |        3
  1 |        5
  2 |       -3
  3 |       -7
  4 |      -21
(5 rows)

-- select datediff with order by index (result)
--Testcase 2260:
SELECT id, datediff(c3 + '1 12:59:10', c2 ) FROM time_tbl order by 2,1;
 id | datediff 
----+----------
  4 |      -21
  3 |       -7
  2 |       -3
  0 |        3
  1 |        5
(5 rows)

-- select datediff with order by index (result)
--Testcase 2261:
SELECT id, datediff(c3 + '1 12:59:10', c2 ) FROM time_tbl order by 1,2;
 id | datediff 
----+----------
  0 |        3
  1 |        5
  2 |       -3
  3 |       -7
  4 |      -21
(5 rows)

-- select datediff with group by (explain)
--Testcase 2262:
EXPLAIN VERBOSE
SELECT count(id), datediff(c3 + '1 12:59:10', c2 ) FROM time_tbl group by datediff(c3 + '1 12:59:10', c2 ) ORDER BY 1,2;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2260.18..2260.68 rows=200 width=12)
   Output: (count(id)), (datediff((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (c2)::timestamp without time zone))
   Sort Key: (count(time_tbl.id)), (datediff((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (time_tbl.c2)::timestamp without time zone))
   ->  HashAggregate  (cost=2199.54..2252.54 rows=200 width=12)
         Output: count(id), (datediff((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (c2)::timestamp without time zone))
         Group Key: (datediff((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (time_tbl.c2)::timestamp without time zone))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=8)
               Output: (datediff((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (c2)::timestamp without time zone)), id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT datediff((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND), `c2`), `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.datediff((c3 + '1 day 12:59:10'::interval), c2), id FROM public.time_tbl1mysql
(15 rows)

-- select datediff with group by (result)
--Testcase 2263:
SELECT count(id), datediff(c3 + '1 12:59:10', c2 ) FROM time_tbl group by datediff(c3 + '1 12:59:10', c2 ) ORDER BY 1,2;
 count | datediff 
-------+----------
     1 |      -21
     1 |       -7
     1 |       -3
     1 |        3
     1 |        5
(5 rows)

-- select datediff with group by index (result)
--Testcase 2264:
SELECT id, datediff(c3 + '1 12:59:10', c2 ) FROM time_tbl group by 2,1;
 id | datediff 
----+----------
  2 |       -3
  0 |        3
  4 |      -21
  1 |        5
  3 |       -7
(5 rows)

-- select datediff with group by index (result)
--Testcase 2265:
SELECT id, datediff(c3 + '1 12:59:10', c2 ) FROM time_tbl group by 1,2;
 id | datediff 
----+----------
  2 |       -3
  1 |        5
  3 |       -7
  0 |        3
  4 |      -21
(5 rows)

-- select datediff with group by having (explain)
--Testcase 2266:
EXPLAIN VERBOSE
SELECT count(id), datediff(c3 + '1 12:59:10', c2 ), c2, c3 FROM time_tbl group by datediff(c3 + '1 12:59:10', c2 ), id,c2,c3 HAVING datediff(c3 + '1 12:59:10', c2 ) > 0 ORDER BY 1,2,3,4;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2323.35..2323.52 rows=67 width=28)
   Output: (count(id)), (datediff((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (c2)::timestamp without time zone)), c2, c3, id
   Sort Key: (count(time_tbl.id)), (datediff((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (time_tbl.c2)::timestamp without time zone)), time_tbl.c2, time_tbl.c3
   ->  HashAggregate  (cost=2250.74..2321.32 rows=67 width=28)
         Output: count(id), (datediff((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (c2)::timestamp without time zone)), c2, c3, id
         Group Key: (datediff((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (time_tbl.c2)::timestamp without time zone)), time_tbl.id, time_tbl.c2, time_tbl.c3
         Filter: ((datediff((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (time_tbl.c2)::timestamp without time zone)) > 0)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=20)
               Output: (datediff((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), (c2)::timestamp without time zone)), c2, c3, id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT datediff((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND), `c2`), `c2`, `c3`, `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.datediff((c3 + '1 day 12:59:10'::interval), c2), c2, c3, id FROM public.time_tbl1mysql
(16 rows)

-- select datediff with group by having (result)
--Testcase 2267:
SELECT count(id), datediff(c3 + '1 12:59:10', c2 ), c2, c3 FROM time_tbl group by datediff(c3 + '1 12:59:10', c2 ), id,c2,c3 HAVING datediff(c3 + '1 12:59:10', c2 ) > 0 ORDER BY 1,2,3,4;
 count | datediff |     c2     |         c3          
-------+----------+------------+---------------------
     1 |        3 | 2021-01-02 | 2021-01-03 12:10:30
     1 |        5 | 2021-01-01 | 2021-01-04 23:12:13
(2 rows)

-- select datediff with group by index having (result)
--Testcase 2268:
SELECT id, datediff(c3 + '1 12:59:10', c2 ), c2, c3 FROM time_tbl group by 4,3,2,1 HAVING datediff(c3 + '1 12:59:10', c2 ) > 0 ORDER BY 1,2,3,4;
 id | datediff |     c2     |         c3          
----+----------+------------+---------------------
  0 |        3 | 2021-01-02 | 2021-01-03 12:10:30
  1 |        5 | 2021-01-01 | 2021-01-04 23:12:13
(2 rows)

-- select datediff with group by index having (result)
--Testcase 2269:
SELECT id, datediff(c3 + '1 12:59:10', c2 ), c2, c3 FROM time_tbl group by 1,2,3,4 HAVING datediff(c3 + '1 12:59:10', c2 ) > 0 ORDER BY 1,2,3,4;
 id | datediff |     c2     |         c3          
----+----------+------------+---------------------
  0 |        3 | 2021-01-02 | 2021-01-03 12:10:30
  1 |        5 | 2021-01-01 | 2021-01-04 23:12:13
(2 rows)

-- select datediff and as
--Testcase 2270:
SELECT datediff(c2, '2007-12-31'::date) as datediff1 FROM time_tbl ORDER BY 1;
 datediff1 
-----------
      4750
      4751
      4759
      4764
      4778
(5 rows)

-- YEARWEEK()
-- select yearweek (stub function, explain)
--Testcase 2271:
EXPLAIN VERBOSE
SELECT yearweek(c3), yearweek(c2), yearweek(date_sub(c3, '1 12:59:10')), yearweek('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                  QUERY PLAN                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9409.05..9426.12 rows=6826 width=16)
   Output: (yearweek(c3)), (yearweek((c2)::timestamp without time zone)), (yearweek(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (yearweek(time_tbl.c3)), (yearweek((time_tbl.c2)::timestamp without time zone)), (yearweek(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8974.35 rows=6826 width=16)
         Output: (yearweek(c3)), (yearweek((c2)::timestamp without time zone)), (yearweek(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT yearweek(`c3`), yearweek(`c2`), yearweek(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), yearweek('2021-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.yearweek(c3), public.yearweek(c2), public.yearweek(public.date_sub(c3, '1 day 12:59:10'::interval)), public.yearweek('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select yearweek (stub function, result)
--Testcase 2272:
SELECT yearweek(c3), yearweek(c2), yearweek(date_sub(c3, '1 12:59:10')), yearweek('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
 yearweek | yearweek | yearweek | yearweek 
----------+----------+----------+----------
   202101 |   202052 |   202052 |   202052
   202101 |   202052 |   202101 |   202052
   202101 |   202102 |   202101 |   202052
   202101 |   202102 |   202101 |   202052
   202101 |   202104 |   202101 |   202052
(5 rows)

-- select yearweek (stub function, not pushdown constraints, explain)
--Testcase 2273:
EXPLAIN VERBOSE
SELECT yearweek(c3), yearweek(c2), yearweek(date_sub(c3, '1 12:59:10')), yearweek('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                  QUERY PLAN                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.18..434.26 rows=34 width=16)
   Output: (yearweek(c3)), (yearweek((c2)::timestamp without time zone)), (yearweek(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (yearweek(time_tbl.c3)), (yearweek((time_tbl.c2)::timestamp without time zone)), (yearweek(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.31 rows=34 width=16)
         Output: (yearweek(c3)), (yearweek((c2)::timestamp without time zone)), (yearweek(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT yearweek(`c3`), yearweek(`c2`), yearweek(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), yearweek('2021-01-01 12:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.yearweek(c3), public.yearweek(c2), public.yearweek(public.date_sub(c3, '1 day 12:59:10'::interval)), public.yearweek('2021-01-01 12:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select yearweek (stub function, not pushdown constraints, result)
--Testcase 2274:
SELECT yearweek(c3), yearweek(c2), yearweek(date_sub(c3, '1 12:59:10')), yearweek('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
 yearweek | yearweek | yearweek | yearweek 
----------+----------+----------+----------
   202101 |   202052 |   202101 |   202052
(1 row)

-- select yearweek (stub function, pushdown constraints, explain)
--Testcase 2275:
EXPLAIN VERBOSE
SELECT yearweek(c3), yearweek(c2), yearweek(date_sub(c3, '1 12:59:10')), yearweek('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                         QUERY PLAN                                                                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9380.44..9397.42 rows=6792 width=16)
   Output: (yearweek(c3)), (yearweek((c2)::timestamp without time zone)), (yearweek(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (yearweek(time_tbl.c3)), (yearweek((time_tbl.c2)::timestamp without time zone)), (yearweek(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8948.15 rows=6792 width=16)
         Output: (yearweek(c3)), (yearweek((c2)::timestamp without time zone)), (yearweek(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT yearweek(`c3`), yearweek(`c2`), yearweek(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), yearweek('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.yearweek(c3), public.yearweek(c2), public.yearweek(public.date_sub(c3, '1 day 12:59:10'::interval)), public.yearweek('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select yearweek (stub function, pushdown constraints, result)
--Testcase 2276:
SELECT yearweek(c3), yearweek(c2), yearweek(date_sub(c3, '1 12:59:10')), yearweek('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
 yearweek | yearweek | yearweek | yearweek 
----------+----------+----------+----------
   202101 |   202052 |   202052 |   202052
   202101 |   202052 |   202101 |   202052
   202101 |   202102 |   202101 |   202052
   202101 |   202102 |   202101 |   202052
   202101 |   202104 |   202101 |   202052
(5 rows)

-- select yearweek (stub function, yearweek in constraints, explain)
--Testcase 2277:
EXPLAIN VERBOSE
SELECT yearweek(c3), yearweek(c2), yearweek(date_sub(c3, '1 12:59:10')), yearweek('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE yearweek(c3) != yearweek('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
                                                                                                                                                                  QUERY PLAN                                                                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=12793.44..12810.42 rows=6792 width=16)
   Output: (yearweek(c3)), (yearweek((c2)::timestamp without time zone)), (yearweek(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (yearweek(time_tbl.c3)), (yearweek((time_tbl.c2)::timestamp without time zone)), (yearweek(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..12361.15 rows=6792 width=16)
         Output: (yearweek(c3)), (yearweek((c2)::timestamp without time zone)), (yearweek(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT yearweek(`c3`), yearweek(`c2`), yearweek(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), yearweek('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((yearweek(`c3`) <> yearweek('2000-01-01 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.yearweek(c3), public.yearweek(c2), public.yearweek(public.date_sub(c3, '1 day 12:59:10'::interval)), public.yearweek('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.yearweek(c3) <> public.yearweek('2000-01-01 00:00:00'::timestamp without time zone)))
(12 rows)

-- select yearweek (stub function, yearweek in constraints, result)
--Testcase 2278:
SELECT yearweek(c3), yearweek(c2), yearweek(date_sub(c3, '1 12:59:10')), yearweek('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE yearweek(c3) != yearweek('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
 yearweek | yearweek | yearweek | yearweek 
----------+----------+----------+----------
   202101 |   202052 |   202052 |   202052
   202101 |   202052 |   202101 |   202052
   202101 |   202102 |   202101 |   202052
   202101 |   202102 |   202101 |   202052
   202101 |   202104 |   202101 |   202052
(5 rows)

-- select yearweek (stub function, yearweek in constraints, explain)
--Testcase 2279:
EXPLAIN VERBOSE
SELECT yearweek(c3), yearweek(c2), yearweek(date_sub(c3, '1 12:59:10')), yearweek('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE yearweek('2021-01-01 12:00:00'::timestamp) > '1' ORDER BY 1,2,3,4;
                                                                                                                                                        QUERY PLAN                                                                                                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5034.95..5040.64 rows=2276 width=16)
   Output: (yearweek(c3)), (yearweek((c2)::timestamp without time zone)), (yearweek(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (yearweek(time_tbl.c3)), (yearweek((time_tbl.c2)::timestamp without time zone)), (yearweek(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4908.03 rows=2276 width=16)
         Output: (yearweek(c3)), (yearweek((c2)::timestamp without time zone)), (yearweek(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (yearweek('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT yearweek(`c3`), yearweek(`c2`), yearweek(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), yearweek('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((yearweek('2021-01-01 12:00:00') > 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.yearweek(c3), public.yearweek(c2), public.yearweek(public.date_sub(c3, '1 day 12:59:10'::interval)), public.yearweek('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.yearweek('2021-01-01 12:00:00'::timestamp without time zone) > 1))
(12 rows)

-- select yearweek (stub function, yearweek in constraints, result)
--Testcase 2280:
SELECT yearweek(c3), yearweek(c2), yearweek(date_sub(c3, '1 12:59:10')), yearweek('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE yearweek('2021-01-01 12:00:00'::timestamp) > '1' ORDER BY 1,2,3,4;
 yearweek | yearweek | yearweek | yearweek 
----------+----------+----------+----------
   202101 |   202052 |   202052 |   202052
   202101 |   202052 |   202101 |   202052
   202101 |   202102 |   202101 |   202052
   202101 |   202102 |   202101 |   202052
   202101 |   202104 |   202101 |   202052
(5 rows)

-- select yearweek with agg (pushdown, explain)
--Testcase 2281:
EXPLAIN VERBOSE
SELECT max(c3), yearweek(max(c3)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c3)), yearweek((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select yearweek as nest function with agg (pushdown, result)
--Testcase 2282:
SELECT max(c3), yearweek(max(c3)) FROM time_tbl;
ERROR:  stub yearweek(timestamp) is called
CONTEXT:  PL/pgSQL function yearweek(timestamp without time zone) line 3 at RAISE
-- select yearweek with non pushdown func and explicit constant (explain)
--Testcase 2283:
EXPLAIN VERBOSE
SELECT yearweek(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (yearweek(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (yearweek(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (yearweek(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT yearweek(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.yearweek(public.date_sub(c3, '1 day 12:59:10'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select yearweek with non pushdown func and explicit constant (result)
--Testcase 2284:
SELECT yearweek(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
 yearweek |        pi         | ?column? 
----------+-------------------+----------
   202052 | 3.141592653589793 |      4.1
   202101 | 3.141592653589793 |      4.1
   202101 | 3.141592653589793 |      4.1
   202101 | 3.141592653589793 |      4.1
   202101 | 3.141592653589793 |      4.1
(5 rows)

-- select yearweek with order by (explain)
--Testcase 2285:
EXPLAIN VERBOSE
SELECT id, yearweek(c3 + '1 12:59:10') FROM time_tbl order by id,yearweek(c3 + '1 12:59:10');
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=8)
   Output: id, (yearweek((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: time_tbl.id, (yearweek((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=8)
         Output: id, (yearweek((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, yearweek((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.yearweek((c3 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select yearweek with order by (result)
--Testcase 2286:
SELECT id, yearweek(c3 + '1 12:59:10') FROM time_tbl order by id,yearweek(c3 + '1 12:59:10');
 id | yearweek 
----+----------
  0 |   202101
  1 |   202101
  2 |   202101
  3 |   202101
  4 |   202101
(5 rows)

-- select yearweek with order by index (result)
--Testcase 2287:
SELECT id, yearweek(c3 + '1 12:59:10') FROM time_tbl order by 2,1;
 id | yearweek 
----+----------
  0 |   202101
  1 |   202101
  2 |   202101
  3 |   202101
  4 |   202101
(5 rows)

-- select yearweek with order by index (result)
--Testcase 2288:
SELECT id, yearweek(c3 + '1 12:59:10') FROM time_tbl order by 1,2;
 id | yearweek 
----+----------
  0 |   202101
  1 |   202101
  2 |   202101
  3 |   202101
  4 |   202101
(5 rows)

-- select yearweek with group by (explain)
--Testcase 2289:
EXPLAIN VERBOSE
SELECT max(c3), yearweek(c3 + '1 12:59:10') FROM time_tbl group by yearweek(c3 + '1 12:59:10') ORDER BY 1,2;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=12)
   Output: (max(c3)), (yearweek((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: (max(time_tbl.c3)), (yearweek((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=12)
         Output: max(c3), (yearweek((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Group Key: (yearweek((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (yearweek((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT yearweek((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.yearweek((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(15 rows)

-- select yearweek with group by (result)
--Testcase 2290:
SELECT max(c3), yearweek(c3 + '1 12:59:10') FROM time_tbl group by yearweek(c3 + '1 12:59:10') ORDER BY 1,2;
         max         | yearweek 
---------------------+----------
 2021-01-07 00:59:59 |   202101
(1 row)

-- select yearweek with group by index (result)
--Testcase 2291:
SELECT id, yearweek(c3 + '1 12:59:10') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | yearweek 
----+----------
  0 |   202101
  1 |   202101
  2 |   202101
  3 |   202101
  4 |   202101
(5 rows)

-- select yearweek with group by index (result)
--Testcase 2292:
SELECT id, yearweek(c3 + '1 12:59:10') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | yearweek 
----+----------
  0 |   202101
  1 |   202101
  2 |   202101
  3 |   202101
  4 |   202101
(5 rows)

-- select yearweek with group by having (explain)
--Testcase 2293:
EXPLAIN VERBOSE
SELECT max(c3), yearweek(c3 + '1 12:59:10') FROM time_tbl group by yearweek(c3 + '1 12:59:10'), c3 HAVING yearweek(c3 + '1 12:59:10') > 201010 ORDER BY 1,2;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=20)
   Output: (max(c3)), (yearweek((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
   Sort Key: (max(time_tbl.c3)), (yearweek((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=20)
         Output: max(c3), (yearweek((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
         Group Key: (yearweek((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), time_tbl.c3
         Filter: ((yearweek((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))) > 201010)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (yearweek((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT yearweek((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.yearweek((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(16 rows)

-- select yearweek with group by having (result)
--Testcase 2294:
SELECT max(c3), yearweek(c3 + '1 12:59:10') FROM time_tbl group by yearweek(c3 + '1 12:59:10'), c3 HAVING yearweek(c3 + '1 12:59:10') > 201010 ORDER BY 1,2;
         max         | yearweek 
---------------------+----------
 2021-01-03 12:10:30 |   202101
 2021-01-04 23:12:13 |   202101
 2021-01-05 11:12:12 |   202101
 2021-01-06 16:00:00 |   202101
 2021-01-07 00:59:59 |   202101
(5 rows)

-- select yearweek with group by index having (result)
--Testcase 2295:
SELECT id, yearweek(c3 + '1 12:59:10'), c3 FROM time_tbl group by 3, 2, 1 HAVING yearweek(c3 + '1 12:59:10') > 201010 ORDER BY 1,2;
 id | yearweek |         c3          
----+----------+---------------------
  0 |   202101 | 2021-01-03 12:10:30
  1 |   202101 | 2021-01-04 23:12:13
  2 |   202101 | 2021-01-05 11:12:12
  3 |   202101 | 2021-01-06 16:00:00
  4 |   202101 | 2021-01-07 00:59:59
(5 rows)

-- select yearweek with group by index having (result)
--Testcase 2296:
SELECT id, yearweek(c3 + '1 12:59:10'), c3 FROM time_tbl group by 1, 2, 3 HAVING yearweek(c3 + '1 12:59:10') > 201010 ORDER BY 1,2;
 id | yearweek |         c3          
----+----------+---------------------
  0 |   202101 | 2021-01-03 12:10:30
  1 |   202101 | 2021-01-04 23:12:13
  2 |   202101 | 2021-01-05 11:12:12
  3 |   202101 | 2021-01-06 16:00:00
  4 |   202101 | 2021-01-07 00:59:59
(5 rows)

-- select yearweek and as
--Testcase 2297:
SELECT yearweek(date_sub(c3, '1 12:59:10')) as yearweek1 FROM time_tbl ORDER BY 1;
 yearweek1 
-----------
    202052
    202101
    202101
    202101
    202101
(5 rows)

-- YEAR()
-- select year (stub function, explain)
--Testcase 2298:
EXPLAIN VERBOSE
SELECT year(c3), year(c2), year(date_sub(c3, '1 12:59:10')), year('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                          QUERY PLAN                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9409.05..9426.12 rows=6826 width=16)
   Output: (year(c3)), (year((c2)::timestamp without time zone)), (year(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (year(time_tbl.c3)), (year((time_tbl.c2)::timestamp without time zone)), (year(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8974.35 rows=6826 width=16)
         Output: (year(c3)), (year((c2)::timestamp without time zone)), (year(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT year(`c3`), year(`c2`), year(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), year('2021-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.year(c3), public.year(c2), public.year(public.date_sub(c3, '1 day 12:59:10'::interval)), public.year('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select year (stub function, result)
--Testcase 2299:
SELECT year(c3), year(c2), year(date_sub(c3, '1 12:59:10')), year('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
 year | year | year | year 
------+------+------+------
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
(5 rows)

-- select year (stub function, not pushdown constraints, explain)
--Testcase 2300:
EXPLAIN VERBOSE
SELECT year(c3), year(c2), year(date_sub(c3, '1 12:59:10')), year('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                          QUERY PLAN                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.18..434.26 rows=34 width=16)
   Output: (year(c3)), (year((c2)::timestamp without time zone)), (year(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (year(time_tbl.c3)), (year((time_tbl.c2)::timestamp without time zone)), (year(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.31 rows=34 width=16)
         Output: (year(c3)), (year((c2)::timestamp without time zone)), (year(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT year(`c3`), year(`c2`), year(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), year('2021-01-01 12:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.year(c3), public.year(c2), public.year(public.date_sub(c3, '1 day 12:59:10'::interval)), public.year('2021-01-01 12:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select year (stub function, not pushdown constraints, result)
--Testcase 2301:
SELECT year(c3), year(c2), year(date_sub(c3, '1 12:59:10')), year('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
 year | year | year | year 
------+------+------+------
 2021 | 2021 | 2021 | 2021
(1 row)

-- select year (stub function, pushdown constraints, explain)
--Testcase 2302:
EXPLAIN VERBOSE
SELECT year(c3), year(c2), year(date_sub(c3, '1 12:59:10')), year('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9380.44..9397.42 rows=6792 width=16)
   Output: (year(c3)), (year((c2)::timestamp without time zone)), (year(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (year(time_tbl.c3)), (year((time_tbl.c2)::timestamp without time zone)), (year(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8948.15 rows=6792 width=16)
         Output: (year(c3)), (year((c2)::timestamp without time zone)), (year(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT year(`c3`), year(`c2`), year(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), year('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.year(c3), public.year(c2), public.year(public.date_sub(c3, '1 day 12:59:10'::interval)), public.year('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select year (stub function, pushdown constraints, result)
--Testcase 2303:
SELECT year(c3), year(c2), year(date_sub(c3, '1 12:59:10')), year('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
 year | year | year | year 
------+------+------+------
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
(5 rows)

-- select year (stub function, year in constraints, explain)
--Testcase 2304:
EXPLAIN VERBOSE
SELECT year(c3), year(c2), year(date_sub(c3, '1 12:59:10')), year('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE year(c3) != year('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
                                                                                                                                                      QUERY PLAN                                                                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=12793.44..12810.42 rows=6792 width=16)
   Output: (year(c3)), (year((c2)::timestamp without time zone)), (year(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (year(time_tbl.c3)), (year((time_tbl.c2)::timestamp without time zone)), (year(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..12361.15 rows=6792 width=16)
         Output: (year(c3)), (year((c2)::timestamp without time zone)), (year(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT year(`c3`), year(`c2`), year(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), year('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((year(`c3`) <> year('2000-01-01 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.year(c3), public.year(c2), public.year(public.date_sub(c3, '1 day 12:59:10'::interval)), public.year('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.year(c3) <> public.year('2000-01-01 00:00:00'::timestamp without time zone)))
(12 rows)

-- select year (stub function, year in constraints, result)
--Testcase 2305:
SELECT year(c3), year(c2), year(date_sub(c3, '1 12:59:10')), year('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE year(c3) != year('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
 year | year | year | year 
------+------+------+------
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
(5 rows)

-- select year (stub function, year in constraints, explain)
--Testcase 2306:
EXPLAIN VERBOSE
SELECT year(c3), year(c2), year(date_sub(c3, '1 12:59:10')), year('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE year('2021-01-01 12:00:00'::timestamp) > '1' ORDER BY 1,2,3,4;
                                                                                                                                              QUERY PLAN                                                                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5034.95..5040.64 rows=2276 width=16)
   Output: (year(c3)), (year((c2)::timestamp without time zone)), (year(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (year(time_tbl.c3)), (year((time_tbl.c2)::timestamp without time zone)), (year(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4908.03 rows=2276 width=16)
         Output: (year(c3)), (year((c2)::timestamp without time zone)), (year(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (year('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT year(`c3`), year(`c2`), year(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), year('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((year('2021-01-01 12:00:00') > 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.year(c3), public.year(c2), public.year(public.date_sub(c3, '1 day 12:59:10'::interval)), public.year('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.year('2021-01-01 12:00:00'::timestamp without time zone) > 1))
(12 rows)

-- select year (stub function, year in constraints, result)
--Testcase 2307:
SELECT year(c3), year(c2), year(date_sub(c3, '1 12:59:10')), year('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE year('2021-01-01 12:00:00'::timestamp) > '1' ORDER BY 1,2,3,4;
 year | year | year | year 
------+------+------+------
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
 2021 | 2021 | 2021 | 2021
(5 rows)

-- select year with agg (pushdown, explain)
--Testcase 2308:
EXPLAIN VERBOSE
SELECT max(c3), year(max(c3)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c3)), year((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select year as nest function with agg (pushdown, result)
--Testcase 2309:
SELECT max(c3), year(max(c3)) FROM time_tbl;
ERROR:  stub year(timestamp) is called
CONTEXT:  PL/pgSQL function year(timestamp without time zone) line 3 at RAISE
-- select year with non pushdown func and explicit constant (explain)
--Testcase 2310:
EXPLAIN VERBOSE
SELECT year(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (year(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (year(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (year(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT year(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.year(public.date_sub(c3, '1 day 12:59:10'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select year with non pushdown func and explicit constant (result)
--Testcase 2311:
SELECT year(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
 year |        pi         | ?column? 
------+-------------------+----------
 2021 | 3.141592653589793 |      4.1
 2021 | 3.141592653589793 |      4.1
 2021 | 3.141592653589793 |      4.1
 2021 | 3.141592653589793 |      4.1
 2021 | 3.141592653589793 |      4.1
(5 rows)

-- select year with order by (explain)
--Testcase 2312:
EXPLAIN VERBOSE
SELECT id, year(c3 + '1 12:59:10') FROM time_tbl order by id,year(c3 + '1 12:59:10');
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=8)
   Output: id, (year((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: time_tbl.id, (year((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=8)
         Output: id, (year((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, year((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.year((c3 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select year with order by (result)
--Testcase 2313:
SELECT id, year(c3 + '1 12:59:10') FROM time_tbl order by id,year(c3 + '1 12:59:10');
 id | year 
----+------
  0 | 2021
  1 | 2021
  2 | 2021
  3 | 2021
  4 | 2021
(5 rows)

-- select year with order by index (result)
--Testcase 2314:
SELECT id, year(c3 + '1 12:59:10') FROM time_tbl order by 2,1;
 id | year 
----+------
  0 | 2021
  1 | 2021
  2 | 2021
  3 | 2021
  4 | 2021
(5 rows)

-- select year with order by index (result)
--Testcase 2315:
SELECT id, year(c3 + '1 12:59:10') FROM time_tbl order by 1,2;
 id | year 
----+------
  0 | 2021
  1 | 2021
  2 | 2021
  3 | 2021
  4 | 2021
(5 rows)

-- select year with group by (explain)
--Testcase 2316:
EXPLAIN VERBOSE
SELECT max(c3), year(c3 + '1 12:59:10') FROM time_tbl group by year(c3 + '1 12:59:10') ORDER BY 1,2;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=12)
   Output: (max(c3)), (year((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: (max(time_tbl.c3)), (year((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=12)
         Output: max(c3), (year((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Group Key: (year((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (year((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT year((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.year((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(15 rows)

-- select year with group by (result)
--Testcase 2317:
SELECT max(c3), year(c3 + '1 12:59:10') FROM time_tbl group by year(c3 + '1 12:59:10') ORDER BY 1,2;
         max         | year 
---------------------+------
 2021-01-07 00:59:59 | 2021
(1 row)

-- select year with group by index (result)
--Testcase 2318:
SELECT id, year(c3 + '1 12:59:10') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | year 
----+------
  0 | 2021
  1 | 2021
  2 | 2021
  3 | 2021
  4 | 2021
(5 rows)

-- select year with group by index (result)
--Testcase 2319:
SELECT id, year(c3 + '1 12:59:10') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | year 
----+------
  0 | 2021
  1 | 2021
  2 | 2021
  3 | 2021
  4 | 2021
(5 rows)

-- select year with group by having (explain)
--Testcase 2320:
EXPLAIN VERBOSE
SELECT max(c3), year(c3 + '1 12:59:10') FROM time_tbl group by year(c3 + '1 12:59:10'), c3 HAVING year(c3 + '1 12:59:10') > 2000 ORDER BY 1,2;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=20)
   Output: (max(c3)), (year((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
   Sort Key: (max(time_tbl.c3)), (year((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=20)
         Output: max(c3), (year((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
         Group Key: (year((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), time_tbl.c3
         Filter: ((year((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))) > 2000)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (year((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT year((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.year((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(16 rows)

-- select year with group by having (result)
--Testcase 2321:
SELECT max(c3), year(c3 + '1 12:59:10') FROM time_tbl group by year(c3 + '1 12:59:10'), c3 HAVING year(c3 + '1 12:59:10') > 2000 ORDER BY 1,2;
         max         | year 
---------------------+------
 2021-01-03 12:10:30 | 2021
 2021-01-04 23:12:13 | 2021
 2021-01-05 11:12:12 | 2021
 2021-01-06 16:00:00 | 2021
 2021-01-07 00:59:59 | 2021
(5 rows)

-- select year with group by index having (result)
--Testcase 2322:
SELECT id, year(c3 + '1 12:59:10'), c3 FROM time_tbl group by 3, 2, 1 HAVING year(c3 + '1 12:59:10') > 2000 ORDER BY 1,2;
 id | year |         c3          
----+------+---------------------
  0 | 2021 | 2021-01-03 12:10:30
  1 | 2021 | 2021-01-04 23:12:13
  2 | 2021 | 2021-01-05 11:12:12
  3 | 2021 | 2021-01-06 16:00:00
  4 | 2021 | 2021-01-07 00:59:59
(5 rows)

-- select year with group by index having (result)
--Testcase 2323:
SELECT id, year(c3 + '1 12:59:10'), c3 FROM time_tbl group by 1, 2, 3 HAVING year(c3 + '1 12:59:10') > 2000 ORDER BY 1,2;
 id | year |         c3          
----+------+---------------------
  0 | 2021 | 2021-01-03 12:10:30
  1 | 2021 | 2021-01-04 23:12:13
  2 | 2021 | 2021-01-05 11:12:12
  3 | 2021 | 2021-01-06 16:00:00
  4 | 2021 | 2021-01-07 00:59:59
(5 rows)

-- select year and as
--Testcase 2324:
SELECT year(date_sub(c3, '1 12:59:10')) as year1 FROM time_tbl ORDER BY 1;
 year1 
-------
  2021
  2021
  2021
  2021
  2021
(5 rows)

-- WEEKFORYEAR()
-- select weekofyear (stub function, explain)
--Testcase 2325:
EXPLAIN VERBOSE
SELECT weekofyear(c3), weekofyear(c2), weekofyear(date_sub(c3, '1 12:59:10')), weekofyear('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                      QUERY PLAN                                                                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9409.05..9426.12 rows=6826 width=16)
   Output: (weekofyear(c3)), (weekofyear((c2)::timestamp without time zone)), (weekofyear(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (weekofyear(time_tbl.c3)), (weekofyear((time_tbl.c2)::timestamp without time zone)), (weekofyear(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8974.35 rows=6826 width=16)
         Output: (weekofyear(c3)), (weekofyear((c2)::timestamp without time zone)), (weekofyear(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT weekofyear(`c3`), weekofyear(`c2`), weekofyear(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), weekofyear('2021-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.weekofyear(c3), public.weekofyear(c2), public.weekofyear(public.date_sub(c3, '1 day 12:59:10'::interval)), public.weekofyear('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select weekofyear (stub function, result)
--Testcase 2326:
SELECT weekofyear(c3), weekofyear(c2), weekofyear(date_sub(c3, '1 12:59:10')), weekofyear('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
 weekofyear | weekofyear | weekofyear | weekofyear 
------------+------------+------------+------------
          1 |          1 |         53 |         53
          1 |          2 |          1 |         53
          1 |          4 |          1 |         53
          1 |         53 |         53 |         53
         53 |         53 |         53 |         53
(5 rows)

-- select weekofyear (stub function, not pushdown constraints, explain)
--Testcase 2327:
EXPLAIN VERBOSE
SELECT weekofyear(c3), weekofyear(c2), weekofyear(date_sub(c3, '1 12:59:10')), weekofyear('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                      QUERY PLAN                                                                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.18..434.26 rows=34 width=16)
   Output: (weekofyear(c3)), (weekofyear((c2)::timestamp without time zone)), (weekofyear(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (weekofyear(time_tbl.c3)), (weekofyear((time_tbl.c2)::timestamp without time zone)), (weekofyear(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.31 rows=34 width=16)
         Output: (weekofyear(c3)), (weekofyear((c2)::timestamp without time zone)), (weekofyear(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT weekofyear(`c3`), weekofyear(`c2`), weekofyear(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), weekofyear('2021-01-01 12:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.weekofyear(c3), public.weekofyear(c2), public.weekofyear(public.date_sub(c3, '1 day 12:59:10'::interval)), public.weekofyear('2021-01-01 12:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select weekofyear (stub function, not pushdown constraints, result)
--Testcase 2328:
SELECT weekofyear(c3), weekofyear(c2), weekofyear(date_sub(c3, '1 12:59:10')), weekofyear('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
 weekofyear | weekofyear | weekofyear | weekofyear 
------------+------------+------------+------------
          1 |         53 |         53 |         53
(1 row)

-- select weekofyear (stub function, pushdown constraints, explain)
--Testcase 2329:
EXPLAIN VERBOSE
SELECT weekofyear(c3), weekofyear(c2), weekofyear(date_sub(c3, '1 12:59:10')), weekofyear('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9380.44..9397.42 rows=6792 width=16)
   Output: (weekofyear(c3)), (weekofyear((c2)::timestamp without time zone)), (weekofyear(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (weekofyear(time_tbl.c3)), (weekofyear((time_tbl.c2)::timestamp without time zone)), (weekofyear(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8948.15 rows=6792 width=16)
         Output: (weekofyear(c3)), (weekofyear((c2)::timestamp without time zone)), (weekofyear(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT weekofyear(`c3`), weekofyear(`c2`), weekofyear(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), weekofyear('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.weekofyear(c3), public.weekofyear(c2), public.weekofyear(public.date_sub(c3, '1 day 12:59:10'::interval)), public.weekofyear('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select weekofyear (stub function, pushdown constraints, result)
--Testcase 2330:
SELECT weekofyear(c3), weekofyear(c2), weekofyear(date_sub(c3, '1 12:59:10')), weekofyear('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
 weekofyear | weekofyear | weekofyear | weekofyear 
------------+------------+------------+------------
          1 |          1 |         53 |         53
          1 |          2 |          1 |         53
          1 |          4 |          1 |         53
          1 |         53 |         53 |         53
         53 |         53 |         53 |         53
(5 rows)

-- select weekofyear (stub function, weekofyear in constraints, explain)
--Testcase 2331:
EXPLAIN VERBOSE
SELECT weekofyear(c3), weekofyear(c2), weekofyear(date_sub(c3, '1 12:59:10')), weekofyear('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE weekofyear(c3) != weekofyear('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
                                                                                                                                                                        QUERY PLAN                                                                                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=12793.44..12810.42 rows=6792 width=16)
   Output: (weekofyear(c3)), (weekofyear((c2)::timestamp without time zone)), (weekofyear(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (weekofyear(time_tbl.c3)), (weekofyear((time_tbl.c2)::timestamp without time zone)), (weekofyear(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..12361.15 rows=6792 width=16)
         Output: (weekofyear(c3)), (weekofyear((c2)::timestamp without time zone)), (weekofyear(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT weekofyear(`c3`), weekofyear(`c2`), weekofyear(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), weekofyear('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((weekofyear(`c3`) <> weekofyear('2000-01-01 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.weekofyear(c3), public.weekofyear(c2), public.weekofyear(public.date_sub(c3, '1 day 12:59:10'::interval)), public.weekofyear('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.weekofyear(c3) <> public.weekofyear('2000-01-01 00:00:00'::timestamp without time zone)))
(12 rows)

-- select weekofyear (stub function, weekofyear in constraints, result)
--Testcase 2332:
SELECT weekofyear(c3), weekofyear(c2), weekofyear(date_sub(c3, '1 12:59:10')), weekofyear('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE weekofyear(c3) != weekofyear('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
 weekofyear | weekofyear | weekofyear | weekofyear 
------------+------------+------------+------------
          1 |          1 |         53 |         53
          1 |          2 |          1 |         53
          1 |          4 |          1 |         53
          1 |         53 |         53 |         53
         53 |         53 |         53 |         53
(5 rows)

-- select weekofyear (stub function, weekofyear in constraints, explain)
--Testcase 2333:
EXPLAIN VERBOSE
SELECT weekofyear(c3), weekofyear(c2), weekofyear(date_sub(c3, '1 12:59:10')), weekofyear('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE weekofyear('2021-01-01 12:00:00'::timestamp) > '1' ORDER BY 1,2,3,4;
                                                                                                                                                             QUERY PLAN                                                                                                                                                              
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5034.95..5040.64 rows=2276 width=16)
   Output: (weekofyear(c3)), (weekofyear((c2)::timestamp without time zone)), (weekofyear(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (weekofyear(time_tbl.c3)), (weekofyear((time_tbl.c2)::timestamp without time zone)), (weekofyear(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4908.03 rows=2276 width=16)
         Output: (weekofyear(c3)), (weekofyear((c2)::timestamp without time zone)), (weekofyear(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekofyear('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT weekofyear(`c3`), weekofyear(`c2`), weekofyear(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), weekofyear('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((weekofyear('2021-01-01 12:00:00') > 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.weekofyear(c3), public.weekofyear(c2), public.weekofyear(public.date_sub(c3, '1 day 12:59:10'::interval)), public.weekofyear('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.weekofyear('2021-01-01 12:00:00'::timestamp without time zone) > 1))
(12 rows)

-- select weekofyear (stub function, weekofyear in constraints, result)
--Testcase 2334:
SELECT weekofyear(c3), weekofyear(c2), weekofyear(date_sub(c3, '1 12:59:10')), weekofyear('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE weekofyear('2021-01-01 12:00:00'::timestamp) > '1' ORDER BY 1,2,3,4;
 weekofyear | weekofyear | weekofyear | weekofyear 
------------+------------+------------+------------
          1 |          1 |         53 |         53
          1 |          2 |          1 |         53
          1 |          4 |          1 |         53
          1 |         53 |         53 |         53
         53 |         53 |         53 |         53
(5 rows)

-- select weekofyear with agg (pushdown, explain)
--Testcase 2335:
EXPLAIN VERBOSE
SELECT max(c3), weekofyear(max(c3)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c3)), weekofyear((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select weekofyear as nest function with agg (pushdown, result)
--Testcase 2336:
SELECT max(c3), weekofyear(max(c3)) FROM time_tbl;
ERROR:  stub weekofyear(timestamp) is called
CONTEXT:  PL/pgSQL function weekofyear(timestamp without time zone) line 3 at RAISE
-- select weekofyear with non pushdown func and explicit constant (explain)
--Testcase 2337:
EXPLAIN VERBOSE
SELECT weekofyear(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (weekofyear(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (weekofyear(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (weekofyear(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT weekofyear(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.weekofyear(public.date_sub(c3, '1 day 12:59:10'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select weekofyear with non pushdown func and explicit constant (result)
--Testcase 2338:
SELECT weekofyear(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
 weekofyear |        pi         | ?column? 
------------+-------------------+----------
          1 | 3.141592653589793 |      4.1
          1 | 3.141592653589793 |      4.1
         53 | 3.141592653589793 |      4.1
         53 | 3.141592653589793 |      4.1
         53 | 3.141592653589793 |      4.1
(5 rows)

-- select weekofyear with order by (explain)
--Testcase 2339:
EXPLAIN VERBOSE
SELECT id, weekofyear(c3 + '1 12:59:10') FROM time_tbl order by id,weekofyear(c3 + '1 12:59:10');
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=8)
   Output: id, (weekofyear((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: time_tbl.id, (weekofyear((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=8)
         Output: id, (weekofyear((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, weekofyear((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.weekofyear((c3 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select weekofyear with order by (result)
--Testcase 2340:
SELECT id, weekofyear(c3 + '1 12:59:10') FROM time_tbl order by id,weekofyear(c3 + '1 12:59:10');
 id | weekofyear 
----+------------
  0 |          1
  1 |          1
  2 |          1
  3 |          1
  4 |          1
(5 rows)

-- select weekofyear with order by index (result)
--Testcase 2341:
SELECT id, weekofyear(c3 + '1 12:59:10') FROM time_tbl order by 2,1;
 id | weekofyear 
----+------------
  0 |          1
  1 |          1
  2 |          1
  3 |          1
  4 |          1
(5 rows)

-- select weekofyear with order by index (result)
--Testcase 2342:
SELECT id, weekofyear(c3 + '1 12:59:10') FROM time_tbl order by 1,2;
 id | weekofyear 
----+------------
  0 |          1
  1 |          1
  2 |          1
  3 |          1
  4 |          1
(5 rows)

-- select weekofyear with group by (explain)
--Testcase 2343:
EXPLAIN VERBOSE
SELECT max(c3), weekofyear(c3 + '1 12:59:10') FROM time_tbl group by weekofyear(c3 + '1 12:59:10') ORDER BY 1,2;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=12)
   Output: (max(c3)), (weekofyear((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: (max(time_tbl.c3)), (weekofyear((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=12)
         Output: max(c3), (weekofyear((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Group Key: (weekofyear((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (weekofyear((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT weekofyear((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.weekofyear((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(15 rows)

-- select weekofyear with group by (result)
--Testcase 2344:
SELECT max(c3), weekofyear(c3 + '1 12:59:10') FROM time_tbl group by weekofyear(c3 + '1 12:59:10') ORDER BY 1,2;
         max         | weekofyear 
---------------------+------------
 2021-01-07 00:59:59 |          1
(1 row)

-- select weekofyear with group by index (result)
--Testcase 2345:
SELECT id, weekofyear(c3 + '1 12:59:10') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | weekofyear 
----+------------
  0 |          1
  1 |          1
  2 |          1
  3 |          1
  4 |          1
(5 rows)

-- select weekofyear with group by index (result)
--Testcase 2346:
SELECT id, weekofyear(c3 + '1 12:59:10') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | weekofyear 
----+------------
  0 |          1
  1 |          1
  2 |          1
  3 |          1
  4 |          1
(5 rows)

-- select weekofyear with group by having (explain)
--Testcase 2347:
EXPLAIN VERBOSE
SELECT max(c3), weekofyear(c3 + '1 12:59:10') FROM time_tbl group by weekofyear(c3 + '1 12:59:10'), c3 HAVING weekofyear(c3 + '1 12:59:10') > 0 ORDER BY 1,2;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=20)
   Output: (max(c3)), (weekofyear((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
   Sort Key: (max(time_tbl.c3)), (weekofyear((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=20)
         Output: max(c3), (weekofyear((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
         Group Key: (weekofyear((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), time_tbl.c3
         Filter: ((weekofyear((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))) > 0)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (weekofyear((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT weekofyear((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.weekofyear((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(16 rows)

-- select weekofyear with group by having (result)
--Testcase 2348:
SELECT max(c3), weekofyear(c3 + '1 12:59:10') FROM time_tbl group by weekofyear(c3 + '1 12:59:10'), c3 HAVING weekofyear(c3 + '1 12:59:10') > 0 ORDER BY 1,2;
         max         | weekofyear 
---------------------+------------
 2021-01-03 12:10:30 |          1
 2021-01-04 23:12:13 |          1
 2021-01-05 11:12:12 |          1
 2021-01-06 16:00:00 |          1
 2021-01-07 00:59:59 |          1
(5 rows)

-- select weekofyear with group by index having (result)
--Testcase 2349:
SELECT id, weekofyear(c3 + '1 12:59:10'), c3 FROM time_tbl group by 3, 2, 1 HAVING weekofyear(c3 + '1 12:59:10') > 0 ORDER BY 1,2,3;
 id | weekofyear |         c3          
----+------------+---------------------
  0 |          1 | 2021-01-03 12:10:30
  1 |          1 | 2021-01-04 23:12:13
  2 |          1 | 2021-01-05 11:12:12
  3 |          1 | 2021-01-06 16:00:00
  4 |          1 | 2021-01-07 00:59:59
(5 rows)

-- select weekofyear with group by index having (result)
--Testcase 2350:
SELECT id, weekofyear(c3 + '1 12:59:10'), c3 FROM time_tbl group by 1, 2, 3 HAVING weekofyear(c3 + '1 12:59:10') > 0 ORDER BY 1,2,3;
 id | weekofyear |         c3          
----+------------+---------------------
  0 |          1 | 2021-01-03 12:10:30
  1 |          1 | 2021-01-04 23:12:13
  2 |          1 | 2021-01-05 11:12:12
  3 |          1 | 2021-01-06 16:00:00
  4 |          1 | 2021-01-07 00:59:59
(5 rows)

-- select weekofyear and as
--Testcase 2351:
SELECT weekofyear(date_sub(c3, '1 12:59:10')) as weekofyear1 FROM time_tbl ORDER BY 1;
 weekofyear1 
-------------
           1
           1
          53
          53
          53
(5 rows)

-- WEEKDAY()
-- select weekday (stub function, explain)
--Testcase 2352:
EXPLAIN VERBOSE
SELECT weekday(c3), weekday(c2), weekday(date_sub(c3, '1 12:59:10')), weekday('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                QUERY PLAN                                                                                                                
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9409.05..9426.12 rows=6826 width=16)
   Output: (weekday(c3)), (weekday((c2)::timestamp without time zone)), (weekday(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (weekday(time_tbl.c3)), (weekday((time_tbl.c2)::timestamp without time zone)), (weekday(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8974.35 rows=6826 width=16)
         Output: (weekday(c3)), (weekday((c2)::timestamp without time zone)), (weekday(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT weekday(`c3`), weekday(`c2`), weekday(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), weekday('2021-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.weekday(c3), public.weekday(c2), public.weekday(public.date_sub(c3, '1 day 12:59:10'::interval)), public.weekday('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select weekday (stub function, result)
--Testcase 2353:
SELECT weekday(c3), weekday(c2), weekday(date_sub(c3, '1 12:59:10')), weekday('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
 weekday | weekday | weekday | weekday 
---------+---------+---------+---------
       0 |       4 |       6 |       4
       1 |       6 |       6 |       4
       2 |       4 |       1 |       4
       3 |       4 |       1 |       4
       6 |       5 |       4 |       4
(5 rows)

-- select weekday (stub function, not pushdown constraints, explain)
--Testcase 2354:
EXPLAIN VERBOSE
SELECT weekday(c3), weekday(c2), weekday(date_sub(c3, '1 12:59:10')), weekday('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                QUERY PLAN                                                                                                                
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.18..434.26 rows=34 width=16)
   Output: (weekday(c3)), (weekday((c2)::timestamp without time zone)), (weekday(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (weekday(time_tbl.c3)), (weekday((time_tbl.c2)::timestamp without time zone)), (weekday(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.31 rows=34 width=16)
         Output: (weekday(c3)), (weekday((c2)::timestamp without time zone)), (weekday(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT weekday(`c3`), weekday(`c2`), weekday(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), weekday('2021-01-01 12:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.weekday(c3), public.weekday(c2), public.weekday(public.date_sub(c3, '1 day 12:59:10'::interval)), public.weekday('2021-01-01 12:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select weekday (stub function, not pushdown constraints, result)
--Testcase 2355:
SELECT weekday(c3), weekday(c2), weekday(date_sub(c3, '1 12:59:10')), weekday('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
 weekday | weekday | weekday | weekday 
---------+---------+---------+---------
       0 |       4 |       6 |       4
(1 row)

-- select weekday (stub function, pushdown constraints, explain)
--Testcase 2356:
EXPLAIN VERBOSE
SELECT weekday(c3), weekday(c2), weekday(date_sub(c3, '1 12:59:10')), weekday('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9380.44..9397.42 rows=6792 width=16)
   Output: (weekday(c3)), (weekday((c2)::timestamp without time zone)), (weekday(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (weekday(time_tbl.c3)), (weekday((time_tbl.c2)::timestamp without time zone)), (weekday(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8948.15 rows=6792 width=16)
         Output: (weekday(c3)), (weekday((c2)::timestamp without time zone)), (weekday(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT weekday(`c3`), weekday(`c2`), weekday(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), weekday('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.weekday(c3), public.weekday(c2), public.weekday(public.date_sub(c3, '1 day 12:59:10'::interval)), public.weekday('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select weekday (stub function, pushdown constraints, result)
--Testcase 2357:
SELECT weekday(c3), weekday(c2), weekday(date_sub(c3, '1 12:59:10')), weekday('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
 weekday | weekday | weekday | weekday 
---------+---------+---------+---------
       0 |       4 |       6 |       4
       1 |       6 |       6 |       4
       2 |       4 |       1 |       4
       3 |       4 |       1 |       4
       6 |       5 |       4 |       4
(5 rows)

-- select weekday (stub function, weekday in constraints, explain)
--Testcase 2358:
EXPLAIN VERBOSE
SELECT weekday(c3), weekday(c2), weekday(date_sub(c3, '1 12:59:10')), weekday('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE weekday(c3) != weekday('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
                                                                                                                                                               QUERY PLAN                                                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=12793.44..12810.42 rows=6792 width=16)
   Output: (weekday(c3)), (weekday((c2)::timestamp without time zone)), (weekday(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (weekday(time_tbl.c3)), (weekday((time_tbl.c2)::timestamp without time zone)), (weekday(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..12361.15 rows=6792 width=16)
         Output: (weekday(c3)), (weekday((c2)::timestamp without time zone)), (weekday(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT weekday(`c3`), weekday(`c2`), weekday(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), weekday('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((weekday(`c3`) <> weekday('2000-01-01 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.weekday(c3), public.weekday(c2), public.weekday(public.date_sub(c3, '1 day 12:59:10'::interval)), public.weekday('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.weekday(c3) <> public.weekday('2000-01-01 00:00:00'::timestamp without time zone)))
(12 rows)

-- select weekday (stub function, weekday in constraints, result)
--Testcase 2359:
SELECT weekday(c3), weekday(c2), weekday(date_sub(c3, '1 12:59:10')), weekday('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE weekday(c3) != weekday('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
 weekday | weekday | weekday | weekday 
---------+---------+---------+---------
       0 |       4 |       6 |       4
       1 |       6 |       6 |       4
       2 |       4 |       1 |       4
       3 |       4 |       1 |       4
       6 |       5 |       4 |       4
(5 rows)

-- select weekday (stub function, weekday in constraints, explain)
--Testcase 2360:
EXPLAIN VERBOSE
SELECT weekday(c3), weekday(c2), weekday(date_sub(c3, '1 12:59:10')), weekday('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE weekday('2021-01-01 12:00:00'::timestamp) > '1' ORDER BY 1,2,3,4;
                                                                                                                                                      QUERY PLAN                                                                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5034.95..5040.64 rows=2276 width=16)
   Output: (weekday(c3)), (weekday((c2)::timestamp without time zone)), (weekday(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (weekday(time_tbl.c3)), (weekday((time_tbl.c2)::timestamp without time zone)), (weekday(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4908.03 rows=2276 width=16)
         Output: (weekday(c3)), (weekday((c2)::timestamp without time zone)), (weekday(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (weekday('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT weekday(`c3`), weekday(`c2`), weekday(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), weekday('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((weekday('2021-01-01 12:00:00') > 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.weekday(c3), public.weekday(c2), public.weekday(public.date_sub(c3, '1 day 12:59:10'::interval)), public.weekday('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.weekday('2021-01-01 12:00:00'::timestamp without time zone) > 1))
(12 rows)

-- select weekday (stub function, weekday in constraints, result)
--Testcase 2361:
SELECT weekday(c3), weekday(c2), weekday(date_sub(c3, '1 12:59:10')), weekday('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE weekday('2021-01-01 12:00:00'::timestamp) > '1' ORDER BY 1,2,3,4;
 weekday | weekday | weekday | weekday 
---------+---------+---------+---------
       0 |       4 |       6 |       4
       1 |       6 |       6 |       4
       2 |       4 |       1 |       4
       3 |       4 |       1 |       4
       6 |       5 |       4 |       4
(5 rows)

-- select weekday with agg (pushdown, explain)
--Testcase 2362:
EXPLAIN VERBOSE
SELECT max(c3), weekday(max(c3)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c3)), weekday((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select weekday as nest function with agg (pushdown, result)
--Testcase 2363:
SELECT max(c3), weekday(max(c3)) FROM time_tbl;
ERROR:  stub weekday(timestamp) is called
CONTEXT:  PL/pgSQL function weekday(timestamp without time zone) line 3 at RAISE
-- select weekday with non pushdown func and explicit constant (explain)
--Testcase 2364:
EXPLAIN VERBOSE
SELECT weekday(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (weekday(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (weekday(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (weekday(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT weekday(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.weekday(public.date_sub(c3, '1 day 12:59:10'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select weekday with non pushdown func and explicit constant (result)
--Testcase 2365:
SELECT weekday(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
 weekday |        pi         | ?column? 
---------+-------------------+----------
       1 | 3.141592653589793 |      4.1
       1 | 3.141592653589793 |      4.1
       4 | 3.141592653589793 |      4.1
       6 | 3.141592653589793 |      4.1
       6 | 3.141592653589793 |      4.1
(5 rows)

-- select weekday with order by (explain)
--Testcase 2366:
EXPLAIN VERBOSE
SELECT id, weekday(c3 + '1 12:59:10') FROM time_tbl order by id,weekday(c3 + '1 12:59:10');
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=8)
   Output: id, (weekday((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: time_tbl.id, (weekday((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=8)
         Output: id, (weekday((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, weekday((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.weekday((c3 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select weekday with order by (result)
--Testcase 2367:
SELECT id, weekday(c3 + '1 12:59:10') FROM time_tbl order by id,weekday(c3 + '1 12:59:10');
 id | weekday 
----+---------
  0 |       1
  1 |       2
  2 |       3
  3 |       4
  4 |       4
(5 rows)

-- select weekday with order by index (result)
--Testcase 2368:
SELECT id, weekday(c3 + '1 12:59:10') FROM time_tbl order by 2,1;
 id | weekday 
----+---------
  0 |       1
  1 |       2
  2 |       3
  3 |       4
  4 |       4
(5 rows)

-- select weekday with order by index (result)
--Testcase 2369:
SELECT id, weekday(c3 + '1 12:59:10') FROM time_tbl order by 1,2;
 id | weekday 
----+---------
  0 |       1
  1 |       2
  2 |       3
  3 |       4
  4 |       4
(5 rows)

-- select weekday with group by (explain)
--Testcase 2370:
EXPLAIN VERBOSE
SELECT max(c3), weekday(c3 + '1 12:59:10') FROM time_tbl group by weekday(c3 + '1 12:59:10') ORDER BY 1,2;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=12)
   Output: (max(c3)), (weekday((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: (max(time_tbl.c3)), (weekday((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=12)
         Output: max(c3), (weekday((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Group Key: (weekday((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (weekday((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT weekday((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.weekday((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(15 rows)

-- select weekday with group by (result)
--Testcase 2371:
SELECT max(c3), weekday(c3 + '1 12:59:10') FROM time_tbl group by weekday(c3 + '1 12:59:10') ORDER BY 1,2;
         max         | weekday 
---------------------+---------
 2021-01-03 12:10:30 |       1
 2021-01-04 23:12:13 |       2
 2021-01-05 11:12:12 |       3
 2021-01-07 00:59:59 |       4
(4 rows)

-- select weekday with group by index (result)
--Testcase 2372:
SELECT id, weekday(c3 + '1 12:59:10') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | weekday 
----+---------
  0 |       1
  1 |       2
  2 |       3
  3 |       4
  4 |       4
(5 rows)

-- select weekday with group by index (result)
--Testcase 2373:
SELECT id, weekday(c3 + '1 12:59:10') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | weekday 
----+---------
  0 |       1
  1 |       2
  2 |       3
  3 |       4
  4 |       4
(5 rows)

-- select weekday with group by having (explain)
--Testcase 2374:
EXPLAIN VERBOSE
SELECT max(c3), weekday(c3 + '1 12:59:10') FROM time_tbl group by weekday(c3 + '1 12:59:10'), c3 HAVING weekday(c3 + '1 12:59:10') > 0 ORDER BY 1,2;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=20)
   Output: (max(c3)), (weekday((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
   Sort Key: (max(time_tbl.c3)), (weekday((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=20)
         Output: max(c3), (weekday((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
         Group Key: (weekday((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), time_tbl.c3
         Filter: ((weekday((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))) > 0)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (weekday((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT weekday((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.weekday((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(16 rows)

-- select weekday with group by having (result)
--Testcase 2375:
SELECT max(c3), weekday(c3 + '1 12:59:10') FROM time_tbl group by weekday(c3 + '1 12:59:10'), c3 HAVING weekday(c3 + '1 12:59:10') > 0 ORDER BY 1,2;
         max         | weekday 
---------------------+---------
 2021-01-03 12:10:30 |       1
 2021-01-04 23:12:13 |       2
 2021-01-05 11:12:12 |       3
 2021-01-06 16:00:00 |       4
 2021-01-07 00:59:59 |       4
(5 rows)

-- select weekday with group by index having (result)
--Testcase 2376:
SELECT id, weekday(c3 + '1 12:59:10'), c3 FROM time_tbl group by 3, 2, 1 HAVING weekday(c3 + '1 12:59:10') > 0 ORDER BY 1,2;
 id | weekday |         c3          
----+---------+---------------------
  0 |       1 | 2021-01-03 12:10:30
  1 |       2 | 2021-01-04 23:12:13
  2 |       3 | 2021-01-05 11:12:12
  3 |       4 | 2021-01-06 16:00:00
  4 |       4 | 2021-01-07 00:59:59
(5 rows)

-- select weekday with group by index having (result)
--Testcase 2377:
SELECT id, weekday(c3 + '1 12:59:10'), c3 FROM time_tbl group by 1, 2, 3 HAVING weekday(c3 + '1 12:59:10') > 0 ORDER BY 1,2;
 id | weekday |         c3          
----+---------+---------------------
  0 |       1 | 2021-01-03 12:10:30
  1 |       2 | 2021-01-04 23:12:13
  2 |       3 | 2021-01-05 11:12:12
  3 |       4 | 2021-01-06 16:00:00
  4 |       4 | 2021-01-07 00:59:59
(5 rows)

-- select weekday and as
--Testcase 2378:
SELECT weekday(date_sub(c3, '1 12:59:10')) as weekday1 FROM time_tbl ORDER BY 1;
 weekday1 
----------
        1
        1
        4
        6
        6
(5 rows)

-- WEEK()
-- select week (stub function, explain)
--Testcase 2379:
EXPLAIN VERBOSE
SELECT id, week(c2, 7), week(c2, 1), week('2021-01-02'::date, 1), week('2021-01-02'::date, 7) FROM time_tbl ORDER BY 1,2,3,4,5;
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7719.62..7736.68 rows=6826 width=20)
   Output: id, (week((c2)::timestamp without time zone, 7)), (week((c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
   Sort Key: time_tbl.id, (week((time_tbl.c2)::timestamp without time zone, 7)), (week((time_tbl.c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7284.91 rows=6826 width=20)
         Output: id, (week((c2)::timestamp without time zone, 7)), (week((c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, week(`c2`, 7), week(`c2`, 1), week('2021-01-02 00:00:00', 1), week('2021-01-02 00:00:00', 7) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.week(c2, 7), public.week(c2, 1), public.week('2021-01-02 00:00:00'::timestamp without time zone, 1), public.week('2021-01-02 00:00:00'::timestamp without time zone, 7) FROM public.time_tbl1mysql
(12 rows)

-- select week (stub function, result)
--Testcase 2380:
SELECT id, week(c2, 7), week(c2, 1), week('2021-01-02'::date, 1), week('2021-01-02'::date, 7) FROM time_tbl ORDER BY 1,2,3,4,5;
 id | week | week | week | week 
----+------+------+------+------
  0 |   52 |    0 |    0 |   52
  1 |   52 |    0 |    0 |   52
  2 |    1 |    1 |    0 |   52
  3 |    2 |    2 |    0 |   52
  4 |    4 |    4 |    0 |   52
(5 rows)

-- select week (stub function, not pushdown constraints, explain)
--Testcase 2381:
EXPLAIN VERBOSE
SELECT week(c2, 7), week(c2, 1), week('2021-01-02'::date, 1), week('2021-01-02'::date, 7) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                       QUERY PLAN                                                                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=425.76..425.85 rows=34 width=16)
   Output: (week((c2)::timestamp without time zone, 7)), (week((c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
   Sort Key: (week((time_tbl.c2)::timestamp without time zone, 7)), (week((time_tbl.c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..424.90 rows=34 width=16)
         Output: (week((c2)::timestamp without time zone, 7)), (week((c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT week(`c2`, 7), week(`c2`, 1), week('2021-01-02 00:00:00', 1), week('2021-01-02 00:00:00', 7), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.week(c2, 7), public.week(c2, 1), public.week('2021-01-02 00:00:00'::timestamp without time zone, 1), public.week('2021-01-02 00:00:00'::timestamp without time zone, 7), id FROM public.time_tbl1mysql
(13 rows)

-- select week (stub function, not pushdown constraints, result)
--Testcase 2382:
SELECT week(c2, 7), week(c2, 1), week('2021-01-02'::date, 1), week('2021-01-02'::date, 7) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
 week | week | week | week 
------+------+------+------
   52 |    0 |    0 |   52
(1 row)

-- select week (stub function, pushdown constraints, explain)
--Testcase 2383:
EXPLAIN VERBOSE
SELECT id, week(c2, 7), week(c2, 1), week('2021-01-02'::date, 1), week('2021-01-02'::date, 7) FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4,5;
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7699.42..7716.40 rows=6792 width=20)
   Output: id, (week((c2)::timestamp without time zone, 7)), (week((c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
   Sort Key: time_tbl.id, (week((time_tbl.c2)::timestamp without time zone, 7)), (week((time_tbl.c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7267.12 rows=6792 width=20)
         Output: id, (week((c2)::timestamp without time zone, 7)), (week((c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, week(`c2`, 7), week(`c2`, 1), week('2021-01-02 00:00:00', 1), week('2021-01-02 00:00:00', 7) FROM `test`.`time_tbl2` WHERE ((`id` <> 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.week(c2, 7), public.week(c2, 1), public.week('2021-01-02 00:00:00'::timestamp without time zone, 1), public.week('2021-01-02 00:00:00'::timestamp without time zone, 7) FROM public.time_tbl1mysql WHERE ((id <> 0))
(12 rows)

-- select week (stub function, pushdown constraints, result)
--Testcase 2384:
SELECT id, week(c2, 7), week(c2, 1), week('2021-01-02'::date, 1), week('2021-01-02'::date, 7) FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4,5;
 id | week | week | week | week 
----+------+------+------+------
  1 |   52 |    0 |    0 |   52
  2 |    1 |    1 |    0 |   52
  3 |    2 |    2 |    0 |   52
  4 |    4 |    4 |    0 |   52
(4 rows)

-- select week (stub function, week in constraints, explain)
--Testcase 2385:
EXPLAIN VERBOSE
SELECT id, week(c2, 7), week(c2, 1), week('2021-01-02'::date, 1), week('2021-01-02'::date, 7) FROM time_tbl WHERE week(c2, 7) != week('2021-01-02'::timestamp, 1) ORDER BY 1,2,3,4,5;
                                                                                                                                                                  QUERY PLAN                                                                                                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11129.49..11146.47 rows=6792 width=20)
   Output: id, (week((c2)::timestamp without time zone, 7)), (week((c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
   Sort Key: time_tbl.id, (week((time_tbl.c2)::timestamp without time zone, 7)), (week((time_tbl.c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..10697.19 rows=6792 width=20)
         Output: id, (week((c2)::timestamp without time zone, 7)), (week((c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, week(`c2`, 7), week(`c2`, 1), week('2021-01-02 00:00:00', 1), week('2021-01-02 00:00:00', 7) FROM `test`.`time_tbl2` WHERE ((week(`c2`, 7) <> week('2021-01-02 00:00:00', 1)))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.week(c2, 7), public.week(c2, 1), public.week('2021-01-02 00:00:00'::timestamp without time zone, 1), public.week('2021-01-02 00:00:00'::timestamp without time zone, 7) FROM public.time_tbl1mysql WHERE ((public.week(c2, 7) <> public.week('2021-01-02 00:00:00'::timestamp without time zone, 1)))
(12 rows)

-- select week (stub function, week in constraints, result)
--Testcase 2386:
SELECT id, week(c2, 7), week(c2, 1), week('2021-01-02'::date, 1), week('2021-01-02'::date, 7) FROM time_tbl WHERE week(c2, 7) != week('2021-01-02'::timestamp, 1) ORDER BY 1,2,3,4,5;
 id | week | week | week | week 
----+------+------+------+------
  0 |   52 |    0 |    0 |   52
  1 |   52 |    0 |    0 |   52
  2 |    1 |    1 |    0 |   52
  3 |    2 |    2 |    0 |   52
  4 |    4 |    4 |    0 |   52
(5 rows)

-- select week (stub function, week in constraints, explain)
--Testcase 2387:
EXPLAIN VERBOSE
SELECT id, week(c2, 7), week(c2, 1), week('2021-01-02'::date, 1), week('2021-01-02'::date, 7) FROM time_tbl WHERE week('2021-01-02'::date, 7) > week('2021-01-02'::timestamp, 1) ORDER BY 1,2,3,4,5;
                                                                                                                                                                                          QUERY PLAN                                                                                                                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6178.14..6183.83 rows=2276 width=20)
   Output: id, (week((c2)::timestamp without time zone, 7)), (week((c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
   Sort Key: time_tbl.id, (week((time_tbl.c2)::timestamp without time zone, 7)), (week((time_tbl.c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..6051.23 rows=2276 width=20)
         Output: id, (week((c2)::timestamp without time zone, 7)), (week((c2)::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), (week('2021-01-02 00:00:00'::timestamp without time zone, 7))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, week(`c2`, 7), week(`c2`, 1), week('2021-01-02 00:00:00', 1), week('2021-01-02 00:00:00', 7) FROM `test`.`time_tbl2` WHERE ((week('2021-01-02 00:00:00', 7) > week('2021-01-02 00:00:00', 1)))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.week(c2, 7), public.week(c2, 1), public.week('2021-01-02 00:00:00'::timestamp without time zone, 1), public.week('2021-01-02 00:00:00'::timestamp without time zone, 7) FROM public.time_tbl1mysql WHERE ((public.week('2021-01-02 00:00:00'::timestamp without time zone, 7) > public.week('2021-01-02 00:00:00'::timestamp without time zone, 1)))
(12 rows)

-- select week (stub function, week in constraints, result)
--Testcase 2388:
SELECT id, week(c2, 7), week(c2, 1), week('2021-01-02'::date, 1), week('2021-01-02'::date, 7) FROM time_tbl WHERE week('2021-01-02'::date, 7) > week('2021-01-02'::timestamp, 1) ORDER BY 1,2,3,4,5;
 id | week | week | week | week 
----+------+------+------+------
  0 |   52 |    0 |    0 |   52
  1 |   52 |    0 |    0 |   52
  2 |    1 |    1 |    0 |   52
  3 |    2 |    2 |    0 |   52
  4 |    4 |    4 |    0 |   52
(5 rows)

-- select week as nest function with agg (pushdown, explain)
--Testcase 2389:
EXPLAIN VERBOSE
SELECT max(id), week('2021-01-02'::date, max(id)) FROM time_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=8)
   Output: (max(id)), week('2021-01-02 00:00:00'::timestamp without time zone, (max(id)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`id`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(id) FROM public.time_tbl1mysql
(11 rows)

-- select week as nest function with agg (pushdown, result)
--Testcase 2390:
SELECT max(id), week('2021-01-02'::date, max(id)) FROM time_tbl;
ERROR:  stub week(timestamp, integer) is called
CONTEXT:  PL/pgSQL function week(timestamp without time zone,integer) line 3 at RAISE
-- select week as nest with stub (pushdown, explain)
--Testcase 2391:
EXPLAIN VERBOSE
SELECT id, week(makedate(2019, id), 7) FROM time_tbl ORDER BY 1,2;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=8)
   Output: id, (week((makedate(2019, id))::timestamp without time zone, 7))
   Sort Key: time_tbl.id, (week((makedate(2019, time_tbl.id))::timestamp without time zone, 7))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=8)
         Output: id, (week((makedate(2019, id))::timestamp without time zone, 7))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, week(makedate(2019, `id`), 7) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.week(public.makedate(2019, id), 7) FROM public.time_tbl1mysql
(12 rows)

-- select week as nest with stub (pushdown, result)
--Testcase 2392:
SELECT id, week(makedate(2019, id), 7) FROM time_tbl ORDER BY 1,2;
 id | week 
----+------
  0 |     
  1 |   53
  2 |   53
  3 |   53
  4 |   53
(5 rows)

-- select week with non pushdown func and explicit constant (explain)
--Testcase 2393:
EXPLAIN VERBOSE
SELECT week('2021-01-02'::date, 1), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=44)
   Output: (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), '3.141592653589793'::double precision, 4.1
   Sort Key: (week('2021-01-02 00:00:00'::timestamp without time zone, 1))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=44)
         Output: (week('2021-01-02 00:00:00'::timestamp without time zone, 1)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT week('2021-01-02 00:00:00', 1), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.week('2021-01-02 00:00:00'::timestamp without time zone, 1), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select week with non pushdown func and explicit constant (result)
--Testcase 2394:
SELECT week('2021-01-02'::date, 1), pi(), 4.1 FROM time_tbl ORDER BY 1;
 week |        pi         | ?column? 
------+-------------------+----------
    0 | 3.141592653589793 |      4.1
    0 | 3.141592653589793 |      4.1
    0 | 3.141592653589793 |      4.1
    0 | 3.141592653589793 |      4.1
    0 | 3.141592653589793 |      4.1
(5 rows)

-- select week with order by (explain)
--Testcase 2395:
EXPLAIN VERBOSE
SELECT id, week(c2, id + 5) FROM time_tbl order by id,week(c2, id + 5);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=2600.12..2617.18 rows=6826 width=8)
   Output: id, (week((c2)::timestamp without time zone, (id + 5)))
   Sort Key: time_tbl.id, (week((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=8)
         Output: id, (week((c2)::timestamp without time zone, (id + 5)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, week(`c2`, (`id` + 5)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.week(c2, (id + 5)) FROM public.time_tbl1mysql
(12 rows)

-- select week with order by (result)
--Testcase 2396:
SELECT id, week(c2, id + 5) FROM time_tbl order by id,week(c2, id + 5);
 id | week 
----+------
  0 |    0
  1 |   53
  2 |    1
  3 |    2
  4 |    4
(5 rows)

-- select week with order by index (result)
--Testcase 2397:
SELECT id, week(c2, id + 5) FROM time_tbl order by 2,1;
 id | week 
----+------
  0 |    0
  2 |    1
  3 |    2
  4 |    4
  1 |   53
(5 rows)

-- select week with order by index (result)
--Testcase 2398:
SELECT id, week(c2, id + 5) FROM time_tbl order by 1,2;
 id | week 
----+------
  0 |    0
  1 |   53
  2 |    1
  3 |    2
  4 |    4
(5 rows)

-- select week with group by (explain)
--Testcase 2399:
EXPLAIN VERBOSE
SELECT id, week(c2, id + 5) FROM time_tbl group by id, week(c2, id + 5) ORDER BY 1,2;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=2260.18..2260.68 rows=200 width=8)
   Output: id, (week((c2)::timestamp without time zone, (id + 5)))
   Sort Key: time_tbl.id, (week((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5)))
   ->  HashAggregate  (cost=2199.54..2252.54 rows=200 width=8)
         Output: id, (week((c2)::timestamp without time zone, (id + 5)))
         Group Key: time_tbl.id, (week((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=8)
               Output: id, (week((c2)::timestamp without time zone, (id + 5)))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `id`, week(`c2`, (`id` + 5)) FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT id, public.week(c2, (id + 5)) FROM public.time_tbl1mysql
(15 rows)

-- select week with group by (result)
--Testcase 2400:
SELECT id, week(c2, id + 5) FROM time_tbl group by id, week(c2, id + 5) ORDER BY 1,2;
 id | week 
----+------
  0 |    0
  1 |   53
  2 |    1
  3 |    2
  4 |    4
(5 rows)

-- select week with group by index (result)
--Testcase 2401:
SELECT id, week(c2, id + 5) FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | week 
----+------
  0 |    0
  1 |   53
  2 |    1
  3 |    2
  4 |    4
(5 rows)

-- select week with group by index (result)
--Testcase 2402:
SELECT id, week(c2, id + 5) FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | week 
----+------
  0 |    0
  1 |   53
  2 |    1
  3 |    2
  4 |    4
(5 rows)

-- select week with group by having (explain)
--Testcase 2403:
EXPLAIN VERBOSE
SELECT count(id), week(c2, id + 5) FROM time_tbl group by week(c2, id + 5), id,c2 HAVING week(c2, id + 5) = 0 ORDER BY 1,2;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2287.44..2287.44 rows=1 width=20)
   Output: (count(id)), (week((c2)::timestamp without time zone, (id + 5))), id, c2
   Sort Key: (count(time_tbl.id)), (week((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5)))
   ->  HashAggregate  (cost=2233.67..2287.43 rows=1 width=20)
         Output: count(id), (week((c2)::timestamp without time zone, (id + 5))), id, c2
         Group Key: (week((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5))), time_tbl.id, time_tbl.c2
         Filter: ((week((time_tbl.c2)::timestamp without time zone, (time_tbl.id + 5))) = 0)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=12)
               Output: (week((c2)::timestamp without time zone, (id + 5))), id, c2
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT week(`c2`, (`id` + 5)), `id`, `c2` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.week(c2, (id + 5)), id, c2 FROM public.time_tbl1mysql
(16 rows)

-- select week with group by having (result)
--Testcase 2404:
SELECT count(id), week(c2, id + 5) FROM time_tbl group by week(c2, id + 5), id,c2 HAVING week(c2, id + 5) = 0 ORDER BY 1,2;
 count | week 
-------+------
     1 |    0
(1 row)

-- select week with group by index having (result)
--Testcase 2405:
SELECT id, week(c2, id + 5), c2 FROM time_tbl group by 3,2,1 HAVING week(c2, id + 5) > 0 ORDER BY 1,2;
 id | week |     c2     
----+------+------------
  1 |   53 | 2021-01-01
  2 |    1 | 2021-01-10
  3 |    2 | 2021-01-15
  4 |    4 | 2021-01-29
(4 rows)

-- select week with group by index having (result)
--Testcase 2406:
SELECT id, week(c2, id + 5), c2 FROM time_tbl group by 1,2,3 HAVING id > 1 ORDER BY 1,2;
 id | week |     c2     
----+------+------------
  2 |    1 | 2021-01-10
  3 |    2 | 2021-01-15
  4 |    4 | 2021-01-29
(3 rows)

-- select week and as
--Testcase 2407:
SELECT week('2021-01-02'::date, 53) as week1 FROM time_tbl  ORDER BY 1;
 week1 
-------
     0
     0
     0
     0
     0
(5 rows)

-- UTC_TIMESTAMP()
-- select utc_timestamp (stub function, explain)
--Testcase 2408:
EXPLAIN VERBOSE
SELECT utc_timestamp() FROM time_tbl;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (utc_timestamp())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_timestamp() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_timestamp() FROM public.time_tbl1mysql
(7 rows)

-- select utc_timestamp (stub function, not pushdown constraints, explain)
--Testcase 2409:
EXPLAIN VERBOSE
SELECT utc_timestamp() FROM time_tbl WHERE to_hex(id) > '0';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..982.41 rows=2276 width=8)
   Output: (utc_timestamp())
   Filter: (to_hex(time_tbl.id) > '0'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_timestamp(), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_timestamp(), id FROM public.time_tbl1mysql
(8 rows)

-- select utc_timestamp (stub function, pushdown constraints, explain)
--Testcase 2410:
EXPLAIN VERBOSE
SELECT utc_timestamp() FROM time_tbl WHERE id = 1;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..314.50 rows=34 width=8)
   Output: (utc_timestamp())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_timestamp() FROM `test`.`time_tbl2` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_timestamp() FROM public.time_tbl1mysql WHERE ((id = 1))
(7 rows)

-- select utc_timestamp (stub function, utc_timestamp in constraints, explain)
--Testcase 2411:
EXPLAIN VERBOSE
SELECT utc_timestamp() FROM time_tbl WHERE utc_timestamp() > '1997-10-14 00:00:00'::timestamp;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=8)
   Output: (utc_timestamp())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_timestamp() FROM `test`.`time_tbl2` WHERE ((utc_timestamp() > '1997-10-14 00:00:00'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_timestamp() FROM public.time_tbl1mysql WHERE ((public.utc_timestamp() > '1997-10-14 00:00:00'::timestamp without time zone))
(7 rows)

-- utc_timestamp in constrains (stub function, explain)
--Testcase 2412:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE utc_timestamp() > '1997-10-14 00:00:00'::timestamp ORDER BY 1;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2057.35 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((utc_timestamp() > '1997-10-14 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.utc_timestamp() > '1997-10-14 00:00:00'::timestamp without time zone))
(12 rows)

-- utc_timestamp in constrains (stub function, result)
--Testcase 2413:
SELECT c1 FROM time_tbl WHERE utc_timestamp() > '1997-10-14 00:00:00'::timestamp ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- utc_timestamp as parameter of addtime(stub function, explain)
--Testcase 2414:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(utc_timestamp(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp ORDER BY 1;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(utc_timestamp(), '1 12:59:10.0') > '1997-10-14 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.utc_timestamp(), '1 day 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp without time zone))
(12 rows)

-- utc_timestamp as parameter of addtime(stub function, result)
--Testcase 2415:
SELECT c1 FROM time_tbl WHERE addtime(utc_timestamp(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select utc_timestamp and agg (pushdown, explain)
--Testcase 2416:
EXPLAIN VERBOSE
SELECT utc_timestamp(), sum(id) FROM time_tbl ORDER BY 1,2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort  (cost=159.42..159.42 rows=1 width=16)
   Output: (utc_timestamp()), (sum(id))
   Sort Key: (utc_timestamp()), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
         Output: utc_timestamp(), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select utc_timestamp and log2 (pushdown, explain)
--Testcase 2417:
EXPLAIN VERBOSE
SELECT utc_timestamp(), log2(id) FROM time_tbl ORDER BY 1,2;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=16)
   Output: (utc_timestamp()), (log2((id)::double precision))
   Sort Key: (utc_timestamp()), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=16)
         Output: (utc_timestamp()), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT utc_timestamp(), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.utc_timestamp(), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select utc_timestamp with non pushdown func and explicit constant (explain)
--Testcase 2418:
EXPLAIN VERBOSE
SELECT utc_timestamp(), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=44)
   Output: (utc_timestamp()), (to_hex(id)), 4
   Sort Key: (utc_timestamp()), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=44)
         Output: utc_timestamp(), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select utc_timestamp with order by (explain)
--Testcase 2419:
EXPLAIN VERBOSE
SELECT utc_timestamp(), c1 FROM time_tbl ORDER BY c1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: utc_timestamp(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- select utc_timestamp with order by index (explain)
--Testcase 2420:
EXPLAIN VERBOSE
SELECT utc_timestamp(), c1 FROM time_tbl ORDER BY 2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: utc_timestamp(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- utc_timestamp constraints with order by (explain)
--Testcase 2421:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(utc_timestamp(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp ORDER BY c1;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(utc_timestamp(), '1 12:59:10.0') > '1997-10-14 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.utc_timestamp(), '1 day 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp without time zone))
(12 rows)

-- utc_timestamp constraints with order by (result)
--Testcase 2422:
SELECT c1 FROM time_tbl WHERE addtime(utc_timestamp(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select utc_timestamp with group by (explain)
--Testcase 2423:
EXPLAIN VERBOSE
SELECT utc_timestamp(), c1 FROM time_tbl GROUP BY c1 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (utc_timestamp()), c1
   Sort Key: (utc_timestamp()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: utc_timestamp(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select utc_timestamp with group by index (explain)
--Testcase 2424:
EXPLAIN VERBOSE
SELECT utc_timestamp(), c1 FROM time_tbl GROUP BY 2 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (utc_timestamp()), c1
   Sort Key: (utc_timestamp()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: utc_timestamp(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select utc_timestamp with group by having (explain)
--Testcase 2425:
EXPLAIN VERBOSE
SELECT utc_timestamp(), c1 FROM time_tbl GROUP BY utc_timestamp(),c1 HAVING utc_timestamp() > '1997-10-14 00:00:00'::timestamp ORDER BY 1,2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (utc_timestamp()), c1
   Sort Key: (utc_timestamp()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (utc_timestamp()), c1
         Group Key: (utc_timestamp()), time_tbl.c1
         Filter: ((utc_timestamp()) > '1997-10-14 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (utc_timestamp()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT utc_timestamp(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.utc_timestamp(), c1 FROM public.time_tbl1mysql
(16 rows)

-- select utc_timestamp with group by index having (explain)
--Testcase 2426:
EXPLAIN VERBOSE
SELECT utc_timestamp(), c1 FROM time_tbl GROUP BY 2,1 HAVING utc_timestamp() > '1997-10-14 00:00:00'::timestamp ORDER BY 1,2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (utc_timestamp()), c1
   Sort Key: (utc_timestamp()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (utc_timestamp()), c1
         Group Key: (utc_timestamp()), time_tbl.c1
         Filter: ((utc_timestamp()) > '1997-10-14 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (utc_timestamp()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT utc_timestamp(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.utc_timestamp(), c1 FROM public.time_tbl1mysql
(16 rows)

-- utc_timestamp constraints with group by (explain)
--Testcase 2427:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(utc_timestamp(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp GROUP BY c1 ORDER BY 1;
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1883.02..1883.02 rows=0 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan  (cost=112.84..1883.01 rows=0 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(utc_timestamp(), '1 12:59:10.0') > '1997-10-14 00:00:00')) GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.utc_timestamp(), '1 day 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp without time zone)) GROUP BY 1
(16 rows)

-- utc_timestamp constraints with group by (result)
--Testcase 2428:
SELECT c1 FROM time_tbl WHERE addtime(utc_timestamp(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp GROUP BY c1 ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select utc_timestamp and as
--Testcase 2429:
EXPLAIN VERBOSE
SELECT utc_timestamp() as utc_timestamp1 FROM time_tbl;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (utc_timestamp())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_timestamp() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_timestamp() FROM public.time_tbl1mysql
(7 rows)

-- UTC_TIME()
-- select utc_time (stub function, explain)
--Testcase 2430:
EXPLAIN VERBOSE
SELECT utc_time() FROM time_tbl;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (utc_time())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_time() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_time() FROM public.time_tbl1mysql
(7 rows)

-- select utc_time (stub function, not pushdown constraints, explain)
--Testcase 2431:
EXPLAIN VERBOSE
SELECT utc_time() FROM time_tbl WHERE to_hex(id) > '0';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..982.41 rows=2276 width=8)
   Output: (utc_time())
   Filter: (to_hex(time_tbl.id) > '0'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_time(), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_time(), id FROM public.time_tbl1mysql
(8 rows)

-- select utc_time (stub function, pushdown constraints, explain)
--Testcase 2432:
EXPLAIN VERBOSE
SELECT utc_time() FROM time_tbl WHERE id = 1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..314.50 rows=34 width=8)
   Output: (utc_time())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_time() FROM `test`.`time_tbl2` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_time() FROM public.time_tbl1mysql WHERE ((id = 1))
(7 rows)

-- select utc_time (stub function, utc_time in constraints, explain)
--Testcase 2433:
EXPLAIN VERBOSE
SELECT utc_time() FROM time_tbl WHERE utc_time() > '1997-10-14 00:00:00'::time;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=8)
   Output: (utc_time())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_time() FROM `test`.`time_tbl2` WHERE ((utc_time() > '00:00:00'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_time() FROM public.time_tbl1mysql WHERE ((public.utc_time() > '00:00:00'::time without time zone))
(7 rows)

-- utc_time in constrains (stub function, explain)
--Testcase 2434:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE utc_time() > '1997-10-14 00:00:00'::time ORDER BY 1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2057.35 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((utc_time() > '00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.utc_time() > '00:00:00'::time without time zone))
(12 rows)

-- utc_time in constrains (stub function, result)
--Testcase 2435:
SELECT c1 FROM time_tbl WHERE utc_time() > '1997-10-14 00:00:00'::time ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- utc_time as parameter of second(stub function, explain)
--Testcase 2436:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE second(utc_time()) > 10 ORDER BY 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((second(utc_time()) > 10))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.second(public.utc_time()) > 10))
(12 rows)

-- utc_time as parameter of second(stub function, result)
--Testcase 2437:
SELECT c1 FROM time_tbl WHERE (60-second(utc_time())) >= 0 ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select utc_time and agg (pushdown, explain)
--Testcase 2438:
EXPLAIN VERBOSE
SELECT utc_time(), sum(id) FROM time_tbl ORDER BY 1,2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort  (cost=159.42..159.42 rows=1 width=16)
   Output: (utc_time()), (sum(id))
   Sort Key: (utc_time()), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
         Output: utc_time(), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select utc_time and log2 (pushdown, explain)
--Testcase 2439:
EXPLAIN VERBOSE
SELECT utc_time(), log2(id) FROM time_tbl ORDER BY 1,2;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=16)
   Output: (utc_time()), (log2((id)::double precision))
   Sort Key: (utc_time()), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=16)
         Output: (utc_time()), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT utc_time(), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.utc_time(), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select utc_time with non pushdown func and explicit constant (explain)
--Testcase 2440:
EXPLAIN VERBOSE
SELECT utc_time(), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=44)
   Output: (utc_time()), (to_hex(id)), 4
   Sort Key: (utc_time()), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=44)
         Output: utc_time(), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select utc_time with order by (explain)
--Testcase 2441:
EXPLAIN VERBOSE
SELECT utc_time(), c1 FROM time_tbl ORDER BY c1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: utc_time(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- select utc_time with order by index (explain)
--Testcase 2442:
EXPLAIN VERBOSE
SELECT utc_time(), c1 FROM time_tbl ORDER BY 2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: utc_time(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- utc_time constraints with order by (explain)
--Testcase 2443:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE second(utc_time()) > 10 ORDER BY c1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((second(utc_time()) > 10))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.second(public.utc_time()) > 10))
(12 rows)

-- utc_time constraints with order by (result)
--Testcase 2444:
SELECT c1 FROM time_tbl WHERE (60-second(utc_time())) >= 0 ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select utc_time with group by (explain)
--Testcase 2445:
EXPLAIN VERBOSE
SELECT utc_time(), c1 FROM time_tbl GROUP BY c1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
   Output: utc_time(), c1
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(11 rows)

-- select utc_time with group by index (explain)
--Testcase 2446:
EXPLAIN VERBOSE
SELECT utc_time(), c1 FROM time_tbl GROUP BY 2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
   Output: utc_time(), c1
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(11 rows)

-- select utc_time with group by having (explain)
--Testcase 2447:
EXPLAIN VERBOSE
SELECT utc_time(), c1 FROM time_tbl GROUP BY utc_time(),c1 HAVING utc_time() > '1997-10-14 00:00:00'::time ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (utc_time()), c1
   Sort Key: (utc_time()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (utc_time()), c1
         Group Key: (utc_time()), time_tbl.c1
         Filter: ((utc_time()) > '00:00:00'::time without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (utc_time()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT utc_time(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.utc_time(), c1 FROM public.time_tbl1mysql
(16 rows)

-- select utc_time with group by index having (explain)
--Testcase 2448:
EXPLAIN VERBOSE
SELECT utc_time(), c1 FROM time_tbl GROUP BY 2,1 HAVING utc_time() > '1997-10-14 00:00:00'::time ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (utc_time()), c1
   Sort Key: (utc_time()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (utc_time()), c1
         Group Key: (utc_time()), time_tbl.c1
         Filter: ((utc_time()) > '00:00:00'::time without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (utc_time()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT utc_time(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.utc_time(), c1 FROM public.time_tbl1mysql
(16 rows)

-- utc_time constraints with group by (explain)
--Testcase 2449:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE second(utc_time()) > 10 GROUP BY c1 ORDER BY 1;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1883.02..1883.02 rows=0 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan  (cost=112.84..1883.01 rows=0 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((second(utc_time()) > 10)) GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.second(public.utc_time()) > 10)) GROUP BY 1
(16 rows)

-- utc_time constraints with group by (result)
--Testcase 2450:
SELECT c1 FROM time_tbl WHERE (60-second(utc_time())) >= 0 GROUP BY c1 ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select utc_time and as
--Testcase 2451:
EXPLAIN VERBOSE
SELECT utc_time() as utc_time1 FROM time_tbl;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (utc_time())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_time() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_time() FROM public.time_tbl1mysql
(7 rows)

-- UTC_DATE()
-- select utc_date (stub function, explain)
--Testcase 2452:
EXPLAIN VERBOSE
SELECT utc_date() FROM time_tbl;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=4)
   Output: (utc_date())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_date() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_date() FROM public.time_tbl1mysql
(7 rows)

-- select utc_date (stub function, not pushdown constraints, explain)
--Testcase 2453:
EXPLAIN VERBOSE
SELECT utc_date() FROM time_tbl WHERE to_hex(id) > '0';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..982.41 rows=2276 width=4)
   Output: (utc_date())
   Filter: (to_hex(time_tbl.id) > '0'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_date(), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_date(), id FROM public.time_tbl1mysql
(8 rows)

-- select utc_date (stub function, pushdown constraints, explain)
--Testcase 2454:
EXPLAIN VERBOSE
SELECT utc_date() FROM time_tbl WHERE id = 1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..314.50 rows=34 width=4)
   Output: (utc_date())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_date() FROM `test`.`time_tbl2` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_date() FROM public.time_tbl1mysql WHERE ((id = 1))
(7 rows)

-- select utc_date (stub function, utc_date in constraints, explain)
--Testcase 2455:
EXPLAIN VERBOSE
SELECT utc_date() FROM time_tbl WHERE utc_date() > '1997-10-14 00:00:00'::date;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=4)
   Output: (utc_date())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_date() FROM `test`.`time_tbl2` WHERE ((utc_date() > '1997-10-14'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_date() FROM public.time_tbl1mysql WHERE ((public.utc_date() > '1997-10-14'::date))
(7 rows)

-- utc_date in constrains (stub function, explain)
--Testcase 2456:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE utc_date() > '1997-10-14 00:00:00'::date ORDER BY 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2057.35 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((utc_date() > '1997-10-14'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.utc_date() > '1997-10-14'::date))
(12 rows)

-- utc_date in constrains (stub function, result)
--Testcase 2457:
SELECT c1 FROM time_tbl WHERE utc_date() > '1997-10-14 00:00:00'::date ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- utc_date as parameter of addtime(stub function, explain)
--Testcase 2458:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(utc_date(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::date ORDER BY 1;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3907.82..3913.51 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3780.91 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(utc_date(), '1 12:59:10.0') > '1997-10-14'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.utc_date(), '1 day 12:59:10'::interval) > '1997-10-14'::date))
(12 rows)

-- utc_date as parameter of addtime(stub function, result)
--Testcase 2459:
SELECT c1 FROM time_tbl WHERE addtime(utc_date(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::date ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select utc_date and agg (pushdown, explain)
--Testcase 2460:
EXPLAIN VERBOSE
SELECT utc_date(), sum(id) FROM time_tbl ORDER BY 1,2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort  (cost=159.42..159.42 rows=1 width=12)
   Output: (utc_date()), (sum(id))
   Sort Key: (utc_date()), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
         Output: utc_date(), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select utc_date and log2 (pushdown, explain)
--Testcase 2461:
EXPLAIN VERBOSE
SELECT utc_date(), log2(id) FROM time_tbl ORDER BY 1,2;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=12)
   Output: (utc_date()), (log2((id)::double precision))
   Sort Key: (utc_date()), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=12)
         Output: (utc_date()), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT utc_date(), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.utc_date(), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select utc_date with non pushdown func and explicit constant (explain)
--Testcase 2462:
EXPLAIN VERBOSE
SELECT utc_date(), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=40)
   Output: (utc_date()), (to_hex(id)), 4
   Sort Key: (utc_date()), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=40)
         Output: utc_date(), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select utc_date with order by (explain)
--Testcase 2463:
EXPLAIN VERBOSE
SELECT utc_date(), c1 FROM time_tbl ORDER BY c1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=12)
   Output: utc_date(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- select utc_date with order by index (explain)
--Testcase 2464:
EXPLAIN VERBOSE
SELECT utc_date(), c1 FROM time_tbl ORDER BY 2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=12)
   Output: utc_date(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- utc_date constraints with order by (explain)
--Testcase 2465:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(utc_date(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp ORDER BY c1;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3907.82..3913.51 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3780.91 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(utc_date(), '1 12:59:10.0') > '1997-10-14 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.utc_date(), '1 day 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp without time zone))
(12 rows)

-- utc_date constraints with order by (result)
--Testcase 2466:
SELECT c1 FROM time_tbl WHERE addtime(utc_date(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select utc_date with group by (explain)
--Testcase 2467:
EXPLAIN VERBOSE
SELECT utc_date(), c1 FROM time_tbl GROUP BY c1 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=12)
   Output: (utc_date()), c1
   Sort Key: (utc_date()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=12)
         Output: utc_date(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select utc_date with group by index (explain)
--Testcase 2468:
EXPLAIN VERBOSE
SELECT utc_date(), c1 FROM time_tbl GROUP BY 2 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=12)
   Output: (utc_date()), c1
   Sort Key: (utc_date()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=12)
         Output: utc_date(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select utc_date with group by having (explain)
--Testcase 2469:
EXPLAIN VERBOSE
SELECT utc_date(), c1 FROM time_tbl GROUP BY utc_date(),c1 HAVING utc_date() > '1997-10-14 00:00:00'::timestamp ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=12)
   Output: (utc_date()), c1
   Sort Key: (utc_date()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=12)
         Output: (utc_date()), c1
         Group Key: (utc_date()), time_tbl.c1
         Filter: ((utc_date()) > '1997-10-14 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (utc_date()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT utc_date(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.utc_date(), c1 FROM public.time_tbl1mysql
(16 rows)

-- select utc_date with group by index having (explain)
--Testcase 2470:
EXPLAIN VERBOSE
SELECT utc_date(), c1 FROM time_tbl GROUP BY 2,1 HAVING utc_date() > '1997-10-14 00:00:00'::timestamp ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=12)
   Output: (utc_date()), c1
   Sort Key: (utc_date()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=12)
         Output: (utc_date()), c1
         Group Key: (utc_date()), time_tbl.c1
         Filter: ((utc_date()) > '1997-10-14 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (utc_date()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT utc_date(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.utc_date(), c1 FROM public.time_tbl1mysql
(16 rows)

-- utc_date constraints with group by (explain)
--Testcase 2471:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(utc_date(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp GROUP BY c1 ORDER BY 1;
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1891.55..1891.56 rows=0 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan  (cost=112.84..1891.54 rows=0 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(utc_date(), '1 12:59:10.0') > '1997-10-14 00:00:00')) GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.utc_date(), '1 day 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp without time zone)) GROUP BY 1
(16 rows)

-- utc_date constraints with group by (result)
--Testcase 2472:
SELECT c1 FROM time_tbl WHERE addtime(utc_date(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp GROUP BY c1 ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select utc_date and as
--Testcase 2473:
EXPLAIN VERBOSE
SELECT utc_date() as utc_date1 FROM time_tbl;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=4)
   Output: (utc_date())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT utc_date() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.utc_date() FROM public.time_tbl1mysql
(7 rows)

-- UNIX_TIMESTAMP()
-- select unix_timestamp (stub function, explain)
--Testcase 2474:
EXPLAIN VERBOSE
SELECT unix_timestamp(), unix_timestamp(c3), unix_timestamp(c2) FROM time_tbl ORDER BY 1,2,3;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5996.05..6013.12 rows=6826 width=96)
   Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone))
   Sort Key: (unix_timestamp()), (unix_timestamp(time_tbl.c3)), (unix_timestamp((time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=96)
         Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT unix_timestamp(), unix_timestamp(`c3`), unix_timestamp(`c2`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.unix_timestamp(), public.unix_timestamp(c3), public.unix_timestamp(c2) FROM public.time_tbl1mysql
(12 rows)

-- select unix_timestamp (stub function, not pushdown constraints, explain)
--Testcase 2475:
EXPLAIN VERBOSE
SELECT unix_timestamp(), unix_timestamp(c3), unix_timestamp(c2) FROM time_tbl WHERE to_hex(id) > '0' ORDER BY 1,2,3;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2253.01..2258.70 rows=2276 width=96)
   Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone))
   Sort Key: (unix_timestamp()), (unix_timestamp(time_tbl.c3)), (unix_timestamp((time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2126.10 rows=2276 width=96)
         Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) > '0'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT unix_timestamp(), unix_timestamp(`c3`), unix_timestamp(`c2`), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.unix_timestamp(), public.unix_timestamp(c3), public.unix_timestamp(c2), id FROM public.time_tbl1mysql
(13 rows)

-- select unix_timestamp (stub function, pushdown constraints, explain)
--Testcase 2476:
EXPLAIN VERBOSE
SELECT unix_timestamp(), unix_timestamp(c3), unix_timestamp(c2) FROM time_tbl WHERE id = 1 ORDER BY 1,2,3;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=332.45..332.54 rows=34 width=96)
   Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone))
   Sort Key: (unix_timestamp()), (unix_timestamp(time_tbl.c3)), (unix_timestamp((time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..331.59 rows=34 width=96)
         Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT unix_timestamp(), unix_timestamp(`c3`), unix_timestamp(`c2`) FROM `test`.`time_tbl2` WHERE ((`id` = 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.unix_timestamp(), public.unix_timestamp(c3), public.unix_timestamp(c2) FROM public.time_tbl1mysql WHERE ((id = 1))
(12 rows)

-- select unix_timestamp (stub function, unix_timestamp in constraints, explain)
--Testcase 2477:
EXPLAIN VERBOSE
SELECT unix_timestamp(), unix_timestamp(c3), unix_timestamp(c2) FROM time_tbl WHERE unix_timestamp() > unix_timestamp('1997-10-14 00:00:00'::timestamp) ORDER BY 1,2,3;
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5603.45..5609.14 rows=2276 width=96)
   Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone))
   Sort Key: (unix_timestamp()), (unix_timestamp(time_tbl.c3)), (unix_timestamp((time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5476.53 rows=2276 width=96)
         Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT unix_timestamp(), unix_timestamp(`c3`), unix_timestamp(`c2`) FROM `test`.`time_tbl2` WHERE ((unix_timestamp() > unix_timestamp('1997-10-14 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.unix_timestamp(), public.unix_timestamp(c3), public.unix_timestamp(c2) FROM public.time_tbl1mysql WHERE ((public.unix_timestamp() > public.unix_timestamp('1997-10-14 00:00:00'::timestamp without time zone)))
(12 rows)

-- unix_timestamp in constrains (stub function, explain)
--Testcase 2478:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE unix_timestamp() > unix_timestamp('1997-10-14 00:00:00'::timestamp) ORDER BY 1;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((unix_timestamp() > unix_timestamp('1997-10-14 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.unix_timestamp() > public.unix_timestamp('1997-10-14 00:00:00'::timestamp without time zone)))
(12 rows)

-- unix_timestamp in constrains (stub function, result)
--Testcase 2479:
SELECT c1 FROM time_tbl WHERE unix_timestamp() > unix_timestamp('1997-10-14 00:00:00'::timestamp) ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select unix_timestamp and agg (pushdown, explain)
--Testcase 2480:
EXPLAIN VERBOSE
SELECT unix_timestamp(), sum(id) FROM time_tbl ORDER BY 1,2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort  (cost=159.42..159.42 rows=1 width=40)
   Output: (unix_timestamp()), (sum(id))
   Sort Key: (unix_timestamp()), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
         Output: unix_timestamp(), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select unix_timestamp and log2 (pushdown, explain)
--Testcase 2481:
EXPLAIN VERBOSE
SELECT unix_timestamp(), unix_timestamp(c3), unix_timestamp(c2), log2(id) FROM time_tbl ORDER BY 1,2,3,4;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7719.62..7736.68 rows=6826 width=104)
   Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone)), (log2((id)::double precision))
   Sort Key: (unix_timestamp()), (unix_timestamp(time_tbl.c3)), (unix_timestamp((time_tbl.c2)::timestamp without time zone)), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7284.91 rows=6826 width=104)
         Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone)), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT unix_timestamp(), unix_timestamp(`c3`), unix_timestamp(`c2`), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.unix_timestamp(), public.unix_timestamp(c3), public.unix_timestamp(c2), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select unix_timestamp with non pushdown func and explicit constant (explain)
--Testcase 2482:
EXPLAIN VERBOSE
SELECT unix_timestamp(), unix_timestamp(c3), unix_timestamp(c2), to_hex(id), 4 FROM time_tbl ORDER BY 1,2,3,4;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6013.12..6030.18 rows=6826 width=132)
   Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone)), (to_hex(id)), 4
   Sort Key: (unix_timestamp()), (unix_timestamp(time_tbl.c3)), (unix_timestamp((time_tbl.c2)::timestamp without time zone)), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5578.41 rows=6826 width=132)
         Output: unix_timestamp(), unix_timestamp(c3), unix_timestamp((c2)::timestamp without time zone), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, `c2`, `c3` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, c2, c3 FROM public.time_tbl1mysql
(12 rows)

-- select unix_timestamp with order by (explain)
--Testcase 2483:
EXPLAIN VERBOSE
SELECT unix_timestamp(), unix_timestamp(c3), unix_timestamp(c2), c1 FROM time_tbl ORDER BY c1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Result  (cost=859.49..6081.38 rows=6826 width=104)
   Output: unix_timestamp(), unix_timestamp(c3), unix_timestamp((c2)::timestamp without time zone), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=20)
         Output: c1, c3, c2
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=20)
               Output: c1, c3, c2
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1`, `c2`, `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1, c2, c3 FROM public.time_tbl1mysql
(14 rows)

-- select unix_timestamp with order by index (explain)
--Testcase 2484:
EXPLAIN VERBOSE
SELECT unix_timestamp(), unix_timestamp(c3), unix_timestamp(c2), c1 FROM time_tbl ORDER BY 4;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Result  (cost=859.49..6081.38 rows=6826 width=104)
   Output: unix_timestamp(), unix_timestamp(c3), unix_timestamp((c2)::timestamp without time zone), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=20)
         Output: c1, c3, c2
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=20)
               Output: c1, c3, c2
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1`, `c2`, `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1, c2, c3 FROM public.time_tbl1mysql
(14 rows)

-- select unix_timestamp with group by (explain)
--Testcase 2485:
EXPLAIN VERBOSE
SELECT unix_timestamp(), unix_timestamp(c3), unix_timestamp(c2), c1 FROM time_tbl GROUP BY c1,c2,c3 ORDER BY 1,2,3,4;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=451.57..451.58 rows=0 width=116)
   Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone)), c1, c2, c3
   Sort Key: (unix_timestamp()), (unix_timestamp(time_tbl.c3)), (unix_timestamp((time_tbl.c2)::timestamp without time zone)), time_tbl.c1
   ->  Foreign Scan  (cost=135.60..451.56 rows=0 width=116)
         Output: unix_timestamp(), unix_timestamp(c3), unix_timestamp((c2)::timestamp without time zone), c1, c2, c3
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1`, `c2`, `c3` FROM `test`.`time_tbl2` GROUP BY 1, 2, 3
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1, c2, c3 FROM public.time_tbl1mysql GROUP BY 1, 2, 3
(16 rows)

-- select unix_timestamp with group by index (explain)
--Testcase 2486:
EXPLAIN VERBOSE
SELECT unix_timestamp(), unix_timestamp(c3), unix_timestamp(c2), c1 FROM time_tbl GROUP BY 1,2,3,4 ORDER BY 1,2,3,4;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Group  (cost=5996.05..11217.94 rows=6826 width=104)
   Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone)), c1
   Group Key: (unix_timestamp()), (unix_timestamp(time_tbl.c3)), (unix_timestamp((time_tbl.c2)::timestamp without time zone)), time_tbl.c1
   ->  Sort  (cost=5996.05..6013.12 rows=6826 width=104)
         Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone)), c1
         Sort Key: (unix_timestamp()), (unix_timestamp(time_tbl.c3)), (unix_timestamp((time_tbl.c2)::timestamp without time zone)), time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=104)
               Output: (unix_timestamp()), (unix_timestamp(c3)), (unix_timestamp((c2)::timestamp without time zone)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT unix_timestamp(), unix_timestamp(`c3`), unix_timestamp(`c2`), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.unix_timestamp(), public.unix_timestamp(c3), public.unix_timestamp(c2), c1 FROM public.time_tbl1mysql
(15 rows)

-- select unix_timestamp with group by having (explain)
--Testcase 2487:
EXPLAIN VERBOSE
SELECT unix_timestamp(), c1 FROM time_tbl GROUP BY unix_timestamp(),c1 HAVING unix_timestamp() > 100000 ORDER BY 1,2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=40)
   Output: (unix_timestamp()), c1
   Sort Key: (unix_timestamp()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=40)
         Output: (unix_timestamp()), c1
         Group Key: (unix_timestamp()), time_tbl.c1
         Filter: ((unix_timestamp()) > '100000'::numeric)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (unix_timestamp()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT unix_timestamp(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.unix_timestamp(), c1 FROM public.time_tbl1mysql
(16 rows)

-- select unix_timestamp with group by index having (explain)
--Testcase 2488:
EXPLAIN VERBOSE
SELECT unix_timestamp(), c1 FROM time_tbl GROUP BY 2,1 HAVING unix_timestamp() > 100000 ORDER BY 1,2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=40)
   Output: (unix_timestamp()), c1
   Sort Key: (unix_timestamp()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=40)
         Output: (unix_timestamp()), c1
         Group Key: (unix_timestamp()), time_tbl.c1
         Filter: ((unix_timestamp()) > '100000'::numeric)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (unix_timestamp()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT unix_timestamp(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.unix_timestamp(), c1 FROM public.time_tbl1mysql
(16 rows)

-- select unix_timestamp and as
--Testcase 2489:
EXPLAIN VERBOSE
SELECT unix_timestamp(), unix_timestamp(c3), unix_timestamp(c2) as unix_timestamp1 FROM time_tbl ORDER BY 1,2;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Result  (cost=4272.49..9494.38 rows=6826 width=96)
   Output: (unix_timestamp()), (unix_timestamp(c3)), unix_timestamp((c2)::timestamp without time zone)
   ->  Sort  (cost=4272.49..4289.55 rows=6826 width=68)
         Output: (unix_timestamp()), (unix_timestamp(c3)), c2
         Sort Key: (unix_timestamp()), (unix_timestamp(time_tbl.c3))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=68)
               Output: (unix_timestamp()), (unix_timestamp(c3)), c2
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT unix_timestamp(), unix_timestamp(`c3`), `c2` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.unix_timestamp(), public.unix_timestamp(c3), c2 FROM public.time_tbl1mysql
(14 rows)

-- TO_SECONDS()
-- select to_seconds (stub function, explain)
--Testcase 2490:
EXPLAIN VERBOSE
SELECT to_seconds(id + 200719), to_seconds(c3), to_seconds(c2) FROM time_tbl ORDER BY 1,2,3;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6013.12..6030.18 rows=6826 width=24)
   Output: (to_seconds((id + 200719))), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone))
   Sort Key: (to_seconds((time_tbl.id + 200719))), (to_seconds(time_tbl.c3)), (to_seconds((time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5578.41 rows=6826 width=24)
         Output: (to_seconds((id + 200719))), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT to_seconds((`id` + 200719)), to_seconds(`c3`), to_seconds(`c2`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.to_seconds((id + 200719)), public.to_seconds(c3), public.to_seconds(c2) FROM public.time_tbl1mysql
(12 rows)

-- select to_seconds (stub function, not pushdown constraints, explain)
--Testcase 2491:
EXPLAIN VERBOSE
SELECT to_seconds(id + 200719), to_seconds(c3), to_seconds(c2) FROM time_tbl WHERE to_hex(id) > '0' ORDER BY 1,2,3;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2258.70..2264.39 rows=2276 width=24)
   Output: (to_seconds((id + 200719))), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone))
   Sort Key: (to_seconds((time_tbl.id + 200719))), (to_seconds(time_tbl.c3)), (to_seconds((time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.79 rows=2276 width=24)
         Output: (to_seconds((id + 200719))), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) > '0'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT to_seconds((`id` + 200719)), to_seconds(`c3`), to_seconds(`c2`), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.to_seconds((id + 200719)), public.to_seconds(c3), public.to_seconds(c2), id FROM public.time_tbl1mysql
(13 rows)

-- select to_seconds (stub function, pushdown constraints, explain)
--Testcase 2492:
EXPLAIN VERBOSE
SELECT to_seconds(id + 200719), to_seconds(c3), to_seconds(c2) FROM time_tbl WHERE id = 1 ORDER BY 1,2,3;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=332.54..332.62 rows=34 width=24)
   Output: (to_seconds((id + 200719))), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone))
   Sort Key: (to_seconds((time_tbl.id + 200719))), (to_seconds(time_tbl.c3)), (to_seconds((time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..331.67 rows=34 width=24)
         Output: (to_seconds((id + 200719))), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT to_seconds((`id` + 200719)), to_seconds(`c3`), to_seconds(`c2`) FROM `test`.`time_tbl2` WHERE ((`id` = 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.to_seconds((id + 200719)), public.to_seconds(c3), public.to_seconds(c2) FROM public.time_tbl1mysql WHERE ((id = 1))
(12 rows)

-- select to_seconds (stub function, to_seconds in constraints, explain)
--Testcase 2493:
EXPLAIN VERBOSE
SELECT to_seconds(id + 200719), to_seconds(c3), to_seconds(c2) FROM time_tbl WHERE to_seconds(id + 200719) > to_seconds('1997-10-14 00:00:00'::timestamp) ORDER BY 1,2,3;
                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5626.20..5631.89 rows=2276 width=24)
   Output: (to_seconds((id + 200719))), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone))
   Sort Key: (to_seconds((time_tbl.id + 200719))), (to_seconds(time_tbl.c3)), (to_seconds((time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5499.29 rows=2276 width=24)
         Output: (to_seconds((id + 200719))), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT to_seconds((`id` + 200719)), to_seconds(`c3`), to_seconds(`c2`) FROM `test`.`time_tbl2` WHERE ((to_seconds((`id` + 200719)) > to_seconds('1997-10-14 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.to_seconds((id + 200719)), public.to_seconds(c3), public.to_seconds(c2) FROM public.time_tbl1mysql WHERE ((public.to_seconds((id + 200719)) > public.to_seconds('1997-10-14 00:00:00'::timestamp without time zone)))
(12 rows)

-- to_seconds in constrains (stub function, explain)
--Testcase 2494:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE to_seconds(id + 200719) > to_seconds('1997-10-14 00:00:00'::timestamp) ORDER BY 1;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3907.82..3913.51 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3780.91 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, `c1` FROM `test`.`time_tbl2` WHERE ((to_seconds((`id` + 200719)) > to_seconds('1997-10-14 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.to_seconds((id + 200719)) > public.to_seconds('1997-10-14 00:00:00'::timestamp without time zone)))
(12 rows)

-- to_seconds in constrains (stub function, result)
--Testcase 2495:
SELECT c1 FROM time_tbl WHERE to_seconds(id + 200719) > to_seconds('1997-10-14 00:00:00'::timestamp) ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select to_seconds and agg (pushdown, explain)
--Testcase 2496:
EXPLAIN VERBOSE
SELECT to_seconds('1997-10-14 00:00:00'::timestamp), to_seconds('1997-10-14 00:00:00'::date), sum(id) FROM time_tbl ORDER BY 1,2,3;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=159.67..159.67 rows=1 width=24)
   Output: (to_seconds('1997-10-14 00:00:00'::timestamp without time zone)), (to_seconds('1997-10-14 00:00:00'::timestamp without time zone)), (sum(id))
   Sort Key: (to_seconds('1997-10-14 00:00:00'::timestamp without time zone)), (to_seconds('1997-10-14 00:00:00'::timestamp without time zone)), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.66 rows=1 width=24)
         Output: to_seconds('1997-10-14 00:00:00'::timestamp without time zone), to_seconds('1997-10-14 00:00:00'::timestamp without time zone), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select to_seconds and log2 (pushdown, explain)
--Testcase 2497:
EXPLAIN VERBOSE
SELECT to_seconds('1997-10-14 00:00:00'::timestamp), to_seconds(c3), to_seconds(c2), log2(id) FROM time_tbl ORDER BY 1,2,3;
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=5996.05..12941.51 rows=6826 width=32)
   Output: (to_seconds('1997-10-14 00:00:00'::timestamp without time zone)), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone)), log2((id)::double precision)
   ->  Sort  (cost=5996.05..6013.12 rows=6826 width=28)
         Output: (to_seconds('1997-10-14 00:00:00'::timestamp without time zone)), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone)), id
         Sort Key: (to_seconds('1997-10-14 00:00:00'::timestamp without time zone)), (to_seconds(time_tbl.c3)), (to_seconds((time_tbl.c2)::timestamp without time zone))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=28)
               Output: (to_seconds('1997-10-14 00:00:00'::timestamp without time zone)), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone)), id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT to_seconds('1997-10-14 00:00:00'), to_seconds(`c3`), to_seconds(`c2`), `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.to_seconds('1997-10-14 00:00:00'::timestamp without time zone), public.to_seconds(c3), public.to_seconds(c2), id FROM public.time_tbl1mysql
(14 rows)

-- select to_seconds with non pushdown func and explicit constant (explain)
--Testcase 2498:
EXPLAIN VERBOSE
SELECT to_seconds('1997-10-14 00:00:00'::timestamp), to_seconds(c3), to_seconds(c2), to_hex(id), 4 FROM time_tbl ORDER BY 1,2,3,4;
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6013.12..6030.18 rows=6826 width=60)
   Output: (to_seconds('1997-10-14 00:00:00'::timestamp without time zone)), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone)), (to_hex(id)), 4
   Sort Key: (to_seconds('1997-10-14 00:00:00'::timestamp without time zone)), (to_seconds(time_tbl.c3)), (to_seconds((time_tbl.c2)::timestamp without time zone)), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5578.41 rows=6826 width=60)
         Output: to_seconds('1997-10-14 00:00:00'::timestamp without time zone), to_seconds(c3), to_seconds((c2)::timestamp without time zone), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, `c2`, `c3` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, c2, c3 FROM public.time_tbl1mysql
(12 rows)

-- select to_seconds with order by (explain)
--Testcase 2499:
EXPLAIN VERBOSE
SELECT to_seconds(id + 200719), to_seconds(c3), to_seconds(c2), c1 FROM time_tbl ORDER BY c1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Result  (cost=859.49..6098.44 rows=6826 width=32)
   Output: to_seconds((id + 200719)), to_seconds(c3), to_seconds((c2)::timestamp without time zone), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=24)
         Output: c1, id, c3, c2
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=24)
               Output: c1, id, c3, c2
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `id`, `c1`, `c2`, `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT id, c1, c2, c3 FROM public.time_tbl1mysql
(14 rows)

-- select to_seconds with order by index (explain)
--Testcase 2500:
EXPLAIN VERBOSE
SELECT to_seconds(id + 200719), to_seconds(c3), to_seconds(c2), c1 FROM time_tbl ORDER BY 4;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Result  (cost=859.49..6098.44 rows=6826 width=32)
   Output: to_seconds((id + 200719)), to_seconds(c3), to_seconds((c2)::timestamp without time zone), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=24)
         Output: c1, id, c3, c2
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=24)
               Output: c1, id, c3, c2
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `id`, `c1`, `c2`, `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT id, c1, c2, c3 FROM public.time_tbl1mysql
(14 rows)

-- to_seconds constraints with order by (explain)
--Testcase 2501:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE to_seconds('2020-10-14 00:00:00'::timestamp) > to_seconds('1997-10-14 00:00:00'::timestamp) ORDER BY c1;
                                                                                                     QUERY PLAN                                                                                                     
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((to_seconds('2020-10-14 00:00:00') > to_seconds('1997-10-14 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.to_seconds('2020-10-14 00:00:00'::timestamp without time zone) > public.to_seconds('1997-10-14 00:00:00'::timestamp without time zone)))
(12 rows)

-- to_seconds constraints with order by (result)
--Testcase 2502:
SELECT c1 FROM time_tbl WHERE to_seconds('2020-10-14 00:00:00'::timestamp) > to_seconds('1997-10-14 00:00:00'::timestamp) ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select to_seconds with group by (explain)
--Testcase 2503:
EXPLAIN VERBOSE
SELECT to_seconds(971014), to_seconds(c3), to_seconds(c2), c1 FROM time_tbl GROUP BY c1,c2,c3 ORDER BY 1,2,3,4;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=451.57..451.58 rows=0 width=44)
   Output: (to_seconds(971014)), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone)), c1, c2, c3
   Sort Key: (to_seconds(971014)), (to_seconds(time_tbl.c3)), (to_seconds((time_tbl.c2)::timestamp without time zone)), time_tbl.c1
   ->  Foreign Scan  (cost=135.60..451.56 rows=0 width=44)
         Output: to_seconds(971014), to_seconds(c3), to_seconds((c2)::timestamp without time zone), c1, c2, c3
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1`, `c2`, `c3` FROM `test`.`time_tbl2` GROUP BY 1, 2, 3
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1, c2, c3 FROM public.time_tbl1mysql GROUP BY 1, 2, 3
(16 rows)

-- select to_seconds with group by index (explain)
--Testcase 2504:
EXPLAIN VERBOSE
SELECT to_seconds(971014), to_seconds(c3), to_seconds(c2), c1 FROM time_tbl GROUP BY 1,2,3,4 ORDER BY 1,2,3,4;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Group  (cost=5996.05..11217.94 rows=6826 width=32)
   Output: (to_seconds(971014)), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone)), c1
   Group Key: (to_seconds(971014)), (to_seconds(time_tbl.c3)), (to_seconds((time_tbl.c2)::timestamp without time zone)), time_tbl.c1
   ->  Sort  (cost=5996.05..6013.12 rows=6826 width=32)
         Output: (to_seconds(971014)), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone)), c1
         Sort Key: (to_seconds(971014)), (to_seconds(time_tbl.c3)), (to_seconds((time_tbl.c2)::timestamp without time zone)), time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=32)
               Output: (to_seconds(971014)), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT to_seconds(971014), to_seconds(`c3`), to_seconds(`c2`), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.to_seconds(971014), public.to_seconds(c3), public.to_seconds(c2), c1 FROM public.time_tbl1mysql
(15 rows)

-- select to_seconds with group by having (explain)
--Testcase 2505:
EXPLAIN VERBOSE
SELECT to_seconds(971014), c1 FROM time_tbl GROUP BY to_seconds(971014),c1 HAVING to_seconds(971014) > 100000 ORDER BY 1,2;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (to_seconds(971014)), c1
   Sort Key: (to_seconds(971014)), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (to_seconds(971014)), c1
         Group Key: (to_seconds(971014)), time_tbl.c1
         Filter: ((to_seconds(971014)) > 100000)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (to_seconds(971014)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT to_seconds(971014), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.to_seconds(971014), c1 FROM public.time_tbl1mysql
(16 rows)

-- select to_seconds with group by index having (explain)
--Testcase 2506:
EXPLAIN VERBOSE
SELECT to_seconds(971014), c1 FROM time_tbl GROUP BY 2,1 HAVING to_seconds(971014) > 100000 ORDER BY 1,2;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (to_seconds(971014)), c1
   Sort Key: (to_seconds(971014)), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (to_seconds(971014)), c1
         Group Key: (to_seconds(971014)), time_tbl.c1
         Filter: ((to_seconds(971014)) > 100000)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (to_seconds(971014)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT to_seconds(971014), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.to_seconds(971014), c1 FROM public.time_tbl1mysql
(16 rows)

-- select to_seconds and as
--Testcase 2507:
EXPLAIN VERBOSE
SELECT to_seconds(971014), to_seconds(c3), to_seconds(c2) as to_seconds1 FROM time_tbl ORDER BY 1,2,3;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5996.05..6013.12 rows=6826 width=24)
   Output: (to_seconds(971014)), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone))
   Sort Key: (to_seconds(971014)), (to_seconds(time_tbl.c3)), (to_seconds((time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=24)
         Output: (to_seconds(971014)), (to_seconds(c3)), (to_seconds((c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT to_seconds(971014), to_seconds(`c3`), to_seconds(`c2`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.to_seconds(971014), public.to_seconds(c3), public.to_seconds(c2) FROM public.time_tbl1mysql
(12 rows)

-- TO_DAYS()
-- select to_days (stub function, explain)
--Testcase 2508:
EXPLAIN VERBOSE
SELECT to_days(id + 200719), to_days(c2) FROM time_tbl ORDER BY 1,2;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=8)
   Output: (to_days((id + 200719))), (to_days(c2))
   Sort Key: (to_days((time_tbl.id + 200719))), (to_days(time_tbl.c2))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=8)
         Output: (to_days((id + 200719))), (to_days(c2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT to_days((`id` + 200719)), to_days(`c2`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.to_days((id + 200719)), public.to_days(c2) FROM public.time_tbl1mysql
(12 rows)

-- select to_days (stub function, not pushdown constraints, explain)
--Testcase 2509:
EXPLAIN VERBOSE
SELECT to_days(id + 200719), to_days(c2) FROM time_tbl WHERE to_hex(id) > '0' ORDER BY 1,2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort  (cost=1684.01..1689.70 rows=2276 width=8)
   Output: (to_days((id + 200719))), (to_days(c2))
   Sort Key: (to_days((time_tbl.id + 200719))), (to_days(time_tbl.c2))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..1557.10 rows=2276 width=8)
         Output: (to_days((id + 200719))), (to_days(c2))
         Filter: (to_hex(time_tbl.id) > '0'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT to_days((`id` + 200719)), to_days(`c2`), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.to_days((id + 200719)), public.to_days(c2), id FROM public.time_tbl1mysql
(13 rows)

-- select to_days (stub function, pushdown constraints, explain)
--Testcase 2510:
EXPLAIN VERBOSE
SELECT to_days(id + 200719), to_days(c2) FROM time_tbl WHERE id = 1 ORDER BY 1,2;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=323.95..324.04 rows=34 width=8)
   Output: (to_days((id + 200719))), (to_days(c2))
   Sort Key: (to_days((time_tbl.id + 200719))), (to_days(time_tbl.c2))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..323.09 rows=34 width=8)
         Output: (to_days((id + 200719))), (to_days(c2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT to_days((`id` + 200719)), to_days(`c2`) FROM `test`.`time_tbl2` WHERE ((`id` = 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.to_days((id + 200719)), public.to_days(c2) FROM public.time_tbl1mysql WHERE ((id = 1))
(12 rows)

-- select to_days (stub function, to_days in constraints, explain)
--Testcase 2511:
EXPLAIN VERBOSE
SELECT to_days(id + 200719), to_days(c2) FROM time_tbl WHERE to_days(id + 200719) > to_days('1997-10-14 00:00:00'::date) ORDER BY 1,2;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5051.51..5057.20 rows=2276 width=8)
   Output: (to_days((id + 200719))), (to_days(c2))
   Sort Key: (to_days((time_tbl.id + 200719))), (to_days(time_tbl.c2))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4924.60 rows=2276 width=8)
         Output: (to_days((id + 200719))), (to_days(c2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT to_days((`id` + 200719)), to_days(`c2`) FROM `test`.`time_tbl2` WHERE ((to_days((`id` + 200719)) > to_days('1997-10-14')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.to_days((id + 200719)), public.to_days(c2) FROM public.time_tbl1mysql WHERE ((public.to_days((id + 200719)) > public.to_days('1997-10-14'::date)))
(12 rows)

-- to_days in constrains (stub function, explain)
--Testcase 2512:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE to_days(id + 200719) > to_days('1997-10-14 00:00:00'::date) ORDER BY 1;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3907.82..3913.51 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3780.91 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, `c1` FROM `test`.`time_tbl2` WHERE ((to_days((`id` + 200719)) > to_days('1997-10-14')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.to_days((id + 200719)) > public.to_days('1997-10-14'::date)))
(12 rows)

-- to_days in constrains (stub function, result)
--Testcase 2513:
SELECT c1 FROM time_tbl WHERE to_days(id + 200719) > to_days('1997-10-14 00:00:00'::date) ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select to_days and agg (pushdown, explain)
--Testcase 2514:
EXPLAIN VERBOSE
SELECT to_days('1997-10-14 00:00:00'::date), to_days('1997-10-14 00:00:00'::date), sum(id) FROM time_tbl ORDER BY 1,2;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort  (cost=159.67..159.67 rows=1 width=16)
   Output: (to_days('1997-10-14'::date)), (to_days('1997-10-14'::date)), (sum(id))
   Sort Key: (to_days('1997-10-14'::date)), (to_days('1997-10-14'::date))
   ->  Foreign Scan  (cost=110.00..159.66 rows=1 width=16)
         Output: to_days('1997-10-14'::date), to_days('1997-10-14'::date), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select to_days and log2 (pushdown, explain)
--Testcase 2515:
EXPLAIN VERBOSE
SELECT to_days('1997-10-14 00:00:00'::date), to_days(c2), log2(id) FROM time_tbl ORDER BY 1,2;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Result  (cost=4272.49..9494.38 rows=6826 width=16)
   Output: (to_days('1997-10-14'::date)), (to_days(c2)), log2((id)::double precision)
   ->  Sort  (cost=4272.49..4289.55 rows=6826 width=12)
         Output: (to_days('1997-10-14'::date)), (to_days(c2)), id
         Sort Key: (to_days('1997-10-14'::date)), (to_days(time_tbl.c2))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=12)
               Output: (to_days('1997-10-14'::date)), (to_days(c2)), id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT to_days('1997-10-14'), to_days(`c2`), `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.to_days('1997-10-14'::date), public.to_days(c2), id FROM public.time_tbl1mysql
(14 rows)

-- select to_days with non pushdown func and explicit constant (explain)
--Testcase 2516:
EXPLAIN VERBOSE
SELECT to_days('1997-10-14 00:00:00'::date), to_days(c2), to_hex(id), 4 FROM time_tbl ORDER BY 1,2,3;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=44)
   Output: (to_days('1997-10-14'::date)), (to_days(c2)), (to_hex(id)), 4
   Sort Key: (to_days('1997-10-14'::date)), (to_days(time_tbl.c2)), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=44)
         Output: to_days('1997-10-14'::date), to_days(c2), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, `c2` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, c2 FROM public.time_tbl1mysql
(12 rows)

-- select to_days with order by (explain)
--Testcase 2517:
EXPLAIN VERBOSE
SELECT to_days(id + 200719), to_days(c2), c1 FROM time_tbl ORDER BY c1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Result  (cost=859.49..4374.88 rows=6826 width=16)
   Output: to_days((id + 200719)), to_days(c2), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=16)
         Output: c1, id, c2
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=16)
               Output: c1, id, c2
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `id`, `c1`, `c2` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT id, c1, c2 FROM public.time_tbl1mysql
(14 rows)

-- select to_days with order by index (explain)
--Testcase 2518:
EXPLAIN VERBOSE
SELECT to_days(id + 200719), to_days(c2), c1 FROM time_tbl ORDER BY 2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Result  (cost=2565.99..6081.38 rows=6826 width=16)
   Output: to_days((id + 200719)), (to_days(c2)), c1
   ->  Sort  (cost=2565.99..2583.05 rows=6826 width=16)
         Output: (to_days(c2)), c1, id
         Sort Key: (to_days(time_tbl.c2))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (to_days(c2)), c1, id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT to_days(`c2`), `c1`, `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.to_days(c2), c1, id FROM public.time_tbl1mysql
(14 rows)

-- to_days constraints with order by (explain)
--Testcase 2519:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE to_days('2020-10-14 00:00:00'::date) > to_days('1997-10-14 00:00:00'::date) ORDER BY c1;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((to_days('2020-10-14') > to_days('1997-10-14')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.to_days('2020-10-14'::date) > public.to_days('1997-10-14'::date)))
(12 rows)

-- to_days constraints with order by (result)
--Testcase 2520:
SELECT c1 FROM time_tbl WHERE to_days('2020-10-14 00:00:00'::date) > to_days('1997-10-14 00:00:00'::date) ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select to_days with group by (explain)
--Testcase 2521:
EXPLAIN VERBOSE
SELECT to_days(971014), to_days(c2), c1 FROM time_tbl GROUP BY c1,c2 ORDER BY 1,2,3;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=356.94..356.94 rows=0 width=20)
   Output: (to_days(971014)), (to_days(c2)), c1, c2
   Sort Key: (to_days(971014)), (to_days(time_tbl.c2)), time_tbl.c1
   ->  Foreign Scan  (cost=127.06..356.93 rows=0 width=20)
         Output: to_days(971014), to_days(c2), c1, c2
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1`, `c2` FROM `test`.`time_tbl2` GROUP BY 1, 2
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1, c2 FROM public.time_tbl1mysql GROUP BY 1, 2
(16 rows)

-- select to_days with group by index (explain)
--Testcase 2522:
EXPLAIN VERBOSE
SELECT to_days(971014), to_days(c2), c1 FROM time_tbl GROUP BY 1,2,3 ORDER BY 1,2,3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Group  (cost=4272.49..7753.75 rows=6826 width=16)
   Output: (to_days(971014)), (to_days(c2)), c1
   Group Key: (to_days(971014)), (to_days(time_tbl.c2)), time_tbl.c1
   ->  Sort  (cost=4272.49..4289.55 rows=6826 width=16)
         Output: (to_days(971014)), (to_days(c2)), c1
         Sort Key: (to_days(971014)), (to_days(time_tbl.c2)), time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=16)
               Output: (to_days(971014)), (to_days(c2)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT to_days(971014), to_days(`c2`), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.to_days(971014), public.to_days(c2), c1 FROM public.time_tbl1mysql
(15 rows)

-- select to_days with group by having (explain)
--Testcase 2523:
EXPLAIN VERBOSE
SELECT to_days(971014), c1 FROM time_tbl GROUP BY c1,to_days(971014) HAVING to_days(971014) > 1000 ORDER BY 1,2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=12)
   Output: (to_days(971014)), c1
   Sort Key: (to_days(971014)), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=12)
         Output: (to_days(971014)), c1
         Group Key: (to_days(971014)), time_tbl.c1
         Filter: ((to_days(971014)) > 1000)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (to_days(971014)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT to_days(971014), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.to_days(971014), c1 FROM public.time_tbl1mysql
(16 rows)

-- select to_days with group by index having (explain)
--Testcase 2524:
EXPLAIN VERBOSE
SELECT to_days(971014), c1 FROM time_tbl GROUP BY 2,1 HAVING to_days(971014) > 1000 ORDER BY 1,2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=12)
   Output: (to_days(971014)), c1
   Sort Key: (to_days(971014)), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=12)
         Output: (to_days(971014)), c1
         Group Key: (to_days(971014)), time_tbl.c1
         Filter: ((to_days(971014)) > 1000)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (to_days(971014)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT to_days(971014), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.to_days(971014), c1 FROM public.time_tbl1mysql
(16 rows)

-- select to_days and as
--Testcase 2525:
EXPLAIN VERBOSE
SELECT to_days(971014), to_days(c2) as to_days1 FROM time_tbl ORDER BY 1,2;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=8)
   Output: (to_days(971014)), (to_days(c2))
   Sort Key: (to_days(971014)), (to_days(time_tbl.c2))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (to_days(971014)), (to_days(c2))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT to_days(971014), to_days(`c2`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.to_days(971014), public.to_days(c2) FROM public.time_tbl1mysql
(12 rows)

-- TIMESTAMPDIFF()
-- select timestampdiff (stub function, explain)
--Testcase 2526:
EXPLAIN VERBOSE
SELECT timestampdiff('MINUTE', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('MONTH', c2, '2080-01-01'::date), timestampdiff('YEAR', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7736.68..7753.75 rows=6826 width=32)
   Output: (timestampdiff('MINUTE'::time_unit, (c2)::timestamp without time zone, c3)), (timestampdiff('DAY'::time_unit, c3, (c2)::timestamp without time zone)), (timestampdiff('MONTH'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('YEAR'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (timestampdiff('MINUTE'::time_unit, (time_tbl.c2)::timestamp without time zone, time_tbl.c3)), (timestampdiff('DAY'::time_unit, time_tbl.c3, (time_tbl.c2)::timestamp without time zone)), (timestampdiff('MONTH'::time_unit, (time_tbl.c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('YEAR'::time_unit, time_tbl.c3, '2080-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7301.98 rows=6826 width=32)
         Output: (timestampdiff('MINUTE'::time_unit, (c2)::timestamp without time zone, c3)), (timestampdiff('DAY'::time_unit, c3, (c2)::timestamp without time zone)), (timestampdiff('MONTH'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('YEAR'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timestampdiff(MINUTE, `c2`, `c3`), timestampdiff(DAY, `c3`, `c2`), timestampdiff(MONTH, `c2`, '2080-01-01 00:00:00'), timestampdiff(YEAR, `c3`, '2080-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.timestampdiff('MINUTE'::public.time_unit, c2, c3), public.timestampdiff('DAY'::public.time_unit, c3, c2), public.timestampdiff('MONTH'::public.time_unit, c2, '2080-01-01 00:00:00'::timestamp without time zone), public.timestampdiff('YEAR'::public.time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select timestampdiff (stub function, result)
--Testcase 2527:
SELECT timestampdiff('MINUTE', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('MONTH', c2, '2080-01-01'::date), timestampdiff('YEAR', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
 timestampdiff | timestampdiff | timestampdiff | timestampdiff 
---------------+---------------+---------------+---------------
        -31620 |            21 |           707 |            58
        -12000 |             8 |           707 |            58
         -6527 |             4 |           707 |            58
          2170 |            -1 |           707 |            58
          5712 |            -3 |           708 |            58
(5 rows)

-- select timestampdiff (stub function, not pushdown constraints, explain)
--Testcase 2528:
EXPLAIN VERBOSE
SELECT timestampdiff('DAY', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('YEAR', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1';
                                                                                                                                                                                     QUERY PLAN                                                                                                                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..424.98 rows=34 width=32)
   Output: (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, c3)), (timestampdiff('DAY'::time_unit, c3, (c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('YEAR'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone))
   Filter: (to_hex(time_tbl.id) = '1'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT timestampdiff(DAY, `c2`, `c3`), timestampdiff(DAY, `c3`, `c2`), timestampdiff(DAY, `c2`, '2080-01-01 00:00:00'), timestampdiff(YEAR, `c3`, '2080-01-01 12:00:00'), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.timestampdiff('DAY'::public.time_unit, c2, c3), public.timestampdiff('DAY'::public.time_unit, c3, c2), public.timestampdiff('DAY'::public.time_unit, c2, '2080-01-01 00:00:00'::timestamp without time zone), public.timestampdiff('YEAR'::public.time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(8 rows)

-- select timestampdiff (stub function, not pushdown constraints, result)
--Testcase 2529:
SELECT timestampdiff('DAY', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('YEAR', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1';
 timestampdiff | timestampdiff | timestampdiff | timestampdiff 
---------------+---------------+---------------+---------------
             3 |            -3 |         21549 |            58
(1 row)

-- select timestampdiff (stub function, pushdown constraints, explain)
--Testcase 2530:
EXPLAIN VERBOSE
SELECT timestampdiff('YEAR', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('YEAR', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7716.40..7733.38 rows=6792 width=32)
   Output: (timestampdiff('YEAR'::time_unit, (c2)::timestamp without time zone, c3)), (timestampdiff('DAY'::time_unit, c3, (c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('YEAR'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (timestampdiff('YEAR'::time_unit, (time_tbl.c2)::timestamp without time zone, time_tbl.c3)), (timestampdiff('DAY'::time_unit, time_tbl.c3, (time_tbl.c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (time_tbl.c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('YEAR'::time_unit, time_tbl.c3, '2080-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7284.11 rows=6792 width=32)
         Output: (timestampdiff('YEAR'::time_unit, (c2)::timestamp without time zone, c3)), (timestampdiff('DAY'::time_unit, c3, (c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('YEAR'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timestampdiff(YEAR, `c2`, `c3`), timestampdiff(DAY, `c3`, `c2`), timestampdiff(DAY, `c2`, '2080-01-01 00:00:00'), timestampdiff(YEAR, `c3`, '2080-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.timestampdiff('YEAR'::public.time_unit, c2, c3), public.timestampdiff('DAY'::public.time_unit, c3, c2), public.timestampdiff('DAY'::public.time_unit, c2, '2080-01-01 00:00:00'::timestamp without time zone), public.timestampdiff('YEAR'::public.time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select timestampdiff (stub function, pushdown constraints, result)
--Testcase 2531:
SELECT timestampdiff('YEAR', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('YEAR', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
 timestampdiff | timestampdiff | timestampdiff | timestampdiff 
---------------+---------------+---------------+---------------
             0 |            -3 |         21549 |            58
             0 |            -1 |         21548 |            58
             0 |             4 |         21540 |            58
             0 |             8 |         21535 |            58
             0 |            21 |         21521 |            58
(5 rows)

-- select timestampdiff (stub function, timestampdiff in constraints, explain)
--Testcase 2532:
EXPLAIN VERBOSE
SELECT timestampdiff('YEAR', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('YEAR', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl WHERE timestampdiff('YEAR', c3, '2080-01-01 12:00:00'::timestamp) < 100 ORDER BY 1,2,3,4;


 Sort  (cost=4477.33..4483.02 rows=2276 width=32)
   Output: (timestampdiff('YEAR'::time_unit, (c2)::timestamp without time zone, c3)), (timestampdiff('DAY'::time_unit, c3, (c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('YEAR'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (timestampdiff('YEAR'::time_unit, (time_tbl.c2)::timestamp without time zone, time_tbl.c3)), (timestampdiff('DAY'::time_unit, time_tbl.c3, (time_tbl.c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (time_tbl.c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('YEAR'::time_unit, time_tbl.c3, '2080-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4350.42 rows=2276 width=32)
         Output: (timestampdiff('YEAR'::time_unit, (c2)::timestamp without time zone, c3)), (timestampdiff('DAY'::time_unit, c3, (c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('YEAR'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timestampdiff(YEAR, `c2`, `c3`), timestampdiff(DAY, `c3`, `c2`), timestampdiff(DAY, `c2`, '2080-01-01 00:00:00'), timestampdiff(YEAR, `c3`, '2080-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((timestampdiff(YEAR, `c3`, '2080-01-01 12:00:00') < 100))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.timestampdiff('YEAR'::public.time_unit, c2, c3), public.timestampdiff('DAY'::public.time_unit, c3, c2), public.timestampdiff('DAY'::public.time_unit, c2, '2080-01-01 00:00:00'::timestamp without time zone), public.timestampdiff('YEAR'::public.time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.timestampdiff('YEAR'::public.time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone) < 100::double precision))
(12 rows)

-- select timestampdiff (stub function, timestampdiff in constraints, result)
--Testcase 2533:
SELECT timestampdiff('YEAR', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('YEAR', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl WHERE timestampdiff('YEAR', c3, '2080-01-01 12:00:00'::timestamp) < 100 ORDER BY 1,2,3,4;
 timestampdiff | timestampdiff | timestampdiff | timestampdiff 
---------------+---------------+---------------+---------------
             0 |            -3 |         21549 |            58
             0 |            -1 |         21548 |            58
             0 |             4 |         21540 |            58
             0 |             8 |         21535 |            58
             0 |            21 |         21521 |            58
(5 rows)

-- select timestampdiff with agg (pushdown, explain)
--Testcase 2534:
EXPLAIN VERBOSE
SELECT max(c3), timestampdiff('DAY', max(c2), max(c3)), timestampdiff('MONTH', min(c2), min(c3)) FROM time_tbl;
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.66 rows=1 width=24)
   Output: (max(c3)), timestampdiff('DAY'::time_unit, ((max(c2)))::timestamp without time zone, (max(c3))), timestampdiff('MONTH'::time_unit, ((min(c2)))::timestamp without time zone, (min(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`), max(`c2`), min(`c2`), min(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3), max(c2), min(c2), min(c3) FROM public.time_tbl1mysql
(11 rows)

-- select timestampdiff as nest function with agg (pushdown, result)
--Testcase 2535:
SELECT max(c3), timestampdiff('DAY', max(c2), max(c3)), timestampdiff('MONTH', min(c2), min(c3)) FROM time_tbl;
ERROR:  stub timestampdiff(time_unit, timestamp, timestamp) is called
CONTEXT:  PL/pgSQL function timestampdiff(time_unit,timestamp without time zone,timestamp without time zone) line 3 at RAISE
-- select timestampdiff with non pushdown func and explicit constant (explain)
--Testcase 2536:
EXPLAIN VERBOSE
SELECT timestampdiff('MONTH', c2, '2080-01-01'::date), timestampdiff('DAY', c3, '2080-01-01 12:00:00'::timestamp), pi(), 4.1 FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                                                    QUERY PLAN                                                                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=56)
   Output: (timestampdiff('MONTH'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('DAY'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone)), '3.141592653589793'::double precision, 4.1
   Sort Key: (timestampdiff('MONTH'::time_unit, (time_tbl.c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('DAY'::time_unit, time_tbl.c3, '2080-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=56)
         Output: (timestampdiff('MONTH'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('DAY'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timestampdiff(MONTH, `c2`, '2080-01-01 00:00:00'), timestampdiff(DAY, `c3`, '2080-01-01 12:00:00'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.timestampdiff('MONTH'::public.time_unit, c2, '2080-01-01 00:00:00'::timestamp without time zone), public.timestampdiff('DAY'::public.time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select timestampdiff with non pushdown func and explicit constant (result)
--Testcase 2537:
SELECT timestampdiff('MONTH', c2, '2080-01-01'::date), timestampdiff('DAY', c3, '2080-01-01 12:00:00'::timestamp), pi(), 4.1 FROM time_tbl ORDER BY 1,2,3,4;
 timestampdiff | timestampdiff |        pi         | ?column? 
---------------+---------------+-------------------+----------
           707 |         21543 | 3.141592653589793 |      4.1
           707 |         21543 | 3.141592653589793 |      4.1
           707 |         21545 | 3.141592653589793 |      4.1
           707 |         21546 | 3.141592653589793 |      4.1
           708 |         21545 | 3.141592653589793 |      4.1
(5 rows)

-- select timestampdiff with order by (explain)
--Testcase 2538:
EXPLAIN VERBOSE
SELECT id, timestampdiff('DAY', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('DAY', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl order by id,timestampdiff('DAY', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('DAY', c3, '2080-01-01 12:00:00'::timestamp);
                                                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7736.68..7753.75 rows=6826 width=36)
   Output: id, (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, c3)), (timestampdiff('DAY'::time_unit, c3, (c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('DAY'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone))
   Sort Key: time_tbl.id, (timestampdiff('DAY'::time_unit, (time_tbl.c2)::timestamp without time zone, time_tbl.c3)), (timestampdiff('DAY'::time_unit, time_tbl.c3, (time_tbl.c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (time_tbl.c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('DAY'::time_unit, time_tbl.c3, '2080-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7301.98 rows=6826 width=36)
         Output: id, (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, c3)), (timestampdiff('DAY'::time_unit, c3, (c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('DAY'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, timestampdiff(DAY, `c2`, `c3`), timestampdiff(DAY, `c3`, `c2`), timestampdiff(DAY, `c2`, '2080-01-01 00:00:00'), timestampdiff(DAY, `c3`, '2080-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.timestampdiff('DAY'::public.time_unit, c2, c3), public.timestampdiff('DAY'::public.time_unit, c3, c2), public.timestampdiff('DAY'::public.time_unit, c2, '2080-01-01 00:00:00'::timestamp without time zone), public.timestampdiff('DAY'::public.time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select timestampdiff with order by (result)
--Testcase 2539:
SELECT id, timestampdiff('DAY', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('DAY', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl order by id,timestampdiff('DAY', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('DAY', c3, '2080-01-01 12:00:00'::timestamp);
 id | timestampdiff | timestampdiff | timestampdiff | timestampdiff 
----+---------------+---------------+---------------+---------------
  0 |             1 |            -1 |         21548 |         21546
  1 |             3 |            -3 |         21549 |         21545
  2 |            -4 |             4 |         21540 |         21545
  3 |            -8 |             8 |         21535 |         21543
  4 |           -21 |            21 |         21521 |         21543
(5 rows)

-- select timestampdiff with order by index (result)
--Testcase 2540:
SELECT id, timestampdiff('DAY', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('DAY', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl order by 5,4,3,2,1;
 id | timestampdiff | timestampdiff | timestampdiff | timestampdiff 
----+---------------+---------------+---------------+---------------
  4 |           -21 |            21 |         21521 |         21543
  3 |            -8 |             8 |         21535 |         21543
  2 |            -4 |             4 |         21540 |         21545
  1 |             3 |            -3 |         21549 |         21545
  0 |             1 |            -1 |         21548 |         21546
(5 rows)

-- select timestampdiff with order by index (result)
--Testcase 2541:
SELECT id, timestampdiff('DAY', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('DAY', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl order by 1,2,3,4,5;
 id | timestampdiff | timestampdiff | timestampdiff | timestampdiff 
----+---------------+---------------+---------------+---------------
  0 |             1 |            -1 |         21548 |         21546
  1 |             3 |            -3 |         21549 |         21545
  2 |            -4 |             4 |         21540 |         21545
  3 |            -8 |             8 |         21535 |         21543
  4 |           -21 |            21 |         21521 |         21543
(5 rows)

-- select timestampdiff with group by (explain)
--Testcase 2542:
EXPLAIN VERBOSE
SELECT max(c3), timestampdiff('DAY', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('DAY', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl group by timestampdiff('DAY', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('DAY', c3, '2080-01-01 12:00:00'::timestamp) ORDER BY 1,2,3,4,5;
                                                                                                                                                                                                                          QUERY PLAN                                                                                                                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7598.44..7598.94 rows=200 width=40)
   Output: (max(c3)), (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, c3)), (timestampdiff('DAY'::time_unit, c3, (c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('DAY'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (max(time_tbl.c3)), (timestampdiff('DAY'::time_unit, (time_tbl.c2)::timestamp without time zone, time_tbl.c3)), (timestampdiff('DAY'::time_unit, time_tbl.c3, (time_tbl.c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (time_tbl.c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('DAY'::time_unit, time_tbl.c3, '2080-01-01 12:00:00'::timestamp without time zone))
   ->  HashAggregate  (cost=7387.30..7590.80 rows=200 width=40)
         Output: max(c3), (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, c3)), (timestampdiff('DAY'::time_unit, c3, (c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('DAY'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone))
         Group Key: (timestampdiff('DAY'::time_unit, (time_tbl.c2)::timestamp without time zone, time_tbl.c3)), (timestampdiff('DAY'::time_unit, time_tbl.c3, (time_tbl.c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (time_tbl.c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('DAY'::time_unit, time_tbl.c3, '2080-01-01 12:00:00'::timestamp without time zone))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..7301.98 rows=6826 width=40)
               Output: (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, c3)), (timestampdiff('DAY'::time_unit, c3, (c2)::timestamp without time zone)), (timestampdiff('DAY'::time_unit, (c2)::timestamp without time zone, '2080-01-01 00:00:00'::timestamp without time zone)), (timestampdiff('DAY'::time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT timestampdiff(DAY, `c2`, `c3`), timestampdiff(DAY, `c3`, `c2`), timestampdiff(DAY, `c2`, '2080-01-01 00:00:00'), timestampdiff(DAY, `c3`, '2080-01-01 12:00:00'), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.timestampdiff('DAY'::public.time_unit, c2, c3), public.timestampdiff('DAY'::public.time_unit, c3, c2), public.timestampdiff('DAY'::public.time_unit, c2, '2080-01-01 00:00:00'::timestamp without time zone), public.timestampdiff('DAY'::public.time_unit, c3, '2080-01-01 12:00:00'::timestamp without time zone), c3 FROM public.time_tbl1mysql
(15 rows)

-- select timestampdiff with group by (result)
--Testcase 2543:
SELECT max(c3), timestampdiff('DAY', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('DAY', c3, '2080-01-01 12:00:00'::timestamp) FROM time_tbl group by timestampdiff('DAY', c2, c3), timestampdiff('DAY', c3, c2), timestampdiff('DAY', c2, '2080-01-01'::date), timestampdiff('DAY', c3, '2080-01-01 12:00:00'::timestamp) ORDER BY 1,2,3,4,5;
         max         | timestampdiff | timestampdiff | timestampdiff | timestampdiff 
---------------------+---------------+---------------+---------------+---------------
 2021-01-03 12:10:30 |             1 |            -1 |         21548 |         21546
 2021-01-04 23:12:13 |             3 |            -3 |         21549 |         21545
 2021-01-05 11:12:12 |            -4 |             4 |         21540 |         21545
 2021-01-06 16:00:00 |            -8 |             8 |         21535 |         21543
 2021-01-07 00:59:59 |           -21 |            21 |         21521 |         21543
(5 rows)

-- select timestampdiff with group by index (result)
--Testcase 2544:
SELECT id, timestampdiff('DAY', '2021-01-01 12:00:00'::timestamp, '2080-01-01'::date), timestampdiff('DAY', '2019-01-01'::date, '2080-01-01 12:00:00'::timestamp) FROM time_tbl group by 3,2,1 ORDER BY 1,2,3;
 id | timestampdiff | timestampdiff 
----+---------------+---------------
  0 |         21548 |         22280
  1 |         21548 |         22280
  2 |         21548 |         22280
  3 |         21548 |         22280
  4 |         21548 |         22280
(5 rows)

-- select timestampdiff with group by index (result)
--Testcase 2545:
SELECT id, timestampdiff('DAY', '2021-01-01 12:00:00'::timestamp, '2080-01-01'::date), timestampdiff('DAY', '2019-01-01'::date, '2080-01-01 12:00:00'::timestamp) FROM time_tbl group by 1,2,3 ORDER BY 1,2,3;
 id | timestampdiff | timestampdiff 
----+---------------+---------------
  0 |         21548 |         22280
  1 |         21548 |         22280
  2 |         21548 |         22280
  3 |         21548 |         22280
  4 |         21548 |         22280
(5 rows)

-- select timestampdiff and as
--Testcase 2546:
SELECT timestampdiff('MINUTE', c2, c3) as timestampdiff1, timestampdiff('DAY', c3, c2) as timestampdiff2, timestampdiff('MONTH', c2, '2080-01-01'::date) as timestampdiff3, timestampdiff('YEAR', c3, '2080-01-01 12:00:00'::timestamp) as timestampdiff4 FROM time_tbl ORDER BY 1,2,3,4;
 timestampdiff1 | timestampdiff2 | timestampdiff3 | timestampdiff4 
----------------+----------------+----------------+----------------
         -31620 |             21 |            707 |             58
         -12000 |              8 |            707 |             58
          -6527 |              4 |            707 |             58
           2170 |             -1 |            707 |             58
           5712 |             -3 |            708 |             58
(5 rows)

-- TIMESTAMPADD()
-- select timestampadd (stub function, explain)
--Testcase 2547:
EXPLAIN VERBOSE
SELECT timestampadd('MINUTE', 5, c3), timestampadd('DAY', 5, c2) FROM time_tbl ORDER BY 1,2;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=16)
   Output: (timestampadd('MINUTE'::time_unit, 5, c3)), (timestampadd('DAY'::time_unit, 5, (c2)::timestamp without time zone))
   Sort Key: (timestampadd('MINUTE'::time_unit, 5, time_tbl.c3)), (timestampadd('DAY'::time_unit, 5, (time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=16)
         Output: (timestampadd('MINUTE'::time_unit, 5, c3)), (timestampadd('DAY'::time_unit, 5, (c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timestampadd(MINUTE, 5, `c3`), timestampadd(DAY, 5, `c2`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.timestampadd('MINUTE'::public.time_unit, 5, c3), public.timestampadd('DAY'::public.time_unit, 5, c2) FROM public.time_tbl1mysql
(12 rows)

-- select timestampadd (stub function, result)
--Testcase 2548:
SELECT timestampadd('MINUTE', 5, c3), timestampadd('DAY', 5, c2) FROM time_tbl ORDER BY 1,2;
    timestampadd     |    timestampadd     
---------------------+---------------------
 2021-01-03 12:15:30 | 2021-01-07 00:00:00
 2021-01-04 23:17:13 | 2021-01-06 00:00:00
 2021-01-05 11:17:12 | 2021-01-15 00:00:00
 2021-01-06 16:05:00 | 2021-01-20 00:00:00
 2021-01-07 01:04:59 | 2021-02-03 00:00:00
(5 rows)

-- select timestampadd (stub function, not pushdown constraints, explain)
--Testcase 2549:
EXPLAIN VERBOSE
SELECT timestampadd('MINUTE', 10, c3), timestampadd('YEAR', 5, c2) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=408.68..408.76 rows=34 width=16)
   Output: (timestampadd('MINUTE'::time_unit, 10, c3)), (timestampadd('YEAR'::time_unit, 5, (c2)::timestamp without time zone))
   Sort Key: (timestampadd('MINUTE'::time_unit, 10, time_tbl.c3)), (timestampadd('YEAR'::time_unit, 5, (time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..407.81 rows=34 width=16)
         Output: (timestampadd('MINUTE'::time_unit, 10, c3)), (timestampadd('YEAR'::time_unit, 5, (c2)::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timestampadd(MINUTE, 10, `c3`), timestampadd(YEAR, 5, `c2`), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.timestampadd('MINUTE'::public.time_unit, 10, c3), public.timestampadd('YEAR'::public.time_unit, 5, c2), id FROM public.time_tbl1mysql
(13 rows)

-- select timestampadd (stub function, not pushdown constraints, result)
--Testcase 2550:
SELECT timestampadd('MINUTE', 10, c3), timestampadd('YEAR', 5, c2) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
    timestampadd     |    timestampadd     
---------------------+---------------------
 2021-01-04 23:22:13 | 2026-01-01 00:00:00
(1 row)

-- select timestampadd (stub function, pushdown constraints, explain)
--Testcase 2551:
EXPLAIN VERBOSE
SELECT timestampadd('MINUTE', 6, c3), timestampadd('YEAR', 5, c2) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4286.44..4303.42 rows=6792 width=16)
   Output: (timestampadd('MINUTE'::time_unit, 6, c3)), (timestampadd('YEAR'::time_unit, 5, (c2)::timestamp without time zone))
   Sort Key: (timestampadd('MINUTE'::time_unit, 6, time_tbl.c3)), (timestampadd('YEAR'::time_unit, 5, (time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.14 rows=6792 width=16)
         Output: (timestampadd('MINUTE'::time_unit, 6, c3)), (timestampadd('YEAR'::time_unit, 5, (c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timestampadd(MINUTE, 6, `c3`), timestampadd(YEAR, 5, `c2`) FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.timestampadd('MINUTE'::public.time_unit, 6, c3), public.timestampadd('YEAR'::public.time_unit, 5, c2) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select timestampadd (stub function, pushdown constraints, result)
--Testcase 2552:
SELECT timestampadd('MINUTE', 6, c3), timestampadd('YEAR', 5, c2) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
    timestampadd     |    timestampadd     
---------------------+---------------------
 2021-01-03 12:16:30 | 2026-01-02 00:00:00
 2021-01-04 23:18:13 | 2026-01-01 00:00:00
 2021-01-05 11:18:12 | 2026-01-10 00:00:00
 2021-01-06 16:06:00 | 2026-01-15 00:00:00
 2021-01-07 01:05:59 | 2026-01-29 00:00:00
(5 rows)

-- select timestampadd (stub function, timestampadd in constraints, explain)
--Testcase 2553:
EXPLAIN VERBOSE
SELECT timestampadd('MINUTE', 6, c3), timestampadd('YEAR', 10, c2) FROM time_tbl WHERE timestampadd('YEAR', 1, c2) > '1997-01-01 12:00:00'::timestamp ORDER BY 1,2;
                                                                                                                                        QUERY PLAN                                                                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3345.01..3350.70 rows=2276 width=16)
   Output: (timestampadd('MINUTE'::time_unit, 6, c3)), (timestampadd('YEAR'::time_unit, 10, (c2)::timestamp without time zone))
   Sort Key: (timestampadd('MINUTE'::time_unit, 6, time_tbl.c3)), (timestampadd('YEAR'::time_unit, 10, (time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3218.10 rows=2276 width=16)
         Output: (timestampadd('MINUTE'::time_unit, 6, c3)), (timestampadd('YEAR'::time_unit, 10, (c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timestampadd(MINUTE, 6, `c3`), timestampadd(YEAR, 10, `c2`) FROM `test`.`time_tbl2` WHERE ((timestampadd(YEAR, 1, `c2`) > '1997-01-01 12:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.timestampadd('MINUTE'::public.time_unit, 6, c3), public.timestampadd('YEAR'::public.time_unit, 10, c2) FROM public.time_tbl1mysql WHERE ((public.timestampadd('YEAR'::public.time_unit, 1, c2) > '1997-01-01 12:00:00'::timestamp without time zone))
(12 rows)

-- select timestampadd (stub function, timestampadd in constraints, result)
--Testcase 2554:
SELECT timestampadd('MINUTE', 6, c3), timestampadd('YEAR', 10, c2) FROM time_tbl WHERE timestampadd('YEAR', 1, c2) > '1997-01-01 12:00:00'::timestamp ORDER BY 1,2;
    timestampadd     |    timestampadd     
---------------------+---------------------
 2021-01-03 12:16:30 | 2031-01-02 00:00:00
 2021-01-04 23:18:13 | 2031-01-01 00:00:00
 2021-01-05 11:18:12 | 2031-01-10 00:00:00
 2021-01-06 16:06:00 | 2031-01-15 00:00:00
 2021-01-07 01:05:59 | 2031-01-29 00:00:00
(5 rows)

-- select timestampadd with agg (pushdown, explain)
--Testcase 2555:
EXPLAIN VERBOSE
SELECT max(c3), timestampadd('DAY', 2, max(c3)), timestampadd('MONTH', 2, min(c2)) FROM time_tbl;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.66 rows=1 width=24)
   Output: (max(c3)), timestampadd('DAY'::time_unit, 2, (max(c3))), timestampadd('MONTH'::time_unit, 2, ((min(c2)))::timestamp without time zone)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`), min(`c2`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3), min(c2) FROM public.time_tbl1mysql
(11 rows)

-- select timestampadd as nest function with agg (pushdown, result)
--Testcase 2556:
SELECT max(c3), timestampadd('DAY', 2, max(c3)), timestampadd('MONTH', 2, min(c2)) FROM time_tbl;
ERROR:  stub timestampadd(time_unit, integer, timestamp) is called
CONTEXT:  PL/pgSQL function timestampadd(time_unit,integer,timestamp without time zone) line 3 at RAISE
-- select timestampadd with non pushdown func and explicit constant (explain)
--Testcase 2557:
EXPLAIN VERBOSE
SELECT timestampadd('MINUTE', 2, max(c3)), timestampadd('MONTH', 60, min(c2)), pi(), 4.1 FROM time_tbl ORDER BY 1,2;
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=159.67..159.68 rows=1 width=56)
   Output: (timestampadd('MINUTE'::time_unit, 2, (max(c3)))), (timestampadd('MONTH'::time_unit, 60, ((min(c2)))::timestamp without time zone)), '3.141592653589793'::double precision, 4.1
   Sort Key: (timestampadd('MINUTE'::time_unit, 2, (max(time_tbl.c3)))), (timestampadd('MONTH'::time_unit, 60, ((min(time_tbl.c2)))::timestamp without time zone))
   ->  Foreign Scan  (cost=110.00..159.66 rows=1 width=56)
         Output: timestampadd('MINUTE'::time_unit, 2, (max(c3))), timestampadd('MONTH'::time_unit, 60, ((min(c2)))::timestamp without time zone), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT max(`c3`), min(`c2`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT max(c3), min(c2) FROM public.time_tbl1mysql
(16 rows)

-- select timestampadd with non pushdown func and explicit constant (result)
--Testcase 2558:
SELECT timestampadd('MINUTE', 2, max(c3)), timestampadd('MONTH', 60, min(c2)), pi(), 4.1 FROM time_tbl ORDER BY 1,2;
ERROR:  stub timestampadd(time_unit, integer, timestamp) is called
CONTEXT:  PL/pgSQL function timestampadd(time_unit,integer,timestamp without time zone) line 3 at RAISE
-- select timestampadd with order by (explain)
--Testcase 2559:
EXPLAIN VERBOSE
SELECT id, timestampadd('MINUTE', 60, c3), timestampadd('YEAR', 10, c2) FROM time_tbl order by id,timestampadd('MINUTE', 60, c3), timestampadd('YEAR', 10, c2);
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=20)
   Output: id, (timestampadd('MINUTE'::time_unit, 60, c3)), (timestampadd('YEAR'::time_unit, 10, (c2)::timestamp without time zone))
   Sort Key: time_tbl.id, (timestampadd('MINUTE'::time_unit, 60, time_tbl.c3)), (timestampadd('YEAR'::time_unit, 10, (time_tbl.c2)::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=20)
         Output: id, (timestampadd('MINUTE'::time_unit, 60, c3)), (timestampadd('YEAR'::time_unit, 10, (c2)::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, timestampadd(MINUTE, 60, `c3`), timestampadd(YEAR, 10, `c2`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.timestampadd('MINUTE'::public.time_unit, 60, c3), public.timestampadd('YEAR'::public.time_unit, 10, c2) FROM public.time_tbl1mysql
(12 rows)

-- select timestampadd with order by (result)
--Testcase 2560:
SELECT id, timestampadd('MINUTE', 60, c3), timestampadd('YEAR', 10, c2) FROM time_tbl order by id,timestampadd('MINUTE', 60, c3), timestampadd('YEAR', 10, c2);
 id |    timestampadd     |    timestampadd     
----+---------------------+---------------------
  0 | 2021-01-03 13:10:30 | 2031-01-02 00:00:00
  1 | 2021-01-05 00:12:13 | 2031-01-01 00:00:00
  2 | 2021-01-05 12:12:12 | 2031-01-10 00:00:00
  3 | 2021-01-06 17:00:00 | 2031-01-15 00:00:00
  4 | 2021-01-07 01:59:59 | 2031-01-29 00:00:00
(5 rows)

-- select timestampadd with order by index (result)
--Testcase 2561:
SELECT id,timestampadd('MINUTE', 60, c3), timestampadd('YEAR', 10, c2) FROM time_tbl order by 3,2,1;
 id |    timestampadd     |    timestampadd     
----+---------------------+---------------------
  1 | 2021-01-05 00:12:13 | 2031-01-01 00:00:00
  0 | 2021-01-03 13:10:30 | 2031-01-02 00:00:00
  2 | 2021-01-05 12:12:12 | 2031-01-10 00:00:00
  3 | 2021-01-06 17:00:00 | 2031-01-15 00:00:00
  4 | 2021-01-07 01:59:59 | 2031-01-29 00:00:00
(5 rows)

-- select timestampadd with order by index (result)
--Testcase 2562:
SELECT id, timestampadd('MINUTE', 60, c3), timestampadd('YEAR', 10, c2) FROM time_tbl order by 1,2,3;
 id |    timestampadd     |    timestampadd     
----+---------------------+---------------------
  0 | 2021-01-03 13:10:30 | 2031-01-02 00:00:00
  1 | 2021-01-05 00:12:13 | 2031-01-01 00:00:00
  2 | 2021-01-05 12:12:12 | 2031-01-10 00:00:00
  3 | 2021-01-06 17:00:00 | 2031-01-15 00:00:00
  4 | 2021-01-07 01:59:59 | 2031-01-29 00:00:00
(5 rows)

-- select timestampadd with group by (explain)
--Testcase 2563:
EXPLAIN VERBOSE
SELECT max(c3), timestampadd('YEAR', 2, '1997-01-01 12:00:00'::timestamp), timestampadd('MONTH', 12, '1997-01-01'::date) FROM time_tbl group by timestampadd('YEAR', 2, '1997-01-01 12:00:00'::timestamp), timestampadd('MONTH', 12, '1997-01-01'::date) ORDER BY 1,2,3;
                                                                                                                                   QUERY PLAN                                                                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7804.94..7822.01 rows=6826 width=24)
   Output: (max(c3)), (timestampadd('YEAR'::time_unit, 2, '1997-01-01 12:00:00'::timestamp without time zone)), (timestampadd('MONTH'::time_unit, 12, '1997-01-01 00:00:00'::timestamp without time zone))
   Sort Key: (max(time_tbl.c3)), (timestampadd('YEAR'::time_unit, 2, '1997-01-01 12:00:00'::timestamp without time zone)), (timestampadd('MONTH'::time_unit, 12, '1997-01-01 00:00:00'::timestamp without time zone))
   ->  HashAggregate  (cost=3888.97..7370.24 rows=6826 width=24)
         Output: max(c3), (timestampadd('YEAR'::time_unit, 2, '1997-01-01 12:00:00'::timestamp without time zone)), (timestampadd('MONTH'::time_unit, 12, '1997-01-01 00:00:00'::timestamp without time zone))
         Group Key: (timestampadd('YEAR'::time_unit, 2, '1997-01-01 12:00:00'::timestamp without time zone)), (timestampadd('MONTH'::time_unit, 12, '1997-01-01 00:00:00'::timestamp without time zone))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=24)
               Output: (timestampadd('YEAR'::time_unit, 2, '1997-01-01 12:00:00'::timestamp without time zone)), (timestampadd('MONTH'::time_unit, 12, '1997-01-01 00:00:00'::timestamp without time zone)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT timestampadd(YEAR, 2, '1997-01-01 12:00:00'), timestampadd(MONTH, 12, '1997-01-01 00:00:00'), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.timestampadd('YEAR'::public.time_unit, 2, '1997-01-01 12:00:00'::timestamp without time zone), public.timestampadd('MONTH'::public.time_unit, 12, '1997-01-01 00:00:00'::timestamp without time zone), c3 FROM public.time_tbl1mysql
(15 rows)

-- select timestampadd with group by (result)
--Testcase 2564:
SELECT max(c3), timestampadd('YEAR', 2, '1997-01-01 12:00:00'::timestamp), timestampadd('MONTH', 12, '1997-01-01'::date) FROM time_tbl group by timestampadd('YEAR', 2, '1997-01-01 12:00:00'::timestamp), timestampadd('MONTH', 12, '1997-01-01'::date) ORDER BY 1,2,3;
         max         |    timestampadd     |    timestampadd     
---------------------+---------------------+---------------------
 2021-01-07 00:59:59 | 1999-01-01 12:00:00 | 1998-01-01 00:00:00
(1 row)

-- select timestampadd with group by index (result)
--Testcase 2565:
SELECT id, timestampadd('YEAR', 2, '1997-01-01 12:00:00'::timestamp), timestampadd('MONTH', 12, '1997-01-01'::date) FROM time_tbl group by 3,2,1 ORDER BY 1,2,3;
 id |    timestampadd     |    timestampadd     
----+---------------------+---------------------
  0 | 1999-01-01 12:00:00 | 1998-01-01 00:00:00
  1 | 1999-01-01 12:00:00 | 1998-01-01 00:00:00
  2 | 1999-01-01 12:00:00 | 1998-01-01 00:00:00
  3 | 1999-01-01 12:00:00 | 1998-01-01 00:00:00
  4 | 1999-01-01 12:00:00 | 1998-01-01 00:00:00
(5 rows)

-- select timestampadd with group by index (result)
--Testcase 2566:
SELECT id, timestampadd('YEAR', 2, '1997-01-01 12:00:00'::timestamp), timestampadd('MONTH', 12, '1997-01-01'::date) FROM time_tbl group by 1,2,3 ORDER BY 1,2,3;
 id |    timestampadd     |    timestampadd     
----+---------------------+---------------------
  0 | 1999-01-01 12:00:00 | 1998-01-01 00:00:00
  1 | 1999-01-01 12:00:00 | 1998-01-01 00:00:00
  2 | 1999-01-01 12:00:00 | 1998-01-01 00:00:00
  3 | 1999-01-01 12:00:00 | 1998-01-01 00:00:00
  4 | 1999-01-01 12:00:00 | 1998-01-01 00:00:00
(5 rows)

-- select timestampadd and as
--Testcase 2567:
SELECT timestampadd('MINUTE', 60, c2) as timestampadd1, timestampadd('MONTH', 12, '2080-01-01 12:01:00'::timestamp) as timestampadd2 FROM time_tbl ORDER BY 1,2;
    timestampadd1    |    timestampadd2    
---------------------+---------------------
 2021-01-01 01:00:00 | 2081-01-01 12:01:00
 2021-01-02 01:00:00 | 2081-01-01 12:01:00
 2021-01-10 01:00:00 | 2081-01-01 12:01:00
 2021-01-15 01:00:00 | 2081-01-01 12:01:00
 2021-01-29 01:00:00 | 2081-01-01 12:01:00
(5 rows)

-- TIMESTAMP()
-- select mysql_timestamp (stub function, explain)
--Testcase 2568:
EXPLAIN VERBOSE
SELECT mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl ORDER BY 1,2,3;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5996.05..6013.12 rows=6826 width=24)
   Output: (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1))
   Sort Key: (mysql_timestamp((time_tbl.c2)::timestamp without time zone)), (mysql_timestamp(time_tbl.c3)), (mysql_timestamp(time_tbl.c3, time_tbl.c1))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=24)
         Output: (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timestamp(`c2`), timestamp(`c3`), timestamp(`c3`, `c1`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_timestamp(c2), public.mysql_timestamp(c3), public.mysql_timestamp(c3, c1) FROM public.time_tbl1mysql
(12 rows)

-- select mysql_timestamp (stub function, result)
--Testcase 2569:
SELECT mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl ORDER BY 1,2,3;
   mysql_timestamp   |   mysql_timestamp   |   mysql_timestamp   
---------------------+---------------------+---------------------
 2021-01-01 00:00:00 | 2021-01-04 23:12:13 | 2021-01-05 22:24:26
 2021-01-02 00:00:00 | 2021-01-03 12:10:30 | 2021-01-04 00:21:00
 2021-01-10 00:00:00 | 2021-01-05 11:12:12 | 2021-01-05 22:24:24
 2021-01-15 00:00:00 | 2021-01-06 16:00:00 | 2021-01-07 08:00:00
 2021-01-29 00:00:00 | 2021-01-07 00:59:59 | 2021-01-07 01:59:58
(5 rows)

-- select mysql_timestamp (stub function, not pushdown constraints, explain)
--Testcase 2570:
EXPLAIN VERBOSE
SELECT mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=417.18..417.26 rows=34 width=24)
   Output: (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1))
   Sort Key: (mysql_timestamp((time_tbl.c2)::timestamp without time zone)), (mysql_timestamp(time_tbl.c3)), (mysql_timestamp(time_tbl.c3, time_tbl.c1))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..416.31 rows=34 width=24)
         Output: (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timestamp(`c2`), timestamp(`c3`), timestamp(`c3`, `c1`), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_timestamp(c2), public.mysql_timestamp(c3), public.mysql_timestamp(c3, c1), id FROM public.time_tbl1mysql
(13 rows)

-- select mysql_timestamp (stub function, not pushdown constraints, result)
--Testcase 2571:
SELECT mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3;
   mysql_timestamp   |   mysql_timestamp   |   mysql_timestamp   
---------------------+---------------------+---------------------
 2021-01-01 00:00:00 | 2021-01-04 23:12:13 | 2021-01-05 22:24:26
(1 row)

-- select mysql_timestamp (stub function, pushdown constraints, explain)
--Testcase 2572:
EXPLAIN VERBOSE
SELECT mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5984.44..6001.42 rows=6792 width=24)
   Output: (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1))
   Sort Key: (mysql_timestamp((time_tbl.c2)::timestamp without time zone)), (mysql_timestamp(time_tbl.c3)), (mysql_timestamp(time_tbl.c3, time_tbl.c1))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5552.14 rows=6792 width=24)
         Output: (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timestamp(`c2`), timestamp(`c3`), timestamp(`c3`, `c1`) FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_timestamp(c2), public.mysql_timestamp(c3), public.mysql_timestamp(c3, c1) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select mysql_timestamp (stub function, pushdown constraints, result)
--Testcase 2573:
SELECT mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3;
   mysql_timestamp   |   mysql_timestamp   |   mysql_timestamp   
---------------------+---------------------+---------------------
 2021-01-01 00:00:00 | 2021-01-04 23:12:13 | 2021-01-05 22:24:26
 2021-01-02 00:00:00 | 2021-01-03 12:10:30 | 2021-01-04 00:21:00
 2021-01-10 00:00:00 | 2021-01-05 11:12:12 | 2021-01-05 22:24:24
 2021-01-15 00:00:00 | 2021-01-06 16:00:00 | 2021-01-07 08:00:00
 2021-01-29 00:00:00 | 2021-01-07 00:59:59 | 2021-01-07 01:59:58
(5 rows)

-- select mysql_timestamp (stub function, mysql_timestamp in constraints, explain)
--Testcase 2574:
EXPLAIN VERBOSE
SELECT mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl WHERE mysql_timestamp(c3, '23:11:59.123456'::time) < '2080-01-01 12:00:00'::timestamp ORDER BY 1,2,3;
                                                                                                                                     QUERY PLAN                                                                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3896.95..3902.64 rows=2276 width=24)
   Output: (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1))
   Sort Key: (mysql_timestamp((time_tbl.c2)::timestamp without time zone)), (mysql_timestamp(time_tbl.c3)), (mysql_timestamp(time_tbl.c3, time_tbl.c1))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3770.03 rows=2276 width=24)
         Output: (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timestamp(`c2`), timestamp(`c3`), timestamp(`c3`, `c1`) FROM `test`.`time_tbl2` WHERE ((timestamp(`c3`, '23:11:59.123456') < '2080-01-01 12:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_timestamp(c2), public.mysql_timestamp(c3), public.mysql_timestamp(c3, c1) FROM public.time_tbl1mysql WHERE ((public.mysql_timestamp(c3, '23:11:59.123456'::time without time zone) < '2080-01-01 12:00:00'::timestamp without time zone))
(12 rows)

-- select mysql_timestamp (stub function, mysql_timestamp in constraints, result)
--Testcase 2575:
SELECT mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl WHERE mysql_timestamp(c3, '23:11:59.123456'::time) < '2080-01-01 12:00:00'::timestamp ORDER BY 1,2,3;
   mysql_timestamp   |   mysql_timestamp   |   mysql_timestamp   
---------------------+---------------------+---------------------
 2021-01-01 00:00:00 | 2021-01-04 23:12:13 | 2021-01-05 22:24:26
 2021-01-02 00:00:00 | 2021-01-03 12:10:30 | 2021-01-04 00:21:00
 2021-01-10 00:00:00 | 2021-01-05 11:12:12 | 2021-01-05 22:24:24
 2021-01-15 00:00:00 | 2021-01-06 16:00:00 | 2021-01-07 08:00:00
 2021-01-29 00:00:00 | 2021-01-07 00:59:59 | 2021-01-07 01:59:58
(5 rows)

-- select mysql_timestamp with agg (pushdown, explain)
--Testcase 2576:
EXPLAIN VERBOSE
SELECT max(c3), mysql_timestamp(max(c2)), mysql_timestamp(max(c3)), mysql_timestamp(max(c3), '11:12:12.112233'::time) FROM time_tbl;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.91 rows=1 width=32)
   Output: (max(c3)), mysql_timestamp(((max(c2)))::timestamp without time zone), mysql_timestamp((max(c3))), mysql_timestamp((max(c3)), '11:12:12.112233'::time without time zone)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`), max(`c2`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3), max(c2) FROM public.time_tbl1mysql
(11 rows)

-- select mysql_timestamp as nest function with agg (pushdown, result)
--Testcase 2577:
SELECT max(c3), mysql_timestamp(max(c2)), mysql_timestamp(max(c3)), mysql_timestamp(max(c3), '11:12:12.112233'::time) FROM time_tbl;
ERROR:  stub mysql_timestamp(timestamp) is called
CONTEXT:  PL/pgSQL function mysql_timestamp(timestamp without time zone) line 3 at RAISE
-- select mysql_timestamp with non pushdown func and explicit constant (explain)
--Testcase 2578:
EXPLAIN VERBOSE
SELECT mysql_timestamp(max(c2)), mysql_timestamp(max(c3)), mysql_timestamp(max(c3), '11:12:12.112233'::time), pi(), 4.1 FROM time_tbl ORDER BY 1,2,3;
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=159.92..159.93 rows=1 width=64)
   Output: (mysql_timestamp(((max(c2)))::timestamp without time zone)), (mysql_timestamp((max(c3)))), (mysql_timestamp((max(c3)), '11:12:12.112233'::time without time zone)), '3.141592653589793'::double precision, 4.1
   Sort Key: (mysql_timestamp(((max(time_tbl.c2)))::timestamp without time zone)), (mysql_timestamp((max(time_tbl.c3)))), (mysql_timestamp((max(time_tbl.c3)), '11:12:12.112233'::time without time zone))
   ->  Foreign Scan  (cost=110.00..159.91 rows=1 width=64)
         Output: mysql_timestamp(((max(c2)))::timestamp without time zone), mysql_timestamp((max(c3))), mysql_timestamp((max(c3)), '11:12:12.112233'::time without time zone), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT max(`c2`), max(`c3`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT max(c2), max(c3) FROM public.time_tbl1mysql
(16 rows)

-- select mysql_timestamp with non pushdown func and explicit constant (result)
--Testcase 2579:
SELECT mysql_timestamp(max(c2)), mysql_timestamp(max(c3)), mysql_timestamp(max(c3), '11:12:12.112233'::time), pi(), 4.1 FROM time_tbl ORDER BY 1,2,3;
ERROR:  stub mysql_timestamp(timestamp) is called
CONTEXT:  PL/pgSQL function mysql_timestamp(timestamp without time zone) line 3 at RAISE
-- select mysql_timestamp with order by (explain)
--Testcase 2580:
EXPLAIN VERBOSE
SELECT id, mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl order by id,mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1);
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5996.05..6013.12 rows=6826 width=28)
   Output: id, (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1))
   Sort Key: time_tbl.id, (mysql_timestamp((time_tbl.c2)::timestamp without time zone)), (mysql_timestamp(time_tbl.c3)), (mysql_timestamp(time_tbl.c3, time_tbl.c1))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=28)
         Output: id, (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, timestamp(`c2`), timestamp(`c3`), timestamp(`c3`, `c1`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.mysql_timestamp(c2), public.mysql_timestamp(c3), public.mysql_timestamp(c3, c1) FROM public.time_tbl1mysql
(12 rows)

-- select mysql_timestamp with order by (result)
--Testcase 2581:
SELECT id, mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl order by id,mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1);
 id |   mysql_timestamp   |   mysql_timestamp   |   mysql_timestamp   
----+---------------------+---------------------+---------------------
  0 | 2021-01-02 00:00:00 | 2021-01-03 12:10:30 | 2021-01-04 00:21:00
  1 | 2021-01-01 00:00:00 | 2021-01-04 23:12:13 | 2021-01-05 22:24:26
  2 | 2021-01-10 00:00:00 | 2021-01-05 11:12:12 | 2021-01-05 22:24:24
  3 | 2021-01-15 00:00:00 | 2021-01-06 16:00:00 | 2021-01-07 08:00:00
  4 | 2021-01-29 00:00:00 | 2021-01-07 00:59:59 | 2021-01-07 01:59:58
(5 rows)

-- select mysql_timestamp with order by index (result)
--Testcase 2582:
SELECT id, mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl order by 4,3,2,1;
 id |   mysql_timestamp   |   mysql_timestamp   |   mysql_timestamp   
----+---------------------+---------------------+---------------------
  0 | 2021-01-02 00:00:00 | 2021-01-03 12:10:30 | 2021-01-04 00:21:00
  2 | 2021-01-10 00:00:00 | 2021-01-05 11:12:12 | 2021-01-05 22:24:24
  1 | 2021-01-01 00:00:00 | 2021-01-04 23:12:13 | 2021-01-05 22:24:26
  4 | 2021-01-29 00:00:00 | 2021-01-07 00:59:59 | 2021-01-07 01:59:58
  3 | 2021-01-15 00:00:00 | 2021-01-06 16:00:00 | 2021-01-07 08:00:00
(5 rows)

-- select mysql_timestamp with order by index (result)
--Testcase 2583:
SELECT id, mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl order by 1,2,3,4;
 id |   mysql_timestamp   |   mysql_timestamp   |   mysql_timestamp   
----+---------------------+---------------------+---------------------
  0 | 2021-01-02 00:00:00 | 2021-01-03 12:10:30 | 2021-01-04 00:21:00
  1 | 2021-01-01 00:00:00 | 2021-01-04 23:12:13 | 2021-01-05 22:24:26
  2 | 2021-01-10 00:00:00 | 2021-01-05 11:12:12 | 2021-01-05 22:24:24
  3 | 2021-01-15 00:00:00 | 2021-01-06 16:00:00 | 2021-01-07 08:00:00
  4 | 2021-01-29 00:00:00 | 2021-01-07 00:59:59 | 2021-01-07 01:59:58
(5 rows)

-- select mysql_timestamp with group by (explain)
--Testcase 2584:
EXPLAIN VERBOSE
SELECT max(c3), mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl group by mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) ORDER BY 1,2,3,4;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5789.75..5790.25 rows=200 width=32)
   Output: (max(c3)), (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1))
   Sort Key: (max(time_tbl.c3)), (mysql_timestamp((time_tbl.c2)::timestamp without time zone)), (mysql_timestamp(time_tbl.c3)), (mysql_timestamp(time_tbl.c3, time_tbl.c1))
   ->  HashAggregate  (cost=5629.60..5782.10 rows=200 width=32)
         Output: max(c3), (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1))
         Group Key: (mysql_timestamp((time_tbl.c2)::timestamp without time zone)), (mysql_timestamp(time_tbl.c3)), (mysql_timestamp(time_tbl.c3, time_tbl.c1))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=32)
               Output: (mysql_timestamp((c2)::timestamp without time zone)), (mysql_timestamp(c3)), (mysql_timestamp(c3, c1)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT timestamp(`c2`), timestamp(`c3`), timestamp(`c3`, `c1`), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_timestamp(c2), public.mysql_timestamp(c3), public.mysql_timestamp(c3, c1), c3 FROM public.time_tbl1mysql
(15 rows)

-- select mysql_timestamp with group by (result)
--Testcase 2585:
SELECT max(c3), mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl group by mysql_timestamp('2080-01-01 12:00:00'::date), c1, c2, c3 ORDER BY 1,2,3,4;
ERROR:  stub mysql_timestamp(timestamp) is called
CONTEXT:  PL/pgSQL function mysql_timestamp(timestamp without time zone) line 3 at RAISE
-- select mysql_timestamp with group by index (result)
--Testcase 2586:
SELECT id, mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl group by 4,3,2,1 ORDER BY 1,2,3,4;
 id |   mysql_timestamp   |   mysql_timestamp   |   mysql_timestamp   
----+---------------------+---------------------+---------------------
  0 | 2021-01-02 00:00:00 | 2021-01-03 12:10:30 | 2021-01-04 00:21:00
  1 | 2021-01-01 00:00:00 | 2021-01-04 23:12:13 | 2021-01-05 22:24:26
  2 | 2021-01-10 00:00:00 | 2021-01-05 11:12:12 | 2021-01-05 22:24:24
  3 | 2021-01-15 00:00:00 | 2021-01-06 16:00:00 | 2021-01-07 08:00:00
  4 | 2021-01-29 00:00:00 | 2021-01-07 00:59:59 | 2021-01-07 01:59:58
(5 rows)

-- select mysql_timestamp with group by index (result)
--Testcase 2587:
SELECT id, mysql_timestamp(c2), mysql_timestamp(c3), mysql_timestamp(c3, c1) FROM time_tbl group by 1,2,3,4 ORDER BY 1,2,3,4;
 id |   mysql_timestamp   |   mysql_timestamp   |   mysql_timestamp   
----+---------------------+---------------------+---------------------
  0 | 2021-01-02 00:00:00 | 2021-01-03 12:10:30 | 2021-01-04 00:21:00
  1 | 2021-01-01 00:00:00 | 2021-01-04 23:12:13 | 2021-01-05 22:24:26
  2 | 2021-01-10 00:00:00 | 2021-01-05 11:12:12 | 2021-01-05 22:24:24
  3 | 2021-01-15 00:00:00 | 2021-01-06 16:00:00 | 2021-01-07 08:00:00
  4 | 2021-01-29 00:00:00 | 2021-01-07 00:59:59 | 2021-01-07 01:59:58
(5 rows)

-- select mysql_timestamp with group by index having (result)
--Testcase 2588:
SELECT id, mysql_timestamp(c2), c2 FROM time_tbl group by 3, 2, 1 HAVING mysql_timestamp(c2) > '2019-01-01'::date ORDER BY 1,2,3;
 id |   mysql_timestamp   |     c2     
----+---------------------+------------
  0 | 2021-01-02 00:00:00 | 2021-01-02
  1 | 2021-01-01 00:00:00 | 2021-01-01
  2 | 2021-01-10 00:00:00 | 2021-01-10
  3 | 2021-01-15 00:00:00 | 2021-01-15
  4 | 2021-01-29 00:00:00 | 2021-01-29
(5 rows)

-- select mysql_timestamp with group by index having (result)
--Testcase 2589:
SELECT id, mysql_timestamp(c2), c2 FROM time_tbl group by 1, 2, 3 HAVING mysql_timestamp(c2) > '2019-01-01'::date ORDER BY 1,2,3;
 id |   mysql_timestamp   |     c2     
----+---------------------+------------
  0 | 2021-01-02 00:00:00 | 2021-01-02
  1 | 2021-01-01 00:00:00 | 2021-01-01
  2 | 2021-01-10 00:00:00 | 2021-01-10
  3 | 2021-01-15 00:00:00 | 2021-01-15
  4 | 2021-01-29 00:00:00 | 2021-01-29
(5 rows)

-- select mysql_timestamp and as
--Testcase 2590:
SELECT mysql_timestamp(c2) as mysql_timestamp1, mysql_timestamp(c3) as mysql_timestamp2,  mysql_timestamp(c3, c1) as mysql_timestamp3 FROM time_tbl ORDER BY 1,2,3;
  mysql_timestamp1   |  mysql_timestamp2   |  mysql_timestamp3   
---------------------+---------------------+---------------------
 2021-01-01 00:00:00 | 2021-01-04 23:12:13 | 2021-01-05 22:24:26
 2021-01-02 00:00:00 | 2021-01-03 12:10:30 | 2021-01-04 00:21:00
 2021-01-10 00:00:00 | 2021-01-05 11:12:12 | 2021-01-05 22:24:24
 2021-01-15 00:00:00 | 2021-01-06 16:00:00 | 2021-01-07 08:00:00
 2021-01-29 00:00:00 | 2021-01-07 00:59:59 | 2021-01-07 01:59:58
(5 rows)

-- TIMEDIFF()
-- select timediff (stub function, explain)
--Testcase 2591:
EXPLAIN VERBOSE
SELECT timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=32)
   Output: (timediff(c1, '12:12:12.051555'::time without time zone)), (timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (timediff(time_tbl.c1, '12:12:12.051555'::time without time zone)), (timediff(time_tbl.c3, '1997-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=32)
         Output: (timediff(c1, '12:12:12.051555'::time without time zone)), (timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timediff(`c1`, '12:12:12.051555'), timediff(`c3`, '1997-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.timediff(c1, '12:12:12.051555'::time without time zone), public.timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select timediff (stub function, result)
--Testcase 2592:
SELECT timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2;
               timediff                |          timediff           
---------------------------------------+-----------------------------
 @ 11 hours 12 mins 13.051555 secs ago | @ 838 hours 59 mins 59 secs
 @ 1 hour 0.051555 secs ago            | @ 838 hours 59 mins 59 secs
 @ 1 min 42.051555 secs ago            | @ 838 hours 59 mins 59 secs
 @ 3 hours 47 mins 47.948445 secs      | @ 838 hours 59 mins 59 secs
 @ 11 hours 0.948445 secs              | @ 838 hours 59 mins 59 secs
(5 rows)

-- select timediff (stub function, not pushdown constraints, explain)
--Testcase 2593:
EXPLAIN VERBOSE
SELECT timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=408.59..408.68 rows=34 width=32)
   Output: (timediff(c1, '12:12:12.051555'::time without time zone)), (timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (timediff(time_tbl.c1, '12:12:12.051555'::time without time zone)), (timediff(time_tbl.c3, '1997-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..407.73 rows=34 width=32)
         Output: (timediff(c1, '12:12:12.051555'::time without time zone)), (timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timediff(`c1`, '12:12:12.051555'), timediff(`c3`, '1997-01-01 12:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.timediff(c1, '12:12:12.051555'::time without time zone), public.timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select timediff (stub function, not pushdown constraints, result)
--Testcase 2594:
SELECT timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
         timediff         |          timediff           
--------------------------+-----------------------------
 @ 11 hours 0.948445 secs | @ 838 hours 59 mins 59 secs
(1 row)

-- select timediff (stub function, pushdown constraints, explain)
--Testcase 2595:
EXPLAIN VERBOSE
SELECT timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4269.46..4286.44 rows=6792 width=32)
   Output: (timediff(c1, '12:12:12.051555'::time without time zone)), (timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (timediff(time_tbl.c1, '12:12:12.051555'::time without time zone)), (timediff(time_tbl.c3, '1997-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.16 rows=6792 width=32)
         Output: (timediff(c1, '12:12:12.051555'::time without time zone)), (timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timediff(`c1`, '12:12:12.051555'), timediff(`c3`, '1997-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.timediff(c1, '12:12:12.051555'::time without time zone), public.timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select timediff (stub function, pushdown constraints, result)
--Testcase 2596:
SELECT timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
               timediff                |          timediff           
---------------------------------------+-----------------------------
 @ 11 hours 12 mins 13.051555 secs ago | @ 838 hours 59 mins 59 secs
 @ 1 hour 0.051555 secs ago            | @ 838 hours 59 mins 59 secs
 @ 1 min 42.051555 secs ago            | @ 838 hours 59 mins 59 secs
 @ 3 hours 47 mins 47.948445 secs      | @ 838 hours 59 mins 59 secs
 @ 11 hours 0.948445 secs              | @ 838 hours 59 mins 59 secs
(5 rows)

-- select timediff (stub function, timediff in constraints, explain)
--Testcase 2597:
EXPLAIN VERBOSE
SELECT timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl WHERE timediff(c1, '23:11:59.123456'::time) > '1 day 01:00:00'::interval ORDER BY 1,2;
                                                                                                                                              QUERY PLAN                                                                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3322.26..3327.95 rows=2276 width=32)
   Output: (timediff(c1, '12:12:12.051555'::time without time zone)), (timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (timediff(time_tbl.c1, '12:12:12.051555'::time without time zone)), (timediff(time_tbl.c3, '1997-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3195.35 rows=2276 width=32)
         Output: (timediff(c1, '12:12:12.051555'::time without time zone)), (timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT timediff(`c1`, '12:12:12.051555'), timediff(`c3`, '1997-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((timediff(`c1`, '23:11:59.123456') > '1 1:0:0.0'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.timediff(c1, '12:12:12.051555'::time without time zone), public.timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.timediff(c1, '23:11:59.123456'::time without time zone) > '1 day 01:00:00'::interval))
(12 rows)

-- select timediff (stub function, timediff in constraints, result)
--Testcase 2598:
SELECT timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl WHERE timediff(c1, '23:11:59.123456'::time) > '1 day 01:00:00'::interval ORDER BY 1,2;
 timediff | timediff 
----------+----------
(0 rows)

-- select timediff with agg (pushdown, explain)
--Testcase 2599:
EXPLAIN VERBOSE
SELECT max(c3), timediff('12:12:12.051555'::time, max(c1)), timediff('1997-01-01 12:00:00'::timestamp, max(c3)) FROM time_tbl;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.66 rows=1 width=40)
   Output: (max(c3)), timediff('12:12:12.051555'::time without time zone, (max(c1))), timediff('1997-01-01 12:00:00'::timestamp without time zone, (max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`), max(`c1`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3), max(c1) FROM public.time_tbl1mysql
(11 rows)

-- select timediff as nest function with agg (pushdown, result)
--Testcase 2600:
SELECT max(c3), timediff('12:12:12.051555'::time, max(c1)), timediff('1997-01-01 12:00:00'::timestamp, max(c3)) FROM time_tbl;
ERROR:  stub timediff(time, time) is called
CONTEXT:  PL/pgSQL function timediff(time without time zone,time without time zone) line 3 at RAISE
-- select timediff with non pushdown func and explicit constant (explain)
--Testcase 2601:
EXPLAIN VERBOSE
SELECT timediff('12:12:12.051555'::time, max(c1)), timediff('1997-01-01 12:00:00'::timestamp, max(c3)), pi(), 4.1 FROM time_tbl;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.66 rows=1 width=72)
   Output: timediff('12:12:12.051555'::time without time zone, (max(c1))), timediff('1997-01-01 12:00:00'::timestamp without time zone, (max(c3))), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c1`), max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c1), max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select timediff with non pushdown func and explicit constant (result)
--Testcase 2602:
SELECT timediff('12:12:12.051555'::time, max(c1)), timediff('1997-01-01 12:00:00'::timestamp, max(c3)), pi(), 4.1 FROM time_tbl;
ERROR:  stub timediff(time, time) is called
CONTEXT:  PL/pgSQL function timediff(time without time zone,time without time zone) line 3 at RAISE
-- select timediff with order by (explain)
--Testcase 2603:
EXPLAIN VERBOSE
SELECT id, timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl order by id,timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp);
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=36)
   Output: id, (timediff(c1, '12:12:12.051555'::time without time zone)), (timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone))
   Sort Key: time_tbl.id, (timediff(time_tbl.c1, '12:12:12.051555'::time without time zone)), (timediff(time_tbl.c3, '1997-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=36)
         Output: id, (timediff(c1, '12:12:12.051555'::time without time zone)), (timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, timediff(`c1`, '12:12:12.051555'), timediff(`c3`, '1997-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.timediff(c1, '12:12:12.051555'::time without time zone), public.timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select timediff with order by (result)
--Testcase 2604:
SELECT id, timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl order by id,timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp);
 id |               timediff                |          timediff           
----+---------------------------------------+-----------------------------
  0 | @ 1 min 42.051555 secs ago            | @ 838 hours 59 mins 59 secs
  1 | @ 11 hours 0.948445 secs              | @ 838 hours 59 mins 59 secs
  2 | @ 1 hour 0.051555 secs ago            | @ 838 hours 59 mins 59 secs
  3 | @ 3 hours 47 mins 47.948445 secs      | @ 838 hours 59 mins 59 secs
  4 | @ 11 hours 12 mins 13.051555 secs ago | @ 838 hours 59 mins 59 secs
(5 rows)

-- select timediff with order by index (result)
--Testcase 2605:
SELECT id, timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl order by 3,2,1;
 id |               timediff                |          timediff           
----+---------------------------------------+-----------------------------
  4 | @ 11 hours 12 mins 13.051555 secs ago | @ 838 hours 59 mins 59 secs
  2 | @ 1 hour 0.051555 secs ago            | @ 838 hours 59 mins 59 secs
  0 | @ 1 min 42.051555 secs ago            | @ 838 hours 59 mins 59 secs
  3 | @ 3 hours 47 mins 47.948445 secs      | @ 838 hours 59 mins 59 secs
  1 | @ 11 hours 0.948445 secs              | @ 838 hours 59 mins 59 secs
(5 rows)

-- select timediff with order by index (result)
--Testcase 2606:
SELECT id, timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl order by 1,2,3;
 id |               timediff                |          timediff           
----+---------------------------------------+-----------------------------
  0 | @ 1 min 42.051555 secs ago            | @ 838 hours 59 mins 59 secs
  1 | @ 11 hours 0.948445 secs              | @ 838 hours 59 mins 59 secs
  2 | @ 1 hour 0.051555 secs ago            | @ 838 hours 59 mins 59 secs
  3 | @ 3 hours 47 mins 47.948445 secs      | @ 838 hours 59 mins 59 secs
  4 | @ 11 hours 12 mins 13.051555 secs ago | @ 838 hours 59 mins 59 secs
(5 rows)

-- select timediff with group by (explain)
--Testcase 2607:
EXPLAIN VERBOSE
SELECT max(c3), timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl group by timediff('2080-01-01 12:00:00'::timestamp, c3), c1, c3 ORDER BY 1,2,3;
                                                                                                           QUERY PLAN                                                                                                           
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2359.18..2359.68 rows=200 width=72)
   Output: (max(c3)), (timediff(c1, '12:12:12.051555'::time without time zone)), (timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone)), (timediff('2080-01-01 12:00:00'::timestamp without time zone, c3)), c1, c3
   Sort Key: (max(time_tbl.c3)), (timediff(time_tbl.c1, '12:12:12.051555'::time without time zone)), (timediff(time_tbl.c3, '1997-01-01 12:00:00'::timestamp without time zone))
   ->  HashAggregate  (cost=2199.54..2351.54 rows=200 width=72)
         Output: max(c3), timediff(c1, '12:12:12.051555'::time without time zone), timediff(c3, '1997-01-01 12:00:00'::timestamp without time zone), (timediff('2080-01-01 12:00:00'::timestamp without time zone, c3)), c1, c3
         Group Key: (timediff('2080-01-01 12:00:00'::timestamp without time zone, time_tbl.c3)), time_tbl.c1, time_tbl.c3
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=32)
               Output: (timediff('2080-01-01 12:00:00'::timestamp without time zone, c3)), c1, c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT timediff('2080-01-01 12:00:00', `c3`), `c1`, `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.timediff('2080-01-01 12:00:00'::timestamp without time zone, c3), c1, c3 FROM public.time_tbl1mysql
(15 rows)

-- select timediff with group by (result)
--Testcase 2608:
SELECT max(c3), timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl group by timediff('2080-01-01 12:00:00'::timestamp, c3), c1, c3 ORDER BY 1,2,3;
ERROR:  stub timediff(time, time) is called
CONTEXT:  PL/pgSQL function timediff(time without time zone,time without time zone) line 3 at RAISE
-- select timediff with group by index (result)
--Testcase 2609:
SELECT id, timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl group by 3,2,1 ORDER BY 1,2,3;
 id |               timediff                |          timediff           
----+---------------------------------------+-----------------------------
  0 | @ 1 min 42.051555 secs ago            | @ 838 hours 59 mins 59 secs
  1 | @ 11 hours 0.948445 secs              | @ 838 hours 59 mins 59 secs
  2 | @ 1 hour 0.051555 secs ago            | @ 838 hours 59 mins 59 secs
  3 | @ 3 hours 47 mins 47.948445 secs      | @ 838 hours 59 mins 59 secs
  4 | @ 11 hours 12 mins 13.051555 secs ago | @ 838 hours 59 mins 59 secs
(5 rows)

-- select timediff with group by index (result)
--Testcase 2610:
SELECT id, timediff(c1, '12:12:12.051555'::time), timediff(c3, '1997-01-01 12:00:00'::timestamp) FROM time_tbl group by 1,2,3 ORDER BY 1,2,3;
 id |               timediff                |          timediff           
----+---------------------------------------+-----------------------------
  0 | @ 1 min 42.051555 secs ago            | @ 838 hours 59 mins 59 secs
  1 | @ 11 hours 0.948445 secs              | @ 838 hours 59 mins 59 secs
  2 | @ 1 hour 0.051555 secs ago            | @ 838 hours 59 mins 59 secs
  3 | @ 3 hours 47 mins 47.948445 secs      | @ 838 hours 59 mins 59 secs
  4 | @ 11 hours 12 mins 13.051555 secs ago | @ 838 hours 59 mins 59 secs
(5 rows)

-- select timediff with group by index having (result)
--Testcase 2611:
SELECT id, timediff(c1, '12:12:12.051555'::time), c1 FROM time_tbl group by 3, 2, 1 HAVING timediff(c1, '12:12:12.051555'::time) < '1 days'::interval ORDER BY 1,2,3;
 id |               timediff                |    c1    
----+---------------------------------------+----------
  0 | @ 1 min 42.051555 secs ago            | 12:10:30
  1 | @ 11 hours 0.948445 secs              | 23:12:13
  2 | @ 1 hour 0.051555 secs ago            | 11:12:12
  3 | @ 3 hours 47 mins 47.948445 secs      | 16:00:00
  4 | @ 11 hours 12 mins 13.051555 secs ago | 00:59:59
(5 rows)

-- select timediff with group by index having (result)
--Testcase 2612:
SELECT id, timediff(c1, '12:12:12.051555'::time), c1 FROM time_tbl group by 1, 2, 3 HAVING timediff(c1, '12:12:12.051555'::time) < '1 days'::interval ORDER BY 1,2,3;
 id |               timediff                |    c1    
----+---------------------------------------+----------
  0 | @ 1 min 42.051555 secs ago            | 12:10:30
  1 | @ 11 hours 0.948445 secs              | 23:12:13
  2 | @ 1 hour 0.051555 secs ago            | 11:12:12
  3 | @ 3 hours 47 mins 47.948445 secs      | 16:00:00
  4 | @ 11 hours 12 mins 13.051555 secs ago | 00:59:59
(5 rows)

-- select timediff and as
--Testcase 2613:
SELECT timediff(c1, '12:12:12.051555'::time) as timediff1, timediff(c3, '1997-01-01 12:00:00'::timestamp) as timediff2 FROM time_tbl ORDER BY 1,2;
               timediff1               |          timediff2          
---------------------------------------+-----------------------------
 @ 11 hours 12 mins 13.051555 secs ago | @ 838 hours 59 mins 59 secs
 @ 1 hour 0.051555 secs ago            | @ 838 hours 59 mins 59 secs
 @ 1 min 42.051555 secs ago            | @ 838 hours 59 mins 59 secs
 @ 3 hours 47 mins 47.948445 secs      | @ 838 hours 59 mins 59 secs
 @ 11 hours 0.948445 secs              | @ 838 hours 59 mins 59 secs
(5 rows)

-- TIME_TO_SEC()
-- select time_to_sec (stub function, explain)
--Testcase 2614:
EXPLAIN VERBOSE
SELECT time_to_sec(c1), time_to_sec(mysql_time(c3)), time_to_sec('01:02:03.040505'::time) FROM time_tbl ORDER BY 1,2,3;
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7685.49..7702.55 rows=6826 width=12)
   Output: (time_to_sec(c1)), (time_to_sec(mysql_time(c3))), (time_to_sec('01:02:03.040505'::time without time zone))
   Sort Key: (time_to_sec(time_tbl.c1)), (time_to_sec(mysql_time(time_tbl.c3))), (time_to_sec('01:02:03.040505'::time without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7250.78 rows=6826 width=12)
         Output: (time_to_sec(c1)), (time_to_sec(mysql_time(c3))), (time_to_sec('01:02:03.040505'::time without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time_to_sec(`c1`), time_to_sec(time(`c3`)), time_to_sec('01:02:03.040505') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.time_to_sec(c1), public.time_to_sec(public.mysql_time(c3)), public.time_to_sec('01:02:03.040505'::time without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select time_to_sec (stub function, result)
--Testcase 2615:
SELECT time_to_sec(c1), time_to_sec(mysql_time(c3)), time_to_sec('01:02:03.040505'::time) FROM time_tbl ORDER BY 1,2,3;
 time_to_sec | time_to_sec | time_to_sec 
-------------+-------------+-------------
        3599 |        3599 |        3723
       40332 |       40332 |        3723
       43830 |       43830 |        3723
       57600 |       57600 |        3723
       83533 |       83533 |        3723
(5 rows)

-- select time_to_sec (stub function, not pushdown constraints, explain)
--Testcase 2616:
EXPLAIN VERBOSE
SELECT time_to_sec(c1), time_to_sec(mysql_time(c3)), time_to_sec('01:02:03.040505'::time) FROM time_tbl WHERE to_hex(id) = '2' ORDER BY 1,2,3;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=425.59..425.68 rows=34 width=12)
   Output: (time_to_sec(c1)), (time_to_sec(mysql_time(c3))), (time_to_sec('01:02:03.040505'::time without time zone))
   Sort Key: (time_to_sec(time_tbl.c1)), (time_to_sec(mysql_time(time_tbl.c3))), (time_to_sec('01:02:03.040505'::time without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..424.73 rows=34 width=12)
         Output: (time_to_sec(c1)), (time_to_sec(mysql_time(c3))), (time_to_sec('01:02:03.040505'::time without time zone))
         Filter: (to_hex(time_tbl.id) = '2'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time_to_sec(`c1`), time_to_sec(time(`c3`)), time_to_sec('01:02:03.040505'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.time_to_sec(c1), public.time_to_sec(public.mysql_time(c3)), public.time_to_sec('01:02:03.040505'::time without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select time_to_sec (stub function, not pushdown constraints, result)
--Testcase 2617:
SELECT time_to_sec(c1), time_to_sec(mysql_time(c3)), time_to_sec('01:02:03.040505'::time) FROM time_tbl WHERE to_hex(id) = '2' ORDER BY 1,2,3;
 time_to_sec | time_to_sec | time_to_sec 
-------------+-------------+-------------
       40332 |       40332 |        3723
(1 row)

-- select time_to_sec (stub function, pushdown constraints, explain)
--Testcase 2618:
EXPLAIN VERBOSE
SELECT time_to_sec(c1), time_to_sec(mysql_time(c3)), time_to_sec('01:02:03.040505'::time) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3;
                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7665.46..7682.44 rows=6792 width=12)
   Output: (time_to_sec(c1)), (time_to_sec(mysql_time(c3))), (time_to_sec('01:02:03.040505'::time without time zone))
   Sort Key: (time_to_sec(time_tbl.c1)), (time_to_sec(mysql_time(time_tbl.c3))), (time_to_sec('01:02:03.040505'::time without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7233.16 rows=6792 width=12)
         Output: (time_to_sec(c1)), (time_to_sec(mysql_time(c3))), (time_to_sec('01:02:03.040505'::time without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time_to_sec(`c1`), time_to_sec(time(`c3`)), time_to_sec('01:02:03.040505') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.time_to_sec(c1), public.time_to_sec(public.mysql_time(c3)), public.time_to_sec('01:02:03.040505'::time without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select time_to_sec (stub function, pushdown constraints, result)
--Testcase 2619:
SELECT time_to_sec(c1), time_to_sec(mysql_time(c3)), time_to_sec('01:02:03.040505'::time) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3;
 time_to_sec | time_to_sec | time_to_sec 
-------------+-------------+-------------
        3599 |        3599 |        3723
       40332 |       40332 |        3723
       43830 |       43830 |        3723
       57600 |       57600 |        3723
       83533 |       83533 |        3723
(5 rows)

-- select time_to_sec (stub function, time_to_sec in constraints, explain)
--Testcase 2620:
EXPLAIN VERBOSE
SELECT time_to_sec(c1), time_to_sec(mysql_time(c3)), time_to_sec('01:02:03.040505'::time) FROM time_tbl WHERE time_to_sec(c1) != 12345 ORDER BY 1,2,3;
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9371.96..9388.94 rows=6792 width=12)
   Output: (time_to_sec(c1)), (time_to_sec(mysql_time(c3))), (time_to_sec('01:02:03.040505'::time without time zone))
   Sort Key: (time_to_sec(time_tbl.c1)), (time_to_sec(mysql_time(time_tbl.c3))), (time_to_sec('01:02:03.040505'::time without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8939.67 rows=6792 width=12)
         Output: (time_to_sec(c1)), (time_to_sec(mysql_time(c3))), (time_to_sec('01:02:03.040505'::time without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time_to_sec(`c1`), time_to_sec(time(`c3`)), time_to_sec('01:02:03.040505') FROM `test`.`time_tbl2` WHERE ((time_to_sec(`c1`) <> 12345))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.time_to_sec(c1), public.time_to_sec(public.mysql_time(c3)), public.time_to_sec('01:02:03.040505'::time without time zone) FROM public.time_tbl1mysql WHERE ((public.time_to_sec(c1) <> 12345))
(12 rows)

-- select time_to_sec (stub function, time_to_sec in constraints, result)
--Testcase 2621:
SELECT time_to_sec(c1), time_to_sec(mysql_time(c3)), time_to_sec('01:02:03.040505'::time) FROM time_tbl WHERE time_to_sec(c1) != 12345 ORDER BY 1,2,3;
 time_to_sec | time_to_sec | time_to_sec 
-------------+-------------+-------------
        3599 |        3599 |        3723
       40332 |       40332 |        3723
       43830 |       43830 |        3723
       57600 |       57600 |        3723
       83533 |       83533 |        3723
(5 rows)

-- select time_to_sec (stub function, time_to_sec in constraints, explain)
--Testcase 2622:
EXPLAIN VERBOSE
SELECT time_to_sec(c1), time_to_sec(mysql_time(c3)), time_to_sec('01:02:03.040505'::time) FROM time_tbl WHERE time_to_sec('06:05:04.030201'::time) > 1 ORDER BY 1,2,3;
                                                                                                                              QUERY PLAN                                                                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4460.26..4465.95 rows=2276 width=12)
   Output: (time_to_sec(c1)), (time_to_sec(mysql_time(c3))), (time_to_sec('01:02:03.040505'::time without time zone))
   Sort Key: (time_to_sec(time_tbl.c1)), (time_to_sec(mysql_time(time_tbl.c3))), (time_to_sec('01:02:03.040505'::time without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4333.35 rows=2276 width=12)
         Output: (time_to_sec(c1)), (time_to_sec(mysql_time(c3))), (time_to_sec('01:02:03.040505'::time without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time_to_sec(`c1`), time_to_sec(time(`c3`)), time_to_sec('01:02:03.040505') FROM `test`.`time_tbl2` WHERE ((time_to_sec('06:05:04.030201') > 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.time_to_sec(c1), public.time_to_sec(public.mysql_time(c3)), public.time_to_sec('01:02:03.040505'::time without time zone) FROM public.time_tbl1mysql WHERE ((public.time_to_sec('06:05:04.030201'::time without time zone) > 1))
(12 rows)

-- select time_to_sec (stub function, time_to_sec in constraints, result)
--Testcase 2623:
SELECT time_to_sec(c1), time_to_sec(mysql_time(c3)), time_to_sec('01:02:03.040505'::time) FROM time_tbl WHERE time_to_sec('06:05:04.030201'::time) > 1 ORDER BY 1,2,3;
 time_to_sec | time_to_sec | time_to_sec 
-------------+-------------+-------------
        3599 |        3599 |        3723
       40332 |       40332 |        3723
       43830 |       43830 |        3723
       57600 |       57600 |        3723
       83533 |       83533 |        3723
(5 rows)

-- select time_to_sec with agg (pushdown, explain)
--Testcase 2624:
EXPLAIN VERBOSE
SELECT max(c3), time_to_sec(max(c1)) FROM time_tbl;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c3)), time_to_sec((max(c1)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`), max(`c1`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3), max(c1) FROM public.time_tbl1mysql
(11 rows)

-- select time_to_sec as nest function with agg (pushdown, result)
--Testcase 2625:
SELECT max(c3), time_to_sec(max(c1)) FROM time_tbl;
ERROR:  stub time_to_sec(time) is called
CONTEXT:  PL/pgSQL function time_to_sec(time without time zone) line 3 at RAISE
-- select time_to_sec with non pushdown func and explicit constant (explain)
--Testcase 2626:
EXPLAIN VERBOSE
SELECT time_to_sec(mysql_time(c3)), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (time_to_sec(mysql_time(c3))), '3.141592653589793'::double precision, 4.1
   Sort Key: (time_to_sec(mysql_time(time_tbl.c3)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (time_to_sec(mysql_time(c3))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time_to_sec(time(`c3`)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.time_to_sec(public.mysql_time(c3)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select time_to_sec with non pushdown func and explicit constant (result)
--Testcase 2627:
SELECT time_to_sec(mysql_time(c3)), pi(), 4.1 FROM time_tbl ORDER BY 1;
 time_to_sec |        pi         | ?column? 
-------------+-------------------+----------
        3599 | 3.141592653589793 |      4.1
       40332 | 3.141592653589793 |      4.1
       43830 | 3.141592653589793 |      4.1
       57600 | 3.141592653589793 |      4.1
       83533 | 3.141592653589793 |      4.1
(5 rows)

-- select time_to_sec with order by (explain)
--Testcase 2628:
EXPLAIN VERBOSE
SELECT id, time_to_sec(c1) FROM time_tbl order by id,time_to_sec(c1);
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=8)
   Output: id, (time_to_sec(c1))
   Sort Key: time_tbl.id, (time_to_sec(time_tbl.c1))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
         Output: id, (time_to_sec(c1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, time_to_sec(`c1`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.time_to_sec(c1) FROM public.time_tbl1mysql
(12 rows)

-- select time_to_sec with order by (result)
--Testcase 2629:
SELECT id, time_to_sec(c1) FROM time_tbl order by id,time_to_sec(c1);
 id | time_to_sec 
----+-------------
  0 |       43830
  1 |       83533
  2 |       40332
  3 |       57600
  4 |        3599
(5 rows)

-- select time_to_sec with order by index (result)
--Testcase 2630:
SELECT id, time_to_sec(c1) FROM time_tbl order by 2,1;
 id | time_to_sec 
----+-------------
  4 |        3599
  2 |       40332
  0 |       43830
  3 |       57600
  1 |       83533
(5 rows)

-- select time_to_sec with order by index (result)
--Testcase 2631:
SELECT id, time_to_sec(c1) FROM time_tbl order by 1,2;
 id | time_to_sec 
----+-------------
  0 |       43830
  1 |       83533
  2 |       40332
  3 |       57600
  4 |        3599
(5 rows)

-- select time_to_sec with group by (explain)
--Testcase 2632:
EXPLAIN VERBOSE
SELECT max(c3), time_to_sec(c1) FROM time_tbl group by c1, time_to_sec('06:05:04.030201'::time) ORDER BY 1,2;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6098.44..6115.51 rows=6826 width=24)
   Output: (max(c3)), (time_to_sec(c1)), c1, (time_to_sec('06:05:04.030201'::time without time zone))
   Sort Key: (max(time_tbl.c3)), (time_to_sec(time_tbl.c1))
   ->  HashAggregate  (cost=2182.47..5663.74 rows=6826 width=24)
         Output: max(c3), time_to_sec(c1), c1, (time_to_sec('06:05:04.030201'::time without time zone))
         Group Key: time_tbl.c1, (time_to_sec('06:05:04.030201'::time without time zone))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=20)
               Output: c1, (time_to_sec('06:05:04.030201'::time without time zone)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1`, time_to_sec('06:05:04.030201'), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1, public.time_to_sec('06:05:04.030201'::time without time zone), c3 FROM public.time_tbl1mysql
(15 rows)

-- select time_to_sec with group by (result)
--Testcase 2633:
SELECT max(c3), time_to_sec(c1) FROM time_tbl group by c1, time_to_sec('06:05:04.030201'::time) ORDER BY 1,2;
ERROR:  stub time_to_sec(time) is called
CONTEXT:  PL/pgSQL function time_to_sec(time without time zone) line 3 at RAISE
-- select time_to_sec with group by index (result)
--Testcase 2634:
SELECT id, time_to_sec(c1) FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | time_to_sec 
----+-------------
  0 |       43830
  1 |       83533
  2 |       40332
  3 |       57600
  4 |        3599
(5 rows)

-- select time_to_sec with group by index (result)
--Testcase 2635:
SELECT id, time_to_sec(c1) FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | time_to_sec 
----+-------------
  0 |       43830
  1 |       83533
  2 |       40332
  3 |       57600
  4 |        3599
(5 rows)

-- select time_to_sec with group by having (explain)
--Testcase 2636:
EXPLAIN VERBOSE
SELECT max(c3), time_to_sec(c1), c1 FROM time_tbl group by time_to_sec(c1), c3, c1 HAVING time_to_sec(c1) > 100 ORDER BY 1,2,3;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sort  (cost=2270.82..2270.99 rows=67 width=28)
   Output: (max(c3)), (time_to_sec(c1)), c1, c3
   Sort Key: (max(time_tbl.c3)), (time_to_sec(time_tbl.c1)), time_tbl.c1
   ->  HashAggregate  (cost=2199.54..2268.79 rows=67 width=28)
         Output: max(c3), (time_to_sec(c1)), c1, c3
         Group Key: (time_to_sec(time_tbl.c1)), time_tbl.c3, time_tbl.c1
         Filter: ((time_to_sec(time_tbl.c1)) > 100)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=20)
               Output: (time_to_sec(c1)), c1, c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT time_to_sec(`c1`), `c1`, `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.time_to_sec(c1), c1, c3 FROM public.time_tbl1mysql
(16 rows)

-- select time_to_sec with group by having (result)
--Testcase 2637:
SELECT max(c3), time_to_sec(c1), c1 FROM time_tbl group by time_to_sec(c1), c3, c1 HAVING time_to_sec(c1) > 100 ORDER BY 1,2,3;
         max         | time_to_sec |    c1    
---------------------+-------------+----------
 2021-01-03 12:10:30 |       43830 | 12:10:30
 2021-01-04 23:12:13 |       83533 | 23:12:13
 2021-01-05 11:12:12 |       40332 | 11:12:12
 2021-01-06 16:00:00 |       57600 | 16:00:00
 2021-01-07 00:59:59 |        3599 | 00:59:59
(5 rows)

-- select time_to_sec with group by index having (result)
--Testcase 2638:
SELECT id, time_to_sec(c1), c1 FROM time_tbl group by 3, 2, 1 HAVING time_to_sec(c1) > 100 ORDER BY 1,2,3;
 id | time_to_sec |    c1    
----+-------------+----------
  0 |       43830 | 12:10:30
  1 |       83533 | 23:12:13
  2 |       40332 | 11:12:12
  3 |       57600 | 16:00:00
  4 |        3599 | 00:59:59
(5 rows)

-- select time_to_sec with group by index having (result)
--Testcase 2639:
SELECT id, time_to_sec(c1), c1 FROM time_tbl group by 1, 2, 3 HAVING time_to_sec(c1) > 100 ORDER BY 1,2,3;
 id | time_to_sec |    c1    
----+-------------+----------
  0 |       43830 | 12:10:30
  1 |       83533 | 23:12:13
  2 |       40332 | 11:12:12
  3 |       57600 | 16:00:00
  4 |        3599 | 00:59:59
(5 rows)

-- select time_to_sec and as
--Testcase 2640:
SELECT time_to_sec(c1) as time_to_sec1 FROM time_tbl ORDER BY 1;
 time_to_sec1 
--------------
         3599
        40332
        43830
        57600
        83533
(5 rows)

-- TIME_FORMAT()
-- select time_format (stub function, explain)
--Testcase 2641:
EXPLAIN VERBOSE
SELECT time_format(c1, '%H %k %h %I %l'), time_format(mysql_time(c3), '%H %k %h %I %l'), time_format('01:02:03.040505'::time, '%H %k %h %I %l') FROM time_tbl ORDER BY 1,2,3;
                                                                                                                            QUERY PLAN                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7685.49..7702.55 rows=6826 width=96)
   Output: (time_format(c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
   Sort Key: (time_format(time_tbl.c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(time_tbl.c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7250.78 rows=6826 width=96)
         Output: (time_format(c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time_format(`c1`, '%H %k %h %I %l'), time_format(time(`c3`), '%H %k %h %I %l'), time_format('01:02:03.040505', '%H %k %h %I %l') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.time_format(c1, '%H %k %h %I %l'::text), public.time_format(public.mysql_time(c3), '%H %k %h %I %l'::text), public.time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text) FROM public.time_tbl1mysql
(12 rows)

-- select time_format (stub function, result)
--Testcase 2642:
SELECT time_format(c1, '%H %k %h %I %l'), time_format(mysql_time(c3), '%H %k %h %I %l'), time_format('01:02:03.040505'::time, '%H %k %h %I %l') FROM time_tbl ORDER BY 1,2,3;
  time_format   |  time_format   | time_format  
----------------+----------------+--------------
 00 0 12 12 12  | 00 0 12 12 12  | 01 1 01 01 1
 11 11 11 11 11 | 11 11 11 11 11 | 01 1 01 01 1
 12 12 12 12 12 | 12 12 12 12 12 | 01 1 01 01 1
 16 16 04 04 4  | 16 16 04 04 4  | 01 1 01 01 1
 23 23 11 11 11 | 23 23 11 11 11 | 01 1 01 01 1
(5 rows)

-- select time_format (stub function, not pushdown constraints, explain)
--Testcase 2643:
EXPLAIN VERBOSE
SELECT time_format(c1, '%H %k %h %I %l'), time_format(mysql_time(c3), '%H %k %h %I %l'), time_format('01:02:03.040505'::time, '%H %k %h %I %l') FROM time_tbl WHERE to_hex(id) = '2' ORDER BY 1,2,3;
                                                                                                                              QUERY PLAN                                                                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=425.59..425.68 rows=34 width=96)
   Output: (time_format(c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
   Sort Key: (time_format(time_tbl.c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(time_tbl.c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..424.73 rows=34 width=96)
         Output: (time_format(c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
         Filter: (to_hex(time_tbl.id) = '2'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time_format(`c1`, '%H %k %h %I %l'), time_format(time(`c3`), '%H %k %h %I %l'), time_format('01:02:03.040505', '%H %k %h %I %l'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.time_format(c1, '%H %k %h %I %l'::text), public.time_format(public.mysql_time(c3), '%H %k %h %I %l'::text), public.time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text), id FROM public.time_tbl1mysql
(13 rows)

-- select time_format (stub function, not pushdown constraints, result)
--Testcase 2644:
SELECT time_format(c1, '%H %k %h %I %l'), time_format(mysql_time(c3), '%H %k %h %I %l'), time_format('01:02:03.040505'::time, '%H %k %h %I %l') FROM time_tbl WHERE to_hex(id) = '2' ORDER BY 1,2,3;
  time_format   |  time_format   | time_format  
----------------+----------------+--------------
 11 11 11 11 11 | 11 11 11 11 11 | 01 1 01 01 1
(1 row)

-- select time_format (stub function, pushdown constraints, explain)
--Testcase 2645:
EXPLAIN VERBOSE
SELECT time_format(c1, '%H %k %h %I %l'), time_format(mysql_time(c3), '%H %k %h %I %l'), time_format('01:02:03.040505'::time, '%H %k %h %I %l') FROM time_tbl WHERE id != 200 ORDER BY 1,2,3;
                                                                                                                                      QUERY PLAN                                                                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7665.46..7682.44 rows=6792 width=96)
   Output: (time_format(c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
   Sort Key: (time_format(time_tbl.c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(time_tbl.c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7233.16 rows=6792 width=96)
         Output: (time_format(c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time_format(`c1`, '%H %k %h %I %l'), time_format(time(`c3`), '%H %k %h %I %l'), time_format('01:02:03.040505', '%H %k %h %I %l') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.time_format(c1, '%H %k %h %I %l'::text), public.time_format(public.mysql_time(c3), '%H %k %h %I %l'::text), public.time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select time_format (stub function, pushdown constraints, result)
--Testcase 2646:
SELECT time_format(c1, '%H %k %h %I %l'), time_format(mysql_time(c3), '%H %k %h %I %l'), time_format('01:02:03.040505'::time, '%H %k %h %I %l') FROM time_tbl WHERE id != 200 ORDER BY 1,2,3;
  time_format   |  time_format   | time_format  
----------------+----------------+--------------
 00 0 12 12 12  | 00 0 12 12 12  | 01 1 01 01 1
 11 11 11 11 11 | 11 11 11 11 11 | 01 1 01 01 1
 12 12 12 12 12 | 12 12 12 12 12 | 01 1 01 01 1
 16 16 04 04 4  | 16 16 04 04 4  | 01 1 01 01 1
 23 23 11 11 11 | 23 23 11 11 11 | 01 1 01 01 1
(5 rows)

-- select time_format (stub function, time_format in constraints, explain)
--Testcase 2647:
EXPLAIN VERBOSE
SELECT time_format(c1, '%H %k %h %I %l'), time_format(mysql_time(c3), '%H %k %h %I %l'), time_format('01:02:03.040505'::time, '%H %k %h %I %l') FROM time_tbl WHERE time_format(c1, '%H %k %h %I %l') != '100 100 04 04 4' ORDER BY 1,2,3;
                                                                                                                                                                      QUERY PLAN                                                                                                                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9371.96..9388.94 rows=6792 width=96)
   Output: (time_format(c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
   Sort Key: (time_format(time_tbl.c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(time_tbl.c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8939.67 rows=6792 width=96)
         Output: (time_format(c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time_format(`c1`, '%H %k %h %I %l'), time_format(time(`c3`), '%H %k %h %I %l'), time_format('01:02:03.040505', '%H %k %h %I %l') FROM `test`.`time_tbl2` WHERE ((time_format(`c1`, '%H %k %h %I %l') <> '100 100 04 04 4'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.time_format(c1, '%H %k %h %I %l'::text), public.time_format(public.mysql_time(c3), '%H %k %h %I %l'::text), public.time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text) FROM public.time_tbl1mysql WHERE ((public.time_format(c1, '%H %k %h %I %l'::text) <> '100 100 04 04 4'::text))
(12 rows)

-- select time_format (stub function, time_format in constraints, result)
--Testcase 2648:
SELECT time_format(c1, '%H %k %h %I %l'), time_format(mysql_time(c3), '%H %k %h %I %l'), time_format('01:02:03.040505'::time, '%H %k %h %I %l') FROM time_tbl WHERE time_format(c1, '%H %k %h %I %l') != '100 100 04 04 4' ORDER BY 1,2,3;
  time_format   |  time_format   | time_format  
----------------+----------------+--------------
 00 0 12 12 12  | 00 0 12 12 12  | 01 1 01 01 1
 11 11 11 11 11 | 11 11 11 11 11 | 01 1 01 01 1
 12 12 12 12 12 | 12 12 12 12 12 | 01 1 01 01 1
 16 16 04 04 4  | 16 16 04 04 4  | 01 1 01 01 1
 23 23 11 11 11 | 23 23 11 11 11 | 01 1 01 01 1
(5 rows)

-- select time_format (stub function, time_format in constraints, explain)
--Testcase 2649:
EXPLAIN VERBOSE
SELECT time_format(c1, '%H %k %h %I %l'), time_format(mysql_time(c3), '%H %k %h %I %l'), time_format('01:02:03.040505'::time, '%H %k %h %I %l') FROM time_tbl WHERE time_format(c1, '%H %k %h %I %l') = '12 12 12 12 12' ORDER BY 1,2,3;
                                                                                                                                                                     QUERY PLAN                                                                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2047.37..2047.45 rows=34 width=96)
   Output: (time_format(c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
   Sort Key: (time_format(time_tbl.c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(time_tbl.c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2046.50 rows=34 width=96)
         Output: (time_format(c1, '%H %k %h %I %l'::text)), (time_format(mysql_time(c3), '%H %k %h %I %l'::text)), (time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time_format(`c1`, '%H %k %h %I %l'), time_format(time(`c3`), '%H %k %h %I %l'), time_format('01:02:03.040505', '%H %k %h %I %l') FROM `test`.`time_tbl2` WHERE ((time_format(`c1`, '%H %k %h %I %l') = '12 12 12 12 12'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.time_format(c1, '%H %k %h %I %l'::text), public.time_format(public.mysql_time(c3), '%H %k %h %I %l'::text), public.time_format('01:02:03.040505'::time without time zone, '%H %k %h %I %l'::text) FROM public.time_tbl1mysql WHERE ((public.time_format(c1, '%H %k %h %I %l'::text) = '12 12 12 12 12'::text))
(12 rows)

-- select time_format (stub function, time_format in constraints, result)
--Testcase 2650:
SELECT time_format(c1, '%H %k %h %I %l'), time_format(mysql_time(c3), '%H %k %h %I %l'), time_format('01:02:03.040505'::time, '%H %k %h %I %l') FROM time_tbl WHERE time_format(c1, '%H %k %h %I %l') = '12 12 12 12 12' ORDER BY 1,2,3;
  time_format   |  time_format   | time_format  
----------------+----------------+--------------
 12 12 12 12 12 | 12 12 12 12 12 | 01 1 01 01 1
(1 row)

-- select time_format with agg (pushdown, explain)
--Testcase 2651:
EXPLAIN VERBOSE
SELECT max(c3), time_format(max(c1), '%H %k %h %I %l') FROM time_tbl;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (max(c3)), time_format((max(c1)), '%H %k %h %I %l'::text)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`), max(`c1`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3), max(c1) FROM public.time_tbl1mysql
(11 rows)

-- select time_format as nest function with agg (pushdown, result)
--Testcase 2652:
SELECT max(c3), time_format(max(c1), '%H %k %h %I %l') FROM time_tbl;
ERROR:  stub time_format(time, text) is called
CONTEXT:  PL/pgSQL function time_format(time without time zone,text) line 3 at RAISE
-- select time_format with non pushdown func and explicit constant (explain)
--Testcase 2653:
EXPLAIN VERBOSE
SELECT time_format(mysql_time(c3), '%H %k %h %I %l'), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=72)
   Output: (time_format(mysql_time(c3), '%H %k %h %I %l'::text)), '3.141592653589793'::double precision, 4.1
   Sort Key: (time_format(mysql_time(time_tbl.c3), '%H %k %h %I %l'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=72)
         Output: (time_format(mysql_time(c3), '%H %k %h %I %l'::text)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time_format(time(`c3`), '%H %k %h %I %l'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.time_format(public.mysql_time(c3), '%H %k %h %I %l'::text), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select time_format with non pushdown func and explicit constant (result)
--Testcase 2654:
SELECT time_format(mysql_time(c3), '%H %k %h %I %l'), pi(), 4.1 FROM time_tbl ORDER BY 1;
  time_format   |        pi         | ?column? 
----------------+-------------------+----------
 00 0 12 12 12  | 3.141592653589793 |      4.1
 11 11 11 11 11 | 3.141592653589793 |      4.1
 12 12 12 12 12 | 3.141592653589793 |      4.1
 16 16 04 04 4  | 3.141592653589793 |      4.1
 23 23 11 11 11 | 3.141592653589793 |      4.1
(5 rows)

-- select time_format with order by (explain)
--Testcase 2655:
EXPLAIN VERBOSE
SELECT id, time_format(c1, '%H %k %h %I %l') FROM time_tbl order by id,time_format(c1, '%H %k %h %I %l');
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=36)
   Output: id, (time_format(c1, '%H %k %h %I %l'::text))
   Sort Key: time_tbl.id, (time_format(time_tbl.c1, '%H %k %h %I %l'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=36)
         Output: id, (time_format(c1, '%H %k %h %I %l'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, time_format(`c1`, '%H %k %h %I %l') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.time_format(c1, '%H %k %h %I %l'::text) FROM public.time_tbl1mysql
(12 rows)

-- select time_format with order by (result)
--Testcase 2656:
SELECT id, time_format(c1, '%H %k %h %I %l') FROM time_tbl order by id,time_format(c1, '%H %k %h %I %l');
 id |  time_format   
----+----------------
  0 | 12 12 12 12 12
  1 | 23 23 11 11 11
  2 | 11 11 11 11 11
  3 | 16 16 04 04 4
  4 | 00 0 12 12 12
(5 rows)

-- select time_format with order by index (result)
--Testcase 2657:
SELECT id, time_format(c1, '%H %k %h %I %l') FROM time_tbl order by 2,1;
 id |  time_format   
----+----------------
  4 | 00 0 12 12 12
  2 | 11 11 11 11 11
  0 | 12 12 12 12 12
  3 | 16 16 04 04 4
  1 | 23 23 11 11 11
(5 rows)

-- select time_format with order by index (result)
--Testcase 2658:
SELECT id, time_format(c1, '%H %k %h %I %l') FROM time_tbl order by 1,2;
 id |  time_format   
----+----------------
  0 | 12 12 12 12 12
  1 | 23 23 11 11 11
  2 | 11 11 11 11 11
  3 | 16 16 04 04 4
  4 | 00 0 12 12 12
(5 rows)

-- select time_format with group by (explain)
--Testcase 2659:
EXPLAIN VERBOSE
SELECT max(c3), time_format(c1, '%H %k %h %I %l') FROM time_tbl group by c1, time_format('06:05:04.030201'::time, '%H %k %h %I %l') ORDER BY 1,2;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6098.44..6115.51 rows=6826 width=80)
   Output: (max(c3)), (time_format(c1, '%H %k %h %I %l'::text)), c1, (time_format('06:05:04.030201'::time without time zone, '%H %k %h %I %l'::text))
   Sort Key: (max(time_tbl.c3)), (time_format(time_tbl.c1, '%H %k %h %I %l'::text))
   ->  HashAggregate  (cost=2182.47..5663.74 rows=6826 width=80)
         Output: max(c3), time_format(c1, '%H %k %h %I %l'::text), c1, (time_format('06:05:04.030201'::time without time zone, '%H %k %h %I %l'::text))
         Group Key: time_tbl.c1, (time_format('06:05:04.030201'::time without time zone, '%H %k %h %I %l'::text))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=48)
               Output: c1, (time_format('06:05:04.030201'::time without time zone, '%H %k %h %I %l'::text)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1`, time_format('06:05:04.030201', '%H %k %h %I %l'), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1, public.time_format('06:05:04.030201'::time without time zone, '%H %k %h %I %l'::text), c3 FROM public.time_tbl1mysql
(15 rows)

-- select time_format with group by (result)
--Testcase 2660:
SELECT max(c3), time_format(c1, '%H %k %h %I %l') FROM time_tbl group by c1, time_format('06:05:04.030201'::time, '%H %k %h %I %l') ORDER BY 1,2;
ERROR:  stub time_format(time, text) is called
CONTEXT:  PL/pgSQL function time_format(time without time zone,text) line 3 at RAISE
-- select time_format with group by index (result)
--Testcase 2661:
SELECT id, time_format(c1, '%H %k %h %I %l') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id |  time_format   
----+----------------
  0 | 12 12 12 12 12
  1 | 23 23 11 11 11
  2 | 11 11 11 11 11
  3 | 16 16 04 04 4
  4 | 00 0 12 12 12
(5 rows)

-- select time_format with group by index (result)
--Testcase 2662:
SELECT id, time_format(c1, '%H %k %h %I %l') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id |  time_format   
----+----------------
  0 | 12 12 12 12 12
  1 | 23 23 11 11 11
  2 | 11 11 11 11 11
  3 | 16 16 04 04 4
  4 | 00 0 12 12 12
(5 rows)

-- select time_format with group by having (explain)
--Testcase 2663:
EXPLAIN VERBOSE
SELECT max(c3), time_format(c1, '%H %k %h %I %l') FROM time_tbl group by time_format(c1, '%H %k %h %I %l'), c3, c1 HAVING time_format(c1, '%H %k %h %I %l') != '100 100 04 04 4' ORDER BY 1,2;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2309.39..2309.89 rows=199 width=56)
   Output: (max(c3)), (time_format(c1, '%H %k %h %I %l'::text)), c3, c1
   Sort Key: (max(time_tbl.c3)), (time_format(time_tbl.c1, '%H %k %h %I %l'::text))
   ->  HashAggregate  (cost=2199.54..2301.79 rows=199 width=56)
         Output: max(c3), (time_format(c1, '%H %k %h %I %l'::text)), c3, c1
         Group Key: (time_format(time_tbl.c1, '%H %k %h %I %l'::text)), time_tbl.c3, time_tbl.c1
         Filter: ((time_format(time_tbl.c1, '%H %k %h %I %l'::text)) <> '100 100 04 04 4'::text)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=48)
               Output: (time_format(c1, '%H %k %h %I %l'::text)), c3, c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT time_format(`c1`, '%H %k %h %I %l'), `c3`, `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.time_format(c1, '%H %k %h %I %l'::text), c3, c1 FROM public.time_tbl1mysql
(16 rows)

-- select time_format with group by having (result)
--Testcase 2664:
SELECT max(c3), time_format(c1, '%H %k %h %I %l') FROM time_tbl group by time_format(c1, '%H %k %h %I %l'), c3, c1 HAVING time_format(c1, '%H %k %h %I %l') != '100 100 04 04 4' ORDER BY 1,2;
         max         |  time_format   
---------------------+----------------
 2021-01-03 12:10:30 | 12 12 12 12 12
 2021-01-04 23:12:13 | 23 23 11 11 11
 2021-01-05 11:12:12 | 11 11 11 11 11
 2021-01-06 16:00:00 | 16 16 04 04 4
 2021-01-07 00:59:59 | 00 0 12 12 12
(5 rows)

-- select time_format with group by index having (result)
--Testcase 2665:
SELECT id, c1, time_format(c1, '%H %k %h %I %l'), c3 FROM time_tbl group by 4, 3, 2, 1 HAVING time_format(c1, '%H %k %h %I %l') != '100 100 04 04 4' ORDER BY 1,2,3,4;
 id |    c1    |  time_format   |         c3          
----+----------+----------------+---------------------
  0 | 12:10:30 | 12 12 12 12 12 | 2021-01-03 12:10:30
  1 | 23:12:13 | 23 23 11 11 11 | 2021-01-04 23:12:13
  2 | 11:12:12 | 11 11 11 11 11 | 2021-01-05 11:12:12
  3 | 16:00:00 | 16 16 04 04 4  | 2021-01-06 16:00:00
  4 | 00:59:59 | 00 0 12 12 12  | 2021-01-07 00:59:59
(5 rows)

-- select time_format with group by index having (result)
--Testcase 2666:
SELECT id, c1, time_format(c1, '%H %k %h %I %l'), c3 FROM time_tbl group by 1, 2, 3, 4 HAVING time_format(c1, '%H %k %h %I %l') != '100 100 04 04 4' ORDER BY 1,2,3,4;
 id |    c1    |  time_format   |         c3          
----+----------+----------------+---------------------
  0 | 12:10:30 | 12 12 12 12 12 | 2021-01-03 12:10:30
  1 | 23:12:13 | 23 23 11 11 11 | 2021-01-04 23:12:13
  2 | 11:12:12 | 11 11 11 11 11 | 2021-01-05 11:12:12
  3 | 16:00:00 | 16 16 04 04 4  | 2021-01-06 16:00:00
  4 | 00:59:59 | 00 0 12 12 12  | 2021-01-07 00:59:59
(5 rows)

-- select time_format and as
--Testcase 2667:
SELECT time_format(c1, '%H %k %h %I %l') as time_format1 FROM time_tbl ORDER BY 1;
  time_format1  
----------------
 00 0 12 12 12
 11 11 11 11 11
 12 12 12 12 12
 16 16 04 04 4
 23 23 11 11 11
(5 rows)

-- TIME()
-- select mysql_time (stub function, explain)
--Testcase 2668:
EXPLAIN VERBOSE
SELECT mysql_time(c3), mysql_time(c2), mysql_time(date_sub(c3, '1 12:59:10')), mysql_time('2021-01-01 12:00:00') FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                      QUERY PLAN                                                                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9409.05..9426.12 rows=6826 width=32)
   Output: (mysql_time(c3)), (mysql_time((c2)::timestamp without time zone)), (mysql_time(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (mysql_time(time_tbl.c3)), (mysql_time((time_tbl.c2)::timestamp without time zone)), (mysql_time(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8974.35 rows=6826 width=32)
         Output: (mysql_time(c3)), (mysql_time((c2)::timestamp without time zone)), (mysql_time(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time(`c3`), time(`c2`), time(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), time('2021-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_time(c3), public.mysql_time(c2), public.mysql_time(public.date_sub(c3, '1 day 12:59:10'::interval)), public.mysql_time('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select mysql_time (stub function, result)
--Testcase 2669:
SELECT mysql_time(c3), mysql_time(c2), mysql_time(date_sub(c3, '1 12:59:10')), mysql_time('2021-01-01 12:00:00') FROM time_tbl ORDER BY 1,2,3,4;
 mysql_time | mysql_time | mysql_time | mysql_time 
------------+------------+------------+------------
 00:59:59   | 00:00:00   | 12:00:49   | 12:00:00
 11:12:12   | 00:00:00   | 22:13:02   | 12:00:00
 12:10:30   | 00:00:00   | 23:11:20   | 12:00:00
 16:00:00   | 00:00:00   | 03:00:50   | 12:00:00
 23:12:13   | 00:00:00   | 10:13:03   | 12:00:00
(5 rows)

-- select mysql_time (stub function, not pushdown constraints, explain)
--Testcase 2670:
EXPLAIN VERBOSE
SELECT mysql_time(c3), mysql_time(c2), mysql_time(date_sub(c3, '1 12:59:10')), mysql_time('2021-01-01 12:00:00') FROM time_tbl WHERE to_hex(id) = '0' ORDER BY 1,2,3,4;
                                                                                                                      QUERY PLAN                                                                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.18..434.26 rows=34 width=32)
   Output: (mysql_time(c3)), (mysql_time((c2)::timestamp without time zone)), (mysql_time(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (mysql_time(time_tbl.c3)), (mysql_time((time_tbl.c2)::timestamp without time zone)), (mysql_time(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.31 rows=34 width=32)
         Output: (mysql_time(c3)), (mysql_time((c2)::timestamp without time zone)), (mysql_time(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '0'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time(`c3`), time(`c2`), time(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), time('2021-01-01 12:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_time(c3), public.mysql_time(c2), public.mysql_time(public.date_sub(c3, '1 day 12:59:10'::interval)), public.mysql_time('2021-01-01 12:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select mysql_time (stub function, not pushdown constraints, result)
--Testcase 2671:
SELECT mysql_time(c3), mysql_time(c2), mysql_time(date_sub(c3, '1 12:59:10')), mysql_time('2021-01-01 12:00:00') FROM time_tbl WHERE to_hex(id) = '0' ORDER BY 1,2,3,4;
 mysql_time | mysql_time | mysql_time | mysql_time 
------------+------------+------------+------------
 12:10:30   | 00:00:00   | 23:11:20   | 12:00:00
(1 row)

-- select mysql_time (stub function, pushdown constraints, explain)
--Testcase 2672:
EXPLAIN VERBOSE
SELECT mysql_time(c3), mysql_time(c2), mysql_time(date_sub(c3, '1 12:59:10')), mysql_time('2021-01-01 12:00:00') FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9380.44..9397.42 rows=6792 width=32)
   Output: (mysql_time(c3)), (mysql_time((c2)::timestamp without time zone)), (mysql_time(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (mysql_time(time_tbl.c3)), (mysql_time((time_tbl.c2)::timestamp without time zone)), (mysql_time(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8948.15 rows=6792 width=32)
         Output: (mysql_time(c3)), (mysql_time((c2)::timestamp without time zone)), (mysql_time(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time(`c3`), time(`c2`), time(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), time('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_time(c3), public.mysql_time(c2), public.mysql_time(public.date_sub(c3, '1 day 12:59:10'::interval)), public.mysql_time('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select mysql_time (stub function, pushdown constraints, result)
--Testcase 2673:
SELECT mysql_time(c3), mysql_time(c2), mysql_time(date_sub(c3, '1 12:59:10')), mysql_time('2021-01-01 12:00:00') FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
 mysql_time | mysql_time | mysql_time | mysql_time 
------------+------------+------------+------------
 00:59:59   | 00:00:00   | 12:00:49   | 12:00:00
 11:12:12   | 00:00:00   | 22:13:02   | 12:00:00
 12:10:30   | 00:00:00   | 23:11:20   | 12:00:00
 16:00:00   | 00:00:00   | 03:00:50   | 12:00:00
 23:12:13   | 00:00:00   | 10:13:03   | 12:00:00
(5 rows)

-- select mysql_time (stub function, mysql_time in constraints, explain)
--Testcase 2674:
EXPLAIN VERBOSE
SELECT mysql_time(c3), mysql_time(c2), mysql_time(date_sub(c3, '1 12:59:10')), mysql_time('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE mysql_time(c3) != '06:05:04.030201'::time ORDER BY 1,2,3,4;
                                                                                                                                                          QUERY PLAN                                                                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11086.94..11103.92 rows=6792 width=32)
   Output: (mysql_time(c3)), (mysql_time((c2)::timestamp without time zone)), (mysql_time(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (mysql_time(time_tbl.c3)), (mysql_time((time_tbl.c2)::timestamp without time zone)), (mysql_time(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..10654.65 rows=6792 width=32)
         Output: (mysql_time(c3)), (mysql_time((c2)::timestamp without time zone)), (mysql_time(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time(`c3`), time(`c2`), time(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), time('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((time(`c3`) <> '06:05:04.030201'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_time(c3), public.mysql_time(c2), public.mysql_time(public.date_sub(c3, '1 day 12:59:10'::interval)), public.mysql_time('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.mysql_time(c3) <> '06:05:04.030201'::time without time zone))
(12 rows)

-- select mysql_time (stub function, mysql_time in constraints, result)
--Testcase 2675:
SELECT mysql_time(c3), mysql_time(c2), mysql_time(date_sub(c3, '1 12:59:10')), mysql_time('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE mysql_time(c3) != '06:05:04.030201'::time ORDER BY 1,2,3,4;
 mysql_time | mysql_time | mysql_time | mysql_time 
------------+------------+------------+------------
 00:59:59   | 00:00:00   | 12:00:49   | 12:00:00
 11:12:12   | 00:00:00   | 22:13:02   | 12:00:00
 12:10:30   | 00:00:00   | 23:11:20   | 12:00:00
 16:00:00   | 00:00:00   | 03:00:50   | 12:00:00
 23:12:13   | 00:00:00   | 10:13:03   | 12:00:00
(5 rows)

-- select mysql_time (stub function, mysql_time in constraints, explain)
--Testcase 2676:
EXPLAIN VERBOSE
SELECT mysql_time(c3), mysql_time(c2), mysql_time(date_sub(c3, '1 12:59:10')), mysql_time('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE mysql_time('2021-01-01 12:00:00'::timestamp) > '06:05:04.030201'::time ORDER BY 1,2,3,4;
                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5034.95..5040.64 rows=2276 width=32)
   Output: (mysql_time(c3)), (mysql_time((c2)::timestamp without time zone)), (mysql_time(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (mysql_time(time_tbl.c3)), (mysql_time((time_tbl.c2)::timestamp without time zone)), (mysql_time(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4908.03 rows=2276 width=32)
         Output: (mysql_time(c3)), (mysql_time((c2)::timestamp without time zone)), (mysql_time(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (mysql_time('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time(`c3`), time(`c2`), time(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), time('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((time('2021-01-01 12:00:00') > '06:05:04.030201'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_time(c3), public.mysql_time(c2), public.mysql_time(public.date_sub(c3, '1 day 12:59:10'::interval)), public.mysql_time('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.mysql_time('2021-01-01 12:00:00'::timestamp without time zone) > '06:05:04.030201'::time without time zone))
(12 rows)

-- select mysql_time (stub function, mysql_time in constraints, result)
--Testcase 2677:
SELECT mysql_time(c3), mysql_time(c2), mysql_time(date_sub(c3, '1 12:59:10')), mysql_time('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE mysql_time('2021-01-01 12:00:00'::timestamp) > '06:05:04.030201'::time ORDER BY 1,2,3,4;
 mysql_time | mysql_time | mysql_time | mysql_time 
------------+------------+------------+------------
 00:59:59   | 00:00:00   | 12:00:49   | 12:00:00
 11:12:12   | 00:00:00   | 22:13:02   | 12:00:00
 12:10:30   | 00:00:00   | 23:11:20   | 12:00:00
 16:00:00   | 00:00:00   | 03:00:50   | 12:00:00
 23:12:13   | 00:00:00   | 10:13:03   | 12:00:00
(5 rows)

-- select mysql_time with agg (pushdown, explain)
--Testcase 2678:
EXPLAIN VERBOSE
SELECT max(c3), mysql_time(max(c3)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (max(c3)), mysql_time((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select mysql_time as nest function with agg (pushdown, result)
--Testcase 2679:
SELECT max(c3), mysql_time(max(c3)) FROM time_tbl;
ERROR:  stub mysql_time(timestamp) is called
CONTEXT:  PL/pgSQL function mysql_time(timestamp without time zone) line 3 at RAISE
-- select mysql_time with non pushdown func and explicit constant (explain)
--Testcase 2680:
EXPLAIN VERBOSE
SELECT mysql_time(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=48)
   Output: (mysql_time(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (mysql_time(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=48)
         Output: (mysql_time(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT time(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_time(public.date_sub(c3, '1 day 12:59:10'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select mysql_time with non pushdown func and explicit constant (result)
--Testcase 2681:
SELECT mysql_time(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
 mysql_time |        pi         | ?column? 
------------+-------------------+----------
 03:00:50   | 3.141592653589793 |      4.1
 10:13:03   | 3.141592653589793 |      4.1
 12:00:49   | 3.141592653589793 |      4.1
 22:13:02   | 3.141592653589793 |      4.1
 23:11:20   | 3.141592653589793 |      4.1
(5 rows)

-- select mysql_time with order by (explain)
--Testcase 2682:
EXPLAIN VERBOSE
SELECT id, mysql_time(c3 + '1 12:59:10') FROM time_tbl order by id,mysql_time(c3 + '1 12:59:10');
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=12)
   Output: id, (mysql_time((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: time_tbl.id, (mysql_time((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
         Output: id, (mysql_time((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, time((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.mysql_time((c3 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select mysql_time with order by (result)
--Testcase 2683:
SELECT id, mysql_time(c3 + '1 12:59:10') FROM time_tbl order by id,mysql_time(c3 + '1 12:59:10');
 id | mysql_time 
----+------------
  0 | 01:09:40
  1 | 12:11:23
  2 | 00:11:22
  3 | 04:59:10
  4 | 13:59:09
(5 rows)

-- select mysql_time with order by index (result)
--Testcase 2684:
SELECT id, mysql_time(c3 + '1 12:59:10') FROM time_tbl order by 2,1;
 id | mysql_time 
----+------------
  2 | 00:11:22
  0 | 01:09:40
  3 | 04:59:10
  1 | 12:11:23
  4 | 13:59:09
(5 rows)

-- select mysql_time with order by index (result)
--Testcase 2685:
SELECT id, mysql_time(c3 + '1 12:59:10') FROM time_tbl order by 1,2;
 id | mysql_time 
----+------------
  0 | 01:09:40
  1 | 12:11:23
  2 | 00:11:22
  3 | 04:59:10
  4 | 13:59:09
(5 rows)

-- select mysql_time with group by (explain)
--Testcase 2686:
EXPLAIN VERBOSE
SELECT max(c3), mysql_time(c3 + '1 12:59:10') FROM time_tbl group by mysql_time(c3 + '1 12:59:10') ORDER BY 1,2;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=16)
   Output: (max(c3)), (mysql_time((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: (max(time_tbl.c3)), (mysql_time((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=16)
         Output: max(c3), (mysql_time((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Group Key: (mysql_time((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=16)
               Output: (mysql_time((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT time((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_time((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(15 rows)

-- select mysql_time with group by (result)
--Testcase 2687:
SELECT max(c3), mysql_time(c3 + '1 12:59:10') FROM time_tbl group by mysql_time(c3 + '1 12:59:10') ORDER BY 1,2;
         max         | mysql_time 
---------------------+------------
 2021-01-03 12:10:30 | 01:09:40
 2021-01-04 23:12:13 | 12:11:23
 2021-01-05 11:12:12 | 00:11:22
 2021-01-06 16:00:00 | 04:59:10
 2021-01-07 00:59:59 | 13:59:09
(5 rows)

-- select mysql_time with group by index (result)
--Testcase 2688:
SELECT id, mysql_time(c3 + '1 12:59:10') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | mysql_time 
----+------------
  0 | 01:09:40
  1 | 12:11:23
  2 | 00:11:22
  3 | 04:59:10
  4 | 13:59:09
(5 rows)

-- select mysql_time with group by index (result)
--Testcase 2689:
SELECT id, mysql_time(c3 + '1 12:59:10') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | mysql_time 
----+------------
  0 | 01:09:40
  1 | 12:11:23
  2 | 00:11:22
  3 | 04:59:10
  4 | 13:59:09
(5 rows)

-- select mysql_time with group by having (explain)
--Testcase 2690:
EXPLAIN VERBOSE
SELECT max(c3), mysql_time(c3 + '1 12:59:10') FROM time_tbl group by mysql_time(c3 + '1 12:59:10'), c3 HAVING mysql_time(c3 + '1 12:59:10') > '06:05:04.030201'::time ORDER BY 1,2;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=24)
   Output: (max(c3)), (mysql_time((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
   Sort Key: (max(time_tbl.c3)), (mysql_time((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=24)
         Output: max(c3), (mysql_time((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
         Group Key: (mysql_time((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), time_tbl.c3
         Filter: ((mysql_time((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))) > '06:05:04.030201'::time without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=16)
               Output: (mysql_time((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT time((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_time((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(16 rows)

-- select mysql_time with group by having (result)
--Testcase 2691:
SELECT max(c3), mysql_time(c3 + '1 12:59:10') FROM time_tbl group by mysql_time(c3 + '1 12:59:10'), c3 HAVING mysql_time(c3 + '1 12:59:10') > '06:05:04.030201'::time ORDER BY 1,2;
         max         | mysql_time 
---------------------+------------
 2021-01-04 23:12:13 | 12:11:23
 2021-01-07 00:59:59 | 13:59:09
(2 rows)

-- select mysql_time with group by index having (result)
--Testcase 2692:
SELECT id, mysql_time(c3 + '1 12:59:10'), c3 FROM time_tbl group by 3, 2, 1 HAVING mysql_time(c3 + '1 12:59:10') > '06:05:04.030201'::time ORDER BY 1,2,3;
 id | mysql_time |         c3          
----+------------+---------------------
  1 | 12:11:23   | 2021-01-04 23:12:13
  4 | 13:59:09   | 2021-01-07 00:59:59
(2 rows)

-- select mysql_time with group by index having (result)
--Testcase 2693:
SELECT id, mysql_time(c3 + '1 12:59:10'), c3 FROM time_tbl group by 1, 2, 3 HAVING mysql_time(c3 + '1 12:59:10') > '06:05:04.030201'::time ORDER BY 1,2,3;
 id | mysql_time |         c3          
----+------------+---------------------
  1 | 12:11:23   | 2021-01-04 23:12:13
  4 | 13:59:09   | 2021-01-07 00:59:59
(2 rows)

-- select mysql_time and as
--Testcase 2694:
SELECT mysql_time(date_sub(c3, '1 12:59:10')) as mysql_time1 FROM time_tbl ORDER BY 1;
 mysql_time1 
-------------
 03:00:50
 10:13:03
 12:00:49
 22:13:02
 23:11:20
(5 rows)

-- SYSDATE()
-- select sysdate (stub function, explain)
--Testcase 2695:
EXPLAIN VERBOSE
SELECT datediff(sysdate(), sysdate()) FROM time_tbl;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=4)
   Output: (datediff(sysdate(), sysdate()))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT datediff(sysdate(), sysdate()) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.datediff(public.sysdate(), public.sysdate()) FROM public.time_tbl1mysql
(7 rows)

-- select sysdate (stub function, result)
--Testcase 2696:
SELECT datediff(sysdate(), sysdate()) FROM time_tbl;
 datediff 
----------
        0
        0
        0
        0
        0
(5 rows)

-- select sysdate (stub function, not pushdown constraints, explain)
--Testcase 2697:
EXPLAIN VERBOSE
SELECT datediff(sysdate(), sysdate()) FROM time_tbl WHERE to_hex(id) > '0';
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2120.41 rows=2276 width=4)
   Output: (datediff(sysdate(), sysdate()))
   Filter: (to_hex(time_tbl.id) > '0'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT datediff(sysdate(), sysdate()), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.datediff(public.sysdate(), public.sysdate()), id FROM public.time_tbl1mysql
(8 rows)

-- select sysdate (stub function, not pushdown constraints, result)
--Testcase 2698:
SELECT datediff(sysdate(), sysdate()) FROM time_tbl WHERE to_hex(id) > '0';
 datediff 
----------
        0
        0
        0
        0
(4 rows)

-- select sysdate (stub function, pushdown constraints, explain)
--Testcase 2699:
EXPLAIN VERBOSE
SELECT datediff(sysdate(), sysdate()) FROM time_tbl WHERE id = 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..331.50 rows=34 width=4)
   Output: (datediff(sysdate(), sysdate()))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT datediff(sysdate(), sysdate()) FROM `test`.`time_tbl2` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.datediff(public.sysdate(), public.sysdate()) FROM public.time_tbl1mysql WHERE ((id = 1))
(7 rows)

-- select sysdate (stub function, pushdown constraints, result)
--Testcase 2700:
SELECT datediff(sysdate(), sysdate()) FROM time_tbl WHERE id = 1;
 datediff 
----------
        0
(1 row)

-- select sysdate (stub function, sysdate in constraints, explain)
--Testcase 2701:
EXPLAIN VERBOSE
SELECT datediff(sysdate(), sysdate()) FROM time_tbl WHERE sysdate() > '1997-10-14 00:00:00'::timestamp;
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..3764.35 rows=2276 width=4)
   Output: (datediff(sysdate(), sysdate()))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT datediff(sysdate(), sysdate()) FROM `test`.`time_tbl2` WHERE ((sysdate() > '1997-10-14 00:00:00'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.datediff(public.sysdate(), public.sysdate()) FROM public.time_tbl1mysql WHERE ((public.sysdate() > '1997-10-14 00:00:00'::timestamp without time zone))
(7 rows)

-- select sysdate (stub function, sysdate in constraints, result)
--Testcase 2702:
SELECT datediff(sysdate(), sysdate()) FROM time_tbl WHERE sysdate() > '1997-10-14 00:00:00'::timestamp;
 datediff 
----------
        0
        0
        0
        0
        0
(5 rows)

-- sysdate in constrains (stub function, explain)
--Testcase 2703:
EXPLAIN VERBOSE
SELECT id, c1 FROM time_tbl WHERE sysdate() > '1997-10-14 00:00:00'::timestamp ORDER BY 1,2;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=12)
   Output: id, c1
   Sort Key: time_tbl.id, time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2057.35 rows=2276 width=12)
         Output: id, c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, `c1` FROM `test`.`time_tbl2` WHERE ((sysdate() > '1997-10-14 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, c1 FROM public.time_tbl1mysql WHERE ((public.sysdate() > '1997-10-14 00:00:00'::timestamp without time zone))
(12 rows)

-- sysdate in constrains (stub function, result)
--Testcase 2704:
SELECT id, c1 FROM time_tbl WHERE sysdate() > '1997-10-14 00:00:00'::timestamp ORDER BY 1,2;
 id |    c1    
----+----------
  0 | 12:10:30
  1 | 23:12:13
  2 | 11:12:12
  3 | 16:00:00
  4 | 00:59:59
(5 rows)

-- sysdate as parameter of addtime(stub function, explain)
--Testcase 2705:
EXPLAIN VERBOSE
SELECT id, c1 FROM time_tbl WHERE addtime(sysdate(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp ORDER BY 1,2;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=12)
   Output: id, c1
   Sort Key: time_tbl.id, time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=12)
         Output: id, c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, `c1` FROM `test`.`time_tbl2` WHERE ((addtime(sysdate(), '1 12:59:10.0') > '1997-10-14 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.sysdate(), '1 day 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp without time zone))
(12 rows)

-- sysdate as parameter of addtime(stub function, result)
--Testcase 2706:
SELECT id, c1 FROM time_tbl WHERE addtime(sysdate(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp ORDER BY 1,2;
 id |    c1    
----+----------
  0 | 12:10:30
  1 | 23:12:13
  2 | 11:12:12
  3 | 16:00:00
  4 | 00:59:59
(5 rows)

-- select sysdate and agg (pushdown, explain)
--Testcase 2707:
EXPLAIN VERBOSE
SELECT datediff(sysdate(), sysdate()), sum(id) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.91 rows=1 width=12)
   Output: datediff(sysdate(), sysdate()), (sum(id))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(11 rows)

-- select sysdate and agg (pushdown, result)
--Testcase 2708:
SELECT datediff(sysdate(), sysdate()), sum(id) FROM time_tbl;
ERROR:  stub sysdate() is called
CONTEXT:  PL/pgSQL function sysdate() line 3 at RAISE
-- select sysdate and log2 (pushdown, explain)
--Testcase 2709:
EXPLAIN VERBOSE
SELECT id, datediff(sysdate(), sysdate()), log2(id) FROM time_tbl ORDER BY 1,2,3;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7702.55..7719.62 rows=6826 width=16)
   Output: id, (datediff(sysdate(), sysdate())), (log2((id)::double precision))
   Sort Key: time_tbl.id, (datediff(sysdate(), sysdate())), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7267.84 rows=6826 width=16)
         Output: id, (datediff(sysdate(), sysdate())), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, datediff(sysdate(), sysdate()), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.datediff(public.sysdate(), public.sysdate()), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select sysdate and log2 (pushdown, result)
--Testcase 2710:
SELECT id, datediff(sysdate(), sysdate()), log2(id) FROM time_tbl ORDER BY 1,2,3;
 id | datediff |       log2        
----+----------+-------------------
  0 |        0 |                  
  1 |        0 |                 0
  2 |        0 |                 1
  3 |        0 | 1.584962500721156
  4 |        0 |                 2
(5 rows)

-- select sysdate with non pushdown func and explicit constant (explain)
--Testcase 2711:
EXPLAIN VERBOSE
SELECT datediff(sysdate(), sysdate()), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=5996.05..6013.12 rows=6826 width=40)
   Output: (datediff(sysdate(), sysdate())), (to_hex(id)), 4
   Sort Key: (datediff(sysdate(), sysdate())), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=40)
         Output: datediff(sysdate(), sysdate()), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select sysdate with non pushdown func and explicit constant (result)
--Testcase 2712:
SELECT datediff(sysdate(), sysdate()), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
ERROR:  stub sysdate() is called
CONTEXT:  PL/pgSQL function sysdate() line 3 at RAISE
-- select sysdate with order by (explain)
--Testcase 2713:
EXPLAIN VERBOSE
SELECT datediff(sysdate(), sysdate()), c1 FROM time_tbl ORDER BY datediff(sysdate(), sysdate()),c1;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Sort  (cost=5978.99..5996.05 rows=6826 width=12)
   Output: (datediff(sysdate(), sysdate())), c1
   Sort Key: (datediff(sysdate(), sysdate())), time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=12)
         Output: (datediff(sysdate(), sysdate())), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT datediff(sysdate(), sysdate()), `c1` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.datediff(public.sysdate(), public.sysdate()), c1 FROM public.time_tbl1mysql
(12 rows)

-- select sysdate with order by (result)
--Testcase 2714:
SELECT datediff(sysdate(), sysdate()), c1 FROM time_tbl ORDER BY datediff(sysdate(), sysdate()),c1;
 datediff |    c1    
----------+----------
        0 | 00:59:59
        0 | 11:12:12
        0 | 12:10:30
        0 | 16:00:00
        0 | 23:12:13
(5 rows)

-- select sysdate with order by index (explain)
--Testcase 2715:
EXPLAIN VERBOSE
SELECT datediff(sysdate(), sysdate()), c1 FROM time_tbl ORDER BY 1,2;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Sort  (cost=5978.99..5996.05 rows=6826 width=12)
   Output: (datediff(sysdate(), sysdate())), c1
   Sort Key: (datediff(sysdate(), sysdate())), time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=12)
         Output: (datediff(sysdate(), sysdate())), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT datediff(sysdate(), sysdate()), `c1` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.datediff(public.sysdate(), public.sysdate()), c1 FROM public.time_tbl1mysql
(12 rows)

-- select sysdate with order by index (result)
--Testcase 2716:
SELECT datediff(sysdate(), sysdate()), c1 FROM time_tbl ORDER BY 1,2;
 datediff |    c1    
----------+----------
        0 | 00:59:59
        0 | 11:12:12
        0 | 12:10:30
        0 | 16:00:00
        0 | 23:12:13
(5 rows)

-- sysdate constraints with order by (explain)
--Testcase 2717:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(sysdate(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp ORDER BY c1;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(sysdate(), '1 12:59:10.0') > '1997-10-14 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.sysdate(), '1 day 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp without time zone))
(12 rows)

-- sysdate constraints with order by (result)
--Testcase 2718:
SELECT c1 FROM time_tbl WHERE addtime(sysdate(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select sysdate with group by (explain)
--Testcase 2719:
EXPLAIN VERBOSE
SELECT id, datediff(sysdate(), sysdate()), c1 FROM time_tbl GROUP BY id,datediff(sysdate(), sysdate()),c1 ORDER BY 1,2,3;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Group  (cost=5978.99..11166.75 rows=6826 width=16)
   Output: id, (datediff(sysdate(), sysdate())), c1
   Group Key: time_tbl.id, (datediff(sysdate(), sysdate())), time_tbl.c1
   ->  Sort  (cost=5978.99..5996.05 rows=6826 width=16)
         Output: id, (datediff(sysdate(), sysdate())), c1
         Sort Key: time_tbl.id, (datediff(sysdate(), sysdate())), time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=16)
               Output: id, (datediff(sysdate(), sysdate())), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `id`, datediff(sysdate(), sysdate()), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT id, public.datediff(public.sysdate(), public.sysdate()), c1 FROM public.time_tbl1mysql
(15 rows)

-- select sysdate with group by (result)
--Testcase 2720:
SELECT id, datediff(sysdate(), sysdate()), c1 FROM time_tbl GROUP BY id,datediff(sysdate(), sysdate()),c1 ORDER BY 1,2,3;
 id | datediff |    c1    
----+----------+----------
  0 |        0 | 12:10:30
  1 |        0 | 23:12:13
  2 |        0 | 11:12:12
  3 |        0 | 16:00:00
  4 |        0 | 00:59:59
(5 rows)

-- select sysdate with group by index (explain)
--Testcase 2721:
EXPLAIN VERBOSE
SELECT id, datediff(sysdate(), sysdate()), c1 FROM time_tbl GROUP BY 1,2,3 ORDER BY 1,2,3;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Group  (cost=5978.99..11166.75 rows=6826 width=16)
   Output: id, (datediff(sysdate(), sysdate())), c1
   Group Key: time_tbl.id, (datediff(sysdate(), sysdate())), time_tbl.c1
   ->  Sort  (cost=5978.99..5996.05 rows=6826 width=16)
         Output: id, (datediff(sysdate(), sysdate())), c1
         Sort Key: time_tbl.id, (datediff(sysdate(), sysdate())), time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=16)
               Output: id, (datediff(sysdate(), sysdate())), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `id`, datediff(sysdate(), sysdate()), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT id, public.datediff(public.sysdate(), public.sysdate()), c1 FROM public.time_tbl1mysql
(15 rows)

-- select sysdate with group by index (result)
--Testcase 2722:
SELECT id, datediff(sysdate(), sysdate()), c1 FROM time_tbl GROUP BY 1,2,3 ORDER BY 1,2,3;
 id | datediff |    c1    
----+----------+----------
  0 |        0 | 12:10:30
  1 |        0 | 23:12:13
  2 |        0 | 11:12:12
  3 |        0 | 16:00:00
  4 |        0 | 00:59:59
(5 rows)

-- select sysdate with group by having (explain)
--Testcase 2723:
EXPLAIN VERBOSE
SELECT id, datediff(sysdate(), sysdate()), c1 FROM time_tbl GROUP BY datediff(sysdate(), sysdate()),c1,id HAVING datediff(sysdate(), sysdate()) >= 0 ORDER BY 1,2,3;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=12633.40..12639.09 rows=2275 width=16)
   Output: id, (datediff(sysdate(), sysdate())), c1
   Sort Key: time_tbl.id, (datediff(sysdate(), sysdate())), time_tbl.c1
   ->  HashAggregate  (cost=5595.47..12506.55 rows=2275 width=16)
         Output: id, (datediff(sysdate(), sysdate())), c1
         Group Key: time_tbl.id, (datediff(sysdate(), sysdate())), time_tbl.c1
         Filter: ((datediff(sysdate(), sysdate())) >= 0)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=16)
               Output: id, (datediff(sysdate(), sysdate())), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `id`, datediff(sysdate(), sysdate()), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT id, public.datediff(public.sysdate(), public.sysdate()), c1 FROM public.time_tbl1mysql
(16 rows)

-- select sysdate with group by having (result)
--Testcase 2724:
SELECT id, datediff(sysdate(), sysdate()), c1 FROM time_tbl GROUP BY datediff(sysdate(), sysdate()),c1,id HAVING datediff(sysdate(), sysdate()) >= 0 ORDER BY 1,2,3;
 id | datediff |    c1    
----+----------+----------
  0 |        0 | 12:10:30
  1 |        0 | 23:12:13
  2 |        0 | 11:12:12
  3 |        0 | 16:00:00
  4 |        0 | 00:59:59
(5 rows)

-- select sysdate with group by index having (explain)
--Testcase 2725:
EXPLAIN VERBOSE
SELECT id, datediff(sysdate(), sysdate()), c1 FROM time_tbl GROUP BY 3,2,1 HAVING datediff(sysdate(), sysdate()) >= 0 ORDER BY 1,2,3;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=12633.40..12639.09 rows=2275 width=16)
   Output: id, (datediff(sysdate(), sysdate())), c1
   Sort Key: time_tbl.id, (datediff(sysdate(), sysdate())), time_tbl.c1
   ->  HashAggregate  (cost=5595.47..12506.55 rows=2275 width=16)
         Output: id, (datediff(sysdate(), sysdate())), c1
         Group Key: time_tbl.id, (datediff(sysdate(), sysdate())), time_tbl.c1
         Filter: ((datediff(sysdate(), sysdate())) >= 0)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=16)
               Output: id, (datediff(sysdate(), sysdate())), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `id`, datediff(sysdate(), sysdate()), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT id, public.datediff(public.sysdate(), public.sysdate()), c1 FROM public.time_tbl1mysql
(16 rows)

-- select sysdate with group by index having (result)
--Testcase 2726:
SELECT id, datediff(sysdate(), sysdate()), c1 FROM time_tbl GROUP BY 3,2,1 HAVING datediff(sysdate(), sysdate()) >= 0 ORDER BY 1,2,3;
 id | datediff |    c1    
----+----------+----------
  0 |        0 | 12:10:30
  1 |        0 | 23:12:13
  2 |        0 | 11:12:12
  3 |        0 | 16:00:00
  4 |        0 | 00:59:59
(5 rows)

-- sysdate constraints with group by (explain)
--Testcase 2727:
EXPLAIN VERBOSE
SELECT id, c1 FROM time_tbl WHERE addtime(sysdate(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp GROUP BY id,c1 ORDER BY 1,2;
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1889.91..1889.92 rows=0 width=12)
   Output: id, c1
   Sort Key: time_tbl.id, time_tbl.c1
   ->  Foreign Scan  (cost=115.69..1889.90 rows=0 width=12)
         Output: id, c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `id`, `c1` FROM `test`.`time_tbl2` WHERE ((addtime(sysdate(), '1 12:59:10.0') > '1997-10-14 00:00:00')) GROUP BY 1, 2
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT id, c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.sysdate(), '1 day 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp without time zone)) GROUP BY 1, 2
(16 rows)

-- sysdate constraints with group by (result)
--Testcase 2728:
SELECT id, c1 FROM time_tbl WHERE addtime(sysdate(), '1 12:59:10'::interval) > '1997-10-14 00:00:00'::timestamp GROUP BY id,c1 ORDER BY 1,2;
 id |    c1    
----+----------
  0 | 12:10:30
  1 | 23:12:13
  2 | 11:12:12
  3 | 16:00:00
  4 | 00:59:59
(5 rows)

-- select sysdate and as (explain)
--Testcase 2729:
EXPLAIN VERBOSE
SELECT datediff(sysdate(), sysdate()) as sysdate1 FROM time_tbl;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=4)
   Output: (datediff(sysdate(), sysdate()))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT datediff(sysdate(), sysdate()) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.datediff(public.sysdate(), public.sysdate()) FROM public.time_tbl1mysql
(7 rows)

-- select sysdate and as (result)
--Testcase 2730:
SELECT datediff(sysdate(), sysdate()) as sysdate1 FROM time_tbl;
 sysdate1 
----------
        0
        0
        0
        0
        0
(5 rows)

-- SUBTIME()
-- select subtime (stub function, explain)
--Testcase 2731:
EXPLAIN VERBOSE
SELECT subtime(c3, '1 12:59:10'), subtime(c3, INTERVAL '6 months 2 hours 30 minutes'), subtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9391.99..9409.05 rows=6826 width=48)
   Output: (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (subtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(time_tbl.c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8957.28 rows=6826 width=48)
         Output: (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subtime(`c3`, '1 12:59:10.0'), subtime(`c3`, '180 2:30:0.0'), subtime(timediff(`c3`, '2008-01-01 00:00:00.000001'), '180 2:30:0.0'), subtime('1 12:59:10.0', '180 2:30:0.0') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subtime(c3, '1 day 12:59:10'::interval), public.subtime(c3, '6 mons 02:30:00'::interval), public.subtime(public.timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '6 mons 02:30:00'::interval), public.subtime('1 day 12:59:10'::interval, '6 mons 02:30:00'::interval) FROM public.time_tbl1mysql
(12 rows)

-- select subtime (stub function, result)
--Testcase 2732:
SELECT subtime(c3, '1 12:59:10'), subtime(c3, INTERVAL '6 months 2 hours 30 minutes'), subtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl ORDER BY 1,2,3,4;
       subtime       |       subtime       | subtime |         subtime         
---------------------+---------------------+---------+-------------------------
 2021-01-01 23:11:20 | 2020-11-29 13:10:31 | @ 0     | @ 802 hours 49 secs ago
 2021-01-03 10:13:03 | 2020-12-01 00:12:14 | @ 0     | @ 802 hours 49 secs ago
 2021-01-03 22:13:02 | 2020-12-01 12:12:13 | @ 0     | @ 802 hours 49 secs ago
 2021-01-05 03:00:50 | 2020-12-02 17:00:01 | @ 0     | @ 802 hours 49 secs ago
 2021-01-05 12:00:49 | 2020-12-03 02:00:00 | @ 0     | @ 802 hours 49 secs ago
(5 rows)

-- select subtime (stub function, not pushdown constraints, explain)
--Testcase 2733:
EXPLAIN VERBOSE
SELECT subtime(c3, '1 12:59:10'), subtime(c3, INTERVAL '6 months 2 hours 30 minutes'), subtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.09..434.18 rows=34 width=48)
   Output: (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (subtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(time_tbl.c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.23 rows=34 width=48)
         Output: (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subtime(`c3`, '1 12:59:10.0'), subtime(`c3`, '180 2:30:0.0'), subtime(timediff(`c3`, '2008-01-01 00:00:00.000001'), '180 2:30:0.0'), subtime('1 12:59:10.0', '180 2:30:0.0'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subtime(c3, '1 day 12:59:10'::interval), public.subtime(c3, '6 mons 02:30:00'::interval), public.subtime(public.timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '6 mons 02:30:00'::interval), public.subtime('1 day 12:59:10'::interval, '6 mons 02:30:00'::interval), id FROM public.time_tbl1mysql
(13 rows)

-- select subtime (stub function, not pushdown constraints, result)
--Testcase 2734:
SELECT subtime(c3, '1 12:59:10'), subtime(c3, INTERVAL '6 months 2 hours 30 minutes'), subtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
       subtime       |       subtime       | subtime |         subtime         
---------------------+---------------------+---------+-------------------------
 2021-01-03 10:13:03 | 2020-12-01 00:12:14 | @ 0     | @ 802 hours 49 secs ago
(1 row)

-- select subtime (stub function, pushdown constraints, explain)
--Testcase 2735:
EXPLAIN VERBOSE
SELECT subtime(c3, '1 12:59:10'), subtime(c3, INTERVAL '6 months 2 hours 30 minutes'), subtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9363.46..9380.44 rows=6792 width=48)
   Output: (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (subtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(time_tbl.c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8931.17 rows=6792 width=48)
         Output: (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subtime(`c3`, '1 12:59:10.0'), subtime(`c3`, '180 2:30:0.0'), subtime(timediff(`c3`, '2008-01-01 00:00:00.000001'), '180 2:30:0.0'), subtime('1 12:59:10.0', '180 2:30:0.0') FROM `test`.`time_tbl2` WHERE ((`id` <> 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subtime(c3, '1 day 12:59:10'::interval), public.subtime(c3, '6 mons 02:30:00'::interval), public.subtime(public.timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '6 mons 02:30:00'::interval), public.subtime('1 day 12:59:10'::interval, '6 mons 02:30:00'::interval) FROM public.time_tbl1mysql WHERE ((id <> 0))
(12 rows)

-- select subtime (stub function, pushdown constraints, result)
--Testcase 2736:
SELECT subtime(c3, '1 12:59:10'), subtime(c3, INTERVAL '6 months 2 hours 30 minutes'), subtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
       subtime       |       subtime       | subtime |         subtime         
---------------------+---------------------+---------+-------------------------
 2021-01-03 10:13:03 | 2020-12-01 00:12:14 | @ 0     | @ 802 hours 49 secs ago
 2021-01-03 22:13:02 | 2020-12-01 12:12:13 | @ 0     | @ 802 hours 49 secs ago
 2021-01-05 03:00:50 | 2020-12-02 17:00:01 | @ 0     | @ 802 hours 49 secs ago
 2021-01-05 12:00:49 | 2020-12-03 02:00:00 | @ 0     | @ 802 hours 49 secs ago
(4 rows)

-- select subtime (stub function, subtime in constraints, explain)
--Testcase 2737:
EXPLAIN VERBOSE
SELECT subtime(c3, '1 12:59:10'), subtime(c3, INTERVAL '6 months 2 hours 30 minutes'), subtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE subtime(c3, '1 12:59:10') != '2000-01-01' ORDER BY 1,2,3,4;
                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11069.96..11086.94 rows=6792 width=48)
   Output: (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (subtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(time_tbl.c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..10637.67 rows=6792 width=48)
         Output: (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subtime(`c3`, '1 12:59:10.0'), subtime(`c3`, '180 2:30:0.0'), subtime(timediff(`c3`, '2008-01-01 00:00:00.000001'), '180 2:30:0.0'), subtime('1 12:59:10.0', '180 2:30:0.0') FROM `test`.`time_tbl2` WHERE ((subtime(`c3`, '1 12:59:10.0') <> '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subtime(c3, '1 day 12:59:10'::interval), public.subtime(c3, '6 mons 02:30:00'::interval), public.subtime(public.timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '6 mons 02:30:00'::interval), public.subtime('1 day 12:59:10'::interval, '6 mons 02:30:00'::interval) FROM public.time_tbl1mysql WHERE ((public.subtime(c3, '1 day 12:59:10'::interval) <> '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- select subtime (stub function, subtime in constraints, result)
--Testcase 2738:
SELECT subtime(c3, '1 12:59:10'), subtime(c3, INTERVAL '6 months 2 hours 30 minutes'), subtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE subtime(c3, '1 12:59:10') != '2000-01-01' ORDER BY 1,2,3,4;
       subtime       |       subtime       | subtime |         subtime         
---------------------+---------------------+---------+-------------------------
 2021-01-01 23:11:20 | 2020-11-29 13:10:31 | @ 0     | @ 802 hours 49 secs ago
 2021-01-03 10:13:03 | 2020-12-01 00:12:14 | @ 0     | @ 802 hours 49 secs ago
 2021-01-03 22:13:02 | 2020-12-01 12:12:13 | @ 0     | @ 802 hours 49 secs ago
 2021-01-05 03:00:50 | 2020-12-02 17:00:01 | @ 0     | @ 802 hours 49 secs ago
 2021-01-05 12:00:49 | 2020-12-03 02:00:00 | @ 0     | @ 802 hours 49 secs ago
(5 rows)

-- select subtime (stub function, subtime in constraints, explain)
--Testcase 2739:
EXPLAIN VERBOSE
SELECT subtime(c3, '1 12:59:10'), subtime(c3, INTERVAL '6 months 2 hours 30 minutes'), subtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') > '-902:00:49'::interval ORDER BY 1,2,3,4;
                                                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5029.26..5034.95 rows=2276 width=48)
   Output: (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (subtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(time_tbl.c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4902.35 rows=2276 width=48)
         Output: (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subtime(c3, '@ 6 mons 2 hours 30 mins'::interval)), (subtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), (subtime('@ 1 day 12 hours 59 mins 10 secs'::interval, '@ 6 mons 2 hours 30 mins'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subtime(`c3`, '1 12:59:10.0'), subtime(`c3`, '180 2:30:0.0'), subtime(timediff(`c3`, '2008-01-01 00:00:00.000001'), '180 2:30:0.0'), subtime('1 12:59:10.0', '180 2:30:0.0') FROM `test`.`time_tbl2` WHERE ((subtime('1 12:59:10.0', '180 2:30:0.0') > '0 -902:0:-49.0'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subtime(c3, '1 day 12:59:10'::interval), public.subtime(c3, '6 mons 02:30:00'::interval), public.subtime(public.timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '6 mons 02:30:00'::interval), public.subtime('1 day 12:59:10'::interval, '6 mons 02:30:00'::interval) FROM public.time_tbl1mysql WHERE ((public.subtime('1 day 12:59:10'::interval, '6 mons 02:30:00'::interval) > '-902:00:49'::interval))
(12 rows)

-- select subtime (stub function, subtime in constraints, result)
--Testcase 2740:
SELECT subtime(c3, '1 12:59:10'), subtime(c3, INTERVAL '6 months 2 hours 30 minutes'), subtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') > '-902:00:49'::interval ORDER BY 1,2,3,4;
 subtime | subtime | subtime | subtime 
---------+---------+---------+---------
(0 rows)

-- select subtime with agg (pushdown, explain)
--Testcase 2741:
EXPLAIN VERBOSE
SELECT max(c1), subtime(max(c1), '1 12:59:10'::interval) FROM time_tbl;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=24)
   Output: (max(c1)), subtime(((max(c1)))::interval, '@ 1 day 12 hours 59 mins 10 secs'::interval)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c1`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c1) FROM public.time_tbl1mysql
(11 rows)

-- select subtime as nest function with agg (pushdown, result)
--Testcase 2742:
SELECT max(c1), subtime(max(c1), '1 12:59:10'::interval) FROM time_tbl;
ERROR:  stub subtime(interval, interval) is called
CONTEXT:  PL/pgSQL function subtime(interval,interval) line 3 at RAISE
-- select subtime as nest with stub (pushdown, explain)
--Testcase 2743:
EXPLAIN VERBOSE
SELECT subtime(mysql_timestamp(c2), '1 12:59:10'::interval) FROM time_tbl ORDER BY 1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=8)
   Output: (subtime(mysql_timestamp((c2)::timestamp without time zone), '@ 1 day 12 hours 59 mins 10 secs'::interval))
   Sort Key: (subtime(mysql_timestamp((time_tbl.c2)::timestamp without time zone), '@ 1 day 12 hours 59 mins 10 secs'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=8)
         Output: (subtime(mysql_timestamp((c2)::timestamp without time zone), '@ 1 day 12 hours 59 mins 10 secs'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subtime(timestamp(`c2`), '1 12:59:10.0') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subtime(public.mysql_timestamp(c2), '1 day 12:59:10'::interval) FROM public.time_tbl1mysql
(12 rows)

-- select subtime as nest with stub (pushdown, result)
--Testcase 2744:
SELECT subtime(mysql_timestamp(c2), '1 12:59:10'::interval) FROM time_tbl ORDER BY 1;
       subtime       
---------------------
 2020-12-30 11:00:50
 2020-12-31 11:00:50
 2021-01-08 11:00:50
 2021-01-13 11:00:50
 2021-01-27 11:00:50
(5 rows)

-- select subtime with non pushdown func and explicit constant (explain)
--Testcase 2745:
EXPLAIN VERBOSE
SELECT subtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=56)
   Output: (subtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), '3.141592653589793'::double precision, 4.1
   Sort Key: (subtime(timediff(time_tbl.c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=56)
         Output: (subtime(timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '@ 6 mons 2 hours 30 mins'::interval)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subtime(timediff(`c3`, '2008-01-01 00:00:00.000001'), '180 2:30:0.0'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subtime(public.timediff(c3, '2008-01-01 00:00:00.000001'::timestamp without time zone), '6 mons 02:30:00'::interval), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select subtime with non pushdown func and explicit constant (result)
--Testcase 2746:
SELECT subtime(timediff(c3, '2008-01-01 00:00:00.000001'), INTERVAL '6 months 2 hours 30 minutes'), pi(), 4.1 FROM time_tbl ORDER BY 1;
 subtime |        pi         | ?column? 
---------+-------------------+----------
 @ 0     | 3.141592653589793 |      4.1
 @ 0     | 3.141592653589793 |      4.1
 @ 0     | 3.141592653589793 |      4.1
 @ 0     | 3.141592653589793 |      4.1
 @ 0     | 3.141592653589793 |      4.1
(5 rows)

-- select subtime with order by (explain)
--Testcase 2747:
EXPLAIN VERBOSE
SELECT id, subtime(c1, c1 + '1 12:59:10') FROM time_tbl order by id,subtime(c1, c1 + '1 12:59:10');
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=20)
   Output: id, (subtime(c1, (c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: time_tbl.id, (subtime(time_tbl.c1, (time_tbl.c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=20)
         Output: id, (subtime(c1, (c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, subtime(`c1`, (`c1` + '1 12:59:10.0')) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.subtime(c1, (c1 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select subtime with order by (result)
--Testcase 2748:
SELECT id, subtime(c1, c1 + '1 12:59:10') FROM time_tbl order by id,subtime(c1, c1 + '1 12:59:10');
 id |   subtime   
----+-------------
  0 | @ 1 sec ago
  1 | @ 1 sec ago
  2 | @ 1 sec ago
  3 | @ 1 sec ago
  4 | 
(5 rows)

-- select subtime with order by index (result)
--Testcase 2749:
SELECT id, subtime(c1, c1 + '1 12:59:10') FROM time_tbl order by 2,1;
 id |   subtime   
----+-------------
  0 | @ 1 sec ago
  1 | @ 1 sec ago
  2 | @ 1 sec ago
  3 | @ 1 sec ago
  4 | 
(5 rows)

-- select subtime with order by index (result)
--Testcase 2750:
SELECT id, subtime(c1, c1 + '1 12:59:10') FROM time_tbl order by 1,2;
 id |   subtime   
----+-------------
  0 | @ 1 sec ago
  1 | @ 1 sec ago
  2 | @ 1 sec ago
  3 | @ 1 sec ago
  4 | 
(5 rows)

-- select subtime with group by (explain)
--Testcase 2751:
EXPLAIN VERBOSE
SELECT count(id), subtime(c1, c1 + '1 12:59:10') FROM time_tbl group by subtime(c1, c1 + '1 12:59:10') ORDER BY 1,2;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=24)
   Output: (count(id)), (subtime(c1, (c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: (count(time_tbl.id)), (subtime(time_tbl.c1, (time_tbl.c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=24)
         Output: count(id), (subtime(c1, (c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Group Key: (subtime(time_tbl.c1, (time_tbl.c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=20)
               Output: (subtime(c1, (c1 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT subtime(`c1`, (`c1` + '1 12:59:10.0')), `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.subtime(c1, (c1 + '1 day 12:59:10'::interval)), id FROM public.time_tbl1mysql
(15 rows)

-- select subtime with group by (result)
--Testcase 2752:
SELECT count(id), subtime(c1, c1 + '1 12:59:10') FROM time_tbl group by subtime(c1, c1 + '1 12:59:10') ORDER BY 1,2;
 count |   subtime   
-------+-------------
     1 | 
     4 | @ 1 sec ago
(2 rows)

-- select subtime with group by index (result)
--Testcase 2753:
SELECT id, subtime(c1, c1 + '1 12:59:10') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id |   subtime   
----+-------------
  0 | @ 1 sec ago
  1 | @ 1 sec ago
  2 | @ 1 sec ago
  3 | @ 1 sec ago
  4 | 
(5 rows)

-- select subtime with group by index (result)
--Testcase 2754:
SELECT id, subtime(c1, c1 + '1 12:59:10') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id |   subtime   
----+-------------
  0 | @ 1 sec ago
  1 | @ 1 sec ago
  2 | @ 1 sec ago
  3 | @ 1 sec ago
  4 | 
(5 rows)

-- select subtime with group by having (explain)
--Testcase 2755:
EXPLAIN VERBOSE
SELECT count(id), subtime(c3, '1 12:59:10') FROM time_tbl group by subtime(c3, '1 12:59:10'), c3 HAVING subtime(c3, '1 12:59:10') < '2080-01-01'::timestamp ORDER BY 1,2;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2253.76..2253.92 rows=67 width=24)
   Output: (count(id)), (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), c3
   Sort Key: (count(time_tbl.id)), (subtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))
   ->  HashAggregate  (cost=2182.47..2251.72 rows=67 width=24)
         Output: count(id), (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), c3
         Group Key: (subtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), time_tbl.c3
         Filter: ((subtime(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)) < '2080-01-01 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=20)
               Output: (subtime(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), c3, id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT subtime(`c3`, '1 12:59:10.0'), `c3`, `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.subtime(c3, '1 day 12:59:10'::interval), c3, id FROM public.time_tbl1mysql
(16 rows)

-- select subtime with group by having (result)
--Testcase 2756:
SELECT count(id), subtime(c3, '1 12:59:10') FROM time_tbl group by subtime(c3, '1 12:59:10'), c3 HAVING subtime(c3, '1 12:59:10') < '2080-01-01'::timestamp ORDER BY 1,2;
 count |       subtime       
-------+---------------------
     1 | 2021-01-01 23:11:20
     1 | 2021-01-03 10:13:03
     1 | 2021-01-03 22:13:02
     1 | 2021-01-05 03:00:50
     1 | 2021-01-05 12:00:49
(5 rows)

-- select subtime and as
--Testcase 2757:
SELECT subtime(c3, '1 12:59:10') as subtime1, subtime(c3, INTERVAL '6 months 2 hours 30 minutes') as subtime2, subtime(timediff(c3, '2008-01-01 00:00:00.000001') , INTERVAL '6 months 2 hours 30 minutes') as subtime3, subtime('1 12:59:10', INTERVAL '6 months 2 hours 30 minutes') as subtime4 FROM time_tbl ORDER BY 1,2,3,4;
      subtime1       |      subtime2       | subtime3 |        subtime4         
---------------------+---------------------+----------+-------------------------
 2021-01-01 23:11:20 | 2020-11-29 13:10:31 | @ 0      | @ 802 hours 49 secs ago
 2021-01-03 10:13:03 | 2020-12-01 00:12:14 | @ 0      | @ 802 hours 49 secs ago
 2021-01-03 22:13:02 | 2020-12-01 12:12:13 | @ 0      | @ 802 hours 49 secs ago
 2021-01-05 03:00:50 | 2020-12-02 17:00:01 | @ 0      | @ 802 hours 49 secs ago
 2021-01-05 12:00:49 | 2020-12-03 02:00:00 | @ 0      | @ 802 hours 49 secs ago
(5 rows)

-- SUBDATE()
-- select subdate (stub function, explain)
--Testcase 2758:
EXPLAIN VERBOSE
SELECT subdate(c2, '1 12:59:10'), subdate(c3, INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl ORDER BY 1,2;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=16)
   Output: (subdate((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(c3, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (subdate((time_tbl.c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=16)
         Output: (subdate((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(c3, '@ 6 mons 2 hours 30 mins'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subdate(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), subdate(`c3`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subdate(c2, '1 day 12:59:10'::interval), public.subdate(c3, '6 mons 02:30:00'::interval) FROM public.time_tbl1mysql
(12 rows)

-- select subdate (stub function, result)
--Testcase 2759:
SELECT subdate(c2, '1 12:59:10'), subdate(c3, INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl ORDER BY 1,2;
       subdate       |       subdate       
---------------------+---------------------
 2020-12-30 11:00:50 | 2020-07-08 20:42:13
 2020-12-31 11:00:50 | 2020-07-07 09:40:30
 2021-01-08 11:00:50 | 2020-07-09 08:42:12
 2021-01-13 11:00:50 | 2020-07-10 13:30:00
 2021-01-27 11:00:50 | 2020-07-10 22:29:59
(5 rows)

-- select subdate (stub function, not pushdown constraints, explain)
--Testcase 2760:
EXPLAIN VERBOSE
SELECT subdate(c2, '1 12:59:10'), subdate(c3, INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=408.68..408.76 rows=34 width=16)
   Output: (subdate((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(c3, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (subdate((time_tbl.c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..407.81 rows=34 width=16)
         Output: (subdate((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(c3, '@ 6 mons 2 hours 30 mins'::interval))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subdate(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), subdate(`c3`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subdate(c2, '1 day 12:59:10'::interval), public.subdate(c3, '6 mons 02:30:00'::interval), id FROM public.time_tbl1mysql
(13 rows)

-- select subdate (stub function, not pushdown constraints, result)
--Testcase 2761:
SELECT subdate(c2, '1 12:59:10'), subdate(c3, INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
       subdate       |       subdate       
---------------------+---------------------
 2020-12-30 11:00:50 | 2020-07-08 20:42:13
(1 row)

-- select subdate (stub function, pushdown constraints, explain)
--Testcase 2762:
EXPLAIN VERBOSE
SELECT subdate(c2, '1 12:59:10'), subdate(c3, INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE id != 0 ORDER BY 1,2;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4286.44..4303.42 rows=6792 width=16)
   Output: (subdate((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(c3, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (subdate((time_tbl.c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.14 rows=6792 width=16)
         Output: (subdate((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(c3, '@ 6 mons 2 hours 30 mins'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subdate(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), subdate(`c3`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND) FROM `test`.`time_tbl2` WHERE ((`id` <> 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subdate(c2, '1 day 12:59:10'::interval), public.subdate(c3, '6 mons 02:30:00'::interval) FROM public.time_tbl1mysql WHERE ((id <> 0))
(12 rows)

-- select subdate (stub function, pushdown constraints, result)
--Testcase 2763:
SELECT subdate(c2, '1 12:59:10'), subdate(c3, INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE id != 0 ORDER BY 1,2;
       subdate       |       subdate       
---------------------+---------------------
 2020-12-30 11:00:50 | 2020-07-08 20:42:13
 2021-01-08 11:00:50 | 2020-07-09 08:42:12
 2021-01-13 11:00:50 | 2020-07-10 13:30:00
 2021-01-27 11:00:50 | 2020-07-10 22:29:59
(4 rows)

-- select subdate (stub function, subdate in constraints, explain)
--Testcase 2764:
EXPLAIN VERBOSE
SELECT subdate(c2, '1 12:59:10'), subdate(c3, INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE subdate(c3, '1 12:59:10') != '2000-01-01' ORDER BY 1,2;
                                                                                                                               QUERY PLAN                                                                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5992.94..6009.92 rows=6792 width=16)
   Output: (subdate((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(c3, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (subdate((time_tbl.c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5560.64 rows=6792 width=16)
         Output: (subdate((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(c3, '@ 6 mons 2 hours 30 mins'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subdate(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), subdate(`c3`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND) FROM `test`.`time_tbl2` WHERE ((subdate(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND) <> '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subdate(c2, '1 day 12:59:10'::interval), public.subdate(c3, '6 mons 02:30:00'::interval) FROM public.time_tbl1mysql WHERE ((public.subdate(c3, '1 day 12:59:10'::interval) <> '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- select subdate (stub function, subdate in constraints, result)
--Testcase 2765:
SELECT subdate(c2, '1 12:59:10'), subdate(c3, INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE subdate(c3, '1 12:59:10') != '2000-01-01' ORDER BY 1,2;
       subdate       |       subdate       
---------------------+---------------------
 2020-12-30 11:00:50 | 2020-07-08 20:42:13
 2020-12-31 11:00:50 | 2020-07-07 09:40:30
 2021-01-08 11:00:50 | 2020-07-09 08:42:12
 2021-01-13 11:00:50 | 2020-07-10 13:30:00
 2021-01-27 11:00:50 | 2020-07-10 22:29:59
(5 rows)

-- select subdate (stub function, subdate in constraints, explain)
--Testcase 2766:
EXPLAIN VERBOSE
SELECT subdate(c2, '1 12:59:10'), subdate(c3, INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE subdate(c2, INTERVAL '6 months 2 hours 30 minutes') > '2008-01-01 00:00:00.000001'::timestamp ORDER BY 1,2;
                                                                                                                                  QUERY PLAN                                                                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3345.01..3350.70 rows=2276 width=16)
   Output: (subdate((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(c3, '@ 6 mons 2 hours 30 mins'::interval))
   Sort Key: (subdate((time_tbl.c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3218.10 rows=2276 width=16)
         Output: (subdate((c2)::timestamp without time zone, '@ 1 day 12 hours 59 mins 10 secs'::interval)), (subdate(c3, '@ 6 mons 2 hours 30 mins'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subdate(`c2`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), subdate(`c3`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND) FROM `test`.`time_tbl2` WHERE ((subdate(`c2`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND) > '2008-01-01 00:00:00.000001'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subdate(c2, '1 day 12:59:10'::interval), public.subdate(c3, '6 mons 02:30:00'::interval) FROM public.time_tbl1mysql WHERE ((public.subdate(c2, '6 mons 02:30:00'::interval) > '2008-01-01 00:00:00.000001'::timestamp without time zone))
(12 rows)

-- select subdate (stub function, subdate in constraints, result)
--Testcase 2767:
SELECT subdate(c2, '1 12:59:10'), subdate(c3, INTERVAL '6 months 2 hours 30 minutes') FROM time_tbl WHERE subdate(c2, INTERVAL '6 months 2 hours 30 minutes') > '2008-01-01 00:00:00.000001'::timestamp ORDER BY 1,2;
       subdate       |       subdate       
---------------------+---------------------
 2020-12-30 11:00:50 | 2020-07-08 20:42:13
 2020-12-31 11:00:50 | 2020-07-07 09:40:30
 2021-01-08 11:00:50 | 2020-07-09 08:42:12
 2021-01-13 11:00:50 | 2020-07-10 13:30:00
 2021-01-27 11:00:50 | 2020-07-10 22:29:59
(5 rows)

-- select subdate with agg (pushdown, explain)
--Testcase 2768:
EXPLAIN VERBOSE
SELECT max(c1), subdate(max(c3), '1 12:59:10'::interval) FROM time_tbl;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (max(c1)), subdate((max(c3)), '@ 1 day 12 hours 59 mins 10 secs'::interval)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c1`), max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c1), max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select subdate as nest function with agg (pushdown, result)
--Testcase 2769:
SELECT max(c1), subdate(max(c3), '1 12:59:10'::interval) FROM time_tbl;
ERROR:  stub subdate(timestamp, interval) is called
CONTEXT:  PL/pgSQL function subdate(timestamp without time zone,interval) line 3 at RAISE
-- select subdate as nest with stub (pushdown, explain)
--Testcase 2770:
EXPLAIN VERBOSE
SELECT subdate(adddate(c3, INTERVAL '6 months 2 hours 30 minutes'), '1 12:59:10'::interval) FROM time_tbl ORDER BY 1;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=8)
   Output: (subdate(adddate(c3, '@ 6 mons 2 hours 30 mins'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval))
   Sort Key: (subdate(adddate(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (subdate(adddate(c3, '@ 6 mons 2 hours 30 mins'::interval), '@ 1 day 12 hours 59 mins 10 secs'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subdate(adddate(`c3`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND), INTERVAL '1 12:59:10.0' DAY_MICROSECOND) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subdate(public.adddate(c3, '6 mons 02:30:00'::interval), '1 day 12:59:10'::interval) FROM public.time_tbl1mysql
(12 rows)

-- select subdate as nest with stub (pushdown, result)
--Testcase 2771:
SELECT subdate(adddate(c3, INTERVAL '6 months 2 hours 30 minutes'), '1 12:59:10'::interval) FROM time_tbl ORDER BY 1;
       subdate       
---------------------
 2021-07-01 01:41:20
 2021-07-02 12:43:03
 2021-07-03 00:43:02
 2021-07-04 05:30:50
 2021-07-04 14:30:49
(5 rows)

-- select subdate with non pushdown func and explicit constant (explain)
--Testcase 2772:
EXPLAIN VERBOSE
SELECT subdate(adddate(c3, INTERVAL '6 months 2 hours 30 minutes'), INTERVAL '6 months 2 hours 30 minutes'), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=48)
   Output: (subdate(adddate(c3, '@ 6 mons 2 hours 30 mins'::interval), '@ 6 mons 2 hours 30 mins'::interval)), '3.141592653589793'::double precision, 4.1
   Sort Key: (subdate(adddate(time_tbl.c3, '@ 6 mons 2 hours 30 mins'::interval), '@ 6 mons 2 hours 30 mins'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=48)
         Output: (subdate(adddate(c3, '@ 6 mons 2 hours 30 mins'::interval), '@ 6 mons 2 hours 30 mins'::interval)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT subdate(adddate(`c3`, INTERVAL '180 2:30:0.0' DAY_MICROSECOND), INTERVAL '180 2:30:0.0' DAY_MICROSECOND), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.subdate(public.adddate(c3, '6 mons 02:30:00'::interval), '6 mons 02:30:00'::interval), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select subdate with non pushdown func and explicit constant (result)
--Testcase 2773:
SELECT subdate(adddate(c3, INTERVAL '6 months 2 hours 30 minutes'), INTERVAL '6 months 2 hours 30 minutes'), pi(), 4.1 FROM time_tbl ORDER BY 1;
       subdate       |        pi         | ?column? 
---------------------+-------------------+----------
 2021-01-03 12:10:30 | 3.141592653589793 |      4.1
 2021-01-04 23:12:13 | 3.141592653589793 |      4.1
 2021-01-05 11:12:12 | 3.141592653589793 |      4.1
 2021-01-06 16:00:00 | 3.141592653589793 |      4.1
 2021-01-07 00:59:59 | 3.141592653589793 |      4.1
(5 rows)

-- select subdate with order by (explain)
--Testcase 2774:
EXPLAIN VERBOSE
SELECT id, subdate(c3, '1 12:59:10'::interval) FROM time_tbl order by id,subdate(c3, '1 12:59:10'::interval);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=12)
   Output: id, (subdate(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))
   Sort Key: time_tbl.id, (subdate(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
         Output: id, (subdate(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, subdate(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.subdate(c3, '1 day 12:59:10'::interval) FROM public.time_tbl1mysql
(12 rows)

-- select subdate with order by (result)
--Testcase 2775:
SELECT id, subdate(c3, '1 12:59:10'::interval) FROM time_tbl order by id,subdate(c3, '1 12:59:10'::interval);
 id |       subdate       
----+---------------------
  0 | 2021-01-01 23:11:20
  1 | 2021-01-03 10:13:03
  2 | 2021-01-03 22:13:02
  3 | 2021-01-05 03:00:50
  4 | 2021-01-05 12:00:49
(5 rows)

-- select subdate with order by index (result)
--Testcase 2776:
SELECT id, subdate(c3, '1 12:59:10'::interval) FROM time_tbl order by 2,1;
 id |       subdate       
----+---------------------
  0 | 2021-01-01 23:11:20
  1 | 2021-01-03 10:13:03
  2 | 2021-01-03 22:13:02
  3 | 2021-01-05 03:00:50
  4 | 2021-01-05 12:00:49
(5 rows)

-- select subdate with order by index (result)
--Testcase 2777:
SELECT id, subdate(c3, '1 12:59:10'::interval) FROM time_tbl order by 1,2;
 id |       subdate       
----+---------------------
  0 | 2021-01-01 23:11:20
  1 | 2021-01-03 10:13:03
  2 | 2021-01-03 22:13:02
  3 | 2021-01-05 03:00:50
  4 | 2021-01-05 12:00:49
(5 rows)

-- select subdate with group by (explain)
--Testcase 2778:
EXPLAIN VERBOSE
SELECT count(id), subdate(c3, '1 12:59:10'::interval) FROM time_tbl group by subdate(c3, '1 12:59:10'::interval) ORDER BY 1,2;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=16)
   Output: (count(id)), (subdate(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))
   Sort Key: (count(time_tbl.id)), (subdate(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=16)
         Output: count(id), (subdate(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))
         Group Key: (subdate(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (subdate(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT subdate(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.subdate(c3, '1 day 12:59:10'::interval), id FROM public.time_tbl1mysql
(15 rows)

-- select subdate with group by (result)
--Testcase 2779:
SELECT count(id), subdate(c3, '1 12:59:10'::interval) FROM time_tbl group by subdate(c3, '1 12:59:10'::interval) ORDER BY 1,2;
 count |       subdate       
-------+---------------------
     1 | 2021-01-01 23:11:20
     1 | 2021-01-03 10:13:03
     1 | 2021-01-03 22:13:02
     1 | 2021-01-05 03:00:50
     1 | 2021-01-05 12:00:49
(5 rows)

-- select subdate with group by index (result)
--Testcase 2780:
SELECT id, subdate(c3, '1 12:59:10'::interval) FROM time_tbl group by 2,1 ORDER BY 1,2;
 id |       subdate       
----+---------------------
  0 | 2021-01-01 23:11:20
  1 | 2021-01-03 10:13:03
  2 | 2021-01-03 22:13:02
  3 | 2021-01-05 03:00:50
  4 | 2021-01-05 12:00:49
(5 rows)

-- select subdate with group by index (result)
--Testcase 2781:
SELECT id, subdate(c3, '1 12:59:10'::interval) FROM time_tbl group by 1,2 ORDER BY 1,2;
 id |       subdate       
----+---------------------
  0 | 2021-01-01 23:11:20
  1 | 2021-01-03 10:13:03
  2 | 2021-01-03 22:13:02
  3 | 2021-01-05 03:00:50
  4 | 2021-01-05 12:00:49
(5 rows)

-- select subdate with group by having (explain)
--Testcase 2782:
EXPLAIN VERBOSE
SELECT count(id), subdate(c3, '1 12:59:10') FROM time_tbl group by subdate(c3, '1 12:59:10'), c3 HAVING subdate(c3, '1 12:59:10') < '2080-01-01'::timestamp ORDER BY 1,2;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2253.76..2253.92 rows=67 width=24)
   Output: (count(id)), (subdate(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), c3
   Sort Key: (count(time_tbl.id)), (subdate(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))
   ->  HashAggregate  (cost=2182.47..2251.72 rows=67 width=24)
         Output: count(id), (subdate(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), c3
         Group Key: (subdate(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), time_tbl.c3
         Filter: ((subdate(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)) < '2080-01-01 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=20)
               Output: (subdate(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)), c3, id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT subdate(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND), `c3`, `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.subdate(c3, '1 day 12:59:10'::interval), c3, id FROM public.time_tbl1mysql
(16 rows)

-- select subdate with group by having (result)
--Testcase 2783:
SELECT count(id), subdate(c3, '1 12:59:10') FROM time_tbl group by subdate(c3, '1 12:59:10'), c3 HAVING subdate(c3, '1 12:59:10') < '2080-01-01'::timestamp ORDER BY 1,2;
 count |       subdate       
-------+---------------------
     1 | 2021-01-01 23:11:20
     1 | 2021-01-03 10:13:03
     1 | 2021-01-03 22:13:02
     1 | 2021-01-05 03:00:50
     1 | 2021-01-05 12:00:49
(5 rows)

-- select subdate and as
--Testcase 2784:
SELECT subdate(c3, '1 12:59:10') as subdate1, subdate(c3, INTERVAL '6 months 2 hours 30 minutes') as subdate2 FROM time_tbl ORDER BY 1,2;
      subdate1       |      subdate2       
---------------------+---------------------
 2021-01-01 23:11:20 | 2020-07-07 09:40:30
 2021-01-03 10:13:03 | 2020-07-08 20:42:13
 2021-01-03 22:13:02 | 2020-07-09 08:42:12
 2021-01-05 03:00:50 | 2020-07-10 13:30:00
 2021-01-05 12:00:49 | 2020-07-10 22:29:59
(5 rows)

-- STR_TO_DATE()
-- select str_to_date (stub function, explain)
--Testcase 2785:
EXPLAIN VERBOSE
SELECT str_to_date(c1, '%H:%i:%s'), str_to_date(c2, '%Y-%m-%d'), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl ORDER BY 1,2,3;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5996.05..6013.12 rows=6826 width=24)
   Output: (str_to_date(c1, '%H:%i:%s'::text)), (str_to_date((c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text))
   Sort Key: (str_to_date(time_tbl.c1, '%H:%i:%s'::text)), (str_to_date((time_tbl.c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(time_tbl.c3, '%Y-%m-%d %H:%i:%s'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=24)
         Output: (str_to_date(c1, '%H:%i:%s'::text)), (str_to_date((c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT str_to_date(`c1`, '%H:%i:%s'), str_to_date(`c2`, '%Y-%m-%d'), str_to_date(`c3`, '%Y-%m-%d %H:%i:%s') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.str_to_date(c1, '%H:%i:%s'::text), public.str_to_date(c2, '%Y-%m-%d'::text), public.str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text) FROM public.time_tbl1mysql
(12 rows)

-- select str_to_date (stub function, explain)
--Testcase 2786:
SELECT str_to_date(c1, '%H:%i:%s'), str_to_date(c2, '%Y-%m-%d'), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl ORDER BY 1,2,3;
 str_to_date |     str_to_date     |     str_to_date     
-------------+---------------------+---------------------
 00:59:59    | 2021-01-29 00:00:00 | 2021-01-07 00:59:59
 11:12:12    | 2021-01-10 00:00:00 | 2021-01-05 11:12:12
 12:10:30    | 2021-01-02 00:00:00 | 2021-01-03 12:10:30
 16:00:00    | 2021-01-15 00:00:00 | 2021-01-06 16:00:00
 23:12:13    | 2021-01-01 00:00:00 | 2021-01-04 23:12:13
(5 rows)

-- select str_to_date (stub function, not pushdown constraints, explain)
--Testcase 2787:
EXPLAIN VERBOSE
SELECT str_to_date(c1, '%H:%i:%s'), str_to_date(c2, '%Y-%m-%d'), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3;
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=417.18..417.26 rows=34 width=24)
   Output: (str_to_date(c1, '%H:%i:%s'::text)), (str_to_date((c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text))
   Sort Key: (str_to_date(time_tbl.c1, '%H:%i:%s'::text)), (str_to_date((time_tbl.c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(time_tbl.c3, '%Y-%m-%d %H:%i:%s'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..416.31 rows=34 width=24)
         Output: (str_to_date(c1, '%H:%i:%s'::text)), (str_to_date((c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT str_to_date(`c1`, '%H:%i:%s'), str_to_date(`c2`, '%Y-%m-%d'), str_to_date(`c3`, '%Y-%m-%d %H:%i:%s'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.str_to_date(c1, '%H:%i:%s'::text), public.str_to_date(c2, '%Y-%m-%d'::text), public.str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text), id FROM public.time_tbl1mysql
(13 rows)

-- select str_to_date (stub function, not pushdown constraints, result)
--Testcase 2788:
SELECT str_to_date(c1, '%H:%i:%s'), str_to_date(c2, '%Y-%m-%d'), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3;
 str_to_date |     str_to_date     |     str_to_date     
-------------+---------------------+---------------------
 23:12:13    | 2021-01-01 00:00:00 | 2021-01-04 23:12:13
(1 row)

-- select str_to_date (stub function, pushdown constraints, explain)
--Testcase 2789:
EXPLAIN VERBOSE
SELECT str_to_date(c1, '%H:%i:%s'), str_to_date(c2, '%Y-%m-%d'), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl WHERE id != 200 ORDER BY 1,2,3;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5984.44..6001.42 rows=6792 width=24)
   Output: (str_to_date(c1, '%H:%i:%s'::text)), (str_to_date((c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text))
   Sort Key: (str_to_date(time_tbl.c1, '%H:%i:%s'::text)), (str_to_date((time_tbl.c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(time_tbl.c3, '%Y-%m-%d %H:%i:%s'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5552.14 rows=6792 width=24)
         Output: (str_to_date(c1, '%H:%i:%s'::text)), (str_to_date((c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT str_to_date(`c1`, '%H:%i:%s'), str_to_date(`c2`, '%Y-%m-%d'), str_to_date(`c3`, '%Y-%m-%d %H:%i:%s') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.str_to_date(c1, '%H:%i:%s'::text), public.str_to_date(c2, '%Y-%m-%d'::text), public.str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select str_to_date (stub function, pushdown constraints, result)
--Testcase 2790:
SELECT str_to_date(c1, '%H:%i:%s'), str_to_date(c2, '%Y-%m-%d'), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl WHERE id != 200 ORDER BY 1,2,3;
 str_to_date |     str_to_date     |     str_to_date     
-------------+---------------------+---------------------
 00:59:59    | 2021-01-29 00:00:00 | 2021-01-07 00:59:59
 11:12:12    | 2021-01-10 00:00:00 | 2021-01-05 11:12:12
 12:10:30    | 2021-01-02 00:00:00 | 2021-01-03 12:10:30
 16:00:00    | 2021-01-15 00:00:00 | 2021-01-06 16:00:00
 23:12:13    | 2021-01-01 00:00:00 | 2021-01-04 23:12:13
(5 rows)

-- select str_to_date (stub function, year in constraints, explain)
--Testcase 2791:
EXPLAIN VERBOSE
SELECT str_to_date(c1, '%H:%i:%s'), str_to_date(c2, '%Y-%m-%d'), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl WHERE str_to_date(c1, '%H:%i:%s') > '02:00:00'::time ORDER BY 1,2,3;
                                                                                                                                      QUERY PLAN                                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3896.95..3902.64 rows=2276 width=24)
   Output: (str_to_date(c1, '%H:%i:%s'::text)), (str_to_date((c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text))
   Sort Key: (str_to_date(time_tbl.c1, '%H:%i:%s'::text)), (str_to_date((time_tbl.c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(time_tbl.c3, '%Y-%m-%d %H:%i:%s'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3770.03 rows=2276 width=24)
         Output: (str_to_date(c1, '%H:%i:%s'::text)), (str_to_date((c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT str_to_date(`c1`, '%H:%i:%s'), str_to_date(`c2`, '%Y-%m-%d'), str_to_date(`c3`, '%Y-%m-%d %H:%i:%s') FROM `test`.`time_tbl2` WHERE ((str_to_date(`c1`, '%H:%i:%s') > '02:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.str_to_date(c1, '%H:%i:%s'::text), public.str_to_date(c2, '%Y-%m-%d'::text), public.str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text) FROM public.time_tbl1mysql WHERE ((public.str_to_date(c1, '%H:%i:%s'::text) > '02:00:00'::time without time zone))
(12 rows)

-- select str_to_date (stub function, year in constraints, result)
--Testcase 2792:
SELECT str_to_date(c1, '%H:%i:%s'), str_to_date(c2, '%Y-%m-%d'), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl WHERE str_to_date(c1, '%H:%i:%s') > '02:00:00'::time ORDER BY 1,2,3;
 str_to_date |     str_to_date     |     str_to_date     
-------------+---------------------+---------------------
 11:12:12    | 2021-01-10 00:00:00 | 2021-01-05 11:12:12
 12:10:30    | 2021-01-02 00:00:00 | 2021-01-03 12:10:30
 16:00:00    | 2021-01-15 00:00:00 | 2021-01-06 16:00:00
 23:12:13    | 2021-01-01 00:00:00 | 2021-01-04 23:12:13
(4 rows)

-- select str_to_date with agg (pushdown, explain)
--Testcase 2793:
EXPLAIN VERBOSE
SELECT max(c3), str_to_date(max(c1), '%H:%i:%s') FROM time_tbl;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (max(c3)), str_to_date((max(c1)), '%H:%i:%s'::text)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`), max(`c1`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3), max(c1) FROM public.time_tbl1mysql
(11 rows)

-- select str_to_date as nest function with agg (pushdown, result)
--Testcase 2794:
SELECT max(c3), str_to_date(max(c1), '%H:%i:%s') FROM time_tbl;
ERROR:  stub str_to_date(time, text) is called
CONTEXT:  PL/pgSQL function str_to_date(time without time zone,text) line 3 at RAISE
-- select str_to_date with non pushdown func and explicit constant (explain)
--Testcase 2795:
EXPLAIN VERBOSE
SELECT str_to_date(c1, '%H:%i:%s'), str_to_date(c2, '%Y-%m-%d'), str_to_date(c3, '%Y-%m-%d %H:%i:%s'), pi(), 4.1 FROM time_tbl ORDER BY 1,2,3;
                                                                                                               QUERY PLAN                                                                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5996.05..6013.12 rows=6826 width=64)
   Output: (str_to_date(c1, '%H:%i:%s'::text)), (str_to_date((c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text)), '3.141592653589793'::double precision, 4.1
   Sort Key: (str_to_date(time_tbl.c1, '%H:%i:%s'::text)), (str_to_date((time_tbl.c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(time_tbl.c3, '%Y-%m-%d %H:%i:%s'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=64)
         Output: (str_to_date(c1, '%H:%i:%s'::text)), (str_to_date((c2)::timestamp without time zone, '%Y-%m-%d'::text)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT str_to_date(`c1`, '%H:%i:%s'), str_to_date(`c2`, '%Y-%m-%d'), str_to_date(`c3`, '%Y-%m-%d %H:%i:%s'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.str_to_date(c1, '%H:%i:%s'::text), public.str_to_date(c2, '%Y-%m-%d'::text), public.str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- -- select str_to_date with non pushdown func and explicit constant (result)
--Testcase 2796:
SELECT str_to_date(c1, '%H:%i:%s'), str_to_date(c2, '%Y-%m-%d'), str_to_date(c3, '%Y-%m-%d %H:%i:%s'), pi(), 4.1 FROM time_tbl ORDER BY 1,2,3;
 str_to_date |     str_to_date     |     str_to_date     |        pi         | ?column? 
-------------+---------------------+---------------------+-------------------+----------
 00:59:59    | 2021-01-29 00:00:00 | 2021-01-07 00:59:59 | 3.141592653589793 |      4.1
 11:12:12    | 2021-01-10 00:00:00 | 2021-01-05 11:12:12 | 3.141592653589793 |      4.1
 12:10:30    | 2021-01-02 00:00:00 | 2021-01-03 12:10:30 | 3.141592653589793 |      4.1
 16:00:00    | 2021-01-15 00:00:00 | 2021-01-06 16:00:00 | 3.141592653589793 |      4.1
 23:12:13    | 2021-01-01 00:00:00 | 2021-01-04 23:12:13 | 3.141592653589793 |      4.1
(5 rows)

-- select str_to_date with order by (explain)
--Testcase 2797:
EXPLAIN VERBOSE
SELECT id, str_to_date(c1, '%H:%i:%s'), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl order by id,str_to_date(c1, '%H:%i:%s'), str_to_date(c3, '%Y-%m-%d %H:%i:%s');
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=20)
   Output: id, (str_to_date(c1, '%H:%i:%s'::text)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text))
   Sort Key: time_tbl.id, (str_to_date(time_tbl.c1, '%H:%i:%s'::text)), (str_to_date(time_tbl.c3, '%Y-%m-%d %H:%i:%s'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=20)
         Output: id, (str_to_date(c1, '%H:%i:%s'::text)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, str_to_date(`c1`, '%H:%i:%s'), str_to_date(`c3`, '%Y-%m-%d %H:%i:%s') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.str_to_date(c1, '%H:%i:%s'::text), public.str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text) FROM public.time_tbl1mysql
(12 rows)

-- select str_to_date with order by (result)
--Testcase 2798:
SELECT id, str_to_date(c1, '%H:%i:%s'), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl order by id,str_to_date(c1, '%H:%i:%s'), str_to_date(c3, '%Y-%m-%d %H:%i:%s');
 id | str_to_date |     str_to_date     
----+-------------+---------------------
  0 | 12:10:30    | 2021-01-03 12:10:30
  1 | 23:12:13    | 2021-01-04 23:12:13
  2 | 11:12:12    | 2021-01-05 11:12:12
  3 | 16:00:00    | 2021-01-06 16:00:00
  4 | 00:59:59    | 2021-01-07 00:59:59
(5 rows)

-- select str_to_date with order by index (result)
--Testcase 2799:
SELECT id, str_to_date(c1, '%H:%i:%s'), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl order by 3,2,1;
 id | str_to_date |     str_to_date     
----+-------------+---------------------
  0 | 12:10:30    | 2021-01-03 12:10:30
  1 | 23:12:13    | 2021-01-04 23:12:13
  2 | 11:12:12    | 2021-01-05 11:12:12
  3 | 16:00:00    | 2021-01-06 16:00:00
  4 | 00:59:59    | 2021-01-07 00:59:59
(5 rows)

-- select str_to_date with order by index (result)
--Testcase 2800:
SELECT id, str_to_date(c1, '%H:%i:%s'), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl order by 1,2,3;
 id | str_to_date |     str_to_date     
----+-------------+---------------------
  0 | 12:10:30    | 2021-01-03 12:10:30
  1 | 23:12:13    | 2021-01-04 23:12:13
  2 | 11:12:12    | 2021-01-05 11:12:12
  3 | 16:00:00    | 2021-01-06 16:00:00
  4 | 00:59:59    | 2021-01-07 00:59:59
(5 rows)

-- select str_to_date with group by (explain)
--Testcase 2801:
EXPLAIN VERBOSE
SELECT max(c1), str_to_date(c1, '%H:%i:%s') FROM time_tbl group by str_to_date(c1, '%H:%i:%s') ORDER BY 1,2;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=16)
   Output: (max(c1)), (str_to_date(c1, '%H:%i:%s'::text))
   Sort Key: (max(time_tbl.c1)), (str_to_date(time_tbl.c1, '%H:%i:%s'::text))
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=16)
         Output: max(c1), (str_to_date(c1, '%H:%i:%s'::text))
         Group Key: (str_to_date(time_tbl.c1, '%H:%i:%s'::text))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (str_to_date(c1, '%H:%i:%s'::text)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT str_to_date(`c1`, '%H:%i:%s'), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.str_to_date(c1, '%H:%i:%s'::text), c1 FROM public.time_tbl1mysql
(15 rows)

-- select str_to_date with group by (result)
--Testcase 2802:
SELECT max(c3), str_to_date(c1, '%H:%i:%s') FROM time_tbl group by str_to_date(c1, '%H:%i:%s') ORDER BY 1,2;
         max         | str_to_date 
---------------------+-------------
 2021-01-03 12:10:30 | 12:10:30
 2021-01-04 23:12:13 | 23:12:13
 2021-01-05 11:12:12 | 11:12:12
 2021-01-06 16:00:00 | 16:00:00
 2021-01-07 00:59:59 | 00:59:59
(5 rows)

-- select str_to_date with group by index (result)
--Testcase 2803:
SELECT id, str_to_date(c1, '%H:%i:%s') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | str_to_date 
----+-------------
  0 | 12:10:30
  1 | 23:12:13
  2 | 11:12:12
  3 | 16:00:00
  4 | 00:59:59
(5 rows)

-- select str_to_date with group by index (result)
--Testcase 2804:
SELECT id, str_to_date(c1, '%H:%i:%s') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | str_to_date 
----+-------------
  0 | 12:10:30
  1 | 23:12:13
  2 | 11:12:12
  3 | 16:00:00
  4 | 00:59:59
(5 rows)

-- select str_to_date with group by having (explain)
--Testcase 2805:
EXPLAIN VERBOSE
SELECT max(c3), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl group by str_to_date(c3, '%Y-%m-%d %H:%i:%s'),c3 HAVING str_to_date(c3, '%Y-%m-%d %H:%i:%s') < '2021-01-03 13:00:00'::timestamp ORDER BY 1,2;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2253.76..2253.92 rows=67 width=24)
   Output: (max(c3)), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text)), c3
   Sort Key: (max(time_tbl.c3)), (str_to_date(time_tbl.c3, '%Y-%m-%d %H:%i:%s'::text))
   ->  HashAggregate  (cost=2182.47..2251.72 rows=67 width=24)
         Output: max(c3), (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text)), c3
         Group Key: (str_to_date(time_tbl.c3, '%Y-%m-%d %H:%i:%s'::text)), time_tbl.c3
         Filter: ((str_to_date(time_tbl.c3, '%Y-%m-%d %H:%i:%s'::text)) < '2021-01-03 13:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT str_to_date(`c3`, '%Y-%m-%d %H:%i:%s'), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.str_to_date(c3, '%Y-%m-%d %H:%i:%s'::text), c3 FROM public.time_tbl1mysql
(16 rows)

-- select str_to_date with group by having (result)
--Testcase 2806:
SELECT max(c3), str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl group by str_to_date(c3, '%Y-%m-%d %H:%i:%s'),c3 HAVING str_to_date(c3, '%Y-%m-%d %H:%i:%s') < '2021-01-03 13:00:00'::timestamp ORDER BY 1,2;
         max         |     str_to_date     
---------------------+---------------------
 2021-01-03 12:10:30 | 2021-01-03 12:10:30
(1 row)

-- select str_to_date with group by index having (result)
--Testcase 2807:
SELECT id, str_to_date(c3, '%Y-%m-%d %H:%i:%s') FROM time_tbl group by 1, 2 HAVING id > 1 ORDER BY 1,2;
 id |     str_to_date     
----+---------------------
  2 | 2021-01-05 11:12:12
  3 | 2021-01-06 16:00:00
  4 | 2021-01-07 00:59:59
(3 rows)

-- SECOND()
-- select second (stub function, explain)
--Testcase 2808:
EXPLAIN VERBOSE
SELECT second(c1), second(c3) FROM time_tbl ORDER BY 1,2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=8)
   Output: (second(c1)), (second(c3))
   Sort Key: (second(time_tbl.c1)), (second(time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (second(c1)), (second(c3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT second(`c1`), second(`c3`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.second(c1), public.second(c3) FROM public.time_tbl1mysql
(12 rows)

--Testcase 2809:
SELECT second(c1), second(c3) FROM time_tbl ORDER BY 1,2;
 second | second 
--------+--------
      0 |      0
     12 |     12
     13 |     13
     30 |     30
     59 |     59
(5 rows)

-- select second (stub function, not pushdown constraints, explain)
--Testcase 2810:
EXPLAIN VERBOSE
SELECT second(c1), second(c3) FROM time_tbl WHERE to_hex(id) > '0' ORDER BY 1,2;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort  (cost=1678.32..1684.01 rows=2276 width=8)
   Output: (second(c1)), (second(c3))
   Sort Key: (second(time_tbl.c1)), (second(time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..1551.41 rows=2276 width=8)
         Output: (second(c1)), (second(c3))
         Filter: (to_hex(time_tbl.id) > '0'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT second(`c1`), second(`c3`), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.second(c1), public.second(c3), id FROM public.time_tbl1mysql
(13 rows)

--Testcase 2811:
SELECT second(c1), second(c3) FROM time_tbl WHERE to_hex(id) > '0' ORDER BY 1,2;
 second | second 
--------+--------
      0 |      0
     12 |     12
     13 |     13
     59 |     59
(4 rows)

-- select second (stub function, pushdown constraints, explain)
--Testcase 2812:
EXPLAIN VERBOSE
SELECT second(c1), second(c3) FROM time_tbl WHERE id = 1 ORDER BY 1,2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort  (cost=323.87..323.95 rows=34 width=8)
   Output: (second(c1)), (second(c3))
   Sort Key: (second(time_tbl.c1)), (second(time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..323.00 rows=34 width=8)
         Output: (second(c1)), (second(c3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT second(`c1`), second(`c3`) FROM `test`.`time_tbl2` WHERE ((`id` = 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.second(c1), public.second(c3) FROM public.time_tbl1mysql WHERE ((id = 1))
(12 rows)

--Testcase 2813:
SELECT second(c1), second(c3) FROM time_tbl WHERE id = 1 ORDER BY 1,2;
 second | second 
--------+--------
     13 |     13
(1 row)

-- select second (stub function, second in constraints, explain)
--Testcase 2814:
EXPLAIN VERBOSE
SELECT second(c1), second(c3) FROM time_tbl WHERE second(c2) < second(c3) ORDER BY 1,2;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5045.82..5051.51 rows=2276 width=8)
   Output: (second(c1)), (second(c3))
   Sort Key: (second(time_tbl.c1)), (second(time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4918.91 rows=2276 width=8)
         Output: (second(c1)), (second(c3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT second(`c1`), second(`c3`) FROM `test`.`time_tbl2` WHERE ((second(`c2`) < second(`c3`)))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.second(c1), public.second(c3) FROM public.time_tbl1mysql WHERE ((public.second(c2) < public.second(c3)))
(12 rows)

--Testcase 2815:
SELECT second(c1), second(c3) FROM time_tbl WHERE second(c2) < second(c3) ORDER BY 1,2;
 second | second 
--------+--------
     12 |     12
     13 |     13
     30 |     30
     59 |     59
(4 rows)

-- second in constrains (stub function, explain)
--Testcase 2816:
EXPLAIN VERBOSE
SELECT second(c1), second(c3) FROM time_tbl WHERE second(c2) < id ORDER BY 1,2;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3339.32..3345.01 rows=2276 width=8)
   Output: (second(c1)), (second(c3))
   Sort Key: (second(time_tbl.c1)), (second(time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3212.41 rows=2276 width=8)
         Output: (second(c1)), (second(c3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT second(`c1`), second(`c3`) FROM `test`.`time_tbl2` WHERE ((second(`c2`) < `id`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.second(c1), public.second(c3) FROM public.time_tbl1mysql WHERE ((public.second(c2) < id))
(12 rows)

-- second in constrains (stub function, result)
--Testcase 2817:
SELECT second(c1), second(c3) FROM time_tbl WHERE second(c2) < id ORDER BY 1,2;
 second | second 
--------+--------
      0 |      0
     12 |     12
     13 |     13
     59 |     59
(4 rows)

-- select second as nest function with agg (pushdown, explain)
--Testcase 2818:
EXPLAIN VERBOSE
SELECT max(c1), second(max(c3)) FROM time_tbl;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c1)), second((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c1`), max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c1), max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select second as nest function with agg (pushdown, result)
--Testcase 2819:
SELECT max(c1), second(max(c3)) FROM time_tbl;
ERROR:  stub second(timestamp) is called
CONTEXT:  PL/pgSQL function second(timestamp without time zone) line 3 at RAISE
-- select second and agg (pushdown, explain)
--Testcase 2820:
EXPLAIN VERBOSE
SELECT second('1997-10-14 00:01:01'::timestamp), second('00:01:59'::time), sum(id) FROM time_tbl ORDER BY 1,2,3;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=159.67..159.67 rows=1 width=16)
   Output: (second('1997-10-14 00:01:01'::timestamp without time zone)), (second('00:01:59'::time without time zone)), (sum(id))
   Sort Key: (second('1997-10-14 00:01:01'::timestamp without time zone)), (second('00:01:59'::time without time zone)), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.66 rows=1 width=16)
         Output: second('1997-10-14 00:01:01'::timestamp without time zone), second('00:01:59'::time without time zone), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select second and log2 (pushdown, explain)
--Testcase 2821:
EXPLAIN VERBOSE
SELECT second('1997-10-14 00:01:01'::timestamp), second('00:01:59'::time), log2(id) FROM time_tbl ORDER BY 1,2,3;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5996.05..6013.12 rows=6826 width=16)
   Output: (second('1997-10-14 00:01:01'::timestamp without time zone)), (second('00:01:59'::time without time zone)), (log2((id)::double precision))
   Sort Key: (second('1997-10-14 00:01:01'::timestamp without time zone)), (second('00:01:59'::time without time zone)), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=16)
         Output: (second('1997-10-14 00:01:01'::timestamp without time zone)), (second('00:01:59'::time without time zone)), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT second('1997-10-14 00:01:01'), second('00:01:59'), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.second('1997-10-14 00:01:01'::timestamp without time zone), public.second('00:01:59'::time without time zone), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select second with non pushdown func and explicit constant (explain)
--Testcase 2822:
EXPLAIN VERBOSE
SELECT second('1997-10-14 00:00:00'::timestamp), second('00:01:59'::time), to_hex(id), 4 FROM time_tbl ORDER BY 1,2,3;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=44)
   Output: (second('1997-10-14 00:00:00'::timestamp without time zone)), (second('00:01:59'::time without time zone)), (to_hex(id)), 4
   Sort Key: (second('1997-10-14 00:00:00'::timestamp without time zone)), (second('00:01:59'::time without time zone)), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=44)
         Output: second('1997-10-14 00:00:00'::timestamp without time zone), second('00:01:59'::time without time zone), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select second with order by (explain)
--Testcase 2823:
EXPLAIN VERBOSE
SELECT second(c1), second(c3), c1 FROM time_tbl ORDER BY 1,2,3;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=16)
   Output: (second(c1)), (second(c3)), c1
   Sort Key: (second(time_tbl.c1)), (second(time_tbl.c3)), time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=16)
         Output: (second(c1)), (second(c3)), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT second(`c1`), second(`c3`), `c1` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.second(c1), public.second(c3), c1 FROM public.time_tbl1mysql
(12 rows)

-- select second with order by index (result)
--Testcase 2824:
SELECT second(c1), second(c3), c1 FROM time_tbl ORDER BY 1,2,3;
 second | second |    c1    
--------+--------+----------
      0 |      0 | 16:00:00
     12 |     12 | 11:12:12
     13 |     13 | 23:12:13
     30 |     30 | 12:10:30
     59 |     59 | 00:59:59
(5 rows)

-- second constraints with order by (explain)
--Testcase 2825:
EXPLAIN VERBOSE
SELECT second(c1), second(c3) FROM time_tbl WHERE second('2020-10-14 00:39:05'::timestamp) > second('1997-10-14 00:00:00'::timestamp) ORDER BY second(c1), second(c3);
                                                                                                                  QUERY PLAN                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5028.76..5034.45 rows=2276 width=8)
   Output: (second(c1)), (second(c3))
   Sort Key: (second(time_tbl.c1)), (second(time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4901.85 rows=2276 width=8)
         Output: (second(c1)), (second(c3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT second(`c1`), second(`c3`) FROM `test`.`time_tbl2` WHERE ((second('2020-10-14 00:39:05') > second('1997-10-14 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.second(c1), public.second(c3) FROM public.time_tbl1mysql WHERE ((public.second('2020-10-14 00:39:05'::timestamp without time zone) > public.second('1997-10-14 00:00:00'::timestamp without time zone)))
(12 rows)

-- second constraints with order by (result)
--Testcase 2826:
SELECT second(c1), second(c3) FROM time_tbl WHERE second('2020-10-14 00:39:05'::timestamp) > second('1997-10-14 00:00:00'::timestamp) ORDER BY second(c1), second(c3);
 second | second 
--------+--------
      0 |      0
     12 |     12
     13 |     13
     30 |     30
     59 |     59
(5 rows)

-- select second with group by (explain)
--Testcase 2827:
EXPLAIN VERBOSE
SELECT second(c1), second(c3), c1 FROM time_tbl GROUP BY c1,c3 ORDER BY 1,2,3;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=356.94..356.94 rows=0 width=24)
   Output: (second(c1)), (second(c3)), c1, c3
   Sort Key: (second(time_tbl.c1)), (second(time_tbl.c3)), time_tbl.c1
   ->  Foreign Scan  (cost=127.06..356.93 rows=0 width=24)
         Output: second(c1), second(c3), c1, c3
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1`, `c3` FROM `test`.`time_tbl2` GROUP BY 1, 2
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1, c3 FROM public.time_tbl1mysql GROUP BY 1, 2
(16 rows)

-- select second with group by index (explain)
--Testcase 2828:
EXPLAIN VERBOSE
SELECT second(c1), second(c3), c1 FROM time_tbl GROUP BY 1,2,3 ORDER BY 1,2,3;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort  (cost=3998.62..3999.12 rows=200 width=16)
   Output: (second(c1)), (second(c3)), c1
   Sort Key: (second(time_tbl.c1)), (second(time_tbl.c3)), time_tbl.c1
   ->  HashAggregate  (cost=3888.97..3990.97 rows=200 width=16)
         Output: (second(c1)), (second(c3)), c1
         Group Key: (second(time_tbl.c1)), (second(time_tbl.c3)), time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=16)
               Output: (second(c1)), (second(c3)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT second(`c1`), second(`c3`), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.second(c1), public.second(c3), c1 FROM public.time_tbl1mysql
(15 rows)

-- select second with group by having (explain)
--Testcase 2829:
EXPLAIN VERBOSE
SELECT second(c1), c1 FROM time_tbl GROUP BY second(c1),c1 HAVING second(c1) > 1 ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=2236.69..2236.86 rows=67 width=12)
   Output: (second(c1)), c1
   Sort Key: (second(time_tbl.c1)), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..2234.66 rows=67 width=12)
         Output: (second(c1)), c1
         Group Key: (second(time_tbl.c1)), time_tbl.c1
         Filter: ((second(time_tbl.c1)) > 1)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (second(c1)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT second(`c1`), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.second(c1), c1 FROM public.time_tbl1mysql
(16 rows)

-- select second with group by index having (result)
--Testcase 2830:
SELECT second(c1), c1 FROM time_tbl GROUP BY second(c1),c1 HAVING second(c1) > 1 ORDER BY 1,2;
 second |    c1    
--------+----------
     12 | 11:12:12
     13 | 23:12:13
     30 | 12:10:30
     59 | 00:59:59
(4 rows)

-- select second and as
--Testcase 2831:
EXPLAIN VERBOSE
SELECT second(c1) as second1, second(c3) as second2 FROM time_tbl ORDER BY 1,2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=8)
   Output: (second(c1)), (second(c3))
   Sort Key: (second(time_tbl.c1)), (second(time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (second(c1)), (second(c3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT second(`c1`), second(`c3`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.second(c1), public.second(c3) FROM public.time_tbl1mysql
(12 rows)

-- SEC_TO_TIME()
-- select sec_to_time (stub function, explain)
--Testcase 2832:
EXPLAIN VERBOSE
SELECT sec_to_time(id) FROM time_tbl ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=8)
   Output: (sec_to_time(id))
   Sort Key: (sec_to_time(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (sec_to_time(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT sec_to_time(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sec_to_time(id) FROM public.time_tbl1mysql
(12 rows)

--Testcase 2833:
SELECT sec_to_time(id) FROM time_tbl ORDER BY 1;
 sec_to_time 
-------------
 00:00:00
 00:00:01
 00:00:02
 00:00:03
 00:00:04
(5 rows)

-- select sec_to_time (stub function, not pushdown constraints, explain)
--Testcase 2834:
EXPLAIN VERBOSE
SELECT sec_to_time(id) FROM time_tbl WHERE to_hex(id) > '0' ORDER BY 1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=1109.32..1115.01 rows=2276 width=8)
   Output: (sec_to_time(id))
   Sort Key: (sec_to_time(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..982.41 rows=2276 width=8)
         Output: (sec_to_time(id))
         Filter: (to_hex(time_tbl.id) > '0'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT sec_to_time(`id`), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sec_to_time(id), id FROM public.time_tbl1mysql
(13 rows)

--Testcase 2835:
SELECT sec_to_time(id) FROM time_tbl WHERE to_hex(id) > '0' ORDER BY 1;
 sec_to_time 
-------------
 00:00:01
 00:00:02
 00:00:03
 00:00:04
(4 rows)

-- select sec_to_time (stub function, pushdown constraints, explain)
--Testcase 2836:
EXPLAIN VERBOSE
SELECT sec_to_time(id) FROM time_tbl WHERE id = 1 ORDER BY 1;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=315.37..315.45 rows=34 width=8)
   Output: (sec_to_time(id))
   Sort Key: (sec_to_time(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..314.50 rows=34 width=8)
         Output: (sec_to_time(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT sec_to_time(`id`) FROM `test`.`time_tbl2` WHERE ((`id` = 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sec_to_time(id) FROM public.time_tbl1mysql WHERE ((id = 1))
(12 rows)

--Testcase 2837:
SELECT sec_to_time(id) FROM time_tbl WHERE id = 1 ORDER BY 1;
 sec_to_time 
-------------
 00:00:01
(1 row)

-- select sec_to_time (stub function, sec_to_time in constraints, explain)
--Testcase 2838:
EXPLAIN VERBOSE
SELECT sec_to_time(id) FROM time_tbl WHERE sec_to_time(id) < c1 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2753.26..2758.95 rows=2276 width=8)
   Output: (sec_to_time(id))
   Sort Key: (sec_to_time(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=8)
         Output: (sec_to_time(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT sec_to_time(`id`) FROM `test`.`time_tbl2` WHERE ((sec_to_time(`id`) < `c1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sec_to_time(id) FROM public.time_tbl1mysql WHERE ((public.sec_to_time(id) < c1))
(12 rows)

--Testcase 2839:
SELECT sec_to_time(id) FROM time_tbl WHERE sec_to_time(id) < c1 ORDER BY 1;
 sec_to_time 
-------------
 00:00:00
 00:00:01
 00:00:02
 00:00:03
 00:00:04
(5 rows)

-- sec_to_time in constrains (stub function, explain)
--Testcase 2840:
EXPLAIN VERBOSE
SELECT sec_to_time(id) FROM time_tbl WHERE sec_to_time(id) < c1 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2753.26..2758.95 rows=2276 width=8)
   Output: (sec_to_time(id))
   Sort Key: (sec_to_time(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=8)
         Output: (sec_to_time(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT sec_to_time(`id`) FROM `test`.`time_tbl2` WHERE ((sec_to_time(`id`) < `c1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sec_to_time(id) FROM public.time_tbl1mysql WHERE ((public.sec_to_time(id) < c1))
(12 rows)

-- sec_to_time in constrains (stub function, result)
--Testcase 2841:
SELECT sec_to_time(id) FROM time_tbl WHERE sec_to_time(id) < c1 ORDER BY 1;
 sec_to_time 
-------------
 00:00:00
 00:00:01
 00:00:02
 00:00:03
 00:00:04
(5 rows)

-- select sec_to_time as nest function with agg (pushdown, explain)
--Testcase 2842:
EXPLAIN VERBOSE
SELECT max(c1), sec_to_time(max(id)) FROM time_tbl;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: (max(c1)), sec_to_time((max(id)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c1`), max(`id`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c1), max(id) FROM public.time_tbl1mysql
(11 rows)

-- select sec_to_time as nest function with agg (pushdown, result)
--Testcase 2843:
SELECT max(c1), sec_to_time(max(id)) FROM time_tbl;
ERROR:  stub sec_to_time(int) is called
CONTEXT:  PL/pgSQL function sec_to_time(integer) line 3 at RAISE
-- select sec_to_time and agg (pushdown, explain)
--Testcase 2844:
EXPLAIN VERBOSE
SELECT max(id), sec_to_time(max(id)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(id)), sec_to_time((max(id)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`id`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(id) FROM public.time_tbl1mysql
(11 rows)

-- select sec_to_time and log2 (pushdown, explain)
--Testcase 2845:
EXPLAIN VERBOSE
SELECT sec_to_time(id), log2(id) FROM time_tbl;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=16)
   Output: (sec_to_time(id)), (log2((id)::double precision))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT sec_to_time(`id`), log2(`id`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.sec_to_time(id), public.log2(id) FROM public.time_tbl1mysql
(7 rows)

-- select sec_to_time with non pushdown func and explicit constant (explain)
--Testcase 2846:
EXPLAIN VERBOSE
SELECT sec_to_time(id), to_hex(id), 4 FROM time_tbl;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=44)
   Output: sec_to_time(id), to_hex(id), 4
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id FROM public.time_tbl1mysql
(7 rows)

-- select sec_to_time with order by (explain)
--Testcase 2847:
EXPLAIN VERBOSE
SELECT sec_to_time(id), c1 FROM time_tbl ORDER BY id,sec_to_time(id);
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=20)
   Output: (sec_to_time(id)), c1, id
   Sort Key: time_tbl.id, (sec_to_time(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=20)
         Output: (sec_to_time(id)), c1, id
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT sec_to_time(`id`), `c1`, `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sec_to_time(id), c1, id FROM public.time_tbl1mysql
(12 rows)

-- select sec_to_time with order by index (result)
--Testcase 2848:
SELECT sec_to_time(id), c1 FROM time_tbl ORDER BY 1,2;
 sec_to_time |    c1    
-------------+----------
 00:00:00    | 12:10:30
 00:00:01    | 23:12:13
 00:00:02    | 11:12:12
 00:00:03    | 16:00:00
 00:00:04    | 00:59:59
(5 rows)

-- sec_to_time constraints with order by (explain)
--Testcase 2849:
EXPLAIN VERBOSE
SELECT sec_to_time(id) FROM time_tbl WHERE sec_to_time(id) < c1 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2753.26..2758.95 rows=2276 width=8)
   Output: (sec_to_time(id))
   Sort Key: (sec_to_time(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=8)
         Output: (sec_to_time(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT sec_to_time(`id`) FROM `test`.`time_tbl2` WHERE ((sec_to_time(`id`) < `c1`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sec_to_time(id) FROM public.time_tbl1mysql WHERE ((public.sec_to_time(id) < c1))
(12 rows)

-- sec_to_time constraints with order by (result)
--Testcase 2850:
SELECT sec_to_time(id) FROM time_tbl WHERE sec_to_time(id) < c1 ORDER BY sec_to_time(id);
 sec_to_time 
-------------
 00:00:00
 00:00:01
 00:00:02
 00:00:03
 00:00:04
(5 rows)

-- select sec_to_time with group by (explain)
--Testcase 2851:
EXPLAIN VERBOSE
SELECT sec_to_time(id), c1 FROM time_tbl GROUP BY id,c1 ORDER BY 1,2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=271.69..271.69 rows=0 width=20)
   Output: (sec_to_time(id)), c1, id
   Sort Key: (sec_to_time(time_tbl.id)), time_tbl.c1
   ->  Foreign Scan  (cost=127.06..271.68 rows=0 width=20)
         Output: sec_to_time(id), c1, id
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1`, `id` FROM `test`.`time_tbl2` GROUP BY 2, 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1, id FROM public.time_tbl1mysql GROUP BY 2, 1
(16 rows)

-- select sec_to_time with group by index (explain)
--Testcase 2852:
EXPLAIN VERBOSE
SELECT sec_to_time(id), c1 FROM time_tbl GROUP BY 1,2 ORDER BY 1,2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=2225.05..2225.55 rows=200 width=16)
   Output: (sec_to_time(id)), c1
   Sort Key: (sec_to_time(time_tbl.id)), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..2217.41 rows=200 width=16)
         Output: (sec_to_time(id)), c1
         Group Key: (sec_to_time(time_tbl.id)), time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (sec_to_time(id)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT sec_to_time(`id`), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.sec_to_time(id), c1 FROM public.time_tbl1mysql
(15 rows)

-- select sec_to_time with group by having (explain)
--Testcase 2853:
EXPLAIN VERBOSE
SELECT sec_to_time(id), c1 FROM time_tbl GROUP BY sec_to_time(id), id, c1 HAVING sec_to_time(id) < c1 ORDER BY 1,2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sort  (cost=2253.76..2253.92 rows=67 width=20)
   Output: (sec_to_time(id)), c1, id
   Sort Key: (sec_to_time(time_tbl.id)), time_tbl.c1
   ->  HashAggregate  (cost=2182.47..2251.72 rows=67 width=20)
         Output: (sec_to_time(id)), c1, id
         Group Key: (sec_to_time(time_tbl.id)), time_tbl.c1, time_tbl.id
         Filter: ((sec_to_time(time_tbl.id)) < time_tbl.c1)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=20)
               Output: (sec_to_time(id)), c1, id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT sec_to_time(`id`), `c1`, `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.sec_to_time(id), c1, id FROM public.time_tbl1mysql
(16 rows)

-- select sec_to_time with group by index having (result)
--Testcase 2854:
SELECT sec_to_time(id), c1 FROM time_tbl GROUP BY sec_to_time(id), id, c1 HAVING sec_to_time(id) < c1 ORDER BY 1,2;
 sec_to_time |    c1    
-------------+----------
 00:00:00    | 12:10:30
 00:00:01    | 23:12:13
 00:00:02    | 11:12:12
 00:00:03    | 16:00:00
 00:00:04    | 00:59:59
(5 rows)

-- select sec_to_time and as
--Testcase 2855:
EXPLAIN VERBOSE
SELECT sec_to_time(id) as sec_to_time1 FROM time_tbl ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=8)
   Output: (sec_to_time(id))
   Sort Key: (sec_to_time(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (sec_to_time(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT sec_to_time(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sec_to_time(id) FROM public.time_tbl1mysql
(12 rows)

-- QUARTER()
-- select quarter (stub function, explain)
--Testcase 2856:
EXPLAIN VERBOSE
SELECT quarter(c3), quarter(c2), quarter(date_sub(c3, '1 12:59:10')), quarter('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                QUERY PLAN                                                                                                                
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9409.05..9426.12 rows=6826 width=128)
   Output: (quarter(c3)), (quarter((c2)::timestamp without time zone)), (quarter(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (quarter(time_tbl.c3)), (quarter((time_tbl.c2)::timestamp without time zone)), (quarter(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8974.35 rows=6826 width=128)
         Output: (quarter(c3)), (quarter((c2)::timestamp without time zone)), (quarter(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT quarter(`c3`), quarter(`c2`), quarter(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), quarter('2021-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.quarter(c3), public.quarter(c2), public.quarter(public.date_sub(c3, '1 day 12:59:10'::interval)), public.quarter('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select quarter (stub function, result)
--Testcase 2857:
SELECT quarter(c3), quarter(c2), quarter(date_sub(c3, '1 12:59:10')), quarter('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
 quarter | quarter | quarter | quarter 
---------+---------+---------+---------
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
(5 rows)

-- select quarter (stub function, not pushdown constraints, explain)
--Testcase 2858:
EXPLAIN VERBOSE
SELECT quarter(c3), quarter(c2), quarter(date_sub(c3, '1 12:59:10')), quarter('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                QUERY PLAN                                                                                                                
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.18..434.26 rows=34 width=128)
   Output: (quarter(c3)), (quarter((c2)::timestamp without time zone)), (quarter(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (quarter(time_tbl.c3)), (quarter((time_tbl.c2)::timestamp without time zone)), (quarter(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.31 rows=34 width=128)
         Output: (quarter(c3)), (quarter((c2)::timestamp without time zone)), (quarter(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT quarter(`c3`), quarter(`c2`), quarter(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), quarter('2021-01-01 12:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.quarter(c3), public.quarter(c2), public.quarter(public.date_sub(c3, '1 day 12:59:10'::interval)), public.quarter('2021-01-01 12:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select quarter (stub function, not pushdown constraints, result)
--Testcase 2859:
SELECT quarter(c3), quarter(c2), quarter(date_sub(c3, '1 12:59:10')), quarter('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
 quarter | quarter | quarter | quarter 
---------+---------+---------+---------
 1       | 1       | 1       | 1
(1 row)

-- select quarter (stub function, pushdown constraints, explain)
--Testcase 2860:
EXPLAIN VERBOSE
SELECT quarter(c3), quarter(c2), quarter(date_sub(c3, '1 12:59:10')), quarter('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9380.44..9397.42 rows=6792 width=128)
   Output: (quarter(c3)), (quarter((c2)::timestamp without time zone)), (quarter(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (quarter(time_tbl.c3)), (quarter((time_tbl.c2)::timestamp without time zone)), (quarter(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8948.15 rows=6792 width=128)
         Output: (quarter(c3)), (quarter((c2)::timestamp without time zone)), (quarter(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT quarter(`c3`), quarter(`c2`), quarter(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), quarter('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.quarter(c3), public.quarter(c2), public.quarter(public.date_sub(c3, '1 day 12:59:10'::interval)), public.quarter('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select quarter (stub function, pushdown constraints, result)
--Testcase 2861:
SELECT quarter(c3), quarter(c2), quarter(date_sub(c3, '1 12:59:10')), quarter('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
 quarter | quarter | quarter | quarter 
---------+---------+---------+---------
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
(5 rows)

-- select quarter (stub function, quarter in constraints, explain)
--Testcase 2862:
EXPLAIN VERBOSE
SELECT quarter(c3), quarter(c2), quarter(date_sub(c3, '1 12:59:10')), quarter('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE quarter(c3) = quarter('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
                                                                                                                                                              QUERY PLAN                                                                                                                                                               
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3762.45..3762.54 rows=34 width=128)
   Output: (quarter(c3)), (quarter((c2)::timestamp without time zone)), (quarter(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (quarter(time_tbl.c3)), (quarter((time_tbl.c2)::timestamp without time zone)), (quarter(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3761.59 rows=34 width=128)
         Output: (quarter(c3)), (quarter((c2)::timestamp without time zone)), (quarter(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT quarter(`c3`), quarter(`c2`), quarter(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), quarter('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((quarter(`c3`) = quarter('2000-01-01 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.quarter(c3), public.quarter(c2), public.quarter(public.date_sub(c3, '1 day 12:59:10'::interval)), public.quarter('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.quarter(c3) = public.quarter('2000-01-01 00:00:00'::timestamp without time zone)))
(12 rows)

-- select quarter (stub function, quarter in constraints, result)
--Testcase 2863:
SELECT quarter(c3), quarter(c2), quarter(date_sub(c3, '1 12:59:10')), quarter('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE quarter(c3) = quarter('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
 quarter | quarter | quarter | quarter 
---------+---------+---------+---------
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
(5 rows)

-- select quarter (stub function, quarter in constraints, explain)
--Testcase 2864:
EXPLAIN VERBOSE
SELECT quarter(c3), quarter(c2), quarter(date_sub(c3, '1 12:59:10')), quarter('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE quarter('2021-01-01 12:00:00'::timestamp) = '1' ORDER BY 1,2,3,4;
                                                                                                                                                          QUERY PLAN                                                                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2055.95..2056.04 rows=34 width=128)
   Output: (quarter(c3)), (quarter((c2)::timestamp without time zone)), (quarter(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (quarter(time_tbl.c3)), (quarter((time_tbl.c2)::timestamp without time zone)), (quarter(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2055.09 rows=34 width=128)
         Output: (quarter(c3)), (quarter((c2)::timestamp without time zone)), (quarter(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (quarter('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT quarter(`c3`), quarter(`c2`), quarter(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), quarter('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((quarter('2021-01-01 12:00:00') = '1'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.quarter(c3), public.quarter(c2), public.quarter(public.date_sub(c3, '1 day 12:59:10'::interval)), public.quarter('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.quarter('2021-01-01 12:00:00'::timestamp without time zone) = '1'::text))
(12 rows)

-- select quarter (stub function, quarter in constraints, result)
--Testcase 2865:
SELECT quarter(c3), quarter(c2), quarter(date_sub(c3, '1 12:59:10')), quarter('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE quarter('2021-01-01 12:00:00'::timestamp) = '1' ORDER BY 1,2,3,4;
 quarter | quarter | quarter | quarter 
---------+---------+---------+---------
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
 1       | 1       | 1       | 1
(5 rows)

-- select quarter with agg (pushdown, explain)
--Testcase 2866:
EXPLAIN VERBOSE
SELECT max(c3), quarter(max(c3)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (max(c3)), quarter((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select quarter as nest function with agg (pushdown, result)
--Testcase 2867:
SELECT max(c3), quarter(max(c3)) FROM time_tbl;
ERROR:  stub quarter(timestamp) is called
CONTEXT:  PL/pgSQL function quarter(timestamp without time zone) line 3 at RAISE
-- select quarter with non pushdown func and explicit constant (explain)
--Testcase 2868:
EXPLAIN VERBOSE
SELECT quarter(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=72)
   Output: (quarter(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (quarter(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=72)
         Output: (quarter(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT quarter(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.quarter(public.date_sub(c3, '1 day 12:59:10'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select quarter with non pushdown func and explicit constant (result)
--Testcase 2869:
SELECT quarter(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
 quarter |        pi         | ?column? 
---------+-------------------+----------
 1       | 3.141592653589793 |      4.1
 1       | 3.141592653589793 |      4.1
 1       | 3.141592653589793 |      4.1
 1       | 3.141592653589793 |      4.1
 1       | 3.141592653589793 |      4.1
(5 rows)

-- select quarter with order by (explain)
--Testcase 2870:
EXPLAIN VERBOSE
SELECT id, quarter(c3 + '1 12:59:10') FROM time_tbl order by id,quarter(c3 + '1 12:59:10');
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=36)
   Output: id, (quarter((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: time_tbl.id, (quarter((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=36)
         Output: id, (quarter((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, quarter((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.quarter((c3 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select quarter with order by (result)
--Testcase 2871:
SELECT id, quarter(c3 + '1 12:59:10') FROM time_tbl order by id,quarter(c3 + '1 12:59:10');
 id | quarter 
----+---------
  0 | 1
  1 | 1
  2 | 1
  3 | 1
  4 | 1
(5 rows)

-- select quarter with order by index (result)
--Testcase 2872:
SELECT id, quarter(c3 + '1 12:59:10') FROM time_tbl order by 2,1;
 id | quarter 
----+---------
  0 | 1
  1 | 1
  2 | 1
  3 | 1
  4 | 1
(5 rows)

-- select quarter with order by index (result)
--Testcase 2873:
SELECT id, quarter(c3 + '1 12:59:10') FROM time_tbl order by 1,2;
 id | quarter 
----+---------
  0 | 1
  1 | 1
  2 | 1
  3 | 1
  4 | 1
(5 rows)

-- select quarter with group by (explain)
--Testcase 2874:
EXPLAIN VERBOSE
SELECT max(c3), quarter(c3 + '1 12:59:10') FROM time_tbl group by quarter(c3 + '1 12:59:10') ORDER BY 1,2;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=40)
   Output: (max(c3)), (quarter((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: (max(time_tbl.c3)), (quarter((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=40)
         Output: max(c3), (quarter((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Group Key: (quarter((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=40)
               Output: (quarter((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT quarter((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.quarter((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(15 rows)

-- select quarter with group by (result)
--Testcase 2875:
SELECT max(c3), quarter(c3 + '1 12:59:10') FROM time_tbl group by quarter(c3 + '1 12:59:10') ORDER BY 1,2;
         max         | quarter 
---------------------+---------
 2021-01-07 00:59:59 | 1
(1 row)

-- select quarter with group by index (result)
--Testcase 2876:
SELECT id, quarter(c3 + '1 12:59:10') FROM time_tbl group by 2,1;
 id | quarter 
----+---------
  3 | 1
  0 | 1
  1 | 1
  4 | 1
  2 | 1
(5 rows)

-- select quarter with group by index (result)
--Testcase 2877:
SELECT id, quarter(c3 + '1 12:59:10') FROM time_tbl group by 1,2;
 id | quarter 
----+---------
  2 | 1
  3 | 1
  4 | 1
  1 | 1
  0 | 1
(5 rows)

-- select quarter with group by having (explain)
--Testcase 2878:
EXPLAIN VERBOSE
SELECT max(c3), quarter(c3 + '1 12:59:10') FROM time_tbl group by quarter(c3 + '1 12:59:10'), c3 HAVING quarter(c3 + '1 12:59:10') > '0' ORDER BY 1,2;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=48)
   Output: (max(c3)), (quarter((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
   Sort Key: (max(time_tbl.c3)), (quarter((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=48)
         Output: max(c3), (quarter((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
         Group Key: (quarter((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), time_tbl.c3
         Filter: ((quarter((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))) > '0'::text)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=40)
               Output: (quarter((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT quarter((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.quarter((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(16 rows)

-- select quarter with group by having (result)
--Testcase 2879:
SELECT max(c3), quarter(c3 + '1 12:59:10') FROM time_tbl group by quarter(c3 + '1 12:59:10'), c3 HAVING quarter(c3 + '1 12:59:10') > '0' ORDER BY 1,2;
         max         | quarter 
---------------------+---------
 2021-01-03 12:10:30 | 1
 2021-01-04 23:12:13 | 1
 2021-01-05 11:12:12 | 1
 2021-01-06 16:00:00 | 1
 2021-01-07 00:59:59 | 1
(5 rows)

-- select quarter with group by index having (result)
--Testcase 2880:
SELECT id, quarter(c3 + '1 12:59:10'), c3 FROM time_tbl group by 3, 2, 1 HAVING quarter(c3 + '1 12:59:10') > '0' ORDER BY 1,2;
 id | quarter |         c3          
----+---------+---------------------
  0 | 1       | 2021-01-03 12:10:30
  1 | 1       | 2021-01-04 23:12:13
  2 | 1       | 2021-01-05 11:12:12
  3 | 1       | 2021-01-06 16:00:00
  4 | 1       | 2021-01-07 00:59:59
(5 rows)

-- select quarter with group by index having (result)
--Testcase 2881:
SELECT id, quarter(c3 + '1 12:59:10'), c3 FROM time_tbl group by 1, 2, 3 HAVING quarter(c3 + '1 12:59:10') > '0' ORDER BY 1,2;
 id | quarter |         c3          
----+---------+---------------------
  0 | 1       | 2021-01-03 12:10:30
  1 | 1       | 2021-01-04 23:12:13
  2 | 1       | 2021-01-05 11:12:12
  3 | 1       | 2021-01-06 16:00:00
  4 | 1       | 2021-01-07 00:59:59
(5 rows)

-- select quarter and as
--Testcase 2882:
SELECT quarter(date_sub(c3, '1 12:59:10')) as quarter1 FROM time_tbl ORDER BY 1;
 quarter1 
----------
 1
 1
 1
 1
 1
(5 rows)

-- PERIOD_DIFF()
-- select period_diff (stub function, explain)
--Testcase 2883:
EXPLAIN VERBOSE
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl ORDER BY 1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=4)
   Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907))
   Sort Key: (period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=4)
         Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT period_diff(extract(YEAR_MONTH FROM `c3`), 201907) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907) FROM public.time_tbl1mysql
(12 rows)

-- select period_diff (stub function, result)
--Testcase 2884:
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl ORDER BY 1;
 period_diff 
-------------
          18
          18
          18
          18
          18
(5 rows)

-- select period_diff (stub function, not pushdown constraints, explain)
--Testcase 2885:
EXPLAIN VERBOSE
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=408.59..408.68 rows=34 width=4)
   Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907))
   Sort Key: (period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..407.73 rows=34 width=4)
         Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT period_diff(extract(YEAR_MONTH FROM `c3`), 201907), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), id FROM public.time_tbl1mysql
(13 rows)

-- select period_diff (stub function, not pushdown constraints, result)
--Testcase 2886:
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1;
 period_diff 
-------------
          18
(1 row)

-- select period_diff (stub function, pushdown constraints, explain)
--Testcase 2887:
EXPLAIN VERBOSE
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl WHERE id != 200 ORDER BY 1;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4269.46..4286.44 rows=6792 width=4)
   Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907))
   Sort Key: (period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.16 rows=6792 width=4)
         Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT period_diff(extract(YEAR_MONTH FROM `c3`), 201907) FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select period_diff (stub function, pushdown constraints, result)
--Testcase 2888:
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl WHERE id != 200 ORDER BY 1;
 period_diff 
-------------
          18
          18
          18
          18
          18
(5 rows)

-- select period_diff (stub function, period_diff in constraints, explain)
--Testcase 2889:
EXPLAIN VERBOSE
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl WHERE period_diff(mysql_extract('YEAR_MONTH', c3 ), 199710) > id ORDER BY 1;
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5028.76..5034.45 rows=2276 width=4)
   Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907))
   Sort Key: (period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4901.85 rows=2276 width=4)
         Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT period_diff(extract(YEAR_MONTH FROM `c3`), 201907) FROM `test`.`time_tbl2` WHERE ((period_diff(extract(YEAR_MONTH FROM `c3`), 199710) > `id`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907) FROM public.time_tbl1mysql WHERE ((public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 199710) > id))
(12 rows)

-- select period_diff (stub function, period_diff in constraints, result)
--Testcase 2890:
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl WHERE period_diff(mysql_extract('YEAR_MONTH', c3 ), 199710) > id ORDER BY 1;
 period_diff 
-------------
          18
          18
          18
          18
          18
(5 rows)

-- select period_diff with agg (pushdown, explain)
--Testcase 2891:
EXPLAIN VERBOSE
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl ORDER BY 1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=4)
   Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907))
   Sort Key: (period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=4)
         Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT period_diff(extract(YEAR_MONTH FROM `c3`), 201907) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907) FROM public.time_tbl1mysql
(12 rows)

-- select period_diff as nest function with agg (pushdown, result)
--Testcase 2892:
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl ORDER BY 1;
 period_diff 
-------------
          18
          18
          18
          18
          18
(5 rows)

-- select period_diff with non pushdown func and explicit constant (explain)
--Testcase 2893:
EXPLAIN VERBOSE
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907)), '3.141592653589793'::double precision, 4.1
   Sort Key: (period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select period_diff with non pushdown func and explicit constant (result)
--Testcase 2894:
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), pi(), 4.1 FROM time_tbl ORDER BY 1;
 period_diff |        pi         | ?column? 
-------------+-------------------+----------
          18 | 3.141592653589793 |      4.1
          18 | 3.141592653589793 |      4.1
          18 | 3.141592653589793 |      4.1
          18 | 3.141592653589793 |      4.1
          18 | 3.141592653589793 |      4.1
(5 rows)

-- select period_diff with order by (explain)
--Testcase 2895:
EXPLAIN VERBOSE
SELECT id, period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl order by id,period_diff(mysql_extract('YEAR_MONTH', c3 ), 199710);
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=4272.49..11183.81 rows=6826 width=12)
   Output: id, period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 199710))
   ->  Sort  (cost=4272.49..4289.55 rows=6826 width=16)
         Output: id, (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 199710)), c3
         Sort Key: time_tbl.id, (period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 199710))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=16)
               Output: id, (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 199710)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `id`, period_diff(extract(YEAR_MONTH FROM `c3`), 199710), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT id, public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 199710), c3 FROM public.time_tbl1mysql
(14 rows)

-- select period_diff with order by (result)
--Testcase 2896:
SELECT id, period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl order by id,period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907);
 id | period_diff 
----+-------------
  0 |          18
  1 |          18
  2 |          18
  3 |          18
  4 |          18
(5 rows)

-- select period_diff with order by index (result)
--Testcase 2897:
SELECT id, period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl order by 2,1;
 id | period_diff 
----+-------------
  0 |          18
  1 |          18
  2 |          18
  3 |          18
  4 |          18
(5 rows)

-- select period_diff with order by index (result)
--Testcase 2898:
SELECT id, period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl order by 1,2;
 id | period_diff 
----+-------------
  0 |          18
  1 |          18
  2 |          18
  3 |          18
  4 |          18
(5 rows)

-- select period_diff with group by index (result)
--Testcase 2899:
SELECT id, period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | period_diff 
----+-------------
  0 |          18
  1 |          18
  2 |          18
  3 |          18
  4 |          18
(5 rows)

-- select period_diff with group by index (result)
--Testcase 2900:
SELECT id, period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | period_diff 
----+-------------
  0 |          18
  1 |          18
  2 |          18
  3 |          18
  4 |          18
(5 rows)

-- select period_diff with group by having (explain)
--Testcase 2901:
EXPLAIN VERBOSE
SELECT max(c3), period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl group by  period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907),c3 HAVING period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) > 0 ORDER BY 1,2;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4027.01..4027.17 rows=67 width=20)
   Output: (max(c3)), (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907)), c3
   Sort Key: (max(time_tbl.c3)), (period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  HashAggregate  (cost=3888.97..4024.97 rows=67 width=20)
         Output: max(c3), (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907)), c3
         Group Key: (period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907)), time_tbl.c3
         Filter: ((period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907)) > 0)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=12)
               Output: (period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT period_diff(extract(YEAR_MONTH FROM `c3`), 201907), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), c3 FROM public.time_tbl1mysql
(16 rows)

-- select period_diff with group by having (result)
--Testcase 2902:
SELECT max(c3), period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl group by  period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907),c3 HAVING period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) > 0 ORDER BY 1,2;
         max         | period_diff 
---------------------+-------------
 2021-01-03 12:10:30 |          18
 2021-01-04 23:12:13 |          18
 2021-01-05 11:12:12 |          18
 2021-01-06 16:00:00 |          18
 2021-01-07 00:59:59 |          18
(5 rows)

-- select period_diff with group by index having (result)
--Testcase 2903:
SELECT id, c3, period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl group by 3, 2, 1 HAVING period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) > 0 ORDER BY 1,2,3;
 id |         c3          | period_diff 
----+---------------------+-------------
  0 | 2021-01-03 12:10:30 |          18
  1 | 2021-01-04 23:12:13 |          18
  2 | 2021-01-05 11:12:12 |          18
  3 | 2021-01-06 16:00:00 |          18
  4 | 2021-01-07 00:59:59 |          18
(5 rows)

-- select period_diff with group by index having (result)
--Testcase 2904:
SELECT id, c3, period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl group by 1, 2, 3 HAVING period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) > 0 ORDER BY 1,2,3;
 id |         c3          | period_diff 
----+---------------------+-------------
  0 | 2021-01-03 12:10:30 |          18
  1 | 2021-01-04 23:12:13 |          18
  2 | 2021-01-05 11:12:12 |          18
  3 | 2021-01-06 16:00:00 |          18
  4 | 2021-01-07 00:59:59 |          18
(5 rows)

-- select period_diff and as
--Testcase 2905:
SELECT period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907) as period_diff1 FROM time_tbl ORDER BY 1;
 period_diff1 
--------------
           18
           18
           18
           18
           18
(5 rows)

-- PERIOD_ADD()
-- select period_add (stub function, explain)
--Testcase 2906:
EXPLAIN VERBOSE
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl ORDER BY 1;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=4)
   Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907))
   Sort Key: (period_add(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=4)
         Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT period_add(extract(YEAR_MONTH FROM `c3`), 201907) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.period_add(public.mysql_extract('YEAR_MONTH'::text, c3), 201907) FROM public.time_tbl1mysql
(12 rows)

-- select period_add (stub function, result)
--Testcase 2907:
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl ORDER BY 1;
 period_add 
------------
    1884608
    1884608
    1884608
    1884608
    1884608
(5 rows)

-- select period_add (stub function, not pushdown constraints, explain)
--Testcase 2908:
EXPLAIN VERBOSE
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=408.59..408.68 rows=34 width=4)
   Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907))
   Sort Key: (period_add(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..407.73 rows=34 width=4)
         Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT period_add(extract(YEAR_MONTH FROM `c3`), 201907), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.period_add(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), id FROM public.time_tbl1mysql
(13 rows)

-- select period_add (stub function, not pushdown constraints, result)
--Testcase 2909:
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1;
 period_add 
------------
    1884608
(1 row)

-- select period_add (stub function, pushdown constraints, explain)
--Testcase 2910:
EXPLAIN VERBOSE
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl WHERE id != 200 ORDER BY 1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4269.46..4286.44 rows=6792 width=4)
   Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907))
   Sort Key: (period_add(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.16 rows=6792 width=4)
         Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT period_add(extract(YEAR_MONTH FROM `c3`), 201907) FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.period_add(public.mysql_extract('YEAR_MONTH'::text, c3), 201907) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select period_add (stub function, pushdown constraints, result)
--Testcase 2911:
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl WHERE id != 200 ORDER BY 1;
 period_add 
------------
    1884608
    1884608
    1884608
    1884608
    1884608
(5 rows)

-- select period_add (stub function, period_add in constraints, explain)
--Testcase 2912:
EXPLAIN VERBOSE
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl WHERE period_add(mysql_extract('YEAR_MONTH', c3 ), 199710) > id ORDER BY 1;
                                                                                                       QUERY PLAN                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5028.76..5034.45 rows=2276 width=4)
   Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907))
   Sort Key: (period_add(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4901.85 rows=2276 width=4)
         Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT period_add(extract(YEAR_MONTH FROM `c3`), 201907) FROM `test`.`time_tbl2` WHERE ((period_add(extract(YEAR_MONTH FROM `c3`), 199710) > `id`))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.period_add(public.mysql_extract('YEAR_MONTH'::text, c3), 201907) FROM public.time_tbl1mysql WHERE ((public.period_add(public.mysql_extract('YEAR_MONTH'::text, c3), 199710) > id))
(12 rows)

-- select period_add (stub function, period_add in constraints, result)
--Testcase 2913:
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl WHERE period_add(mysql_extract('YEAR_MONTH', c3 ), 199710) > id ORDER BY 1;
 period_add 
------------
    1884608
    1884608
    1884608
    1884608
    1884608
(5 rows)

-- select period_add with agg (pushdown, explain)
--Testcase 2914:
EXPLAIN VERBOSE
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl ORDER BY 1;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=4)
   Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907))
   Sort Key: (period_add(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=4)
         Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT period_add(extract(YEAR_MONTH FROM `c3`), 201907) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.period_add(public.mysql_extract('YEAR_MONTH'::text, c3), 201907) FROM public.time_tbl1mysql
(12 rows)

-- select period_add as nest function with agg (pushdown, result)
--Testcase 2915:
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl ORDER BY 1;
 period_add 
------------
    1884608
    1884608
    1884608
    1884608
    1884608
(5 rows)

-- select period_add with non pushdown func and explicit constant (explain)
--Testcase 2916:
EXPLAIN VERBOSE
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907)), '3.141592653589793'::double precision, 4.1
   Sort Key: (period_add(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT period_add(extract(YEAR_MONTH FROM `c3`), 201907), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.period_add(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select period_add with non pushdown func and explicit constant (result)
--Testcase 2917:
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907), pi(), 4.1 FROM time_tbl ORDER BY 1;
 period_add |        pi         | ?column? 
------------+-------------------+----------
    1884608 | 3.141592653589793 |      4.1
    1884608 | 3.141592653589793 |      4.1
    1884608 | 3.141592653589793 |      4.1
    1884608 | 3.141592653589793 |      4.1
    1884608 | 3.141592653589793 |      4.1
(5 rows)

-- select period_add with order by (explain)
--Testcase 2918:
EXPLAIN VERBOSE
SELECT id, period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl order by id,period_add(mysql_extract('YEAR_MONTH', c3 ), 199710),id;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=4272.49..11183.81 rows=6826 width=12)
   Output: id, period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907), (period_add(mysql_extract('YEAR_MONTH'::text, c3), 199710))
   ->  Sort  (cost=4272.49..4289.55 rows=6826 width=16)
         Output: id, (period_add(mysql_extract('YEAR_MONTH'::text, c3), 199710)), c3
         Sort Key: time_tbl.id, (period_add(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 199710))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=16)
               Output: id, (period_add(mysql_extract('YEAR_MONTH'::text, c3), 199710)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `id`, period_add(extract(YEAR_MONTH FROM `c3`), 199710), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT id, public.period_add(public.mysql_extract('YEAR_MONTH'::text, c3), 199710), c3 FROM public.time_tbl1mysql
(14 rows)

-- select period_add with order by (result)
--Testcase 2919:
SELECT id, period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl order by id,period_add(mysql_extract('YEAR_MONTH', c3 ), 201907),id;
 id | period_add 
----+------------
  0 |    1884608
  1 |    1884608
  2 |    1884608
  3 |    1884608
  4 |    1884608
(5 rows)

-- select period_add with order by index (result)
--Testcase 2920:
SELECT id, period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl order by 2,1;
 id | period_add 
----+------------
  0 |    1884608
  1 |    1884608
  2 |    1884608
  3 |    1884608
  4 |    1884608
(5 rows)

-- select period_add with order by index (result)
--Testcase 2921:
SELECT id, period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl order by 1,2;
 id | period_add 
----+------------
  0 |    1884608
  1 |    1884608
  2 |    1884608
  3 |    1884608
  4 |    1884608
(5 rows)

-- select period_add with group by index (result)
--Testcase 2922:
SELECT id, period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl group by 2,1 ORDER BY 1;
 id | period_add 
----+------------
  0 |    1884608
  1 |    1884608
  2 |    1884608
  3 |    1884608
  4 |    1884608
(5 rows)

-- select period_add with group by index (result)
--Testcase 2923:
SELECT id, period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl group by 1,2 ORDER BY 1;
 id | period_add 
----+------------
  0 |    1884608
  1 |    1884608
  2 |    1884608
  3 |    1884608
  4 |    1884608
(5 rows)

-- select period_add with group by having (explain)
--Testcase 2924:
EXPLAIN VERBOSE
SELECT max(c3), period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl group by period_add(mysql_extract('YEAR_MONTH', c3 ), 201907),c3 HAVING period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) > 0 ORDER BY 1;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4027.01..4027.17 rows=67 width=20)
   Output: (max(c3)), (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907)), c3
   Sort Key: (max(time_tbl.c3))
   ->  HashAggregate  (cost=3888.97..4024.97 rows=67 width=20)
         Output: max(c3), (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907)), c3
         Group Key: (period_add(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907)), time_tbl.c3
         Filter: ((period_add(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907)) > 0)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=12)
               Output: (period_add(mysql_extract('YEAR_MONTH'::text, c3), 201907)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT period_add(extract(YEAR_MONTH FROM `c3`), 201907), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.period_add(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), c3 FROM public.time_tbl1mysql
(16 rows)

-- select period_add with group by having (result)
--Testcase 2925:
SELECT max(c3), period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl group by period_add(mysql_extract('YEAR_MONTH', c3 ), 201907),c3 HAVING period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) > 0 ORDER BY 1;
         max         | period_add 
---------------------+------------
 2021-01-03 12:10:30 |    1884608
 2021-01-04 23:12:13 |    1884608
 2021-01-05 11:12:12 |    1884608
 2021-01-06 16:00:00 |    1884608
 2021-01-07 00:59:59 |    1884608
(5 rows)

-- select period_add with group by index having (result)
--Testcase 2926:
SELECT id, c3, period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl group by 3, 2, 1 HAVING period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) > 0 ORDER BY 1,2,3;
 id |         c3          | period_add 
----+---------------------+------------
  0 | 2021-01-03 12:10:30 |    1884608
  1 | 2021-01-04 23:12:13 |    1884608
  2 | 2021-01-05 11:12:12 |    1884608
  3 | 2021-01-06 16:00:00 |    1884608
  4 | 2021-01-07 00:59:59 |    1884608
(5 rows)

-- select period_add with group by index having (result)
--Testcase 2927:
SELECT id, c3, period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) FROM time_tbl group by 1, 2, 3 HAVING period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) > 0 ORDER BY 1,2,3;
 id |         c3          | period_add 
----+---------------------+------------
  0 | 2021-01-03 12:10:30 |    1884608
  1 | 2021-01-04 23:12:13 |    1884608
  2 | 2021-01-05 11:12:12 |    1884608
  3 | 2021-01-06 16:00:00 |    1884608
  4 | 2021-01-07 00:59:59 |    1884608
(5 rows)

-- select period_add and as
--Testcase 2928:
SELECT period_add(mysql_extract('YEAR_MONTH', c3 ), 201907) as period_add1 FROM time_tbl ORDER BY 1;
 period_add1 
-------------
     1884608
     1884608
     1884608
     1884608
     1884608
(5 rows)

-- NOW()
-- mysql_now is mutable function, some executes will return different result
-- select mysql_now (stub function, explain)
--Testcase 2929:
EXPLAIN VERBOSE
SELECT mysql_now() FROM time_tbl;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (mysql_now())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT now() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_now() FROM public.time_tbl1mysql
(7 rows)

-- select mysql_now (stub function, not pushdown constraints, explain)
--Testcase 2930:
EXPLAIN VERBOSE
SELECT mysql_now() FROM time_tbl WHERE to_hex(id) > '0';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..982.41 rows=2276 width=8)
   Output: (mysql_now())
   Filter: (to_hex(time_tbl.id) > '0'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT now(), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_now(), id FROM public.time_tbl1mysql
(8 rows)

-- select mysql_now (stub function, pushdown constraints, explain)
--Testcase 2931:
EXPLAIN VERBOSE
SELECT mysql_now() FROM time_tbl WHERE id = 1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..314.50 rows=34 width=8)
   Output: (mysql_now())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT now() FROM `test`.`time_tbl2` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_now() FROM public.time_tbl1mysql WHERE ((id = 1))
(7 rows)

-- select mysql_now (stub function, mysql_now in constraints, explain)
--Testcase 2932:
EXPLAIN VERBOSE
SELECT mysql_now() FROM time_tbl WHERE mysql_now() > '2000-01-01 00:00:00'::timestamp;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=8)
   Output: (mysql_now())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT now() FROM `test`.`time_tbl2` WHERE ((now() > '2000-01-01 00:00:00'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_now() FROM public.time_tbl1mysql WHERE ((public.mysql_now() > '2000-01-01 00:00:00'::timestamp without time zone))
(7 rows)

-- mysql_now in constrains (stub function, explain)
--Testcase 2933:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE mysql_now() > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2057.35 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((now() > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.mysql_now() > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- mysql_now in constrains (stub function, result)
--Testcase 2934:
SELECT c1 FROM time_tbl WHERE mysql_now() > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- mysql_now as parameter of addtime(stub function, explain)
--Testcase 2935:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_now(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(now(), '1 12:59:10.0') > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_now(), '1 day 12:59:10'::interval) > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- mysql_now as parameter of addtime(stub function, result)
--Testcase 2936:
SELECT c1 FROM time_tbl WHERE addtime(mysql_now(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_now and agg (pushdown, explain)
--Testcase 2937:
EXPLAIN VERBOSE
SELECT mysql_now(), sum(id) FROM time_tbl ORDER BY 1,2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort  (cost=159.42..159.42 rows=1 width=16)
   Output: (mysql_now()), (sum(id))
   Sort Key: (mysql_now()), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
         Output: mysql_now(), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select mysql_now and log2 (pushdown, explain)
--Testcase 2938:
EXPLAIN VERBOSE
SELECT mysql_now(), log2(id) FROM time_tbl ORDER BY 1,2;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=16)
   Output: (mysql_now()), (log2((id)::double precision))
   Sort Key: (mysql_now()), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=16)
         Output: (mysql_now()), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT now(), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_now(), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select mysql_now with non pushdown func and explicit constant (explain)
--Testcase 2939:
EXPLAIN VERBOSE
SELECT mysql_now(), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=44)
   Output: (mysql_now()), (to_hex(id)), 4
   Sort Key: (mysql_now()), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=44)
         Output: mysql_now(), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select mysql_now with order by (explain)
--Testcase 2940:
EXPLAIN VERBOSE
SELECT mysql_now(), c1 FROM time_tbl ORDER BY c1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: mysql_now(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- select mysql_now with order by index (explain)
--Testcase 2941:
EXPLAIN VERBOSE
SELECT mysql_now(), c1 FROM time_tbl ORDER BY 2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: mysql_now(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- mysql_now constraints with order by (explain)
--Testcase 2942:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_now(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY c1;
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(now(), '1 12:59:10.0') > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_now(), '1 day 12:59:10'::interval) > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- mysql_now constraints with order by (result)
--Testcase 2943:
SELECT c1 FROM time_tbl WHERE addtime(mysql_now(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_now with group by (explain)
--Testcase 2944:
EXPLAIN VERBOSE
SELECT mysql_now(), c1 FROM time_tbl GROUP BY c1 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (mysql_now()), c1
   Sort Key: (mysql_now()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: mysql_now(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select mysql_now with group by index (explain)
--Testcase 2945:
EXPLAIN VERBOSE
SELECT mysql_now(), c1 FROM time_tbl GROUP BY 2 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (mysql_now()), c1
   Sort Key: (mysql_now()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: mysql_now(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select mysql_now with group by having (explain)
--Testcase 2946:
EXPLAIN VERBOSE
SELECT mysql_now(), c1 FROM time_tbl GROUP BY mysql_now(),c1 HAVING mysql_now() > '2000-01-01 00:00:00'::timestamp ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (mysql_now()), c1
   Sort Key: (mysql_now()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (mysql_now()), c1
         Group Key: (mysql_now()), time_tbl.c1
         Filter: ((mysql_now()) > '2000-01-01 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (mysql_now()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT now(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_now(), c1 FROM public.time_tbl1mysql
(16 rows)

-- select mysql_now with group by index having (explain)
--Testcase 2947:
EXPLAIN VERBOSE
SELECT mysql_now(), c1 FROM time_tbl GROUP BY 2,1 HAVING mysql_now() > '2000-01-01 00:00:00'::timestamp ORDER BY 1,2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (mysql_now()), c1
   Sort Key: (mysql_now()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (mysql_now()), c1
         Group Key: (mysql_now()), time_tbl.c1
         Filter: ((mysql_now()) > '2000-01-01 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (mysql_now()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT now(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_now(), c1 FROM public.time_tbl1mysql
(16 rows)

-- mysql_now constraints with group by (explain)
--Testcase 2948:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_now(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp GROUP BY c1 ORDER BY 1;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1883.02..1883.02 rows=0 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan  (cost=112.84..1883.01 rows=0 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(now(), '1 12:59:10.0') > '2000-01-01 00:00:00')) GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_now(), '1 day 12:59:10'::interval) > '2000-01-01 00:00:00'::timestamp without time zone)) GROUP BY 1
(16 rows)

-- mysql_now constraints with group by (result)
--Testcase 2949:
SELECT c1 FROM time_tbl WHERE addtime(mysql_now(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp GROUP BY c1 ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_now and as
--Testcase 2950:
EXPLAIN VERBOSE
SELECT mysql_now() as mysql_now1 FROM time_tbl;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (mysql_now())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT now() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_now() FROM public.time_tbl1mysql
(7 rows)

-- MONTHNAME()
-- select monthname (stub function, explain)
--Testcase 2951:
EXPLAIN VERBOSE
SELECT monthname(c3), monthname(c2), monthname(date_sub(c3, '1 12:59:10')), monthname('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                    QUERY PLAN                                                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9409.05..9426.12 rows=6826 width=128)
   Output: (monthname(c3)), (monthname((c2)::timestamp without time zone)), (monthname(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (monthname(time_tbl.c3)), (monthname((time_tbl.c2)::timestamp without time zone)), (monthname(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8974.35 rows=6826 width=128)
         Output: (monthname(c3)), (monthname((c2)::timestamp without time zone)), (monthname(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT monthname(`c3`), monthname(`c2`), monthname(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), monthname('2021-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.monthname(c3), public.monthname(c2), public.monthname(public.date_sub(c3, '1 day 12:59:10'::interval)), public.monthname('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select monthname (stub function, result)
--Testcase 2952:
SELECT monthname(c3), monthname(c2), monthname(date_sub(c3, '1 12:59:10')), monthname('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
 monthname | monthname | monthname | monthname 
-----------+-----------+-----------+-----------
 January   | January   | January   | January
 January   | January   | January   | January
 January   | January   | January   | January
 January   | January   | January   | January
 January   | January   | January   | January
(5 rows)

-- select monthname (stub function, not pushdown constraints, explain)
--Testcase 2953:
EXPLAIN VERBOSE
SELECT monthname(c3), monthname(c2), monthname(date_sub(c3, '1 12:59:10')), monthname('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                    QUERY PLAN                                                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.18..434.26 rows=34 width=128)
   Output: (monthname(c3)), (monthname((c2)::timestamp without time zone)), (monthname(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (monthname(time_tbl.c3)), (monthname((time_tbl.c2)::timestamp without time zone)), (monthname(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.31 rows=34 width=128)
         Output: (monthname(c3)), (monthname((c2)::timestamp without time zone)), (monthname(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT monthname(`c3`), monthname(`c2`), monthname(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), monthname('2021-01-01 12:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.monthname(c3), public.monthname(c2), public.monthname(public.date_sub(c3, '1 day 12:59:10'::interval)), public.monthname('2021-01-01 12:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select monthname (stub function, not pushdown constraints, result)
--Testcase 2954:
SELECT monthname(c3), monthname(c2), monthname(date_sub(c3, '1 12:59:10')), monthname('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
 monthname | monthname | monthname | monthname 
-----------+-----------+-----------+-----------
 January   | January   | January   | January
(1 row)

-- select monthname (stub function, pushdown constraints, explain)
--Testcase 2955:
EXPLAIN VERBOSE
SELECT monthname(c3), monthname(c2), monthname(date_sub(c3, '1 12:59:10')), monthname('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                           QUERY PLAN                                                                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9380.44..9397.42 rows=6792 width=128)
   Output: (monthname(c3)), (monthname((c2)::timestamp without time zone)), (monthname(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (monthname(time_tbl.c3)), (monthname((time_tbl.c2)::timestamp without time zone)), (monthname(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8948.15 rows=6792 width=128)
         Output: (monthname(c3)), (monthname((c2)::timestamp without time zone)), (monthname(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT monthname(`c3`), monthname(`c2`), monthname(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), monthname('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.monthname(c3), public.monthname(c2), public.monthname(public.date_sub(c3, '1 day 12:59:10'::interval)), public.monthname('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select monthname (stub function, pushdown constraints, result)
--Testcase 2956:
SELECT monthname(c3), monthname(c2), monthname(date_sub(c3, '1 12:59:10')), monthname('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
 monthname | monthname | monthname | monthname 
-----------+-----------+-----------+-----------
 January   | January   | January   | January
 January   | January   | January   | January
 January   | January   | January   | January
 January   | January   | January   | January
 January   | January   | January   | January
(5 rows)

-- select monthname (stub function, monthname in constraints, explain)
--Testcase 2957:
EXPLAIN VERBOSE
SELECT monthname(c3), monthname(c2), monthname(date_sub(c3, '1 12:59:10')), monthname('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE monthname(c3) = monthname('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
                                                                                                                                                                    QUERY PLAN                                                                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3762.45..3762.54 rows=34 width=128)
   Output: (monthname(c3)), (monthname((c2)::timestamp without time zone)), (monthname(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (monthname(time_tbl.c3)), (monthname((time_tbl.c2)::timestamp without time zone)), (monthname(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3761.59 rows=34 width=128)
         Output: (monthname(c3)), (monthname((c2)::timestamp without time zone)), (monthname(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT monthname(`c3`), monthname(`c2`), monthname(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), monthname('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((monthname(`c3`) = monthname('2000-01-01 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.monthname(c3), public.monthname(c2), public.monthname(public.date_sub(c3, '1 day 12:59:10'::interval)), public.monthname('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.monthname(c3) = public.monthname('2000-01-01 00:00:00'::timestamp without time zone)))
(12 rows)

-- select monthname (stub function, monthname in constraints, result)
--Testcase 2958:
SELECT monthname(c3), monthname(c2), monthname(date_sub(c3, '1 12:59:10')), monthname('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE monthname(c3) = monthname('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
 monthname | monthname | monthname | monthname 
-----------+-----------+-----------+-----------
 January   | January   | January   | January
 January   | January   | January   | January
 January   | January   | January   | January
 January   | January   | January   | January
 January   | January   | January   | January
(5 rows)

-- select monthname (stub function, monthname in constraints, explain)
--Testcase 2959:
EXPLAIN VERBOSE
SELECT monthname(c3), monthname(c2), monthname(date_sub(c3, '1 12:59:10')), monthname('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE monthname('2021-01-01 12:00:00'::timestamp) = 'January' ORDER BY 1,2,3,4;
                                                                                                                                                                  QUERY PLAN                                                                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2055.95..2056.04 rows=34 width=128)
   Output: (monthname(c3)), (monthname((c2)::timestamp without time zone)), (monthname(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (monthname(time_tbl.c3)), (monthname((time_tbl.c2)::timestamp without time zone)), (monthname(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2055.09 rows=34 width=128)
         Output: (monthname(c3)), (monthname((c2)::timestamp without time zone)), (monthname(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (monthname('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT monthname(`c3`), monthname(`c2`), monthname(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), monthname('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((monthname('2021-01-01 12:00:00') = 'January'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.monthname(c3), public.monthname(c2), public.monthname(public.date_sub(c3, '1 day 12:59:10'::interval)), public.monthname('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.monthname('2021-01-01 12:00:00'::timestamp without time zone) = 'January'::text))
(12 rows)

-- select monthname (stub function, monthname in constraints, result)
--Testcase 2960:
SELECT monthname(c3), monthname(c2), monthname(date_sub(c3, '1 12:59:10')), monthname('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE monthname('2021-01-01 12:00:00'::timestamp) = 'January' ORDER BY 1,2,3,4;
 monthname | monthname | monthname | monthname 
-----------+-----------+-----------+-----------
 January   | January   | January   | January
 January   | January   | January   | January
 January   | January   | January   | January
 January   | January   | January   | January
 January   | January   | January   | January
(5 rows)

-- select monthname with agg (pushdown, explain)
--Testcase 2961:
EXPLAIN VERBOSE
SELECT max(c3), monthname(max(c3)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (max(c3)), monthname((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select monthname as nest function with agg (pushdown, result)
--Testcase 2962:
SELECT max(c3), monthname(max(c3)) FROM time_tbl;
ERROR:  stub monthname(timestamp) is called
CONTEXT:  PL/pgSQL function monthname(timestamp without time zone) line 3 at RAISE
-- select monthname with non pushdown func and explicit constant (explain)
--Testcase 2963:
EXPLAIN VERBOSE
SELECT monthname(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=72)
   Output: (monthname(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (monthname(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=72)
         Output: (monthname(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT monthname(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.monthname(public.date_sub(c3, '1 day 12:59:10'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select monthname with non pushdown func and explicit constant (result)
--Testcase 2964:
SELECT monthname(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
 monthname |        pi         | ?column? 
-----------+-------------------+----------
 January   | 3.141592653589793 |      4.1
 January   | 3.141592653589793 |      4.1
 January   | 3.141592653589793 |      4.1
 January   | 3.141592653589793 |      4.1
 January   | 3.141592653589793 |      4.1
(5 rows)

-- select monthname with order by (explain)
--Testcase 2965:
EXPLAIN VERBOSE
SELECT id, monthname(c3 + '1 12:59:10') FROM time_tbl order by id,monthname(c3 + '1 12:59:10');
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=36)
   Output: id, (monthname((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: time_tbl.id, (monthname((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=36)
         Output: id, (monthname((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, monthname((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.monthname((c3 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select monthname with order by (result)
--Testcase 2966:
SELECT id, monthname(c3 + '1 12:59:10') FROM time_tbl order by id,monthname(c3 + '1 12:59:10');
 id | monthname 
----+-----------
  0 | January
  1 | January
  2 | January
  3 | January
  4 | January
(5 rows)

-- select monthname with order by index (result)
--Testcase 2967:
SELECT id, monthname(c3 + '1 12:59:10') FROM time_tbl order by 2,1;
 id | monthname 
----+-----------
  0 | January
  1 | January
  2 | January
  3 | January
  4 | January
(5 rows)

-- select monthname with order by index (result)
--Testcase 2968:
SELECT id, monthname(c3 + '1 12:59:10') FROM time_tbl order by 1,2;
 id | monthname 
----+-----------
  0 | January
  1 | January
  2 | January
  3 | January
  4 | January
(5 rows)

-- select monthname with group by (explain)
--Testcase 2969:
EXPLAIN VERBOSE
SELECT max(c3), monthname(c3 + '1 12:59:10') FROM time_tbl group by monthname(c3 + '1 12:59:10') ORDER BY 1,2;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=40)
   Output: (max(c3)), (monthname((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: (max(time_tbl.c3)), (monthname((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=40)
         Output: max(c3), (monthname((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Group Key: (monthname((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=40)
               Output: (monthname((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT monthname((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.monthname((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(15 rows)

-- select monthname with group by (result)
--Testcase 2970:
SELECT max(c3), monthname(c3 + '1 12:59:10') FROM time_tbl group by monthname(c3 + '1 12:59:10') ORDER BY 1,2;
         max         | monthname 
---------------------+-----------
 2021-01-07 00:59:59 | January
(1 row)

-- select monthname with group by index (result)
--Testcase 2971:
SELECT id, monthname(c3 + '1 12:59:10') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | monthname 
----+-----------
  0 | January
  1 | January
  2 | January
  3 | January
  4 | January
(5 rows)

-- select monthname with group by index (result)
--Testcase 2972:
SELECT id, monthname(c3 + '1 12:59:10') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | monthname 
----+-----------
  0 | January
  1 | January
  2 | January
  3 | January
  4 | January
(5 rows)

-- select monthname with group by having (explain)
--Testcase 2973:
EXPLAIN VERBOSE
SELECT max(c3), monthname(c3 + '1 12:59:10') FROM time_tbl group by monthname(c3 + '1 12:59:10'), c3 HAVING monthname(c3 + '1 12:59:10') = 'January' ORDER BY 1,2;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2252.80..2252.81 rows=1 width=48)
   Output: (max(c3)), (monthname((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
   Sort Key: (max(time_tbl.c3)), (monthname((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2199.54..2252.79 rows=1 width=48)
         Output: max(c3), (monthname((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
         Group Key: (monthname((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), time_tbl.c3
         Filter: ((monthname((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))) = 'January'::text)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=40)
               Output: (monthname((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT monthname((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.monthname((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(16 rows)

-- select monthname with group by having (result)
--Testcase 2974:
SELECT max(c3), monthname(c3 + '1 12:59:10') FROM time_tbl group by monthname(c3 + '1 12:59:10'), c3 HAVING monthname(c3 + '1 12:59:10') = 'January' ORDER BY 1,2;
         max         | monthname 
---------------------+-----------
 2021-01-03 12:10:30 | January
 2021-01-04 23:12:13 | January
 2021-01-05 11:12:12 | January
 2021-01-06 16:00:00 | January
 2021-01-07 00:59:59 | January
(5 rows)

-- select monthname with group by index having (result)
--Testcase 2975:
SELECT id, monthname(c3 + '1 12:59:10'), c3 FROM time_tbl group by 3, 2, 1 HAVING monthname(c3 + '1 12:59:10') = 'January' ORDER BY 1,2;
 id | monthname |         c3          
----+-----------+---------------------
  0 | January   | 2021-01-03 12:10:30
  1 | January   | 2021-01-04 23:12:13
  2 | January   | 2021-01-05 11:12:12
  3 | January   | 2021-01-06 16:00:00
  4 | January   | 2021-01-07 00:59:59
(5 rows)

-- select monthname with group by index having (result)
--Testcase 2976:
SELECT id, monthname(c3 + '1 12:59:10'), c3 FROM time_tbl group by 1, 2, 3 HAVING monthname(c3 + '1 12:59:10') = 'January' ORDER BY 1,2;
 id | monthname |         c3          
----+-----------+---------------------
  0 | January   | 2021-01-03 12:10:30
  1 | January   | 2021-01-04 23:12:13
  2 | January   | 2021-01-05 11:12:12
  3 | January   | 2021-01-06 16:00:00
  4 | January   | 2021-01-07 00:59:59
(5 rows)

-- select monthname and as
--Testcase 2977:
SELECT monthname(date_sub(c3, '1 12:59:10')) as monthname1 FROM time_tbl ORDER BY 1;
 monthname1 
------------
 January
 January
 January
 January
 January
(5 rows)

-- MONTH()
-- select month (stub function, explain)
--Testcase 2978:
EXPLAIN VERBOSE
SELECT month(c3), month(c2), month(date_sub(c3, '1 12:59:10')), month('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                            QUERY PLAN                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9409.05..9426.12 rows=6826 width=16)
   Output: (month(c3)), (month((c2)::timestamp without time zone)), (month(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (month(time_tbl.c3)), (month((time_tbl.c2)::timestamp without time zone)), (month(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8974.35 rows=6826 width=16)
         Output: (month(c3)), (month((c2)::timestamp without time zone)), (month(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT month(`c3`), month(`c2`), month(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), month('2021-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.month(c3), public.month(c2), public.month(public.date_sub(c3, '1 day 12:59:10'::interval)), public.month('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select month (stub function, result)
--Testcase 2979:
SELECT month(c3), month(c2), month(date_sub(c3, '1 12:59:10')), month('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
 month | month | month | month 
-------+-------+-------+-------
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
(5 rows)

-- select month (stub function, not pushdown constraints, explain)
--Testcase 2980:
EXPLAIN VERBOSE
SELECT month(c3), month(c2), month(date_sub(c3, '1 12:59:10')), month('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                            QUERY PLAN                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.18..434.26 rows=34 width=16)
   Output: (month(c3)), (month((c2)::timestamp without time zone)), (month(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (month(time_tbl.c3)), (month((time_tbl.c2)::timestamp without time zone)), (month(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.31 rows=34 width=16)
         Output: (month(c3)), (month((c2)::timestamp without time zone)), (month(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT month(`c3`), month(`c2`), month(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), month('2021-01-01 12:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.month(c3), public.month(c2), public.month(public.date_sub(c3, '1 day 12:59:10'::interval)), public.month('2021-01-01 12:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select month (stub function, not pushdown constraints, result)
--Testcase 2981:
SELECT month(c3), month(c2), month(date_sub(c3, '1 12:59:10')), month('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
 month | month | month | month 
-------+-------+-------+-------
     1 |     1 |     1 |     1
(1 row)

-- select month (stub function, pushdown constraints, explain)
--Testcase 2982:
EXPLAIN VERBOSE
SELECT month(c3), month(c2), month(date_sub(c3, '1 12:59:10')), month('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                   QUERY PLAN                                                                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9380.44..9397.42 rows=6792 width=16)
   Output: (month(c3)), (month((c2)::timestamp without time zone)), (month(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (month(time_tbl.c3)), (month((time_tbl.c2)::timestamp without time zone)), (month(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8948.15 rows=6792 width=16)
         Output: (month(c3)), (month((c2)::timestamp without time zone)), (month(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT month(`c3`), month(`c2`), month(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), month('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.month(c3), public.month(c2), public.month(public.date_sub(c3, '1 day 12:59:10'::interval)), public.month('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select month (stub function, pushdown constraints, result)
--Testcase 2983:
SELECT month(c3), month(c2), month(date_sub(c3, '1 12:59:10')), month('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
 month | month | month | month 
-------+-------+-------+-------
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
(5 rows)

-- select month (stub function, month in constraints, explain)
--Testcase 2984:
EXPLAIN VERBOSE
SELECT month(c3), month(c2), month(date_sub(c3, '1 12:59:10')), month('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE month(c3) = month('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
                                                                                                                                                        QUERY PLAN                                                                                                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3762.45..3762.54 rows=34 width=16)
   Output: (month(c3)), (month((c2)::timestamp without time zone)), (month(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (month(time_tbl.c3)), (month((time_tbl.c2)::timestamp without time zone)), (month(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3761.59 rows=34 width=16)
         Output: (month(c3)), (month((c2)::timestamp without time zone)), (month(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT month(`c3`), month(`c2`), month(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), month('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((month(`c3`) = month('2000-01-01 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.month(c3), public.month(c2), public.month(public.date_sub(c3, '1 day 12:59:10'::interval)), public.month('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.month(c3) = public.month('2000-01-01 00:00:00'::timestamp without time zone)))
(12 rows)

-- select month (stub function, month in constraints, result)
--Testcase 2985:
SELECT month(c3), month(c2), month(date_sub(c3, '1 12:59:10')), month('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE month(c3) = month('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
 month | month | month | month 
-------+-------+-------+-------
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
(5 rows)

-- select month (stub function, month in constraints, explain)
--Testcase 2986:
EXPLAIN VERBOSE
SELECT month(c3), month(c2), month(date_sub(c3, '1 12:59:10')), month('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE month('2021-01-01 12:00:00'::timestamp) = '1' ORDER BY 1,2,3,4;
                                                                                                                                                 QUERY PLAN                                                                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2055.95..2056.04 rows=34 width=16)
   Output: (month(c3)), (month((c2)::timestamp without time zone)), (month(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (month(time_tbl.c3)), (month((time_tbl.c2)::timestamp without time zone)), (month(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2055.09 rows=34 width=16)
         Output: (month(c3)), (month((c2)::timestamp without time zone)), (month(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (month('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT month(`c3`), month(`c2`), month(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), month('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((month('2021-01-01 12:00:00') = 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.month(c3), public.month(c2), public.month(public.date_sub(c3, '1 day 12:59:10'::interval)), public.month('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.month('2021-01-01 12:00:00'::timestamp without time zone) = 1))
(12 rows)

-- select month (stub function, month in constraints, result)
--Testcase 2987:
SELECT month(c3), month(c2), month(date_sub(c3, '1 12:59:10')), month('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE month('2021-01-01 12:00:00'::timestamp) = '1' ORDER BY 1,2,3,4;
 month | month | month | month 
-------+-------+-------+-------
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
(5 rows)

-- select month with agg (pushdown, explain)
--Testcase 2988:
EXPLAIN VERBOSE
SELECT max(c3), month(max(c3)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c3)), month((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select month as nest function with agg (pushdown, result)
--Testcase 2989:
SELECT max(c3), month(max(c3)) FROM time_tbl;
ERROR:  stub month(timestamp) is called
CONTEXT:  PL/pgSQL function month(timestamp without time zone) line 3 at RAISE
-- select month with non pushdown func and explicit constant (explain)
--Testcase 2990:
EXPLAIN VERBOSE
SELECT month(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (month(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (month(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (month(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT month(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.month(public.date_sub(c3, '1 day 12:59:10'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select month with non pushdown func and explicit constant (result)
--Testcase 2991:
SELECT month(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl;
 month |        pi         | ?column? 
-------+-------------------+----------
     1 | 3.141592653589793 |      4.1
     1 | 3.141592653589793 |      4.1
     1 | 3.141592653589793 |      4.1
     1 | 3.141592653589793 |      4.1
     1 | 3.141592653589793 |      4.1
(5 rows)

-- select month with order by (explain)
--Testcase 2992:
EXPLAIN VERBOSE
SELECT id, month(c3 + '1 12:59:10') FROM time_tbl order by id,month(c3 + '1 12:59:10'),id;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=8)
   Output: id, (month((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: time_tbl.id, (month((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=8)
         Output: id, (month((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, month((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.month((c3 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select month with order by (result)
--Testcase 2993:
SELECT id, month(c3 + '1 12:59:10') FROM time_tbl order by id,month(c3 + '1 12:59:10'),id;
 id | month 
----+-------
  0 |     1
  1 |     1
  2 |     1
  3 |     1
  4 |     1
(5 rows)

-- select month with order by index (result)
--Testcase 2994:
SELECT id, month(c3 + '1 12:59:10') FROM time_tbl order by 2,1;
 id | month 
----+-------
  0 |     1
  1 |     1
  2 |     1
  3 |     1
  4 |     1
(5 rows)

-- select month with order by index (result)
--Testcase 2995:
SELECT id, month(c3 + '1 12:59:10') FROM time_tbl order by 1,2;
 id | month 
----+-------
  0 |     1
  1 |     1
  2 |     1
  3 |     1
  4 |     1
(5 rows)

-- select month with group by (explain)
--Testcase 2996:
EXPLAIN VERBOSE
SELECT max(c3), month(c3 + '1 12:59:10') FROM time_tbl group by month(c3 + '1 12:59:10') ORDER BY 1,2;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=12)
   Output: (max(c3)), (month((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: (max(time_tbl.c3)), (month((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=12)
         Output: max(c3), (month((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Group Key: (month((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (month((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT month((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.month((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(15 rows)

-- select month with group by (result)
--Testcase 2997:
SELECT max(c3), month(c3 + '1 12:59:10') FROM time_tbl group by month(c3 + '1 12:59:10') ORDER BY 1,2;
         max         | month 
---------------------+-------
 2021-01-07 00:59:59 |     1
(1 row)

-- select month with group by index (result)
--Testcase 2998:
SELECT id, month(c3 + '1 12:59:10') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | month 
----+-------
  0 |     1
  1 |     1
  2 |     1
  3 |     1
  4 |     1
(5 rows)

-- select month with group by index (result)
--Testcase 2999:
SELECT id, month(c3 + '1 12:59:10') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | month 
----+-------
  0 |     1
  1 |     1
  2 |     1
  3 |     1
  4 |     1
(5 rows)

-- select month with group by having (explain)
--Testcase 3000:
EXPLAIN VERBOSE
SELECT max(c3), month(c3 + '1 12:59:10') FROM time_tbl group by month(c3 + '1 12:59:10'), c3 HAVING month(c3 + '1 12:59:10') < 12 ORDER BY 1,2;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=20)
   Output: (max(c3)), (month((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
   Sort Key: (max(time_tbl.c3)), (month((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=20)
         Output: max(c3), (month((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
         Group Key: (month((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), time_tbl.c3
         Filter: ((month((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))) < 12)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (month((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT month((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.month((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(16 rows)

-- select month with group by having (result)
--Testcase 3001:
SELECT max(c3), month(c3 + '1 12:59:10') FROM time_tbl group by month(c3 + '1 12:59:10'), c3 HAVING month(c3 + '1 12:59:10') < 12 ORDER BY 1,2;
         max         | month 
---------------------+-------
 2021-01-03 12:10:30 |     1
 2021-01-04 23:12:13 |     1
 2021-01-05 11:12:12 |     1
 2021-01-06 16:00:00 |     1
 2021-01-07 00:59:59 |     1
(5 rows)

-- select month with group by index having (result)
--Testcase 3002:
SELECT id, month(c3 + '1 12:59:10'), c3 FROM time_tbl group by 3, 2, 1 HAVING month(c3 + '1 12:59:10') < 12 ORDER BY 1,2;
 id | month |         c3          
----+-------+---------------------
  0 |     1 | 2021-01-03 12:10:30
  1 |     1 | 2021-01-04 23:12:13
  2 |     1 | 2021-01-05 11:12:12
  3 |     1 | 2021-01-06 16:00:00
  4 |     1 | 2021-01-07 00:59:59
(5 rows)

-- select month with group by index having (result)
--Testcase 3003:
SELECT id, month(c3 + '1 12:59:10'), c3 FROM time_tbl group by 1, 2, 3 HAVING month(c3 + '1 12:59:10') < 12 ORDER BY 1,2;
 id | month |         c3          
----+-------+---------------------
  0 |     1 | 2021-01-03 12:10:30
  1 |     1 | 2021-01-04 23:12:13
  2 |     1 | 2021-01-05 11:12:12
  3 |     1 | 2021-01-06 16:00:00
  4 |     1 | 2021-01-07 00:59:59
(5 rows)

-- select month and as
--Testcase 3004:
SELECT month(date_sub(c3, '1 12:59:10')) as month1 FROM time_tbl ORDER BY 1;
 month1 
--------
      1
      1
      1
      1
      1
(5 rows)

-- MINUTE()
-- select minute (stub function, explain)
--Testcase 3005:
EXPLAIN VERBOSE
SELECT minute(c3), minute(c2), minute(date_sub(c3, '1 12:59:10')), minute('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                              QUERY PLAN                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9409.05..9426.12 rows=6826 width=16)
   Output: (minute(c3)), (minute((c2)::timestamp without time zone)), (minute(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (minute(time_tbl.c3)), (minute((time_tbl.c2)::timestamp without time zone)), (minute(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8974.35 rows=6826 width=16)
         Output: (minute(c3)), (minute((c2)::timestamp without time zone)), (minute(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT minute(`c3`), minute(`c2`), minute(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), minute('2021-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.minute(c3), public.minute(c2), public.minute(public.date_sub(c3, '1 day 12:59:10'::interval)), public.minute('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select minute (stub function, result)
--Testcase 3006:
SELECT minute(c3), minute(c2), minute(date_sub(c3, '1 12:59:10')), minute('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
 minute | minute | minute | minute 
--------+--------+--------+--------
      0 |      0 |      0 |      0
     10 |      0 |     11 |      0
     12 |      0 |     13 |      0
     12 |      0 |     13 |      0
     59 |      0 |      0 |      0
(5 rows)

-- select minute (stub function, not pushdown constraints, explain)
--Testcase 3007:
EXPLAIN VERBOSE
SELECT minute(c3), minute(c2), minute(date_sub(c3, '1 12:59:10')), minute('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                              QUERY PLAN                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.18..434.26 rows=34 width=16)
   Output: (minute(c3)), (minute((c2)::timestamp without time zone)), (minute(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (minute(time_tbl.c3)), (minute((time_tbl.c2)::timestamp without time zone)), (minute(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.31 rows=34 width=16)
         Output: (minute(c3)), (minute((c2)::timestamp without time zone)), (minute(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT minute(`c3`), minute(`c2`), minute(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), minute('2021-01-01 12:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.minute(c3), public.minute(c2), public.minute(public.date_sub(c3, '1 day 12:59:10'::interval)), public.minute('2021-01-01 12:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select minute (stub function, not pushdown constraints, result)
--Testcase 3008:
SELECT minute(c3), minute(c2), minute(date_sub(c3, '1 12:59:10')), minute('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
 minute | minute | minute | minute 
--------+--------+--------+--------
     12 |      0 |     13 |      0
(1 row)

-- select minute (stub function, pushdown constraints, explain)
--Testcase 3009:
EXPLAIN VERBOSE
SELECT minute(c3), minute(c2), minute(date_sub(c3, '1 12:59:10')), minute('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9380.44..9397.42 rows=6792 width=16)
   Output: (minute(c3)), (minute((c2)::timestamp without time zone)), (minute(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (minute(time_tbl.c3)), (minute((time_tbl.c2)::timestamp without time zone)), (minute(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8948.15 rows=6792 width=16)
         Output: (minute(c3)), (minute((c2)::timestamp without time zone)), (minute(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT minute(`c3`), minute(`c2`), minute(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), minute('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.minute(c3), public.minute(c2), public.minute(public.date_sub(c3, '1 day 12:59:10'::interval)), public.minute('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select minute (stub function, pushdown constraints, result)
--Testcase 3010:
SELECT minute(c3), minute(c2), minute(date_sub(c3, '1 12:59:10')), minute('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
 minute | minute | minute | minute 
--------+--------+--------+--------
      0 |      0 |      0 |      0
     10 |      0 |     11 |      0
     12 |      0 |     13 |      0
     12 |      0 |     13 |      0
     59 |      0 |      0 |      0
(5 rows)

-- select minute (stub function, minute in constraints, explain)
--Testcase 3011:
EXPLAIN VERBOSE
SELECT minute(c3), minute(c2), minute(date_sub(c3, '1 12:59:10')), minute('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE minute(c3) > minute('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
                                                                                                                                                           QUERY PLAN                                                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6741.45..6747.14 rows=2276 width=16)
   Output: (minute(c3)), (minute((c2)::timestamp without time zone)), (minute(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (minute(time_tbl.c3)), (minute((time_tbl.c2)::timestamp without time zone)), (minute(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..6614.53 rows=2276 width=16)
         Output: (minute(c3)), (minute((c2)::timestamp without time zone)), (minute(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT minute(`c3`), minute(`c2`), minute(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), minute('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((minute(`c3`) > minute('2000-01-01 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.minute(c3), public.minute(c2), public.minute(public.date_sub(c3, '1 day 12:59:10'::interval)), public.minute('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.minute(c3) > public.minute('2000-01-01 00:00:00'::timestamp without time zone)))
(12 rows)

-- select minute (stub function, minute in constraints, result)
--Testcase 3012:
SELECT minute(c3), minute(c2), minute(date_sub(c3, '1 12:59:10')), minute('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE minute(c3) > minute('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
 minute | minute | minute | minute 
--------+--------+--------+--------
     10 |      0 |     11 |      0
     12 |      0 |     13 |      0
     12 |      0 |     13 |      0
     59 |      0 |      0 |      0
(4 rows)

-- select minute (stub function, minute in constraints, explain)
--Testcase 3013:
EXPLAIN VERBOSE
SELECT minute(c3), minute(c2), minute(date_sub(c3, '1 12:59:10')), minute('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE minute('2021-01-01 12:00:00'::timestamp) < 1 ORDER BY 1,2,3,4;
                                                                                                                                                   QUERY PLAN                                                                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5034.95..5040.64 rows=2276 width=16)
   Output: (minute(c3)), (minute((c2)::timestamp without time zone)), (minute(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (minute(time_tbl.c3)), (minute((time_tbl.c2)::timestamp without time zone)), (minute(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4908.03 rows=2276 width=16)
         Output: (minute(c3)), (minute((c2)::timestamp without time zone)), (minute(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (minute('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT minute(`c3`), minute(`c2`), minute(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), minute('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((minute('2021-01-01 12:00:00') < 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.minute(c3), public.minute(c2), public.minute(public.date_sub(c3, '1 day 12:59:10'::interval)), public.minute('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.minute('2021-01-01 12:00:00'::timestamp without time zone) < 1))
(12 rows)

-- select minute (stub function, minute in constraints, result)
--Testcase 3014:
SELECT minute(c3), minute(c2), minute(date_sub(c3, '1 12:59:10')), minute('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE minute('2021-01-01 12:00:00'::timestamp) < 1 ORDER BY 1,2,3,4;
 minute | minute | minute | minute 
--------+--------+--------+--------
      0 |      0 |      0 |      0
     10 |      0 |     11 |      0
     12 |      0 |     13 |      0
     12 |      0 |     13 |      0
     59 |      0 |      0 |      0
(5 rows)

-- select minute with agg (pushdown, explain)
--Testcase 3015:
EXPLAIN VERBOSE
SELECT max(c3), minute(max(c3)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c3)), minute((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select minute as nest function with agg (pushdown, result)
--Testcase 3016:
SELECT max(c3), minute(max(c3)) FROM time_tbl;
ERROR:  stub minute(timestamp) is called
CONTEXT:  PL/pgSQL function minute(timestamp without time zone) line 3 at RAISE
-- select minute with non pushdown func and explicit constant (explain)
--Testcase 3017:
EXPLAIN VERBOSE
SELECT minute(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (minute(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (minute(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (minute(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT minute(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.minute(public.date_sub(c3, '1 day 12:59:10'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select minute with non pushdown func and explicit constant (result)
--Testcase 3018:
SELECT minute(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
 minute |        pi         | ?column? 
--------+-------------------+----------
      0 | 3.141592653589793 |      4.1
      0 | 3.141592653589793 |      4.1
     11 | 3.141592653589793 |      4.1
     13 | 3.141592653589793 |      4.1
     13 | 3.141592653589793 |      4.1
(5 rows)

-- select minute with order by (explain)
--Testcase 3019:
EXPLAIN VERBOSE
SELECT id, minute(c3 + '1 12:59:10') FROM time_tbl order by id,minute(c3 + '1 12:59:10');
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=8)
   Output: id, (minute((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: time_tbl.id, (minute((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=8)
         Output: id, (minute((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, minute((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.minute((c3 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select minute with order by (result)
--Testcase 3020:
SELECT id, minute(c3 + '1 12:59:10') FROM time_tbl order by id,minute(c3 + '1 12:59:10');
 id | minute 
----+--------
  0 |      9
  1 |     11
  2 |     11
  3 |     59
  4 |     59
(5 rows)

-- select minute with order by index (result)
--Testcase 3021:
SELECT id, minute(c3 + '1 12:59:10') FROM time_tbl order by 2,1;
 id | minute 
----+--------
  0 |      9
  1 |     11
  2 |     11
  3 |     59
  4 |     59
(5 rows)

-- select minute with order by index (result)
--Testcase 3022:
SELECT id, minute(c3 + '1 12:59:10') FROM time_tbl order by 1,2;
 id | minute 
----+--------
  0 |      9
  1 |     11
  2 |     11
  3 |     59
  4 |     59
(5 rows)

-- select minute with group by (explain)
--Testcase 3023:
EXPLAIN VERBOSE
SELECT max(c3), minute(c3 + '1 12:59:10') FROM time_tbl group by minute(c3 + '1 12:59:10') ORDER BY 1,2;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=12)
   Output: (max(c3)), (minute((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: (max(time_tbl.c3)), (minute((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=12)
         Output: max(c3), (minute((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Group Key: (minute((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (minute((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT minute((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.minute((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(15 rows)

-- select minute with group by (result)
--Testcase 3024:
SELECT max(c3), minute(c3 + '1 12:59:10') FROM time_tbl group by minute(c3 + '1 12:59:10') ORDER BY 1,2;
         max         | minute 
---------------------+--------
 2021-01-03 12:10:30 |      9
 2021-01-05 11:12:12 |     11
 2021-01-07 00:59:59 |     59
(3 rows)

-- select minute with group by index (result)
--Testcase 3025:
SELECT id, minute(c3 + '1 12:59:10') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | minute 
----+--------
  0 |      9
  1 |     11
  2 |     11
  3 |     59
  4 |     59
(5 rows)

-- select minute with group by index (result)
--Testcase 3026:
SELECT id, minute(c3 + '1 12:59:10') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | minute 
----+--------
  0 |      9
  1 |     11
  2 |     11
  3 |     59
  4 |     59
(5 rows)

-- select minute with group by having (explain)
--Testcase 3027:
EXPLAIN VERBOSE
SELECT max(c3), minute(c3 + '1 12:59:10') FROM time_tbl group by minute(c3 + '1 12:59:10'), c3 HAVING minute(c3 + '1 12:59:10') < 60 ORDER BY 1,2;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=20)
   Output: (max(c3)), (minute((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
   Sort Key: (max(time_tbl.c3)), (minute((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=20)
         Output: max(c3), (minute((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
         Group Key: (minute((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), time_tbl.c3
         Filter: ((minute((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))) < 60)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (minute((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT minute((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.minute((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(16 rows)

-- select minute with group by having (result)
--Testcase 3028:
SELECT max(c3), minute(c3 + '1 12:59:10') FROM time_tbl group by minute(c3 + '1 12:59:10'), c3 HAVING minute(c3 + '1 12:59:10') < 60 ORDER BY 1,2;
         max         | minute 
---------------------+--------
 2021-01-03 12:10:30 |      9
 2021-01-04 23:12:13 |     11
 2021-01-05 11:12:12 |     11
 2021-01-06 16:00:00 |     59
 2021-01-07 00:59:59 |     59
(5 rows)

-- select minute with group by index having (result)
--Testcase 3029:
SELECT id, minute(c3 + '1 12:59:10'), c3 FROM time_tbl group by 3, 2, 1 HAVING minute(c3 + '1 12:59:10') < 60 ORDER BY 1,2;
 id | minute |         c3          
----+--------+---------------------
  0 |      9 | 2021-01-03 12:10:30
  1 |     11 | 2021-01-04 23:12:13
  2 |     11 | 2021-01-05 11:12:12
  3 |     59 | 2021-01-06 16:00:00
  4 |     59 | 2021-01-07 00:59:59
(5 rows)

-- select minute with group by index having (result)
--Testcase 3030:
SELECT id, minute(c3 + '1 12:59:10'), c3 FROM time_tbl group by 1, 2, 3 HAVING minute(c3 + '1 12:59:10') < 60 ORDER BY 1,2;
 id | minute |         c3          
----+--------+---------------------
  0 |      9 | 2021-01-03 12:10:30
  1 |     11 | 2021-01-04 23:12:13
  2 |     11 | 2021-01-05 11:12:12
  3 |     59 | 2021-01-06 16:00:00
  4 |     59 | 2021-01-07 00:59:59
(5 rows)

-- select minute and as
--Testcase 3031:
SELECT minute(date_sub(c3, '1 12:59:10')) as minute1 FROM time_tbl ORDER BY 1;
 minute1 
---------
       0
       0
      11
      13
      13
(5 rows)

-- MICROSECOND()
-- select microsecond (stub function, explain)
--Testcase 3032:
EXPLAIN VERBOSE
SELECT microsecond(c3), microsecond(c2), microsecond(date_sub(c3, '1 12:59:10.154')), microsecond('2021-01-01 12:00:00.986'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                            QUERY PLAN                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9409.05..9426.12 rows=6826 width=16)
   Output: (microsecond(c3)), (microsecond((c2)::timestamp without time zone)), (microsecond(date_sub(c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
   Sort Key: (microsecond(time_tbl.c3)), (microsecond((time_tbl.c2)::timestamp without time zone)), (microsecond(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8974.35 rows=6826 width=16)
         Output: (microsecond(c3)), (microsecond((c2)::timestamp without time zone)), (microsecond(date_sub(c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT microsecond(`c3`), microsecond(`c2`), microsecond(date_sub(`c3`, INTERVAL '1 12:59:10.154000' DAY_MICROSECOND)), microsecond('2021-01-01 12:00:00.986') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.microsecond(c3), public.microsecond(c2), public.microsecond(public.date_sub(c3, '1 day 12:59:10.154'::interval)), public.microsecond('2021-01-01 12:00:00.986'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select microsecond (stub function, result)
--Testcase 3033:
SELECT microsecond(c3), microsecond(c2), microsecond(date_sub(c3, '1 12:59:10.154')), microsecond('2021-01-01 12:00:00.986'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
 microsecond | microsecond | microsecond | microsecond 
-------------+-------------+-------------+-------------
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
(5 rows)

-- select microsecond (stub function, not pushdown constraints, explain)
--Testcase 3034:
EXPLAIN VERBOSE
SELECT microsecond(c3), microsecond(c2), microsecond(date_sub(c3, '1 12:59:10.154')), microsecond('2021-01-01 12:00:00.986'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                            QUERY PLAN                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.18..434.26 rows=34 width=16)
   Output: (microsecond(c3)), (microsecond((c2)::timestamp without time zone)), (microsecond(date_sub(c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
   Sort Key: (microsecond(time_tbl.c3)), (microsecond((time_tbl.c2)::timestamp without time zone)), (microsecond(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.31 rows=34 width=16)
         Output: (microsecond(c3)), (microsecond((c2)::timestamp without time zone)), (microsecond(date_sub(c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT microsecond(`c3`), microsecond(`c2`), microsecond(date_sub(`c3`, INTERVAL '1 12:59:10.154000' DAY_MICROSECOND)), microsecond('2021-01-01 12:00:00.986'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.microsecond(c3), public.microsecond(c2), public.microsecond(public.date_sub(c3, '1 day 12:59:10.154'::interval)), public.microsecond('2021-01-01 12:00:00.986'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select microsecond (stub function, not pushdown constraints, result)
--Testcase 3035:
SELECT microsecond(c3), microsecond(c2), microsecond(date_sub(c3, '1 12:59:10.154')), microsecond('2021-01-01 12:00:00.986'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
 microsecond | microsecond | microsecond | microsecond 
-------------+-------------+-------------+-------------
           0 |           0 |      846000 |      986000
(1 row)

-- select microsecond (stub function, pushdown constraints, explain)
--Testcase 3036:
EXPLAIN VERBOSE
SELECT microsecond(c3), microsecond(c2), microsecond(date_sub(c3, '1 12:59:10.154')), microsecond('2021-01-01 12:00:00.986'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                                   QUERY PLAN                                                                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9380.44..9397.42 rows=6792 width=16)
   Output: (microsecond(c3)), (microsecond((c2)::timestamp without time zone)), (microsecond(date_sub(c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
   Sort Key: (microsecond(time_tbl.c3)), (microsecond((time_tbl.c2)::timestamp without time zone)), (microsecond(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8948.15 rows=6792 width=16)
         Output: (microsecond(c3)), (microsecond((c2)::timestamp without time zone)), (microsecond(date_sub(c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT microsecond(`c3`), microsecond(`c2`), microsecond(date_sub(`c3`, INTERVAL '1 12:59:10.154000' DAY_MICROSECOND)), microsecond('2021-01-01 12:00:00.986') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.microsecond(c3), public.microsecond(c2), public.microsecond(public.date_sub(c3, '1 day 12:59:10.154'::interval)), public.microsecond('2021-01-01 12:00:00.986'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select microsecond (stub function, pushdown constraints, result)
--Testcase 3037:
SELECT microsecond(c3), microsecond(c2), microsecond(date_sub(c3, '1 12:59:10.154')), microsecond('2021-01-01 12:00:00.986'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
 microsecond | microsecond | microsecond | microsecond 
-------------+-------------+-------------+-------------
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
(5 rows)

-- select microsecond (stub function, microsecond in constraints, explain)
--Testcase 3038:
EXPLAIN VERBOSE
SELECT microsecond(c3), microsecond(c2), microsecond(date_sub(c3, '1 12:59:10.154')), microsecond('2021-01-01 12:00:00.986'::timestamp) FROM time_tbl WHERE microsecond(c3) = microsecond('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
                                                                                                                                                                              QUERY PLAN                                                                                                                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3762.45..3762.54 rows=34 width=16)
   Output: (microsecond(c3)), (microsecond((c2)::timestamp without time zone)), (microsecond(date_sub(c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
   Sort Key: (microsecond(time_tbl.c3)), (microsecond((time_tbl.c2)::timestamp without time zone)), (microsecond(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3761.59 rows=34 width=16)
         Output: (microsecond(c3)), (microsecond((c2)::timestamp without time zone)), (microsecond(date_sub(c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT microsecond(`c3`), microsecond(`c2`), microsecond(date_sub(`c3`, INTERVAL '1 12:59:10.154000' DAY_MICROSECOND)), microsecond('2021-01-01 12:00:00.986') FROM `test`.`time_tbl2` WHERE ((microsecond(`c3`) = microsecond('2000-01-01 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.microsecond(c3), public.microsecond(c2), public.microsecond(public.date_sub(c3, '1 day 12:59:10.154'::interval)), public.microsecond('2021-01-01 12:00:00.986'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.microsecond(c3) = public.microsecond('2000-01-01 00:00:00'::timestamp without time zone)))
(12 rows)

-- select microsecond (stub function, microsecond in constraints, result)
--Testcase 3039:
SELECT microsecond(c3), microsecond(c2), microsecond(date_sub(c3, '1 12:59:10.154')), microsecond('2021-01-01 12:00:00.986'::timestamp) FROM time_tbl WHERE microsecond(c3) = microsecond('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
 microsecond | microsecond | microsecond | microsecond 
-------------+-------------+-------------+-------------
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
(5 rows)

-- select microsecond (stub function, microsecond in constraints, explain)
--Testcase 3040:
EXPLAIN VERBOSE
SELECT microsecond(c3), microsecond(c2), microsecond(date_sub(c3, '1 12:59:10.154')), microsecond('2021-01-01 12:00:00.986'::timestamp) FROM time_tbl WHERE microsecond('2021-01-01 12:00:00'::timestamp) = '0' ORDER BY 1,2,3,4;
                                                                                                                                                                    QUERY PLAN                                                                                                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2055.95..2056.04 rows=34 width=16)
   Output: (microsecond(c3)), (microsecond((c2)::timestamp without time zone)), (microsecond(date_sub(c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
   Sort Key: (microsecond(time_tbl.c3)), (microsecond((time_tbl.c2)::timestamp without time zone)), (microsecond(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2055.09 rows=34 width=16)
         Output: (microsecond(c3)), (microsecond((c2)::timestamp without time zone)), (microsecond(date_sub(c3, '@ 1 day 12 hours 59 mins 10.154 secs'::interval))), (microsecond('2021-01-01 12:00:00.986'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT microsecond(`c3`), microsecond(`c2`), microsecond(date_sub(`c3`, INTERVAL '1 12:59:10.154000' DAY_MICROSECOND)), microsecond('2021-01-01 12:00:00.986') FROM `test`.`time_tbl2` WHERE ((microsecond('2021-01-01 12:00:00') = 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.microsecond(c3), public.microsecond(c2), public.microsecond(public.date_sub(c3, '1 day 12:59:10.154'::interval)), public.microsecond('2021-01-01 12:00:00.986'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.microsecond('2021-01-01 12:00:00'::timestamp without time zone) = 0))
(12 rows)

-- select microsecond (stub function, microsecond in constraints, result)
--Testcase 3041:
SELECT microsecond(c3), microsecond(c2), microsecond(date_sub(c3, '1 12:59:10.154')), microsecond('2021-01-01 12:00:00.986'::timestamp) FROM time_tbl WHERE microsecond('2021-01-01 12:00:00'::timestamp) = '0' ORDER BY 1,2,3,4;
 microsecond | microsecond | microsecond | microsecond 
-------------+-------------+-------------+-------------
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
           0 |           0 |      846000 |      986000
(5 rows)

-- select microsecond with agg (pushdown, explain)
--Testcase 3042:
EXPLAIN VERBOSE
SELECT max(c3), microsecond(max(c3)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c3)), microsecond((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select microsecond as nest function with agg (pushdown, result)
--Testcase 3043:
SELECT max(c3), microsecond(max(c3)) FROM time_tbl;
ERROR:  stub microsecond(timestamp) is called
CONTEXT:  PL/pgSQL function microsecond(timestamp without time zone) line 3 at RAISE
-- select microsecond with non pushdown func and explicit constant (explain)
--Testcase 3044:
EXPLAIN VERBOSE
SELECT microsecond(date_sub(c3, '1 12:59:10.999')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (microsecond(date_sub(c3, '@ 1 day 12 hours 59 mins 10.999 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (microsecond(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10.999 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (microsecond(date_sub(c3, '@ 1 day 12 hours 59 mins 10.999 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT microsecond(date_sub(`c3`, INTERVAL '1 12:59:10.999000' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.microsecond(public.date_sub(c3, '1 day 12:59:10.999'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select microsecond with non pushdown func and explicit constant (result)
--Testcase 3045:
SELECT microsecond(date_sub(c3, '1 12:59:10.999')), pi(), 4.1 FROM time_tbl ORDER BY 1;
 microsecond |        pi         | ?column? 
-------------+-------------------+----------
        1000 | 3.141592653589793 |      4.1
        1000 | 3.141592653589793 |      4.1
        1000 | 3.141592653589793 |      4.1
        1000 | 3.141592653589793 |      4.1
        1000 | 3.141592653589793 |      4.1
(5 rows)

-- select microsecond with order by (explain)
--Testcase 3046:
EXPLAIN VERBOSE
SELECT id, microsecond(c3 + '1 12:59:10.999') FROM time_tbl order by id,microsecond(c3 + '1 12:59:10.999');
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=8)
   Output: id, (microsecond((c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval)))
   Sort Key: time_tbl.id, (microsecond((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=8)
         Output: id, (microsecond((c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, microsecond((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND + INTERVAL 999000 MICROSECOND)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.microsecond((c3 + '1 day 12:59:10.999'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select microsecond with order by (result)
--Testcase 3047:
SELECT id, microsecond(c3 + '1 12:59:10.999') FROM time_tbl order by id,microsecond(c3 + '1 12:59:10.999');
 id | microsecond 
----+-------------
  0 |      999000
  1 |      999000
  2 |      999000
  3 |      999000
  4 |      999000
(5 rows)

-- select microsecond with order by index (result)
--Testcase 3048:
SELECT id, microsecond(c3 + '1 12:59:10.999') FROM time_tbl order by 2,1;
 id | microsecond 
----+-------------
  0 |      999000
  1 |      999000
  2 |      999000
  3 |      999000
  4 |      999000
(5 rows)

-- select microsecond with order by index (result)
--Testcase 3049:
SELECT id, microsecond(c3 + '1 12:59:10.999') FROM time_tbl order by 1,2;
 id | microsecond 
----+-------------
  0 |      999000
  1 |      999000
  2 |      999000
  3 |      999000
  4 |      999000
(5 rows)

-- select microsecond with group by (explain)
--Testcase 3050:
EXPLAIN VERBOSE
SELECT max(c3), microsecond(c3 + '1 12:59:10.999') FROM time_tbl group by microsecond(c3 + '1 12:59:10.999') ORDER BY 1,2;
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=12)
   Output: (max(c3)), (microsecond((c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval)))
   Sort Key: (max(time_tbl.c3)), (microsecond((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=12)
         Output: max(c3), (microsecond((c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval)))
         Group Key: (microsecond((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (microsecond((c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT microsecond((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND + INTERVAL 999000 MICROSECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.microsecond((c3 + '1 day 12:59:10.999'::interval)), c3 FROM public.time_tbl1mysql
(15 rows)

-- select microsecond with group by (result)
--Testcase 3051:
SELECT max(c3), microsecond(c3 + '1 12:59:10.999') FROM time_tbl group by microsecond(c3 + '1 12:59:10.999') ORDER BY 1,2;
         max         | microsecond 
---------------------+-------------
 2021-01-07 00:59:59 |      999000
(1 row)

-- select microsecond with group by index (result)
--Testcase 3052:
SELECT id, microsecond(c3 + '1 12:59:10.999') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | microsecond 
----+-------------
  0 |      999000
  1 |      999000
  2 |      999000
  3 |      999000
  4 |      999000
(5 rows)

-- select microsecond with group by index (result)
--Testcase 3053:
SELECT id, microsecond(c3 + '1 12:59:10.999') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | microsecond 
----+-------------
  0 |      999000
  1 |      999000
  2 |      999000
  3 |      999000
  4 |      999000
(5 rows)

-- select microsecond with group by having (explain)
--Testcase 3054:
EXPLAIN VERBOSE
SELECT max(c3), microsecond(c3 + '1 12:59:10.999') FROM time_tbl group by microsecond(c3 + '1 12:59:10.999'), c3 HAVING microsecond(c3 + '1 12:59:10.999') > 1000 ORDER BY 1,2;
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=20)
   Output: (max(c3)), (microsecond((c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval))), c3
   Sort Key: (max(time_tbl.c3)), (microsecond((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval)))
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=20)
         Output: max(c3), (microsecond((c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval))), c3
         Group Key: (microsecond((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval))), time_tbl.c3
         Filter: ((microsecond((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval))) > 1000)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (microsecond((c3 + '@ 1 day 12 hours 59 mins 10.999 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT microsecond((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND + INTERVAL 999000 MICROSECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.microsecond((c3 + '1 day 12:59:10.999'::interval)), c3 FROM public.time_tbl1mysql
(16 rows)

-- select microsecond with group by having (result)
--Testcase 3055:
SELECT max(c3), microsecond(c3 + '1 12:59:10.999') FROM time_tbl group by microsecond(c3 + '1 12:59:10.999'), c3 HAVING microsecond(c3 + '1 12:59:10.999') > 1000 ORDER BY 1,2;
         max         | microsecond 
---------------------+-------------
 2021-01-03 12:10:30 |      999000
 2021-01-04 23:12:13 |      999000
 2021-01-05 11:12:12 |      999000
 2021-01-06 16:00:00 |      999000
 2021-01-07 00:59:59 |      999000
(5 rows)

-- select microsecond with group by index having (result)
--Testcase 3056:
SELECT id, microsecond(c3 + '1 12:59:10.999'), c3 FROM time_tbl group by 3, 2, 1 HAVING microsecond(c3 + '1 12:59:10.999') > 1000 ORDER BY 1,2;
 id | microsecond |         c3          
----+-------------+---------------------
  0 |      999000 | 2021-01-03 12:10:30
  1 |      999000 | 2021-01-04 23:12:13
  2 |      999000 | 2021-01-05 11:12:12
  3 |      999000 | 2021-01-06 16:00:00
  4 |      999000 | 2021-01-07 00:59:59
(5 rows)

-- select microsecond with group by index having (result)
--Testcase 3057:
SELECT id, microsecond(c3 + '1 12:59:10.999'), c3 FROM time_tbl group by 1, 2, 3 HAVING microsecond(c3 + '1 12:59:10.999') > 1000 ORDER BY 1,2;
 id | microsecond |         c3          
----+-------------+---------------------
  0 |      999000 | 2021-01-03 12:10:30
  1 |      999000 | 2021-01-04 23:12:13
  2 |      999000 | 2021-01-05 11:12:12
  3 |      999000 | 2021-01-06 16:00:00
  4 |      999000 | 2021-01-07 00:59:59
(5 rows)

-- select microsecond and as
--Testcase 3058:
SELECT microsecond(date_sub(c3, '1 12:59:10.999')) as microsecond1 FROM time_tbl ORDER BY 1;
 microsecond1 
--------------
         1000
         1000
         1000
         1000
         1000
(5 rows)

-- MAKETIME()
-- select maketime (stub function, explain)
--Testcase 3059:
EXPLAIN VERBOSE
SELECT maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl ORDER BY 1;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5978.99..5996.05 rows=6826 width=8)
   Output: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30))
   Sort Key: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 15, 30))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=8)
         Output: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT maketime(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 15, 30) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.maketime(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30) FROM public.time_tbl1mysql
(12 rows)

-- select maketime (stub function, result)
--Testcase 3060:
SELECT maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl ORDER BY 1;
 maketime 
----------
 18:15:30
 18:15:30
 18:15:30
 18:15:30
 18:15:30
(5 rows)

-- select maketime (stub function, not pushdown constraints, explain)
--Testcase 3061:
EXPLAIN VERBOSE
SELECT maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=417.09..417.18 rows=34 width=8)
   Output: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30))
   Sort Key: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 15, 30))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..416.23 rows=34 width=8)
         Output: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT maketime(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 15, 30), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.maketime(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30), id FROM public.time_tbl1mysql
(13 rows)

-- select maketime (stub function, not pushdown constraints, result)
--Testcase 3062:
SELECT maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1;
 maketime 
----------
 18:15:30
(1 row)

-- select maketime (stub function, pushdown constraints, explain)
--Testcase 3063:
EXPLAIN VERBOSE
SELECT maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl WHERE id != 200 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5967.46..5984.44 rows=6792 width=8)
   Output: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30))
   Sort Key: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 15, 30))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5535.16 rows=6792 width=8)
         Output: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT maketime(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 15, 30) FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.maketime(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select maketime (stub function, pushdown constraints, result)
--Testcase 3064:
SELECT maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl WHERE id != 200 ORDER BY 1;
 maketime 
----------
 18:15:30
 18:15:30
 18:15:30
 18:15:30
 18:15:30
(5 rows)

-- select maketime (stub function, maketime in constraints, explain)
--Testcase 3065:
EXPLAIN VERBOSE
SELECT maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl WHERE maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) > '12:59:10'::time ORDER BY 1;
                                                                                                                                                 QUERY PLAN                                                                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7304.26..7309.95 rows=2276 width=8)
   Output: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30))
   Sort Key: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 15, 30))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7177.35 rows=2276 width=8)
         Output: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT maketime(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 15, 30) FROM `test`.`time_tbl2` WHERE ((maketime(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 15, 30) > '12:59:10'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.maketime(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30) FROM public.time_tbl1mysql WHERE ((public.maketime(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30) > '12:59:10'::time without time zone))
(12 rows)

-- select maketime (stub function, maketime in constraints, result)
--Testcase 3066:
SELECT maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl WHERE maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) > '12:59:10'::time ORDER BY 1;
 maketime 
----------
 18:15:30
 18:15:30
 18:15:30
 18:15:30
 18:15:30
(5 rows)

-- select maketime with agg (pushdown, explain)
--Testcase 3067:
EXPLAIN VERBOSE
SELECT max(c3), maketime(18, 15, 30) FROM time_tbl ORDER BY 1,2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort  (cost=159.42..159.42 rows=1 width=16)
   Output: (max(c3)), (maketime(18, 15, 30))
   Sort Key: (max(time_tbl.c3)), (maketime(18, 15, 30))
   ->  Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
         Output: (max(c3)), maketime(18, 15, 30)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(16 rows)

-- select maketime as nest function with agg (pushdown, result)
--Testcase 3068:
SELECT max(c3), maketime(18, 15, 30) FROM time_tbl ORDER BY 1,2;
ERROR:  stub maketime(integer, integer, integer) is called
CONTEXT:  PL/pgSQL function maketime(integer,integer,integer) line 3 at RAISE
-- select maketime with non pushdown func and explicit constant (explain)
--Testcase 3069:
EXPLAIN VERBOSE
SELECT maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5978.99..5996.05 rows=6826 width=48)
   Output: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30)), '3.141592653589793'::double precision, 4.1
   Sort Key: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 15, 30))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=48)
         Output: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT maketime(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 15, 30), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.maketime(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select maketime with non pushdown func and explicit constant (result)
--Testcase 3070:
SELECT maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30), pi(), 4.1 FROM time_tbl ORDER BY 1;
 maketime |        pi         | ?column? 
----------+-------------------+----------
 18:15:30 | 3.141592653589793 |      4.1
 18:15:30 | 3.141592653589793 |      4.1
 18:15:30 | 3.141592653589793 |      4.1
 18:15:30 | 3.141592653589793 |      4.1
 18:15:30 | 3.141592653589793 |      4.1
(5 rows)

-- select maketime with order by (explain)
--Testcase 3071:
EXPLAIN VERBOSE
SELECT id, maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl order by id,maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30);
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5978.99..5996.05 rows=6826 width=12)
   Output: id, (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30))
   Sort Key: time_tbl.id, (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 15, 30))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=12)
         Output: id, (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, maketime(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 15, 30) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.maketime(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30) FROM public.time_tbl1mysql
(12 rows)

-- select maketime with order by (result)
--Testcase 3072:
SELECT id, maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl order by id,maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30);
 id | maketime 
----+----------
  0 | 18:15:30
  1 | 18:15:30
  2 | 18:15:30
  3 | 18:15:30
  4 | 18:15:30
(5 rows)

-- select maketime with order by index (result)
--Testcase 3073:
SELECT id, maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl order by 2,1;
 id | maketime 
----+----------
  0 | 18:15:30
  1 | 18:15:30
  2 | 18:15:30
  3 | 18:15:30
  4 | 18:15:30
(5 rows)

-- select maketime with order by index (result)
--Testcase 3074:
SELECT id, maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl order by 1,2;
 id | maketime 
----+----------
  0 | 18:15:30
  1 | 18:15:30
  2 | 18:15:30
  3 | 18:15:30
  4 | 18:15:30
(5 rows)

-- select maketime with group by (explain)
--Testcase 3075:
EXPLAIN VERBOSE
SELECT max(c3), maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl group by maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30), c3 ORDER BY 1,2;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5755.12..5755.62 rows=200 width=24)
   Output: (max(c3)), (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30)), c3
   Sort Key: (max(time_tbl.c3)), (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 15, 30))
   ->  HashAggregate  (cost=5595.47..5747.47 rows=200 width=24)
         Output: max(c3), (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30)), c3
         Group Key: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 15, 30)), time_tbl.c3
         ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=16)
               Output: (maketime(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT maketime(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 15, 30), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.maketime(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 15, 30), c3 FROM public.time_tbl1mysql
(15 rows)

-- select maketime with group by (result)
--Testcase 3076:
SELECT max(c3), maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl group by maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30), c3 ORDER BY 1,2;
         max         | maketime 
---------------------+----------
 2021-01-03 12:10:30 | 18:15:30
 2021-01-04 23:12:13 | 18:15:30
 2021-01-05 11:12:12 | 18:15:30
 2021-01-06 16:00:00 | 18:15:30
 2021-01-07 00:59:59 | 18:15:30
(5 rows)

-- select maketime with group by index (result)
--Testcase 3077:
SELECT id, maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl group by 2,1 ORDER BY 1,2;
 id | maketime 
----+----------
  0 | 18:15:30
  1 | 18:15:30
  2 | 18:15:30
  3 | 18:15:30
  4 | 18:15:30
(5 rows)

-- select maketime with group by index (result)
--Testcase 3078:
SELECT id, maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl group by 1,2 ORDER BY 1,2;
 id | maketime 
----+----------
  0 | 18:15:30
  1 | 18:15:30
  2 | 18:15:30
  3 | 18:15:30
  4 | 18:15:30
(5 rows)

-- select maketime with group by index having (result)
--Testcase 3079:
SELECT id, c3, maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl group by 3, 2, 1 HAVING maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) > '12:00:00'::time ORDER BY 1,2,3;
 id |         c3          | maketime 
----+---------------------+----------
  0 | 2021-01-03 12:10:30 | 18:15:30
  1 | 2021-01-04 23:12:13 | 18:15:30
  2 | 2021-01-05 11:12:12 | 18:15:30
  3 | 2021-01-06 16:00:00 | 18:15:30
  4 | 2021-01-07 00:59:59 | 18:15:30
(5 rows)

-- select maketime with group by index having (result)
--Testcase 3080:
SELECT id, c3, maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) FROM time_tbl group by 1, 2, 3 HAVING maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) > '12:00:00'::time ORDER BY 1,2,3;
 id |         c3          | maketime 
----+---------------------+----------
  0 | 2021-01-03 12:10:30 | 18:15:30
  1 | 2021-01-04 23:12:13 | 18:15:30
  2 | 2021-01-05 11:12:12 | 18:15:30
  3 | 2021-01-06 16:00:00 | 18:15:30
  4 | 2021-01-07 00:59:59 | 18:15:30
(5 rows)

-- select maketime and as
--Testcase 3081:
SELECT maketime(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 15, 30) as maketime1 FROM time_tbl ORDER BY 1;
 maketime1 
-----------
 18:15:30
 18:15:30
 18:15:30
 18:15:30
 18:15:30
(5 rows)

-- MAKEDATE()
-- select makedate (stub function, explain)
--Testcase 3082:
EXPLAIN VERBOSE
SELECT makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl ORDER BY 1;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5978.99..5996.05 rows=6826 width=4)
   Output: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90))
   Sort Key: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 90))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=4)
         Output: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT makedate(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 90) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.makedate(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 90) FROM public.time_tbl1mysql
(12 rows)

-- select makedate (stub function, result)
--Testcase 3083:
SELECT makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl ORDER BY 1;
  makedate  
------------
 2018-03-31
 2018-03-31
 2018-03-31
 2018-03-31
 2018-03-31
(5 rows)

-- select makedate (stub function, not pushdown constraints, explain)
--Testcase 3084:
EXPLAIN VERBOSE
SELECT makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=417.09..417.18 rows=34 width=4)
   Output: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90))
   Sort Key: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 90))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..416.23 rows=34 width=4)
         Output: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT makedate(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 90), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.makedate(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 90), id FROM public.time_tbl1mysql
(13 rows)

-- select makedate (stub function, not pushdown constraints, result)
--Testcase 3085:
SELECT makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1;
  makedate  
------------
 2018-03-31
(1 row)

-- select makedate (stub function, pushdown constraints, explain)
--Testcase 3086:
EXPLAIN VERBOSE
SELECT makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl WHERE id != 200 ORDER BY 1;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5967.46..5984.44 rows=6792 width=4)
   Output: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90))
   Sort Key: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 90))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5535.16 rows=6792 width=4)
         Output: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT makedate(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 90) FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.makedate(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 90) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select makedate (stub function, pushdown constraints, result)
--Testcase 3087:
SELECT makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl WHERE id != 200 ORDER BY 1;
  makedate  
------------
 2018-03-31
 2018-03-31
 2018-03-31
 2018-03-31
 2018-03-31
(5 rows)

-- select makedate (stub function, makedate in constraints, explain)
--Testcase 3088:
EXPLAIN VERBOSE
SELECT makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl WHERE makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) < '2021-01-02'::date ORDER BY 1;
                                                                                                                                     QUERY PLAN                                                                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7304.26..7309.95 rows=2276 width=4)
   Output: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90))
   Sort Key: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 90))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7177.35 rows=2276 width=4)
         Output: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT makedate(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 90) FROM `test`.`time_tbl2` WHERE ((makedate(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 90) < '2021-01-02'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.makedate(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 90) FROM public.time_tbl1mysql WHERE ((public.makedate(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 90) < '2021-01-02'::date))
(12 rows)

-- select makedate (stub function, makedate in constraints, result)
--Testcase 3089:
SELECT makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl WHERE makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) < '2021-01-02'::date ORDER BY 1;
  makedate  
------------
 2018-03-31
 2018-03-31
 2018-03-31
 2018-03-31
 2018-03-31
(5 rows)

-- select makedate with agg (pushdown, explain)
--Testcase 3090:
EXPLAIN VERBOSE
SELECT max(c3), makedate(18, 90) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c3)), makedate(18, 90)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select makedate as nest function with agg (pushdown, result)
--Testcase 3091:
SELECT max(c3), makedate(18, 90) FROM time_tbl;
ERROR:  stub makedate(integer, integer) is called
CONTEXT:  PL/pgSQL function makedate(integer,integer) line 3 at RAISE
-- select makedate with non pushdown func and explicit constant (explain)
--Testcase 3092:
EXPLAIN VERBOSE
SELECT makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5978.99..5996.05 rows=6826 width=44)
   Output: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90)), '3.141592653589793'::double precision, 4.1
   Sort Key: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 90))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=44)
         Output: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT makedate(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 90), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.makedate(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 90), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select makedate with non pushdown func and explicit constant (result)
--Testcase 3093:
SELECT makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90), pi(), 4.1 FROM time_tbl ORDER BY 1;
  makedate  |        pi         | ?column? 
------------+-------------------+----------
 2018-03-31 | 3.141592653589793 |      4.1
 2018-03-31 | 3.141592653589793 |      4.1
 2018-03-31 | 3.141592653589793 |      4.1
 2018-03-31 | 3.141592653589793 |      4.1
 2018-03-31 | 3.141592653589793 |      4.1
(5 rows)

-- select makedate with order by (explain)
--Testcase 3094:
EXPLAIN VERBOSE
SELECT id, makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl order by id,makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90);
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5978.99..5996.05 rows=6826 width=8)
   Output: id, (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90))
   Sort Key: time_tbl.id, (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 90))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=8)
         Output: id, (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, makedate(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 90) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.makedate(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 90) FROM public.time_tbl1mysql
(12 rows)

-- select makedate with order by (result)
--Testcase 3095:
SELECT id, makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl order by id,makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90);
 id |  makedate  
----+------------
  0 | 2018-03-31
  1 | 2018-03-31
  2 | 2018-03-31
  3 | 2018-03-31
  4 | 2018-03-31
(5 rows)

-- select makedate with order by index (result)
--Testcase 3096:
SELECT id, makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl order by 2,1;
 id |  makedate  
----+------------
  0 | 2018-03-31
  1 | 2018-03-31
  2 | 2018-03-31
  3 | 2018-03-31
  4 | 2018-03-31
(5 rows)

-- select makedate with order by index (result)
--Testcase 3097:
SELECT id, makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl order by 1,2;
 id |  makedate  
----+------------
  0 | 2018-03-31
  1 | 2018-03-31
  2 | 2018-03-31
  3 | 2018-03-31
  4 | 2018-03-31
(5 rows)

-- select makedate with group by (explain)
--Testcase 3098:
EXPLAIN VERBOSE
SELECT max(c3), makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl group by makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90), c3 ORDER BY 1,2;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5755.12..5755.62 rows=200 width=20)
   Output: (max(c3)), (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90)), c3
   Sort Key: (max(time_tbl.c3)), (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 90))
   ->  HashAggregate  (cost=5595.47..5747.47 rows=200 width=20)
         Output: max(c3), (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90)), c3
         Group Key: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, time_tbl.c3), 201907), 90)), time_tbl.c3
         ->  Foreign Scan on public.time_tbl  (cost=200.00..5544.28 rows=6826 width=12)
               Output: (makedate(period_diff(mysql_extract('YEAR_MONTH'::text, c3), 201907), 90)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT makedate(period_diff(extract(YEAR_MONTH FROM `c3`), 201907), 90), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.makedate(public.period_diff(public.mysql_extract('YEAR_MONTH'::text, c3), 201907), 90), c3 FROM public.time_tbl1mysql
(15 rows)

-- select makedate with group by (result)
--Testcase 3099:
SELECT max(c3), makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl group by makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90), c3 ORDER BY 1,2;
         max         |  makedate  
---------------------+------------
 2021-01-03 12:10:30 | 2018-03-31
 2021-01-04 23:12:13 | 2018-03-31
 2021-01-05 11:12:12 | 2018-03-31
 2021-01-06 16:00:00 | 2018-03-31
 2021-01-07 00:59:59 | 2018-03-31
(5 rows)

-- select makedate with group by index (result)
--Testcase 3100:
SELECT id, makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl group by 2,1 ORDER BY 1,2;
 id |  makedate  
----+------------
  0 | 2018-03-31
  1 | 2018-03-31
  2 | 2018-03-31
  3 | 2018-03-31
  4 | 2018-03-31
(5 rows)

-- select makedate with group by index (result)
--Testcase 3101:
SELECT id, makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl group by 1,2 ORDER BY 1,2;
 id |  makedate  
----+------------
  0 | 2018-03-31
  1 | 2018-03-31
  2 | 2018-03-31
  3 | 2018-03-31
  4 | 2018-03-31
(5 rows)

-- select makedate with group by index having (result)
--Testcase 3102:
SELECT id, c3, makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl group by 3, 2, 1 HAVING makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) > '2008-03-31'::date ORDER BY 1,2,3;
 id |         c3          |  makedate  
----+---------------------+------------
  0 | 2021-01-03 12:10:30 | 2018-03-31
  1 | 2021-01-04 23:12:13 | 2018-03-31
  2 | 2021-01-05 11:12:12 | 2018-03-31
  3 | 2021-01-06 16:00:00 | 2018-03-31
  4 | 2021-01-07 00:59:59 | 2018-03-31
(5 rows)

-- select makedate with group by index having (result)
--Testcase 3103:
SELECT id, c3, makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) FROM time_tbl group by 1, 2, 3 HAVING makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) > '2008-03-31'::date ORDER BY 1,2,3;
 id |         c3          |  makedate  
----+---------------------+------------
  0 | 2021-01-03 12:10:30 | 2018-03-31
  1 | 2021-01-04 23:12:13 | 2018-03-31
  2 | 2021-01-05 11:12:12 | 2018-03-31
  3 | 2021-01-06 16:00:00 | 2018-03-31
  4 | 2021-01-07 00:59:59 | 2018-03-31
(5 rows)

-- select makedate and as
--Testcase 3104:
SELECT makedate(period_diff(mysql_extract('YEAR_MONTH', c3 ), 201907), 90) as makedate1 FROM time_tbl ORDER BY 1;
 makedate1  
------------
 2018-03-31
 2018-03-31
 2018-03-31
 2018-03-31
 2018-03-31
(5 rows)

-- LOCALTIMESTAMP, LOCALTIMESTAMP()
-- mysql_localtimestamp is mutable function, some executes will return different result
-- select mysql_localtimestamp (stub function, explain)
--Testcase 3105:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp() FROM time_tbl;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (mysql_localtimestamp())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT localtimestamp() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_localtimestamp() FROM public.time_tbl1mysql
(7 rows)

-- select mysql_localtimestamp (stub function, not pushdown constraints, explain)
--Testcase 3106:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp() FROM time_tbl WHERE to_hex(id) > '0';
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..982.41 rows=2276 width=8)
   Output: (mysql_localtimestamp())
   Filter: (to_hex(time_tbl.id) > '0'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT localtimestamp(), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_localtimestamp(), id FROM public.time_tbl1mysql
(8 rows)

-- select mysql_localtimestamp (stub function, pushdown constraints, explain)
--Testcase 3107:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp() FROM time_tbl WHERE id = 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..314.50 rows=34 width=8)
   Output: (mysql_localtimestamp())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT localtimestamp() FROM `test`.`time_tbl2` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_localtimestamp() FROM public.time_tbl1mysql WHERE ((id = 1))
(7 rows)

-- select mysql_localtimestamp (stub function, mysql_localtimestamp in constraints, explain)
--Testcase 3108:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp() FROM time_tbl WHERE mysql_localtimestamp() > '2000-01-01 00:00:00'::timestamp;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=8)
   Output: (mysql_localtimestamp())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT localtimestamp() FROM `test`.`time_tbl2` WHERE ((localtimestamp() > '2000-01-01 00:00:00'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_localtimestamp() FROM public.time_tbl1mysql WHERE ((public.mysql_localtimestamp() > '2000-01-01 00:00:00'::timestamp without time zone))
(7 rows)

-- mysql_localtimestamp in constrains (stub function, explain)
--Testcase 3109:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE mysql_localtimestamp() > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2057.35 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((localtimestamp() > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.mysql_localtimestamp() > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- mysql_localtimestamp in constrains (stub function, result)
--Testcase 3110:
SELECT c1 FROM time_tbl WHERE mysql_localtimestamp() > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- mysql_localtimestamp as parameter of addtime(stub function, explain)
--Testcase 3111:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_localtimestamp(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(localtimestamp(), '1 12:59:10.0') > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_localtimestamp(), '1 day 12:59:10'::interval) > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- mysql_localtimestamp as parameter of addtime(stub function, result)
--Testcase 3112:
SELECT c1 FROM time_tbl WHERE addtime(mysql_localtimestamp(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_localtimestamp and agg (pushdown, explain)
--Testcase 3113:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp(), sum(id) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: mysql_localtimestamp(), (sum(id))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(11 rows)

-- select mysql_localtimestamp and log2 (pushdown, explain)
--Testcase 3114:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp(), log2(id) FROM time_tbl;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=16)
   Output: (mysql_localtimestamp()), (log2((id)::double precision))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT localtimestamp(), log2(`id`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_localtimestamp(), public.log2(id) FROM public.time_tbl1mysql
(7 rows)

-- select mysql_localtimestamp with non pushdown func and explicit constant (explain)
--Testcase 3115:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp(), to_hex(id), 4 FROM time_tbl;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=44)
   Output: mysql_localtimestamp(), to_hex(id), 4
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id FROM public.time_tbl1mysql
(7 rows)

-- select mysql_localtimestamp with order by (explain)
--Testcase 3116:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp(), c1 FROM time_tbl ORDER BY c1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: mysql_localtimestamp(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- select mysql_localtimestamp with order by index (explain)
--Testcase 3117:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp(), c1 FROM time_tbl ORDER BY 2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: mysql_localtimestamp(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- mysql_localtimestamp constraints with order by (explain)
--Testcase 3118:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_localtimestamp(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY c1;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(localtimestamp(), '1 12:59:10.0') > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_localtimestamp(), '1 day 12:59:10'::interval) > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- mysql_localtimestamp constraints with order by (result)
--Testcase 3119:
SELECT c1 FROM time_tbl WHERE addtime(mysql_localtimestamp(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_localtimestamp with group by (explain)
--Testcase 3120:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp(), c1 FROM time_tbl GROUP BY c1 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (mysql_localtimestamp()), c1
   Sort Key: (mysql_localtimestamp()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: mysql_localtimestamp(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select mysql_localtimestamp with group by index (explain)
--Testcase 3121:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp(), c1 FROM time_tbl GROUP BY 2 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (mysql_localtimestamp()), c1
   Sort Key: (mysql_localtimestamp()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: mysql_localtimestamp(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select mysql_localtimestamp with group by having (explain)
--Testcase 3122:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp(), c1 FROM time_tbl GROUP BY mysql_localtimestamp(),c1 HAVING mysql_localtimestamp() > '2000-01-01 00:00:00'::timestamp ORDER BY 1,2;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (mysql_localtimestamp()), c1
   Sort Key: (mysql_localtimestamp()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (mysql_localtimestamp()), c1
         Group Key: (mysql_localtimestamp()), time_tbl.c1
         Filter: ((mysql_localtimestamp()) > '2000-01-01 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (mysql_localtimestamp()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT localtimestamp(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_localtimestamp(), c1 FROM public.time_tbl1mysql
(16 rows)

-- select mysql_localtimestamp with group by index having (explain)
--Testcase 3123:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp(), c1 FROM time_tbl GROUP BY 2,1 HAVING mysql_localtimestamp() > '2000-01-01 00:00:00'::timestamp ORDER BY 1,2;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (mysql_localtimestamp()), c1
   Sort Key: (mysql_localtimestamp()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (mysql_localtimestamp()), c1
         Group Key: (mysql_localtimestamp()), time_tbl.c1
         Filter: ((mysql_localtimestamp()) > '2000-01-01 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (mysql_localtimestamp()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT localtimestamp(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_localtimestamp(), c1 FROM public.time_tbl1mysql
(16 rows)

-- mysql_localtimestamp constraints with group by (explain)
--Testcase 3124:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_localtimestamp(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp GROUP BY c1 ORDER BY 1;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1883.02..1883.02 rows=0 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan  (cost=112.84..1883.01 rows=0 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(localtimestamp(), '1 12:59:10.0') > '2000-01-01 00:00:00')) GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_localtimestamp(), '1 day 12:59:10'::interval) > '2000-01-01 00:00:00'::timestamp without time zone)) GROUP BY 1
(16 rows)

-- mysql_localtimestamp constraints with group by (result)
--Testcase 3125:
SELECT c1 FROM time_tbl WHERE addtime(mysql_localtimestamp(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp GROUP BY c1 ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_localtimestamp and as
--Testcase 3126:
EXPLAIN VERBOSE
SELECT mysql_localtimestamp() as mysql_localtimestamp1 FROM time_tbl ORDER BY 1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=8)
   Output: (mysql_localtimestamp())
   Sort Key: (mysql_localtimestamp())
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (mysql_localtimestamp())
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT localtimestamp() FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_localtimestamp() FROM public.time_tbl1mysql
(12 rows)

-- LOCALTIME(), LOCALTIME
-- mysql_localtime is mutable function, some executes will return different result
-- select mysql_localtime (stub function, explain)
--Testcase 3127:
EXPLAIN VERBOSE
SELECT mysql_localtime() FROM time_tbl;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
   Output: (mysql_localtime())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT localtime() FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_localtime() FROM public.time_tbl1mysql
(7 rows)

-- select mysql_localtime (stub function, not pushdown constraints, explain)
--Testcase 3128:
EXPLAIN VERBOSE
SELECT mysql_localtime() FROM time_tbl WHERE to_hex(id) > '0';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..982.41 rows=2276 width=8)
   Output: (mysql_localtime())
   Filter: (to_hex(time_tbl.id) > '0'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT localtime(), `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_localtime(), id FROM public.time_tbl1mysql
(8 rows)

-- select mysql_localtime (stub function, pushdown constraints, explain)
--Testcase 3129:
EXPLAIN VERBOSE
SELECT mysql_localtime() FROM time_tbl WHERE id = 1;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..314.50 rows=34 width=8)
   Output: (mysql_localtime())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT localtime() FROM `test`.`time_tbl2` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_localtime() FROM public.time_tbl1mysql WHERE ((id = 1))
(7 rows)

-- select mysql_localtime (stub function, mysql_localtime in constraints, explain)
--Testcase 3130:
EXPLAIN VERBOSE
SELECT mysql_localtime() FROM time_tbl WHERE mysql_localtime() > '2000-01-01 00:00:00'::timestamp;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2626.35 rows=2276 width=8)
   Output: (mysql_localtime())
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT localtime() FROM `test`.`time_tbl2` WHERE ((localtime() > '2000-01-01 00:00:00'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_localtime() FROM public.time_tbl1mysql WHERE ((public.mysql_localtime() > '2000-01-01 00:00:00'::timestamp without time zone))
(7 rows)

-- mysql_localtime in constrains (stub function, explain)
--Testcase 3131:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE mysql_localtime() > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2184.26..2189.95 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2057.35 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((localtime() > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.mysql_localtime() > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- mysql_localtime in constrains (stub function, result)
--Testcase 3132:
SELECT c1 FROM time_tbl WHERE mysql_localtime() > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- mysql_localtime as parameter of addtime(stub function, explain)
--Testcase 3133:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_localtime(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(localtime(), '1 12:59:10.0') > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_localtime(), '1 day 12:59:10'::interval) > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- mysql_localtime as parameter of addtime(stub function, result)
--Testcase 3134:
SELECT c1 FROM time_tbl WHERE addtime(mysql_localtime(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_localtime and agg (pushdown, explain)
--Testcase 3135:
EXPLAIN VERBOSE
SELECT mysql_localtime(), sum(id) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
   Output: mysql_localtime(), (sum(id))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(11 rows)

-- select mysql_localtime and log2 (pushdown, explain)
--Testcase 3136:
EXPLAIN VERBOSE
SELECT mysql_localtime(), log2(id) FROM time_tbl;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=16)
   Output: (mysql_localtime()), (log2((id)::double precision))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT localtime(), log2(`id`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_localtime(), public.log2(id) FROM public.time_tbl1mysql
(7 rows)

-- select mysql_localtime with non pushdown func and explicit constant (explain)
--Testcase 3137:
EXPLAIN VERBOSE
SELECT mysql_localtime(), to_hex(id), 4 FROM time_tbl;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=44)
   Output: mysql_localtime(), to_hex(id), 4
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id` FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id FROM public.time_tbl1mysql
(7 rows)

-- select mysql_localtime with order by (explain)
--Testcase 3138:
EXPLAIN VERBOSE
SELECT mysql_localtime(), c1 FROM time_tbl ORDER BY c1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: mysql_localtime(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- select mysql_localtime with order by index (explain)
--Testcase 3139:
EXPLAIN VERBOSE
SELECT mysql_localtime(), c1 FROM time_tbl ORDER BY 2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Result  (cost=859.49..2651.31 rows=6826 width=16)
   Output: mysql_localtime(), c1
   ->  Sort  (cost=859.49..876.55 rows=6826 width=8)
         Output: c1
         Sort Key: time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..424.78 rows=6826 width=8)
               Output: c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c1 FROM public.time_tbl1mysql
(14 rows)

-- mysql_localtime constraints with order by (explain)
--Testcase 3140:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_localtime(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY c1;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3890.76..3896.45 rows=2276 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3763.85 rows=2276 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(localtime(), '1 12:59:10.0') > '2000-01-01 00:00:00'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_localtime(), '1 day 12:59:10'::interval) > '2000-01-01 00:00:00'::timestamp without time zone))
(12 rows)

-- mysql_localtime constraints with order by (result)
--Testcase 3141:
SELECT c1 FROM time_tbl WHERE addtime(mysql_localtime(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp ORDER BY c1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_localtime with group by (explain)
--Testcase 3142:
EXPLAIN VERBOSE
SELECT mysql_localtime(), c1 FROM time_tbl GROUP BY c1 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (mysql_localtime()), c1
   Sort Key: (mysql_localtime()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: mysql_localtime(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select mysql_localtime with group by index (explain)
--Testcase 3143:
EXPLAIN VERBOSE
SELECT mysql_localtime(), c1 FROM time_tbl GROUP BY 2 ORDER BY 1,2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=223.67..223.68 rows=0 width=16)
   Output: (mysql_localtime()), c1
   Sort Key: (mysql_localtime()), time_tbl.c1
   ->  Foreign Scan  (cost=118.53..223.66 rows=0 width=16)
         Output: mysql_localtime(), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql GROUP BY 1
(16 rows)

-- select mysql_localtime with group by having (explain)
--Testcase 3144:
EXPLAIN VERBOSE
SELECT mysql_localtime(), c1 FROM time_tbl GROUP BY mysql_localtime(),c1 HAVING mysql_localtime() > '2000-01-01 00:00:00'::timestamp ORDER BY 1,2;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (mysql_localtime()), c1
   Sort Key: (mysql_localtime()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (mysql_localtime()), c1
         Group Key: (mysql_localtime()), time_tbl.c1
         Filter: ((mysql_localtime()) > '2000-01-01 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (mysql_localtime()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT localtime(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_localtime(), c1 FROM public.time_tbl1mysql
(16 rows)

-- select mysql_localtime with group by index having (explain)
--Testcase 3145:
EXPLAIN VERBOSE
SELECT mysql_localtime(), c1 FROM time_tbl GROUP BY 2,1 HAVING mysql_localtime() > '2000-01-01 00:00:00'::timestamp ORDER BY 1,2;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort  (cost=4652.84..4658.52 rows=2275 width=16)
   Output: (mysql_localtime()), c1
   Sort Key: (mysql_localtime()), time_tbl.c1
   ->  HashAggregate  (cost=2165.41..4525.99 rows=2275 width=16)
         Output: (mysql_localtime()), c1
         Group Key: (mysql_localtime()), time_tbl.c1
         Filter: ((mysql_localtime()) > '2000-01-01 00:00:00'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (mysql_localtime()), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT localtime(), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_localtime(), c1 FROM public.time_tbl1mysql
(16 rows)

-- mysql_localtime constraints with group by (explain)
--Testcase 3146:
EXPLAIN VERBOSE
SELECT c1 FROM time_tbl WHERE addtime(mysql_localtime(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp GROUP BY c1 ORDER BY 1;
                                                                                                QUERY PLAN                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1883.02..1883.02 rows=0 width=8)
   Output: c1
   Sort Key: time_tbl.c1
   ->  Foreign Scan  (cost=112.84..1883.01 rows=0 width=8)
         Output: c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1` FROM `test`.`time_tbl2` WHERE ((addtime(localtime(), '1 12:59:10.0') > '2000-01-01 00:00:00')) GROUP BY 1
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1 FROM public.time_tbl1mysql WHERE ((public.addtime(public.mysql_localtime(), '1 day 12:59:10'::interval) > '2000-01-01 00:00:00'::timestamp without time zone)) GROUP BY 1
(16 rows)

-- mysql_localtime constraints with group by (result)
--Testcase 3147:
SELECT c1 FROM time_tbl WHERE addtime(mysql_localtime(), '1 12:59:10') > '2000-01-01 00:00:00'::timestamp GROUP BY c1 ORDER BY 1;
    c1    
----------
 00:59:59
 11:12:12
 12:10:30
 16:00:00
 23:12:13
(5 rows)

-- select mysql_localtime and as
--Testcase 3148:
EXPLAIN VERBOSE
SELECT mysql_localtime() as mysql_localtime1 FROM time_tbl ORDER BY 1;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=8)
   Output: (mysql_localtime())
   Sort Key: (mysql_localtime())
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (mysql_localtime())
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT localtime() FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_localtime() FROM public.time_tbl1mysql
(12 rows)

-- LAST_DAY()
-- select last_day (stub function, explain)
--Testcase 3149:
EXPLAIN VERBOSE
SELECT last_day(c3), last_day(c2), last_day(date_sub(c3, '1 12:59:10')), last_day('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                  QUERY PLAN                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9409.05..9426.12 rows=6826 width=16)
   Output: (last_day(c3)), (last_day((c2)::timestamp without time zone)), (last_day(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (last_day(time_tbl.c3)), (last_day((time_tbl.c2)::timestamp without time zone)), (last_day(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8974.35 rows=6826 width=16)
         Output: (last_day(c3)), (last_day((c2)::timestamp without time zone)), (last_day(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT last_day(`c3`), last_day(`c2`), last_day(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), last_day('2021-01-01 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.last_day(c3), public.last_day(c2), public.last_day(public.date_sub(c3, '1 day 12:59:10'::interval)), public.last_day('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select last_day (stub function, result)
--Testcase 3150:
SELECT last_day(c3), last_day(c2), last_day(date_sub(c3, '1 12:59:10')), last_day('2021-01-01 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3,4;
  last_day  |  last_day  |  last_day  |  last_day  
------------+------------+------------+------------
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
(5 rows)

-- select last_day (stub function, not pushdown constraints, explain)
--Testcase 3151:
EXPLAIN VERBOSE
SELECT last_day(c3), last_day(c2), last_day(date_sub(c3, '1 12:59:10')), last_day('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                  QUERY PLAN                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=434.18..434.26 rows=34 width=16)
   Output: (last_day(c3)), (last_day((c2)::timestamp without time zone)), (last_day(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (last_day(time_tbl.c3)), (last_day((time_tbl.c2)::timestamp without time zone)), (last_day(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..433.31 rows=34 width=16)
         Output: (last_day(c3)), (last_day((c2)::timestamp without time zone)), (last_day(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT last_day(`c3`), last_day(`c2`), last_day(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), last_day('2021-01-01 12:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.last_day(c3), public.last_day(c2), public.last_day(public.date_sub(c3, '1 day 12:59:10'::interval)), public.last_day('2021-01-01 12:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select last_day (stub function, not pushdown constraints, result)
--Testcase 3152:
SELECT last_day(c3), last_day(c2), last_day(date_sub(c3, '1 12:59:10')), last_day('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
  last_day  |  last_day  |  last_day  |  last_day  
------------+------------+------------+------------
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
(1 row)

-- select last_day (stub function, pushdown constraints, explain)
--Testcase 3153:
EXPLAIN VERBOSE
SELECT last_day(c3), last_day(c2), last_day(date_sub(c3, '1 12:59:10')), last_day('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                         QUERY PLAN                                                                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9380.44..9397.42 rows=6792 width=16)
   Output: (last_day(c3)), (last_day((c2)::timestamp without time zone)), (last_day(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (last_day(time_tbl.c3)), (last_day((time_tbl.c2)::timestamp without time zone)), (last_day(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8948.15 rows=6792 width=16)
         Output: (last_day(c3)), (last_day((c2)::timestamp without time zone)), (last_day(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT last_day(`c3`), last_day(`c2`), last_day(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), last_day('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.last_day(c3), public.last_day(c2), public.last_day(public.date_sub(c3, '1 day 12:59:10'::interval)), public.last_day('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select last_day (stub function, pushdown constraints, result)
--Testcase 3154:
SELECT last_day(c3), last_day(c2), last_day(date_sub(c3, '1 12:59:10')), last_day('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
  last_day  |  last_day  |  last_day  |  last_day  
------------+------------+------------+------------
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
(5 rows)

-- select last_day (stub function, last_day in constraints, explain)
--Testcase 3155:
EXPLAIN VERBOSE
SELECT last_day(c3), last_day(c2), last_day(date_sub(c3, '1 12:59:10')), last_day('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE last_day(c3) > last_day('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
                                                                                                                                                                 QUERY PLAN                                                                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6741.45..6747.14 rows=2276 width=16)
   Output: (last_day(c3)), (last_day((c2)::timestamp without time zone)), (last_day(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (last_day(time_tbl.c3)), (last_day((time_tbl.c2)::timestamp without time zone)), (last_day(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..6614.53 rows=2276 width=16)
         Output: (last_day(c3)), (last_day((c2)::timestamp without time zone)), (last_day(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT last_day(`c3`), last_day(`c2`), last_day(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), last_day('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((last_day(`c3`) > last_day('2000-01-01 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.last_day(c3), public.last_day(c2), public.last_day(public.date_sub(c3, '1 day 12:59:10'::interval)), public.last_day('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.last_day(c3) > public.last_day('2000-01-01 00:00:00'::timestamp without time zone)))
(12 rows)

-- select last_day (stub function, last_day in constraints, result)
--Testcase 3156:
SELECT last_day(c3), last_day(c2), last_day(date_sub(c3, '1 12:59:10')), last_day('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE last_day(c3) > last_day('2000-01-01'::timestamp) ORDER BY 1,2,3,4;
  last_day  |  last_day  |  last_day  |  last_day  
------------+------------+------------+------------
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
(5 rows)

-- select last_day (stub function, last_day in constraints, explain)
--Testcase 3157:
EXPLAIN VERBOSE
SELECT last_day(c3), last_day(c2), last_day(date_sub(c3, '1 12:59:10')), last_day('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE last_day('2021-01-01 12:00:00'::timestamp) = '2021-01-31' ORDER BY 1,2,3,4;
                                                                                                                                                                 QUERY PLAN                                                                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2055.95..2056.04 rows=34 width=16)
   Output: (last_day(c3)), (last_day((c2)::timestamp without time zone)), (last_day(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
   Sort Key: (last_day(time_tbl.c3)), (last_day((time_tbl.c2)::timestamp without time zone)), (last_day(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2055.09 rows=34 width=16)
         Output: (last_day(c3)), (last_day((c2)::timestamp without time zone)), (last_day(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), (last_day('2021-01-01 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT last_day(`c3`), last_day(`c2`), last_day(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), last_day('2021-01-01 12:00:00') FROM `test`.`time_tbl2` WHERE ((last_day('2021-01-01 12:00:00') = '2021-01-31'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.last_day(c3), public.last_day(c2), public.last_day(public.date_sub(c3, '1 day 12:59:10'::interval)), public.last_day('2021-01-01 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.last_day('2021-01-01 12:00:00'::timestamp without time zone) = '2021-01-31'::date))
(12 rows)

-- select last_day (stub function, last_day in constraints, result)
--Testcase 3158:
SELECT last_day(c3), last_day(c2), last_day(date_sub(c3, '1 12:59:10')), last_day('2021-01-01 12:00:00'::timestamp) FROM time_tbl WHERE last_day('2021-01-01 12:00:00'::timestamp) = '2021-01-31' ORDER BY 1,2,3,4;
  last_day  |  last_day  |  last_day  |  last_day  
------------+------------+------------+------------
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
 2021-01-31 | 2021-01-31 | 2021-01-31 | 2021-01-31
(5 rows)

-- select last_day with agg (pushdown, explain)
--Testcase 3159:
EXPLAIN VERBOSE
SELECT max(c3), last_day(max(c3)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c3)), last_day((max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select last_day as nest function with agg (pushdown, result)
--Testcase 3160:
SELECT max(c3), last_day(max(c3)) FROM time_tbl;
ERROR:  stub last_day(timestamp) is called
CONTEXT:  PL/pgSQL function last_day(timestamp without time zone) line 3 at RAISE
-- select last_day with non pushdown func and explicit constant (explain)
--Testcase 3161:
EXPLAIN VERBOSE
SELECT last_day(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (last_day(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (last_day(date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (last_day(date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT last_day(date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.last_day(public.date_sub(c3, '1 day 12:59:10'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select last_day with non pushdown func and explicit constant (result)
--Testcase 3162:
SELECT last_day(date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
  last_day  |        pi         | ?column? 
------------+-------------------+----------
 2021-01-31 | 3.141592653589793 |      4.1
 2021-01-31 | 3.141592653589793 |      4.1
 2021-01-31 | 3.141592653589793 |      4.1
 2021-01-31 | 3.141592653589793 |      4.1
 2021-01-31 | 3.141592653589793 |      4.1
(5 rows)

-- select last_day with order by (explain)
--Testcase 3163:
EXPLAIN VERBOSE
SELECT id, last_day(c3 + '1 12:59:10') FROM time_tbl order by id,last_day(c3 + '1 12:59:10');
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=8)
   Output: id, (last_day((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: time_tbl.id, (last_day((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=8)
         Output: id, (last_day((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, last_day((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.last_day((c3 + '1 day 12:59:10'::interval)) FROM public.time_tbl1mysql
(12 rows)

-- select last_day with order by (result)
--Testcase 3164:
SELECT id, last_day(c3 + '1 12:59:10') FROM time_tbl order by id,last_day(c3 + '1 12:59:10');
 id |  last_day  
----+------------
  0 | 2021-01-31
  1 | 2021-01-31
  2 | 2021-01-31
  3 | 2021-01-31
  4 | 2021-01-31
(5 rows)

-- select last_day with order by index (result)
--Testcase 3165:
SELECT id, last_day(c3 + '1 12:59:10') FROM time_tbl order by 2,1;
 id |  last_day  
----+------------
  0 | 2021-01-31
  1 | 2021-01-31
  2 | 2021-01-31
  3 | 2021-01-31
  4 | 2021-01-31
(5 rows)

-- select last_day with order by index (result)
--Testcase 3166:
SELECT id, last_day(c3 + '1 12:59:10') FROM time_tbl order by 1,2;
 id |  last_day  
----+------------
  0 | 2021-01-31
  1 | 2021-01-31
  2 | 2021-01-31
  3 | 2021-01-31
  4 | 2021-01-31
(5 rows)

-- select last_day with group by (explain)
--Testcase 3167:
EXPLAIN VERBOSE
SELECT max(c3), last_day(c3 + '1 12:59:10') FROM time_tbl group by last_day(c3 + '1 12:59:10') ORDER BY 1,2;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=12)
   Output: (max(c3)), (last_day((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   Sort Key: (max(time_tbl.c3)), (last_day((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=12)
         Output: max(c3), (last_day((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         Group Key: (last_day((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (last_day((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT last_day((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.last_day((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(15 rows)

-- select last_day with group by (result)
--Testcase 3168:
SELECT max(c3), last_day(c3 + '1 12:59:10') FROM time_tbl group by last_day(c3 + '1 12:59:10') ORDER BY 1,2;
         max         |  last_day  
---------------------+------------
 2021-01-07 00:59:59 | 2021-01-31
(1 row)

-- select last_day with group by index (result)
--Testcase 3169:
SELECT id, last_day(c3 + '1 12:59:10') FROM time_tbl group by 2,1 ORDER BY 1,2;
 id |  last_day  
----+------------
  0 | 2021-01-31
  1 | 2021-01-31
  2 | 2021-01-31
  3 | 2021-01-31
  4 | 2021-01-31
(5 rows)

-- select last_day with group by index (result)
--Testcase 3170:
SELECT id, last_day(c3 + '1 12:59:10') FROM time_tbl group by 1,2 ORDER BY 1,2;
 id |  last_day  
----+------------
  0 | 2021-01-31
  1 | 2021-01-31
  2 | 2021-01-31
  3 | 2021-01-31
  4 | 2021-01-31
(5 rows)

-- select last_day with group by having (explain)
--Testcase 3171:
EXPLAIN VERBOSE
SELECT max(c3), last_day(c3 + '1 12:59:10') FROM time_tbl group by last_day(c3 + '1 12:59:10'), c3 HAVING last_day(c3 + '1 12:59:10') > '2001-01-31'::date ORDER BY 1,2;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=20)
   Output: (max(c3)), (last_day((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
   Sort Key: (max(time_tbl.c3)), (last_day((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=20)
         Output: max(c3), (last_day((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
         Group Key: (last_day((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), time_tbl.c3
         Filter: ((last_day((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))) > '2001-01-31'::date)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (last_day((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval))), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT last_day((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND)), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.last_day((c3 + '1 day 12:59:10'::interval)), c3 FROM public.time_tbl1mysql
(16 rows)

-- select last_day with group by having (result)
--Testcase 3172:
SELECT max(c3), last_day(c3 + '1 12:59:10') FROM time_tbl group by last_day(c3 + '1 12:59:10'), c3 HAVING last_day(c3 + '1 12:59:10') > '2001-01-31'::date ORDER BY 1,2;
         max         |  last_day  
---------------------+------------
 2021-01-03 12:10:30 | 2021-01-31
 2021-01-04 23:12:13 | 2021-01-31
 2021-01-05 11:12:12 | 2021-01-31
 2021-01-06 16:00:00 | 2021-01-31
 2021-01-07 00:59:59 | 2021-01-31
(5 rows)

-- select last_day with group by index having (result)
--Testcase 3173:
SELECT id, last_day(c3 + '1 12:59:10'), c3 FROM time_tbl group by 3, 2, 1 HAVING last_day(c3 + '1 12:59:10') > '2001-01-31'::date ORDER BY 1,2,3;
 id |  last_day  |         c3          
----+------------+---------------------
  0 | 2021-01-31 | 2021-01-03 12:10:30
  1 | 2021-01-31 | 2021-01-04 23:12:13
  2 | 2021-01-31 | 2021-01-05 11:12:12
  3 | 2021-01-31 | 2021-01-06 16:00:00
  4 | 2021-01-31 | 2021-01-07 00:59:59
(5 rows)

-- select last_day with group by index having (result)
--Testcase 3174:
SELECT id, last_day(c3 + '1 12:59:10'), c3 FROM time_tbl group by 1, 2, 3 HAVING last_day(c3 + '1 12:59:10') > '2001-01-31'::date ORDER BY 1,2,3;
 id |  last_day  |         c3          
----+------------+---------------------
  0 | 2021-01-31 | 2021-01-03 12:10:30
  1 | 2021-01-31 | 2021-01-04 23:12:13
  2 | 2021-01-31 | 2021-01-05 11:12:12
  3 | 2021-01-31 | 2021-01-06 16:00:00
  4 | 2021-01-31 | 2021-01-07 00:59:59
(5 rows)

-- select last_day and as
--Testcase 3175:
SELECT last_day(date_sub(c3, '1 12:59:10')) as last_day1 FROM time_tbl ORDER BY 1;
 last_day1  
------------
 2021-01-31
 2021-01-31
 2021-01-31
 2021-01-31
 2021-01-31
(5 rows)

-- HOUR()
-- select hour (stub function, explain)
--Testcase 3176:
EXPLAIN VERBOSE
SELECT hour(c1), hour('23:00:00'::time) FROM time_tbl ORDER BY 1,2;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=8)
   Output: (hour(c1)), (hour('23:00:00'::time without time zone))
   Sort Key: (hour(time_tbl.c1)), (hour('23:00:00'::time without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (hour(c1)), (hour('23:00:00'::time without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT hour(`c1`), hour('23:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.hour(c1), public.hour('23:00:00'::time without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select hour (stub function, result)
--Testcase 3177:
SELECT hour(c1), hour('23:00:00'::time) FROM time_tbl ORDER BY 1,2;
 hour | hour 
------+------
    0 |   23
   11 |   23
   12 |   23
   16 |   23
   23 |   23
(5 rows)

-- select hour (stub function, not pushdown constraints, explain)
--Testcase 3178:
EXPLAIN VERBOSE
SELECT hour(c1), hour('23:00:00'::time) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=408.59..408.68 rows=34 width=8)
   Output: (hour(c1)), (hour('23:00:00'::time without time zone))
   Sort Key: (hour(time_tbl.c1)), (hour('23:00:00'::time without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..407.73 rows=34 width=8)
         Output: (hour(c1)), (hour('23:00:00'::time without time zone))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT hour(`c1`), hour('23:00:00'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.hour(c1), public.hour('23:00:00'::time without time zone), id FROM public.time_tbl1mysql
(13 rows)

-- select hour (stub function, not pushdown constraints, result)
--Testcase 3179:
SELECT hour(c1), hour('23:00:00'::time) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
 hour | hour 
------+------
   23 |   23
(1 row)

-- select hour (stub function, pushdown constraints, explain)
--Testcase 3180:
EXPLAIN VERBOSE
SELECT hour(c1), hour('23:00:00'::time) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4269.46..4286.44 rows=6792 width=8)
   Output: (hour(c1)), (hour('23:00:00'::time without time zone))
   Sort Key: (hour(time_tbl.c1)), (hour('23:00:00'::time without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.16 rows=6792 width=8)
         Output: (hour(c1)), (hour('23:00:00'::time without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT hour(`c1`), hour('23:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.hour(c1), public.hour('23:00:00'::time without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select hour (stub function, pushdown constraints, result)
--Testcase 3181:
SELECT hour(c1), hour('23:00:00'::time) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
 hour | hour 
------+------
    0 |   23
   11 |   23
   12 |   23
   16 |   23
   23 |   23
(5 rows)

-- select hour (stub function, hour in constraints, explain)
--Testcase 3182:
EXPLAIN VERBOSE
SELECT hour(c1), hour('23:00:00'::time) FROM time_tbl WHERE hour(c1) = 12 ORDER BY 1,2;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2030.37..2030.45 rows=34 width=8)
   Output: (hour(c1)), (hour('23:00:00'::time without time zone))
   Sort Key: (hour(time_tbl.c1)), (hour('23:00:00'::time without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2029.50 rows=34 width=8)
         Output: (hour(c1)), (hour('23:00:00'::time without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT hour(`c1`), hour('23:00:00') FROM `test`.`time_tbl2` WHERE ((hour(`c1`) = 12))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.hour(c1), public.hour('23:00:00'::time without time zone) FROM public.time_tbl1mysql WHERE ((public.hour(c1) = 12))
(12 rows)

-- select hour (stub function, hour in constraints, result)
--Testcase 3183:
SELECT hour(c1), hour('23:00:00'::time) FROM time_tbl WHERE hour(c1) = 12 ORDER BY 1,2;
 hour | hour 
------+------
   12 |   23
(1 row)

-- select hour (stub function, hour in constraints, explain)
--Testcase 3184:
EXPLAIN VERBOSE
SELECT hour(c1), hour('23:00:00'::time) FROM time_tbl WHERE hour('22:00:00'::time) > '12' ORDER BY 1,2;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3322.26..3327.95 rows=2276 width=8)
   Output: (hour(c1)), (hour('23:00:00'::time without time zone))
   Sort Key: (hour(time_tbl.c1)), (hour('23:00:00'::time without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3195.35 rows=2276 width=8)
         Output: (hour(c1)), (hour('23:00:00'::time without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT hour(`c1`), hour('23:00:00') FROM `test`.`time_tbl2` WHERE ((hour('22:00:00') > 12))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.hour(c1), public.hour('23:00:00'::time without time zone) FROM public.time_tbl1mysql WHERE ((public.hour('22:00:00'::time without time zone) > 12))
(12 rows)

-- select hour (stub function, hour in constraints, result)
--Testcase 3185:
SELECT hour(c1), hour('23:00:00'::time) FROM time_tbl WHERE hour('22:00:00'::time) > '12' ORDER BY 1,2;
 hour | hour 
------+------
    0 |   23
   11 |   23
   12 |   23
   16 |   23
   23 |   23
(5 rows)

-- select hour with agg (pushdown, explain)
--Testcase 3186:
EXPLAIN VERBOSE
SELECT max(c1), hour(max(c1)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c1)), hour((max(c1)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c1`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c1) FROM public.time_tbl1mysql
(11 rows)

-- select hour as nest function with agg (pushdown, result)
--Testcase 3187:
SELECT max(c1), hour(max(c1)) FROM time_tbl;
ERROR:  stub hour(time without time zone) is called
CONTEXT:  PL/pgSQL function hour(time without time zone) line 3 at RAISE
-- select hour with non pushdown func and explicit constant (explain)
--Testcase 3188:
EXPLAIN VERBOSE
SELECT hour(maketime(18, 15, 30)), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (hour(maketime(18, 15, 30))), '3.141592653589793'::double precision, 4.1
   Sort Key: (hour(maketime(18, 15, 30)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (hour(maketime(18, 15, 30))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT hour(maketime(18, 15, 30)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.hour(public.maketime(18, 15, 30)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select hour with non pushdown func and explicit constant (result)
--Testcase 3189:
SELECT hour(maketime(18, 15, 30)), pi(), 4.1 FROM time_tbl ORDER BY 1;
 hour |        pi         | ?column? 
------+-------------------+----------
   18 | 3.141592653589793 |      4.1
   18 | 3.141592653589793 |      4.1
   18 | 3.141592653589793 |      4.1
   18 | 3.141592653589793 |      4.1
   18 | 3.141592653589793 |      4.1
(5 rows)

-- select hour with order by (explain)
--Testcase 3190:
EXPLAIN VERBOSE
SELECT id, hour(c1), hour('23:00:00'::time) FROM time_tbl order by id,hour(c1), hour('23:00:00'::time);
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=12)
   Output: id, (hour(c1)), (hour('23:00:00'::time without time zone))
   Sort Key: time_tbl.id, (hour(time_tbl.c1)), (hour('23:00:00'::time without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=12)
         Output: id, (hour(c1)), (hour('23:00:00'::time without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, hour(`c1`), hour('23:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.hour(c1), public.hour('23:00:00'::time without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select hour with order by (result)
--Testcase 3191:
SELECT id, hour(c1), hour('23:00:00'::time) FROM time_tbl order by id,hour(c1), hour('23:00:00'::time);
 id | hour | hour 
----+------+------
  0 |   12 |   23
  1 |   23 |   23
  2 |   11 |   23
  3 |   16 |   23
  4 |    0 |   23
(5 rows)

-- select hour with order by index (result)
--Testcase 3192:
SELECT id, hour(c1), hour('23:00:00'::time) FROM time_tbl order by 3,2,1;
 id | hour | hour 
----+------+------
  4 |    0 |   23
  2 |   11 |   23
  0 |   12 |   23
  3 |   16 |   23
  1 |   23 |   23
(5 rows)

-- select hour with order by index (result)
--Testcase 3193:
SELECT id, hour(c1), hour('23:00:00'::time) FROM time_tbl order by 1,2,3;
 id | hour | hour 
----+------+------
  0 |   12 |   23
  1 |   23 |   23
  2 |   11 |   23
  3 |   16 |   23
  4 |    0 |   23
(5 rows)

-- select hour with group by (explain)
--Testcase 3194:
EXPLAIN VERBOSE
SELECT max(c3), hour('23:00:00'::time) FROM time_tbl group by hour('05:00:00'::time) ORDER BY 1,2;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6081.38..6098.44 rows=6826 width=16)
   Output: (max(c3)), (hour('23:00:00'::time without time zone)), (hour('05:00:00'::time without time zone))
   Sort Key: (max(time_tbl.c3)), (hour('23:00:00'::time without time zone))
   ->  HashAggregate  (cost=2165.41..5646.67 rows=6826 width=16)
         Output: max(c3), hour('23:00:00'::time without time zone), (hour('05:00:00'::time without time zone))
         Group Key: (hour('05:00:00'::time without time zone))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (hour('05:00:00'::time without time zone)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT hour('05:00:00'), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.hour('05:00:00'::time without time zone), c3 FROM public.time_tbl1mysql
(15 rows)

-- select hour with group by (result)
--Testcase 3195:
SELECT max(c3), hour('23:00:00'::time) FROM time_tbl group by hour('05:00:00'::time) ORDER BY 1,2;
ERROR:  stub hour(time without time zone) is called
CONTEXT:  PL/pgSQL function hour(time without time zone) line 3 at RAISE
-- select hour with group by index (result)
--Testcase 3196:
SELECT id, hour(c1), hour('23:00:00'::time) FROM time_tbl group by 3,2,1 ORDER BY 1,2,3;
 id | hour | hour 
----+------+------
  0 |   12 |   23
  1 |   23 |   23
  2 |   11 |   23
  3 |   16 |   23
  4 |    0 |   23
(5 rows)

-- select hour with group by index (result)
--Testcase 3197:
SELECT id, hour(c1), hour('23:00:00'::time) FROM time_tbl group by 1,2,3 ORDER BY 1,2,3;
 id | hour | hour 
----+------+------
  0 |   12 |   23
  1 |   23 |   23
  2 |   11 |   23
  3 |   16 |   23
  4 |    0 |   23
(5 rows)

-- select hour with group by having (explain)
--Testcase 3198:
EXPLAIN VERBOSE
SELECT max(c3), hour(c1), hour('23:00:00'::time) FROM time_tbl group by hour(c1),hour('23:00:00'::time), c1,c3 HAVING hour(c1) < 24 ORDER BY 1,2,3;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6979.28..6984.97 rows=2275 width=32)
   Output: (max(c3)), (hour(c1)), (hour('23:00:00'::time without time zone)), c1, c3
   Sort Key: (max(time_tbl.c3)), (hour(time_tbl.c1)), (hour('23:00:00'::time without time zone))
   ->  HashAggregate  (cost=3923.11..6852.43 rows=2275 width=32)
         Output: max(c3), (hour(c1)), (hour('23:00:00'::time without time zone)), c1, c3
         Group Key: (hour(time_tbl.c1)), (hour('23:00:00'::time without time zone)), time_tbl.c1, time_tbl.c3
         Filter: ((hour(time_tbl.c1)) < 24)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=24)
               Output: (hour(c1)), (hour('23:00:00'::time without time zone)), c1, c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT hour(`c1`), hour('23:00:00'), `c1`, `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.hour(c1), public.hour('23:00:00'::time without time zone), c1, c3 FROM public.time_tbl1mysql
(16 rows)

-- select hour with group by having (result)
--Testcase 3199:
SELECT max(c3), hour(c1), hour('23:00:00'::time) FROM time_tbl group by hour(c1),hour('23:00:00'::time), c1,c3 HAVING hour(c1) < 24 ORDER BY 1,2,3;
         max         | hour | hour 
---------------------+------+------
 2021-01-03 12:10:30 |   12 |   23
 2021-01-04 23:12:13 |   23 |   23
 2021-01-05 11:12:12 |   11 |   23
 2021-01-06 16:00:00 |   16 |   23
 2021-01-07 00:59:59 |    0 |   23
(5 rows)

-- select hour with group by index having (result)
--Testcase 3200:
SELECT id, c1, hour(c1), hour('23:00:00'::time) FROM time_tbl group by 4, 3, 2, 1 HAVING hour(c1) < 24 ORDER BY 1,2,3,4;
 id |    c1    | hour | hour 
----+----------+------+------
  0 | 12:10:30 |   12 |   23
  1 | 23:12:13 |   23 |   23
  2 | 11:12:12 |   11 |   23
  3 | 16:00:00 |   16 |   23
  4 | 00:59:59 |    0 |   23
(5 rows)

-- select hour with group by index having (result)
--Testcase 3201:
SELECT id, c1, hour(c1), hour('23:00:00'::time) FROM time_tbl group by 1, 2, 3, 4 HAVING hour(c1) < 24 ORDER BY 1,2,3,4;
 id |    c1    | hour | hour 
----+----------+------+------
  0 | 12:10:30 |   12 |   23
  1 | 23:12:13 |   23 |   23
  2 | 11:12:12 |   11 |   23
  3 | 16:00:00 |   16 |   23
  4 | 00:59:59 |    0 |   23
(5 rows)

-- select hour and as
--Testcase 3202:
SELECT hour(c1) as hour1, hour('23:00:00'::time) as hour2 FROM time_tbl ORDER BY 1,2;
 hour1 | hour2 
-------+-------
     0 |    23
    11 |    23
    12 |    23
    16 |    23
    23 |    23
(5 rows)

-- GET_FORMAT()
-- Returns a format string. This function is useful in combination with the DATE_FORMAT() and the STR_TO_DATE() functions.
-- select get_format (stub function, explain)
--Testcase 3203:
EXPLAIN VERBOSE
SELECT get_format('date', 'usa'), date_format(c2, get_format('date', 'usa')), get_format('datetime', 'jis'), date_format(c3, get_format('datetime', 'jis')) FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                                               QUERY PLAN                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11115.55..11132.62 rows=6826 width=128)
   Output: (get_format('date'::text, 'usa'::text)), (date_format((c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(c3, get_format('datetime'::text, 'jis'::text)))
   Sort Key: (get_format('date'::text, 'usa'::text)), (date_format((time_tbl.c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(time_tbl.c3, get_format('datetime'::text, 'jis'::text)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..10680.85 rows=6826 width=128)
         Output: (get_format('date'::text, 'usa'::text)), (date_format((c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(c3, get_format('datetime'::text, 'jis'::text)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT get_format(date, 'usa'), date_format(`c2`, get_format(date, 'usa')), get_format(datetime, 'jis'), date_format(`c3`, get_format(datetime, 'jis')) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.get_format('date'::text, 'usa'::text), public.date_format(c2, public.get_format('date'::text, 'usa'::text)), public.get_format('datetime'::text, 'jis'::text), public.date_format(c3, public.get_format('datetime'::text, 'jis'::text)) FROM public.time_tbl1mysql
(12 rows)

-- select get_format (stub function, result)
--Testcase 3204:
SELECT get_format('date', 'usa'), date_format(c2, get_format('date', 'usa')), get_format('datetime', 'jis'), date_format(c3, get_format('datetime', 'jis')) FROM time_tbl ORDER BY 1,2,3,4;
 get_format | date_format |    get_format     |     date_format     
------------+-------------+-------------------+---------------------
 %m.%d.%Y   | 01.01.2021  | %Y-%m-%d %H:%i:%s | 2021-01-04 23:12:13
 %m.%d.%Y   | 01.02.2021  | %Y-%m-%d %H:%i:%s | 2021-01-03 12:10:30
 %m.%d.%Y   | 01.10.2021  | %Y-%m-%d %H:%i:%s | 2021-01-05 11:12:12
 %m.%d.%Y   | 01.15.2021  | %Y-%m-%d %H:%i:%s | 2021-01-06 16:00:00
 %m.%d.%Y   | 01.29.2021  | %Y-%m-%d %H:%i:%s | 2021-01-07 00:59:59
(5 rows)

-- select get_format (stub function, not pushdown constraints, explain)
--Testcase 3205:
EXPLAIN VERBOSE
SELECT get_format('date', 'usa'), date_format(c2, get_format('date', 'usa')), get_format('datetime', 'jis'), date_format(c3, get_format('datetime', 'jis')) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
                                                                                                                                                 QUERY PLAN                                                                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=442.68..442.76 rows=34 width=128)
   Output: (get_format('date'::text, 'usa'::text)), (date_format((c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(c3, get_format('datetime'::text, 'jis'::text)))
   Sort Key: (get_format('date'::text, 'usa'::text)), (date_format((time_tbl.c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(time_tbl.c3, get_format('datetime'::text, 'jis'::text)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..441.81 rows=34 width=128)
         Output: (get_format('date'::text, 'usa'::text)), (date_format((c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(c3, get_format('datetime'::text, 'jis'::text)))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT get_format(date, 'usa'), date_format(`c2`, get_format(date, 'usa')), get_format(datetime, 'jis'), date_format(`c3`, get_format(datetime, 'jis')), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.get_format('date'::text, 'usa'::text), public.date_format(c2, public.get_format('date'::text, 'usa'::text)), public.get_format('datetime'::text, 'jis'::text), public.date_format(c3, public.get_format('datetime'::text, 'jis'::text)), id FROM public.time_tbl1mysql
(13 rows)

-- select get_format (stub function, not pushdown constraints, result)
--Testcase 3206:
SELECT get_format('date', 'usa'), date_format(c2, get_format('date', 'usa')), get_format('datetime', 'jis'), date_format(c3, get_format('datetime', 'jis')) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3,4;
 get_format | date_format |    get_format     |     date_format     
------------+-------------+-------------------+---------------------
 %m.%d.%Y   | 01.01.2021  | %Y-%m-%d %H:%i:%s | 2021-01-04 23:12:13
(1 row)

-- select get_format (stub function, pushdown constraints, explain)
--Testcase 3207:
EXPLAIN VERBOSE
SELECT get_format('date', 'usa'), date_format(c2, get_format('date', 'usa')), get_format('datetime', 'jis'), date_format(c3, get_format('datetime', 'jis')) FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
                                                                                                                                                        QUERY PLAN                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11078.44..11095.42 rows=6792 width=128)
   Output: (get_format('date'::text, 'usa'::text)), (date_format((c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(c3, get_format('datetime'::text, 'jis'::text)))
   Sort Key: (get_format('date'::text, 'usa'::text)), (date_format((time_tbl.c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(time_tbl.c3, get_format('datetime'::text, 'jis'::text)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..10646.15 rows=6792 width=128)
         Output: (get_format('date'::text, 'usa'::text)), (date_format((c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(c3, get_format('datetime'::text, 'jis'::text)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT get_format(date, 'usa'), date_format(`c2`, get_format(date, 'usa')), get_format(datetime, 'jis'), date_format(`c3`, get_format(datetime, 'jis')) FROM `test`.`time_tbl2` WHERE ((`id` <> 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.get_format('date'::text, 'usa'::text), public.date_format(c2, public.get_format('date'::text, 'usa'::text)), public.get_format('datetime'::text, 'jis'::text), public.date_format(c3, public.get_format('datetime'::text, 'jis'::text)) FROM public.time_tbl1mysql WHERE ((id <> 0))
(12 rows)

-- select get_format (stub function, pushdown constraints, result)
--Testcase 3208:
SELECT get_format('date', 'usa'), date_format(c2, get_format('date', 'usa')), get_format('datetime', 'jis'), date_format(c3, get_format('datetime', 'jis')) FROM time_tbl WHERE id != 0 ORDER BY 1,2,3,4;
 get_format | date_format |    get_format     |     date_format     
------------+-------------+-------------------+---------------------
 %m.%d.%Y   | 01.01.2021  | %Y-%m-%d %H:%i:%s | 2021-01-04 23:12:13
 %m.%d.%Y   | 01.10.2021  | %Y-%m-%d %H:%i:%s | 2021-01-05 11:12:12
 %m.%d.%Y   | 01.15.2021  | %Y-%m-%d %H:%i:%s | 2021-01-06 16:00:00
 %m.%d.%Y   | 01.29.2021  | %Y-%m-%d %H:%i:%s | 2021-01-07 00:59:59
(4 rows)

-- select get_format (stub function, get_format in constraints, explain)
--Testcase 3209:
EXPLAIN VERBOSE
SELECT get_format('date', 'usa'), date_format(c2, get_format('date', 'usa')), get_format('datetime', 'jis'), date_format(c3, get_format('datetime', 'jis')) FROM time_tbl WHERE get_format('date', 'usa') IS NOT NULL ORDER BY 1,2,3,4;
                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=12767.88..12784.86 rows=6792 width=128)
   Output: (get_format('date'::text, 'usa'::text)), (date_format((c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(c3, get_format('datetime'::text, 'jis'::text)))
   Sort Key: (get_format('date'::text, 'usa'::text)), (date_format((time_tbl.c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(time_tbl.c3, get_format('datetime'::text, 'jis'::text)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..12335.58 rows=6792 width=128)
         Output: (get_format('date'::text, 'usa'::text)), (date_format((c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(c3, get_format('datetime'::text, 'jis'::text)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT get_format(date, 'usa'), date_format(`c2`, get_format(date, 'usa')), get_format(datetime, 'jis'), date_format(`c3`, get_format(datetime, 'jis')) FROM `test`.`time_tbl2` WHERE ((get_format(date, 'usa') IS NOT NULL))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.get_format('date'::text, 'usa'::text), public.date_format(c2, public.get_format('date'::text, 'usa'::text)), public.get_format('datetime'::text, 'jis'::text), public.date_format(c3, public.get_format('datetime'::text, 'jis'::text)) FROM public.time_tbl1mysql WHERE ((public.get_format('date'::text, 'usa'::text) IS NOT NULL))
(12 rows)

-- select get_format (stub function, get_format in constraints, result)
--Testcase 3210:
SELECT get_format('date', 'usa'), date_format(c2, get_format('date', 'usa')), get_format('datetime', 'jis'), date_format(c3, get_format('datetime', 'jis')) FROM time_tbl WHERE get_format('date', 'usa') IS NOT NULL ORDER BY 1,2,3,4;
 get_format | date_format |    get_format     |     date_format     
------------+-------------+-------------------+---------------------
 %m.%d.%Y   | 01.01.2021  | %Y-%m-%d %H:%i:%s | 2021-01-04 23:12:13
 %m.%d.%Y   | 01.02.2021  | %Y-%m-%d %H:%i:%s | 2021-01-03 12:10:30
 %m.%d.%Y   | 01.10.2021  | %Y-%m-%d %H:%i:%s | 2021-01-05 11:12:12
 %m.%d.%Y   | 01.15.2021  | %Y-%m-%d %H:%i:%s | 2021-01-06 16:00:00
 %m.%d.%Y   | 01.29.2021  | %Y-%m-%d %H:%i:%s | 2021-01-07 00:59:59
(5 rows)

-- select get_format (stub function, get_format in constraints, explain)
--Testcase 3211:
EXPLAIN VERBOSE
SELECT get_format('date', 'usa'), date_format(c2, get_format('date', 'usa')), get_format('datetime', 'jis'), date_format(c3, get_format('datetime', 'jis')) FROM time_tbl WHERE date_format(c3, get_format('datetime', 'jis')) IS NOT NULL ORDER BY 1,2,3,4;
                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=14474.38..14491.36 rows=6792 width=128)
   Output: (get_format('date'::text, 'usa'::text)), (date_format((c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(c3, get_format('datetime'::text, 'jis'::text)))
   Sort Key: (get_format('date'::text, 'usa'::text)), (date_format((time_tbl.c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(time_tbl.c3, get_format('datetime'::text, 'jis'::text)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..14042.08 rows=6792 width=128)
         Output: (get_format('date'::text, 'usa'::text)), (date_format((c2)::timestamp without time zone, get_format('date'::text, 'usa'::text))), (get_format('datetime'::text, 'jis'::text)), (date_format(c3, get_format('datetime'::text, 'jis'::text)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT get_format(date, 'usa'), date_format(`c2`, get_format(date, 'usa')), get_format(datetime, 'jis'), date_format(`c3`, get_format(datetime, 'jis')) FROM `test`.`time_tbl2` WHERE ((date_format(`c3`, get_format(datetime, 'jis')) IS NOT NULL))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.get_format('date'::text, 'usa'::text), public.date_format(c2, public.get_format('date'::text, 'usa'::text)), public.get_format('datetime'::text, 'jis'::text), public.date_format(c3, public.get_format('datetime'::text, 'jis'::text)) FROM public.time_tbl1mysql WHERE ((public.date_format(c3, public.get_format('datetime'::text, 'jis'::text)) IS NOT NULL))
(12 rows)

-- select get_format (stub function, get_format in constraints, result)
--Testcase 3212:
SELECT get_format('date', 'usa'), date_format(c2, get_format('date', 'usa')), get_format('datetime', 'jis'), date_format(c3, get_format('datetime', 'jis')) FROM time_tbl WHERE date_format(c3, get_format('datetime', 'jis')) IS NOT NULL ORDER BY 1,2,3,4;
 get_format | date_format |    get_format     |     date_format     
------------+-------------+-------------------+---------------------
 %m.%d.%Y   | 01.01.2021  | %Y-%m-%d %H:%i:%s | 2021-01-04 23:12:13
 %m.%d.%Y   | 01.02.2021  | %Y-%m-%d %H:%i:%s | 2021-01-03 12:10:30
 %m.%d.%Y   | 01.10.2021  | %Y-%m-%d %H:%i:%s | 2021-01-05 11:12:12
 %m.%d.%Y   | 01.15.2021  | %Y-%m-%d %H:%i:%s | 2021-01-06 16:00:00
 %m.%d.%Y   | 01.29.2021  | %Y-%m-%d %H:%i:%s | 2021-01-07 00:59:59
(5 rows)

-- select get_format as nest function with agg (pushdown, explain)
--Testcase 3213:
EXPLAIN VERBOSE
SELECT max(c2), date_format(max(c3), get_format('datetime', 'jis')) FROM time_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.66 rows=1 width=36)
   Output: (max(c2)), date_format((max(c3)), get_format('datetime'::text, 'jis'::text))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c2`), max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c2), max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select get_format as nest function with agg (pushdown, result)
--Testcase 3214:
SELECT max(c2), date_format(max(c3), get_format('datetime', 'jis')) FROM time_tbl;
ERROR:  stub get_format(text, text) is called
CONTEXT:  PL/pgSQL function get_format(text,text) line 3 at RAISE
-- select get_format with non pushdown func and explicit constant (explain)
--Testcase 3215:
EXPLAIN VERBOSE
SELECT get_format('datetime', 'jis'), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=72)
   Output: (get_format('datetime'::text, 'jis'::text)), '3.141592653589793'::double precision, 4.1
   Sort Key: (get_format('datetime'::text, 'jis'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=72)
         Output: (get_format('datetime'::text, 'jis'::text)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT get_format(datetime, 'jis'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.get_format('datetime'::text, 'jis'::text), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select get_format with non pushdown func and explicit constant (result)
--Testcase 3216:
SELECT get_format('datetime', 'jis'), pi(), 4.1 FROM time_tbl ORDER BY 1;
    get_format     |        pi         | ?column? 
-------------------+-------------------+----------
 %Y-%m-%d %H:%i:%s | 3.141592653589793 |      4.1
 %Y-%m-%d %H:%i:%s | 3.141592653589793 |      4.1
 %Y-%m-%d %H:%i:%s | 3.141592653589793 |      4.1
 %Y-%m-%d %H:%i:%s | 3.141592653589793 |      4.1
 %Y-%m-%d %H:%i:%s | 3.141592653589793 |      4.1
(5 rows)

-- select get_format with order by (explain)
--Testcase 3217:
EXPLAIN VERBOSE
SELECT id, date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')) FROM time_tbl order by id,date_format(c3 + '1 12:59:10', get_format('datetime', 'jis'));
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4289.55..4306.62 rows=6826 width=36)
   Output: id, (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), get_format('datetime'::text, 'jis'::text)))
   Sort Key: time_tbl.id, (date_format((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), get_format('datetime'::text, 'jis'::text)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=36)
         Output: id, (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), get_format('datetime'::text, 'jis'::text)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, date_format((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND), get_format(datetime, 'jis')) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.date_format((c3 + '1 day 12:59:10'::interval), public.get_format('datetime'::text, 'jis'::text)) FROM public.time_tbl1mysql
(12 rows)

-- select get_format with order by (result)
--Testcase 3218:
SELECT id, date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')) FROM time_tbl order by id,date_format(c3 + '1 12:59:10', get_format('datetime', 'jis'));
 id |     date_format     
----+---------------------
  0 | 2021-01-05 01:09:40
  1 | 2021-01-06 12:11:23
  2 | 2021-01-07 00:11:22
  3 | 2021-01-08 04:59:10
  4 | 2021-01-08 13:59:09
(5 rows)

-- select get_format with order by index (result)
--Testcase 3219:
SELECT id, date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')) FROM time_tbl order by 2,1;
 id |     date_format     
----+---------------------
  0 | 2021-01-05 01:09:40
  1 | 2021-01-06 12:11:23
  2 | 2021-01-07 00:11:22
  3 | 2021-01-08 04:59:10
  4 | 2021-01-08 13:59:09
(5 rows)

-- select get_format with order by index (result)
--Testcase 3220:
SELECT id, date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')) FROM time_tbl order by 1,2;
 id |     date_format     
----+---------------------
  0 | 2021-01-05 01:09:40
  1 | 2021-01-06 12:11:23
  2 | 2021-01-07 00:11:22
  3 | 2021-01-08 04:59:10
  4 | 2021-01-08 13:59:09
(5 rows)

-- select get_format with group by (explain)
--Testcase 3221:
EXPLAIN VERBOSE
SELECT count(id), date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')) FROM time_tbl group by date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')) ORDER BY 1,2;
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3999.12..3999.62 rows=200 width=40)
   Output: (count(id)), (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), get_format('datetime'::text, 'jis'::text)))
   Sort Key: (count(time_tbl.id)), (date_format((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), get_format('datetime'::text, 'jis'::text)))
   ->  HashAggregate  (cost=3888.97..3991.47 rows=200 width=40)
         Output: count(id), (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), get_format('datetime'::text, 'jis'::text)))
         Group Key: (date_format((time_tbl.c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), get_format('datetime'::text, 'jis'::text)))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3854.84 rows=6826 width=36)
               Output: (date_format((c3 + '@ 1 day 12 hours 59 mins 10 secs'::interval), get_format('datetime'::text, 'jis'::text))), id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT date_format((`c3` + INTERVAL 1 DAY + INTERVAL 12 HOUR + INTERVAL 59 MINUTE + INTERVAL 10 SECOND), get_format(datetime, 'jis')), `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.date_format((c3 + '1 day 12:59:10'::interval), public.get_format('datetime'::text, 'jis'::text)), id FROM public.time_tbl1mysql
(15 rows)

-- select get_format with group by (result)
--Testcase 3222:
SELECT count(id), date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')) FROM time_tbl group by date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')) ORDER BY 1,2;
 count |     date_format     
-------+---------------------
     1 | 2021-01-05 01:09:40
     1 | 2021-01-06 12:11:23
     1 | 2021-01-07 00:11:22
     1 | 2021-01-08 04:59:10
     1 | 2021-01-08 13:59:09
(5 rows)

-- select get_format with group by index (result)
--Testcase 3223:
SELECT id, date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')) FROM time_tbl group by 2,1 ORDER BY 1,2;
 id |     date_format     
----+---------------------
  0 | 2021-01-05 01:09:40
  1 | 2021-01-06 12:11:23
  2 | 2021-01-07 00:11:22
  3 | 2021-01-08 04:59:10
  4 | 2021-01-08 13:59:09
(5 rows)

-- select get_format with group by index (result)
--Testcase 3224:
SELECT id, date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')) FROM time_tbl group by 1,2 ORDER BY 1,2;
 id |     date_format     
----+---------------------
  0 | 2021-01-05 01:09:40
  1 | 2021-01-06 12:11:23
  2 | 2021-01-07 00:11:22
  3 | 2021-01-08 04:59:10
  4 | 2021-01-08 13:59:09
(5 rows)

-- select get_format with group by index having (result)
--Testcase 3225:
SELECT id, date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')), c3 FROM time_tbl group by 3,2,1 HAVING date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')) > '2000-01-02' ORDER BY 1,2,3;
 id |     date_format     |         c3          
----+---------------------+---------------------
  0 | 2021-01-05 01:09:40 | 2021-01-03 12:10:30
  1 | 2021-01-06 12:11:23 | 2021-01-04 23:12:13
  2 | 2021-01-07 00:11:22 | 2021-01-05 11:12:12
  3 | 2021-01-08 04:59:10 | 2021-01-06 16:00:00
  4 | 2021-01-08 13:59:09 | 2021-01-07 00:59:59
(5 rows)

-- select get_format with group by index having (result)
--Testcase 3226:
SELECT id, date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')), c3 FROM time_tbl group by 1,2,3 HAVING date_format(c3 + '1 12:59:10', get_format('datetime', 'jis')) > '2000-01-02' ORDER BY 1,2,3;
 id |     date_format     |         c3          
----+---------------------+---------------------
  0 | 2021-01-05 01:09:40 | 2021-01-03 12:10:30
  1 | 2021-01-06 12:11:23 | 2021-01-04 23:12:13
  2 | 2021-01-07 00:11:22 | 2021-01-05 11:12:12
  3 | 2021-01-08 04:59:10 | 2021-01-06 16:00:00
  4 | 2021-01-08 13:59:09 | 2021-01-07 00:59:59
(5 rows)

-- select get_format and as
--Testcase 3227:
SELECT get_format('datetime', 'jis') as get_format1 FROM time_tbl ORDER BY 1;
    get_format1    
-------------------
 %Y-%m-%d %H:%i:%s
 %Y-%m-%d %H:%i:%s
 %Y-%m-%d %H:%i:%s
 %Y-%m-%d %H:%i:%s
 %Y-%m-%d %H:%i:%s
(5 rows)

-- FROM_UNIXTIME()
-- select from_unixtime (stub function, explain)
--Testcase 3228:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x') FROM time_tbl ORDER BY 1,2;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4306.62..4323.68 rows=6826 width=40)
   Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   Sort Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3871.91 rows=6826 width=40)
         Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_unixtime(1447430881), from_unixtime((`id` + 1447430881), '%Y %D %M %h:%i:%s %x') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_unixtime(1447430881::bigint), public.from_unixtime((id + 1447430881), '%Y %D %M %h:%i:%s %x'::text) FROM public.time_tbl1mysql
(12 rows)

-- select from_unixtime (stub function, result)
--Testcase 3229:
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x') FROM time_tbl ORDER BY 1,2;
    from_unixtime    |          from_unixtime           
---------------------+----------------------------------
 2015-11-13 08:08:01 | 2015 13th November 08:08:01 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:02 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:03 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:04 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:05 2015
(5 rows)

-- select from_unixtime (stub function, not pushdown constraints, explain)
--Testcase 3230:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x') FROM time_tbl WHERE to_hex(id) > '0' ORDER BY 1,2;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1689.70..1695.39 rows=2276 width=40)
   Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   Sort Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..1562.79 rows=2276 width=40)
         Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
         Filter: (to_hex(time_tbl.id) > '0'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_unixtime(1447430881), from_unixtime((`id` + 1447430881), '%Y %D %M %h:%i:%s %x'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_unixtime(1447430881::bigint), public.from_unixtime((id + 1447430881), '%Y %D %M %h:%i:%s %x'::text), id FROM public.time_tbl1mysql
(13 rows)

-- select from_unixtime (stub function, not pushdown constraints, result)
--Testcase 3231:
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x') FROM time_tbl WHERE to_hex(id) > '0' ORDER BY 1,2;
    from_unixtime    |          from_unixtime           
---------------------+----------------------------------
 2015-11-13 08:08:01 | 2015 13th November 08:08:02 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:03 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:04 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:05 2015
(4 rows)

-- select from_unixtime (stub function, pushdown constraints, explain)
--Testcase 3232:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x') FROM time_tbl WHERE id = 1 ORDER BY 1,2;
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=324.04..324.12 rows=34 width=40)
   Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   Sort Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..323.17 rows=34 width=40)
         Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_unixtime(1447430881), from_unixtime((`id` + 1447430881), '%Y %D %M %h:%i:%s %x') FROM `test`.`time_tbl2` WHERE ((`id` = 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_unixtime(1447430881::bigint), public.from_unixtime((id + 1447430881), '%Y %D %M %h:%i:%s %x'::text) FROM public.time_tbl1mysql WHERE ((id = 1))
(12 rows)

-- select from_unixtime (stub function, pushdown constraints, result)
--Testcase 3233:
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x') FROM time_tbl WHERE id = 1 ORDER BY 1,2;
    from_unixtime    |          from_unixtime           
---------------------+----------------------------------
 2015-11-13 08:08:01 | 2015 13th November 08:08:02 2015
(1 row)

-- select from_unixtime (stub function, from_unixtime in constraints, explain)
--Testcase 3234:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x') FROM time_tbl WHERE from_unixtime(id + 1447430881) > from_unixtime(1447430881) ORDER BY 1,2;
                                                                                                                              QUERY PLAN                                                                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5074.27..5079.96 rows=2276 width=40)
   Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   Sort Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4947.36 rows=2276 width=40)
         Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_unixtime(1447430881), from_unixtime((`id` + 1447430881), '%Y %D %M %h:%i:%s %x') FROM `test`.`time_tbl2` WHERE ((from_unixtime((`id` + 1447430881)) > from_unixtime(1447430881)))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_unixtime(1447430881::bigint), public.from_unixtime((id + 1447430881), '%Y %D %M %h:%i:%s %x'::text) FROM public.time_tbl1mysql WHERE ((public.from_unixtime((id + 1447430881)) > public.from_unixtime(1447430881::bigint)))
(12 rows)

-- select from_unixtime (stub function, from_unixtime in constraints, result)
--Testcase 3235:
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x') FROM time_tbl WHERE from_unixtime(id + 1447430881) > from_unixtime(1447430881) ORDER BY 1,2;
    from_unixtime    |          from_unixtime           
---------------------+----------------------------------
 2015-11-13 08:08:01 | 2015 13th November 08:08:02 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:03 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:04 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:05 2015
(4 rows)

-- select from_unixtime and agg (pushdown, explain)
--Testcase 3236:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881), sum(id) FROM time_tbl ORDER BY 1,2;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Sort  (cost=159.42..159.42 rows=1 width=16)
   Output: (from_unixtime('1447430881'::bigint)), (sum(id))
   Sort Key: (from_unixtime('1447430881'::bigint)), (sum(time_tbl.id))
   ->  Foreign Scan  (cost=110.00..159.41 rows=1 width=16)
         Output: from_unixtime('1447430881'::bigint), (sum(id))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT sum(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT sum(id) FROM public.time_tbl1mysql
(16 rows)

-- select from_unixtime and log2 (pushdown, result)
--Testcase 3237:
SELECT from_unixtime(1447430881), log2(id) FROM time_tbl ORDER BY 1,2;
    from_unixtime    |       log2        
---------------------+-------------------
 2015-11-13 08:08:01 |                 0
 2015-11-13 08:08:01 |                 1
 2015-11-13 08:08:01 | 1.584962500721156
 2015-11-13 08:08:01 |                 2
 2015-11-13 08:08:01 |                  
(5 rows)

-- select from_unixtime with non pushdown func and explicit constant (explain)
--Testcase 3238:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=44)
   Output: (from_unixtime('1447430881'::bigint)), (to_hex(id)), 4
   Sort Key: (from_unixtime('1447430881'::bigint)), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=44)
         Output: from_unixtime('1447430881'::bigint), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select from_unixtime with order by (explain)
--Testcase 3239:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x'), c1 FROM time_tbl ORDER BY from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x');
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4306.62..4323.68 rows=6826 width=48)
   Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), c1
   Sort Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3871.91 rows=6826 width=48)
         Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_unixtime(1447430881), from_unixtime((`id` + 1447430881), '%Y %D %M %h:%i:%s %x'), `c1` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_unixtime(1447430881::bigint), public.from_unixtime((id + 1447430881), '%Y %D %M %h:%i:%s %x'::text), c1 FROM public.time_tbl1mysql
(12 rows)

-- select from_unixtime with order by index (explain)
--Testcase 3240:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x'), c1 FROM time_tbl ORDER BY 1,2,3;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4306.62..4323.68 rows=6826 width=48)
   Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), c1
   Sort Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3871.91 rows=6826 width=48)
         Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_unixtime(1447430881), from_unixtime((`id` + 1447430881), '%Y %D %M %h:%i:%s %x'), `c1` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_unixtime(1447430881::bigint), public.from_unixtime((id + 1447430881), '%Y %D %M %h:%i:%s %x'::text), c1 FROM public.time_tbl1mysql
(12 rows)

-- from_unixtime constraints with order by (explain)
--Testcase 3241:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x') FROM time_tbl WHERE from_unixtime(id + 1447430881) > from_unixtime(1447430881) ORDER BY from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x');
                                                                                                                              QUERY PLAN                                                                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5074.27..5079.96 rows=2276 width=40)
   Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   Sort Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4947.36 rows=2276 width=40)
         Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_unixtime(1447430881), from_unixtime((`id` + 1447430881), '%Y %D %M %h:%i:%s %x') FROM `test`.`time_tbl2` WHERE ((from_unixtime((`id` + 1447430881)) > from_unixtime(1447430881)))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_unixtime(1447430881::bigint), public.from_unixtime((id + 1447430881), '%Y %D %M %h:%i:%s %x'::text) FROM public.time_tbl1mysql WHERE ((public.from_unixtime((id + 1447430881)) > public.from_unixtime(1447430881::bigint)))
(12 rows)

-- from_unixtime constraints with order by (result)
--Testcase 3242:
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x') FROM time_tbl WHERE from_unixtime(id + 1447430881) > from_unixtime(1447430881) ORDER BY from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x');
    from_unixtime    |          from_unixtime           
---------------------+----------------------------------
 2015-11-13 08:08:01 | 2015 13th November 08:08:02 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:03 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:04 2015
 2015-11-13 08:08:01 | 2015 13th November 08:08:05 2015
(4 rows)

-- select from_unixtime with group by (explain)
--Testcase 3243:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x'), c1 FROM time_tbl GROUP BY c1,id ORDER BY 1,2,3;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=358.64..358.65 rows=0 width=52)
   Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), c1, id
   Sort Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), time_tbl.c1
   ->  Foreign Scan  (cost=127.06..358.63 rows=0 width=52)
         Output: from_unixtime('1447430881'::bigint), from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text), c1, id
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1`, `id` FROM `test`.`time_tbl2` GROUP BY 1, 2
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1, id FROM public.time_tbl1mysql GROUP BY 1, 2
(16 rows)

-- select from_unixtime with group by index (explain)
--Testcase 3244:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x'), c1 FROM time_tbl GROUP BY 1,2,3 ORDER BY 1,2,3;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Group  (cost=4306.62..7822.01 rows=6826 width=48)
   Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), c1
   Group Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), time_tbl.c1
   ->  Sort  (cost=4306.62..4323.68 rows=6826 width=48)
         Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), c1
         Sort Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3871.91 rows=6826 width=48)
               Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT from_unixtime(1447430881), from_unixtime((`id` + 1447430881), '%Y %D %M %h:%i:%s %x'), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.from_unixtime(1447430881::bigint), public.from_unixtime((id + 1447430881), '%Y %D %M %h:%i:%s %x'::text), c1 FROM public.time_tbl1mysql
(15 rows)

-- select from_unixtime with group by index having (explain)
--Testcase 3245:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x'), c1 FROM time_tbl GROUP BY 1,2,3 HAVING from_unixtime(1447430881) = '2015-11-13 08:08:01' ORDER BY 1,2,3;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5732.96..5733.05 rows=34 width=48)
   Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), c1
   Sort Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), time_tbl.c1
   ->  HashAggregate  (cost=3923.11..5732.10 rows=34 width=48)
         Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), c1
         Group Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), time_tbl.c1
         Filter: ((from_unixtime('1447430881'::bigint)) = '2015-11-13 08:08:01'::timestamp without time zone)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..3871.91 rows=6826 width=48)
               Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text)), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT from_unixtime(1447430881), from_unixtime((`id` + 1447430881), '%Y %D %M %h:%i:%s %x'), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.from_unixtime(1447430881::bigint), public.from_unixtime((id + 1447430881), '%Y %D %M %h:%i:%s %x'::text), c1 FROM public.time_tbl1mysql
(16 rows)

-- select from_unixtime with group by index having (result)
--Testcase 3246:
SELECT from_unixtime(1447430881), from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x'), c1 FROM time_tbl GROUP BY 1,2,3 HAVING from_unixtime(1447430881) = '2015-11-13 08:08:01' ORDER BY 1,2,3;
    from_unixtime    |          from_unixtime           |    c1    
---------------------+----------------------------------+----------
 2015-11-13 08:08:01 | 2015 13th November 08:08:01 2015 | 12:10:30
 2015-11-13 08:08:01 | 2015 13th November 08:08:02 2015 | 23:12:13
 2015-11-13 08:08:01 | 2015 13th November 08:08:03 2015 | 11:12:12
 2015-11-13 08:08:01 | 2015 13th November 08:08:04 2015 | 16:00:00
 2015-11-13 08:08:01 | 2015 13th November 08:08:05 2015 | 00:59:59
(5 rows)

-- select from_unixtime and as
--Testcase 3247:
EXPLAIN VERBOSE
SELECT from_unixtime(1447430881) as from_unixtime1, from_unixtime(id + 1447430881, '%Y %D %M %h:%i:%s %x') as from_unixtime2 FROM time_tbl ORDER BY 1,2;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4306.62..4323.68 rows=6826 width=40)
   Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   Sort Key: (from_unixtime('1447430881'::bigint)), (from_unixtime(((time_tbl.id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3871.91 rows=6826 width=40)
         Output: (from_unixtime('1447430881'::bigint)), (from_unixtime(((id + 1447430881))::bigint, '%Y %D %M %h:%i:%s %x'::text))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_unixtime(1447430881), from_unixtime((`id` + 1447430881), '%Y %D %M %h:%i:%s %x') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_unixtime(1447430881::bigint), public.from_unixtime((id + 1447430881), '%Y %D %M %h:%i:%s %x'::text) FROM public.time_tbl1mysql
(12 rows)

-- FROM_DAYS()
-- select from_days (stub function, explain)
--Testcase 3248:
EXPLAIN VERBOSE
SELECT from_days(id + 200719) FROM time_tbl ORDER BY 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=4)
   Output: (from_days((id + 200719)))
   Sort Key: (from_days((time_tbl.id + 200719)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=4)
         Output: (from_days((id + 200719)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_days((`id` + 200719)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_days((id + 200719)) FROM public.time_tbl1mysql
(12 rows)

-- select from_days (stub function, result)
--Testcase 3249:
SELECT from_days(id + 200719) FROM time_tbl ORDER BY 1;
 from_days  
------------
 0549-07-20
 0549-07-21
 0549-07-22
 0549-07-23
 0549-07-24
(5 rows)

-- select from_days (stub function, not pushdown constraints, explain)
--Testcase 3250:
EXPLAIN VERBOSE
SELECT from_days(id + 200719) FROM time_tbl WHERE to_hex(id) > '0' ORDER BY 1;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort  (cost=1115.01..1120.70 rows=2276 width=4)
   Output: (from_days((id + 200719)))
   Sort Key: (from_days((time_tbl.id + 200719)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..988.10 rows=2276 width=4)
         Output: (from_days((id + 200719)))
         Filter: (to_hex(time_tbl.id) > '0'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_days((`id` + 200719)), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_days((id + 200719)), id FROM public.time_tbl1mysql
(13 rows)

-- select from_days (stub function, not pushdown constraints, result)
--Testcase 3251:
SELECT from_days(id + 200719) FROM time_tbl WHERE to_hex(id) > '0' ORDER BY 1;
 from_days  
------------
 0549-07-21
 0549-07-22
 0549-07-23
 0549-07-24
(4 rows)

-- select from_days (stub function, pushdown constraints, explain)
--Testcase 3252:
EXPLAIN VERBOSE
SELECT from_days(id + 200719) FROM time_tbl WHERE id = 1 ORDER BY 1;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=315.45..315.54 rows=34 width=4)
   Output: (from_days((id + 200719)))
   Sort Key: (from_days((time_tbl.id + 200719)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..314.59 rows=34 width=4)
         Output: (from_days((id + 200719)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_days((`id` + 200719)) FROM `test`.`time_tbl2` WHERE ((`id` = 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_days((id + 200719)) FROM public.time_tbl1mysql WHERE ((id = 1))
(12 rows)

-- select from_days (stub function, pushdown constraints, result)
--Testcase 3253:
SELECT from_days(id + 200719) FROM time_tbl WHERE id = 1 ORDER BY 1;
 from_days  
------------
 0549-07-21
(1 row)

-- from_days in constrains (stub function, explain)
--Testcase 3254:
EXPLAIN VERBOSE
SELECT from_days(id + 200719) FROM time_tbl WHERE from_days(id + 200719) > from_days(day('2001-01-01'::date)) ORDER BY 1;
                                                                                                      QUERY PLAN                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6189.01..6194.70 rows=2276 width=4)
   Output: (from_days((id + 200719)))
   Sort Key: (from_days((time_tbl.id + 200719)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..6062.10 rows=2276 width=4)
         Output: (from_days((id + 200719)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_days((`id` + 200719)) FROM `test`.`time_tbl2` WHERE ((from_days((`id` + 200719)) > from_days(day('2001-01-01 00:00:00'))))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_days((id + 200719)) FROM public.time_tbl1mysql WHERE ((public.from_days((id + 200719)) > public.from_days(public.day('2001-01-01 00:00:00'::timestamp without time zone))))
(12 rows)

-- from_days in constrains (stub function, result)
--Testcase 3255:
SELECT from_days(id + 200719) FROM time_tbl WHERE from_days(id + 200719) > from_days(day('2001-01-01'::date)) ORDER BY 1;
 from_days  
------------
 0549-07-20
 0549-07-21
 0549-07-22
 0549-07-23
 0549-07-24
(5 rows)

-- select from_days and agg (pushdown, explain)
--Testcase 3256:
EXPLAIN VERBOSE
SELECT from_days(max(id) + 200719), sum(id) FROM time_tbl;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: from_days(((max(id)) + 200719)), (sum(id))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`id`), sum(`id`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(id), sum(id) FROM public.time_tbl1mysql
(11 rows)

-- select from_days and agg (pushdown, result)
--Testcase 3257:
SELECT from_days(max(id) + 200719), sum(id) FROM time_tbl;
ERROR:  stub from_days(integer) is called
CONTEXT:  PL/pgSQL function from_days(integer) line 3 at RAISE
-- select from_days and log2 (pushdown, explain)
--Testcase 3258:
EXPLAIN VERBOSE
SELECT from_days(id + 200719), log2(id) FROM time_tbl ORDER BY 1,2;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=4306.62..4323.68 rows=6826 width=12)
   Output: (from_days((id + 200719))), (log2((id)::double precision))
   Sort Key: (from_days((time_tbl.id + 200719))), (log2((time_tbl.id)::double precision))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3871.91 rows=6826 width=12)
         Output: (from_days((id + 200719))), (log2((id)::double precision))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_days((`id` + 200719)), log2(`id`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_days((id + 200719)), public.log2(id) FROM public.time_tbl1mysql
(12 rows)

-- select from_days and log2 (pushdown, result)
--Testcase 3259:
SELECT from_days(id + 200719), log2(id) FROM time_tbl ORDER BY 1,2;
 from_days  |       log2        
------------+-------------------
 0549-07-20 |                  
 0549-07-21 |                 0
 0549-07-22 |                 1
 0549-07-23 | 1.584962500721156
 0549-07-24 |                 2
(5 rows)

-- select from_days with non pushdown func and explicit constant (explain)
--Testcase 3260:
EXPLAIN VERBOSE
SELECT from_days(id + 200719), to_hex(id), 4 FROM time_tbl ORDER BY 1,2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort  (cost=2600.12..2617.18 rows=6826 width=40)
   Output: (from_days((id + 200719))), (to_hex(id)), 4
   Sort Key: (from_days((time_tbl.id + 200719))), (to_hex(time_tbl.id))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2165.41 rows=6826 width=40)
         Output: from_days((id + 200719)), to_hex(id), 4
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id FROM public.time_tbl1mysql
(12 rows)

-- select from_days with order by (explain)
--Testcase 3261:
EXPLAIN VERBOSE
SELECT from_days(id + 200719), c1 FROM time_tbl ORDER BY c1,from_days(id + 200719);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=12)
   Output: (from_days((id + 200719))), c1
   Sort Key: time_tbl.c1, (from_days((time_tbl.id + 200719)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
         Output: (from_days((id + 200719))), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_days((`id` + 200719)), `c1` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_days((id + 200719)), c1 FROM public.time_tbl1mysql
(12 rows)

-- select from_days with order by index (explain)
--Testcase 3262:
EXPLAIN VERBOSE
SELECT from_days(id + 200719), c1 FROM time_tbl ORDER BY 1,2;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=12)
   Output: (from_days((id + 200719))), c1
   Sort Key: (from_days((time_tbl.id + 200719))), time_tbl.c1
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
         Output: (from_days((id + 200719))), c1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_days((`id` + 200719)), `c1` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_days((id + 200719)), c1 FROM public.time_tbl1mysql
(12 rows)

-- from_days constraints with order by (explain)
--Testcase 3263:
EXPLAIN VERBOSE
SELECT from_days(id + 200719) FROM time_tbl WHERE from_days(id + 200719) > from_days(day('2001-01-01'::date)) ORDER BY from_days(id + 200719);
                                                                                                      QUERY PLAN                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6189.01..6194.70 rows=2276 width=4)
   Output: (from_days((id + 200719)))
   Sort Key: (from_days((time_tbl.id + 200719)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..6062.10 rows=2276 width=4)
         Output: (from_days((id + 200719)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_days((`id` + 200719)) FROM `test`.`time_tbl2` WHERE ((from_days((`id` + 200719)) > from_days(day('2001-01-01 00:00:00'))))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_days((id + 200719)) FROM public.time_tbl1mysql WHERE ((public.from_days((id + 200719)) > public.from_days(public.day('2001-01-01 00:00:00'::timestamp without time zone))))
(12 rows)

-- from_days constraints with order by (result)
--Testcase 3264:
SELECT from_days(id + 200719) FROM time_tbl WHERE from_days(id + 200719) > from_days(day('2001-01-01'::date)) ORDER BY from_days(id + 200719);
 from_days  
------------
 0549-07-20
 0549-07-21
 0549-07-22
 0549-07-23
 0549-07-24
(5 rows)

-- select from_days with group by (explain)
--Testcase 3265:
EXPLAIN VERBOSE
SELECT from_days(id + 200719), c1 FROM time_tbl GROUP BY c1,id ORDER BY 1,2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=272.54..272.54 rows=0 width=16)
   Output: (from_days((id + 200719))), c1, id
   Sort Key: (from_days((time_tbl.id + 200719))), time_tbl.c1
   ->  Foreign Scan  (cost=127.06..272.53 rows=0 width=16)
         Output: from_days((id + 200719)), c1, id
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (test.time_tbl__mysql_svr__0)
           Local server startup cost: 10
           Remote query: SELECT `c1`, `id` FROM `test`.`time_tbl2` GROUP BY 1, 2
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.time_tbl)
           Remote SQL: SELECT c1, id FROM public.time_tbl1mysql GROUP BY 1, 2
(16 rows)

-- select from_days with group by index (explain)
--Testcase 3266:
EXPLAIN VERBOSE
SELECT from_days(id + 200719), c1 FROM time_tbl GROUP BY 1,2 ORDER BY 1,2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort  (cost=2242.62..2243.12 rows=200 width=12)
   Output: (from_days((id + 200719))), c1
   Sort Key: (from_days((time_tbl.id + 200719))), time_tbl.c1
   ->  HashAggregate  (cost=2182.48..2234.98 rows=200 width=12)
         Output: (from_days((id + 200719))), c1
         Group Key: (from_days((time_tbl.id + 200719))), time_tbl.c1
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=12)
               Output: (from_days((id + 200719))), c1
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT from_days((`id` + 200719)), `c1` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.from_days((id + 200719)), c1 FROM public.time_tbl1mysql
(15 rows)

-- select from_days with group by having (explain)
--Testcase 3267:
EXPLAIN VERBOSE
SELECT from_days(id + 200719), c1 FROM time_tbl GROUP BY from_days(id + 200719),c1,id HAVING from_days(id + 200719) > '0549-07-21' ORDER BY 1,2;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=2271.49..2271.66 rows=67 width=16)
   Output: (from_days((id + 200719))), c1, id
   Sort Key: (from_days((time_tbl.id + 200719))), time_tbl.c1
   ->  HashAggregate  (cost=2199.54..2269.46 rows=67 width=16)
         Output: (from_days((id + 200719))), c1, id
         Group Key: (from_days((time_tbl.id + 200719))), time_tbl.c1, time_tbl.id
         Filter: ((from_days((time_tbl.id + 200719))) > '0549-07-21'::date)
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=16)
               Output: (from_days((id + 200719))), c1, id
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT from_days((`id` + 200719)), `c1`, `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.from_days((id + 200719)), c1, id FROM public.time_tbl1mysql
(16 rows)

-- select from_days with group by index having (result)
--Testcase 3268:
SELECT id, from_days(id + 200719), c1 FROM time_tbl GROUP BY 1,2,3 HAVING from_days(id + 200719) > '0549-07-21' ORDER BY 1,2;
 id | from_days  |    c1    
----+------------+----------
  2 | 0549-07-22 | 11:12:12
  3 | 0549-07-23 | 16:00:00
  4 | 0549-07-24 | 00:59:59
(3 rows)

-- select from_days and as
--Testcase 3269:
EXPLAIN VERBOSE
SELECT from_days(id + 200719) as from_days1 FROM time_tbl ORDER BY 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=4)
   Output: (from_days((id + 200719)))
   Sort Key: (from_days((time_tbl.id + 200719)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2148.35 rows=6826 width=4)
         Output: (from_days((id + 200719)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT from_days((`id` + 200719)) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.from_days((id + 200719)) FROM public.time_tbl1mysql
(12 rows)

-- EXTRACT()
-- select mysql_extract (stub function, explain)
--Testcase 3270:
EXPLAIN VERBOSE
SELECT mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl ORDER BY 1,2,3;
                                                                                                                     QUERY PLAN                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5996.05..6013.12 rows=6826 width=12)
   Output: (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3))
   Sort Key: (mysql_extract('YEAR'::text, (time_tbl.c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=12)
         Output: (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT extract(YEAR FROM `c2`), extract(MICROSECOND FROM '2021-01-03 12:10:30.123456'), extract(DAY_MINUTE FROM `c3`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_extract('YEAR'::text, c2), public.mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone), public.mysql_extract('DAY_MINUTE'::text, c3) FROM public.time_tbl1mysql
(12 rows)

-- select mysql_extract (stub function, result)
--Testcase 3271:
SELECT mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl ORDER BY 1,2,3;
 mysql_extract | mysql_extract | mysql_extract 
---------------+---------------+---------------
          2021 |        123456 |         31210
          2021 |        123456 |         42312
          2021 |        123456 |         51112
          2021 |        123456 |         61600
          2021 |        123456 |         70059
(5 rows)

-- select mysql_extract (stub function, not pushdown constraints, explain)
--Testcase 3272:
EXPLAIN VERBOSE
SELECT mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3;
                                                                                                                       QUERY PLAN                                                                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=417.18..417.26 rows=34 width=12)
   Output: (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3))
   Sort Key: (mysql_extract('YEAR'::text, (time_tbl.c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..416.31 rows=34 width=12)
         Output: (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT extract(YEAR FROM `c2`), extract(MICROSECOND FROM '2021-01-03 12:10:30.123456'), extract(DAY_MINUTE FROM `c3`), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_extract('YEAR'::text, c2), public.mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone), public.mysql_extract('DAY_MINUTE'::text, c3), id FROM public.time_tbl1mysql
(13 rows)

-- select mysql_extract (stub function, not pushdown constraints, result)
--Testcase 3273:
SELECT mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3;
 mysql_extract | mysql_extract | mysql_extract 
---------------+---------------+---------------
          2021 |        123456 |         42312
(1 row)

-- select mysql_extract (stub function, pushdown constraints, explain)
--Testcase 3274:
EXPLAIN VERBOSE
SELECT mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3;
                                                                                                                               QUERY PLAN                                                                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5984.44..6001.42 rows=6792 width=12)
   Output: (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3))
   Sort Key: (mysql_extract('YEAR'::text, (time_tbl.c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5552.14 rows=6792 width=12)
         Output: (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT extract(YEAR FROM `c2`), extract(MICROSECOND FROM '2021-01-03 12:10:30.123456'), extract(DAY_MINUTE FROM `c3`) FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_extract('YEAR'::text, c2), public.mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone), public.mysql_extract('DAY_MINUTE'::text, c3) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select mysql_extract (stub function, pushdown constraints, result)
--Testcase 3275:
SELECT mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3;
 mysql_extract | mysql_extract | mysql_extract 
---------------+---------------+---------------
          2021 |        123456 |         31210
          2021 |        123456 |         42312
          2021 |        123456 |         51112
          2021 |        123456 |         61600
          2021 |        123456 |         70059
(5 rows)

-- select mysql_extract (stub function, mysql_extract in constraints, explain)
--Testcase 3276:
EXPLAIN VERBOSE
SELECT mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl WHERE mysql_extract('YEAR_MONTH', c3 ) != mysql_extract('YEAR_MONTH', '2000-01-01'::timestamp) ORDER BY 1,2,3;
                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=9397.44..9414.42 rows=6792 width=12)
   Output: (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3))
   Sort Key: (mysql_extract('YEAR'::text, (time_tbl.c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..8965.15 rows=6792 width=12)
         Output: (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT extract(YEAR FROM `c2`), extract(MICROSECOND FROM '2021-01-03 12:10:30.123456'), extract(DAY_MINUTE FROM `c3`) FROM `test`.`time_tbl2` WHERE ((extract(YEAR_MONTH FROM `c3`) <> extract(YEAR_MONTH FROM '2000-01-01 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_extract('YEAR'::text, c2), public.mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone), public.mysql_extract('DAY_MINUTE'::text, c3) FROM public.time_tbl1mysql WHERE ((public.mysql_extract('YEAR_MONTH'::text, c3) <> public.mysql_extract('YEAR_MONTH'::text, '2000-01-01 00:00:00'::timestamp without time zone)))
(12 rows)

-- select mysql_extract (stub function, mysql_extract in constraints, result)
--Testcase 3277:
SELECT mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl WHERE mysql_extract('YEAR_MONTH', c3 ) != mysql_extract('YEAR_MONTH', '2000-01-01'::timestamp) ORDER BY 1,2,3;
 mysql_extract | mysql_extract | mysql_extract 
---------------+---------------+---------------
          2021 |        123456 |         31210
          2021 |        123456 |         42312
          2021 |        123456 |         51112
          2021 |        123456 |         61600
          2021 |        123456 |         70059
(5 rows)

-- select mysql_extract (stub function, mysql_extract in constraints, explain)
--Testcase 3278:
EXPLAIN VERBOSE
SELECT mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl WHERE mysql_extract('YEAR_MONTH', c3 ) > '1' ORDER BY 1,2,3;
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3896.95..3902.64 rows=2276 width=12)
   Output: (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3))
   Sort Key: (mysql_extract('YEAR'::text, (time_tbl.c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3770.03 rows=2276 width=12)
         Output: (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT extract(YEAR FROM `c2`), extract(MICROSECOND FROM '2021-01-03 12:10:30.123456'), extract(DAY_MINUTE FROM `c3`) FROM `test`.`time_tbl2` WHERE ((extract(YEAR_MONTH FROM `c3`) > 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_extract('YEAR'::text, c2), public.mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone), public.mysql_extract('DAY_MINUTE'::text, c3) FROM public.time_tbl1mysql WHERE ((public.mysql_extract('YEAR_MONTH'::text, c3) > 1))
(12 rows)

-- select mysql_extract (stub function, mysql_extract in constraints, result)
--Testcase 3279:
SELECT mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl WHERE mysql_extract('YEAR_MONTH', c3 ) > '1' ORDER BY 1,2,3;
 mysql_extract | mysql_extract | mysql_extract 
---------------+---------------+---------------
          2021 |        123456 |         31210
          2021 |        123456 |         42312
          2021 |        123456 |         51112
          2021 |        123456 |         61600
          2021 |        123456 |         70059
(5 rows)

-- select mysql_extract with agg (pushdown, explain)
--Testcase 3280:
EXPLAIN VERBOSE
SELECT max(c3), mysql_extract('YEAR', max(c3)) FROM time_tbl;
                         QUERY PLAN                          
-------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (max(c3)), mysql_extract('YEAR'::text, (max(c3)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c3`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c3) FROM public.time_tbl1mysql
(11 rows)

-- select mysql_extract as nest function with agg (pushdown, result)
--Testcase 3281:
SELECT max(c3), mysql_extract('YEAR', max(c3)) FROM time_tbl;
ERROR:  stub mysql_extract(text, timestamp) is called
CONTEXT:  PL/pgSQL function mysql_extract(text,timestamp without time zone) line 3 at RAISE
-- select mysql_extract with non pushdown func and explicit constant (explain)
--Testcase 3282:
EXPLAIN VERBOSE
SELECT mysql_extract('YEAR', date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=44)
   Output: (mysql_extract('YEAR'::text, date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
   Sort Key: (mysql_extract('YEAR'::text, date_sub(time_tbl.c3, '@ 1 day 12 hours 59 mins 10 secs'::interval)))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=44)
         Output: (mysql_extract('YEAR'::text, date_sub(c3, '@ 1 day 12 hours 59 mins 10 secs'::interval))), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT extract(YEAR FROM date_sub(`c3`, INTERVAL '1 12:59:10.0' DAY_MICROSECOND)), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.mysql_extract('YEAR'::text, public.date_sub(c3, '1 day 12:59:10'::interval)), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select mysql_extract with non pushdown func and explicit constant (result)
--Testcase 3283:
SELECT mysql_extract('YEAR', date_sub(c3, '1 12:59:10')), pi(), 4.1 FROM time_tbl ORDER BY 1;
 mysql_extract |        pi         | ?column? 
---------------+-------------------+----------
          2021 | 3.141592653589793 |      4.1
          2021 | 3.141592653589793 |      4.1
          2021 | 3.141592653589793 |      4.1
          2021 | 3.141592653589793 |      4.1
          2021 | 3.141592653589793 |      4.1
(5 rows)

-- select mysql_extract with order by (explain)
--Testcase 3284:
EXPLAIN VERBOSE
SELECT id, mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl order by id,mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3);
                                                                                                                       QUERY PLAN                                                                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5996.05..6013.12 rows=6826 width=16)
   Output: id, (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3))
   Sort Key: time_tbl.id, (mysql_extract('YEAR'::text, (time_tbl.c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, time_tbl.c3))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=16)
         Output: id, (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, extract(YEAR FROM `c2`), extract(MICROSECOND FROM '2021-01-03 12:10:30.123456'), extract(DAY_MINUTE FROM `c3`) FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.mysql_extract('YEAR'::text, c2), public.mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone), public.mysql_extract('DAY_MINUTE'::text, c3) FROM public.time_tbl1mysql
(12 rows)

-- select mysql_extract with order by (result)
--Testcase 3285:
SELECT id, mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl order by id,mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3);
 id | mysql_extract | mysql_extract | mysql_extract 
----+---------------+---------------+---------------
  0 |          2021 |        123456 |         31210
  1 |          2021 |        123456 |         42312
  2 |          2021 |        123456 |         51112
  3 |          2021 |        123456 |         61600
  4 |          2021 |        123456 |         70059
(5 rows)

-- select mysql_extract with order by index (result)
--Testcase 3286:
SELECT id, mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl order by 4,3,2,1;
 id | mysql_extract | mysql_extract | mysql_extract 
----+---------------+---------------+---------------
  0 |          2021 |        123456 |         31210
  1 |          2021 |        123456 |         42312
  2 |          2021 |        123456 |         51112
  3 |          2021 |        123456 |         61600
  4 |          2021 |        123456 |         70059
(5 rows)

-- select mysql_extract with order by index (result)
--Testcase 3287:
SELECT id, mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl order by 1,2,3,4;
 id | mysql_extract | mysql_extract | mysql_extract 
----+---------------+---------------+---------------
  0 |          2021 |        123456 |         31210
  1 |          2021 |        123456 |         42312
  2 |          2021 |        123456 |         51112
  3 |          2021 |        123456 |         61600
  4 |          2021 |        123456 |         70059
(5 rows)

-- select mysql_extract with group by (explain)
--Testcase 3288:
EXPLAIN VERBOSE
SELECT max(c3), mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl group by mysql_extract('DAY_MINUTE', c3),c2 ORDER BY 1,2,3,4;
                                                                                                                          QUERY PLAN                                                                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2342.62..2343.12 rows=200 width=24)
   Output: (max(c3)), (mysql_extract('YEAR'::text, (c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, c3)), c2
   Sort Key: (max(time_tbl.c3)), (mysql_extract('YEAR'::text, (time_tbl.c2)::timestamp without time zone)), (mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone)), (mysql_extract('DAY_MINUTE'::text, time_tbl.c3))
   ->  HashAggregate  (cost=2182.47..2334.97 rows=200 width=24)
         Output: max(c3), mysql_extract('YEAR'::text, (c2)::timestamp without time zone), mysql_extract('MICROSECOND'::text, '2021-01-03 12:10:30.123456'::timestamp without time zone), (mysql_extract('DAY_MINUTE'::text, c3)), c2
         Group Key: (mysql_extract('DAY_MINUTE'::text, time_tbl.c3)), time_tbl.c2
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=16)
               Output: (mysql_extract('DAY_MINUTE'::text, c3)), c2, c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT extract(DAY_MINUTE FROM `c3`), `c2`, `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.mysql_extract('DAY_MINUTE'::text, c3), c2, c3 FROM public.time_tbl1mysql
(15 rows)

-- select mysql_extract with group by (result)
--Testcase 3289:
SELECT max(c3), mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl group by mysql_extract('DAY_MINUTE', c3),c2 ORDER BY 1,2,3,4;
ERROR:  stub mysql_extract(text, timestamp) is called
CONTEXT:  PL/pgSQL function mysql_extract(text,timestamp without time zone) line 3 at RAISE
-- select mysql_extract with group by index (result)
--Testcase 3290:
SELECT id, mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl group by 4,3,2,1 ORDER BY 1,2,3,4;
 id | mysql_extract | mysql_extract | mysql_extract 
----+---------------+---------------+---------------
  0 |          2021 |        123456 |         31210
  1 |          2021 |        123456 |         42312
  2 |          2021 |        123456 |         51112
  3 |          2021 |        123456 |         61600
  4 |          2021 |        123456 |         70059
(5 rows)

-- select mysql_extract with group by index (result)
--Testcase 3291:
SELECT id, mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3) FROM time_tbl group by 1,2,3,4 ORDER BY 1,2,3,4;
 id | mysql_extract | mysql_extract | mysql_extract 
----+---------------+---------------+---------------
  0 |          2021 |        123456 |         31210
  1 |          2021 |        123456 |         42312
  2 |          2021 |        123456 |         51112
  3 |          2021 |        123456 |         61600
  4 |          2021 |        123456 |         70059
(5 rows)

-- select mysql_extract with group by index having (result)
--Testcase 3292:
SELECT id, mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3), c2 FROM time_tbl group by 5, 4, 3, 2, 1 HAVING mysql_extract('YEAR', c2) > 2000 ORDER BY 1,2,3,4,5;
 id | mysql_extract | mysql_extract | mysql_extract |     c2     
----+---------------+---------------+---------------+------------
  0 |          2021 |        123456 |         31210 | 2021-01-02
  1 |          2021 |        123456 |         42312 | 2021-01-01
  2 |          2021 |        123456 |         51112 | 2021-01-10
  3 |          2021 |        123456 |         61600 | 2021-01-15
  4 |          2021 |        123456 |         70059 | 2021-01-29
(5 rows)

-- select mysql_extract with group by index having (result)
--Testcase 3293:
SELECT id, mysql_extract('YEAR', c2), mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp), mysql_extract('DAY_MINUTE', c3), c2 FROM time_tbl group by 1, 2, 3, 4, 5 HAVING mysql_extract('YEAR', c2) > 2000 ORDER BY 1,2,3,4,5;
 id | mysql_extract | mysql_extract | mysql_extract |     c2     
----+---------------+---------------+---------------+------------
  0 |          2021 |        123456 |         31210 | 2021-01-02
  1 |          2021 |        123456 |         42312 | 2021-01-01
  2 |          2021 |        123456 |         51112 | 2021-01-10
  3 |          2021 |        123456 |         61600 | 2021-01-15
  4 |          2021 |        123456 |         70059 | 2021-01-29
(5 rows)

-- select mysql_extract and as
--Testcase 3294:
SELECT mysql_extract('YEAR', c2) as mysql_extract1, mysql_extract('MICROSECOND', '2021-01-03 12:10:30.123456'::timestamp) as mysql_extract2, mysql_extract('DAY_MINUTE', c3) as mysql_extract3 FROM time_tbl ORDER BY 1,2,3;
 mysql_extract1 | mysql_extract2 | mysql_extract3 
----------------+----------------+----------------
           2021 |         123456 |          31210
           2021 |         123456 |          42312
           2021 |         123456 |          51112
           2021 |         123456 |          61600
           2021 |         123456 |          70059
(5 rows)

-- DAYOFYEAR()
-- select dayofyear (stub function, explain)
--Testcase 3295:
EXPLAIN VERBOSE
SELECT dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl ORDER BY 1,2;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=8)
   Output: (dayofyear(c2)), (dayofyear('2021-01-01'::date))
   Sort Key: (dayofyear(time_tbl.c2)), (dayofyear('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (dayofyear(c2)), (dayofyear('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofyear(`c2`), dayofyear('2021-01-01') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofyear(c2), public.dayofyear('2021-01-01'::date) FROM public.time_tbl1mysql
(12 rows)

-- select dayofyear (stub function, result)
--Testcase 3296:
SELECT dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl ORDER BY 1,2;
 dayofyear | dayofyear 
-----------+-----------
         1 |         1
         2 |         1
        10 |         1
        15 |         1
        29 |         1
(5 rows)

-- select dayofyear (stub function, not pushdown constraints, explain)
--Testcase 3297:
EXPLAIN VERBOSE
SELECT dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=408.59..408.68 rows=34 width=8)
   Output: (dayofyear(c2)), (dayofyear('2021-01-01'::date))
   Sort Key: (dayofyear(time_tbl.c2)), (dayofyear('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..407.73 rows=34 width=8)
         Output: (dayofyear(c2)), (dayofyear('2021-01-01'::date))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofyear(`c2`), dayofyear('2021-01-01'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofyear(c2), public.dayofyear('2021-01-01'::date), id FROM public.time_tbl1mysql
(13 rows)

-- select dayofyear (stub function, not pushdown constraints, result)
--Testcase 3298:
SELECT dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
 dayofyear | dayofyear 
-----------+-----------
         1 |         1
(1 row)

-- select dayofyear (stub function, pushdown constraints, explain)
--Testcase 3299:
EXPLAIN VERBOSE
SELECT dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4269.46..4286.44 rows=6792 width=8)
   Output: (dayofyear(c2)), (dayofyear('2021-01-01'::date))
   Sort Key: (dayofyear(time_tbl.c2)), (dayofyear('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.16 rows=6792 width=8)
         Output: (dayofyear(c2)), (dayofyear('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofyear(`c2`), dayofyear('2021-01-01') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofyear(c2), public.dayofyear('2021-01-01'::date) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select dayofyear (stub function, pushdown constraints, result)
--Testcase 3300:
SELECT dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
 dayofyear | dayofyear 
-----------+-----------
         1 |         1
         2 |         1
        10 |         1
        15 |         1
        29 |         1
(5 rows)

-- select dayofyear (stub function, dayofyear in constraints, explain)
--Testcase 3301:
EXPLAIN VERBOSE
SELECT dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl WHERE dayofyear(c2) != dayofyear('2000-01-01'::date) ORDER BY 1,2;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7682.46..7699.44 rows=6792 width=8)
   Output: (dayofyear(c2)), (dayofyear('2021-01-01'::date))
   Sort Key: (dayofyear(time_tbl.c2)), (dayofyear('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7250.16 rows=6792 width=8)
         Output: (dayofyear(c2)), (dayofyear('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofyear(`c2`), dayofyear('2021-01-01') FROM `test`.`time_tbl2` WHERE ((dayofyear(`c2`) <> dayofyear('2000-01-01')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofyear(c2), public.dayofyear('2021-01-01'::date) FROM public.time_tbl1mysql WHERE ((public.dayofyear(c2) <> public.dayofyear('2000-01-01'::date)))
(12 rows)

-- select dayofyear (stub function, dayofyear in constraints, result)
--Testcase 3302:
SELECT dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl WHERE dayofyear(c2) != dayofyear('2000-01-01'::date) ORDER BY 1,2;
 dayofyear | dayofyear 
-----------+-----------
         2 |         1
        10 |         1
        15 |         1
        29 |         1
(4 rows)

-- select dayofyear (stub function, dayofyear in constraints, explain)
--Testcase 3303:
EXPLAIN VERBOSE
SELECT dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl WHERE dayofyear('2021-01-01 12:00:00'::date) > 0 ORDER BY 1,2;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3322.26..3327.95 rows=2276 width=8)
   Output: (dayofyear(c2)), (dayofyear('2021-01-01'::date))
   Sort Key: (dayofyear(time_tbl.c2)), (dayofyear('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3195.35 rows=2276 width=8)
         Output: (dayofyear(c2)), (dayofyear('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofyear(`c2`), dayofyear('2021-01-01') FROM `test`.`time_tbl2` WHERE ((dayofyear('2021-01-01') > 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofyear(c2), public.dayofyear('2021-01-01'::date) FROM public.time_tbl1mysql WHERE ((public.dayofyear('2021-01-01'::date) > 0))
(12 rows)

-- select dayofyear (stub function, dayofyear in constraints, result)
--Testcase 3304:
SELECT dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl WHERE dayofyear('2021-01-01 12:00:00'::date) > 0 ORDER BY 1,2;
 dayofyear | dayofyear 
-----------+-----------
         1 |         1
         2 |         1
        10 |         1
        15 |         1
        29 |         1
(5 rows)

-- select dayofyear with agg (pushdown, explain)
--Testcase 3305:
EXPLAIN VERBOSE
SELECT max(c2), dayofyear(max(c2)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=8)
   Output: (max(c2)), dayofyear((max(c2)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c2`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c2) FROM public.time_tbl1mysql
(11 rows)

-- select dayofyear as nest function with agg (pushdown, result)
--Testcase 3306:
SELECT max(c2), dayofyear(max(c2)) FROM time_tbl;
ERROR:  stub dayofyear(date) is called
CONTEXT:  PL/pgSQL function dayofyear(date) line 3 at RAISE
-- select dayofyear with non pushdown func and explicit constant (explain)
--Testcase 3307:
EXPLAIN VERBOSE
SELECT dayofyear(c2), dayofyear('2021-01-01'::date), pi(), 4.1 FROM time_tbl ORDER BY 1,2;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=48)
   Output: (dayofyear(c2)), (dayofyear('2021-01-01'::date)), '3.141592653589793'::double precision, 4.1
   Sort Key: (dayofyear(time_tbl.c2)), (dayofyear('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=48)
         Output: (dayofyear(c2)), (dayofyear('2021-01-01'::date)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofyear(`c2`), dayofyear('2021-01-01'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofyear(c2), public.dayofyear('2021-01-01'::date), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select dayofyear with non pushdown func and explicit constant (result)
--Testcase 3308:
SELECT dayofyear(c2), dayofyear('2021-01-01'::date), pi(), 4.1 FROM time_tbl ORDER BY 1,2;
 dayofyear | dayofyear |        pi         | ?column? 
-----------+-----------+-------------------+----------
         1 |         1 | 3.141592653589793 |      4.1
         2 |         1 | 3.141592653589793 |      4.1
        10 |         1 | 3.141592653589793 |      4.1
        15 |         1 | 3.141592653589793 |      4.1
        29 |         1 | 3.141592653589793 |      4.1
(5 rows)

-- select dayofyear with order by (explain)
--Testcase 3309:
EXPLAIN VERBOSE
SELECT id, dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl order by id,dayofyear(c2), dayofyear('2021-01-01'::date);
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=12)
   Output: id, (dayofyear(c2)), (dayofyear('2021-01-01'::date))
   Sort Key: time_tbl.id, (dayofyear(time_tbl.c2)), (dayofyear('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=12)
         Output: id, (dayofyear(c2)), (dayofyear('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, dayofyear(`c2`), dayofyear('2021-01-01') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.dayofyear(c2), public.dayofyear('2021-01-01'::date) FROM public.time_tbl1mysql
(12 rows)

-- select dayofyear with order by (result)
--Testcase 3310:
SELECT id, dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl order by id,dayofyear(c2), dayofyear('2021-01-01'::date);
 id | dayofyear | dayofyear 
----+-----------+-----------
  0 |         2 |         1
  1 |         1 |         1
  2 |        10 |         1
  3 |        15 |         1
  4 |        29 |         1
(5 rows)

-- select dayofyear with order by index (result)
--Testcase 3311:
SELECT id, dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl order by 3,2,1;
 id | dayofyear | dayofyear 
----+-----------+-----------
  1 |         1 |         1
  0 |         2 |         1
  2 |        10 |         1
  3 |        15 |         1
  4 |        29 |         1
(5 rows)

-- select dayofyear with order by index (result)
--Testcase 3312:
SELECT id, dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl order by 1,2,3;
 id | dayofyear | dayofyear 
----+-----------+-----------
  0 |         2 |         1
  1 |         1 |         1
  2 |        10 |         1
  3 |        15 |         1
  4 |        29 |         1
(5 rows)

-- select dayofyear with group by (explain)
--Testcase 3313:
EXPLAIN VERBOSE
SELECT max(c3), dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl group by dayofyear(c2) ORDER BY 1,2,3;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=2275.05..2275.55 rows=200 width=16)
   Output: (max(c3)), (dayofyear(c2)), (dayofyear('2021-01-01'::date))
   Sort Key: (max(time_tbl.c3)), (dayofyear(time_tbl.c2)), (dayofyear('2021-01-01'::date))
   ->  HashAggregate  (cost=2165.41..2267.41 rows=200 width=16)
         Output: max(c3), (dayofyear(c2)), dayofyear('2021-01-01'::date)
         Group Key: (dayofyear(time_tbl.c2))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (dayofyear(c2)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT dayofyear(`c2`), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.dayofyear(c2), c3 FROM public.time_tbl1mysql
(15 rows)

-- select dayofyear with group by (result)
--Testcase 3314:
SELECT max(c3), dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl group by dayofyear(c2) ORDER BY 1,2,3;
ERROR:  stub dayofyear(date) is called
CONTEXT:  PL/pgSQL function dayofyear(date) line 3 at RAISE
-- select dayofyear with group by index (result)
--Testcase 3315:
SELECT id, dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl group by 3,2,1 ORDER BY 1,2,3;
 id | dayofyear | dayofyear 
----+-----------+-----------
  0 |         2 |         1
  1 |         1 |         1
  2 |        10 |         1
  3 |        15 |         1
  4 |        29 |         1
(5 rows)

-- select dayofyear with group by index (result)
--Testcase 3316:
SELECT id, dayofyear(c2), dayofyear('2021-01-01'::date) FROM time_tbl group by 1,2,3 ORDER BY 1,2,3;
 id | dayofyear | dayofyear 
----+-----------+-----------
  0 |         2 |         1
  1 |         1 |         1
  2 |        10 |         1
  3 |        15 |         1
  4 |        29 |         1
(5 rows)

-- select dayofyear with group by index having (result)
--Testcase 3317:
SELECT id, dayofyear(c2), dayofyear('2021-01-01'::date), c2 FROM time_tbl group by 4, 3, 2, 1 HAVING dayofyear(c2) > 0 ORDER BY 1,2,3;
 id | dayofyear | dayofyear |     c2     
----+-----------+-----------+------------
  0 |         2 |         1 | 2021-01-02
  1 |         1 |         1 | 2021-01-01
  2 |        10 |         1 | 2021-01-10
  3 |        15 |         1 | 2021-01-15
  4 |        29 |         1 | 2021-01-29
(5 rows)

-- select dayofyear with group by index having (result)
--Testcase 3318:
SELECT id, dayofyear(c2), dayofyear('2021-01-01'::date), c2 FROM time_tbl group by 1, 2, 3, 4 HAVING dayofyear(c2) > 0 ORDER BY 1,2,3;
 id | dayofyear | dayofyear |     c2     
----+-----------+-----------+------------
  0 |         2 |         1 | 2021-01-02
  1 |         1 |         1 | 2021-01-01
  2 |        10 |         1 | 2021-01-10
  3 |        15 |         1 | 2021-01-15
  4 |        29 |         1 | 2021-01-29
(5 rows)

-- select dayofyear and as
--Testcase 3319:
SELECT dayofyear(c2) as dayofyear1, dayofyear('2021-01-01'::date) as dayofyear2 FROM time_tbl ORDER BY 1,2;
 dayofyear1 | dayofyear2 
------------+------------
          1 |          1
          2 |          1
         10 |          1
         15 |          1
         29 |          1
(5 rows)

-- DAYOFWEEK()
-- select dayofweek (stub function, explain)
--Testcase 3320:
EXPLAIN VERBOSE
SELECT dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl ORDER BY 1,2;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=8)
   Output: (dayofweek(c2)), (dayofweek('2021-01-01'::date))
   Sort Key: (dayofweek(time_tbl.c2)), (dayofweek('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (dayofweek(c2)), (dayofweek('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofweek(`c2`), dayofweek('2021-01-01') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofweek(c2), public.dayofweek('2021-01-01'::date) FROM public.time_tbl1mysql
(12 rows)

-- select dayofweek (stub function, result)
--Testcase 3321:
SELECT dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl ORDER BY 1,2;
 dayofweek | dayofweek 
-----------+-----------
         1 |         6
         6 |         6
         6 |         6
         6 |         6
         7 |         6
(5 rows)

-- select dayofweek (stub function, not pushdown constraints, explain)
--Testcase 3322:
EXPLAIN VERBOSE
SELECT dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=408.59..408.68 rows=34 width=8)
   Output: (dayofweek(c2)), (dayofweek('2021-01-01'::date))
   Sort Key: (dayofweek(time_tbl.c2)), (dayofweek('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..407.73 rows=34 width=8)
         Output: (dayofweek(c2)), (dayofweek('2021-01-01'::date))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofweek(`c2`), dayofweek('2021-01-01'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofweek(c2), public.dayofweek('2021-01-01'::date), id FROM public.time_tbl1mysql
(13 rows)

-- select dayofweek (stub function, not pushdown constraints, result)
--Testcase 3323:
SELECT dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
 dayofweek | dayofweek 
-----------+-----------
         6 |         6
(1 row)

-- select dayofweek (stub function, pushdown constraints, explain)
--Testcase 3324:
EXPLAIN VERBOSE
SELECT dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4269.46..4286.44 rows=6792 width=8)
   Output: (dayofweek(c2)), (dayofweek('2021-01-01'::date))
   Sort Key: (dayofweek(time_tbl.c2)), (dayofweek('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.16 rows=6792 width=8)
         Output: (dayofweek(c2)), (dayofweek('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofweek(`c2`), dayofweek('2021-01-01') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofweek(c2), public.dayofweek('2021-01-01'::date) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select dayofweek (stub function, pushdown constraints, result)
--Testcase 3325:
SELECT dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
 dayofweek | dayofweek 
-----------+-----------
         1 |         6
         6 |         6
         6 |         6
         6 |         6
         7 |         6
(5 rows)

-- select dayofweek (stub function, dayofweek in constraints, explain)
--Testcase 3326:
EXPLAIN VERBOSE
SELECT dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl WHERE dayofweek(c2) != dayofweek('2000-01-01'::date) ORDER BY 1,2;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7682.46..7699.44 rows=6792 width=8)
   Output: (dayofweek(c2)), (dayofweek('2021-01-01'::date))
   Sort Key: (dayofweek(time_tbl.c2)), (dayofweek('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7250.16 rows=6792 width=8)
         Output: (dayofweek(c2)), (dayofweek('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofweek(`c2`), dayofweek('2021-01-01') FROM `test`.`time_tbl2` WHERE ((dayofweek(`c2`) <> dayofweek('2000-01-01')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofweek(c2), public.dayofweek('2021-01-01'::date) FROM public.time_tbl1mysql WHERE ((public.dayofweek(c2) <> public.dayofweek('2000-01-01'::date)))
(12 rows)

-- select dayofweek (stub function, dayofweek in constraints, result)
--Testcase 3327:
SELECT dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl WHERE dayofweek(c2) != dayofweek('2000-01-01'::date) ORDER BY 1,2;
 dayofweek | dayofweek 
-----------+-----------
         1 |         6
         6 |         6
         6 |         6
         6 |         6
(4 rows)

-- select dayofweek (stub function, dayofweek in constraints, explain)
--Testcase 3328:
EXPLAIN VERBOSE
SELECT dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl WHERE dayofweek('2021-01-01 12:00:00'::date) > 0 ORDER BY 1,2;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3322.26..3327.95 rows=2276 width=8)
   Output: (dayofweek(c2)), (dayofweek('2021-01-01'::date))
   Sort Key: (dayofweek(time_tbl.c2)), (dayofweek('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3195.35 rows=2276 width=8)
         Output: (dayofweek(c2)), (dayofweek('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofweek(`c2`), dayofweek('2021-01-01') FROM `test`.`time_tbl2` WHERE ((dayofweek('2021-01-01') > 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofweek(c2), public.dayofweek('2021-01-01'::date) FROM public.time_tbl1mysql WHERE ((public.dayofweek('2021-01-01'::date) > 0))
(12 rows)

-- select dayofweek (stub function, dayofweek in constraints, result)
--Testcase 3329:
SELECT dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl WHERE dayofweek('2021-01-01 12:00:00'::date) > 0 ORDER BY 1,2;
 dayofweek | dayofweek 
-----------+-----------
         1 |         6
         6 |         6
         6 |         6
         6 |         6
         7 |         6
(5 rows)

-- select dayofweek with agg (pushdown, explain)
--Testcase 3330:
EXPLAIN VERBOSE
SELECT max(c2), dayofweek(max(c2)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=8)
   Output: (max(c2)), dayofweek((max(c2)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c2`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c2) FROM public.time_tbl1mysql
(11 rows)

-- select dayofweek as nest function with agg (pushdown, result)
--Testcase 3331:
SELECT max(c2), dayofweek(max(c2)) FROM time_tbl;
ERROR:  stub dayofweek(date) is called
CONTEXT:  PL/pgSQL function dayofweek(date) line 3 at RAISE
-- select dayofweek with non pushdown func and explicit constant (explain)
--Testcase 3332:
EXPLAIN VERBOSE
SELECT dayofweek(c2), dayofweek('2021-01-01'::date), pi(), 4.1 FROM time_tbl ORDER BY 1,2;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=48)
   Output: (dayofweek(c2)), (dayofweek('2021-01-01'::date)), '3.141592653589793'::double precision, 4.1
   Sort Key: (dayofweek(time_tbl.c2)), (dayofweek('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=48)
         Output: (dayofweek(c2)), (dayofweek('2021-01-01'::date)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofweek(`c2`), dayofweek('2021-01-01'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofweek(c2), public.dayofweek('2021-01-01'::date), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select dayofweek with non pushdown func and explicit constant (result)
--Testcase 3333:
SELECT dayofweek(c2), dayofweek('2021-01-01'::date), pi(), 4.1 FROM time_tbl ORDER BY 1,2;
 dayofweek | dayofweek |        pi         | ?column? 
-----------+-----------+-------------------+----------
         1 |         6 | 3.141592653589793 |      4.1
         6 |         6 | 3.141592653589793 |      4.1
         6 |         6 | 3.141592653589793 |      4.1
         6 |         6 | 3.141592653589793 |      4.1
         7 |         6 | 3.141592653589793 |      4.1
(5 rows)

-- select dayofweek with order by (explain)
--Testcase 3334:
EXPLAIN VERBOSE
SELECT id, dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl order by id,dayofweek(c2), dayofweek('2021-01-01'::date);
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=12)
   Output: id, (dayofweek(c2)), (dayofweek('2021-01-01'::date))
   Sort Key: time_tbl.id, (dayofweek(time_tbl.c2)), (dayofweek('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=12)
         Output: id, (dayofweek(c2)), (dayofweek('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, dayofweek(`c2`), dayofweek('2021-01-01') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.dayofweek(c2), public.dayofweek('2021-01-01'::date) FROM public.time_tbl1mysql
(12 rows)

-- select dayofweek with order by (result)
--Testcase 3335:
SELECT id, dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl order by id,dayofweek(c2), dayofweek('2021-01-01'::date);
 id | dayofweek | dayofweek 
----+-----------+-----------
  0 |         7 |         6
  1 |         6 |         6
  2 |         1 |         6
  3 |         6 |         6
  4 |         6 |         6
(5 rows)

-- select dayofweek with order by index (result)
--Testcase 3336:
SELECT id, dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl order by 3,2,1;
 id | dayofweek | dayofweek 
----+-----------+-----------
  2 |         1 |         6
  1 |         6 |         6
  3 |         6 |         6
  4 |         6 |         6
  0 |         7 |         6
(5 rows)

-- select dayofweek with order by index (result)
--Testcase 3337:
SELECT id, dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl order by 1,2,3;
 id | dayofweek | dayofweek 
----+-----------+-----------
  0 |         7 |         6
  1 |         6 |         6
  2 |         1 |         6
  3 |         6 |         6
  4 |         6 |         6
(5 rows)

-- select dayofweek with group by (explain)
--Testcase 3338:
EXPLAIN VERBOSE
SELECT max(c3), dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl group by dayofweek(c2) ORDER BY 1,2,3;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=2275.05..2275.55 rows=200 width=16)
   Output: (max(c3)), (dayofweek(c2)), (dayofweek('2021-01-01'::date))
   Sort Key: (max(time_tbl.c3)), (dayofweek(time_tbl.c2)), (dayofweek('2021-01-01'::date))
   ->  HashAggregate  (cost=2165.41..2267.41 rows=200 width=16)
         Output: max(c3), (dayofweek(c2)), dayofweek('2021-01-01'::date)
         Group Key: (dayofweek(time_tbl.c2))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (dayofweek(c2)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT dayofweek(`c2`), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.dayofweek(c2), c3 FROM public.time_tbl1mysql
(15 rows)

-- select dayofweek with group by (result)
--Testcase 3339:
SELECT max(c3), dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl group by dayofweek(c2) ORDER BY 1,2,3;
ERROR:  stub dayofweek(date) is called
CONTEXT:  PL/pgSQL function dayofweek(date) line 3 at RAISE
-- select dayofweek with group by index (result)
--Testcase 3340:
SELECT id, dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl group by 3,2,1 ORDER BY 1,2,3;
 id | dayofweek | dayofweek 
----+-----------+-----------
  0 |         7 |         6
  1 |         6 |         6
  2 |         1 |         6
  3 |         6 |         6
  4 |         6 |         6
(5 rows)

-- select dayofweek with group by index (result)
--Testcase 3341:
SELECT id, dayofweek(c2), dayofweek('2021-01-01'::date) FROM time_tbl group by 1,2,3 ORDER BY 1,2,3;
 id | dayofweek | dayofweek 
----+-----------+-----------
  0 |         7 |         6
  1 |         6 |         6
  2 |         1 |         6
  3 |         6 |         6
  4 |         6 |         6
(5 rows)

-- select dayofweek with group by index having (result)
--Testcase 3342:
SELECT id, dayofweek(c2), dayofweek('2021-01-01'::date), c2 FROM time_tbl group by 4, 3, 2, 1 HAVING dayofweek(c2) > 0 ORDER BY 1,2,3,4;
 id | dayofweek | dayofweek |     c2     
----+-----------+-----------+------------
  0 |         7 |         6 | 2021-01-02
  1 |         6 |         6 | 2021-01-01
  2 |         1 |         6 | 2021-01-10
  3 |         6 |         6 | 2021-01-15
  4 |         6 |         6 | 2021-01-29
(5 rows)

-- select dayofweek with group by index having (result)
--Testcase 3343:
SELECT id, dayofweek(c2), dayofweek('2021-01-01'::date), c2 FROM time_tbl group by 1, 2, 3, 4 HAVING dayofweek(c2) > 0 ORDER BY 1,2,3,4;
 id | dayofweek | dayofweek |     c2     
----+-----------+-----------+------------
  0 |         7 |         6 | 2021-01-02
  1 |         6 |         6 | 2021-01-01
  2 |         1 |         6 | 2021-01-10
  3 |         6 |         6 | 2021-01-15
  4 |         6 |         6 | 2021-01-29
(5 rows)

-- select dayofweek and as
--Testcase 3344:
SELECT dayofweek(c2) as dayofweek1, dayofweek('2021-01-01'::date) as dayofweek2 FROM time_tbl ORDER BY 1,2;
 dayofweek1 | dayofweek2 
------------+------------
          1 |          6
          6 |          6
          6 |          6
          6 |          6
          7 |          6
(5 rows)

-- DAYOFMONTH()
-- select dayofmonth (stub function, explain)
--Testcase 3345:
EXPLAIN VERBOSE
SELECT dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl ORDER BY 1,2;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=8)
   Output: (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
   Sort Key: (dayofmonth(time_tbl.c2)), (dayofmonth('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofmonth(`c2`), dayofmonth('2021-01-01') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofmonth(c2), public.dayofmonth('2021-01-01'::date) FROM public.time_tbl1mysql
(12 rows)

-- select dayofmonth (stub function, result)
--Testcase 3346:
SELECT dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl ORDER BY 1,2;
 dayofmonth | dayofmonth 
------------+------------
          1 |          1
          2 |          1
         10 |          1
         15 |          1
         29 |          1
(5 rows)

-- select dayofmonth (stub function, not pushdown constraints, explain)
--Testcase 3347:
EXPLAIN VERBOSE
SELECT dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=408.59..408.68 rows=34 width=8)
   Output: (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
   Sort Key: (dayofmonth(time_tbl.c2)), (dayofmonth('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..407.73 rows=34 width=8)
         Output: (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofmonth(`c2`), dayofmonth('2021-01-01'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofmonth(c2), public.dayofmonth('2021-01-01'::date), id FROM public.time_tbl1mysql
(13 rows)

-- select dayofmonth (stub function, not pushdown constraints, result)
--Testcase 3348:
SELECT dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
 dayofmonth | dayofmonth 
------------+------------
          1 |          1
(1 row)

-- select dayofmonth (stub function, pushdown constraints, explain)
--Testcase 3349:
EXPLAIN VERBOSE
SELECT dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4269.46..4286.44 rows=6792 width=8)
   Output: (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
   Sort Key: (dayofmonth(time_tbl.c2)), (dayofmonth('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.16 rows=6792 width=8)
         Output: (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofmonth(`c2`), dayofmonth('2021-01-01') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofmonth(c2), public.dayofmonth('2021-01-01'::date) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select dayofmonth (stub function, pushdown constraints, result)
--Testcase 3350:
SELECT dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
 dayofmonth | dayofmonth 
------------+------------
          1 |          1
          2 |          1
         10 |          1
         15 |          1
         29 |          1
(5 rows)

-- select dayofmonth (stub function, dayofmonth in constraints, explain)
--Testcase 3351:
EXPLAIN VERBOSE
SELECT dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl WHERE dayofmonth(c2) != dayofmonth('2000-01-01'::date) ORDER BY 1,2;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7682.46..7699.44 rows=6792 width=8)
   Output: (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
   Sort Key: (dayofmonth(time_tbl.c2)), (dayofmonth('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7250.16 rows=6792 width=8)
         Output: (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofmonth(`c2`), dayofmonth('2021-01-01') FROM `test`.`time_tbl2` WHERE ((dayofmonth(`c2`) <> dayofmonth('2000-01-01')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofmonth(c2), public.dayofmonth('2021-01-01'::date) FROM public.time_tbl1mysql WHERE ((public.dayofmonth(c2) <> public.dayofmonth('2000-01-01'::date)))
(12 rows)

-- select dayofmonth (stub function, dayofmonth in constraints, result)
--Testcase 3352:
SELECT dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl WHERE dayofmonth(c2) != dayofmonth('2000-01-01'::date) ORDER BY 1,2;
 dayofmonth | dayofmonth 
------------+------------
          2 |          1
         10 |          1
         15 |          1
         29 |          1
(4 rows)

-- select dayofmonth (stub function, dayofmonth in constraints, explain)
--Testcase 3353:
EXPLAIN VERBOSE
SELECT dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl WHERE dayofmonth('2021-01-01 12:00:00'::date) > 0 ORDER BY 1,2;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3322.26..3327.95 rows=2276 width=8)
   Output: (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
   Sort Key: (dayofmonth(time_tbl.c2)), (dayofmonth('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3195.35 rows=2276 width=8)
         Output: (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofmonth(`c2`), dayofmonth('2021-01-01') FROM `test`.`time_tbl2` WHERE ((dayofmonth('2021-01-01') > 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofmonth(c2), public.dayofmonth('2021-01-01'::date) FROM public.time_tbl1mysql WHERE ((public.dayofmonth('2021-01-01'::date) > 0))
(12 rows)

-- select dayofmonth (stub function, dayofmonth in constraints, result)
--Testcase 3354:
SELECT dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl WHERE dayofmonth('2021-01-01 12:00:00'::date) > 0 ORDER BY 1,2;
 dayofmonth | dayofmonth 
------------+------------
          1 |          1
          2 |          1
         10 |          1
         15 |          1
         29 |          1
(5 rows)

-- select dayofmonth with agg (pushdown, explain)
--Testcase 3355:
EXPLAIN VERBOSE
SELECT max(c2), dayofmonth(max(c2)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=8)
   Output: (max(c2)), dayofmonth((max(c2)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c2`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c2) FROM public.time_tbl1mysql
(11 rows)

-- select dayofmonth as nest function with agg (pushdown, result)
--Testcase 3356:
SELECT max(c2), dayofmonth(max(c2)) FROM time_tbl;
ERROR:  stub dayofmonth(date) is called
CONTEXT:  PL/pgSQL function dayofmonth(date) line 3 at RAISE
-- select dayofmonth with non pushdown func and explicit constant (explain)
--Testcase 3357:
EXPLAIN VERBOSE
SELECT dayofmonth(c2), dayofmonth('2021-01-01'::date), pi(), 4.1 FROM time_tbl ORDER BY 1,2;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=48)
   Output: (dayofmonth(c2)), (dayofmonth('2021-01-01'::date)), '3.141592653589793'::double precision, 4.1
   Sort Key: (dayofmonth(time_tbl.c2)), (dayofmonth('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=48)
         Output: (dayofmonth(c2)), (dayofmonth('2021-01-01'::date)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayofmonth(`c2`), dayofmonth('2021-01-01'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayofmonth(c2), public.dayofmonth('2021-01-01'::date), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select dayofmonth with non pushdown func and explicit constant (result)
--Testcase 3358:
SELECT dayofmonth(c2), dayofmonth('2021-01-01'::date), pi(), 4.1 FROM time_tbl ORDER BY 1,2;
 dayofmonth | dayofmonth |        pi         | ?column? 
------------+------------+-------------------+----------
          1 |          1 | 3.141592653589793 |      4.1
          2 |          1 | 3.141592653589793 |      4.1
         10 |          1 | 3.141592653589793 |      4.1
         15 |          1 | 3.141592653589793 |      4.1
         29 |          1 | 3.141592653589793 |      4.1
(5 rows)

-- select dayofmonth with order by (explain)
--Testcase 3359:
EXPLAIN VERBOSE
SELECT id, dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl order by id,dayofmonth(c2), dayofmonth('2021-01-01'::date);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=12)
   Output: id, (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
   Sort Key: time_tbl.id, (dayofmonth(time_tbl.c2)), (dayofmonth('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=12)
         Output: id, (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, dayofmonth(`c2`), dayofmonth('2021-01-01') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.dayofmonth(c2), public.dayofmonth('2021-01-01'::date) FROM public.time_tbl1mysql
(12 rows)

-- select dayofmonth with order by (result)
--Testcase 3360:
SELECT id, dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl order by id,dayofmonth(c2), dayofmonth('2021-01-01'::date);
 id | dayofmonth | dayofmonth 
----+------------+------------
  0 |          2 |          1
  1 |          1 |          1
  2 |         10 |          1
  3 |         15 |          1
  4 |         29 |          1
(5 rows)

-- select dayofmonth with order by index (result)
--Testcase 3361:
SELECT id, dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl order by 3,2,1;
 id | dayofmonth | dayofmonth 
----+------------+------------
  1 |          1 |          1
  0 |          2 |          1
  2 |         10 |          1
  3 |         15 |          1
  4 |         29 |          1
(5 rows)

-- select dayofmonth with order by index (result)
--Testcase 3362:
SELECT id, dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl order by 1,2,3;
 id | dayofmonth | dayofmonth 
----+------------+------------
  0 |          2 |          1
  1 |          1 |          1
  2 |         10 |          1
  3 |         15 |          1
  4 |         29 |          1
(5 rows)

-- select dayofmonth with group by (explain)
--Testcase 3363:
EXPLAIN VERBOSE
SELECT max(c3), dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl group by dayofmonth(c2) ORDER BY 1,2,3;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort  (cost=2275.05..2275.55 rows=200 width=16)
   Output: (max(c3)), (dayofmonth(c2)), (dayofmonth('2021-01-01'::date))
   Sort Key: (max(time_tbl.c3)), (dayofmonth(time_tbl.c2)), (dayofmonth('2021-01-01'::date))
   ->  HashAggregate  (cost=2165.41..2267.41 rows=200 width=16)
         Output: max(c3), (dayofmonth(c2)), dayofmonth('2021-01-01'::date)
         Group Key: (dayofmonth(time_tbl.c2))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=12)
               Output: (dayofmonth(c2)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT dayofmonth(`c2`), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.dayofmonth(c2), c3 FROM public.time_tbl1mysql
(15 rows)

-- select dayofmonth with group by (result)
--Testcase 3364:
SELECT max(c3), dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl group by dayofmonth(c2) ORDER BY 1,2,3;
ERROR:  stub dayofmonth(date) is called
CONTEXT:  PL/pgSQL function dayofmonth(date) line 3 at RAISE
-- select dayofmonth with group by index (result)
--Testcase 3365:
SELECT id, dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl group by 3,2,1 ORDER BY 1,2,3;
 id | dayofmonth | dayofmonth 
----+------------+------------
  0 |          2 |          1
  1 |          1 |          1
  2 |         10 |          1
  3 |         15 |          1
  4 |         29 |          1
(5 rows)

-- select dayofmonth with group by index (result)
--Testcase 3366:
SELECT id, dayofmonth(c2), dayofmonth('2021-01-01'::date) FROM time_tbl group by 1,2,3 ORDER BY 1,2,3;
 id | dayofmonth | dayofmonth 
----+------------+------------
  0 |          2 |          1
  1 |          1 |          1
  2 |         10 |          1
  3 |         15 |          1
  4 |         29 |          1
(5 rows)

-- select dayofmonth with group by index having (result)
--Testcase 3367:
SELECT id, dayofmonth(c2), dayofmonth('2021-01-01'::date), c2 FROM time_tbl group by 4, 3, 2, 1 HAVING dayofmonth(c2) > 0 ORDER BY 1,2,3,4;
 id | dayofmonth | dayofmonth |     c2     
----+------------+------------+------------
  0 |          2 |          1 | 2021-01-02
  1 |          1 |          1 | 2021-01-01
  2 |         10 |          1 | 2021-01-10
  3 |         15 |          1 | 2021-01-15
  4 |         29 |          1 | 2021-01-29
(5 rows)

-- select dayofmonth with group by index having (result)
--Testcase 3368:
SELECT id, dayofmonth(c2), dayofmonth('2021-01-01'::date), c2 FROM time_tbl group by 1, 2, 3, 4 HAVING dayofmonth(c2) > 0 ORDER BY 1,2,3,4;
 id | dayofmonth | dayofmonth |     c2     
----+------------+------------+------------
  0 |          2 |          1 | 2021-01-02
  1 |          1 |          1 | 2021-01-01
  2 |         10 |          1 | 2021-01-10
  3 |         15 |          1 | 2021-01-15
  4 |         29 |          1 | 2021-01-29
(5 rows)

-- select dayofmonth and as
--Testcase 3369:
SELECT dayofmonth(c2) as dayofmonth1, dayofmonth('2021-01-01'::date) as dayofmonth2 FROM time_tbl ORDER BY 1,2;
 dayofmonth1 | dayofmonth2 
-------------+-------------
           1 |           1
           2 |           1
          10 |           1
          15 |           1
          29 |           1
(5 rows)

-- DAYNAME()
-- select dayname (stub function, explain)
--Testcase 3370:
EXPLAIN VERBOSE
SELECT dayname(c2), dayname('2021-01-01'::date) FROM time_tbl ORDER BY 1,2;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=64)
   Output: (dayname(c2)), (dayname('2021-01-01'::date))
   Sort Key: (dayname(time_tbl.c2)), (dayname('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=64)
         Output: (dayname(c2)), (dayname('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayname(`c2`), dayname('2021-01-01') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayname(c2), public.dayname('2021-01-01'::date) FROM public.time_tbl1mysql
(12 rows)

-- select dayname (stub function, result)
--Testcase 3371:
SELECT dayname(c2), dayname('2021-01-01'::date) FROM time_tbl ORDER BY 1,2;
 dayname  | dayname 
----------+---------
 Friday   | Friday
 Friday   | Friday
 Friday   | Friday
 Saturday | Friday
 Sunday   | Friday
(5 rows)

-- select dayname (stub function, not pushdown constraints, explain)
--Testcase 3372:
EXPLAIN VERBOSE
SELECT dayname(c2), dayname('2021-01-01'::date) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=408.59..408.68 rows=34 width=64)
   Output: (dayname(c2)), (dayname('2021-01-01'::date))
   Sort Key: (dayname(time_tbl.c2)), (dayname('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..407.73 rows=34 width=64)
         Output: (dayname(c2)), (dayname('2021-01-01'::date))
         Filter: (to_hex(time_tbl.id) = '1'::text)
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayname(`c2`), dayname('2021-01-01'), `id` FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayname(c2), public.dayname('2021-01-01'::date), id FROM public.time_tbl1mysql
(13 rows)

-- select dayname (stub function, not pushdown constraints, result)
--Testcase 3373:
SELECT dayname(c2), dayname('2021-01-01'::date) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2;
 dayname | dayname 
---------+---------
 Friday  | Friday
(1 row)

-- select dayname (stub function, pushdown constraints, explain)
--Testcase 3374:
EXPLAIN VERBOSE
SELECT dayname(c2), dayname('2021-01-01'::date) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4269.46..4286.44 rows=6792 width=64)
   Output: (dayname(c2)), (dayname('2021-01-01'::date))
   Sort Key: (dayname(time_tbl.c2)), (dayname('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.16 rows=6792 width=64)
         Output: (dayname(c2)), (dayname('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayname(`c2`), dayname('2021-01-01') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayname(c2), public.dayname('2021-01-01'::date) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select dayname (stub function, pushdown constraints, result)
--Testcase 3375:
SELECT dayname(c2), dayname('2021-01-01'::date) FROM time_tbl WHERE id != 200 ORDER BY 1,2;
 dayname  | dayname 
----------+---------
 Friday   | Friday
 Friday   | Friday
 Friday   | Friday
 Saturday | Friday
 Sunday   | Friday
(5 rows)

-- select dayname (stub function, dayname in constraints, explain)
--Testcase 3376:
EXPLAIN VERBOSE
SELECT dayname(c2), dayname('2021-01-01'::date) FROM time_tbl WHERE dayname(c2) != dayname('2000-01-01'::date) ORDER BY 1,2;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7682.46..7699.44 rows=6792 width=64)
   Output: (dayname(c2)), (dayname('2021-01-01'::date))
   Sort Key: (dayname(time_tbl.c2)), (dayname('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7250.16 rows=6792 width=64)
         Output: (dayname(c2)), (dayname('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayname(`c2`), dayname('2021-01-01') FROM `test`.`time_tbl2` WHERE ((dayname(`c2`) <> dayname('2000-01-01')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayname(c2), public.dayname('2021-01-01'::date) FROM public.time_tbl1mysql WHERE ((public.dayname(c2) <> public.dayname('2000-01-01'::date)))
(12 rows)

-- select dayname (stub function, dayname in constraints, result)
--Testcase 3377:
SELECT dayname(c2), dayname('2021-01-01'::date) FROM time_tbl WHERE dayname(c2) != dayname('2000-01-01'::date) ORDER BY 1,2;
 dayname | dayname 
---------+---------
 Friday  | Friday
 Friday  | Friday
 Friday  | Friday
 Sunday  | Friday
(4 rows)

-- select dayname (stub function, dayname in constraints, explain)
--Testcase 3378:
EXPLAIN VERBOSE
SELECT dayname(c2), dayname('2021-01-01'::date) FROM time_tbl WHERE dayname('2021-01-01 12:00:00'::date) = 'Friday' ORDER BY 1,2;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2030.37..2030.45 rows=34 width=64)
   Output: (dayname(c2)), (dayname('2021-01-01'::date))
   Sort Key: (dayname(time_tbl.c2)), (dayname('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..2029.50 rows=34 width=64)
         Output: (dayname(c2)), (dayname('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayname(`c2`), dayname('2021-01-01') FROM `test`.`time_tbl2` WHERE ((dayname('2021-01-01') = 'Friday'))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayname(c2), public.dayname('2021-01-01'::date) FROM public.time_tbl1mysql WHERE ((public.dayname('2021-01-01'::date) = 'Friday'::text))
(12 rows)

-- select dayname (stub function, dayname in constraints, result)
--Testcase 3379:
SELECT dayname(c2), dayname('2021-01-01'::date) FROM time_tbl WHERE dayname('2021-01-01 12:00:00'::date) > 'Friday' ORDER BY 1,2;
 dayname | dayname 
---------+---------
(0 rows)

-- select dayname with agg (pushdown, explain)
--Testcase 3380:
EXPLAIN VERBOSE
SELECT max(c2), dayname(max(c2)) FROM time_tbl;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=36)
   Output: (max(c2)), dayname((max(c2)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c2`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c2) FROM public.time_tbl1mysql
(11 rows)

-- select dayname as nest function with agg (pushdown, result)
--Testcase 3381:
SELECT max(c2), dayname(max(c2)) FROM time_tbl;
ERROR:  stub dayname(date) is called
CONTEXT:  PL/pgSQL function dayname(date) line 3 at RAISE
-- select dayname with non pushdown func and explicit constant (explain)
--Testcase 3382:
EXPLAIN VERBOSE
SELECT dayname(c2), dayname('2021-01-01'::date), pi(), 4.1 FROM time_tbl ORDER BY 1,2;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=104)
   Output: (dayname(c2)), (dayname('2021-01-01'::date)), '3.141592653589793'::double precision, 4.1
   Sort Key: (dayname(time_tbl.c2)), (dayname('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=104)
         Output: (dayname(c2)), (dayname('2021-01-01'::date)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT dayname(`c2`), dayname('2021-01-01'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.dayname(c2), public.dayname('2021-01-01'::date), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select dayname with non pushdown func and explicit constant (result)
--Testcase 3383:
SELECT dayname(c2), dayname('2021-01-01'::date), pi(), 4.1 FROM time_tbl ORDER BY 1,2;
 dayname  | dayname |        pi         | ?column? 
----------+---------+-------------------+----------
 Friday   | Friday  | 3.141592653589793 |      4.1
 Friday   | Friday  | 3.141592653589793 |      4.1
 Friday   | Friday  | 3.141592653589793 |      4.1
 Saturday | Friday  | 3.141592653589793 |      4.1
 Sunday   | Friday  | 3.141592653589793 |      4.1
(5 rows)

-- select dayname with order by (explain)
--Testcase 3384:
EXPLAIN VERBOSE
SELECT id, dayname(c2), dayname('2021-01-01'::date) FROM time_tbl order by id,dayname(c2), dayname('2021-01-01'::date);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=68)
   Output: id, (dayname(c2)), (dayname('2021-01-01'::date))
   Sort Key: time_tbl.id, (dayname(time_tbl.c2)), (dayname('2021-01-01'::date))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..3837.78 rows=6826 width=68)
         Output: id, (dayname(c2)), (dayname('2021-01-01'::date))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, dayname(`c2`), dayname('2021-01-01') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.dayname(c2), public.dayname('2021-01-01'::date) FROM public.time_tbl1mysql
(12 rows)

-- select dayname with order by (result)
--Testcase 3385:
SELECT id, dayname(c2), dayname('2021-01-01'::date) FROM time_tbl order by id,dayname(c2), dayname('2021-01-01'::date);
 id | dayname  | dayname 
----+----------+---------
  0 | Saturday | Friday
  1 | Friday   | Friday
  2 | Sunday   | Friday
  3 | Friday   | Friday
  4 | Friday   | Friday
(5 rows)

-- select dayname with order by index (result)
--Testcase 3386:
SELECT id, dayname(c2), dayname('2021-01-01'::date) FROM time_tbl order by 3,2,1;
 id | dayname  | dayname 
----+----------+---------
  1 | Friday   | Friday
  3 | Friday   | Friday
  4 | Friday   | Friday
  0 | Saturday | Friday
  2 | Sunday   | Friday
(5 rows)

-- select dayname with order by index (result)
--Testcase 3387:
SELECT id, dayname(c2), dayname('2021-01-01'::date) FROM time_tbl order by 1,2,3;
 id | dayname  | dayname 
----+----------+---------
  0 | Saturday | Friday
  1 | Friday   | Friday
  2 | Sunday   | Friday
  3 | Friday   | Friday
  4 | Friday   | Friday
(5 rows)

-- select dayname with group by (explain)
--Testcase 3388:
EXPLAIN VERBOSE
SELECT max(c3), dayname(c2), dayname('2021-01-01'::date) FROM time_tbl group by dayname(c2) ORDER BY 1,2,3;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=2275.05..2275.55 rows=200 width=72)
   Output: (max(c3)), (dayname(c2)), (dayname('2021-01-01'::date))
   Sort Key: (max(time_tbl.c3)), (dayname(time_tbl.c2)), (dayname('2021-01-01'::date))
   ->  HashAggregate  (cost=2165.41..2267.41 rows=200 width=72)
         Output: max(c3), (dayname(c2)), dayname('2021-01-01'::date)
         Group Key: (dayname(time_tbl.c2))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..2131.28 rows=6826 width=40)
               Output: (dayname(c2)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT dayname(`c2`), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.dayname(c2), c3 FROM public.time_tbl1mysql
(15 rows)

-- select dayname with group by (result)
--Testcase 3389:
SELECT max(c3), dayname(c2), dayname('2021-01-01'::date) FROM time_tbl group by dayname(c2) ORDER BY 1,2,3;
ERROR:  stub dayname(date) is called
CONTEXT:  PL/pgSQL function dayname(date) line 3 at RAISE
-- select dayname with group by index (result)
--Testcase 3390:
SELECT id, dayname(c2), dayname('2021-01-01'::date) FROM time_tbl group by 3,2,1 ORDER BY 1,2,3;
 id | dayname  | dayname 
----+----------+---------
  0 | Saturday | Friday
  1 | Friday   | Friday
  2 | Sunday   | Friday
  3 | Friday   | Friday
  4 | Friday   | Friday
(5 rows)

-- select dayname with group by index (result)
--Testcase 3391:
SELECT id, dayname(c2), dayname('2021-01-01'::date) FROM time_tbl group by 1,2,3 ORDER BY 1,2,3;
 id | dayname  | dayname 
----+----------+---------
  0 | Saturday | Friday
  1 | Friday   | Friday
  2 | Sunday   | Friday
  3 | Friday   | Friday
  4 | Friday   | Friday
(5 rows)

-- select dayname with group by index having (result)
--Testcase 3392:
SELECT id, dayname(c2), dayname('2021-01-01'::date), c2 FROM time_tbl group by 4, 3, 2, 1 HAVING dayname(c2) = 'Friday' ORDER BY 1,2,3,4;
 id | dayname | dayname |     c2     
----+---------+---------+------------
  1 | Friday  | Friday  | 2021-01-01
  3 | Friday  | Friday  | 2021-01-15
  4 | Friday  | Friday  | 2021-01-29
(3 rows)

-- select dayname with group by index having (result)
--Testcase 3393:
SELECT id, dayname(c2), dayname('2021-01-01'::date), c2 FROM time_tbl group by 1, 2, 3, 4 HAVING dayname(c2) > 'Friday' ORDER BY 1,2,3;
 id | dayname  | dayname |     c2     
----+----------+---------+------------
  0 | Saturday | Friday  | 2021-01-02
  2 | Sunday   | Friday  | 2021-01-10
(2 rows)

-- select dayname and as
--Testcase 3394:
SELECT dayname(c2) as dayname1, dayname('2021-01-01'::date) as dayname2 FROM time_tbl ORDER BY 1,2;
 dayname1 | dayname2 
----------+----------
 Friday   | Friday
 Friday   | Friday
 Friday   | Friday
 Saturday | Friday
 Sunday   | Friday
(5 rows)

-- DAY()
-- select day (stub function, explain)
--Testcase 3395:
EXPLAIN VERBOSE
SELECT day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=5996.05..12924.44 rows=6826 width=16)
   Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), day('1997-01-31 12:00:00'::timestamp without time zone)
   ->  Sort  (cost=5996.05..6013.12 rows=6826 width=12)
         Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone))
         Sort Key: (day((time_tbl.c2)::timestamp without time zone)), (day(time_tbl.c3)), (day('2021-01-01 00:00:00'::timestamp without time zone))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=12)
               Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone))
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT day(`c2`), day(`c3`), day('2021-01-01 00:00:00') FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.day(c2), public.day(c3), public.day('2021-01-01 00:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(14 rows)

-- select day (stub function, result)
--Testcase 3396:
SELECT day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl ORDER BY 1,2,3;
ERROR:  stub day(timestamp) is called
CONTEXT:  PL/pgSQL function day(timestamp without time zone) line 3 at RAISE
-- select day (stub function, not pushdown constraints, explain)
--Testcase 3397:
EXPLAIN VERBOSE
SELECT day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=417.18..451.69 rows=34 width=16)
   Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), day('1997-01-31 12:00:00'::timestamp without time zone)
   ->  Sort  (cost=417.18..417.26 rows=34 width=12)
         Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone))
         Sort Key: (day((time_tbl.c2)::timestamp without time zone)), (day(time_tbl.c3)), (day('2021-01-01 00:00:00'::timestamp without time zone))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..416.31 rows=34 width=12)
               Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone))
               Filter: (to_hex(time_tbl.id) = '1'::text)
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT day(`c2`), day(`c3`), day('2021-01-01 00:00:00'), `id` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.day(c2), public.day(c3), public.day('2021-01-01 00:00:00'::timestamp without time zone), id FROM public.time_tbl1mysql
(15 rows)

-- select day (stub function, not pushdown constraints, result)
--Testcase 3398:
SELECT day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl WHERE to_hex(id) = '1' ORDER BY 1,2,3;
ERROR:  stub day(timestamp) is called
CONTEXT:  PL/pgSQL function day(timestamp without time zone) line 3 at RAISE
-- select day (stub function, pushdown constraints, explain)
--Testcase 3399:
EXPLAIN VERBOSE
SELECT day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
                                                                                                                 QUERY PLAN                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7682.44..7699.42 rows=6792 width=16)
   Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
   Sort Key: (day((time_tbl.c2)::timestamp without time zone)), (day(time_tbl.c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7250.14 rows=6792 width=16)
         Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT day(`c2`), day(`c3`), day('2021-01-01 00:00:00'), day('1997-01-31 12:00:00') FROM `test`.`time_tbl2` WHERE ((`id` <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.day(c2), public.day(c3), public.day('2021-01-01 00:00:00'::timestamp without time zone), public.day('1997-01-31 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((id <> 200))
(12 rows)

-- select day (stub function, pushdown constraints, result)
--Testcase 3400:
SELECT day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl WHERE id != 200 ORDER BY 1,2,3,4;
 day | day | day | day 
-----+-----+-----+-----
   1 |   4 |   1 |  31
   2 |   3 |   1 |  31
  10 |   5 |   1 |  31
  15 |   6 |   1 |  31
  29 |   7 |   1 |  31
(5 rows)

-- select day (stub function, day in constraints, explain)
--Testcase 3401:
EXPLAIN VERBOSE
SELECT day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl WHERE day(c2) != day('2000-01-01'::date) ORDER BY 1,2,3,4;
                                                                                                                                                    QUERY PLAN                                                                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11112.51..11129.49 rows=6792 width=16)
   Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
   Sort Key: (day((time_tbl.c2)::timestamp without time zone)), (day(time_tbl.c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..10680.21 rows=6792 width=16)
         Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT day(`c2`), day(`c3`), day('2021-01-01 00:00:00'), day('1997-01-31 12:00:00') FROM `test`.`time_tbl2` WHERE ((day(`c2`) <> day('2000-01-01 00:00:00')))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.day(c2), public.day(c3), public.day('2021-01-01 00:00:00'::timestamp without time zone), public.day('1997-01-31 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.day(c2) <> public.day('2000-01-01 00:00:00'::timestamp without time zone)))
(12 rows)

-- select day (stub function, day in constraints, result)
--Testcase 3402:
SELECT day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl WHERE day(c2) != day('2000-01-01'::date) ORDER BY 1,2,3,4;
 day | day | day | day 
-----+-----+-----+-----
   2 |   3 |   1 |  31
  10 |   5 |   1 |  31
  15 |   6 |   1 |  31
  29 |   7 |   1 |  31
(4 rows)

-- select day (stub function, day in constraints, explain)
--Testcase 3403:
EXPLAIN VERBOSE
SELECT day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl WHERE day('2021-01-01 12:00:00'::date) > 0 ORDER BY 1,2,3,4;
                                                                                                                                             QUERY PLAN                                                                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4465.95..4471.64 rows=2276 width=16)
   Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
   Sort Key: (day((time_tbl.c2)::timestamp without time zone)), (day(time_tbl.c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..4339.03 rows=2276 width=16)
         Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT day(`c2`), day(`c3`), day('2021-01-01 00:00:00'), day('1997-01-31 12:00:00') FROM `test`.`time_tbl2` WHERE ((day('2021-01-01 00:00:00') > 0))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.day(c2), public.day(c3), public.day('2021-01-01 00:00:00'::timestamp without time zone), public.day('1997-01-31 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql WHERE ((public.day('2021-01-01 00:00:00'::timestamp without time zone) > 0))
(12 rows)

-- select day (stub function, day in constraints, result)
--Testcase 3404:
SELECT day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl WHERE day('2021-01-01 12:00:00'::date) > 0 ORDER BY 1,2,3,4;
 day | day | day | day 
-----+-----+-----+-----
   1 |   4 |   1 |  31
   2 |   3 |   1 |  31
  10 |   5 |   1 |  31
  15 |   6 |   1 |  31
  29 |   7 |   1 |  31
(5 rows)

-- select day with agg (pushdown, explain)
--Testcase 3405:
EXPLAIN VERBOSE
SELECT max(c2), day(max(c2)) FROM time_tbl;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=8)
   Output: (max(c2)), day(((max(c2)))::timestamp without time zone)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.time_tbl__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT max(`c2`) FROM `test`.`time_tbl2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.time_tbl)
     Remote SQL: SELECT max(c2) FROM public.time_tbl1mysql
(11 rows)

-- select day as nest function with agg (pushdown, result)
--Testcase 3406:
SELECT max(c2), day(max(c2)) FROM time_tbl;
ERROR:  stub day(timestamp) is called
CONTEXT:  PL/pgSQL function day(timestamp without time zone) line 3 at RAISE
-- select day with non pushdown func and explicit constant (explain)
--Testcase 3407:
EXPLAIN VERBOSE
SELECT day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp), pi(), 4.1 FROM time_tbl ORDER BY 1,2,3,4;
                                                                                                                            QUERY PLAN                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7702.55..7719.62 rows=6826 width=56)
   Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone)), '3.141592653589793'::double precision, 4.1
   Sort Key: (day((time_tbl.c2)::timestamp without time zone)), (day(time_tbl.c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7267.84 rows=6826 width=56)
         Output: (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone)), '3.141592653589793'::double precision, 4.1
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT day(`c2`), day(`c3`), day('2021-01-01 00:00:00'), day('1997-01-31 12:00:00'), 3.141592653589793, 4.1 FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.day(c2), public.day(c3), public.day('2021-01-01 00:00:00'::timestamp without time zone), public.day('1997-01-31 12:00:00'::timestamp without time zone), 3.141592653589793::double precision, 4.1 FROM public.time_tbl1mysql
(12 rows)

-- select day with non pushdown func and explicit constant (result)
--Testcase 3408:
SELECT day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp), pi(), 4.1 FROM time_tbl ORDER BY 1,2,3,4;
 day | day | day | day |        pi         | ?column? 
-----+-----+-----+-----+-------------------+----------
   1 |   4 |   1 |  31 | 3.141592653589793 |      4.1
   2 |   3 |   1 |  31 | 3.141592653589793 |      4.1
  10 |   5 |   1 |  31 | 3.141592653589793 |      4.1
  15 |   6 |   1 |  31 | 3.141592653589793 |      4.1
  29 |   7 |   1 |  31 | 3.141592653589793 |      4.1
(5 rows)

-- select day with order by (explain)
--Testcase 3409:
EXPLAIN VERBOSE
SELECT id, day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl order by id,day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp);
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7702.55..7719.62 rows=6826 width=20)
   Output: id, (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
   Sort Key: time_tbl.id, (day((time_tbl.c2)::timestamp without time zone)), (day(time_tbl.c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
   ->  Foreign Scan on public.time_tbl  (cost=200.00..7267.84 rows=6826 width=20)
         Output: id, (day((c2)::timestamp without time zone)), (day(c3)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, day(`c2`), day(`c3`), day('2021-01-01 00:00:00'), day('1997-01-31 12:00:00') FROM `test`.`time_tbl2`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.day(c2), public.day(c3), public.day('2021-01-01 00:00:00'::timestamp without time zone), public.day('1997-01-31 12:00:00'::timestamp without time zone) FROM public.time_tbl1mysql
(12 rows)

-- select day with order by (result)
--Testcase 3410:
SELECT id, day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl order by id,day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp);
 id | day | day | day | day 
----+-----+-----+-----+-----
  0 |   2 |   3 |   1 |  31
  1 |   1 |   4 |   1 |  31
  2 |  10 |   5 |   1 |  31
  3 |  15 |   6 |   1 |  31
  4 |  29 |   7 |   1 |  31
(5 rows)

-- select day with order by index (result)
--Testcase 3411:
SELECT id, day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl order by 5,4,3,2,1;
 id | day | day | day | day 
----+-----+-----+-----+-----
  0 |   2 |   3 |   1 |  31
  1 |   1 |   4 |   1 |  31
  2 |  10 |   5 |   1 |  31
  3 |  15 |   6 |   1 |  31
  4 |  29 |   7 |   1 |  31
(5 rows)

-- select day with order by index (result)
--Testcase 3412:
SELECT id, day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl order by 1,2,3,4,5;
 id | day | day | day | day 
----+-----+-----+-----+-----
  0 |   2 |   3 |   1 |  31
  1 |   1 |   4 |   1 |  31
  2 |  10 |   5 |   1 |  31
  3 |  15 |   6 |   1 |  31
  4 |  29 |   7 |   1 |  31
(5 rows)

-- select day with group by (explain)
--Testcase 3413:
EXPLAIN VERBOSE
SELECT max(c3), day(c2), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl group by day(c2), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) ORDER BY 1,2,3,4;
                                                                                                    QUERY PLAN                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11269.14..11286.20 rows=6826 width=20)
   Output: (max(c3)), (day((c2)::timestamp without time zone)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
   Sort Key: (max(time_tbl.c3)), (day((time_tbl.c2)::timestamp without time zone)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
   ->  HashAggregate  (cost=5629.60..10834.43 rows=6826 width=20)
         Output: max(c3), (day((c2)::timestamp without time zone)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
         Group Key: (day((time_tbl.c2)::timestamp without time zone)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone))
         ->  Foreign Scan on public.time_tbl  (cost=200.00..5561.34 rows=6826 width=20)
               Output: (day((c2)::timestamp without time zone)), (day('2021-01-01 00:00:00'::timestamp without time zone)), (day('1997-01-31 12:00:00'::timestamp without time zone)), c3
               Node: mysql_svr / Status: Alive
                 Sort push-down: no
                 Local server startup cost: 10
                 Remote query: SELECT day(`c2`), day('2021-01-01 00:00:00'), day('1997-01-31 12:00:00'), `c3` FROM `test`.`time_tbl2`
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT public.day(c2), public.day('2021-01-01 00:00:00'::timestamp without time zone), public.day('1997-01-31 12:00:00'::timestamp without time zone), c3 FROM public.time_tbl1mysql
(15 rows)

-- select day with group by (result)
--Testcase 3414:
SELECT max(c3), day(c2), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl group by day(c2) ORDER BY 1,2,3,4;
ERROR:  stub day(timestamp) is called
CONTEXT:  PL/pgSQL function day(timestamp without time zone) line 3 at RAISE
-- select day with group by index (result)
--Testcase 3415:
SELECT id, day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl group by 5,4,3,2,1 ORDER BY 1,2,3,4,5;
 id | day | day | day | day 
----+-----+-----+-----+-----
  0 |   2 |   3 |   1 |  31
  1 |   1 |   4 |   1 |  31
  2 |  10 |   5 |   1 |  31
  3 |  15 |   6 |   1 |  31
  4 |  29 |   7 |   1 |  31
(5 rows)

-- select day with group by index (result)
--Testcase 3416:
SELECT id, day(c2), day(c3), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp) FROM time_tbl group by 1,2,3,4,5 ORDER BY 1,2,3,4,5;
 id | day | day | day | day 
----+-----+-----+-----+-----
  0 |   2 |   3 |   1 |  31
  1 |   1 |   4 |   1 |  31
  2 |  10 |   5 |   1 |  31
  3 |  15 |   6 |   1 |  31
  4 |  29 |   7 |   1 |  31
(5 rows)

-- select day with group by index having (result)
--Testcase 3417:
SELECT id, day(c2), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp), c2 FROM time_tbl group by 5,4,3,2,1 HAVING day(c2) > 0 ORDER BY 1,2,3,4,5;
 id | day | day | day |     c2     
----+-----+-----+-----+------------
  0 |   2 |   1 |  31 | 2021-01-02
  1 |   1 |   1 |  31 | 2021-01-01
  2 |  10 |   1 |  31 | 2021-01-10
  3 |  15 |   1 |  31 | 2021-01-15
  4 |  29 |   1 |  31 | 2021-01-29
(5 rows)

-- select day with group by index having (result)
--Testcase 3418:
SELECT id, day(c2), day('2021-01-01'::date), day('1997-01-31 12:00:00'::timestamp), c2 FROM time_tbl group by 1,2,3,4,5 HAVING day(c2) > 0 ORDER BY 1,2,3,4,5;
 id | day | day | day |     c2     
----+-----+-----+-----+------------
  0 |   2 |   1 |  31 | 2021-01-02
  1 |   1 |   1 |  31 | 2021-01-01
  2 |  10 |   1 |  31 | 2021-01-10
  3 |  15 |   1 |  31 | 2021-01-15
  4 |  29 |   1 |  31 | 2021-01-29
(5 rows)

-- select day and as
--Testcase 3419:
SELECT day(c2) as day1, day(c3) as day2, day('2021-01-01'::date) as day3, day('1997-01-31 12:00:00'::timestamp) as day4 FROM time_tbl ORDER BY 1,2,3,4;
 day1 | day2 | day3 | day4 
------+------+------+------
    1 |    4 |    1 |   31
    2 |    3 |    1 |   31
   10 |    5 |    1 |   31
   15 |    6 |    1 |   31
   29 |    7 |    1 |   31
(5 rows)

--Drop all foreign tables
--Testcase 3420:
DROP FOREIGN TABLE s3__mysql_svr__0;
--Testcase 3421:
DROP FOREIGN TABLE time_tbl__mysql_svr__0;
-- ============================================================================
-- Stub aggregate function for mysql fdw
-- ============================================================================
--Testcase 3422:
CREATE FOREIGN TABLE s7a (id int, tag1 text, value1 float, value2 int, value3 float, value4 int, value5 bit(16), str1 text, str2 text, __spd_url text) SERVER pgspider_core_svr;
--Testcase 3423:
CREATE FOREIGN TABLE s7a__pgspider_svr__0 (id int, tag1 text, value1 float, value2 int, value3 float, value4 int, value5 bit varying (16), str1 text, str2 text, __spd_url text) SERVER pgspider_svr OPTIONS (table_name 's7a1mysql');
--Testcase 3424:
CREATE FOREIGN TABLE s7a__mysql_svr__0 (id int, tag1 text, value1 float, value2 int, value3 float, value4 int, value5 bit(16), str1 text, str2 text) SERVER mysql_svr OPTIONS(dbname 'test', table_name 's7a2');
--Testcase 3425:
\d s7a;
                         Foreign table "public.s7a"
  Column   |       Type       | Collation | Nullable | Default | FDW options 
-----------+------------------+-----------+----------+---------+-------------
 id        | integer          |           |          |         | 
 tag1      | text             |           |          |         | 
 value1    | double precision |           |          |         | 
 value2    | integer          |           |          |         | 
 value3    | double precision |           |          |         | 
 value4    | integer          |           |          |         | 
 value5    | bit(16)          |           |          |         | 
 str1      | text             |           |          |         | 
 str2      | text             |           |          |         | 
 __spd_url | text             |           |          |         | 
Server: pgspider_core_svr

--Testcase 3426:
SELECT * FROM s7a ORDER BY id;
 id | tag1 | value1 | value2 | value3 | value4 |      value5      |   str1    |   str2    |        __spd_url         
----+------+--------+--------+--------+--------+------------------+-----------+-----------+--------------------------
  0 | a    |    0.1 |    100 |   -0.1 |   -100 | 0001001000110100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  1 | a    |    0.2 |    100 |   -0.2 |   -101 | 1111111100110100 | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  2 | a    |    0.3 |    100 |   -0.3 |   -102 |                  | ---XYZ--- |    XYZ    | /pgspider_svr/mysql_svr/
  3 | b    |    1.1 |    200 |   -1.1 |   -200 | 1111101000110100 | ---XYZ--- |    XYZ    | /mysql_svr/
  4 | b    |    2.2 |    200 |   -2.2 |   -210 | 1100110100110100 | ---XYZ--- |    XYZ    | /mysql_svr/
  5 | b    |    3.3 |    200 |   -3.3 |   -220 | 1010101100110100 | ---XYZ--- |    XYZ    | /mysql_svr/
(6 rows)

-- ===================================================================
-- test BIT_XOR()
-- ===================================================================
-- select bit_xor (explain)
--Testcase 3427:
EXPLAIN VERBOSE
SELECT bit_xor(id), bit_xor(tag1), bit_xor(value1), bit_xor(value2), bit_xor(value3), bit_xor(value4), bit_xor(value5), bit_xor(str1) FROM s7a;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7319.04..7319.05 rows=1 width=172)
   Output: bit_xor(id), bit_xor(tag1), bit_xor(value1), bit_xor(value2), bit_xor(value3), bit_xor(value4), bit_xor(value5), bit_xor(str1)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=102)
         Output: id, tag1, value1, value2, value3, value4, value5, str1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value1`, `value2`, `value3`, `value4`, `value5`, `str1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value1, value2, value3, value4, value5, str1 FROM public.s7a1mysql
(9 rows)

-- select bit_xor (result)
--Testcase 3428:
SELECT bit_xor(id), bit_xor(tag1), bit_xor(value1), bit_xor(value2), bit_xor(value3), bit_xor(value4), bit_xor(value5), bit_xor(str1) FROM s7a;
ERROR:  stub bit_xor_sfunc(numeric, anyelement) is called
CONTEXT:  PL/pgSQL function bit_xor_sfunc(numeric,anyelement) line 3 at RAISE
-- select bit_xor with group by (explain)
--Testcase 3429:
EXPLAIN VERBOSE
SELECT tag1, bit_xor(value5) FROM s7a GROUP BY tag1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=458.91..460.91 rows=200 width=64)
   Output: tag1, bit_xor(value5)
   Group Key: s7a.tag1
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=42)
         Output: tag1, value5
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value5` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value5 FROM public.s7a1mysql
(10 rows)

-- select bit_xor with group by (result)
--Testcase 3430:
SELECT tag1, bit_xor(value5) FROM s7a GROUP BY tag1;
 tag1 |     bit_xor      
------+------------------
 a    | 1110110100000000
 b    | 1001110000110100
(2 rows)

-- select bit_xor with group by having (explain)
--Testcase 3431:
EXPLAIN VERBOSE
SELECT id, bit_xor(value5) FROM s7a GROUP BY id, str1 HAVING bit_xor(value5) > 0::bit;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=475.97..478.47 rows=67 width=68)
   Output: id, bit_xor(value5), str1
   Group Key: s7a.id, s7a.str1
   Filter: (bit_xor(s7a.value5) > '0'::bit(1))
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=46)
         Output: id, str1, value5
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `value5`, `str1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, value5, str1 FROM public.s7a1mysql
(11 rows)

-- select bit_xor with group by having (result)
--Testcase 3432:
SELECT id, bit_xor(value5) FROM s7a GROUP BY id, str1 HAVING bit_xor(value5) > 0::bit;
 id |     bit_xor      
----+------------------
  1 | 1111111100110100
  4 | 1100110100110100
  3 | 1111101000110100
  0 | 0001001000110100
  5 | 1010101100110100
(5 rows)

-- ===================================================================
-- test GROUP_CONCAT()
-- ===================================================================
-- select group_concat (explain)
--Testcase 3433:
EXPLAIN VERBOSE
SELECT group_concat(id), group_concat(tag1), group_concat(value1), group_concat(value2), group_concat(value3), group_concat(str2) FROM s7a;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=10663.78..10663.79 rows=1 width=192)
   Output: group_concat(id), group_concat(tag1), group_concat(value1), group_concat(value2), group_concat(value3), group_concat(str2)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=88)
         Output: id, tag1, value1, value2, value3, str2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value1`, `value2`, `value3`, `str2` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value1, value2, value3, str2 FROM public.s7a1mysql
(9 rows)

-- select group_concat (result)
--Testcase 3434:
SELECT group_concat(id), group_concat(tag1), group_concat(value1), group_concat(value2), group_concat(value3), group_concat(str2) FROM s7a;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat (explain)
--Testcase 3435:
EXPLAIN VERBOSE
SELECT group_concat(value1 + 1) FROM s7a;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=2148.35..2148.36 rows=1 width=32)
   Output: group_concat((value1 + '1'::double precision))
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=8)
         Output: value1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `value1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT value1 FROM public.s7a1mysql
(9 rows)

-- select group_concat with group by (result)
--Testcase 3436:
SELECT group_concat(value1 + 1) FROM s7a;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat with stub function (explain)
--Testcase 3437:
EXPLAIN VERBOSE
SELECT tag1, group_concat(sqrt(value1)) FROM s7a GROUP BY tag1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2167.41 rows=200 width=64)
   Output: tag1, group_concat(sqrt(value1))
   Group Key: s7a.tag1
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=40)
         Output: tag1, value1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value1 FROM public.s7a1mysql
(10 rows)

-- select group_concat with stub function (result)
--Testcase 3438:
SELECT tag1, group_concat(sqrt(value1)) FROM s7a GROUP BY tag1;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat with group by (explain)
--Testcase 3439:
EXPLAIN VERBOSE
SELECT id, group_concat(value3) FROM s7a GROUP BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=2148.34..2150.34 rows=200 width=36)
   Output: id, group_concat(value3)
   Group Key: s7a.id
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=12)
         Output: id, value3
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `value3` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, value3 FROM public.s7a1mysql
(10 rows)

-- select group_concat with group by(explain)
--Testcase 3440:
SELECT id, group_concat(value3) FROM s7a GROUP BY 1;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat with group by having (explain)
--Testcase 3441:
EXPLAIN VERBOSE
SELECT id, group_concat(value3) FROM s7a GROUP BY 1, value1 HAVING group_concat(value3) IS NOT NULL;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2167.41 rows=199 width=44)
   Output: id, group_concat(value3), value1
   Group Key: s7a.id, s7a.value1
   Filter: (group_concat(s7a.value3) IS NOT NULL)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=20)
         Output: id, value1, value3
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `value1`, `value3` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, value1, value3 FROM public.s7a1mysql
(11 rows)

-- select group_concat with group by having (result)
--Testcase 3442:
SELECT id, group_concat(value3) FROM s7a GROUP BY 1, value1 HAVING group_concat(value3) IS NOT NULL;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat with group by having (explain)
--Testcase 3443:
EXPLAIN VERBOSE
SELECT id, group_concat(value3) FROM s7a GROUP BY 1, value1 HAVING group_concat(value3 + 1) IS NOT NULL;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=3888.97..3890.97 rows=199 width=44)
   Output: id, group_concat(value3), value1
   Group Key: s7a.id, s7a.value1
   Filter: (group_concat((s7a.value3 + '1'::double precision)) IS NOT NULL)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=20)
         Output: id, value1, value3
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `value1`, `value3` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, value1, value3 FROM public.s7a1mysql
(11 rows)

-- select group_concat with group by having (result)
--Testcase 3444:
SELECT id, group_concat(value3) FROM s7a GROUP BY 1, value1 HAVING group_concat(value3 + 1) IS NOT NULL;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat with group by having (explain)
--Testcase 3445:
EXPLAIN VERBOSE
SELECT id, group_concat(value3) FROM s7a GROUP BY 1, value1 HAVING group_concat(abs(value3)) IS NOT NULL;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=3888.97..3890.97 rows=199 width=44)
   Output: id, group_concat(value3), value1
   Group Key: s7a.id, s7a.value1
   Filter: (group_concat(abs(s7a.value3)) IS NOT NULL)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=20)
         Output: id, value1, value3
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `value1`, `value3` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, value1, value3 FROM public.s7a1mysql
(11 rows)

-- select group_concat with group by having (result)
--Testcase 3446:
SELECT id, group_concat(value3) FROM s7a GROUP BY 1, value1 HAVING group_concat(abs(value3)) IS NOT NULL;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat with multiple argument by ROW() expression.
--Testcase 3447:
EXPLAIN VERBOSE
SELECT group_concat((id, tag1, value2, str1, value5)) FROM s7a;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate  (cost=2131.28..2131.29 rows=1 width=32)
   Output: group_concat(ROW(id, tag1, value2, str1, value5))
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=82)
         Output: id, tag1, value2, str1, value5
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value2`, `value5`, `str1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value2, value5, str1 FROM public.s7a1mysql
(9 rows)

--Testcase 3448:
SELECT group_concat((id, tag1, value2, str1, value5)) FROM s7a;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat with multiple argument by ROW() expression and GROUP BY
--Testcase 3449:
EXPLAIN VERBOSE
SELECT group_concat((id, tag1, value2, str1, value5)) FROM s7a GROUP BY value2;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 HashAggregate  (cost=2148.34..2150.34 rows=200 width=36)
   Output: group_concat(ROW(id, tag1, value2, str1, value5)), value2
   Group Key: s7a.value2
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=82)
         Output: value2, id, tag1, str1, value5
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value2`, `value5`, `str1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value2, value5, str1 FROM public.s7a1mysql
(10 rows)

--Testcase 3450:
SELECT group_concat((id, tag1, value2, str1, value5)) FROM s7a GROUP BY value2;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat with single argument
--Testcase 3451:
EXPLAIN VERBOSE
SELECT group_concat(value1 ORDER By value1) FROM s7a;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=2131.28..2131.29 rows=1 width=32)
   Output: group_concat(value1 ORDER BY value1)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=8)
         Output: value1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `value1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT value1 FROM public.s7a1mysql
(9 rows)

--Testcase 3452:
SELECT group_concat(value1 ORDER By value1) FROM s7a;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat with single argument and ORDER BY
--Testcase 3453:
EXPLAIN VERBOSE
SELECT group_concat(value1 ORDER By value1 ASC) FROM s7a;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=2131.28..2131.29 rows=1 width=32)
   Output: group_concat(value1 ORDER BY value1)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=8)
         Output: value1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `value1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT value1 FROM public.s7a1mysql
(9 rows)

--Testcase 3454:
SELECT group_concat(value1 ORDER By value1 ASC) FROM s7a;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat with single argument and ORDER BY
--Testcase 3455:
EXPLAIN VERBOSE
SELECT group_concat(value1 ORDER By value1 DESC) FROM s7a;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=2131.28..2131.29 rows=1 width=32)
   Output: group_concat(value1 ORDER BY value1 DESC)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=8)
         Output: value1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `value1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT value1 FROM public.s7a1mysql
(9 rows)

--Testcase 3456:
SELECT group_concat(value1 ORDER By value1 DESC) FROM s7a;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- ===================================================================
-- test GROUP_CONCAT(DISTINCT) - PGSPIDER push down in single node only
-- ===================================================================
-- select group_concat(DISTINCT) (explain)
--Testcase 3457:
EXPLAIN VERBOSE
SELECT group_concat(DISTINCT id), group_concat(DISTINCT tag1), group_concat(DISTINCT value1), group_concat(DISTINCT value2), group_concat(DISTINCT value3), group_concat(DISTINCT value5), group_concat(DISTINCT str2) FROM s7a;
                                                                                                        QUERY PLAN                                                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=12370.28..12370.29 rows=1 width=224)
   Output: group_concat(DISTINCT id), group_concat(DISTINCT tag1), group_concat(DISTINCT value1), group_concat(DISTINCT value2), group_concat(DISTINCT value3), group_concat(DISTINCT value5), group_concat(DISTINCT str2)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=98)
         Output: id, tag1, value1, value2, value3, value5, str2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value1`, `value2`, `value3`, `value5`, `str2` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value1, value2, value3, value5, str2 FROM public.s7a1mysql
(9 rows)

-- select group_concat(DISTINCT) (result)
--Testcase 3458:
SELECT group_concat(DISTINCT id), group_concat(DISTINCT tag1), group_concat(DISTINCT value1), group_concat(DISTINCT value2), group_concat(DISTINCT value3), group_concat(DISTINCT value5), group_concat(DISTINCT str2) FROM s7a;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat(DISTINCT) (explain)
--Testcase 3459:
EXPLAIN VERBOSE
SELECT group_concat(DISTINCT (value1 + 1)) FROM s7a;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=2148.35..2148.36 rows=1 width=32)
   Output: group_concat(DISTINCT (value1 + '1'::double precision))
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=8)
         Output: value1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `value1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT value1 FROM public.s7a1mysql
(9 rows)

-- select group_concat(DISTINCT) (result)
--Testcase 3460:
SELECT group_concat(DISTINCT (value1 + 1)) FROM s7a;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat(DISTINCT) with group by (explain)
--Testcase 3461:
EXPLAIN VERBOSE
SELECT value2, group_concat(DISTINCT value3) FROM s7a GROUP BY value2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate  (cost=859.49..2602.12 rows=200 width=36)
   Output: value2, group_concat(DISTINCT value3)
   Group Key: s7a.value2
   ->  Sort  (cost=859.49..876.55 rows=6826 width=12)
         Output: value2, value3
         Sort Key: s7a.value2
         ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=12)
               Output: value2, value3
               Node: mysql_svr / Status: Alive
                 Local server startup cost: 10
                 Remote query: SELECT `value2`, `value3` FROM `test`.`s7a2`
               Node: pgspider_svr / Status: Alive
                 Remote SQL: SELECT value2, value3 FROM public.s7a1mysql
(13 rows)

-- select group_concat(DISTINCT) with group by (result)
--Testcase 3462:
SELECT value2, group_concat(DISTINCT value3) FROM s7a GROUP BY value2;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat(DISTINCT) multiple argument (T_Row expr)
--Testcase 3463:
EXPLAIN VERBOSE
SELECT group_concat(DISTINCT (id, tag1, value2, str1, value5)) FROM s7a;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate  (cost=2131.28..2131.29 rows=1 width=32)
   Output: group_concat(DISTINCT ROW(id, tag1, value2, str1, value5))
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=82)
         Output: id, tag1, value2, str1, value5
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value2`, `value5`, `str1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value2, value5, str1 FROM public.s7a1mysql
(9 rows)

--Testcase 3464:
SELECT group_concat(DISTINCT (id, tag1, value2, str1, value5)) FROM s7a;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat(DISTINCT) multiple argument (T_Row expr)
--Testcase 3465:
EXPLAIN VERBOSE
SELECT group_concat(DISTINCT (tag1, value2)) FROM s7a;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Aggregate  (cost=2131.28..2131.29 rows=1 width=32)
   Output: group_concat(DISTINCT ROW(tag1, value2))
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=36)
         Output: tag1, value2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value2` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value2 FROM public.s7a1mysql
(9 rows)

--Testcase 3466:
SELECT group_concat(DISTINCT (tag1, value2)) FROM s7a;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat(DISTINCT) multiple argument with group by (result)
--Testcase 3467:
EXPLAIN VERBOSE
SELECT value2, group_concat(DISTINCT (tag1, value3, value2)) FROM s7a GROUP BY value2;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 GroupAggregate  (cost=859.49..2602.12 rows=200 width=36)
   Output: value2, group_concat(DISTINCT ROW(tag1, value3, value2))
   Group Key: s7a.value2
   ->  Sort  (cost=859.49..876.55 rows=6826 width=44)
         Output: value2, tag1, value3
         Sort Key: s7a.value2
         ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=44)
               Output: value2, tag1, value3
               Node: mysql_svr / Status: Alive
                 Local server startup cost: 10
                 Remote query: SELECT `tag1`, `value2`, `value3` FROM `test`.`s7a2`
               Node: pgspider_svr / Status: Alive
                 Remote SQL: SELECT tag1, value2, value3 FROM public.s7a1mysql
(13 rows)

--Testcase 3468:
SELECT value2, group_concat(DISTINCT (tag1, value3, value2)) FROM s7a GROUP BY value2;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat(DISTINCT) with stub function (explain)
--Testcase 3469:
EXPLAIN VERBOSE
SELECT id, group_concat(DISTINCT mysql_sqrt(value1)) FROM s7a GROUP BY id;
ERROR:  function mysql_sqrt(double precision) does not exist
LINE 2: SELECT id, group_concat(DISTINCT mysql_sqrt(value1)) FROM s7...
                                         ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- select group_concat(DISTINCT) with stub function (result)
--Testcase 3470:
SELECT id, group_concat(DISTINCT mysql_sqrt(value1)) FROM s7a GROUP BY id;
ERROR:  function mysql_sqrt(double precision) does not exist
LINE 1: SELECT id, group_concat(DISTINCT mysql_sqrt(value1)) FROM s7...
                                         ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- select group_concat(DISTINCT) with group by having (explain)
--Testcase 3471:
EXPLAIN VERBOSE
SELECT id, group_concat(DISTINCT value3) FROM s7a GROUP BY 1, value1 HAVING group_concat(DISTINCT value3) IS NOT NULL;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate  (cost=859.49..2619.18 rows=199 width=44)
   Output: id, group_concat(DISTINCT value3), value1
   Group Key: s7a.id, s7a.value1
   Filter: (group_concat(DISTINCT s7a.value3) IS NOT NULL)
   ->  Sort  (cost=859.49..876.55 rows=6826 width=20)
         Output: id, value1, value3
         Sort Key: s7a.id, s7a.value1
         ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=20)
               Output: id, value1, value3
               Node: mysql_svr / Status: Alive
                 Local server startup cost: 10
                 Remote query: SELECT `id`, `value1`, `value3` FROM `test`.`s7a2`
               Node: pgspider_svr / Status: Alive
                 Remote SQL: SELECT id, value1, value3 FROM public.s7a1mysql
(14 rows)

-- select group_concat(DISTINCT) with group by having (result)
--Testcase 3472:
SELECT id, group_concat(DISTINCT value3) FROM s7a GROUP BY 1, value1 HAVING group_concat(DISTINCT value3) IS NOT NULL;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat(DISTINCT) with group by having (explain)
--Testcase 3473:
EXPLAIN VERBOSE
SELECT id, group_concat(DISTINCT value3) FROM s7a GROUP BY 1, value1 HAVING group_concat(DISTINCT (value3 + 1)) IS NOT NULL;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 GroupAggregate  (cost=859.49..4342.75 rows=199 width=44)
   Output: id, group_concat(DISTINCT value3), value1
   Group Key: s7a.id, s7a.value1
   Filter: (group_concat(DISTINCT (s7a.value3 + '1'::double precision)) IS NOT NULL)
   ->  Sort  (cost=859.49..876.55 rows=6826 width=20)
         Output: id, value1, value3
         Sort Key: s7a.id, s7a.value1
         ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=20)
               Output: id, value1, value3
               Node: mysql_svr / Status: Alive
                 Local server startup cost: 10
                 Remote query: SELECT `id`, `value1`, `value3` FROM `test`.`s7a2`
               Node: pgspider_svr / Status: Alive
                 Remote SQL: SELECT id, value1, value3 FROM public.s7a1mysql
(14 rows)

-- select group_concat(DISTINCT) with group by having (result)
--Testcase 3474:
SELECT id, group_concat(DISTINCT value3) FROM s7a GROUP BY 1, value1 HAVING group_concat(DISTINCT (value3 + 1)) IS NOT NULL;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- select group_concat(DISTINCT) with group by having (explain)
--Testcase 3475:
EXPLAIN VERBOSE
SELECT id, group_concat(DISTINCT value3) FROM s7a GROUP BY 1, value1 HAVING group_concat(DISTINCT abs(value3)) IS NOT NULL;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate  (cost=859.49..4342.75 rows=199 width=44)
   Output: id, group_concat(DISTINCT value3), value1
   Group Key: s7a.id, s7a.value1
   Filter: (group_concat(DISTINCT abs(s7a.value3)) IS NOT NULL)
   ->  Sort  (cost=859.49..876.55 rows=6826 width=20)
         Output: id, value1, value3
         Sort Key: s7a.id, s7a.value1
         ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=20)
               Output: id, value1, value3
               Node: mysql_svr / Status: Alive
                 Local server startup cost: 10
                 Remote query: SELECT `id`, `value1`, `value3` FROM `test`.`s7a2`
               Node: pgspider_svr / Status: Alive
                 Remote SQL: SELECT id, value1, value3 FROM public.s7a1mysql
(14 rows)

-- select group_concat(DISTINCT) with group by having (result)
--Testcase 3476:
SELECT id, group_concat(DISTINCT value3) FROM s7a GROUP BY 1, value1 HAVING group_concat(DISTINCT abs(value3)) IS NOT NULL;
ERROR:  stub group_concat_sfunc(text, anyelement) is called
CONTEXT:  PL/pgSQL function group_concat_sfunc(text,anyelement) line 3 at RAISE
-- ===================================================================
-- test COUNT()
-- ===================================================================
-- select count(*)
--Testcase 3477:
EXPLAIN VERBOSE
SELECT COUNT(*) FROM s7a;
                      QUERY PLAN                       
-------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=8)
   Output: (count(*))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s7a__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT count(*) FROM `test`.`s7a2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s7a)
     Remote SQL: SELECT count(*) FROM public.s7a1mysql
(11 rows)

--Testcase 3478:
SELECT COUNT(*) FROM s7a;
 count 
-------
     6
(1 row)

-- select COUNT(expr)
--Testcase 3479:
EXPLAIN VERBOSE
SELECT COUNT(tag1) FROM s7a;
                        QUERY PLAN                         
-----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=8)
   Output: (count(tag1))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s7a__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT count(`tag1`) FROM `test`.`s7a2`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s7a)
     Remote SQL: SELECT count(tag1) FROM public.s7a1mysql
(11 rows)

--Testcase 3480:
SELECT COUNT(tag1) FROM s7a;
 count 
-------
     6
(1 row)

-- select COUNT(expr)
--Testcase 3481:
EXPLAIN VERBOSE
SELECT COUNT(tag1) FROM s7a GROUP BY tag1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan  (cost=118.53..173.66 rows=1 width=40)
   Output: (count(tag1)), tag1
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s7a__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT count(`tag1`), `tag1` FROM `test`.`s7a2` GROUP BY 2
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s7a)
     Remote SQL: SELECT count(tag1), tag1 FROM public.s7a1mysql GROUP BY 2
(11 rows)

--Testcase 3482:
SELECT COUNT(tag1) FROM s7a GROUP BY tag1;
 count 
-------
     3
     3
(2 rows)

-- select COUNT(DISTINCT expr,[expr...]) PGSPIDER do not push down this case
--Testcase 3483:
EXPLAIN VERBOSE
SELECT COUNT(DISTINCT tag1) FROM s7a;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Aggregate  (cost=441.84..441.85 rows=1 width=8)
   Output: count(DISTINCT tag1)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=32)
         Output: tag1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1 FROM public.s7a1mysql
(9 rows)

--Testcase 3484:
SELECT COUNT(DISTINCT tag1) FROM s7a GROUP BY tag1;
 count 
-------
     1
     1
(2 rows)

-- select COUNT(DISTINCT expr,[expr...]) PGSPIDER do not push down this case
--Testcase 3485:
EXPLAIN VERBOSE
SELECT COUNT(DISTINCT (id, tag1, value2, str1, value5)) FROM s7a;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate  (cost=441.84..441.85 rows=1 width=8)
   Output: count(DISTINCT ROW(id, tag1, value2, str1, value5))
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=82)
         Output: id, tag1, value2, str1, value5
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value2`, `value5`, `str1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value2, value5, str1 FROM public.s7a1mysql
(9 rows)

--Testcase 3486:
SELECT COUNT(DISTINCT (id, tag1, value2, str1, value5)) FROM s7a;
 count 
-------
     6
(1 row)

-- select COUNT(DISTINCT expr,[expr...]) PGSPIDER do not push down this case
--Testcase 3487:
EXPLAIN VERBOSE
SELECT COUNT(DISTINCT (tag1, value2)) FROM s7a;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Aggregate  (cost=441.84..441.85 rows=1 width=8)
   Output: count(DISTINCT ROW(tag1, value2))
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=36)
         Output: tag1, value2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value2` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value2 FROM public.s7a1mysql
(9 rows)

--Testcase 3488:
SELECT COUNT(DISTINCT (tag1, value2)) FROM s7a;
 count 
-------
     2
(1 row)

-- ===================================================================
-- test JSON_ARRAYAGG() PGSPIDER push down in single node only
-- ===================================================================
-- select json_agg (explain)
--Testcase 3489:
EXPLAIN VERBOSE
SELECT id, json_agg(id), json_agg(tag1), json_agg(value1), json_agg(value2), json_agg(value3), json_agg(value5), json_agg(str1) FROM s7a ORDER BY id;
ERROR:  column "s7a.id" must appear in the GROUP BY clause or be used in an aggregate function
LINE 2: SELECT id, json_agg(id), json_agg(tag1), json_agg(value1), j...
               ^
-- select json_agg (result)
--Testcase 3490:
SELECT id, json_agg(id), json_agg(tag1), json_agg(value1), json_agg(value2), json_agg(value3), json_agg(value5), json_agg(str1) FROM s7a ORDER BY id;
ERROR:  column "s7a.id" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT id, json_agg(id), json_agg(tag1), json_agg(value1), j...
               ^
-- select json_agg with group by (explain)
--Testcase 3491:
EXPLAIN VERBOSE
SELECT tag1, json_agg(value3) FROM s7a GROUP BY tag1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=458.91..461.41 rows=200 width=64)
   Output: tag1, json_agg(value3)
   Group Key: s7a.tag1
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=40)
         Output: tag1, value3
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value3` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value3 FROM public.s7a1mysql
(10 rows)

-- select json_agg with group by (result)
--Testcase 3492:
SELECT tag1, json_agg(value3) FROM s7a GROUP BY tag1;
 tag1 |      json_agg      
------+--------------------
 a    | [-0.1, -0.2, -0.3]
 b    | [-1.1, -2.2, -3.3]
(2 rows)

-- select json_agg with group by (explain)
--Testcase 3493:
EXPLAIN VERBOSE
SELECT tag1, json_agg(value3 + 1) FROM s7a GROUP BY tag1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=475.97..478.47 rows=200 width=64)
   Output: tag1, json_agg((value3 + '1'::double precision))
   Group Key: s7a.tag1
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=40)
         Output: tag1, value3
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value3` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value3 FROM public.s7a1mysql
(10 rows)

-- select json_agg with group by (result)
--Testcase 3494:
SELECT tag1, json_agg(value3 + 1) FROM s7a GROUP BY tag1;
 tag1 |                     json_agg                      
------+---------------------------------------------------
 a    | [0.9, 0.8, 0.7]
 b    | [-0.10000000000000009, -1.2000000000000002, -2.3]
(2 rows)

-- select json_agg with stub function (explain)
--Testcase 3495:
EXPLAIN VERBOSE
SELECT tag1, json_agg(abs(value3)) FROM s7a GROUP BY tag1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=475.97..478.47 rows=200 width=64)
   Output: tag1, json_agg(abs(value3))
   Group Key: s7a.tag1
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=40)
         Output: tag1, value3
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value3` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value3 FROM public.s7a1mysql
(10 rows)

-- select json_agg with stub function (result)
--Testcase 3496:
SELECT tag1, json_agg(abs(value3)) FROM s7a GROUP BY tag1;
 tag1 |    json_agg     
------+-----------------
 a    | [0.1, 0.2, 0.3]
 b    | [1.1, 2.2, 3.3]
(2 rows)

-- select json_agg with group by having (explain)
--Testcase 3497:
EXPLAIN VERBOSE
SELECT tag1, json_agg(value3) FROM s7a GROUP BY 1, value1 HAVING json_agg(value3) IS NOT NULL;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 HashAggregate  (cost=475.97..478.47 rows=199 width=72)
   Output: tag1, json_agg(value3), value1
   Group Key: s7a.tag1, s7a.value1
   Filter: (json_agg(s7a.value3) IS NOT NULL)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=48)
         Output: tag1, value1, value3
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value1`, `value3` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value1, value3 FROM public.s7a1mysql
(11 rows)

-- select json_agg with group by having (result)
--Testcase 3498:
SELECT tag1, json_agg(value3) FROM s7a GROUP BY 1, value1 HAVING json_agg(value3) IS NOT NULL;
 tag1 | json_agg 
------+----------
 b    | [-3.3]
 b    | [-1.1]
 a    | [-0.3]
 b    | [-2.2]
 a    | [-0.1]
 a    | [-0.2]
(6 rows)

-- select json_agg with group by having (explain)
--Testcase 3499:
EXPLAIN VERBOSE
SELECT tag1, json_agg(value3 + 1) FROM s7a GROUP BY 1, value1 HAVING json_agg(value3 + 1) IS NOT NULL;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 HashAggregate  (cost=493.04..495.54 rows=199 width=72)
   Output: tag1, json_agg((value3 + '1'::double precision)), value1
   Group Key: s7a.tag1, s7a.value1
   Filter: (json_agg((s7a.value3 + '1'::double precision)) IS NOT NULL)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=48)
         Output: tag1, value1, value3
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value1`, `value3` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value1, value3 FROM public.s7a1mysql
(11 rows)

-- select json_agg with group by having (result)
--Testcase 3500:
SELECT tag1, json_agg(value3 + 1) FROM s7a GROUP BY 1, value1 HAVING json_agg(value3 + 1) IS NOT NULL;
 tag1 |        json_agg        
------+------------------------
 b    | [-2.3]
 b    | [-0.10000000000000009]
 a    | [0.7]
 b    | [-1.2000000000000002]
 a    | [0.9]
 a    | [0.8]
(6 rows)

-- select json_agg with group by having (explain)
--Testcase 3501:
EXPLAIN VERBOSE
SELECT tag1, json_agg(abs(value3)) FROM s7a GROUP BY 1, value1 HAVING json_agg(abs(value3)) IS NOT NULL;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 HashAggregate  (cost=493.04..495.54 rows=199 width=72)
   Output: tag1, json_agg(abs(value3)), value1
   Group Key: s7a.tag1, s7a.value1
   Filter: (json_agg(abs(s7a.value3)) IS NOT NULL)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=48)
         Output: tag1, value1, value3
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value1`, `value3` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value1, value3 FROM public.s7a1mysql
(11 rows)

-- select json_agg with group by having (result)
--Testcase 3502:
SELECT tag1, json_agg(abs(value3)) FROM s7a GROUP BY 1, value1 HAVING json_agg(abs(value3)) IS NOT NULL;
 tag1 | json_agg 
------+----------
 b    | [3.3]
 b    | [1.1]
 a    | [0.3]
 b    | [2.2]
 a    | [0.1]
 a    | [0.2]
(6 rows)

-- ===================================================================
-- test JSON_OBJECTAGG() PGSPIDER push down in single node only
-- ===================================================================
-- select json_objectagg (explain)
--Testcase 3503:
EXPLAIN VERBOSE
SELECT json_object_agg(tag1, str1), json_object_agg(id, value4) FROM s7a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Aggregate  (cost=2148.35..2148.36 rows=1 width=64)
   Output: json_object_agg(tag1, str1), json_object_agg(id, value4)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=72)
         Output: tag1, str1, id, value4
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value4`, `str1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value4, str1 FROM public.s7a1mysql
(9 rows)

-- select json_objectagg (result)
--Testcase 3504:
SELECT json_object_agg(tag1, str1), json_object_agg(id, value4) FROM s7a;
ERROR:  stub json_object_agg_sfunc(text, text, anyelement) is called
CONTEXT:  PL/pgSQL function json_object_agg_sfunc(text,text,anyelement) line 3 at RAISE
-- select json_objectagg with group by (explain)
--Testcase 3505:
EXPLAIN VERBOSE
SELECT id, json_object_agg(tag1, str1) FROM s7a GROUP BY id;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=2148.34..2150.34 rows=200 width=36)
   Output: id, json_object_agg(tag1, str1)
   Group Key: s7a.id
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=68)
         Output: id, tag1, str1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `str1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, str1 FROM public.s7a1mysql
(10 rows)

-- select json_objectagg with group by (result)
--Testcase 3506:
SELECT id, json_object_agg(tag1, str1) FROM s7a GROUP BY id;
ERROR:  stub json_object_agg_sfunc(text, text, anyelement) is called
CONTEXT:  PL/pgSQL function json_object_agg_sfunc(text,text,anyelement) line 3 at RAISE
-- select json_objectagg with group by (explain)
--Testcase 3507:
EXPLAIN VERBOSE
SELECT id, json_object_agg(tag1, value2 + 1) FROM s7a GROUP BY id;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2167.41 rows=200 width=36)
   Output: id, json_object_agg(tag1, (value2 + 1))
   Group Key: s7a.id
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=40)
         Output: id, tag1, value2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value2` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value2 FROM public.s7a1mysql
(10 rows)

-- select json_objectagg with group by (result)
--Testcase 3508:
SELECT id, json_object_agg(tag1, value2 + 1) FROM s7a GROUP BY id;
ERROR:  stub json_object_agg_sfunc(text, text, anyelement) is called
CONTEXT:  PL/pgSQL function json_object_agg_sfunc(text,text,anyelement) line 3 at RAISE
-- select json_objectagg with stub function (explain)
--Testcase 3509:
EXPLAIN VERBOSE
SELECT id, json_object_agg(tag1, abs(value2)) FROM s7a GROUP BY id;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2167.41 rows=200 width=36)
   Output: id, json_object_agg(tag1, abs(value2))
   Group Key: s7a.id
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=40)
         Output: id, tag1, value2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value2` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value2 FROM public.s7a1mysql
(10 rows)

-- select json_objectagg with stub function (result)
--Testcase 3510:
SELECT id, json_object_agg(tag1, abs(value2)) FROM s7a GROUP BY id;
ERROR:  stub json_object_agg_sfunc(text, text, anyelement) is called
CONTEXT:  PL/pgSQL function json_object_agg_sfunc(text,text,anyelement) line 3 at RAISE
-- select json_objectagg with group by having (explain)
--Testcase 3511:
EXPLAIN VERBOSE
SELECT id, json_object_agg(tag1, str1) FROM s7a GROUP BY 1, value1 HAVING json_object_agg(tag1, str1) IS NOT NULL;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2167.41 rows=199 width=44)
   Output: id, json_object_agg(tag1, str1), value1
   Group Key: s7a.id, s7a.value1
   Filter: (json_object_agg(s7a.tag1, s7a.str1) IS NOT NULL)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=76)
         Output: id, value1, tag1, str1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value1`, `str1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value1, str1 FROM public.s7a1mysql
(11 rows)

-- select json_objectagg with group by having (result)
--Testcase 3512:
SELECT id, json_object_agg(tag1, str1) FROM s7a GROUP BY 1, value1 HAVING json_object_agg(tag1, str1) IS NOT NULL;
ERROR:  stub json_object_agg_sfunc(text, text, anyelement) is called
CONTEXT:  PL/pgSQL function json_object_agg_sfunc(text,text,anyelement) line 3 at RAISE
-- select json_objectagg with group by having (explain)
--Testcase 3513:
EXPLAIN VERBOSE
SELECT id, json_object_agg(tag1, str1) FROM s7a GROUP BY 1, value1 HAVING json_object_agg(tag1, abs(value2 + 1)) IS NOT NULL;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 HashAggregate  (cost=3906.04..3908.04 rows=199 width=44)
   Output: id, json_object_agg(tag1, str1), value1
   Group Key: s7a.id, s7a.value1
   Filter: (json_object_agg(s7a.tag1, abs((s7a.value2 + 1))) IS NOT NULL)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=80)
         Output: id, value1, tag1, str1, value2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value1`, `value2`, `str1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value1, value2, str1 FROM public.s7a1mysql
(11 rows)

-- select json_objectagg with group by having (result)
--Testcase 3514:
SELECT id, json_object_agg(tag1, str1) FROM s7a GROUP BY 1, value1 HAVING json_object_agg(tag1, abs(value2 + 1)) IS NOT NULL;
ERROR:  stub json_object_agg_sfunc(text, text, anyelement) is called
CONTEXT:  PL/pgSQL function json_object_agg_sfunc(text,text,anyelement) line 3 at RAISE
-- ===================================================================
-- test STD()
-- ===================================================================
-- select std (explain)
--Testcase 3515:
EXPLAIN VERBOSE
SELECT std(id), std(tag1), std(value1), std(value2), std(value3), std(str1) FROM s7a;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Aggregate  (cost=10663.78..10663.79 rows=1 width=48)
   Output: std(id), std(tag1), std(value1), std(value2), std(value3), std(str1)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=88)
         Output: id, tag1, value1, value2, value3, str1
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, `tag1`, `value1`, `value2`, `value3`, `str1` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, tag1, value1, value2, value3, str1 FROM public.s7a1mysql
(9 rows)

-- select std (result)
--Testcase 3516:
SELECT std(id), std(tag1), std(value1), std(value2), std(value3), std(str1) FROM s7a;
ERROR:  stub std_sfunc(double precision, anyelement) is called
CONTEXT:  PL/pgSQL function std_sfunc(double precision,anyelement) line 3 at RAISE
-- select std with group by (explain)
--Testcase 3517:
EXPLAIN VERBOSE
SELECT tag1, std(value4) FROM s7a GROUP BY tag1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=2148.34..2150.34 rows=200 width=40)
   Output: tag1, std(value4)
   Group Key: s7a.tag1
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=36)
         Output: tag1, value4
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value4` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value4 FROM public.s7a1mysql
(10 rows)

-- select std with group by (result)
--Testcase 3518:
SELECT tag1, std(value4) FROM s7a GROUP BY tag1;
ERROR:  stub std_sfunc(double precision, anyelement) is called
CONTEXT:  PL/pgSQL function std_sfunc(double precision,anyelement) line 3 at RAISE
-- select std with group by (explain)
--Testcase 3519:
EXPLAIN VERBOSE
SELECT tag1, std(value4 + 1) FROM s7a GROUP BY tag1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2167.41 rows=200 width=40)
   Output: tag1, std((value4 + 1))
   Group Key: s7a.tag1
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=36)
         Output: tag1, value4
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value4` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value4 FROM public.s7a1mysql
(10 rows)

-- select std with group by (result)
--Testcase 3520:
SELECT tag1, std(value4 + 1) FROM s7a GROUP BY tag1;
ERROR:  stub std_sfunc(double precision, anyelement) is called
CONTEXT:  PL/pgSQL function std_sfunc(double precision,anyelement) line 3 at RAISE
-- select std with stub function (explain)
--Testcase 3521:
EXPLAIN VERBOSE
SELECT tag1, std(abs(value4 + 1)) FROM s7a GROUP BY tag1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=2182.47..2184.47 rows=200 width=40)
   Output: tag1, std(abs((value4 + 1)))
   Group Key: s7a.tag1
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=36)
         Output: tag1, value4
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value4` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value4 FROM public.s7a1mysql
(10 rows)

-- select std with stub function (result)
--Testcase 3522:
SELECT tag1, std(abs(value4 + 1)) FROM s7a GROUP BY tag1;
ERROR:  stub std_sfunc(double precision, anyelement) is called
CONTEXT:  PL/pgSQL function std_sfunc(double precision,anyelement) line 3 at RAISE
-- select std with group by having (explain)
--Testcase 3523:
EXPLAIN VERBOSE
SELECT tag1, std(value4) FROM s7a GROUP BY tag1 HAVING  std(value4) > 0;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=2148.34..2150.84 rows=67 width=40)
   Output: tag1, std(value4)
   Group Key: s7a.tag1
   Filter: (std(s7a.value4) > '0'::double precision)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=36)
         Output: tag1, value4
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value4` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value4 FROM public.s7a1mysql
(11 rows)

-- select std with group by having (result)
--Testcase 3524:
SELECT tag1, std(value4) FROM s7a GROUP BY tag1 HAVING  std(value4) > 0;
ERROR:  stub std_sfunc(double precision, anyelement) is called
CONTEXT:  PL/pgSQL function std_sfunc(double precision,anyelement) line 3 at RAISE
-- select std with group by having (explain)
--Testcase 3525:
EXPLAIN VERBOSE
SELECT tag1, std(value4) FROM s7a GROUP BY tag1 HAVING std(abs(value4 + 1)) = 0;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=3888.97..3891.47 rows=1 width=40)
   Output: tag1, std(value4)
   Group Key: s7a.tag1
   Filter: (std(abs((s7a.value4 + 1))) = '0'::double precision)
   ->  Foreign Scan on public.s7a  (cost=200.00..424.78 rows=6826 width=36)
         Output: tag1, value4
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `tag1`, `value4` FROM `test`.`s7a2`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value4 FROM public.s7a1mysql
(11 rows)

-- select std with group by having (result)
--Testcase 3526:
SELECT tag1, std(value4) FROM s7a GROUP BY tag1 HAVING std(abs(value4 + 1)) = 0;
ERROR:  stub std_sfunc(double precision, anyelement) is called
CONTEXT:  PL/pgSQL function std_sfunc(double precision,anyelement) line 3 at RAISE
-- test for JSON function
--Testcase 3527:
CREATE FOREIGN TABLE s8 (id int, c1 json, c2 int, c3 text, __spd_url text) SERVER pgspider_core_svr;
--Testcase 3528:
CREATE FOREIGN TABLE s9 (id int, c1 json, __spd_url text) SERVER pgspider_core_svr;
--Testcase 3529:
CREATE FOREIGN TABLE s8__pgspider_svr__0 (id int, c1 json, c2 int, c3 text, __spd_url text) SERVER pgspider_svr OPTIONS (table_name 's81mysql');
--Testcase 3530:
CREATE FOREIGN TABLE s9__pgspider_svr__0 (id int,  c1 json,__spd_url text) SERVER pgspider_svr OPTIONS (table_name 's91mysql');
--Testcase 3531:
CREATE FOREIGN TABLE s8__mysql_svr__0 (id int, c1 json, c2 int, c3 text) SERVER mysql_svr OPTIONS(dbname 'test', table_name 's82');
--Testcase 3532:
CREATE FOREIGN TABLE s9__mysql_svr__0 (id int, c1 json) SERVER mysql_svr OPTIONS(dbname 'test', table_name 's92');
--Testcase 3533:
SELECT * FROM s8 ORDER BY 1;
 id |                            c1                             | c2 |   c3   |        __spd_url         
----+-----------------------------------------------------------+----+--------+--------------------------
  0 | [[1, 2], [3, 4], 5]                                       |  1 | This   | /pgspider_svr/mysql_svr/
  1 | []                                                        |  2 | is     | /pgspider_svr/mysql_svr/
  2 | {}                                                        |  3 | text   | /pgspider_svr/mysql_svr/
  3 | {"a": "10", "b": "15", "x": 25}                           |  4 | scalar | /mysql_svr/
  4 | {"a": 1, "b": 2, "c": {"d": 4}}                           |  5 | scalar | /mysql_svr/
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}] |  5 | scalar | /mysql_svr/
(6 rows)

--Testcase 3534:
SELECT * FROM s9 ORDER BY 1;
 id |                                                                                                                                                                        c1                                                                                                                                                                        |        __spd_url         
----+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------
  0 | {"id": "http://json-schema.org/geo", "type": "object", "$schema": "http://json-schema.org/draft-04/schema#", "required": ["latitude", "longitude"], "properties": {"latitude": {"type": "number", "maximum": 90, "minimum": -90}, "longitude": {"type": "number", "maximum": 180, "minimum": -180}}, "description": "A geographical coordinate"} | /pgspider_svr/mysql_svr/
  1 | {"id": "http://json-schema.org/geo", "type": "object", "$schema": "http://json-schema.org/draft-04/schema#", "properties": {"latitude": {"type": "number", "maximum": 9, "minimum": -9}, "longitude": {"type": "number", "maximum": 18, "minimum": -18}}, "description": "A geographical coordinate"}                                            | /mysql_svr/
(2 rows)

-- select json_build_array (builtin function, explain)
--Testcase 3535:
EXPLAIN VERBOSE
SELECT json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, 1), json_build_array(c1, 'a'), json_build_array(c1, mysql_pi()) FROM s8;
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2216.61 rows=6826 width=160)
   Output: (json_build_array(c1, c2)), (json_build_array(c1, c3)), (json_build_array(c1, 1)), (json_build_array(c1, 'a')), (json_build_array(c1, mysql_pi()))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array(`c1`, `c2`), json_array(`c1`, `c3`), json_array(`c1`, 1), json_array(`c1`, 'a'), json_array(`c1`, pi()) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, 1), json_build_array(c1, 'a'), json_build_array(c1, public.mysql_pi()) FROM public.s81mysql
(7 rows)

-- select json_build_array (builtin function, result)
--Testcase 3536:
SELECT * FROM (
SELECT id, json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, 1), json_build_array(c1, 'a'), json_build_array(c1, mysql_pi()) FROM s8
) AS t ORDER BY 1;
 id |                        json_build_array                        |                           json_build_array                            |                        json_build_array                        |                         json_build_array                         |                                json_build_array                                
----+----------------------------------------------------------------+-----------------------------------------------------------------------+----------------------------------------------------------------+------------------------------------------------------------------+--------------------------------------------------------------------------------
  0 | [[[1, 2], [3, 4], 5], 1]                                       | [[[1, 2], [3, 4], 5], "This"]                                         | [[[1, 2], [3, 4], 5], 1]                                       | [[[1, 2], [3, 4], 5], "a"]                                       | [[[1, 2], [3, 4], 5], 3.141592653589793]
  1 | [[], 2]                                                        | [[], "is"]                                                            | [[], 1]                                                        | [[], "a"]                                                        | [[], 3.141592653589793]
  2 | [{}, 3]                                                        | [{}, "text"]                                                          | [{}, 1]                                                        | [{}, "a"]                                                        | [{}, 3.141592653589793]
  3 | [{"a": "10", "b": "15", "x": 25}, 4]                           | [{"a": "10", "b": "15", "x": 25}, "scalar"]                           | [{"a": "10", "b": "15", "x": 25}, 1]                           | [{"a": "10", "b": "15", "x": 25}, "a"]                           | [{"a": "10", "b": "15", "x": 25}, 3.141592653589793]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, 5]                           | [{"a": 1, "b": 2, "c": {"d": 4}}, "scalar"]                           | [{"a": 1, "b": 2, "c": {"d": 4}}, 1]                           | [{"a": 1, "b": 2, "c": {"d": 4}}, "a"]                           | [{"a": 1, "b": 2, "c": {"d": 4}}, 3.141592653589793]
  5 | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], 5] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "scalar"] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], 1] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "a"] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], 3.141592653589793]
(6 rows)

-- select json_build_array (builtin function, not pushdown constraints, explain)
--Testcase 3537:
EXPLAIN VERBOSE
SELECT json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, NULL), json_build_array(c1, TRUE), json_build_array(c1, mysql_pi()) FROM s8 WHERE to_hex(id) = '1';
                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..399.65 rows=34 width=160)
   Output: (json_build_array(c1, c2)), (json_build_array(c1, c3)), (json_build_array(c1, NULL::unknown)), (json_build_array(c1, true)), (json_build_array(c1, mysql_pi()))
   Filter: (to_hex(s8.id) = '1'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array(`c1`, `c2`), json_array(`c1`, `c3`), json_array(`c1`, NULL), json_array(`c1`, true), json_array(`c1`, pi()), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, NULL::unknown), json_build_array(c1, true), json_build_array(c1, public.mysql_pi()), id FROM public.s81mysql
(8 rows)

-- select json_build_array (builtin function, not pushdown constraints, result)
--Testcase 3538:
SELECT * FROM (
SELECT id, json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, NULL), json_build_array(c1, TRUE), json_build_array(c1, mysql_pi()) FROM s8 WHERE to_hex(id) = '1'
) AS t ORDER BY 1;
 id | json_build_array | json_build_array | json_build_array | json_build_array |    json_build_array     
----+------------------+------------------+------------------+------------------+-------------------------
  1 | [[], 2]          | [[], "is"]       | [[], null]       | [[], true]       | [[], 3.141592653589793]
(1 row)

-- select json_build_array (builtin function, pushdown constraints, explain)
--Testcase 3539:
EXPLAIN VERBOSE
SELECT json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, 1), json_build_array(c1, 'a'), json_build_array(c1, '[true, false]'::json) FROM s8 WHERE id = 1;
                                                                                                    QUERY PLAN                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..306.43 rows=34 width=160)
   Output: (json_build_array(c1, c2)), (json_build_array(c1, c3)), (json_build_array(c1, 1)), (json_build_array(c1, 'a')), (json_build_array(c1, '[true, false]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array(`c1`, `c2`), json_array(`c1`, `c3`), json_array(`c1`, 1), json_array(`c1`, 'a'), json_array(`c1`, CAST('[true, false]' AS JSON)) FROM `test`.`s82` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, 1), json_build_array(c1, 'a'), json_build_array(c1, '[true, false]'::json) FROM public.s81mysql WHERE ((id = 1))
(7 rows)

-- select json_build_array (builtin function, pushdown constraints, result)
--Testcase 3540:
SELECT * FROM (
SELECT id, json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, 1), json_build_array(c1, 'a'), json_build_array(c1, '[true, false]'::json) FROM s8 WHERE id = 1
) AS t ORDER BY 1;
 id | json_build_array | json_build_array | json_build_array | json_build_array |  json_build_array   
----+------------------+------------------+------------------+------------------+---------------------
  1 | [[], 2]          | [[], "is"]       | [[], 1]          | [[], "a"]        | [[], [true, false]]
(1 row)

-- select json_build_array (builtin function, builtin in constraints, explain)
--Testcase 3541:
EXPLAIN VERBOSE
SELECT json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, NULL), json_build_array(c1, TRUE), json_build_array(c1, '[true, false]') FROM s8 WHERE json_length(json_build_array(c1, c2)) > 1;
                                                                                                                            QUERY PLAN                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2102.86 rows=2276 width=160)
   Output: (json_build_array(c1, c2)), (json_build_array(c1, c3)), (json_build_array(c1, NULL::unknown)), (json_build_array(c1, true)), (json_build_array(c1, '[true, false]'))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array(`c1`, `c2`), json_array(`c1`, `c3`), json_array(`c1`, NULL), json_array(`c1`, true), json_array(`c1`, '[true, false]') FROM `test`.`s82` WHERE ((json_length(json_array(`c1`, `c2`)) > 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, NULL::unknown), json_build_array(c1, true), json_build_array(c1, '[true, false]') FROM public.s81mysql WHERE ((public.json_length(json_build_array(c1, c2)) > 1))
(7 rows)

-- select json_build_array (builtin function, builtin in constraints, result)
--Testcase 3542:
SELECT * FROM (
SELECT id, json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, NULL), json_build_array(c1, TRUE), json_build_array(c1, '[true, false]') FROM s8 WHERE json_length(json_build_array(c1, c2)) > 1
) AS t ORDER BY 1;
 id |                        json_build_array                        |                           json_build_array                            |                         json_build_array                          |                         json_build_array                          |                               json_build_array                               
----+----------------------------------------------------------------+-----------------------------------------------------------------------+-------------------------------------------------------------------+-------------------------------------------------------------------+------------------------------------------------------------------------------
  0 | [[[1, 2], [3, 4], 5], 1]                                       | [[[1, 2], [3, 4], 5], "This"]                                         | [[[1, 2], [3, 4], 5], null]                                       | [[[1, 2], [3, 4], 5], true]                                       | [[[1, 2], [3, 4], 5], "[true, false]"]
  1 | [[], 2]                                                        | [[], "is"]                                                            | [[], null]                                                        | [[], true]                                                        | [[], "[true, false]"]
  2 | [{}, 3]                                                        | [{}, "text"]                                                          | [{}, null]                                                        | [{}, true]                                                        | [{}, "[true, false]"]
  3 | [{"a": "10", "b": "15", "x": 25}, 4]                           | [{"a": "10", "b": "15", "x": 25}, "scalar"]                           | [{"a": "10", "b": "15", "x": 25}, null]                           | [{"a": "10", "b": "15", "x": 25}, true]                           | [{"a": "10", "b": "15", "x": 25}, "[true, false]"]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, 5]                           | [{"a": 1, "b": 2, "c": {"d": 4}}, "scalar"]                           | [{"a": 1, "b": 2, "c": {"d": 4}}, null]                           | [{"a": 1, "b": 2, "c": {"d": 4}}, true]                           | [{"a": 1, "b": 2, "c": {"d": 4}}, "[true, false]"]
  5 | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], 5] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "scalar"] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], null] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], true] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[true, false]"]
(6 rows)

-- select json_build_array (builtin function, builtin in constraints, explain)
--Testcase 3543:
EXPLAIN VERBOSE
SELECT json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, 1), json_build_array(c1, 'a'), json_build_array(c1, mysql_pi()) FROM s8 WHERE json_length(json_build_array(c1, c2)) > id;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2671.86 rows=2276 width=160)
   Output: (json_build_array(c1, c2)), (json_build_array(c1, c3)), (json_build_array(c1, 1)), (json_build_array(c1, 'a')), (json_build_array(c1, mysql_pi()))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array(`c1`, `c2`), json_array(`c1`, `c3`), json_array(`c1`, 1), json_array(`c1`, 'a'), json_array(`c1`, pi()) FROM `test`.`s82` WHERE ((json_length(json_array(`c1`, `c2`)) > `id`))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, 1), json_build_array(c1, 'a'), json_build_array(c1, public.mysql_pi()) FROM public.s81mysql WHERE ((public.json_length(json_build_array(c1, c2)) > id))
(7 rows)

-- select json_build_array (builtin function, builtin in constraints, result)
--Testcase 3544:
SELECT * FROM (
SELECT id, json_build_array(c1, c2), json_build_array(c1, c3), json_build_array(c1, 1), json_build_array(c1, 'a'), json_build_array(c1, mysql_pi()) FROM s8 WHERE json_length(json_build_array(c1, c2)) > id
) AS t ORDER BY 1;
 id |     json_build_array     |       json_build_array        |     json_build_array     |      json_build_array      |             json_build_array             
----+--------------------------+-------------------------------+--------------------------+----------------------------+------------------------------------------
  0 | [[[1, 2], [3, 4], 5], 1] | [[[1, 2], [3, 4], 5], "This"] | [[[1, 2], [3, 4], 5], 1] | [[[1, 2], [3, 4], 5], "a"] | [[[1, 2], [3, 4], 5], 3.141592653589793]
  1 | [[], 2]                  | [[], "is"]                    | [[], 1]                  | [[], "a"]                  | [[], 3.141592653589793]
(2 rows)

-- select json_build_array as nest function with agg (not pushdown, explain)
--Testcase 3545:
EXPLAIN VERBOSE
SELECT sum(id),json_build_array('["a", ["b", "c"], "d"]',  sum(id)) FROM s8;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=40)
   Output: (sum(id)), json_build_array('["a", ["b", "c"], "d"]', (sum(id)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_build_array as nest function with agg (not pushdown, result)
--Testcase 3546:
SELECT sum(id),json_build_array('["a", ["b", "c"], "d"]',  sum(id)) FROM s8;
 sum |            json_build_array            
-----+----------------------------------------
  15 | ["[\"a\", [\"b\", \"c\"], \"d\"]", 15]
(1 row)

-- select json_build_array with non pushdown func and explicit constant (explain)
--Testcase 3547:
EXPLAIN VERBOSE
SELECT json_build_array(c1, c2), pi(), 4.1 FROM s8;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..441.84 rows=6826 width=72)
   Output: (json_build_array(c1, c2)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array(`c1`, `c2`), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT json_build_array(c1, c2), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_build_array with non pushdown func and explicit constant (result)
--Testcase 3548:
SELECT * FROM (
SELECT id, json_build_array(c1, c2), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id |                        json_build_array                        |        pi         | ?column? 
----+----------------------------------------------------------------+-------------------+----------
  0 | [[[1, 2], [3, 4], 5], 1]                                       | 3.141592653589793 |      4.1
  1 | [[], 2]                                                        | 3.141592653589793 |      4.1
  2 | [{}, 3]                                                        | 3.141592653589793 |      4.1
  3 | [{"a": "10", "b": "15", "x": 25}, 4]                           | 3.141592653589793 |      4.1
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, 5]                           | 3.141592653589793 |      4.1
  5 | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], 5] | 3.141592653589793 |      4.1
(6 rows)

-- select json_build_array with order by (explain)
--Testcase 3549:
EXPLAIN VERBOSE
SELECT json_length(json_build_array(c1, c2)) FROM s8 ORDER BY 1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=4)
   Output: (json_length(json_build_array(c1, c2)))
   Sort Key: (json_length(json_build_array(s8.c1, s8.c2)))
   ->  Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=4)
         Output: (json_length(json_build_array(c1, c2)))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT json_length(json_array(`c1`, `c2`)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.json_length(json_build_array(c1, c2)) FROM public.s81mysql
(12 rows)

-- select json_build_array with order by (result)
--Testcase 3550:
SELECT json_length(json_build_array(c1, c2)) FROM s8 ORDER BY 1;
 json_length 
-------------
           2
           2
           2
           2
           2
           2
(6 rows)

-- select json_build_array with group by (explain)
--Testcase 3551:
EXPLAIN VERBOSE
SELECT json_length(json_build_array('["a", ["b", "c"], "d"]',  id)) FROM s8 GROUP BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.91 rows=200 width=4)
   Output: (json_length(json_build_array('["a", ["b", "c"], "d"]', id)))
   Group Key: (json_length(json_build_array('["a", ["b", "c"], "d"]', s8.id)))
   ->  Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=4)
         Output: (json_length(json_build_array('["a", ["b", "c"], "d"]', id)))
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_array('["a", ["b", "c"], "d"]', `id`)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(json_build_array('["a", ["b", "c"], "d"]', id)) FROM public.s81mysql
(10 rows)

-- select json_build_array with group by (result)
--Testcase 3552:
SELECT * FROM (
SELECT id, json_length(json_build_array('["a", ["b", "c"], "d"]',  id)) FROM s8 GROUP BY 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           2
  1 |           2
  2 |           2
  3 |           2
  4 |           2
  5 |           2
(6 rows)

-- select json_build_array with group by having (explain)
--Testcase 3553:
EXPLAIN VERBOSE
SELECT id, json_length(json_build_array('["a", ["b", "c"], "d"]',  c2)), c2 FROM s8 GROUP BY 1, 2, 3 HAVING count(c2) > 1;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2216.61..2236.02 rows=67 width=12)
   Output: id, (json_length(json_build_array('["a", ["b", "c"], "d"]', c2))), c2
   Group Key: s8.id, (json_length(json_build_array('["a", ["b", "c"], "d"]', s8.c2))), s8.c2
   Filter: (count(s8.c2) > 1)
   ->  Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=12)
         Output: id, (json_length(json_build_array('["a", ["b", "c"], "d"]', c2))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, json_length(json_array('["a", ["b", "c"], "d"]', `c2`)), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, public.json_length(json_build_array('["a", ["b", "c"], "d"]', c2)), c2 FROM public.s81mysql
(11 rows)

-- select json_build_array with group by having (result)
--Testcase 3554:
SELECT * FROM (
SELECT id, json_length(json_build_array('["a", ["b", "c"], "d"]',  c2)), c2 FROM s8 GROUP BY 1, 2, 3 HAVING count(c2) > 1
) AS t ORDER BY 1;
 id | json_length | c2 
----+-------------+----
(0 rows)

-- select json_build_array and as
--Testcase 3555:
SELECT * FROM (
SELECT id, json_build_array(c1, c2) AS json_build_array1 FROM s8
) AS t ORDER BY 1;
 id |                       json_build_array1                        
----+----------------------------------------------------------------
  0 | [[[1, 2], [3, 4], 5], 1]
  1 | [[], 2]
  2 | [{}, 3]
  3 | [{"a": "10", "b": "15", "x": 25}, 4]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, 5]
  5 | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], 5]
(6 rows)

-- json_array_append
-- select json_array_append (stub function, explain)
--Testcase 3556:
EXPLAIN VERBOSE
SELECT json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()') FROM s8;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_append(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1, '$[1]', 'a', '$[1]', pi()) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- select json_array_append (stub function, result)
--Testcase 3557:
SELECT * FROM (
SELECT id, json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()') FROM s8
) AS t ORDER BY 1;
 id |                                         json_array_append                                         
----+---------------------------------------------------------------------------------------------------
  0 | [[1, 2], [3, 4, 1, "This", 1, "a", 3.141592653589793], 5]
  1 | []
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def", 5, "scalar", 1, "a", 3.141592653589793], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- select json_array_append (stub function, not pushdown constraints, explain)
--Testcase 3558:
EXPLAIN VERBOSE
SELECT json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], NULL', '$[1], TRUE', '$[1], pi()') FROM s8 WHERE to_hex(id) = '1';
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..399.23 rows=34 width=32)
   Output: (json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', NULL","''$[1]'', TRUE","''$[1]'', pi()"}'::path_value[]))
   Filter: (to_hex(s8.id) = '1'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_append(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', NULL, '$[1]', TRUE, '$[1]', pi()), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', NULL","''$[1]'', TRUE","''$[1]'', pi()"}'::public.path_value[]), id FROM public.s81mysql
(8 rows)

-- select json_array_append (stub function, not pushdown constraints, result)
--Testcase 3559:
SELECT * FROM (
SELECT id, json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], NULL', '$[1], TRUE', '$[1], pi()') FROM s8 WHERE to_hex(id) = '1'
) AS t ORDER BY 1;
 id | json_array_append 
----+-------------------
  1 | []
(1 row)

-- select json_array_append (stub function, pushdown constraints, explain)
--Testcase 3560:
EXPLAIN VERBOSE
SELECT json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], CAST("[true, false]" AS JSON)') FROM s8 WHERE id = 1;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..314.50 rows=34 width=32)
   Output: (json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', CAST(\"[true, false]\" AS JSON)"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_append(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1, '$[1]', 'a', '$[1]', CAST("[true, false]" AS JSON)) FROM `test`.`s82` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_append(c1, VARIADIC E'{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', CAST(\\"[true, false]\\" AS JSON)"}'::public.path_value[]) FROM public.s81mysql WHERE ((id = 1))
(7 rows)

-- select json_array_append (stub function, pushdown constraints, result)
--Testcase 3561:
SELECT * FROM (
SELECT id, json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], CAST("[true, false]" AS JSON)') FROM s8 WHERE id = 1
) AS t ORDER BY 1;
 id | json_array_append 
----+-------------------
  1 | []
(1 row)

-- select json_array_append (stub function, stub in constraints, explain)
--Testcase 3562:
EXPLAIN VERBOSE
SELECT json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], NULL', '$[1], TRUE', '$[1], "[true, false]"') FROM s8 WHERE log2(id) > 1;
                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2643.41 rows=2276 width=32)
   Output: (json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', NULL","''$[1]'', TRUE","''$[1]'', ''[true, false]''"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_append(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', NULL, '$[1]', TRUE, '$[1]', '[true, false]') FROM `test`.`s82` WHERE ((log2(`id`) > 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', NULL","''$[1]'', TRUE","''$[1]'', ''[true, false]''"}'::public.path_value[]) FROM public.s81mysql WHERE ((public.log2(id) > 1::double precision))
(7 rows)

-- select json_array_append (stub function, stub in constraints, result)
--Testcase 3563:
SELECT * FROM (
SELECT id, json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], NULL', '$[1], TRUE', '$[1], "[true, false]"') FROM s8 WHERE log2(id) > 1
) AS t ORDER BY 1;
 id |                                          json_array_append                                          
----+-----------------------------------------------------------------------------------------------------
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def", 5, "scalar", null, true, "[true, false]"], {"x": "abc"}, {"y": "bcd"}]
(3 rows)

-- select json_array_append (stub function, stub in constraints, explain)
--Testcase 3564:
EXPLAIN VERBOSE
SELECT json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()') FROM s8 WHERE json_depth(json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()')) > 0;
                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..4332.85 rows=2276 width=32)
   Output: (json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_append(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1, '$[1]', 'a', '$[1]', pi()) FROM `test`.`s82` WHERE ((json_depth(json_array_append(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1, '$[1]', 'a', '$[1]', pi())) > 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::public.path_value[]) FROM public.s81mysql WHERE ((public.json_depth(public.json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::public.path_value[])) > 0))
(7 rows)

-- select json_array_append (stub function, stub in constraints, result)
--Testcase 3565:
SELECT * FROM (
SELECT id, json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()') FROM s8 WHERE json_depth(json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()')) > 0
) AS t ORDER BY 1;
 id |                                         json_array_append                                         
----+---------------------------------------------------------------------------------------------------
  0 | [[1, 2], [3, 4, 1, "This", 1, "a", 3.141592653589793], 5]
  1 | []
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def", 5, "scalar", 1, "a", 3.141592653589793], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_array_append with 1 arg explain
--Testcase 3566:
EXPLAIN VERBOSE
SELECT json_array_append(c1, '$[1], c2') FROM s8;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_array_append(c1, VARIADIC '{"''$[1]'', c2"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_append(`c1`, '$[1]', c2) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_append(c1, VARIADIC '{"''$[1]'', c2"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_array_append with 1 arg result
--Testcase 3567:
SELECT * FROM (
SELECT id, json_array_append(c1, '$[1], c2') FROM s8
) AS t ORDER BY 1;
 id |                      json_array_append                       
----+--------------------------------------------------------------
  0 | [[1, 2], [3, 4, 1], 5]
  1 | []
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def", 5], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_array_append with 2 args explain
--Testcase 3568:
EXPLAIN VERBOSE
SELECT json_array_append(c1, '$[1], c2', '$[1], c3') FROM s8;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_append(`c1`, '$[1]', c2, '$[1]', c3) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_array_append with 2 args result
--Testcase 3569:
SELECT * FROM (
SELECT id, json_array_append(c1, '$[1], c2', '$[1], c3') FROM s8
) AS t ORDER BY 1;
 id |                           json_array_append                            
----+------------------------------------------------------------------------
  0 | [[1, 2], [3, 4, 1, "This"], 5]
  1 | []
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def", 5, "scalar"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_array_append with 3 args explain
--Testcase 3570:
EXPLAIN VERBOSE
SELECT json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1') FROM s8;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_append(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_array_append with 3 args result
--Testcase 3571:
SELECT * FROM (
SELECT id, json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1') FROM s8
) AS t ORDER BY 1;
 id |                             json_array_append                             
----+---------------------------------------------------------------------------
  0 | [[1, 2], [3, 4, 1, "This", 1], 5]
  1 | []
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def", 5, "scalar", 1], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_array_append with 4 args explain
--Testcase 3572:
EXPLAIN VERBOSE
SELECT json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"') FROM s8;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_append(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1, '$[1]', 'a') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_array_append with 4 args result
--Testcase 3573:
SELECT * FROM (
SELECT id, json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"') FROM s8
) AS t ORDER BY 1;
 id |                               json_array_append                                
----+--------------------------------------------------------------------------------
  0 | [[1, 2], [3, 4, 1, "This", 1, "a"], 5]
  1 | []
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def", 5, "scalar", 1, "a"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_array_append with 5 args explain
--Testcase 3574:
EXPLAIN VERBOSE
SELECT json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()') FROM s8;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_append(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1, '$[1]', 'a', '$[1]', pi()) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_append(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_array_append with 5 args result
--Testcase 3575:
SELECT * FROM (
SELECT id, json_array_append(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()') FROM s8
) AS t ORDER BY 1;
 id |                                         json_array_append                                         
----+---------------------------------------------------------------------------------------------------
  0 | [[1, 2], [3, 4, 1, "This", 1, "a", 3.141592653589793], 5]
  1 | []
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def", 5, "scalar", 1, "a", 3.141592653589793], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- select json_array_append as nest function with agg (not pushdown, explain)
--Testcase 3576:
EXPLAIN VERBOSE
SELECT sum(id),json_array_append('["a", ["b", "c"], "d"]', '$[1], sum(id)') FROM s8;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_array_append('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', sum(id)"}'::path_value[])
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_array_append as nest function with agg (not pushdown, result, error)
--Testcase 3577:
SELECT sum(id),json_array_append('["a", ["b", "c"], "d"]', '$[1], sum(id)') FROM s8;
ERROR:  stub json_array_append(json, variadic path_value[]) is called
CONTEXT:  PL/pgSQL function json_array_append(json,path_value[]) line 3 at RAISE
-- select json_array_append as nest function with json_build_array (pushdown, explain)
--Testcase 3578:
EXPLAIN VERBOSE
SELECT json_array_append(json_build_array('["a", ["b", "c"], "d"]', c1), '$[1], log2(id)') FROM s8;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=32)
   Output: (json_array_append(json_build_array('["a", ["b", "c"], "d"]', c1), VARIADIC '{"''$[1]'', log2(id)"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_append(json_array('["a", ["b", "c"], "d"]', `c1`), '$[1]', log2(id)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_append(json_build_array('["a", ["b", "c"], "d"]', c1), VARIADIC '{"''$[1]'', log2(id)"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- select json_array_append as nest function with json_build_array (pushdown, result)
--Testcase 3579:
SELECT * FROM (
SELECT id, json_array_append(json_build_array('["a", ["b", "c"], "d"]', c1), '$[1], log2(id)') FROM s8
) AS t ORDER BY 1;
 id |                                                json_array_append                                                 
----+------------------------------------------------------------------------------------------------------------------
  0 | ["[\"a\", [\"b\", \"c\"], \"d\"]", [[1, 2], [3, 4], 5, null]]
  1 | ["[\"a\", [\"b\", \"c\"], \"d\"]", [0.0]]
  2 | ["[\"a\", [\"b\", \"c\"], \"d\"]", [{}, 1.0]]
  3 | ["[\"a\", [\"b\", \"c\"], \"d\"]", [{"a": "10", "b": "15", "x": 25}, 1.584962500721156]]
  4 | ["[\"a\", [\"b\", \"c\"], \"d\"]", [{"a": 1, "b": 2, "c": {"d": 4}}, 2.0]]
  5 | ["[\"a\", [\"b\", \"c\"], \"d\"]", ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 2.321928094887362]]
(6 rows)

-- select json_array_append with non pushdown func and explicit constant (explain)
--Testcase 3580:
EXPLAIN VERBOSE
SELECT json_array_append(c1, '$[1], c2'), pi(), 4.1 FROM s8;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (json_array_append(c1, VARIADIC '{"''$[1]'', c2"}'::path_value[])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_append(`c1`, '$[1]', c2), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_append(c1, VARIADIC '{"''$[1]'', c2"}'::public.path_value[]), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_array_append with non pushdown func and explicit constant (result)
--Testcase 3581:
SELECT * FROM (
SELECT id, json_array_append(c1, '$[1], c2'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id |                      json_array_append                       |        pi         | ?column? 
----+--------------------------------------------------------------+-------------------+----------
  0 | [[1, 2], [3, 4, 1], 5]                                       | 3.141592653589793 |      4.1
  1 | []                                                           | 3.141592653589793 |      4.1
  2 | {}                                                           | 3.141592653589793 |      4.1
  3 | {"a": "10", "b": "15", "x": 25}                              | 3.141592653589793 |      4.1
  4 | {"a": 1, "b": 2, "c": {"d": 4}}                              | 3.141592653589793 |      4.1
  5 | ["abc", [{"k": "10"}, "def", 5], {"x": "abc"}, {"y": "bcd"}] | 3.141592653589793 |      4.1
(6 rows)

-- select json_array_append with order by (explain)
--Testcase 3582:
EXPLAIN VERBOSE
SELECT json_length(json_array_append(c1, '$[1], c2')) FROM s8 ORDER BY 1;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=4)
   Output: (json_length(json_array_append(c1, VARIADIC '{"''$[1]'', c2"}'::path_value[])))
   Sort Key: (json_length(json_array_append(s8.c1, VARIADIC '{"''$[1]'', c2"}'::path_value[])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=4)
         Output: (json_length(json_array_append(c1, VARIADIC '{"''$[1]'', c2"}'::path_value[])))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT json_length(json_array_append(`c1`, '$[1]', c2)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.json_length(public.json_array_append(c1, VARIADIC '{"''$[1]'', c2"}'::public.path_value[])) FROM public.s81mysql
(12 rows)

-- select json_array_append with order by (result)
--Testcase 3583:
SELECT json_length(json_array_append(c1, '$[1], c2')) FROM s8 ORDER BY 1;
 json_length 
-------------
           0
           0
           3
           3
           3
           4
(6 rows)

-- select json_array_append with group by (explain)
--Testcase 3584:
EXPLAIN VERBOSE
SELECT json_length(json_array_append('["a", ["b", "c"], "d"]', '$[1], id')) FROM s8 GROUP BY 1;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3854.84..7336.10 rows=6826 width=4)
   Output: (json_length(json_array_append('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', id"}'::path_value[])))
   Group Key: (json_length(json_array_append('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', id"}'::path_value[])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=4)
         Output: (json_length(json_array_append('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', id"}'::path_value[])))
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_array_append(CAST('["a", ["b", "c"], "d"]' AS JSON), '$[1]', id)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_array_append('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', id"}'::public.path_value[])) FROM public.s81mysql
(10 rows)

-- select json_array_append with group by (result)
--Testcase 3585:
SELECT * FROM (
SELECT id, json_length(json_array_append('["a", ["b", "c"], "d"]', '$[1], id')) FROM s8 GROUP BY 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           3
  1 |           3
  2 |           3
  3 |           3
  4 |           3
  5 |           3
(6 rows)

-- select json_array_append with group by having (explain)
--Testcase 3586:
EXPLAIN VERBOSE
SELECT json_depth(json_array_append('["a", ["b", "c"], "d"]', '$[1], c2')) FROM s8 GROUP BY c2, 1 HAVING count(c2) > 1;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3888.97..5111.80 rows=2275 width=8)
   Output: (json_depth(json_array_append('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', c2"}'::path_value[]))), c2
   Group Key: s8.c2, (json_depth(json_array_append('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', c2"}'::path_value[])))
   Filter: (count(s8.c2) > 1)
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_depth(json_array_append('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', c2"}'::path_value[]))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_depth(json_array_append(CAST('["a", ["b", "c"], "d"]' AS JSON), '$[1]', c2)), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_depth(public.json_array_append('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', c2"}'::public.path_value[])), c2 FROM public.s81mysql
(11 rows)

-- select json_array_append with group by having (result)
--Testcase 3587:
SELECT * FROM (
SELECT id, json_depth(json_array_append('["a", ["b", "c"], "d"]', '$[1], c2')) FROM s8 GROUP BY c2, 1 HAVING count(c2) > 1
) AS t ORDER BY 1;
 id | json_depth 
----+------------
(0 rows)

-- select json_array_append and as
--Testcase 3588:
SELECT * FROM (
SELECT id, json_array_append(c1, '$[1], c2') AS json_array_append1 FROM s8
) AS t ORDER BY 1;
 id |                      json_array_append1                      
----+--------------------------------------------------------------
  0 | [[1, 2], [3, 4, 1], 5]
  1 | []
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def", 5], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_array_insert
-- select json_array_insert (stub function, explain)
--Testcase 3589:
EXPLAIN VERBOSE
SELECT json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()') FROM s8;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_insert(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1, '$[1]', 'a', '$[1]', pi()) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- select json_array_insert (stub function, result)
--Testcase 3590:
SELECT * FROM (
SELECT id, json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()') FROM s8
) AS t ORDER BY 1;
 id |                                         json_array_insert                                         
----+---------------------------------------------------------------------------------------------------
  0 | [[1, 2], 3.141592653589793, "a", 1, "This", 1, [3, 4], 5]
  1 | [2, 3.141592653589793, "a", 1, "is"]
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", 3.141592653589793, "a", 1, "scalar", 5, [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- select json_array_insert (stub function, not pushdown constraints, explain)
--Testcase 3591:
EXPLAIN VERBOSE
SELECT json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], NULL', '$[1], TRUE', '$[1], pi()') FROM s8 WHERE to_hex(id) = '1';
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..399.23 rows=34 width=32)
   Output: (json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', NULL","''$[1]'', TRUE","''$[1]'', pi()"}'::path_value[]))
   Filter: (to_hex(s8.id) = '1'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_insert(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', NULL, '$[1]', TRUE, '$[1]', pi()), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', NULL","''$[1]'', TRUE","''$[1]'', pi()"}'::public.path_value[]), id FROM public.s81mysql
(8 rows)

-- select json_array_insert (stub function, not pushdown constraints, result)
--Testcase 3592:
SELECT * FROM (
SELECT id, json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], NULL', '$[1], TRUE', '$[1], pi()') FROM s8 WHERE to_hex(id) = '1'
) AS t ORDER BY 1;
 id |            json_array_insert             
----+------------------------------------------
  1 | [2, 3.141592653589793, true, null, "is"]
(1 row)

-- select json_array_insert (stub function, pushdown constraints, explain)
--Testcase 3593:
EXPLAIN VERBOSE
SELECT json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], CAST("[true, false]" AS JSON)') FROM s8 WHERE id = 1;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..314.50 rows=34 width=32)
   Output: (json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', CAST(\"[true, false]\" AS JSON)"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_insert(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1, '$[1]', 'a', '$[1]', CAST("[true, false]" AS JSON)) FROM `test`.`s82` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_insert(c1, VARIADIC E'{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', CAST(\\"[true, false]\\" AS JSON)"}'::public.path_value[]) FROM public.s81mysql WHERE ((id = 1))
(7 rows)

-- select json_array_insert (stub function, pushdown constraints, result)
--Testcase 3594:
SELECT * FROM (
SELECT id, json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], CAST("[true, false]" AS JSON)') FROM s8 WHERE id = 1
) AS t ORDER BY 1;
 id |        json_array_insert         
----+----------------------------------
  1 | [2, [true, false], "a", 1, "is"]
(1 row)

-- select json_array_insert (stub function, stub in constraints, explain)
--Testcase 3595:
EXPLAIN VERBOSE
SELECT json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], NULL', '$[1], TRUE', '$[1], "[true, false]"') FROM s8 WHERE log2(id) > 1;
                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2643.41 rows=2276 width=32)
   Output: (json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', NULL","''$[1]'', TRUE","''$[1]'', ''[true, false]''"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_insert(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', NULL, '$[1]', TRUE, '$[1]', '[true, false]') FROM `test`.`s82` WHERE ((log2(`id`) > 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', NULL","''$[1]'', TRUE","''$[1]'', ''[true, false]''"}'::public.path_value[]) FROM public.s81mysql WHERE ((public.log2(id) > 1::double precision))
(7 rows)

-- select json_array_insert (stub function, stub in constraints, result)
--Testcase 3596:
SELECT * FROM (
SELECT id, json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], NULL', '$[1], TRUE', '$[1], "[true, false]"') FROM s8 WHERE log2(id) > 1
) AS t ORDER BY 1;
 id |                                          json_array_insert                                          
----+-----------------------------------------------------------------------------------------------------
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", "[true, false]", true, null, "scalar", 5, [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(3 rows)

-- select json_array_insert (stub function, stub in constraints, explain)
--Testcase 3597:
EXPLAIN VERBOSE
SELECT json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()') FROM s8 WHERE json_depth(json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()')) > 0;
                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..4332.85 rows=2276 width=32)
   Output: (json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_insert(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1, '$[1]', 'a', '$[1]', pi()) FROM `test`.`s82` WHERE ((json_depth(json_array_insert(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1, '$[1]', 'a', '$[1]', pi())) > 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::public.path_value[]) FROM public.s81mysql WHERE ((public.json_depth(public.json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::public.path_value[])) > 0))
(7 rows)

-- select json_array_insert (stub function, stub in constraints, result)
--Testcase 3598:
SELECT * FROM (
SELECT id, json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()') FROM s8 WHERE json_depth(json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()')) > 0
) AS t ORDER BY 1;
 id |                                         json_array_insert                                         
----+---------------------------------------------------------------------------------------------------
  0 | [[1, 2], 3.141592653589793, "a", 1, "This", 1, [3, 4], 5]
  1 | [2, 3.141592653589793, "a", 1, "is"]
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", 3.141592653589793, "a", 1, "scalar", 5, [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_array_insert with 1 arg explain
--Testcase 3599:
EXPLAIN VERBOSE
SELECT json_array_insert(c1, '$[1], c2') FROM s8;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_array_insert(c1, VARIADIC '{"''$[1]'', c2"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_insert(`c1`, '$[1]', c2) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_insert(c1, VARIADIC '{"''$[1]'', c2"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_array_insert with 1 arg result
--Testcase 3600:
SELECT * FROM (
SELECT id, json_array_insert(c1, '$[1], c2') FROM s8
) AS t ORDER BY 1;
 id |                      json_array_insert                       
----+--------------------------------------------------------------
  0 | [[1, 2], 1, [3, 4], 5]
  1 | [2]
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", 5, [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_array_insert with 2 args explain
--Testcase 3601:
EXPLAIN VERBOSE
SELECT json_array_insert(c1, '$[1], c2', '$[1], c3') FROM s8;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_insert(`c1`, '$[1]', c2, '$[1]', c3) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_array_insert with 2 args result
--Testcase 3602:
SELECT * FROM (
SELECT id, json_array_insert(c1, '$[1], c2', '$[1], c3') FROM s8
) AS t ORDER BY 1;
 id |                           json_array_insert                            
----+------------------------------------------------------------------------
  0 | [[1, 2], "This", 1, [3, 4], 5]
  1 | [2, "is"]
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", "scalar", 5, [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_array_insert with 3 args explain
--Testcase 3603:
EXPLAIN VERBOSE
SELECT json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1') FROM s8;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_insert(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_array_insert with 3 args result
--Testcase 3604:
SELECT * FROM (
SELECT id, json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1') FROM s8
) AS t ORDER BY 1;
 id |                             json_array_insert                             
----+---------------------------------------------------------------------------
  0 | [[1, 2], 1, "This", 1, [3, 4], 5]
  1 | [2, 1, "is"]
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", 1, "scalar", 5, [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_array_insert with 4 args explain
--Testcase 3605:
EXPLAIN VERBOSE
SELECT json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"') FROM s8;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_insert(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1, '$[1]', 'a') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_array_insert with 4 args result
--Testcase 3606:
SELECT * FROM (
SELECT id, json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"') FROM s8
) AS t ORDER BY 1;
 id |                               json_array_insert                                
----+--------------------------------------------------------------------------------
  0 | [[1, 2], "a", 1, "This", 1, [3, 4], 5]
  1 | [2, "a", 1, "is"]
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", "a", 1, "scalar", 5, [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_array_insert with 5 args explain
--Testcase 3607:
EXPLAIN VERBOSE
SELECT json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()') FROM s8;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_insert(`c1`, '$[1]', c2, '$[1]', c3, '$[1]', 1, '$[1]', 'a', '$[1]', pi()) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_insert(c1, VARIADIC '{"''$[1]'', c2","''$[1]'', c3","''$[1]'', 1","''$[1]'', ''a''","''$[1]'', pi()"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_array_insert with 5 args result
--Testcase 3608:
SELECT * FROM (
SELECT id, json_array_insert(c1, '$[1], c2', '$[1], c3', '$[1], 1', '$[1], "a"', '$[1], pi()') FROM s8
) AS t ORDER BY 1;
 id |                                         json_array_insert                                         
----+---------------------------------------------------------------------------------------------------
  0 | [[1, 2], 3.141592653589793, "a", 1, "This", 1, [3, 4], 5]
  1 | [2, 3.141592653589793, "a", 1, "is"]
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", 3.141592653589793, "a", 1, "scalar", 5, [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- select json_array_insert as nest function with agg (not pushdown, explain)
--Testcase 3609:
EXPLAIN VERBOSE
SELECT sum(id),json_array_insert('["a", ["b", "c"], "d"]', '$[1], sum(id)') FROM s8;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_array_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', sum(id)"}'::path_value[])
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_array_insert as nest function with agg (not pushdown, result, error)
--Testcase 3610:
SELECT sum(id),json_array_insert('["a", ["b", "c"], "d"]', '$[1], sum(id)') FROM s8;
ERROR:  stub json_array_insert(json, variadic path_value[]) is called
CONTEXT:  PL/pgSQL function json_array_insert(json,path_value[]) line 3 at RAISE
-- select json_array_insert as nest function with json_build_array (pushdown, explain)
--Testcase 3611:
EXPLAIN VERBOSE
SELECT json_array_insert(json_build_array('["a", ["b", "c"], "d"]', c1), '$[1], log2(id)') FROM s8;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=32)
   Output: (json_array_insert(json_build_array('["a", ["b", "c"], "d"]', c1), VARIADIC '{"''$[1]'', log2(id)"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_insert(json_array('["a", ["b", "c"], "d"]', `c1`), '$[1]', log2(id)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_insert(json_build_array('["a", ["b", "c"], "d"]', c1), VARIADIC '{"''$[1]'', log2(id)"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- select json_array_insert as nest function with json_build_array (pushdown, result)
--Testcase 3612:
SELECT * FROM (
SELECT id, json_array_insert(json_build_array('["a", ["b", "c"], "d"]', c1), '$[1], log2(id)') FROM s8
) AS t ORDER BY 1;
 id |                                                json_array_insert                                                 
----+------------------------------------------------------------------------------------------------------------------
  0 | ["[\"a\", [\"b\", \"c\"], \"d\"]", null, [[1, 2], [3, 4], 5]]
  1 | ["[\"a\", [\"b\", \"c\"], \"d\"]", 0.0, []]
  2 | ["[\"a\", [\"b\", \"c\"], \"d\"]", 1.0, {}]
  3 | ["[\"a\", [\"b\", \"c\"], \"d\"]", 1.584962500721156, {"a": "10", "b": "15", "x": 25}]
  4 | ["[\"a\", [\"b\", \"c\"], \"d\"]", 2.0, {"a": 1, "b": 2, "c": {"d": 4}}]
  5 | ["[\"a\", [\"b\", \"c\"], \"d\"]", 2.321928094887362, ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]]
(6 rows)

-- select json_array_insert with non pushdown func and explicit constant (explain)
--Testcase 3613:
EXPLAIN VERBOSE
SELECT json_array_insert(c1, '$[1], c2'), pi(), 4.1 FROM s8;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (json_array_insert(c1, VARIADIC '{"''$[1]'', c2"}'::path_value[])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_array_insert(`c1`, '$[1]', c2), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_array_insert(c1, VARIADIC '{"''$[1]'', c2"}'::public.path_value[]), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_array_insert with non pushdown func and explicit constant (result)
--Testcase 3614:
SELECT * FROM (
SELECT id, json_array_insert(c1, '$[1], c2'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id |                      json_array_insert                       |        pi         | ?column? 
----+--------------------------------------------------------------+-------------------+----------
  0 | [[1, 2], 1, [3, 4], 5]                                       | 3.141592653589793 |      4.1
  1 | [2]                                                          | 3.141592653589793 |      4.1
  2 | {}                                                           | 3.141592653589793 |      4.1
  3 | {"a": "10", "b": "15", "x": 25}                              | 3.141592653589793 |      4.1
  4 | {"a": 1, "b": 2, "c": {"d": 4}}                              | 3.141592653589793 |      4.1
  5 | ["abc", 5, [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}] | 3.141592653589793 |      4.1
(6 rows)

-- select json_array_insert with order by (explain)
--Testcase 3615:
EXPLAIN VERBOSE
SELECT json_length(json_array_insert(c1, '$[1], c2')) FROM s8 ORDER BY 1;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=4)
   Output: (json_length(json_array_insert(c1, VARIADIC '{"''$[1]'', c2"}'::path_value[])))
   Sort Key: (json_length(json_array_insert(s8.c1, VARIADIC '{"''$[1]'', c2"}'::path_value[])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=4)
         Output: (json_length(json_array_insert(c1, VARIADIC '{"''$[1]'', c2"}'::path_value[])))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT json_length(json_array_insert(`c1`, '$[1]', c2)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.json_length(public.json_array_insert(c1, VARIADIC '{"''$[1]'', c2"}'::public.path_value[])) FROM public.s81mysql
(12 rows)

-- select json_array_insert with order by (result)
--Testcase 3616:
SELECT json_length(json_array_insert(c1, '$[1], c2')) FROM s8 ORDER BY 1;
 json_length 
-------------
           0
           1
           3
           3
           4
           5
(6 rows)

-- select json_array_insert with group by (explain)
--Testcase 3617:
EXPLAIN VERBOSE
SELECT id, json_length(json_array_insert('["a", ["b", "c"], "d"]', '$[1], id')) FROM s8 GROUP BY 1, 2;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..7353.17 rows=6826 width=8)
   Output: id, (json_length(json_array_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', id"}'::path_value[])))
   Group Key: s8.id, (json_length(json_array_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', id"}'::path_value[])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: id, (json_length(json_array_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', id"}'::path_value[])))
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, json_length(json_array_insert(CAST('["a", ["b", "c"], "d"]' AS JSON), '$[1]', id)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, public.json_length(public.json_array_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', id"}'::public.path_value[])) FROM public.s81mysql
(10 rows)

-- select json_array_insert with group by (result)
--Testcase 3618:
SELECT * FROM (
SELECT id, json_length(json_array_insert('["a", ["b", "c"], "d"]', '$[1], id')) FROM s8 GROUP BY 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           4
  1 |           4
  2 |           4
  3 |           4
  4 |           4
  5 |           4
(6 rows)

-- select json_array_insert with group by having (explain)
--Testcase 3619:
EXPLAIN VERBOSE
SELECT json_depth(json_array_insert('["a", ["b", "c"], "d"]', '$[1], c2')) FROM s8 GROUP BY c2, 1 HAVING count(c2) > 1;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3888.97..5111.80 rows=2275 width=8)
   Output: (json_depth(json_array_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', c2"}'::path_value[]))), c2
   Group Key: s8.c2, (json_depth(json_array_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', c2"}'::path_value[])))
   Filter: (count(s8.c2) > 1)
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_depth(json_array_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', c2"}'::path_value[]))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_depth(json_array_insert(CAST('["a", ["b", "c"], "d"]' AS JSON), '$[1]', c2)), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_depth(public.json_array_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$[1]'', c2"}'::public.path_value[])), c2 FROM public.s81mysql
(11 rows)

-- select json_array_insert with group by having (result)
--Testcase 3620:
SELECT * FROM (
SELECT id, json_depth(json_array_insert('["a", ["b", "c"], "d"]', '$[1], c2')) FROM s8 GROUP BY c2, 1 HAVING count(c2) > 1
) AS t ORDER BY 1;
 id | json_depth 
----+------------
(0 rows)

-- select json_array_insert and as
--Testcase 3621:
SELECT * FROM (
SELECT id, json_array_insert(c1, '$[1], c2') AS json_array_insert1 FROM s8
) AS t ORDER BY 1;
 id |                      json_array_insert1                      
----+--------------------------------------------------------------
  0 | [[1, 2], 1, [3, 4], 5]
  1 | [2]
  2 | {}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", 5, [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- select  json_contains (stub function, explain)
--Testcase 3622:
EXPLAIN VERBOSE
SELECT json_contains(c1, '1', '$.a'), json_contains(c1, '{"a": 1}', '$.a'), json_contains(c1, c1, '$.a'), json_contains(c1,'1'), json_contains('{"a": 1, "b": 2, "c": {"d": 4}}','1', '$.a') FROM s8;
                                                                                                                                                          QUERY PLAN                                                                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8957.28 rows=6826 width=20)
   Output: (json_contains(c1, '1'::json, '$.a'::text)), (json_contains(c1, '{"a": 1}'::json, '$.a'::text)), (json_contains(c1, c1, '$.a'::text)), (json_contains(c1, '1'::text)), (json_contains('{"a": 1, "b": 2, "c": {"d": 4}}'::json, '1'::json, '$.a'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_contains(`c1`, CAST('1' AS JSON), '$.a'), json_contains(`c1`, CAST('{"a": 1}' AS JSON), '$.a'), json_contains(`c1`, `c1`, '$.a'), json_contains(`c1`, '1'), json_contains(CAST('{"a": 1, "b": 2, "c": {"d": 4}}' AS JSON), CAST('1' AS JSON), '$.a') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_contains(c1, '1'::json, '$.a'::text), public.json_contains(c1, '{"a": 1}'::json, '$.a'::text), public.json_contains(c1, c1, '$.a'::text), public.json_contains(c1, '1'::text), public.json_contains('{"a": 1, "b": 2, "c": {"d": 4}}'::json, '1'::json, '$.a'::text) FROM public.s81mysql
(7 rows)

-- select  json_contains (stub function, result)
--Testcase 3623:
SELECT * FROM (
SELECT id, json_contains(c1, '1', '$.a'), json_contains(c1, '{"a": 1}', '$.a'), json_contains(c1, c1, '$.a'), json_contains(c1,'1'), json_contains('{"a": 1, "b": 2, "c": {"d": 4}}','1', '$.a') FROM s8
) AS t ORDER BY 1;
 id | json_contains | json_contains | json_contains | json_contains | json_contains 
----+---------------+---------------+---------------+---------------+---------------
  0 |               |               |               |             1 |             1
  1 |               |               |               |             0 |             1
  2 |               |               |               |             0 |             1
  3 |             0 |             0 |             0 |             0 |             1
  4 |             1 |             0 |             0 |             0 |             1
  5 |               |               |               |             0 |             1
(6 rows)

-- select  json_contains (stub function, not pushdown constraints, explain)
--Testcase 3624:
EXPLAIN VERBOSE
SELECT json_contains(c1, '1', '$.a'), json_contains(c1, '{"a": 1}', '$.a'), json_contains(c1, c1, '$.a'), json_contains(c1,'1'), json_contains('{"a": 1, "b": 2, "c": {"d": 4}}','1', '$.a') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                                                            QUERY PLAN                                                                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..433.23 rows=34 width=20)
   Output: (json_contains(c1, '1'::json, '$.a'::text)), (json_contains(c1, '{"a": 1}'::json, '$.a'::text)), (json_contains(c1, c1, '$.a'::text)), (json_contains(c1, '1'::text)), (json_contains('{"a": 1, "b": 2, "c": {"d": 4}}'::json, '1'::json, '$.a'::text))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_contains(`c1`, CAST('1' AS JSON), '$.a'), json_contains(`c1`, CAST('{"a": 1}' AS JSON), '$.a'), json_contains(`c1`, `c1`, '$.a'), json_contains(`c1`, '1'), json_contains(CAST('{"a": 1, "b": 2, "c": {"d": 4}}' AS JSON), CAST('1' AS JSON), '$.a'), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_contains(c1, '1'::json, '$.a'::text), public.json_contains(c1, '{"a": 1}'::json, '$.a'::text), public.json_contains(c1, c1, '$.a'::text), public.json_contains(c1, '1'::text), public.json_contains('{"a": 1, "b": 2, "c": {"d": 4}}'::json, '1'::json, '$.a'::text), id FROM public.s81mysql
(8 rows)

-- select  json_contains (stub function, not pushdown constraints, result)
--Testcase 3625:
SELECT * FROM (
SELECT id, json_contains(c1, '1', '$.a'), json_contains(c1, '{"a": 1}', '$.a'), json_contains(c1, c1, '$.a'), json_contains(c1,'1'), json_contains('{"a": 1, "b": 2, "c": {"d": 4}}','1', '$.a') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_contains | json_contains | json_contains | json_contains | json_contains 
----+---------------+---------------+---------------+---------------+---------------
  2 |               |               |               |             0 |             1
(1 row)

-- select  json_contains (stub function, pushdown constraints, explain)
--Testcase 3626:
EXPLAIN VERBOSE
SELECT json_contains(c1, '1', '$.a'), json_contains(c1, '{"a": 1}', '$.a'), json_contains(c1, c1, '$.a'), json_contains(c1,'1'), json_contains('{"a": 1, "b": 2, "c": {"d": 4}}','1', '$.a') FROM s8 WHERE id != 0;
                                                                                                                                                                   QUERY PLAN                                                                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8931.17 rows=6792 width=20)
   Output: (json_contains(c1, '1'::json, '$.a'::text)), (json_contains(c1, '{"a": 1}'::json, '$.a'::text)), (json_contains(c1, c1, '$.a'::text)), (json_contains(c1, '1'::text)), (json_contains('{"a": 1, "b": 2, "c": {"d": 4}}'::json, '1'::json, '$.a'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_contains(`c1`, CAST('1' AS JSON), '$.a'), json_contains(`c1`, CAST('{"a": 1}' AS JSON), '$.a'), json_contains(`c1`, `c1`, '$.a'), json_contains(`c1`, '1'), json_contains(CAST('{"a": 1, "b": 2, "c": {"d": 4}}' AS JSON), CAST('1' AS JSON), '$.a') FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_contains(c1, '1'::json, '$.a'::text), public.json_contains(c1, '{"a": 1}'::json, '$.a'::text), public.json_contains(c1, c1, '$.a'::text), public.json_contains(c1, '1'::text), public.json_contains('{"a": 1, "b": 2, "c": {"d": 4}}'::json, '1'::json, '$.a'::text) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select  json_contains (stub function, pushdown constraints, result)
--Testcase 3627:
SELECT * FROM (
SELECT id, json_contains(c1, '1', '$.a'), json_contains(c1, '{"a": 1}', '$.a'), json_contains(c1, c1, '$.a'), json_contains(c1,'1'), json_contains('{"a": 1, "b": 2, "c": {"d": 4}}','1', '$.a') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | json_contains | json_contains | json_contains | json_contains | json_contains 
----+---------------+---------------+---------------+---------------+---------------
  1 |               |               |               |             0 |             1
  2 |               |               |               |             0 |             1
  3 |             0 |             0 |             0 |             0 |             1
  4 |             1 |             0 |             0 |             0 |             1
  5 |               |               |               |             0 |             1
(5 rows)

-- select  json_contains (stub function, json_contains in constraints, explain)
--Testcase 3628:
EXPLAIN VERBOSE
SELECT json_contains(c1, '1', '$.a'), json_contains(c1, '{"a": 1}', '$.a'), json_contains(c1, c1, '$.a'), json_contains(c1,'1'), json_contains('{"a": 1, "b": 2, "c": {"d": 4}}','1', '$.a') FROM s8 WHERE json_contains(c1, '1', '$.a') != 1;
                                                                                                                                                                                          QUERY PLAN                                                                                                                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..10637.67 rows=6792 width=20)
   Output: (json_contains(c1, '1'::json, '$.a'::text)), (json_contains(c1, '{"a": 1}'::json, '$.a'::text)), (json_contains(c1, c1, '$.a'::text)), (json_contains(c1, '1'::text)), (json_contains('{"a": 1, "b": 2, "c": {"d": 4}}'::json, '1'::json, '$.a'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_contains(`c1`, CAST('1' AS JSON), '$.a'), json_contains(`c1`, CAST('{"a": 1}' AS JSON), '$.a'), json_contains(`c1`, `c1`, '$.a'), json_contains(`c1`, '1'), json_contains(CAST('{"a": 1, "b": 2, "c": {"d": 4}}' AS JSON), CAST('1' AS JSON), '$.a') FROM `test`.`s82` WHERE ((json_contains(`c1`, CAST('1' AS JSON), '$.a') <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_contains(c1, '1'::json, '$.a'::text), public.json_contains(c1, '{"a": 1}'::json, '$.a'::text), public.json_contains(c1, c1, '$.a'::text), public.json_contains(c1, '1'::text), public.json_contains('{"a": 1, "b": 2, "c": {"d": 4}}'::json, '1'::json, '$.a'::text) FROM public.s81mysql WHERE ((public.json_contains(c1, '1'::json, '$.a'::text) <> 1))
(7 rows)

-- select  json_contains (stub function, json_contains in constraints, result)
--Testcase 3629:
SELECT * FROM (
SELECT id, json_contains(c1, '1', '$.a'), json_contains(c1, '{"a": 1}', '$.a'), json_contains(c1, c1, '$.a'), json_contains(c1,'1'), json_contains('{"a": 1, "b": 2, "c": {"d": 4}}','1', '$.a') FROM s8 WHERE json_contains(c1, '1', '$.a') != 1
) AS t ORDER BY 1;
 id | json_contains | json_contains | json_contains | json_contains | json_contains 
----+---------------+---------------+---------------+---------------+---------------
  3 |             0 |             0 |             0 |             0 |             1
(1 row)

-- select  json_contains (stub function, json_contains in constraints, explain)
--Testcase 3630:
EXPLAIN VERBOSE
SELECT json_contains(c1, '1', '$.a'), json_contains(c1, '{"a": 1}', '$.a'), json_contains(c1, c1, '$.a'), json_contains(c1,'1'), json_contains('{"a": 1, "b": 2, "c": {"d": 4}}','1', '$.a') FROM s8 WHERE json_contains('{"a": 1, "b": 2, "c": {"d": 4}}','1', '$.a') = 1;
                                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2055.01 rows=34 width=20)
   Output: (json_contains(c1, '1'::json, '$.a'::text)), (json_contains(c1, '{"a": 1}'::json, '$.a'::text)), (json_contains(c1, c1, '$.a'::text)), (json_contains(c1, '1'::text)), (json_contains('{"a": 1, "b": 2, "c": {"d": 4}}'::json, '1'::json, '$.a'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_contains(`c1`, CAST('1' AS JSON), '$.a'), json_contains(`c1`, CAST('{"a": 1}' AS JSON), '$.a'), json_contains(`c1`, `c1`, '$.a'), json_contains(`c1`, '1'), json_contains(CAST('{"a": 1, "b": 2, "c": {"d": 4}}' AS JSON), CAST('1' AS JSON), '$.a') FROM `test`.`s82` WHERE ((json_contains(CAST('{"a": 1, "b": 2, "c": {"d": 4}}' AS JSON), CAST('1' AS JSON), '$.a') = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_contains(c1, '1'::json, '$.a'::text), public.json_contains(c1, '{"a": 1}'::json, '$.a'::text), public.json_contains(c1, c1, '$.a'::text), public.json_contains(c1, '1'::text), public.json_contains('{"a": 1, "b": 2, "c": {"d": 4}}'::json, '1'::json, '$.a'::text) FROM public.s81mysql WHERE ((public.json_contains('{"a": 1, "b": 2, "c": {"d": 4}}'::json, '1'::json, '$.a'::text) = 1))
(7 rows)

-- select  json_contains (stub function, json_contains in constraints, result)
--Testcase 3631:
SELECT * FROM (
SELECT id, json_contains(c1, '1', '$.a'), json_contains(c1, '{"a": 1}', '$.a'), json_contains(c1, c1, '$.a'), json_contains(c1,'1'), json_contains('{"a": 1, "b": 2, "c": {"d": 4}}','1', '$.a') FROM s8 WHERE json_contains('{"a": 1, "b": 2, "c": {"d": 4}}','1', '$.a') = 1
) AS t ORDER BY 1;
 id | json_contains | json_contains | json_contains | json_contains | json_contains 
----+---------------+---------------+---------------+---------------+---------------
  0 |               |               |               |             1 |             1
  1 |               |               |               |             0 |             1
  2 |               |               |               |             0 |             1
  3 |             0 |             0 |             0 |             0 |             1
  4 |             1 |             0 |             0 |             0 |             1
  5 |               |               |               |             0 |             1
(6 rows)

-- select json_contains as nest function with agg (not pushdown, explain)
--Testcase 3632:
EXPLAIN VERBOSE
SELECT sum(id),json_contains('{"a": 1, "b": 2, "c": {"d": 4}}', '1') FROM s8;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (sum(id)), json_contains('{"a": 1, "b": 2, "c": {"d": 4}}'::json, '1'::text)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_contains as nest function with agg (not pushdown, result, error)
--Testcase 3633:
SELECT sum(id),json_contains('{"a": 1, "b": 2, "c": {"d": 4}}', '1') FROM s8;
ERROR:  stub json_contains(json, text) is called
CONTEXT:  PL/pgSQL function json_contains(json,text) line 3 at RAISE
-- select json_contains with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3634:
EXPLAIN VERBOSE
SELECT json_contains(c1, c1, '$.a'), pi(), 4.1 FROM s8;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=44)
   Output: (json_contains(c1, c1, '$.a'::text)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_contains(`c1`, `c1`, '$.a'), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_contains(c1, c1, '$.a'::text), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_contains with non pushdown func and explicit constant (result)
--Testcase 3635:
SELECT * FROM (
SELECT id, json_contains(c1, c1, '$.a'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_contains |        pi         | ?column? 
----+---------------+-------------------+----------
  0 |               | 3.141592653589793 |      4.1
  1 |               | 3.141592653589793 |      4.1
  2 |               | 3.141592653589793 |      4.1
  3 |             0 | 3.141592653589793 |      4.1
  4 |             0 | 3.141592653589793 |      4.1
  5 |               | 3.141592653589793 |      4.1
(6 rows)

-- select json_contains with order by index (result)
--Testcase 3636:
SELECT id,  json_contains(c1, '1', '$.a') FROM s8 ORDER BY 2, 1;
 id | json_contains 
----+---------------
  3 |             0
  4 |             1
  0 |              
  1 |              
  2 |              
  5 |              
(6 rows)

-- select json_contains with order by index (result)
--Testcase 3637:
SELECT id,  json_contains(c1, '1', '$.a') FROM s8 ORDER BY 1, 2;
 id | json_contains 
----+---------------
  0 |              
  1 |              
  2 |              
  3 |             0
  4 |             1
  5 |              
(6 rows)

-- select json_contains with group by (EXPLAIN)
--Testcase 3638:
EXPLAIN VERBOSE
SELECT count(id), json_contains(c1, '1', '$.a') FROM s8 group by json_contains(c1, '1', '$.a');
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
   Output: count(id), (json_contains(c1, '1'::json, '$.a'::text))
   Group Key: (json_contains(s8.c1, '1'::json, '$.a'::text))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_contains(c1, '1'::json, '$.a'::text)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_contains(`c1`, CAST('1' AS JSON), '$.a'), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_contains(c1, '1'::json, '$.a'::text), id FROM public.s81mysql
(10 rows)

-- select json_contains with group by (result)
--Testcase 3639:
SELECT * FROM (
SELECT count(id), json_contains(c1, '1', '$.a') FROM s8 group by json_contains(c1, '1', '$.a')
) AS t ORDER BY 1;
 count | json_contains 
-------+---------------
     1 |             0
     1 |             1
     4 |              
(3 rows)

-- select json_contains with group by index (result)
--Testcase 3640:
SELECT id,  json_contains(c1, '1', '$.a') FROM s8 group by 2, 1;
 id | json_contains 
----+---------------
  5 |              
  4 |             1
  0 |              
  3 |             0
  2 |              
  1 |              
(6 rows)

-- select json_contains with group by index (result)
--Testcase 3641:
SELECT * FROM (
SELECT id,  json_contains(c1, '1', '$.a') FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_contains 
----+---------------
  0 |              
  1 |              
  2 |              
  3 |             0
  4 |             1
  5 |              
(6 rows)

-- select json_contains with group by having (EXPLAIN)
--Testcase 3642:
EXPLAIN VERBOSE
SELECT count(c2), json_contains(c1, '1', '$.a') FROM s8 group by json_contains(c1, '1', '$.a') HAVING count(c2) > 0;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=12)
   Output: count(c2), (json_contains(c1, '1'::json, '$.a'::text))
   Group Key: (json_contains(s8.c1, '1'::json, '$.a'::text))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_contains(c1, '1'::json, '$.a'::text)), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_contains(`c1`, CAST('1' AS JSON), '$.a'), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_contains(c1, '1'::json, '$.a'::text), c2 FROM public.s81mysql
(11 rows)

-- select json_contains with group by having (result)
--Testcase 3643:
SELECT * FROM (
SELECT count(c2), json_contains(c1, '1', '$.a') FROM s8 group by json_contains(c1, '1', '$.a') HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_contains 
-------+---------------
     1 |             0
     1 |             1
     4 |              
(3 rows)

-- select json_contains with group by index having (result)
--Testcase 3644:
SELECT * FROM (
SELECT c2,  json_contains(c1, '1', '$.a') FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_contains 
----+---------------
  1 |              
  2 |              
  3 |              
  4 |             0
  5 |             1
  5 |              
(6 rows)

-- select json_contains with group by index having (result)
--Testcase 3645:
SELECT * FROM (
SELECT c2,  json_contains(c1, '1', '$.a') FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_contains 
----+---------------
  1 |              
  2 |              
  3 |              
  4 |             0
  5 |             1
  5 |              
(6 rows)

-- select json_contains and as
--Testcase 3646:
SELECT * FROM (
SELECT id, json_contains(c1, c1, '$.a') as json_contains1 FROM s8
) AS t ORDER BY 1;
 id | json_contains1 
----+----------------
  0 |               
  1 |               
  2 |               
  3 |              0
  4 |              0
  5 |               
(6 rows)

-- select json_contains_path (builtin function, explain)
--Testcase 3647:
EXPLAIN VERBOSE
SELECT json_contains_path(c1, 'one', '$.a', '$.e'), json_contains_path(c1, 'all', '$.a', '$.x'), json_contains_path(c1, 'all', '$.a'), json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') FROM s8;
                                                                                                                                                                  QUERY PLAN                                                                                                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7250.78 rows=6826 width=16)
   Output: (json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[])), (json_contains_path(c1, VARIADIC '{all,$.a,$.x}'::text[])), (json_contains_path(c1, VARIADIC '{all,$.a}'::text[])), (json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}'::json, VARIADIC '{one,$.c.d}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_contains_path(`c1`, 'one', '$.a', '$.e'), json_contains_path(`c1`, 'all', '$.a', '$.x'), json_contains_path(`c1`, 'all', '$.a'), json_contains_path(CAST('{"a": 1, "b": 2, "c": {"d": 4}}' AS JSON), 'one', '$.c.d') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[]), public.json_contains_path(c1, VARIADIC '{all,$.a,$.x}'::text[]), public.json_contains_path(c1, VARIADIC '{all,$.a}'::text[]), public.json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}'::json, VARIADIC '{one,$.c.d}'::text[]) FROM public.s81mysql
(7 rows)

-- select json_contains_path (builtin function, result)
--Testcase 3648:
SELECT * FROM (
SELECT id, json_contains_path(c1, 'one', '$.a', '$.e'), json_contains_path(c1, 'all', '$.a', '$.x'), json_contains_path(c1, 'all', '$.a'), json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') FROM s8
) AS t ORDER BY 1;
 id | json_contains_path | json_contains_path | json_contains_path | json_contains_path 
----+--------------------+--------------------+--------------------+--------------------
  0 |                  0 |                  0 |                  0 |                  1
  1 |                  0 |                  0 |                  0 |                  1
  2 |                  0 |                  0 |                  0 |                  1
  3 |                  1 |                  1 |                  1 |                  1
  4 |                  1 |                  0 |                  1 |                  1
  5 |                  0 |                  0 |                  0 |                  1
(6 rows)

-- select json_contains_path (builtin function, not pushdown constraints, explain)
--Testcase 3649:
EXPLAIN VERBOSE
SELECT json_contains_path(c1, 'one', '$.a', '$.e'), json_contains_path(c1, 'all', '$.a', '$.x'), json_contains_path(c1, 'all', '$.a'), json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                                                                    QUERY PLAN                                                                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..424.73 rows=34 width=16)
   Output: (json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[])), (json_contains_path(c1, VARIADIC '{all,$.a,$.x}'::text[])), (json_contains_path(c1, VARIADIC '{all,$.a}'::text[])), (json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}'::json, VARIADIC '{one,$.c.d}'::text[]))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_contains_path(`c1`, 'one', '$.a', '$.e'), json_contains_path(`c1`, 'all', '$.a', '$.x'), json_contains_path(`c1`, 'all', '$.a'), json_contains_path(CAST('{"a": 1, "b": 2, "c": {"d": 4}}' AS JSON), 'one', '$.c.d'), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[]), public.json_contains_path(c1, VARIADIC '{all,$.a,$.x}'::text[]), public.json_contains_path(c1, VARIADIC '{all,$.a}'::text[]), public.json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}'::json, VARIADIC '{one,$.c.d}'::text[]), id FROM public.s81mysql
(8 rows)

-- select json_contains_path (builtin function, not pushdown constraints, result)
--Testcase 3650:
SELECT * FROM (
SELECT id, json_contains_path(c1, 'one', '$.a', '$.e'), json_contains_path(c1, 'all', '$.a', '$.x'), json_contains_path(c1, 'all', '$.a'), json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_contains_path | json_contains_path | json_contains_path | json_contains_path 
----+--------------------+--------------------+--------------------+--------------------
  2 |                  0 |                  0 |                  0 |                  1
(1 row)

-- select json_contains_path (builtin function, pushdown constraints, explain)
--Testcase 3651:
EXPLAIN VERBOSE
SELECT json_contains_path(c1, 'one', '$.a', '$.e'), json_contains_path(c1, 'all', '$.a', '$.x'), json_contains_path(c1, 'all', '$.a'), json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') FROM s8 WHERE id != 0;
                                                                                                                                                                           QUERY PLAN                                                                                                                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7233.16 rows=6792 width=16)
   Output: (json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[])), (json_contains_path(c1, VARIADIC '{all,$.a,$.x}'::text[])), (json_contains_path(c1, VARIADIC '{all,$.a}'::text[])), (json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}'::json, VARIADIC '{one,$.c.d}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_contains_path(`c1`, 'one', '$.a', '$.e'), json_contains_path(`c1`, 'all', '$.a', '$.x'), json_contains_path(`c1`, 'all', '$.a'), json_contains_path(CAST('{"a": 1, "b": 2, "c": {"d": 4}}' AS JSON), 'one', '$.c.d') FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[]), public.json_contains_path(c1, VARIADIC '{all,$.a,$.x}'::text[]), public.json_contains_path(c1, VARIADIC '{all,$.a}'::text[]), public.json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}'::json, VARIADIC '{one,$.c.d}'::text[]) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_contains_path (builtin function, pushdown constraints, result)
--Testcase 3652:
SELECT * FROM (
SELECT id, json_contains_path(c1, 'one', '$.a', '$.e'), json_contains_path(c1, 'all', '$.a', '$.x'), json_contains_path(c1, 'all', '$.a'), json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | json_contains_path | json_contains_path | json_contains_path | json_contains_path 
----+--------------------+--------------------+--------------------+--------------------
  1 |                  0 |                  0 |                  0 |                  1
  2 |                  0 |                  0 |                  0 |                  1
  3 |                  1 |                  1 |                  1 |                  1
  4 |                  1 |                  0 |                  1 |                  1
  5 |                  0 |                  0 |                  0 |                  1
(5 rows)

-- select json_contains_path (builtin function, json_contains_path in constraints, explain)
--Testcase 3653:
EXPLAIN VERBOSE
SELECT json_contains_path(c1, 'one', '$.a', '$.e'), json_contains_path(c1, 'all', '$.a', '$.x'), json_contains_path(c1, 'all', '$.a'), json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') FROM s8 WHERE json_contains_path(c1, 'one', '$.a', '$.e') != 0;
                                                                                                                                                                                                          QUERY PLAN                                                                                                                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8939.67 rows=6792 width=16)
   Output: (json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[])), (json_contains_path(c1, VARIADIC '{all,$.a,$.x}'::text[])), (json_contains_path(c1, VARIADIC '{all,$.a}'::text[])), (json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}'::json, VARIADIC '{one,$.c.d}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_contains_path(`c1`, 'one', '$.a', '$.e'), json_contains_path(`c1`, 'all', '$.a', '$.x'), json_contains_path(`c1`, 'all', '$.a'), json_contains_path(CAST('{"a": 1, "b": 2, "c": {"d": 4}}' AS JSON), 'one', '$.c.d') FROM `test`.`s82` WHERE ((json_contains_path(`c1`, 'one', '$.a', '$.e') <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[]), public.json_contains_path(c1, VARIADIC '{all,$.a,$.x}'::text[]), public.json_contains_path(c1, VARIADIC '{all,$.a}'::text[]), public.json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}'::json, VARIADIC '{one,$.c.d}'::text[]) FROM public.s81mysql WHERE ((public.json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[]) <> 0))
(7 rows)

-- select json_contains_path (builtin function, json_contains_path in constraints, result)
--Testcase 3654:
SELECT * FROM (
SELECT id, json_contains_path(c1, 'one', '$.a', '$.e'), json_contains_path(c1, 'all', '$.a', '$.x'), json_contains_path(c1, 'all', '$.a'), json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') FROM s8 WHERE json_contains_path(c1, 'one', '$.a', '$.e') != 0
) AS t ORDER BY 1;
 id | json_contains_path | json_contains_path | json_contains_path | json_contains_path 
----+--------------------+--------------------+--------------------+--------------------
  3 |                  1 |                  1 |                  1 |                  1
  4 |                  1 |                  0 |                  1 |                  1
(2 rows)

-- select json_contains_path (builtin function, json_contains_path in constraints, explain)
--Testcase 3655:
EXPLAIN VERBOSE
SELECT json_contains_path(c1, 'one', '$.a', '$.e'), json_contains_path(c1, 'all', '$.a', '$.x'), json_contains_path(c1, 'all', '$.a'), json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') FROM s8 WHERE json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') = 1;
                                                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2046.50 rows=34 width=16)
   Output: (json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[])), (json_contains_path(c1, VARIADIC '{all,$.a,$.x}'::text[])), (json_contains_path(c1, VARIADIC '{all,$.a}'::text[])), (json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}'::json, VARIADIC '{one,$.c.d}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_contains_path(`c1`, 'one', '$.a', '$.e'), json_contains_path(`c1`, 'all', '$.a', '$.x'), json_contains_path(`c1`, 'all', '$.a'), json_contains_path(CAST('{"a": 1, "b": 2, "c": {"d": 4}}' AS JSON), 'one', '$.c.d') FROM `test`.`s82` WHERE ((json_contains_path(CAST('{"a": 1, "b": 2, "c": {"d": 4}}' AS JSON), 'one', '$.c.d') = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[]), public.json_contains_path(c1, VARIADIC '{all,$.a,$.x}'::text[]), public.json_contains_path(c1, VARIADIC '{all,$.a}'::text[]), public.json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}'::json, VARIADIC '{one,$.c.d}'::text[]) FROM public.s81mysql WHERE ((public.json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}'::json, VARIADIC '{one,$.c.d}'::text[]) = 1))
(7 rows)

-- select json_contains_path (builtin function, json_contains_path in constraints, result)
--Testcase 3656:
SELECT * FROM (
SELECT id, json_contains_path(c1, 'one', '$.a', '$.e'), json_contains_path(c1, 'all', '$.a', '$.x'), json_contains_path(c1, 'all', '$.a'), json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') FROM s8 WHERE json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') = 1
) AS t ORDER BY 1;
 id | json_contains_path | json_contains_path | json_contains_path | json_contains_path 
----+--------------------+--------------------+--------------------+--------------------
  0 |                  0 |                  0 |                  0 |                  1
  1 |                  0 |                  0 |                  0 |                  1
  2 |                  0 |                  0 |                  0 |                  1
  3 |                  1 |                  1 |                  1 |                  1
  4 |                  1 |                  0 |                  1 |                  1
  5 |                  0 |                  0 |                  0 |                  1
(6 rows)

-- select json_contains_path as nest function with agg (not pushdown, explain)
--Testcase 3657:
EXPLAIN VERBOSE
SELECT sum(id),json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') FROM s8;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (sum(id)), json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}'::json, VARIADIC '{one,$.c.d}'::text[])
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_contains_path as nest function with agg (not pushdown, result, error)
--Testcase 3658:
SELECT sum(id),json_contains_path('{"a": 1, "b": 2, "c": {"d": 4}}', 'one', '$.c.d') FROM s8;
ERROR:  stub json_contains_path(json, variadic text[]) is called
CONTEXT:  PL/pgSQL function json_contains_path(json,text[]) line 3 at RAISE
-- select json_contains_path with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3659:
EXPLAIN VERBOSE
SELECT json_contains_path(c1, 'all', '$.a'), pi(), 4.1 FROM s8;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=44)
   Output: (json_contains_path(c1, VARIADIC '{all,$.a}'::text[])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_contains_path(`c1`, 'all', '$.a'), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_contains_path(c1, VARIADIC '{all,$.a}'::text[]), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_contains_path with non pushdown func and explicit constant (result)
--Testcase 3660:
SELECT * FROM (
SELECT id, json_contains_path(c1, 'all', '$.a'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_contains_path |        pi         | ?column? 
----+--------------------+-------------------+----------
  0 |                  0 | 3.141592653589793 |      4.1
  1 |                  0 | 3.141592653589793 |      4.1
  2 |                  0 | 3.141592653589793 |      4.1
  3 |                  1 | 3.141592653589793 |      4.1
  4 |                  1 | 3.141592653589793 |      4.1
  5 |                  0 | 3.141592653589793 |      4.1
(6 rows)

-- select json_contains_path with order by index (result)
--Testcase 3661:
SELECT id,  json_contains_path(c1, 'one', '$.a', '$.e') FROM s8 ORDER BY 2, 1;
 id | json_contains_path 
----+--------------------
  0 |                  0
  1 |                  0
  2 |                  0
  5 |                  0
  3 |                  1
  4 |                  1
(6 rows)

-- select json_contains_path with order by index (result)
--Testcase 3662:
SELECT id,  json_contains_path(c1, 'one', '$.a', '$.e') FROM s8 ORDER BY 1, 2;
 id | json_contains_path 
----+--------------------
  0 |                  0
  1 |                  0
  2 |                  0
  3 |                  1
  4 |                  1
  5 |                  0
(6 rows)

-- select json_contains_path with group by (EXPLAIN)
--Testcase 3663:
EXPLAIN VERBOSE
SELECT count(id), json_contains_path(c1, 'one', '$.a', '$.e') FROM s8 group by json_contains_path(c1, 'one', '$.a', '$.e');
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
   Output: count(id), (json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[]))
   Group Key: (json_contains_path(s8.c1, VARIADIC '{one,$.a,$.e}'::text[]))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[])), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_contains_path(`c1`, 'one', '$.a', '$.e'), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[]), id FROM public.s81mysql
(10 rows)

-- select json_contains_path with group by (result)
--Testcase 3664:
SELECT * FROM (
SELECT count(id), json_contains_path(c1, 'one', '$.a', '$.e') FROM s8 group by json_contains_path(c1, 'one', '$.a', '$.e')
) AS t ORDER BY 1;
 count | json_contains_path 
-------+--------------------
     2 |                  1
     4 |                  0
(2 rows)

-- select json_contains_path with group by index (result)
--Testcase 3665:
SELECT * FROM (
SELECT id,  json_contains_path(c1, 'one', '$.a', '$.e') FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_contains_path 
----+--------------------
  0 |                  0
  1 |                  0
  2 |                  0
  3 |                  1
  4 |                  1
  5 |                  0
(6 rows)

-- select json_contains_path with group by index (result)
--Testcase 3666:
SELECT * FROM (
SELECT id,  json_contains_path(c1, 'one', '$.a', '$.e') FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_contains_path 
----+--------------------
  0 |                  0
  1 |                  0
  2 |                  0
  3 |                  1
  4 |                  1
  5 |                  0
(6 rows)

-- select json_contains_path with group by having (EXPLAIN)
--Testcase 3667:
EXPLAIN VERBOSE
SELECT count(c2), json_contains_path(c1, 'one', '$.a', '$.e') FROM s8 group by json_contains_path(c1, 'one', '$.a', '$.e') HAVING count(c2) > 0;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=12)
   Output: count(c2), (json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[]))
   Group Key: (json_contains_path(s8.c1, VARIADIC '{one,$.a,$.e}'::text[]))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[])), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_contains_path(`c1`, 'one', '$.a', '$.e'), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_contains_path(c1, VARIADIC '{one,$.a,$.e}'::text[]), c2 FROM public.s81mysql
(11 rows)

-- select json_contains_path with group by having (result)
--Testcase 3668:
SELECT * FROM (
SELECT count(c2), json_contains_path(c1, 'one', '$.a', '$.e') FROM s8 group by json_contains_path(c1, 'one', '$.a', '$.e') HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_contains_path 
-------+--------------------
     2 |                  1
     4 |                  0
(2 rows)

-- select json_contains_path with group by index having (result)
--Testcase 3669:
SELECT * FROM (
SELECT c2,  json_contains_path(c1, 'one', '$.a', '$.e') FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_contains_path 
----+--------------------
  1 |                  0
  2 |                  0
  3 |                  0
  4 |                  1
  5 |                  1
  5 |                  0
(6 rows)

-- select json_contains_path with group by index having (result)
--Testcase 3670:
SELECT * FROM (
SELECT c2,  json_contains_path(c1, 'one', '$.a', '$.e') FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_contains_path 
----+--------------------
  1 |                  0
  2 |                  0
  3 |                  0
  4 |                  1
  5 |                  1
  5 |                  0
(6 rows)

-- select json_contains_path and as
--Testcase 3671:
SELECT * FROM (
SELECT id, json_contains_path(c1, 'all', '$.a.d') as json_contains_path1 FROM s8
) AS t ORDER BY 1;
 id | json_contains_path1 
----+---------------------
  0 |                   0
  1 |                   0
  2 |                   0
  3 |                   0
  4 |                   0
  5 |                   0
(6 rows)

-- select json_depth (builtin function, explain)
--Testcase 3672:
EXPLAIN VERBOSE
SELECT json_depth(c1), json_depth(json_build_array(c1, c2)), json_depth('[10, {"a": 20}]'), json_depth('1'), json_depth('true') FROM s8;
                                                                                                        QUERY PLAN                                                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8974.35 rows=6826 width=20)
   Output: (json_depth(c1)), (json_depth(json_build_array(c1, c2))), (json_depth('[10, {"a": 20}]'::json)), (json_depth('1'::json)), (json_depth('true'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_depth(`c1`), json_depth(json_array(`c1`, `c2`)), json_depth(CAST('[10, {"a": 20}]' AS JSON)), json_depth(CAST('1' AS JSON)), json_depth(CAST('true' AS JSON)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_depth(c1), public.json_depth(json_build_array(c1, c2)), public.json_depth('[10, {"a": 20}]'::json), public.json_depth('1'::json), public.json_depth('true'::json) FROM public.s81mysql
(7 rows)

-- select json_depth (builtin function, result)
--Testcase 3673:
SELECT * FROM (
SELECT id, json_depth(c1), json_depth(json_build_array(c1, c2)), json_depth('[10, {"a": 20}]'), json_depth('1'), json_depth('true') FROM s8
) AS t ORDER BY 1;
 id | json_depth | json_depth | json_depth | json_depth | json_depth 
----+------------+------------+------------+------------+------------
  0 |          3 |          4 |          3 |          1 |          1
  1 |          1 |          2 |          3 |          1 |          1
  2 |          1 |          2 |          3 |          1 |          1
  3 |          2 |          3 |          3 |          1 |          1
  4 |          3 |          4 |          3 |          1 |          1
  5 |          4 |          5 |          3 |          1 |          1
(6 rows)

-- select json_depth (builtin function, not pushdown constraints, explain)
--Testcase 3674:
EXPLAIN VERBOSE
SELECT json_depth(c1), json_depth(json_build_array(c1, c2)), json_depth('[10, {"a": 20}]'), json_depth('1'), json_depth('true') FROM s8 WHERE to_hex(id) = '2';
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..433.31 rows=34 width=20)
   Output: (json_depth(c1)), (json_depth(json_build_array(c1, c2))), (json_depth('[10, {"a": 20}]'::json)), (json_depth('1'::json)), (json_depth('true'::json))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_depth(`c1`), json_depth(json_array(`c1`, `c2`)), json_depth(CAST('[10, {"a": 20}]' AS JSON)), json_depth(CAST('1' AS JSON)), json_depth(CAST('true' AS JSON)), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_depth(c1), public.json_depth(json_build_array(c1, c2)), public.json_depth('[10, {"a": 20}]'::json), public.json_depth('1'::json), public.json_depth('true'::json), id FROM public.s81mysql
(8 rows)

-- select json_depth (builtin function, not pushdown constraints, result)
--Testcase 3675:
SELECT * FROM (
SELECT id, json_depth(c1), json_depth(json_build_array(c1, c2)), json_depth('[10, {"a": 20}]'), json_depth('1'), json_depth('true') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_depth | json_depth | json_depth | json_depth | json_depth 
----+------------+------------+------------+------------+------------
  2 |          1 |          2 |          3 |          1 |          1
(1 row)

-- select json_depth (builtin function, pushdown constraints, explain)
--Testcase 3676:
EXPLAIN VERBOSE
SELECT json_depth(c1), json_depth(json_build_array(c1, c2)), json_depth('[10, {"a": 20}]'), json_depth('1'), json_depth('true') FROM s8 WHERE id != 0;
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8948.15 rows=6792 width=20)
   Output: (json_depth(c1)), (json_depth(json_build_array(c1, c2))), (json_depth('[10, {"a": 20}]'::json)), (json_depth('1'::json)), (json_depth('true'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_depth(`c1`), json_depth(json_array(`c1`, `c2`)), json_depth(CAST('[10, {"a": 20}]' AS JSON)), json_depth(CAST('1' AS JSON)), json_depth(CAST('true' AS JSON)) FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_depth(c1), public.json_depth(json_build_array(c1, c2)), public.json_depth('[10, {"a": 20}]'::json), public.json_depth('1'::json), public.json_depth('true'::json) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_depth (builtin function, pushdown constraints, result)
--Testcase 3677:
SELECT * FROM (
SELECT id, json_depth(c1), json_depth(json_build_array(c1, c2)), json_depth('[10, {"a": 20}]'), json_depth('1'), json_depth('true') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | json_depth | json_depth | json_depth | json_depth | json_depth 
----+------------+------------+------------+------------+------------
  1 |          1 |          2 |          3 |          1 |          1
  2 |          1 |          2 |          3 |          1 |          1
  3 |          2 |          3 |          3 |          1 |          1
  4 |          3 |          4 |          3 |          1 |          1
  5 |          4 |          5 |          3 |          1 |          1
(5 rows)

-- select json_depth (builtin function, json_depth in constraints, explain)
--Testcase 3678:
EXPLAIN VERBOSE
SELECT json_depth(c1), json_depth(json_build_array(c1, c2)), json_depth('[10, {"a": 20}]'), json_depth('1'), json_depth('true') FROM s8 WHERE json_depth(c1) != 1;
                                                                                                                           QUERY PLAN                                                                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..10654.65 rows=6792 width=20)
   Output: (json_depth(c1)), (json_depth(json_build_array(c1, c2))), (json_depth('[10, {"a": 20}]'::json)), (json_depth('1'::json)), (json_depth('true'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_depth(`c1`), json_depth(json_array(`c1`, `c2`)), json_depth(CAST('[10, {"a": 20}]' AS JSON)), json_depth(CAST('1' AS JSON)), json_depth(CAST('true' AS JSON)) FROM `test`.`s82` WHERE ((json_depth(`c1`) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_depth(c1), public.json_depth(json_build_array(c1, c2)), public.json_depth('[10, {"a": 20}]'::json), public.json_depth('1'::json), public.json_depth('true'::json) FROM public.s81mysql WHERE ((public.json_depth(c1) <> 1))
(7 rows)

-- select json_depth (builtin function, json_depth in constraints, result)
--Testcase 3679:
SELECT * FROM (
SELECT id, json_depth(c1), json_depth(json_build_array(c1, c2)), json_depth('[10, {"a": 20}]'), json_depth('1'), json_depth('true') FROM s8 WHERE json_depth(c1) != 1
) AS t ORDER BY 1;
 id | json_depth | json_depth | json_depth | json_depth | json_depth 
----+------------+------------+------------+------------+------------
  0 |          3 |          4 |          3 |          1 |          1
  3 |          2 |          3 |          3 |          1 |          1
  4 |          3 |          4 |          3 |          1 |          1
  5 |          4 |          5 |          3 |          1 |          1
(4 rows)

-- select json_depth (builtin function, json_depth in constraints, explain)
--Testcase 3680:
EXPLAIN VERBOSE
SELECT json_depth(c1), json_depth(json_build_array(c1, c2)), json_depth('[10, {"a": 20}]'), json_depth('1'), json_depth('true') FROM s8 WHERE json_depth('true') = 1;
                                                                                                                               QUERY PLAN                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2055.09 rows=34 width=20)
   Output: (json_depth(c1)), (json_depth(json_build_array(c1, c2))), (json_depth('[10, {"a": 20}]'::json)), (json_depth('1'::json)), (json_depth('true'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_depth(`c1`), json_depth(json_array(`c1`, `c2`)), json_depth(CAST('[10, {"a": 20}]' AS JSON)), json_depth(CAST('1' AS JSON)), json_depth(CAST('true' AS JSON)) FROM `test`.`s82` WHERE ((json_depth(CAST('true' AS JSON)) = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_depth(c1), public.json_depth(json_build_array(c1, c2)), public.json_depth('[10, {"a": 20}]'::json), public.json_depth('1'::json), public.json_depth('true'::json) FROM public.s81mysql WHERE ((public.json_depth('true'::json) = 1))
(7 rows)

-- select json_depth (builtin function, json_depth in constraints, result)
--Testcase 3681:
SELECT * FROM (
SELECT id, json_depth(c1), json_depth(json_build_array(c1, c2)), json_depth('[10, {"a": 20}]'), json_depth('1'), json_depth('true') FROM s8 WHERE json_depth('true') = 1
) AS t ORDER BY 1;
 id | json_depth | json_depth | json_depth | json_depth | json_depth 
----+------------+------------+------------+------------+------------
  0 |          3 |          4 |          3 |          1 |          1
  1 |          1 |          2 |          3 |          1 |          1
  2 |          1 |          2 |          3 |          1 |          1
  3 |          2 |          3 |          3 |          1 |          1
  4 |          3 |          4 |          3 |          1 |          1
  5 |          4 |          5 |          3 |          1 |          1
(6 rows)

-- select json_depth with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3682:
EXPLAIN VERBOSE
SELECT json_depth('[10, {"a": 20}]'), pi(), 4.1 FROM s8;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=44)
   Output: (json_depth('[10, {"a": 20}]'::json)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_depth(CAST('[10, {"a": 20}]' AS JSON)), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_depth('[10, {"a": 20}]'::json), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_depth with non pushdown func and explicit constant (result)
--Testcase 3683:
SELECT * FROM (
SELECT id, json_depth('[10, {"a": 20}]'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_depth |        pi         | ?column? 
----+------------+-------------------+----------
  0 |          3 | 3.141592653589793 |      4.1
  1 |          3 | 3.141592653589793 |      4.1
  2 |          3 | 3.141592653589793 |      4.1
  3 |          3 | 3.141592653589793 |      4.1
  4 |          3 | 3.141592653589793 |      4.1
  5 |          3 | 3.141592653589793 |      4.1
(6 rows)

-- select json_depth with order by index (result)
--Testcase 3684:
SELECT id,  json_depth(c1) FROM s8 ORDER BY 2, 1;
 id | json_depth 
----+------------
  1 |          1
  2 |          1
  3 |          2
  0 |          3
  4 |          3
  5 |          4
(6 rows)

-- select json_depth with order by index (result)
--Testcase 3685:
SELECT id,  json_depth(c1) FROM s8 ORDER BY 1, 2;
 id | json_depth 
----+------------
  0 |          3
  1 |          1
  2 |          1
  3 |          2
  4 |          3
  5 |          4
(6 rows)

-- select json_depth with group by (EXPLAIN)
--Testcase 3686:
EXPLAIN VERBOSE
SELECT count(id), json_depth(c1) FROM s8 group by json_depth(c1);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
   Output: count(id), (json_depth(c1))
   Group Key: (json_depth(s8.c1))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_depth(c1)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_depth(`c1`), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_depth(c1), id FROM public.s81mysql
(10 rows)

-- select json_depth with group by (result)
--Testcase 3687:
SELECT * FROM (
SELECT count(id), json_depth(c1) FROM s8 group by json_depth(c1)
) AS t ORDER BY 1;
 count | json_depth 
-------+------------
     1 |          4
     1 |          2
     2 |          3
     2 |          1
(4 rows)

-- select json_depth with group by index (result)
--Testcase 3688:
SELECT * FROM (
SELECT id,  json_depth(c1) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_depth 
----+------------
  0 |          3
  1 |          1
  2 |          1
  3 |          2
  4 |          3
  5 |          4
(6 rows)

-- select json_depth with group by index (result)
--Testcase 3689:
SELECT * FROM (
SELECT id,  json_depth(c1) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_depth 
----+------------
  0 |          3
  1 |          1
  2 |          1
  3 |          2
  4 |          3
  5 |          4
(6 rows)

-- select json_depth with group by having (EXPLAIN)
--Testcase 3690:
EXPLAIN VERBOSE
SELECT count(c2), json_depth(c1) FROM s8 group by json_depth(c1) HAVING count(c2) > 0;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=12)
   Output: count(c2), (json_depth(c1))
   Group Key: (json_depth(s8.c1))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_depth(c1)), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_depth(`c1`), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_depth(c1), c2 FROM public.s81mysql
(11 rows)

-- select json_depth with group by having (result)
--Testcase 3691:
SELECT * FROM (
SELECT count(c2), json_depth(c1) FROM s8 group by json_depth(c1) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_depth 
-------+------------
     1 |          4
     1 |          2
     2 |          3
     2 |          1
(4 rows)

-- select json_depth with group by index having (result)
--Testcase 3692:
SELECT * FROM (
SELECT c2,  json_depth(c1) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_depth 
----+------------
  1 |          3
  2 |          1
  3 |          1
  4 |          2
  5 |          4
  5 |          3
(6 rows)

-- select json_depth with group by index having (result)
--Testcase 3693:
SELECT * FROM (
SELECT c2,  json_depth(c1) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_depth 
----+------------
  1 |          3
  2 |          1
  3 |          1
  4 |          2
  5 |          4
  5 |          3
(6 rows)

-- select json_depth and as
--Testcase 3694:
SELECT * FROM (
SELECT id, json_depth('[10, {"a": 20}]') as json_depth1 FROM s8
) AS t ORDER BY 1;
 id | json_depth1 
----+-------------
  0 |           3
  1 |           3
  2 |           3
  3 |           3
  4 |           3
  5 |           3
(6 rows)

-- select json_extract (builtin function, explain)
--Testcase 3695:
EXPLAIN VERBOSE
SELECT json_extract(c1, '$[1]'), json_extract(json_extract(c1, '$[1]', '$[0]')::json, '$[0]'), json_extract(c1, '$.a'), json_extract(json_build_array(c1, c3), '$[0]'), json_extract('{"id": 1, "b": {"c": 30}}', '$.id') FROM s8;
                                                                                                                                                                                                          QUERY PLAN                                                                                                                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..10714.98 rows=6826 width=160)
   Output: (json_extract(c1, VARIADIC '{$[1]}'::text[])), (json_extract((json_extract(c1, VARIADIC '{$[1],$[0]}'::text[]))::json, VARIADIC '{$[0]}'::text[])), (json_extract(c1, VARIADIC '{$.a}'::text[])), (json_extract(json_build_array(c1, c3), VARIADIC '{$[0]}'::text[])), (json_extract('{"id": 1, "b": {"c": 30}}'::json, VARIADIC '{$.id}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_extract(`c1`, '$[1]'), json_extract(json_extract(`c1`, '$[1]', '$[0]'), '$[0]'), json_extract(`c1`, '$.a'), json_extract(json_array(`c1`, `c3`), '$[0]'), json_extract(CAST('{"id": 1, "b": {"c": 30}}' AS JSON), '$.id') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_extract(c1, VARIADIC '{$[1]}'::text[]), public.json_extract(public.json_extract(c1, VARIADIC '{$[1],$[0]}'::text[])::json, VARIADIC '{$[0]}'::text[]), public.json_extract(c1, VARIADIC '{$.a}'::text[]), public.json_extract(json_build_array(c1, c3), VARIADIC '{$[0]}'::text[]), public.json_extract('{"id": 1, "b": {"c": 30}}'::json, VARIADIC '{$.id}'::text[]) FROM public.s81mysql
(7 rows)

-- select json_extract (builtin function, result)
--Testcase 3696:
SELECT * FROM (
SELECT id, json_extract(c1, '$[1]'), json_extract(json_extract(c1, '$[1]', '$[0]')::json, '$[0]'), json_extract(c1, '$.a'), json_extract(json_build_array(c1, c3), '$[0]'), json_extract('{"id": 1, "b": {"c": 30}}', '$.id') FROM s8
) AS t ORDER BY 1;
 id |     json_extract     |          json_extract           | json_extract |                       json_extract                        | json_extract 
----+----------------------+---------------------------------+--------------+-----------------------------------------------------------+--------------
  0 | [3, 4]               | [3, 4]                          |              | [[1, 2], [3, 4], 5]                                       | 1
  1 |                      |                                 |              | []                                                        | 1
  2 |                      | {}                              |              | {}                                                        | 1
  3 |                      | {"a": "10", "b": "15", "x": 25} | "10"         | {"a": "10", "b": "15", "x": 25}                           | 1
  4 |                      | {"a": 1, "b": 2, "c": {"d": 4}} | 1            | {"a": 1, "b": 2, "c": {"d": 4}}                           | 1
  5 | [{"k": "10"}, "def"] | [{"k": "10"}, "def"]            |              | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}] | 1
(6 rows)

-- select json_extract (builtin function, not pushdown constraints, explain)
--Testcase 3697:
EXPLAIN VERBOSE
SELECT json_extract(c1, '$[1]'), json_extract(json_extract(c1, '$[1]', '$[0]')::json, '$[0]'), json_extract(c1, '$.a'), json_extract(json_build_array(c1, c3), '$[0]'), json_extract('{"id": 1, "b": {"c": 30}}', '$.id') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                                             
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..441.98 rows=34 width=160)
   Output: (json_extract(c1, VARIADIC '{$[1]}'::text[])), (json_extract((json_extract(c1, VARIADIC '{$[1],$[0]}'::text[]))::json, VARIADIC '{$[0]}'::text[])), (json_extract(c1, VARIADIC '{$.a}'::text[])), (json_extract(json_build_array(c1, c3), VARIADIC '{$[0]}'::text[])), (json_extract('{"id": 1, "b": {"c": 30}}'::json, VARIADIC '{$.id}'::text[]))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_extract(`c1`, '$[1]'), json_extract(json_extract(`c1`, '$[1]', '$[0]'), '$[0]'), json_extract(`c1`, '$.a'), json_extract(json_array(`c1`, `c3`), '$[0]'), json_extract(CAST('{"id": 1, "b": {"c": 30}}' AS JSON), '$.id'), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_extract(c1, VARIADIC '{$[1]}'::text[]), public.json_extract(public.json_extract(c1, VARIADIC '{$[1],$[0]}'::text[])::json, VARIADIC '{$[0]}'::text[]), public.json_extract(c1, VARIADIC '{$.a}'::text[]), public.json_extract(json_build_array(c1, c3), VARIADIC '{$[0]}'::text[]), public.json_extract('{"id": 1, "b": {"c": 30}}'::json, VARIADIC '{$.id}'::text[]), id FROM public.s81mysql
(8 rows)

-- select json_extract (builtin function, not pushdown constraints, result)
--Testcase 3698:
SELECT * FROM (
SELECT id, json_extract(c1, '$[1]'), json_extract(json_extract(c1, '$[1]', '$[0]')::json, '$[0]'), json_extract(c1, '$.a'), json_extract(json_build_array(c1, c3), '$[0]'), json_extract('{"id": 1, "b": {"c": 30}}', '$.id') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_extract | json_extract | json_extract | json_extract | json_extract 
----+--------------+--------------+--------------+--------------+--------------
  2 |              | {}           |              | {}           | 1
(1 row)

-- select json_extract (builtin function, pushdown constraints, explain)
--Testcase 3699:
EXPLAIN VERBOSE
SELECT json_extract(c1, '$[1]'), json_extract(json_extract(c1, '$[1]', '$[0]')::json, '$[0]'), json_extract(c1, '$.a'), json_extract(json_build_array(c1, c3), '$[0]'), json_extract('{"id": 1, "b": {"c": 30}}', '$.id') FROM s8 WHERE id != 0;
                                                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..10680.10 rows=6792 width=160)
   Output: (json_extract(c1, VARIADIC '{$[1]}'::text[])), (json_extract((json_extract(c1, VARIADIC '{$[1],$[0]}'::text[]))::json, VARIADIC '{$[0]}'::text[])), (json_extract(c1, VARIADIC '{$.a}'::text[])), (json_extract(json_build_array(c1, c3), VARIADIC '{$[0]}'::text[])), (json_extract('{"id": 1, "b": {"c": 30}}'::json, VARIADIC '{$.id}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_extract(`c1`, '$[1]'), json_extract(json_extract(`c1`, '$[1]', '$[0]'), '$[0]'), json_extract(`c1`, '$.a'), json_extract(json_array(`c1`, `c3`), '$[0]'), json_extract(CAST('{"id": 1, "b": {"c": 30}}' AS JSON), '$.id') FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_extract(c1, VARIADIC '{$[1]}'::text[]), public.json_extract(public.json_extract(c1, VARIADIC '{$[1],$[0]}'::text[])::json, VARIADIC '{$[0]}'::text[]), public.json_extract(c1, VARIADIC '{$.a}'::text[]), public.json_extract(json_build_array(c1, c3), VARIADIC '{$[0]}'::text[]), public.json_extract('{"id": 1, "b": {"c": 30}}'::json, VARIADIC '{$.id}'::text[]) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_extract (builtin function, pushdown constraints, result)
--Testcase 3700:
SELECT * FROM (
SELECT id, json_extract(c1, '$[1]'), json_extract(json_extract(c1, '$[1]', '$[0]')::json, '$[0]'), json_extract(c1, '$.a'), json_extract(json_build_array(c1, c3), '$[0]'), json_extract('{"id": 1, "b": {"c": 30}}', '$.id') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id |     json_extract     |          json_extract           | json_extract |                       json_extract                        | json_extract 
----+----------------------+---------------------------------+--------------+-----------------------------------------------------------+--------------
  1 |                      |                                 |              | []                                                        | 1
  2 |                      | {}                              |              | {}                                                        | 1
  3 |                      | {"a": "10", "b": "15", "x": 25} | "10"         | {"a": "10", "b": "15", "x": 25}                           | 1
  4 |                      | {"a": 1, "b": 2, "c": {"d": 4}} | 1            | {"a": 1, "b": 2, "c": {"d": 4}}                           | 1
  5 | [{"k": "10"}, "def"] | [{"k": "10"}, "def"]            |              | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}] | 1
(5 rows)

-- select json_extract (builtin function, json_extract in constraints, explain)
--Testcase 3701:
EXPLAIN VERBOSE
SELECT json_extract(c1, '$[1]'), json_extract(json_extract(c1, '$[1]', '$[0]')::json, '$[0]'), json_extract(c1, '$.a'), json_extract(json_build_array(c1, c3), '$[0]'), json_extract('{"id": 1, "b": {"c": 30}}', '$.id') FROM s8 WHERE json_extract(c1, '$[1]')::numeric != 1;
                                                                                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..12420.73 rows=6792 width=160)
   Output: (json_extract(c1, VARIADIC '{$[1]}'::text[])), (json_extract((json_extract(c1, VARIADIC '{$[1],$[0]}'::text[]))::json, VARIADIC '{$[0]}'::text[])), (json_extract(c1, VARIADIC '{$.a}'::text[])), (json_extract(json_build_array(c1, c3), VARIADIC '{$[0]}'::text[])), (json_extract('{"id": 1, "b": {"c": 30}}'::json, VARIADIC '{$.id}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_extract(`c1`, '$[1]'), json_extract(json_extract(`c1`, '$[1]', '$[0]'), '$[0]'), json_extract(`c1`, '$.a'), json_extract(json_array(`c1`, `c3`), '$[0]'), json_extract(CAST('{"id": 1, "b": {"c": 30}}' AS JSON), '$.id') FROM `test`.`s82` WHERE ((json_extract(`c1`, '$[1]') <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_extract(c1, VARIADIC '{$[1]}'::text[]), public.json_extract(public.json_extract(c1, VARIADIC '{$[1],$[0]}'::text[])::json, VARIADIC '{$[0]}'::text[]), public.json_extract(c1, VARIADIC '{$.a}'::text[]), public.json_extract(json_build_array(c1, c3), VARIADIC '{$[0]}'::text[]), public.json_extract('{"id": 1, "b": {"c": 30}}'::json, VARIADIC '{$.id}'::text[]) FROM public.s81mysql WHERE ((public.json_extract(c1, VARIADIC '{$[1]}'::text[])::numeric <> 1::numeric))
(7 rows)

-- select json_extract (builtin function, json_extract in constraints, result)
--Testcase 3702:
SELECT * FROM (
SELECT id, json_extract(c1, '$[1]'), json_extract(json_extract(c1, '$[1]', '$[0]')::json, '$[0]'), json_extract(c1, '$.a'), json_extract(json_build_array(c1, c3), '$[0]'), json_extract('{"id": 1, "b": {"c": 30}}', '$.id') FROM s8 WHERE json_extract(c1, '$[1]')::numeric != 1
) AS t ORDER BY 1;
 id |     json_extract     |     json_extract     | json_extract |                       json_extract                        | json_extract 
----+----------------------+----------------------+--------------+-----------------------------------------------------------+--------------
  0 | [3, 4]               | [3, 4]               |              | [[1, 2], [3, 4], 5]                                       | 1
  5 | [{"k": "10"}, "def"] | [{"k": "10"}, "def"] |              | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}] | 1
(2 rows)

-- select json_extract (builtin function, json_extract in constraints, explain)
--Testcase 3703:
EXPLAIN VERBOSE
SELECT json_extract(c1, '$[1]'), json_extract(json_extract(c1, '$[1]', '$[0]')::json, '$[0]'), json_extract(c1, '$.a'), json_extract(json_build_array(c1, c3), '$[0]'), json_extract('{"id": 1, "b": {"c": 30}}', '$.id') FROM s8 WHERE json_extract('{"id": 1, "b": {"c": 30}}', '$.id')::numeric = 1;


 Foreign Scan on public.s8  (cost=200.00..2097.89 rows=34 width=160)
   Output: (json_extract(c1, VARIADIC '{$[1]}'::text[])), (json_extract((json_extract(c1, VARIADIC '{$[1],$[0]}'::text[]))::json, VARIADIC '{$[0]}'::text[])), (json_extract(c1, VARIADIC '{$.a}'::text[])), (json_extract(json_build_array(c1, c3), VARIADIC '{$[0]}'::text[])), (json_extract('{"id": 1, "b": {"c": 30}}'::json, VARIADIC '{$.id}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_extract(`c1`, '$[1]'), json_extract(json_extract(`c1`, '$[1]', '$[0]'), '$[0]'), json_extract(`c1`, '$.a'), json_extract(json_array(`c1`, `c3`), '$[0]'), json_extract(CAST('{"id": 1, "b": {"c": 30}}' AS JSON), '$.id') FROM `test`.`s82` WHERE ((json_extract(CAST('{"id": 1, "b": {"c": 30}}' AS JSON), '$.id') = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_extract(c1, VARIADIC '{$[1]}'::text[]), public.json_extract(public.json_extract(c1, VARIADIC '{$[1],$[0]}'::text[])::json, VARIADIC '{$[0]}'::text[]), public.json_extract(c1, VARIADIC '{$.a}'::text[]), public.json_extract(json_build_array(c1, c3), VARIADIC '{$[0]}'::text[]), public.json_extract('{"id": 1, "b": {"c": 30}}'::json, VARIADIC '{$.id}'::text[]) FROM public.s81mysql WHERE ((public.json_extract('{"id": 1, "b": {"c": 30}}'::json, VARIADIC '{$.id}'::text[])::numeric = 1::numeric))
(7 rows)

-- select json_extract (builtin function, json_extract in constraints, result)
--Testcase 3704:
SELECT * FROM (
SELECT id, json_extract(c1, '$[1]'), json_extract(json_extract(c1, '$[1]', '$[0]')::json, '$[0]'), json_extract(c1, '$.a'), json_extract(json_build_array(c1, c3), '$[0]'), json_extract('{"id": 1, "b": {"c": 30}}', '$.id') FROM s8 WHERE json_extract('{"id": 1, "b": {"c": 30}}', '$.id')::numeric = 1
) AS t ORDER BY 1;
 id |     json_extract     |          json_extract           | json_extract |                       json_extract                        | json_extract 
----+----------------------+---------------------------------+--------------+-----------------------------------------------------------+--------------
  0 | [3, 4]               | [3, 4]                          |              | [[1, 2], [3, 4], 5]                                       | 1
  1 |                      |                                 |              | []                                                        | 1
  2 |                      | {}                              |              | {}                                                        | 1
  3 |                      | {"a": "10", "b": "15", "x": 25} | "10"         | {"a": "10", "b": "15", "x": 25}                           | 1
  4 |                      | {"a": 1, "b": 2, "c": {"d": 4}} | 1            | {"a": 1, "b": 2, "c": {"d": 4}}                           | 1
  5 | [{"k": "10"}, "def"] | [{"k": "10"}, "def"]            |              | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}] | 1
(6 rows)

-- select json_extract as nest function with agg (not pushdown, explain)
--Testcase 3705:
EXPLAIN VERBOSE
SELECT sum(id),json_extract(json_build_array('{"id": 1, "b": {"c": 30}}', sum(id)), '$.id') FROM s8;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_extract(json_build_array('{"id": 1, "b": {"c": 30}}', (sum(id))), VARIADIC '{$.id}'::text[])
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_extract as nest function with agg (not pushdown, result, error)
--Testcase 3706:
SELECT sum(id),json_extract(json_build_array('{"id": 1, "b": {"c": 30}}', sum(id)), '$.id') FROM s8;
ERROR:  stub json_extract(json, variadic text[]) is called
CONTEXT:  PL/pgSQL function json_extract(json,text[]) line 3 at RAISE
-- select json_extract with abnormal cast
--Testcase 3707:
SELECT json_extract(c1, '$.a')::int FROM s8;  -- should fail
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: invalid input syntax for type integer: ""10""
-- select json_extract with normal cast
--Testcase 3708:
SELECT * FROM (
SELECT id, json_extract('{"a": "2000-01-01"}', '$.a')::timestamp, json_extract('{"a": "2000-01-01"}', '$.a')::date , json_extract('{"a": 1234}', '$.a')::bigint, json_extract('{"a": "b"}', '$.a')::text FROM s8
) AS t ORDER BY 1;
 id |    json_extract     | json_extract | json_extract | json_extract 
----+---------------------+--------------+--------------+--------------
  0 | 2000-01-01 00:00:00 | 2000-01-01   |         1234 | "b"
  1 | 2000-01-01 00:00:00 | 2000-01-01   |         1234 | "b"
  2 | 2000-01-01 00:00:00 | 2000-01-01   |         1234 | "b"
  3 | 2000-01-01 00:00:00 | 2000-01-01   |         1234 | "b"
  4 | 2000-01-01 00:00:00 | 2000-01-01   |         1234 | "b"
  5 | 2000-01-01 00:00:00 | 2000-01-01   |         1234 | "b"
(6 rows)

-- select json_extract with normal cast
--Testcase 3709:
SELECT json_extract('{"a": "2000-01-01"}', '$.a')::timestamptz, json_extract('{"a": "12:10:20.123456"}', '$.a')::time , json_extract('{"a": "12:10:20.123456"}', '$.a')::timetz FROM s8;
      json_extract      |  json_extract   |    json_extract    
------------------------+-----------------+--------------------
 2000-01-01 00:00:00+09 | 12:10:20.123456 | 12:10:20.123456+09
 2000-01-01 00:00:00+09 | 12:10:20.123456 | 12:10:20.123456+09
 2000-01-01 00:00:00+09 | 12:10:20.123456 | 12:10:20.123456+09
 2000-01-01 09:00:00+09 | 12:10:20.123456 | 12:10:20.123456+00
 2000-01-01 09:00:00+09 | 12:10:20.123456 | 12:10:20.123456+00
 2000-01-01 09:00:00+09 | 12:10:20.123456 | 12:10:20.123456+00
(6 rows)

-- select json_extract with type modifier (explain)
--Testcase 3710:
EXPLAIN VERBOSE
SELECT json_extract('{"a": "2000-01-01 12:02:01.123456"}', '$.a')::timestamp(3), json_extract('{"a": "2000-01-01 12:02:01.123456"}', '$.a')::timestamptz(3), json_extract('{"a": "12:10:20.123456"}', '$.a')::time(3), json_extract('{"a": "12:10:20.123456"}', '$.a')::timetz(3) FROM s8;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7455.56 rows=6826 width=36)
   Output: ((json_extract('{"a": "2000-01-01 12:02:01.123456"}'::json, VARIADIC '{$.a}'::text[]))::timestamp(3) without time zone), ((json_extract('{"a": "2000-01-01 12:02:01.123456"}'::json, VARIADIC '{$.a}'::text[]))::timestamp(3) with time zone), ((json_extract('{"a": "12:10:20.123456"}'::json, VARIADIC '{$.a}'::text[]))::time(3) without time zone), ((json_extract('{"a": "12:10:20.123456"}'::json, VARIADIC '{$.a}'::text[]))::time(3) with time zone)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_extract(CAST('{"a": "2000-01-01 12:02:01.123456"}' AS JSON), '$.a'), json_extract(CAST('{"a": "2000-01-01 12:02:01.123456"}' AS JSON), '$.a'), json_extract(CAST('{"a": "12:10:20.123456"}' AS JSON), '$.a'), json_extract(CAST('{"a": "12:10:20.123456"}' AS JSON), '$.a') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_extract('{"a": "2000-01-01 12:02:01.123456"}'::json, VARIADIC '{$.a}'::text[])::timestamp(3) without time zone, public.json_extract('{"a": "2000-01-01 12:02:01.123456"}'::json, VARIADIC '{$.a}'::text[])::timestamp(3) with time zone, public.json_extract('{"a": "12:10:20.123456"}'::json, VARIADIC '{$.a}'::text[])::time(3) without time zone, public.json_extract('{"a": "12:10:20.123456"}'::json, VARIADIC '{$.a}'::text[])::time(3) with time zone FROM public.s81mysql
(7 rows)

-- select json_extract with type modifier (result)
--Testcase 3711:
SELECT * FROM (
SELECT json_extract('{"a": "2000-01-01 12:02:01.123456"}', '$.a')::timestamp(3), json_extract('{"a": "2000-01-01 12:02:01.123456"}', '$.a')::timestamptz(3), json_extract('{"a": "12:10:20.123456"}', '$.a')::time(3), json_extract('{"a": "12:10:20.123456"}', '$.a')::timetz(3) FROM s8
) AS t ORDER BY 1, 2, 3, 4;
      json_extract       |        json_extract        | json_extract |  json_extract   
-------------------------+----------------------------+--------------+-----------------
 2000-01-01 12:02:01.123 | 2000-01-01 12:02:01.123+09 | 12:10:20.123 | 12:10:20.123+09
 2000-01-01 12:02:01.123 | 2000-01-01 12:02:01.123+09 | 12:10:20.123 | 12:10:20.123+09
 2000-01-01 12:02:01.123 | 2000-01-01 12:02:01.123+09 | 12:10:20.123 | 12:10:20.123+09
 2000-01-01 12:02:01.123 | 2000-01-01 21:02:01.123+09 | 12:10:20.123 | 12:10:20.123+00
 2000-01-01 12:02:01.123 | 2000-01-01 21:02:01.123+09 | 12:10:20.123 | 12:10:20.123+00
 2000-01-01 12:02:01.123 | 2000-01-01 21:02:01.123+09 | 12:10:20.123 | 12:10:20.123+00
(6 rows)

-- select json_extract with type modifier (explain)
--Testcase 3712:
EXPLAIN VERBOSE
SELECT json_extract('{"a": 100}', '$.a')::numeric(10, 2), json_extract('{"a": 100}', '$.a')::decimal(10, 2), json_unquote(json_extract('{"a": "1.123456"}', '$.a'))::numeric(10, 3) FROM s8;
                                                                                                                                 QUERY PLAN                                                                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7404.36 rows=6826 width=48)
   Output: ((json_extract('{"a": 100}'::json, VARIADIC '{$.a}'::text[]))::numeric(10,2)), ((json_extract('{"a": 100}'::json, VARIADIC '{$.a}'::text[]))::numeric(10,2)), ((json_unquote(json_extract('{"a": "1.123456"}'::json, VARIADIC '{$.a}'::text[])))::numeric(10,3))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_extract(CAST('{"a": 100}' AS JSON), '$.a'), json_unquote(json_extract(CAST('{"a": "1.123456"}' AS JSON), '$.a')) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_extract('{"a": 100}'::json, VARIADIC '{$.a}'::text[])::numeric(10,2), public.json_unquote(public.json_extract('{"a": "1.123456"}'::json, VARIADIC '{$.a}'::text[]))::numeric(10,3) FROM public.s81mysql
(7 rows)

-- select json_extract with type modifier (result)
--Testcase 3713:
SELECT * FROM (
SELECT json_extract('{"a": 100}', '$.a')::numeric(10, 2), json_extract('{"a": 100}', '$.a')::decimal(10, 2), json_unquote(json_extract('{"a": "1.123456"}', '$.a'))::numeric(10, 3) FROM s8)
AS t ORDER BY 1, 2, 3;
 json_extract | json_extract | json_unquote 
--------------+--------------+--------------
       100.00 |       100.00 |        1.123
       100.00 |       100.00 |        1.123
       100.00 |       100.00 |        1.123
       100.00 |       100.00 |        1.123
       100.00 |       100.00 |        1.123
       100.00 |       100.00 |        1.123
(6 rows)

-- select json_extract with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3714:
EXPLAIN VERBOSE
SELECT json_extract(c1, '$.a'), pi(), 4.1 FROM s8;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (json_extract(c1, VARIADIC '{$.a}'::text[])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_extract(`c1`, '$.a'), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_extract(c1, VARIADIC '{$.a}'::text[]), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_extract with non pushdown func and explicit constant (result)
--Testcase 3715:
SELECT * FROM (
SELECT id, json_extract(c1, '$.a'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_extract |        pi         | ?column? 
----+--------------+-------------------+----------
  0 |              | 3.141592653589793 |      4.1
  1 |              | 3.141592653589793 |      4.1
  2 |              | 3.141592653589793 |      4.1
  3 | "10"         | 3.141592653589793 |      4.1
  4 | 1            | 3.141592653589793 |      4.1
  5 |              | 3.141592653589793 |      4.1
(6 rows)

-- select json_extract with order by index (result)
--Testcase 3716:
SELECT id,  json_extract(c1, '$[1]') FROM s8 ORDER BY 2, 1;
 id |     json_extract     
----+----------------------
  0 | [3, 4]
  5 | [{"k": "10"}, "def"]
  1 | 
  2 | 
  3 | 
  4 | 
(6 rows)

-- select json_extract with order by index (result)
--Testcase 3717:
SELECT id,  json_extract(c1, '$[1]') FROM s8 ORDER BY 1, 2;
 id |     json_extract     
----+----------------------
  0 | [3, 4]
  1 | 
  2 | 
  3 | 
  4 | 
  5 | [{"k": "10"}, "def"]
(6 rows)

-- select json_extract with group by (EXPLAIN)
--Testcase 3718:
EXPLAIN VERBOSE
SELECT count(id), json_extract(c1, '$[1]') FROM s8 group by json_extract(c1, '$[1]');
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
   Output: count(id), (json_extract(c1, VARIADIC '{$[1]}'::text[]))
   Group Key: (json_extract(s8.c1, VARIADIC '{$[1]}'::text[]))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=36)
         Output: (json_extract(c1, VARIADIC '{$[1]}'::text[])), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_extract(`c1`, '$[1]'), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_extract(c1, VARIADIC '{$[1]}'::text[]), id FROM public.s81mysql
(10 rows)

-- select json_extract with group by (result)
--Testcase 3719:
SELECT * FROM (
SELECT count(id), json_extract(c1, '$[1]') FROM s8 group by json_extract(c1, '$[1]')
) AS t ORDER BY 1;
 count |     json_extract     
-------+----------------------
     1 | [{"k": "10"}, "def"]
     1 | [3, 4]
     4 | 
(3 rows)

-- select json_extract with group by index (result)
--Testcase 3720:
SELECT * FROM (
SELECT id,  json_extract(c1, '$[1]') FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id |     json_extract     
----+----------------------
  0 | [3, 4]
  1 | 
  2 | 
  3 | 
  4 | 
  5 | [{"k": "10"}, "def"]
(6 rows)

-- select json_extract with group by index (result)
--Testcase 3721:
SELECT * FROM (
SELECT id,  json_extract(c1, '$[1]') FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id |     json_extract     
----+----------------------
  0 | [3, 4]
  1 | 
  2 | 
  3 | 
  4 | 
  5 | [{"k": "10"}, "def"]
(6 rows)

-- select json_extract with group by having (EXPLAIN)
--Testcase 3722:
EXPLAIN VERBOSE
SELECT count(c2), json_extract(c1, '$[1]') FROM s8 group by json_extract(c1, '$[1]') HAVING count(c2) > 0;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=40)
   Output: count(c2), (json_extract(c1, VARIADIC '{$[1]}'::text[]))
   Group Key: (json_extract(s8.c1, VARIADIC '{$[1]}'::text[]))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=36)
         Output: (json_extract(c1, VARIADIC '{$[1]}'::text[])), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_extract(`c1`, '$[1]'), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_extract(c1, VARIADIC '{$[1]}'::text[]), c2 FROM public.s81mysql
(11 rows)

-- select json_extract with group by having (result)
--Testcase 3723:
SELECT * FROM (
SELECT count(c2), json_extract(c1, '$[1]') FROM s8 group by json_extract(c1, '$[1]') HAVING count(c2) > 0
) AS t ORDER BY 1;
 count |     json_extract     
-------+----------------------
     1 | [{"k": "10"}, "def"]
     1 | [3, 4]
     4 | 
(3 rows)

-- select json_extract with group by index having (result)
--Testcase 3724:
SELECT * FROM (
SELECT c2,  json_extract(c1, '$[1]') FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 |     json_extract     
----+----------------------
  1 | [3, 4]
  2 | 
  3 | 
  4 | 
  5 | 
  5 | [{"k": "10"}, "def"]
(6 rows)

-- select json_extract with group by index having (result)
--Testcase 3725:
SELECT * FROM (
SELECT c2,  json_extract(c1, '$[1]') FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 |     json_extract     
----+----------------------
  1 | [3, 4]
  2 | 
  3 | 
  4 | 
  5 | [{"k": "10"}, "def"]
  5 | 
(6 rows)

-- select json_extract and as
--Testcase 3726:
SELECT * FROM (
SELECT id, json_extract(c1, '$.a') as json_extract1 FROM s8
) AS t ORDER BY 1;
 id | json_extract1 
----+---------------
  0 | 
  1 | 
  2 | 
  3 | "10"
  4 | 1
  5 | 
(6 rows)

-- JSON_INSERT()
-- select json_insert (stub function, explain)
--Testcase 3727:
EXPLAIN VERBOSE
SELECT json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_insert(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', pi()) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- select json_insert (stub function, result)
--Testcase 3728:
SELECT * FROM (
SELECT id, json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8
) AS t ORDER BY 1;
 id |                        json_insert                        
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {"a": 3, "b": "text", "c": 1}
  3 | {"a": "10", "b": "15", "c": 1, "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- select json_insert (stub function, not pushdown constraints, explain)
--Testcase 3729:
EXPLAIN VERBOSE
SELECT json_insert(c1, '$.a, c2', '$.b, c3', '$.c, NULL', '$, TRUE', '$, pi()') FROM s8 WHERE to_hex(id) = '1';
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..399.23 rows=34 width=32)
   Output: (json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', NULL","''$'', TRUE","''$'', pi()"}'::path_value[]))
   Filter: (to_hex(s8.id) = '1'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_insert(`c1`, '$.a', c2, '$.b', c3, '$.c', NULL, '$', TRUE, '$', pi()), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', NULL","''$'', TRUE","''$'', pi()"}'::public.path_value[]), id FROM public.s81mysql
(8 rows)

-- select json_insert (stub function, not pushdown constraints, result)
--Testcase 3730:
SELECT * FROM (
SELECT id, json_insert(c1, '$.a, c2', '$.b, c3', '$.c, NULL', '$, TRUE', '$, pi()') FROM s8 WHERE to_hex(id) = '1'
) AS t ORDER BY 1;
 id | json_insert 
----+-------------
  1 | []
(1 row)

-- select json_insert (stub function, pushdown constraints, explain)
--Testcase 3731:
EXPLAIN VERBOSE
SELECT json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, CAST("[true, false]" AS JSON)') FROM s8 WHERE id = 1;
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..314.50 rows=34 width=32)
   Output: (json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', CAST(\"[true, false]\" AS JSON)"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_insert(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', CAST("[true, false]" AS JSON)) FROM `test`.`s82` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_insert(c1, VARIADIC E'{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', CAST(\\"[true, false]\\" AS JSON)"}'::public.path_value[]) FROM public.s81mysql WHERE ((id = 1))
(7 rows)

-- select json_insert (stub function, pushdown constraints, result)
--Testcase 3732:
SELECT * FROM (
SELECT id, json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, CAST("[true, false]" AS JSON)') FROM s8 WHERE id = 1
) AS t ORDER BY 1;
 id | json_insert 
----+-------------
  1 | []
(1 row)

-- select json_insert (stub function, stub in constraints, explain)
--Testcase 3733:
EXPLAIN VERBOSE
SELECT json_insert(c1, '$.a, c2', '$.b, c3', '$.c, NULL', '$, TRUE', '$, "[true, false]"') FROM s8 WHERE log2(id) > 1;
                                                                                                                 QUERY PLAN                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2643.41 rows=2276 width=32)
   Output: (json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', NULL","''$'', TRUE","''$'', ''[true, false]''"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_insert(`c1`, '$.a', c2, '$.b', c3, '$.c', NULL, '$', TRUE, '$', '[true, false]') FROM `test`.`s82` WHERE ((log2(`id`) > 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', NULL","''$'', TRUE","''$'', ''[true, false]''"}'::public.path_value[]) FROM public.s81mysql WHERE ((public.log2(id) > 1::double precision))
(7 rows)

-- select json_insert (stub function, stub in constraints, result)
--Testcase 3734:
SELECT * FROM (
SELECT id, json_insert(c1, '$.a, c2', '$.b, c3', '$.c, NULL', '$, TRUE', '$, "[true, false]"') FROM s8 WHERE log2(id) > 1
) AS t ORDER BY 1;
 id |                        json_insert                        
----+-----------------------------------------------------------
  3 | {"a": "10", "b": "15", "c": null, "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(3 rows)

-- select json_insert (stub function, stub in constraints, explain)
--Testcase 3735:
EXPLAIN VERBOSE
SELECT json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8 WHERE json_depth(json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()')) > 0;
                                                                                                                                                                  QUERY PLAN                                                                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..4332.85 rows=2276 width=32)
   Output: (json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_insert(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', pi()) FROM `test`.`s82` WHERE ((json_depth(json_insert(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', pi())) > 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::public.path_value[]) FROM public.s81mysql WHERE ((public.json_depth(public.json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::public.path_value[])) > 0))
(7 rows)

-- select json_insert (stub function, stub in constraints, result)
--Testcase 3736:
SELECT * FROM (
SELECT id, json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8 WHERE json_depth(json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()')) > 0
) AS t ORDER BY 1;
 id |                        json_insert                        
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {"a": 3, "b": "text", "c": 1}
  3 | {"a": "10", "b": "15", "c": 1, "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_insert with 1 arg explain
--Testcase 3737:
EXPLAIN VERBOSE
SELECT json_insert(c1, '$.a, c2') FROM s8;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_insert(c1, VARIADIC '{"''$.a'', c2"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_insert(`c1`, '$.a', c2) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_insert(c1, VARIADIC '{"''$.a'', c2"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_insert with 1 arg result
--Testcase 3738:
SELECT * FROM (
SELECT id, json_insert(c1, '$.a, c2') FROM s8
) AS t ORDER BY 1;
 id |                        json_insert                        
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {"a": 3}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_insert with 2 args explain
--Testcase 3739:
EXPLAIN VERBOSE
SELECT json_insert(c1, '$.a, c2', '$.b, c3') FROM s8;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_insert(`c1`, '$.a', c2, '$.b', c3) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_insert with 2 args result
--Testcase 3740:
SELECT * FROM (
SELECT id, json_insert(c1, '$.a, c2', '$.b, c3') FROM s8
) AS t ORDER BY 1;
 id |                        json_insert                        
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {"a": 3, "b": "text"}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_insert with 3 args explain
--Testcase 3741:
EXPLAIN VERBOSE
SELECT json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1') FROM s8;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_insert(`c1`, '$.a', c2, '$.b', c3, '$.c', 1) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_insert with 3 args result
--Testcase 3742:
SELECT * FROM (
SELECT id, json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1') FROM s8
) AS t ORDER BY 1;
 id |                        json_insert                        
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {"a": 3, "b": "text", "c": 1}
  3 | {"a": "10", "b": "15", "c": 1, "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_insert with 4 args explain
--Testcase 3743:
EXPLAIN VERBOSE
SELECT json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"') FROM s8;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_insert(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_insert with 4 args result
--Testcase 3744:
SELECT * FROM (
SELECT id, json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"') FROM s8
) AS t ORDER BY 1;
 id |                        json_insert                        
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {"a": 3, "b": "text", "c": 1}
  3 | {"a": "10", "b": "15", "c": 1, "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_insert with 5 args explain
--Testcase 3745:
EXPLAIN VERBOSE
SELECT json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_insert(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', pi()) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_insert(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_insert with 5 args result
--Testcase 3746:
SELECT * FROM (
SELECT id, json_insert(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8
) AS t ORDER BY 1;
 id |                        json_insert                        
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {"a": 3, "b": "text", "c": 1}
  3 | {"a": "10", "b": "15", "c": 1, "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- select json_insert as nest function with agg (not pushdown, explain)
--Testcase 3747:
EXPLAIN VERBOSE
SELECT sum(id),json_insert('["a", ["b", "c"], "d"]', '$, sum(id)') FROM s8;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', sum(id)"}'::path_value[])
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_insert as nest function with agg (not pushdown, result, error)
--Testcase 3748:
SELECT sum(id),json_insert('["a", ["b", "c"], "d"]', '$, sum(id)') FROM s8;
ERROR:  stub json_insert(json, variadic path_value[]) is called
CONTEXT:  PL/pgSQL function json_insert(json,path_value[]) line 3 at RAISE
-- select json_insert as nest function with json_build_array (pushdown, explain)
--Testcase 3749:
EXPLAIN VERBOSE
SELECT json_insert(json_build_array('["a", ["b", "c"], "d"]', c1), '$, log2(id)') FROM s8;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=32)
   Output: (json_insert(json_build_array('["a", ["b", "c"], "d"]', c1), VARIADIC '{"''$'', log2(id)"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_insert(json_array('["a", ["b", "c"], "d"]', `c1`), '$', log2(id)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_insert(json_build_array('["a", ["b", "c"], "d"]', c1), VARIADIC '{"''$'', log2(id)"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- select json_insert as nest function with json_build_array (pushdown, result)
--Testcase 3750:
SELECT * FROM (
SELECT id, json_insert(json_build_array('["a", ["b", "c"], "d"]', c1), '$, log2(id)') FROM s8
) AS t ORDER BY 1;
 id |                                          json_insert                                          
----+-----------------------------------------------------------------------------------------------
  0 | ["[\"a\", [\"b\", \"c\"], \"d\"]", [[1, 2], [3, 4], 5]]
  1 | ["[\"a\", [\"b\", \"c\"], \"d\"]", []]
  2 | ["[\"a\", [\"b\", \"c\"], \"d\"]", {}]
  3 | ["[\"a\", [\"b\", \"c\"], \"d\"]", {"a": "10", "b": "15", "x": 25}]
  4 | ["[\"a\", [\"b\", \"c\"], \"d\"]", {"a": 1, "b": 2, "c": {"d": 4}}]
  5 | ["[\"a\", [\"b\", \"c\"], \"d\"]", ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]]
(6 rows)

-- select json_insert with non pushdown func and explicit constant (explain)
--Testcase 3751:
EXPLAIN VERBOSE
SELECT json_insert(c1, '$.a, c2'), pi(), 4.1 FROM s8;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (json_insert(c1, VARIADIC '{"''$.a'', c2"}'::path_value[])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_insert(`c1`, '$.a', c2), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_insert(c1, VARIADIC '{"''$.a'', c2"}'::public.path_value[]), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_insert with non pushdown func and explicit constant (result)
--Testcase 3752:
SELECT * FROM (
SELECT id, json_insert(c1, '$.a, c2'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id |                        json_insert                        |        pi         | ?column? 
----+-----------------------------------------------------------+-------------------+----------
  0 | [[1, 2], [3, 4], 5]                                       | 3.141592653589793 |      4.1
  1 | []                                                        | 3.141592653589793 |      4.1
  2 | {"a": 3}                                                  | 3.141592653589793 |      4.1
  3 | {"a": "10", "b": "15", "x": 25}                           | 3.141592653589793 |      4.1
  4 | {"a": 1, "b": 2, "c": {"d": 4}}                           | 3.141592653589793 |      4.1
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}] | 3.141592653589793 |      4.1
(6 rows)

-- select json_insert with order by (explain)
--Testcase 3753:
EXPLAIN VERBOSE
SELECT json_length(json_insert(c1, '$.a, c2')) FROM s8 ORDER BY 1;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=4)
   Output: (json_length(json_insert(c1, VARIADIC '{"''$.a'', c2"}'::path_value[])))
   Sort Key: (json_length(json_insert(s8.c1, VARIADIC '{"''$.a'', c2"}'::path_value[])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=4)
         Output: (json_length(json_insert(c1, VARIADIC '{"''$.a'', c2"}'::path_value[])))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT json_length(json_insert(`c1`, '$.a', c2)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.json_length(public.json_insert(c1, VARIADIC '{"''$.a'', c2"}'::public.path_value[])) FROM public.s81mysql
(12 rows)

-- select json_insert with order by (result)
--Testcase 3754:
SELECT json_length(json_insert(c1, '$.a, c2')) FROM s8 ORDER BY 1;
 json_length 
-------------
           0
           1
           3
           3
           3
           4
(6 rows)

-- select json_insert with group by (explain)
--Testcase 3755:
EXPLAIN VERBOSE
SELECT json_length(json_insert('["a", ["b", "c"], "d"]', '$, id')) FROM s8 GROUP BY 1;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3854.84..7336.10 rows=6826 width=4)
   Output: (json_length(json_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', id"}'::path_value[])))
   Group Key: (json_length(json_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', id"}'::path_value[])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=4)
         Output: (json_length(json_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', id"}'::path_value[])))
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_insert(CAST('["a", ["b", "c"], "d"]' AS JSON), '$', id)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', id"}'::public.path_value[])) FROM public.s81mysql
(10 rows)

-- select json_insert with group by (result)
--Testcase 3756:
SELECT * FROM (
SELECT id, json_length(json_insert('["a", ["b", "c"], "d"]', '$, id')) FROM s8 GROUP BY id, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           3
  1 |           3
  2 |           3
  3 |           3
  4 |           3
  5 |           3
(6 rows)

-- select json_insert with group by having (explain)
--Testcase 3757:
EXPLAIN VERBOSE
SELECT json_depth(json_insert('["a", ["b", "c"], "d"]', '$, c2')) FROM s8 GROUP BY c2, 1 HAVING count(c2) > 1;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3888.97..5111.80 rows=2275 width=8)
   Output: (json_depth(json_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', c2"}'::path_value[]))), c2
   Group Key: s8.c2, (json_depth(json_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', c2"}'::path_value[])))
   Filter: (count(s8.c2) > 1)
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_depth(json_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', c2"}'::path_value[]))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_depth(json_insert(CAST('["a", ["b", "c"], "d"]' AS JSON), '$', c2)), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_depth(public.json_insert('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', c2"}'::public.path_value[])), c2 FROM public.s81mysql
(11 rows)

-- select json_insert with group by having (result)
--Testcase 3758:
SELECT * FROM (
SELECT id, json_depth(json_insert('["a", ["b", "c"], "d"]', '$, c2')) FROM s8 GROUP BY c2, 1 HAVING count(c2) > 1
) AS t ORDER BY 1;
 id | json_depth 
----+------------
(0 rows)

-- select json_insert and as
--Testcase 3759:
SELECT * FROM (
SELECT id, json_insert(c1, '$.a, c2') AS json_insert1 FROM s8
) AS t ORDER BY 1;
 id |                       json_insert1                        
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {"a": 3}
  3 | {"a": "10", "b": "15", "x": 25}
  4 | {"a": 1, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- JSON_KEYS()
-- select json_keys (builtin function, explain)
--Testcase 3760:
EXPLAIN VERBOSE
SELECT json_keys(c1), json_keys(c1, '$'), json_keys(json_build_object('a', c3)), json_keys(json_build_object('a', c3), '$.a'), json_keys('{"a": 1, "b": {"c": 30}}', '$.a') FROM s8;
                                                                                                                                 QUERY PLAN                                                                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8991.41 rows=6826 width=160)
   Output: (json_keys(c1)), (json_keys(c1, '$'::text)), (json_keys(json_build_object('a', c3))), (json_keys(json_build_object('a', c3), '$.a'::text)), (json_keys('{"a": 1, "b": {"c": 30}}'::json, '$.a'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_keys(`c1`), json_keys(`c1`, '$'), json_keys(json_object('a', `c3`)), json_keys(json_object('a', `c3`), '$.a'), json_keys(CAST('{"a": 1, "b": {"c": 30}}' AS JSON), '$.a') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_keys(c1), public.json_keys(c1, '$'::text), public.json_keys(json_build_object('a', c3)), public.json_keys(json_build_object('a', c3), '$.a'::text), public.json_keys('{"a": 1, "b": {"c": 30}}'::json, '$.a'::text) FROM public.s81mysql
(7 rows)

-- select json_keys (builtin function, result)
--Testcase 3761:
SELECT * FROM (
SELECT id, json_keys(c1), json_keys(c1, '$'), json_keys(json_build_object('a', c3)), json_keys(json_build_object('a', c3), '$.a'), json_keys('{"a": 1, "b": {"c": 30}}', '$.a') FROM s8
) AS t ORDER BY 1;
 id |    json_keys    |    json_keys    | json_keys | json_keys | json_keys 
----+-----------------+-----------------+-----------+-----------+-----------
  0 |                 |                 | ["a"]     |           | 
  1 |                 |                 | ["a"]     |           | 
  2 | []              | []              | ["a"]     |           | 
  3 | ["a", "b", "x"] | ["a", "b", "x"] | ["a"]     |           | 
  4 | ["a", "b", "c"] | ["a", "b", "c"] | ["a"]     |           | 
  5 |                 |                 | ["a"]     |           | 
(6 rows)

-- select json_keys (builtin function, not pushdown constraints, explain)
--Testcase 3762:
EXPLAIN VERBOSE
SELECT json_keys(c1), json_keys(c1, '$'), json_keys(json_build_object('a', c3)), json_keys(json_build_object('a', c3), '$.a'), json_keys('{"a": 1, "b": {"c": 30}}', '$.a') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                                   QUERY PLAN                                                                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..433.40 rows=34 width=160)
   Output: (json_keys(c1)), (json_keys(c1, '$'::text)), (json_keys(json_build_object('a', c3))), (json_keys(json_build_object('a', c3), '$.a'::text)), (json_keys('{"a": 1, "b": {"c": 30}}'::json, '$.a'::text))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_keys(`c1`), json_keys(`c1`, '$'), json_keys(json_object('a', `c3`)), json_keys(json_object('a', `c3`), '$.a'), json_keys(CAST('{"a": 1, "b": {"c": 30}}' AS JSON), '$.a'), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_keys(c1), public.json_keys(c1, '$'::text), public.json_keys(json_build_object('a', c3)), public.json_keys(json_build_object('a', c3), '$.a'::text), public.json_keys('{"a": 1, "b": {"c": 30}}'::json, '$.a'::text), id FROM public.s81mysql
(8 rows)

-- select json_keys (builtin function, not pushdown constraints, result)
--Testcase 3763:
SELECT * FROM (
SELECT id, json_keys(c1), json_keys(c1, '$'), json_keys(json_build_object('a', c3)), json_keys(json_build_object('a', c3), '$.a'), json_keys('{"a": 1, "b": {"c": 30}}', '$.a') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_keys | json_keys | json_keys | json_keys | json_keys 
----+-----------+-----------+-----------+-----------+-----------
  2 | []        | []        | ["a"]     |           | 
(1 row)

-- select json_keys (builtin function, pushdown constraints, explain)
--Testcase 3764:
EXPLAIN VERBOSE
SELECT json_keys(c1), json_keys(c1, '$'), json_keys(json_build_object('a', c3)), json_keys(json_build_object('a', c3), '$.a'), json_keys('{"a": 1, "b": {"c": 30}}', '$.a') FROM s8 WHERE id != 0;
                                                                                                                                          QUERY PLAN                                                                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8965.12 rows=6792 width=160)
   Output: (json_keys(c1)), (json_keys(c1, '$'::text)), (json_keys(json_build_object('a', c3))), (json_keys(json_build_object('a', c3), '$.a'::text)), (json_keys('{"a": 1, "b": {"c": 30}}'::json, '$.a'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_keys(`c1`), json_keys(`c1`, '$'), json_keys(json_object('a', `c3`)), json_keys(json_object('a', `c3`), '$.a'), json_keys(CAST('{"a": 1, "b": {"c": 30}}' AS JSON), '$.a') FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_keys(c1), public.json_keys(c1, '$'::text), public.json_keys(json_build_object('a', c3)), public.json_keys(json_build_object('a', c3), '$.a'::text), public.json_keys('{"a": 1, "b": {"c": 30}}'::json, '$.a'::text) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_keys (builtin function, pushdown constraints, result)
--Testcase 3765:
SELECT * FROM (
SELECT id, json_keys(c1), json_keys(c1, '$'), json_keys(json_build_object('a', c3)), json_keys(json_build_object('a', c3), '$.a'), json_keys('{"a": 1, "b": {"c": 30}}', '$.a') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id |    json_keys    |    json_keys    | json_keys | json_keys | json_keys 
----+-----------------+-----------------+-----------+-----------+-----------
  1 |                 |                 | ["a"]     |           | 
  2 | []              | []              | ["a"]     |           | 
  3 | ["a", "b", "x"] | ["a", "b", "x"] | ["a"]     |           | 
  4 | ["a", "b", "c"] | ["a", "b", "c"] | ["a"]     |           | 
  5 |                 |                 | ["a"]     |           | 
(5 rows)

-- select json_keys (builtin function, json_keys in constraints, explain)
--Testcase 3766:
EXPLAIN VERBOSE
SELECT json_keys(c1), json_keys(c1, '$'), json_keys(json_build_object('a', c3)), json_keys(json_build_object('a', c3), '$.a'), json_keys('{"a": 1, "b": {"c": 30}}', '$.b') FROM s8 WHERE json_length(json_keys(c1)) != 1;
                                                                                                                                                             QUERY PLAN                                                                                                                                                              
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..12378.12 rows=6792 width=160)
   Output: (json_keys(c1)), (json_keys(c1, '$'::text)), (json_keys(json_build_object('a', c3))), (json_keys(json_build_object('a', c3), '$.a'::text)), (json_keys('{"a": 1, "b": {"c": 30}}'::json, '$.b'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_keys(`c1`), json_keys(`c1`, '$'), json_keys(json_object('a', `c3`)), json_keys(json_object('a', `c3`), '$.a'), json_keys(CAST('{"a": 1, "b": {"c": 30}}' AS JSON), '$.b') FROM `test`.`s82` WHERE ((json_length(json_keys(`c1`)) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_keys(c1), public.json_keys(c1, '$'::text), public.json_keys(json_build_object('a', c3)), public.json_keys(json_build_object('a', c3), '$.a'::text), public.json_keys('{"a": 1, "b": {"c": 30}}'::json, '$.b'::text) FROM public.s81mysql WHERE ((public.json_length(public.json_keys(c1)) <> 1))
(7 rows)

-- select json_keys (builtin function, json_keys in constraints, result)
--Testcase 3767:
SELECT * FROM (
SELECT id, json_keys(c1), json_keys(c1, '$'), json_keys(json_build_object('a', c3)), json_keys(json_build_object('a', c3), '$.a'), json_keys('{"a": 1, "b": {"c": 30}}', '$.b') FROM s8 WHERE json_length(json_keys(c1)) != 1
) AS t ORDER BY 1;
 id |    json_keys    |    json_keys    | json_keys | json_keys | json_keys 
----+-----------------+-----------------+-----------+-----------+-----------
  2 | []              | []              | ["a"]     |           | ["c"]
  3 | ["a", "b", "x"] | ["a", "b", "x"] | ["a"]     |           | ["c"]
  4 | ["a", "b", "c"] | ["a", "b", "c"] | ["a"]     |           | ["c"]
(3 rows)

-- select json_keys (builtin function, json_keys in constraints, explain)
--Testcase 3768:
EXPLAIN VERBOSE
SELECT json_keys(c1), json_keys(c1, '$'), json_keys(json_build_object('a', c3)), json_keys(json_build_object('a', c3), '$.a'), json_keys('{"a": 1, "b": {"c": 30}}', '$.b') FROM s8 WHERE json_length(json_keys('{"a": 1, "b": {"c": 30}}', '$.b')) = 1;
                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..3761.68 rows=34 width=160)
   Output: (json_keys(c1)), (json_keys(c1, '$'::text)), (json_keys(json_build_object('a', c3))), (json_keys(json_build_object('a', c3), '$.a'::text)), (json_keys('{"a": 1, "b": {"c": 30}}'::json, '$.b'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_keys(`c1`), json_keys(`c1`, '$'), json_keys(json_object('a', `c3`)), json_keys(json_object('a', `c3`), '$.a'), json_keys(CAST('{"a": 1, "b": {"c": 30}}' AS JSON), '$.b') FROM `test`.`s82` WHERE ((json_length(json_keys(CAST('{"a": 1, "b": {"c": 30}}' AS JSON), '$.b')) = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_keys(c1), public.json_keys(c1, '$'::text), public.json_keys(json_build_object('a', c3)), public.json_keys(json_build_object('a', c3), '$.a'::text), public.json_keys('{"a": 1, "b": {"c": 30}}'::json, '$.b'::text) FROM public.s81mysql WHERE ((public.json_length(public.json_keys('{"a": 1, "b": {"c": 30}}'::json, '$.b'::text)) = 1))
(7 rows)

-- select json_keys (builtin function, json_keys in constraints, result)
--Testcase 3769:
SELECT * FROM (
SELECT id, json_keys(c1), json_keys(c1, '$'), json_keys(json_build_object('a', c3)), json_keys(json_build_object('a', c3), '$.a'), json_keys('{"a": 1, "b": {"c": 30}}', '$.b') FROM s8 WHERE json_length(json_keys('{"a": 1, "b": {"c": 30}}', '$.b')) = 1
) AS t ORDER BY 1;
 id |    json_keys    |    json_keys    | json_keys | json_keys | json_keys 
----+-----------------+-----------------+-----------+-----------+-----------
  0 |                 |                 | ["a"]     |           | ["c"]
  1 |                 |                 | ["a"]     |           | ["c"]
  2 | []              | []              | ["a"]     |           | ["c"]
  3 | ["a", "b", "x"] | ["a", "b", "x"] | ["a"]     |           | ["c"]
  4 | ["a", "b", "c"] | ["a", "b", "c"] | ["a"]     |           | ["c"]
  5 |                 |                 | ["a"]     |           | ["c"]
(6 rows)

-- select json_keys as nest function with agg (not pushdown, explain)
--Testcase 3770:
EXPLAIN VERBOSE
SELECT sum(id),json_keys('{"a": 1, "b": {"c": 30}}', '$.b') FROM s8;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_keys('{"a": 1, "b": {"c": 30}}'::json, '$.b'::text)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_keys as nest function with agg (not pushdown, result, error)
--Testcase 3771:
SELECT sum(id),json_keys('{"a": 1, "b": {"c": 30}}', '$.b') FROM s8;
ERROR:  stub json_keys(json, text) is called
CONTEXT:  PL/pgSQL function json_keys(json,text) line 3 at RAISE
-- select json_keys with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3772:
EXPLAIN VERBOSE
SELECT json_keys(json_build_object('a', c3)), pi(), 4.1 FROM s8;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=72)
   Output: (json_keys(json_build_object('a', c3))), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_keys(json_object('a', `c3`)), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_keys(json_build_object('a', c3)), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_keys with non pushdown func and explicit constant (result)
--Testcase 3773:
SELECT * FROM (
SELECT id, json_keys(json_build_object('a', c3)), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_keys |        pi         | ?column? 
----+-----------+-------------------+----------
  0 | ["a"]     | 3.141592653589793 |      4.1
  1 | ["a"]     | 3.141592653589793 |      4.1
  2 | ["a"]     | 3.141592653589793 |      4.1
  3 | ["a"]     | 3.141592653589793 |      4.1
  4 | ["a"]     | 3.141592653589793 |      4.1
  5 | ["a"]     | 3.141592653589793 |      4.1
(6 rows)

-- select json_keys with order by index (result)
--Testcase 3774:
SELECT id,  json_length(json_keys(c1)) FROM s8 ORDER BY 2, 1;
 id | json_length 
----+-------------
  2 |           0
  3 |           3
  4 |           3
  0 |            
  1 |            
  5 |            
(6 rows)

-- select json_keys with order by index (result)
--Testcase 3775:
SELECT id,  json_length(json_keys(c1)) FROM s8 ORDER BY 1, 2;
 id | json_length 
----+-------------
  0 |            
  1 |            
  2 |           0
  3 |           3
  4 |           3
  5 |            
(6 rows)

-- select json_keys with group by (EXPLAIN)
--Testcase 3776:
EXPLAIN VERBOSE
SELECT count(id), json_length(json_keys(c1)) FROM s8 group by json_length(json_keys(c1));
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3973.91 rows=200 width=12)
   Output: count(id), (json_length(json_keys(c1)))
   Group Key: (json_length(json_keys(s8.c1)))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_keys(c1))), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_keys(`c1`)), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_keys(c1)), id FROM public.s81mysql
(10 rows)

-- select json_keys with group by (result)
--Testcase 3777:
SELECT * FROM (
SELECT count(id), json_length(json_keys(c1)) FROM s8 group by json_length(json_keys(c1))
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           0
     2 |           3
     3 |            
(3 rows)

-- select json_keys with group by index (result)
--Testcase 3778:
SELECT * FROM (
SELECT id,  json_length(json_keys(c1)) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |            
  1 |            
  2 |           0
  3 |           3
  4 |           3
  5 |            
(6 rows)

-- select json_keys with group by index (result)
--Testcase 3779:
SELECT * FROM (
SELECT id,  json_length(json_keys(c1)) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |            
  1 |            
  2 |           0
  3 |           3
  4 |           3
  5 |            
(6 rows)

-- select json_keys with group by having (EXPLAIN)
--Testcase 3780:
EXPLAIN VERBOSE
SELECT count(c2), json_length(json_keys(c1)) FROM s8 group by json_length(json_keys(c1)) HAVING count(c2) > 0;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3907.91 rows=67 width=12)
   Output: count(c2), (json_length(json_keys(c1)))
   Group Key: (json_length(json_keys(s8.c1)))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_keys(c1))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_keys(`c1`)), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_keys(c1)), c2 FROM public.s81mysql
(11 rows)

-- select json_keys with group by having (result)
--Testcase 3781:
SELECT * FROM (
SELECT count(c2), json_length(json_keys(c1)) FROM s8 group by json_length(json_keys(c1)) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           0
     2 |           3
     3 |            
(3 rows)

-- select json_keys with group by index having (result)
--Testcase 3782:
SELECT * FROM (
SELECT c2,  json_length(json_keys(c1)) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |            
  2 |            
  3 |           0
  4 |           3
  5 |            
  5 |           3
(6 rows)

-- select json_keys with group by index having (result)
--Testcase 3783:
SELECT * FROM (
SELECT c2,  json_length(json_keys(c1)) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |            
  2 |            
  3 |           0
  4 |           3
  5 |           3
  5 |            
(6 rows)

-- select json_keys and as
--Testcase 3784:
SELECT * FROM (
SELECT id, json_keys(json_build_object('a', c3)) as json_keys1 FROM s8
) AS t ORDER BY 1;
 id | json_keys1 
----+------------
  0 | ["a"]
  1 | ["a"]
  2 | ["a"]
  3 | ["a"]
  4 | ["a"]
  5 | ["a"]
(6 rows)

-- select json_length (builtin function, explain)
--Testcase 3785:
EXPLAIN VERBOSE
SELECT json_length(c1), json_length(json_build_array(c1, 'a', c2)), json_length('{"a": 1, "b": {"c": 30}}') FROM s8;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..5561.34 rows=6826 width=12)
   Output: (json_length(c1)), (json_length(json_build_array(c1, 'a', c2))), (json_length('{"a": 1, "b": {"c": 30}}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_length(`c1`), json_length(json_array(`c1`, 'a', `c2`)), json_length(CAST('{"a": 1, "b": {"c": 30}}' AS JSON)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_length(c1), public.json_length(json_build_array(c1, 'a', c2)), public.json_length('{"a": 1, "b": {"c": 30}}'::json) FROM public.s81mysql
(7 rows)

-- select json_length (builtin function, result)
--Testcase 3786:
SELECT * FROM (
SELECT id, json_length(c1), json_length(json_build_array(c1, 'a', c2)), json_length('{"a": 1, "b": {"c": 30}}') FROM s8
) AS t ORDER BY 1;
 id | json_length | json_length | json_length 
----+-------------+-------------+-------------
  0 |           3 |           3 |           2
  1 |           0 |           3 |           2
  2 |           0 |           3 |           2
  3 |           3 |           3 |           2
  4 |           3 |           3 |           2
  5 |           4 |           3 |           2
(6 rows)

-- select json_length (builtin function, not pushdown constraints, explain)
--Testcase 3787:
EXPLAIN VERBOSE
SELECT json_length(c1), json_length(json_build_array(c1, 'a', c2)), json_length('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE to_hex(id) = '2';
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..416.31 rows=34 width=12)
   Output: (json_length(c1)), (json_length(json_build_array(c1, 'a', c2))), (json_length('{"a": 1, "b": {"c": 30}}'::json))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_length(`c1`), json_length(json_array(`c1`, 'a', `c2`)), json_length(CAST('{"a": 1, "b": {"c": 30}}' AS JSON)), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_length(c1), public.json_length(json_build_array(c1, 'a', c2)), public.json_length('{"a": 1, "b": {"c": 30}}'::json), id FROM public.s81mysql
(8 rows)

-- select json_length (builtin function, not pushdown constraints, result)
--Testcase 3788:
SELECT * FROM (
SELECT id, json_length(c1), json_length(json_build_array(c1, 'a', c2)), json_length('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_length | json_length | json_length 
----+-------------+-------------+-------------
  2 |           0 |           3 |           2
(1 row)

-- select json_length (builtin function, pushdown constraints, explain)
--Testcase 3789:
EXPLAIN VERBOSE
SELECT json_length(c1), json_length(json_build_array(c1, 'a', c2)), json_length('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE id != 0;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..5552.14 rows=6792 width=12)
   Output: (json_length(c1)), (json_length(json_build_array(c1, 'a', c2))), (json_length('{"a": 1, "b": {"c": 30}}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_length(`c1`), json_length(json_array(`c1`, 'a', `c2`)), json_length(CAST('{"a": 1, "b": {"c": 30}}' AS JSON)) FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_length(c1), public.json_length(json_build_array(c1, 'a', c2)), public.json_length('{"a": 1, "b": {"c": 30}}'::json) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_length (builtin function, pushdown constraints, result)
--Testcase 3790:
SELECT * FROM (
SELECT id, json_length(c1), json_length(json_build_array(c1, 'a', c2)), json_length('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | json_length | json_length | json_length 
----+-------------+-------------+-------------
  1 |           0 |           3 |           2
  2 |           0 |           3 |           2
  3 |           3 |           3 |           2
  4 |           3 |           3 |           2
  5 |           4 |           3 |           2
(5 rows)

-- select json_length (builtin function, json_length in constraints, explain)
--Testcase 3791:
EXPLAIN VERBOSE
SELECT json_length(c1), json_length(json_build_array(c1, 'a', c2)), json_length('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE json_length(c1) != 1;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7258.64 rows=6792 width=12)
   Output: (json_length(c1)), (json_length(json_build_array(c1, 'a', c2))), (json_length('{"a": 1, "b": {"c": 30}}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_length(`c1`), json_length(json_array(`c1`, 'a', `c2`)), json_length(CAST('{"a": 1, "b": {"c": 30}}' AS JSON)) FROM `test`.`s82` WHERE ((json_length(`c1`) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_length(c1), public.json_length(json_build_array(c1, 'a', c2)), public.json_length('{"a": 1, "b": {"c": 30}}'::json) FROM public.s81mysql WHERE ((public.json_length(c1) <> 1))
(7 rows)

-- select json_length (builtin function, json_length in constraints, result)
--Testcase 3792:
SELECT * FROM (
SELECT id, json_length(c1), json_length(json_build_array(c1, 'a', c2)), json_length('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE json_length(c1) != 1
) AS t ORDER BY 1;
 id | json_length | json_length | json_length 
----+-------------+-------------+-------------
  0 |           3 |           3 |           2
  1 |           0 |           3 |           2
  2 |           0 |           3 |           2
  3 |           3 |           3 |           2
  4 |           3 |           3 |           2
  5 |           4 |           3 |           2
(6 rows)

-- select json_length (builtin function, json_length in constraints, explain)
--Testcase 3793:
EXPLAIN VERBOSE
SELECT json_length(c1), json_length(json_build_array(c1, 'a', c2)), json_length('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE json_length('{"a": 1, "b": {"c": 30}}') = 2;
                                                                                                                   QUERY PLAN                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2038.09 rows=34 width=12)
   Output: (json_length(c1)), (json_length(json_build_array(c1, 'a', c2))), (json_length('{"a": 1, "b": {"c": 30}}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_length(`c1`), json_length(json_array(`c1`, 'a', `c2`)), json_length(CAST('{"a": 1, "b": {"c": 30}}' AS JSON)) FROM `test`.`s82` WHERE ((json_length(CAST('{"a": 1, "b": {"c": 30}}' AS JSON)) = 2))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_length(c1), public.json_length(json_build_array(c1, 'a', c2)), public.json_length('{"a": 1, "b": {"c": 30}}'::json) FROM public.s81mysql WHERE ((public.json_length('{"a": 1, "b": {"c": 30}}'::json) = 2))
(7 rows)

-- select json_length (builtin function, json_length in constraints, result)
--Testcase 3794:
SELECT * FROM (
SELECT id, json_length(c1), json_length(json_build_array(c1, 'a', c2)), json_length('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE json_length('{"a": 1, "b": {"c": 30}}') = 2
) AS t ORDER BY 1;
 id | json_length | json_length | json_length 
----+-------------+-------------+-------------
  0 |           3 |           3 |           2
  1 |           0 |           3 |           2
  2 |           0 |           3 |           2
  3 |           3 |           3 |           2
  4 |           3 |           3 |           2
  5 |           4 |           3 |           2
(6 rows)

-- select json_length as nest function with agg (not pushdown, explain)
--Testcase 3795:
EXPLAIN VERBOSE
SELECT sum(id),json_length('{"a": 1, "b": {"c": 30}}') FROM s8;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (sum(id)), json_length('{"a": 1, "b": {"c": 30}}'::json)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_length as nest function with agg (not pushdown, result, error)
--Testcase 3796:
SELECT sum(id),json_length('{"a": 1, "b": {"c": 30}}') FROM s8;
ERROR:  stub json_length(json) is called
CONTEXT:  PL/pgSQL function json_length(json) line 3 at RAISE
-- select json_length with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3797:
EXPLAIN VERBOSE
SELECT json_length(json_build_array(c1, 'a', c2)), pi(), 4.1 FROM s8;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=44)
   Output: (json_length(json_build_array(c1, 'a', c2))), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_length(json_array(`c1`, 'a', `c2`)), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_length(json_build_array(c1, 'a', c2)), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_length with non pushdown func and explicit constant (result)
--Testcase 3798:
SELECT * FROM (
SELECT id, json_length(json_build_array(c1, 'a', c2)), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_length |        pi         | ?column? 
----+-------------+-------------------+----------
  0 |           3 | 3.141592653589793 |      4.1
  1 |           3 | 3.141592653589793 |      4.1
  2 |           3 | 3.141592653589793 |      4.1
  3 |           3 | 3.141592653589793 |      4.1
  4 |           3 | 3.141592653589793 |      4.1
  5 |           3 | 3.141592653589793 |      4.1
(6 rows)

-- select json_length with order by index (result)
--Testcase 3799:
SELECT id, json_length(c1) FROM s8 ORDER BY 2, 1;
 id | json_length 
----+-------------
  1 |           0
  2 |           0
  0 |           3
  3 |           3
  4 |           3
  5 |           4
(6 rows)

-- select json_length with order by index (result)
--Testcase 3800:
SELECT id, json_length(c1) FROM s8 ORDER BY 1, 2;
 id | json_length 
----+-------------
  0 |           3
  1 |           0
  2 |           0
  3 |           3
  4 |           3
  5 |           4
(6 rows)

-- select json_length with group by (EXPLAIN)
--Testcase 3801:
EXPLAIN VERBOSE
SELECT count(id), json_length(c1) FROM s8 group by json_length(c1);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
   Output: count(id), (json_length(c1))
   Group Key: (json_length(s8.c1))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_length(c1)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(`c1`), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(c1), id FROM public.s81mysql
(10 rows)

-- select json_length with group by (result)
--Testcase 3802:
SELECT * FROM (
SELECT count(id), json_length(c1) FROM s8 group by json_length(c1)
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           4
     2 |           0
     3 |           3
(3 rows)

-- select json_length with group by index (result)
--Testcase 3803:
SELECT * FROM (
SELECT id, json_length(c1) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           3
  1 |           0
  2 |           0
  3 |           3
  4 |           3
  5 |           4
(6 rows)

-- select json_length with group by index (result)
--Testcase 3804:
SELECT * FROM (
SELECT id, json_length(c1) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           3
  1 |           0
  2 |           0
  3 |           3
  4 |           3
  5 |           4
(6 rows)

-- select json_length with group by having (EXPLAIN)
--Testcase 3805:
EXPLAIN VERBOSE
SELECT count(c2), json_length(c1) FROM s8 group by json_length(c1) HAVING count(c2) > 0;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=12)
   Output: count(c2), (json_length(c1))
   Group Key: (json_length(s8.c1))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_length(c1)), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(`c1`), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(c1), c2 FROM public.s81mysql
(11 rows)

-- select json_length with group by having (result)
--Testcase 3806:
SELECT * FROM (
SELECT count(c2), json_length(c1) FROM s8 group by json_length(c1) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           4
     2 |           0
     3 |           3
(3 rows)

-- select json_length with group by index having (result)
--Testcase 3807:
SELECT * FROM (
SELECT c2, json_length(c1) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           3
  2 |           0
  3 |           0
  4 |           3
  5 |           4
  5 |           3
(6 rows)

-- select json_length with group by index having (result)
--Testcase 3808:
SELECT * FROM (
SELECT c2, json_length(c1) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           3
  2 |           0
  3 |           0
  4 |           3
  5 |           4
  5 |           3
(6 rows)

-- select json_length and as
--Testcase 3809:
SELECT * FROM (
SELECT id, json_length(json_build_array(c1, 'a', c2)) as json_length1 FROM s8
) AS t ORDER BY 1;
 id | json_length1 
----+--------------
  0 |            3
  1 |            3
  2 |            3
  3 |            3
  4 |            3
  5 |            3
(6 rows)

-- select json_merge (builtin function, explain)
--Testcase 3810:
EXPLAIN VERBOSE
SELECT json_merge(c1, '[1, 2]'), json_merge(c1, '[1, 2]', '[true, false]'), json_merge(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge('[1, 2]', '[true, false]') FROM s8;
                                                                                                                                                                 QUERY PLAN                                                                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7267.84 rows=6826 width=128)
   Output: (json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge(`c1`, CAST('[1, 2]' AS JSON)), json_merge(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge(VARIADIC '{"[1, 2]","[true, false]"}'::json[]) FROM public.s81mysql
(7 rows)

-- select json_merge (builtin function, result)
--Testcase 3811:
SELECT * FROM (
SELECT id, json_merge(c1, '[1, 2]'), json_merge(c1, '[1, 2]', '[true, false]'), json_merge(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge('[1, 2]', '[true, false]') FROM s8
) AS t ORDER BY 1;
 id |                           json_merge                            |                                  json_merge                                  |                                     json_merge                                     |     json_merge      
----+-----------------------------------------------------------------+------------------------------------------------------------------------------+------------------------------------------------------------------------------------+---------------------
  0 | [[1, 2], [3, 4], 5, 1, 2]                                       | [[1, 2], [3, 4], 5, 1, 2, true, false]                                       | [[[1, 2], [3, 4], 5], "[1, 2]", true, false]                                       | [1, 2, true, false]
  1 | [1, 2]                                                          | [1, 2, true, false]                                                          | [[], "[1, 2]", true, false]                                                        | [1, 2, true, false]
  2 | [{}, 1, 2]                                                      | [{}, 1, 2, true, false]                                                      | [{}, "[1, 2]", true, false]                                                        | [1, 2, true, false]
  3 | [{"a": "10", "b": "15", "x": 25}, 1, 2]                         | [{"a": "10", "b": "15", "x": 25}, 1, 2, true, false]                         | [{"a": "10", "b": "15", "x": 25}, "[1, 2]", true, false]                           | [1, 2, true, false]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2, true, false]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, "[1, 2]", true, false]                           | [1, 2, true, false]
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2] | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2, true, false] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[1, 2]", true, false] | [1, 2, true, false]
(6 rows)

-- select json_merge (builtin function, not pushdown constraints, explain)
--Testcase 3812:
EXPLAIN VERBOSE
SELECT json_merge(c1, '[1, 2]'), json_merge(c1, '[1, 2]', '[true, false]'), json_merge(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge('[1, 2]', '[true, false]') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                                                                   QUERY PLAN                                                                                                                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..424.81 rows=34 width=128)
   Output: (json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge(`c1`, CAST('[1, 2]' AS JSON)), json_merge(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge(VARIADIC '{"[1, 2]","[true, false]"}'::json[]), id FROM public.s81mysql
(8 rows)

-- select json_merge (builtin function, not pushdown constraints, result)
--Testcase 3813:
SELECT * FROM (
SELECT id, json_merge(c1, '[1, 2]'), json_merge(c1, '[1, 2]', '[true, false]'), json_merge(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge('[1, 2]', '[true, false]') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_merge |       json_merge        |         json_merge          |     json_merge      
----+------------+-------------------------+-----------------------------+---------------------
  2 | [{}, 1, 2] | [{}, 1, 2, true, false] | [{}, "[1, 2]", true, false] | [1, 2, true, false]
(1 row)

-- select json_merge (builtin function, pushdown constraints, explain)
--Testcase 3814:
EXPLAIN VERBOSE
SELECT json_merge(c1, '[1, 2]'), json_merge(c1, '[1, 2]', '[true, false]'), json_merge(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge('[1, 2]', '[true, false]') FROM s8 WHERE id != 0;
                                                                                                                                                                          QUERY PLAN                                                                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7250.14 rows=6792 width=128)
   Output: (json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge(`c1`, CAST('[1, 2]' AS JSON)), json_merge(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)) FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge(VARIADIC '{"[1, 2]","[true, false]"}'::json[]) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_merge (builtin function, pushdown constraints, result)
--Testcase 3815:
SELECT * FROM (
SELECT id, json_merge(c1, '[1, 2]'), json_merge(c1, '[1, 2]', '[true, false]'), json_merge(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge('[1, 2]', '[true, false]') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id |                           json_merge                            |                                  json_merge                                  |                                     json_merge                                     |     json_merge      
----+-----------------------------------------------------------------+------------------------------------------------------------------------------+------------------------------------------------------------------------------------+---------------------
  1 | [1, 2]                                                          | [1, 2, true, false]                                                          | [[], "[1, 2]", true, false]                                                        | [1, 2, true, false]
  2 | [{}, 1, 2]                                                      | [{}, 1, 2, true, false]                                                      | [{}, "[1, 2]", true, false]                                                        | [1, 2, true, false]
  3 | [{"a": "10", "b": "15", "x": 25}, 1, 2]                         | [{"a": "10", "b": "15", "x": 25}, 1, 2, true, false]                         | [{"a": "10", "b": "15", "x": 25}, "[1, 2]", true, false]                           | [1, 2, true, false]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2, true, false]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, "[1, 2]", true, false]                           | [1, 2, true, false]
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2] | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2, true, false] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[1, 2]", true, false] | [1, 2, true, false]
(5 rows)

-- select json_merge (builtin function, json_merge in constraints, explain)
--Testcase 3816:
EXPLAIN VERBOSE
SELECT json_merge(c1, '[1, 2]'), json_merge(c1, '[1, 2]', '[true, false]'), json_merge(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge('[1, 2]', '[true, false]') FROM s8 WHERE json_length(json_merge(c1, '[1, 2]')) != 1;
                                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..10663.15 rows=6792 width=128)
   Output: (json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge(`c1`, CAST('[1, 2]' AS JSON)), json_merge(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)) FROM `test`.`s82` WHERE ((json_length(json_merge(`c1`, CAST('[1, 2]' AS JSON))) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge(VARIADIC '{"[1, 2]","[true, false]"}'::json[]) FROM public.s81mysql WHERE ((public.json_length(public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json])) <> 1))
(7 rows)

-- select json_merge (builtin function, json_merge in constraints, result)
--Testcase 3817:
SELECT * FROM (
SELECT id, json_merge(c1, '[1, 2]'), json_merge(c1, '[1, 2]', '[true, false]'), json_merge(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge('[1, 2]', '[true, false]') FROM s8 WHERE json_length(json_merge(c1, '[1, 2]')) != 1
) AS t ORDER BY 1;
 id |                           json_merge                            |                                  json_merge                                  |                                     json_merge                                     |     json_merge      
----+-----------------------------------------------------------------+------------------------------------------------------------------------------+------------------------------------------------------------------------------------+---------------------
  0 | [[1, 2], [3, 4], 5, 1, 2]                                       | [[1, 2], [3, 4], 5, 1, 2, true, false]                                       | [[[1, 2], [3, 4], 5], "[1, 2]", true, false]                                       | [1, 2, true, false]
  1 | [1, 2]                                                          | [1, 2, true, false]                                                          | [[], "[1, 2]", true, false]                                                        | [1, 2, true, false]
  2 | [{}, 1, 2]                                                      | [{}, 1, 2, true, false]                                                      | [{}, "[1, 2]", true, false]                                                        | [1, 2, true, false]
  3 | [{"a": "10", "b": "15", "x": 25}, 1, 2]                         | [{"a": "10", "b": "15", "x": 25}, 1, 2, true, false]                         | [{"a": "10", "b": "15", "x": 25}, "[1, 2]", true, false]                           | [1, 2, true, false]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2, true, false]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, "[1, 2]", true, false]                           | [1, 2, true, false]
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2] | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2, true, false] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[1, 2]", true, false] | [1, 2, true, false]
(6 rows)

-- select json_merge (builtin function, json_merge in constraints, explain)
--Testcase 3818:
EXPLAIN VERBOSE
SELECT json_merge(c1, '[1, 2]'), json_merge(c1, '[1, 2]', '[true, false]'), json_merge(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge('[1, 2]', '[true, false]') FROM s8 WHERE json_length(json_merge('[1, 2]', '[true, false]')) = 4;
                                                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..3753.09 rows=34 width=128)
   Output: (json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge(`c1`, CAST('[1, 2]' AS JSON)), json_merge(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)) FROM `test`.`s82` WHERE ((json_length(json_merge(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON))) = 4))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge(VARIADIC '{"[1, 2]","[true, false]"}'::json[]) FROM public.s81mysql WHERE ((public.json_length(public.json_merge(VARIADIC '{"[1, 2]","[true, false]"}'::json[])) = 4))
(7 rows)

-- select json_merge (builtin function, json_merge in constraints, result)
--Testcase 3819:
SELECT * FROM (
SELECT id, json_merge(c1, '[1, 2]'), json_merge(c1, '[1, 2]', '[true, false]'), json_merge(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge('[1, 2]', '[true, false]') FROM s8 WHERE json_length(json_merge('[1, 2]', '[true, false]')) = 4
) AS t ORDER BY 1;
 id |                           json_merge                            |                                  json_merge                                  |                                     json_merge                                     |     json_merge      
----+-----------------------------------------------------------------+------------------------------------------------------------------------------+------------------------------------------------------------------------------------+---------------------
  0 | [[1, 2], [3, 4], 5, 1, 2]                                       | [[1, 2], [3, 4], 5, 1, 2, true, false]                                       | [[[1, 2], [3, 4], 5], "[1, 2]", true, false]                                       | [1, 2, true, false]
  1 | [1, 2]                                                          | [1, 2, true, false]                                                          | [[], "[1, 2]", true, false]                                                        | [1, 2, true, false]
  2 | [{}, 1, 2]                                                      | [{}, 1, 2, true, false]                                                      | [{}, "[1, 2]", true, false]                                                        | [1, 2, true, false]
  3 | [{"a": "10", "b": "15", "x": 25}, 1, 2]                         | [{"a": "10", "b": "15", "x": 25}, 1, 2, true, false]                         | [{"a": "10", "b": "15", "x": 25}, "[1, 2]", true, false]                           | [1, 2, true, false]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2, true, false]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, "[1, 2]", true, false]                           | [1, 2, true, false]
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2] | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2, true, false] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[1, 2]", true, false] | [1, 2, true, false]
(6 rows)

-- select json_merge as nest function with agg (not pushdown, explain)
--Testcase 3820:
EXPLAIN VERBOSE
SELECT sum(id),json_merge('[1, 2]', '[true, false]') FROM s8;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_merge(VARIADIC '{"[1, 2]","[true, false]"}'::json[])
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_merge as nest function with agg (not pushdown, result, error)
--Testcase 3821:
SELECT sum(id),json_merge('[1, 2]', '[true, false]') FROM s8;
ERROR:  stub json_merge(variadic json[]) is called
CONTEXT:  PL/pgSQL function json_merge(json[]) line 3 at RAISE
-- select json_merge with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3822:
EXPLAIN VERBOSE
SELECT json_merge(json_build_array(c1, '[1, 2]'), '[true, false]'), pi(), 4.1 FROM s8;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=72)
   Output: (json_merge(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_merge with non pushdown func and explicit constant (result)
--Testcase 3823:
SELECT * FROM (
SELECT id, json_merge(json_build_array(c1, '[1, 2]'), '[true, false]'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id |                                     json_merge                                     |        pi         | ?column? 
----+------------------------------------------------------------------------------------+-------------------+----------
  0 | [[[1, 2], [3, 4], 5], "[1, 2]", true, false]                                       | 3.141592653589793 |      4.1
  1 | [[], "[1, 2]", true, false]                                                        | 3.141592653589793 |      4.1
  2 | [{}, "[1, 2]", true, false]                                                        | 3.141592653589793 |      4.1
  3 | [{"a": "10", "b": "15", "x": 25}, "[1, 2]", true, false]                           | 3.141592653589793 |      4.1
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, "[1, 2]", true, false]                           | 3.141592653589793 |      4.1
  5 | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[1, 2]", true, false] | 3.141592653589793 |      4.1
(6 rows)

-- select json_merge with order by index (result)
--Testcase 3824:
SELECT id, json_length(json_merge(c1, '[1, 2]')) FROM s8 ORDER BY 2, 1;
 id | json_length 
----+-------------
  1 |           2
  2 |           3
  3 |           3
  4 |           3
  0 |           5
  5 |           6
(6 rows)

-- select json_merge with order by index (result)
--Testcase 3825:
SELECT id, json_length(json_merge(c1, '[1, 2]')) FROM s8 ORDER BY 1, 2;
 id | json_length 
----+-------------
  0 |           5
  1 |           2
  2 |           3
  3 |           3
  4 |           3
  5 |           6
(6 rows)

-- select json_merge with group by (EXPLAIN)
--Testcase 3826:
EXPLAIN VERBOSE
SELECT count(id), json_length(json_merge(c1, '[1, 2]')) FROM s8 group by json_length(json_merge(c1, '[1, 2]'));
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3973.91 rows=200 width=12)
   Output: count(id), (json_length(json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json])))
   Group Key: (json_length(json_merge(VARIADIC ARRAY[s8.c1, '[1, 2]'::json])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json]))), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_merge(`c1`, CAST('[1, 2]' AS JSON))), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json])), id FROM public.s81mysql
(10 rows)

-- select json_merge with group by (result)
--Testcase 3827:
SELECT * FROM (
SELECT count(id), json_length(json_merge(c1, '[1, 2]')) FROM s8 group by json_length(json_merge(c1, '[1, 2]'))
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           5
     1 |           6
     1 |           2
     3 |           3
(4 rows)

-- select json_merge with group by index (result)
--Testcase 3828:
SELECT * FROM (
SELECT id, json_length(json_merge(c1, '[1, 2]')) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           5
  1 |           2
  2 |           3
  3 |           3
  4 |           3
  5 |           6
(6 rows)

-- select json_merge with group by index (result)
--Testcase 3829:
SELECT * FROM (
SELECT id, json_length(json_merge(c1, '[1, 2]')) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           5
  1 |           2
  2 |           3
  3 |           3
  4 |           3
  5 |           6
(6 rows)

-- select json_merge with group by having (EXPLAIN)
--Testcase 3830:
EXPLAIN VERBOSE
SELECT count(c2), json_length(json_merge(c1, '[1, 2]')) FROM s8 group by json_length(json_merge(c1, '[1, 2]')) HAVING count(c2) > 0;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3907.91 rows=67 width=12)
   Output: count(c2), (json_length(json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json])))
   Group Key: (json_length(json_merge(VARIADIC ARRAY[s8.c1, '[1, 2]'::json])))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json]))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_merge(`c1`, CAST('[1, 2]' AS JSON))), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_merge(VARIADIC ARRAY[c1, '[1, 2]'::json])), c2 FROM public.s81mysql
(11 rows)

-- select json_merge with group by having (result)
--Testcase 3831:
SELECT * FROM (
SELECT count(c2), json_length(json_merge(c1, '[1, 2]')) FROM s8 group by json_length(json_merge(c1, '[1, 2]')) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           5
     1 |           6
     1 |           2
     3 |           3
(4 rows)

-- select json_merge with group by index having (result)
--Testcase 3832:
SELECT * FROM (
SELECT c2, json_length(json_merge(c1, '[1, 2]')) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           5
  2 |           2
  3 |           3
  4 |           3
  5 |           6
  5 |           3
(6 rows)

-- select json_merge with group by index having (result)
--Testcase 3833:
SELECT * FROM (
SELECT c2, json_length(json_merge(c1, '[1, 2]')) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           5
  2 |           2
  3 |           3
  4 |           3
  5 |           6
  5 |           3
(6 rows)

-- select json_merge and as
--Testcase 3834:
SELECT * FROM (
SELECT id, json_merge(json_build_array(c1, '[1, 2]'), '[true, false]') as json_merge1 FROM s8
) AS t ORDER BY 1;
 id |                                    json_merge1                                     
----+------------------------------------------------------------------------------------
  0 | [[[1, 2], [3, 4], 5], "[1, 2]", true, false]
  1 | [[], "[1, 2]", true, false]
  2 | [{}, "[1, 2]", true, false]
  3 | [{"a": "10", "b": "15", "x": 25}, "[1, 2]", true, false]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, "[1, 2]", true, false]
  5 | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[1, 2]", true, false]
(6 rows)

-- select json_merge_patch (builtin function, explain)
--Testcase 3835:
EXPLAIN VERBOSE
SELECT json_merge_patch(c1, '[1, 2]'), json_merge_patch(c1, '[1, 2]', '[true, false]'), json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_patch('[1, 2]', '[true, false]') FROM s8;
                                                                                                                                                                             QUERY PLAN                                                                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7267.84 rows=6826 width=128)
   Output: (json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge_patch(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge_patch(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge_patch(`c1`, CAST('[1, 2]' AS JSON)), json_merge_patch(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge_patch(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge_patch(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge_patch(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge_patch(VARIADIC '{"[1, 2]","[true, false]"}'::json[]) FROM public.s81mysql
(7 rows)

-- select json_merge_patch (builtin function, result)
--Testcase 3836:
SELECT * FROM (
SELECT id, json_merge_patch(c1, '[1, 2]'), json_merge_patch(c1, '[1, 2]', '[true, false]'), json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_patch('[1, 2]', '[true, false]') FROM s8
) AS t ORDER BY 1;
 id | json_merge_patch | json_merge_patch | json_merge_patch | json_merge_patch 
----+------------------+------------------+------------------+------------------
  0 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  1 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  2 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  3 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  4 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  5 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
(6 rows)

-- select json_merge_patch (builtin function, not pushdown constraints, explain)
--Testcase 3837:
EXPLAIN VERBOSE
SELECT json_merge_patch(c1, '[1, 2]'), json_merge_patch(c1, '[1, 2]', '[true, false]'), json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_patch('[1, 2]', '[true, false]') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..424.81 rows=34 width=128)
   Output: (json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge_patch(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge_patch(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge_patch(`c1`, CAST('[1, 2]' AS JSON)), json_merge_patch(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge_patch(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge_patch(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge_patch(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge_patch(VARIADIC '{"[1, 2]","[true, false]"}'::json[]), id FROM public.s81mysql
(8 rows)

-- select json_merge_patch (builtin function, not pushdown constraints, result)
--Testcase 3838:
SELECT * FROM (
SELECT id, json_merge_patch(c1, '[1, 2]'), json_merge_patch(c1, '[1, 2]', '[true, false]'), json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_patch('[1, 2]', '[true, false]') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_merge_patch | json_merge_patch | json_merge_patch | json_merge_patch 
----+------------------+------------------+------------------+------------------
  2 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
(1 row)

-- select json_merge_patch (builtin function, pushdown constraints, explain)
--Testcase 3839:
EXPLAIN VERBOSE
SELECT json_merge_patch(c1, '[1, 2]'), json_merge_patch(c1, '[1, 2]', '[true, false]'), json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_patch('[1, 2]', '[true, false]') FROM s8 WHERE id != 0;
                                                                                                                                                                                      QUERY PLAN                                                                                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7250.14 rows=6792 width=128)
   Output: (json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge_patch(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge_patch(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge_patch(`c1`, CAST('[1, 2]' AS JSON)), json_merge_patch(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge_patch(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge_patch(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)) FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge_patch(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge_patch(VARIADIC '{"[1, 2]","[true, false]"}'::json[]) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_merge_patch (builtin function, pushdown constraints, result)
--Testcase 3840:
SELECT * FROM (
SELECT id, json_merge_patch(c1, '[1, 2]'), json_merge_patch(c1, '[1, 2]', '[true, false]'), json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_patch('[1, 2]', '[true, false]') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | json_merge_patch | json_merge_patch | json_merge_patch | json_merge_patch 
----+------------------+------------------+------------------+------------------
  1 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  2 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  3 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  4 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  5 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
(5 rows)

-- select json_merge_patch (builtin function, json_merge_patch in constraints, explain)
--Testcase 3841:
EXPLAIN VERBOSE
SELECT json_merge_patch(c1, '[1, 2]'), json_merge_patch(c1, '[1, 2]', '[true, false]'), json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_patch('[1, 2]', '[true, false]') FROM s8 WHERE json_length(json_merge_patch(c1, '[1, 2]')) != 1;
                                                                                                                                                                                                                             QUERY PLAN                                                                                                                                                                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..10663.15 rows=6792 width=128)
   Output: (json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge_patch(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge_patch(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge_patch(`c1`, CAST('[1, 2]' AS JSON)), json_merge_patch(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge_patch(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge_patch(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)) FROM `test`.`s82` WHERE ((json_length(json_merge_patch(`c1`, CAST('[1, 2]' AS JSON))) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge_patch(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge_patch(VARIADIC '{"[1, 2]","[true, false]"}'::json[]) FROM public.s81mysql WHERE ((public.json_length(public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json])) <> 1))
(7 rows)

-- select json_merge_patch (builtin function, json_merge_patch in constraints, result)
--Testcase 3842:
SELECT * FROM (
SELECT id, json_merge_patch(c1, '[1, 2]'), json_merge_patch(c1, '[1, 2]', '[true, false]'), json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_patch('[1, 2]', '[true, false]') FROM s8 WHERE json_length(json_merge_patch(c1, '[1, 2]')) != 1
) AS t ORDER BY 1;
 id | json_merge_patch | json_merge_patch | json_merge_patch | json_merge_patch 
----+------------------+------------------+------------------+------------------
  0 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  1 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  2 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  3 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  4 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  5 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
(6 rows)

-- select json_merge_patch (builtin function, json_merge_patch in constraints, explain)
--Testcase 3843:
EXPLAIN VERBOSE
SELECT json_merge_patch(c1, '[1, 2]'), json_merge_patch(c1, '[1, 2]', '[true, false]'), json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_patch('[1, 2]', '[true, false]') FROM s8 WHERE json_length(json_merge_patch('[1, 2]', '[true, false]')) = 2;
                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..3753.09 rows=34 width=128)
   Output: (json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge_patch(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge_patch(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge_patch(`c1`, CAST('[1, 2]' AS JSON)), json_merge_patch(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge_patch(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge_patch(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)) FROM `test`.`s82` WHERE ((json_length(json_merge_patch(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON))) = 2))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge_patch(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge_patch(VARIADIC '{"[1, 2]","[true, false]"}'::json[]) FROM public.s81mysql WHERE ((public.json_length(public.json_merge_patch(VARIADIC '{"[1, 2]","[true, false]"}'::json[])) = 2))
(7 rows)

-- select json_merge_patch (builtin function, json_merge_patch in constraints, result)
--Testcase 3844:
SELECT * FROM (
SELECT id, json_merge_patch(c1, '[1, 2]'), json_merge_patch(c1, '[1, 2]', '[true, false]'), json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_patch('[1, 2]', '[true, false]') FROM s8 WHERE json_length(json_merge_patch('[1, 2]', '[true, false]')) = 2
) AS t ORDER BY 1;
 id | json_merge_patch | json_merge_patch | json_merge_patch | json_merge_patch 
----+------------------+------------------+------------------+------------------
  0 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  1 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  2 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  3 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  4 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
  5 | [1, 2]           | [true, false]    | [true, false]    | [true, false]
(6 rows)

-- select json_merge_patch as nest function with agg (not pushdown, explain)
--Testcase 3845:
EXPLAIN VERBOSE
SELECT sum(id),json_merge_patch('[1, 2]', '[true, false]') FROM s8;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_merge_patch(VARIADIC '{"[1, 2]","[true, false]"}'::json[])
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_merge_patch as nest function with agg (not pushdown, result, error)
--Testcase 3846:
SELECT sum(id),json_merge_patch('[1, 2]', '[true, false]') FROM s8;
ERROR:  stub json_merge_patch(variadic json[]) is called
CONTEXT:  PL/pgSQL function json_merge_patch(json[]) line 3 at RAISE
-- select json_merge_patch with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3847:
EXPLAIN VERBOSE
SELECT json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]'), pi(), 4.1 FROM s8;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=72)
   Output: (json_merge_patch(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge_patch(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge_patch(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_merge_patch with non pushdown func and explicit constant (result)
--Testcase 3848:
SELECT * FROM (
SELECT id, json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_merge_patch |        pi         | ?column? 
----+------------------+-------------------+----------
  0 | [true, false]    | 3.141592653589793 |      4.1
  1 | [true, false]    | 3.141592653589793 |      4.1
  2 | [true, false]    | 3.141592653589793 |      4.1
  3 | [true, false]    | 3.141592653589793 |      4.1
  4 | [true, false]    | 3.141592653589793 |      4.1
  5 | [true, false]    | 3.141592653589793 |      4.1
(6 rows)

-- select json_merge_patch with order by index (result)
--Testcase 3849:
SELECT id, json_length(json_merge_patch(c1, '[1, 2]')) FROM s8 ORDER BY 2, 1;
 id | json_length 
----+-------------
  0 |           2
  1 |           2
  2 |           2
  3 |           2
  4 |           2
  5 |           2
(6 rows)

-- select json_merge_patch with order by index (result)
--Testcase 3850:
SELECT id, json_length(json_merge_patch(c1, '[1, 2]')) FROM s8 ORDER BY 1, 2;
 id | json_length 
----+-------------
  0 |           2
  1 |           2
  2 |           2
  3 |           2
  4 |           2
  5 |           2
(6 rows)

-- select json_merge_patch with group by (EXPLAIN)
--Testcase 3851:
EXPLAIN VERBOSE
SELECT count(id), json_length(json_merge_patch(c1, '[1, 2]')) FROM s8 group by json_length(json_merge_patch(c1, '[1, 2]'));
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3973.91 rows=200 width=12)
   Output: count(id), (json_length(json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json])))
   Group Key: (json_length(json_merge_patch(VARIADIC ARRAY[s8.c1, '[1, 2]'::json])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json]))), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_merge_patch(`c1`, CAST('[1, 2]' AS JSON))), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json])), id FROM public.s81mysql
(10 rows)

-- select json_merge_patch with group by (result)
--Testcase 3852:
SELECT * FROM (
SELECT count(id), json_length(json_merge_patch(c1, '[1, 2]')) FROM s8 group by json_length(json_merge_patch(c1, '[1, 2]'))
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     6 |           2
(1 row)

-- select json_merge_patch with group by index (result)
--Testcase 3853:
SELECT * FROM (
SELECT id, json_length(json_merge_patch(c1, '[1, 2]')) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           2
  1 |           2
  2 |           2
  3 |           2
  4 |           2
  5 |           2
(6 rows)

-- select json_merge_patch with group by index (result)
--Testcase 3854:
SELECT * FROM (
SELECT id, json_length(json_merge_patch(c1, '[1, 2]')) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           2
  1 |           2
  2 |           2
  3 |           2
  4 |           2
  5 |           2
(6 rows)

-- select json_merge_patch with group by having (EXPLAIN)
--Testcase 3855:
EXPLAIN VERBOSE
SELECT count(c2), json_length(json_merge_patch(c1, '[1, 2]')) FROM s8 group by json_length(json_merge_patch(c1, '[1, 2]')) HAVING count(c2) > 0;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3907.91 rows=67 width=12)
   Output: count(c2), (json_length(json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json])))
   Group Key: (json_length(json_merge_patch(VARIADIC ARRAY[s8.c1, '[1, 2]'::json])))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json]))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_merge_patch(`c1`, CAST('[1, 2]' AS JSON))), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_merge_patch(VARIADIC ARRAY[c1, '[1, 2]'::json])), c2 FROM public.s81mysql
(11 rows)

-- select json_merge_patch with group by having (result)
--Testcase 3856:
SELECT * FROM (
SELECT count(c2), json_length(json_merge_patch(c1, '[1, 2]')) FROM s8 group by json_length(json_merge_patch(c1, '[1, 2]')) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     6 |           2
(1 row)

-- select json_merge_patch with group by index having (result)
--Testcase 3857:
SELECT * FROM (
SELECT c2, json_length(json_merge_patch(c1, '[1, 2]')) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           2
  2 |           2
  3 |           2
  4 |           2
  5 |           2
(5 rows)

-- select json_merge_patch with group by index having (result)
--Testcase 3858:
SELECT * FROM (
SELECT c2, json_length(json_merge_patch(c1, '[1, 2]')) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           2
  2 |           2
  3 |           2
  4 |           2
  5 |           2
(5 rows)

-- select json_merge_patch and as
--Testcase 3859:
SELECT * FROM (
SELECT id, json_merge_patch(json_build_array(c1, '[1, 2]'), '[true, false]') as json_merge_patch1 FROM s8
) AS t ORDER BY 1;
 id | json_merge_patch1 
----+-------------------
  0 | [true, false]
  1 | [true, false]
  2 | [true, false]
  3 | [true, false]
  4 | [true, false]
  5 | [true, false]
(6 rows)

-- select json_merge_preserve (builtin function, explain)
--Testcase 3860:
EXPLAIN VERBOSE
SELECT json_merge_preserve(c1, '[1, 2]'), json_merge_preserve(c1, '[1, 2]', '[true, false]'), json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_preserve('[1, 2]', '[true, false]') FROM s8;
                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7267.84 rows=6826 width=128)
   Output: (json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge_preserve(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge_preserve(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON)), json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge_preserve(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge_preserve(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge_preserve(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge_preserve(VARIADIC '{"[1, 2]","[true, false]"}'::json[]) FROM public.s81mysql
(7 rows)

-- select json_merge_preserve (builtin function, result)
--Testcase 3861:
SELECT * FROM (
SELECT id, json_merge_preserve(c1, '[1, 2]'), json_merge_preserve(c1, '[1, 2]', '[true, false]'), json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_preserve('[1, 2]', '[true, false]') FROM s8
) AS t ORDER BY 1;
 id |                       json_merge_preserve                       |                             json_merge_preserve                              |                                json_merge_preserve                                 | json_merge_preserve 
----+-----------------------------------------------------------------+------------------------------------------------------------------------------+------------------------------------------------------------------------------------+---------------------
  0 | [[1, 2], [3, 4], 5, 1, 2]                                       | [[1, 2], [3, 4], 5, 1, 2, true, false]                                       | [[[1, 2], [3, 4], 5], "[1, 2]", true, false]                                       | [1, 2, true, false]
  1 | [1, 2]                                                          | [1, 2, true, false]                                                          | [[], "[1, 2]", true, false]                                                        | [1, 2, true, false]
  2 | [{}, 1, 2]                                                      | [{}, 1, 2, true, false]                                                      | [{}, "[1, 2]", true, false]                                                        | [1, 2, true, false]
  3 | [{"a": "10", "b": "15", "x": 25}, 1, 2]                         | [{"a": "10", "b": "15", "x": 25}, 1, 2, true, false]                         | [{"a": "10", "b": "15", "x": 25}, "[1, 2]", true, false]                           | [1, 2, true, false]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2, true, false]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, "[1, 2]", true, false]                           | [1, 2, true, false]
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2] | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2, true, false] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[1, 2]", true, false] | [1, 2, true, false]
(6 rows)

-- select json_merge_preserve (builtin function, not pushdown constraints, explain)
--Testcase 3862:
EXPLAIN VERBOSE
SELECT json_merge_preserve(c1, '[1, 2]'), json_merge_preserve(c1, '[1, 2]', '[true, false]'), json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_preserve('[1, 2]', '[true, false]') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                                                                                     QUERY PLAN                                                                                                                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..424.81 rows=34 width=128)
   Output: (json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge_preserve(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge_preserve(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON)), json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge_preserve(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge_preserve(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge_preserve(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge_preserve(VARIADIC '{"[1, 2]","[true, false]"}'::json[]), id FROM public.s81mysql
(8 rows)

-- select json_merge_preserve (builtin function, not pushdown constraints, result)
--Testcase 3863:
SELECT * FROM (
SELECT id, json_merge_preserve(c1, '[1, 2]'), json_merge_preserve(c1, '[1, 2]', '[true, false]'), json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_preserve('[1, 2]', '[true, false]') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_merge_preserve |   json_merge_preserve   |     json_merge_preserve     | json_merge_preserve 
----+---------------------+-------------------------+-----------------------------+---------------------
  2 | [{}, 1, 2]          | [{}, 1, 2, true, false] | [{}, "[1, 2]", true, false] | [1, 2, true, false]
(1 row)

-- select json_merge_preserve (builtin function, pushdown constraints, explain)
--Testcase 3864:
EXPLAIN VERBOSE
SELECT json_merge_preserve(c1, '[1, 2]'), json_merge_preserve(c1, '[1, 2]', '[true, false]'), json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_preserve('[1, 2]', '[true, false]') FROM s8 WHERE id != 0;
                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7250.14 rows=6792 width=128)
   Output: (json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge_preserve(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge_preserve(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON)), json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge_preserve(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge_preserve(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)) FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge_preserve(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge_preserve(VARIADIC '{"[1, 2]","[true, false]"}'::json[]) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_merge_preserve (builtin function, pushdown constraints, result)
--Testcase 3865:
SELECT * FROM (
SELECT id, json_merge_preserve(c1, '[1, 2]'), json_merge_preserve(c1, '[1, 2]', '[true, false]'), json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_preserve('[1, 2]', '[true, false]') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id |                       json_merge_preserve                       |                             json_merge_preserve                              |                                json_merge_preserve                                 | json_merge_preserve 
----+-----------------------------------------------------------------+------------------------------------------------------------------------------+------------------------------------------------------------------------------------+---------------------
  1 | [1, 2]                                                          | [1, 2, true, false]                                                          | [[], "[1, 2]", true, false]                                                        | [1, 2, true, false]
  2 | [{}, 1, 2]                                                      | [{}, 1, 2, true, false]                                                      | [{}, "[1, 2]", true, false]                                                        | [1, 2, true, false]
  3 | [{"a": "10", "b": "15", "x": 25}, 1, 2]                         | [{"a": "10", "b": "15", "x": 25}, 1, 2, true, false]                         | [{"a": "10", "b": "15", "x": 25}, "[1, 2]", true, false]                           | [1, 2, true, false]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2, true, false]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, "[1, 2]", true, false]                           | [1, 2, true, false]
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2] | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2, true, false] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[1, 2]", true, false] | [1, 2, true, false]
(5 rows)

-- select json_merge_preserve (builtin function, json_merge_preserve in constraints, explain)
--Testcase 3866:
EXPLAIN VERBOSE
SELECT json_merge_preserve(c1, '[1, 2]'), json_merge_preserve(c1, '[1, 2]', '[true, false]'), json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_preserve('[1, 2]', '[true, false]') FROM s8 WHERE json_length(json_merge_preserve(c1, '[1, 2]')) != 1;
                                                                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..10663.15 rows=6792 width=128)
   Output: (json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge_preserve(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge_preserve(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON)), json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge_preserve(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge_preserve(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)) FROM `test`.`s82` WHERE ((json_length(json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON))) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge_preserve(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge_preserve(VARIADIC '{"[1, 2]","[true, false]"}'::json[]) FROM public.s81mysql WHERE ((public.json_length(public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json])) <> 1))
(7 rows)

-- select json_merge_preserve (builtin function, json_merge_preserve in constraints, result)
--Testcase 3867:
SELECT * FROM (
SELECT id, json_merge_preserve(c1, '[1, 2]'), json_merge_preserve(c1, '[1, 2]', '[true, false]'), json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_preserve('[1, 2]', '[true, false]') FROM s8 WHERE json_length(json_merge_preserve(c1, '[1, 2]')) != 1
) AS t ORDER BY 1;
 id |                       json_merge_preserve                       |                             json_merge_preserve                              |                                json_merge_preserve                                 | json_merge_preserve 
----+-----------------------------------------------------------------+------------------------------------------------------------------------------+------------------------------------------------------------------------------------+---------------------
  0 | [[1, 2], [3, 4], 5, 1, 2]                                       | [[1, 2], [3, 4], 5, 1, 2, true, false]                                       | [[[1, 2], [3, 4], 5], "[1, 2]", true, false]                                       | [1, 2, true, false]
  1 | [1, 2]                                                          | [1, 2, true, false]                                                          | [[], "[1, 2]", true, false]                                                        | [1, 2, true, false]
  2 | [{}, 1, 2]                                                      | [{}, 1, 2, true, false]                                                      | [{}, "[1, 2]", true, false]                                                        | [1, 2, true, false]
  3 | [{"a": "10", "b": "15", "x": 25}, 1, 2]                         | [{"a": "10", "b": "15", "x": 25}, 1, 2, true, false]                         | [{"a": "10", "b": "15", "x": 25}, "[1, 2]", true, false]                           | [1, 2, true, false]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2, true, false]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, "[1, 2]", true, false]                           | [1, 2, true, false]
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2] | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2, true, false] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[1, 2]", true, false] | [1, 2, true, false]
(6 rows)

-- select json_merge_preserve (builtin function, json_merge_preserve in constraints, explain)
--Testcase 3868:
EXPLAIN VERBOSE
SELECT json_merge_preserve(c1, '[1, 2]'), json_merge_preserve(c1, '[1, 2]', '[true, false]'), json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_preserve('[1, 2]', '[true, false]') FROM s8 WHERE json_length(json_merge_preserve('[1, 2]', '[true, false]')) = 4;
                                                                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..3753.09 rows=34 width=128)
   Output: (json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json])), (json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json])), (json_merge_preserve(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), (json_merge_preserve(VARIADIC '{"[1, 2]","[true, false]"}'::json[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON)), json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)), json_merge_preserve(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), json_merge_preserve(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON)) FROM `test`.`s82` WHERE ((json_length(json_merge_preserve(CAST('[1, 2]' AS JSON), CAST('[true, false]' AS JSON))) = 4))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json]), public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json, '[true, false]'::json]), public.json_merge_preserve(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), public.json_merge_preserve(VARIADIC '{"[1, 2]","[true, false]"}'::json[]) FROM public.s81mysql WHERE ((public.json_length(public.json_merge_preserve(VARIADIC '{"[1, 2]","[true, false]"}'::json[])) = 4))
(7 rows)

-- select json_merge_preserve (builtin function, json_merge_preserve in constraints, result)
--Testcase 3869:
SELECT * FROM (
SELECT id, json_merge_preserve(c1, '[1, 2]'), json_merge_preserve(c1, '[1, 2]', '[true, false]'), json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]'), json_merge_preserve('[1, 2]', '[true, false]') FROM s8 WHERE json_length(json_merge_preserve('[1, 2]', '[true, false]')) = 4
) AS t ORDER BY 1;
 id |                       json_merge_preserve                       |                             json_merge_preserve                              |                                json_merge_preserve                                 | json_merge_preserve 
----+-----------------------------------------------------------------+------------------------------------------------------------------------------+------------------------------------------------------------------------------------+---------------------
  0 | [[1, 2], [3, 4], 5, 1, 2]                                       | [[1, 2], [3, 4], 5, 1, 2, true, false]                                       | [[[1, 2], [3, 4], 5], "[1, 2]", true, false]                                       | [1, 2, true, false]
  1 | [1, 2]                                                          | [1, 2, true, false]                                                          | [[], "[1, 2]", true, false]                                                        | [1, 2, true, false]
  2 | [{}, 1, 2]                                                      | [{}, 1, 2, true, false]                                                      | [{}, "[1, 2]", true, false]                                                        | [1, 2, true, false]
  3 | [{"a": "10", "b": "15", "x": 25}, 1, 2]                         | [{"a": "10", "b": "15", "x": 25}, 1, 2, true, false]                         | [{"a": "10", "b": "15", "x": 25}, "[1, 2]", true, false]                           | [1, 2, true, false]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, 1, 2, true, false]                         | [{"a": 1, "b": 2, "c": {"d": 4}}, "[1, 2]", true, false]                           | [1, 2, true, false]
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2] | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}, 1, 2, true, false] | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[1, 2]", true, false] | [1, 2, true, false]
(6 rows)

-- select json_merge_preserve as nest function with agg (not pushdown, explain)
--Testcase 3870:
EXPLAIN VERBOSE
SELECT sum(id),json_merge_preserve('[1, 2]', '[true, false]') FROM s8;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_merge_preserve(VARIADIC '{"[1, 2]","[true, false]"}'::json[])
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_merge_preserve as nest function with agg (not pushdown, result, error)
--Testcase 3871:
SELECT sum(id),json_merge_preserve('[1, 2]', '[true, false]') FROM s8;
ERROR:  stub json_merge_preserve(variadic json[]) is called
CONTEXT:  PL/pgSQL function json_merge_preserve(json[]) line 3 at RAISE
-- select json_merge_preserve with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3872:
EXPLAIN VERBOSE
SELECT json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]'), pi(), 4.1 FROM s8;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=72)
   Output: (json_merge_preserve(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_merge_preserve(json_array(`c1`, '[1, 2]'), CAST('[true, false]' AS JSON)), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_merge_preserve(VARIADIC ARRAY[json_build_array(c1, '[1, 2]'), '[true, false]'::json]), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_merge_preserve with non pushdown func and explicit constant (result)
--Testcase 3873:
SELECT * FROM (
SELECT id, json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id |                                json_merge_preserve                                 |        pi         | ?column? 
----+------------------------------------------------------------------------------------+-------------------+----------
  0 | [[[1, 2], [3, 4], 5], "[1, 2]", true, false]                                       | 3.141592653589793 |      4.1
  1 | [[], "[1, 2]", true, false]                                                        | 3.141592653589793 |      4.1
  2 | [{}, "[1, 2]", true, false]                                                        | 3.141592653589793 |      4.1
  3 | [{"a": "10", "b": "15", "x": 25}, "[1, 2]", true, false]                           | 3.141592653589793 |      4.1
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, "[1, 2]", true, false]                           | 3.141592653589793 |      4.1
  5 | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[1, 2]", true, false] | 3.141592653589793 |      4.1
(6 rows)

-- select json_merge_preserve with order by index (result)
--Testcase 3874:
SELECT id, json_length(json_merge_preserve(c1, '[1, 2]')) FROM s8 ORDER BY 2, 1;
 id | json_length 
----+-------------
  1 |           2
  2 |           3
  3 |           3
  4 |           3
  0 |           5
  5 |           6
(6 rows)

-- select json_merge_preserve with order by index (result)
--Testcase 3875:
SELECT id, json_length(json_merge_preserve(c1, '[1, 2]')) FROM s8 ORDER BY 1, 2;
 id | json_length 
----+-------------
  0 |           5
  1 |           2
  2 |           3
  3 |           3
  4 |           3
  5 |           6
(6 rows)

-- select json_merge_preserve with group by (EXPLAIN)
--Testcase 3876:
EXPLAIN VERBOSE
SELECT count(id), json_length(json_merge_preserve(c1, '[1, 2]')) FROM s8 group by json_length(json_merge_preserve(c1, '[1, 2]'));
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3973.91 rows=200 width=12)
   Output: count(id), (json_length(json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json])))
   Group Key: (json_length(json_merge_preserve(VARIADIC ARRAY[s8.c1, '[1, 2]'::json])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json]))), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON))), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json])), id FROM public.s81mysql
(10 rows)

-- select json_merge_preserve with group by (result)
--Testcase 3877:
SELECT * FROM (
SELECT count(id), json_length(json_merge_preserve(c1, '[1, 2]')) FROM s8 group by json_length(json_merge_preserve(c1, '[1, 2]'))
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           5
     1 |           6
     1 |           2
     3 |           3
(4 rows)

-- select json_merge_preserve with group by index (result)
--Testcase 3878:
SELECT * FROM (
SELECT id, json_length(json_merge_preserve(c1, '[1, 2]')) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           5
  1 |           2
  2 |           3
  3 |           3
  4 |           3
  5 |           6
(6 rows)

-- select json_merge_preserve with group by index (result)
--Testcase 3879:
SELECT * FROM (
SELECT id, json_length(json_merge_preserve(c1, '[1, 2]')) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           5
  1 |           2
  2 |           3
  3 |           3
  4 |           3
  5 |           6
(6 rows)

-- select json_merge_preserve with group by having (EXPLAIN)
--Testcase 3880:
EXPLAIN VERBOSE
SELECT count(c2), json_length(json_merge_preserve(c1, '[1, 2]')) FROM s8 group by json_length(json_merge_preserve(c1, '[1, 2]')) HAVING count(c2) > 0;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3907.91 rows=67 width=12)
   Output: count(c2), (json_length(json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json])))
   Group Key: (json_length(json_merge_preserve(VARIADIC ARRAY[s8.c1, '[1, 2]'::json])))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json]))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_merge_preserve(`c1`, CAST('[1, 2]' AS JSON))), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_merge_preserve(VARIADIC ARRAY[c1, '[1, 2]'::json])), c2 FROM public.s81mysql
(11 rows)

-- select json_merge_preserve with group by having (result)
--Testcase 3881:
SELECT * FROM (
SELECT count(c2), json_length(json_merge_preserve(c1, '[1, 2]')) FROM s8 group by json_length(json_merge_preserve(c1, '[1, 2]')) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           5
     1 |           6
     1 |           2
     3 |           3
(4 rows)

-- select json_merge_preserve with group by index having (result)
--Testcase 3882:
SELECT * FROM (
SELECT c2, json_length(json_merge_preserve(c1, '[1, 2]')) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           5
  2 |           2
  3 |           3
  4 |           3
  5 |           6
  5 |           3
(6 rows)

-- select json_merge_preserve with group by index having (result)
--Testcase 3883:
SELECT * FROM (
SELECT c2, json_length(json_merge_preserve(c1, '[1, 2]')) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           5
  2 |           2
  3 |           3
  4 |           3
  5 |           6
  5 |           3
(6 rows)

-- select json_merge_preserve and as
--Testcase 3884:
SELECT * FROM (
SELECT id, json_merge_preserve(json_build_array(c1, '[1, 2]'), '[true, false]') as json_merge_preserve1 FROM s8
) AS t ORDER BY 1;
 id |                                json_merge_preserve1                                
----+------------------------------------------------------------------------------------
  0 | [[[1, 2], [3, 4], 5], "[1, 2]", true, false]
  1 | [[], "[1, 2]", true, false]
  2 | [{}, "[1, 2]", true, false]
  3 | [{"a": "10", "b": "15", "x": 25}, "[1, 2]", true, false]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}, "[1, 2]", true, false]
  5 | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "[1, 2]", true, false]
(6 rows)

-- json_build_object --> json_object in mysql
-- select json_build_object (builtin function, explain)
--Testcase 3885:
EXPLAIN VERBOSE
SELECT json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL, 'h', TRUE) FROM s8;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=32)
   Output: (json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL::unknown, 'h', true))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_object('a', `c1`, 'b', `c2`, 'c', `c3`, 'd', 1, 'e', 'this is ''text'' value', 'f', pi(), 'g', NULL, 'h', true) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', public.mysql_pi(), 'g', NULL::unknown, 'h', true) FROM public.s81mysql
(7 rows)

-- select json_build_object (builtin function, result)
--Testcase 3886:
SELECT * FROM (
SELECT id, json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL, 'h', TRUE) FROM s8
) AS t ORDER BY 1;
 id |                                                                             json_build_object                                                                              
----+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  0 | {"a": [[1, 2], [3, 4], 5], "b": 1, "c": "This", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
  1 | {"a": [], "b": 2, "c": "is", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
  2 | {"a": {}, "b": 3, "c": "text", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
  3 | {"a": {"a": "10", "b": "15", "x": 25}, "b": 4, "c": "scalar", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
  4 | {"a": {"a": 1, "b": 2, "c": {"d": 4}}, "b": 5, "c": "scalar", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
  5 | {"a": ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "b": 5, "c": "scalar", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
(6 rows)

-- select json_build_object (builtin function, not pushdown constraints, explain)
--Testcase 3887:
EXPLAIN VERBOSE
SELECT json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL, 'h', TRUE) FROM s8 WHERE to_hex(id) = '1';
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..399.31 rows=34 width=32)
   Output: (json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL::unknown, 'h', true))
   Filter: (to_hex(s8.id) = '1'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_object('a', `c1`, 'b', `c2`, 'c', `c3`, 'd', 1, 'e', 'this is ''text'' value', 'f', pi(), 'g', NULL, 'h', true), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', public.mysql_pi(), 'g', NULL::unknown, 'h', true), id FROM public.s81mysql
(8 rows)

-- select json_build_object (builtin function, not pushdown constraints, result)
--Testcase 3888:
SELECT * FROM (
SELECT id, json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL, 'h', TRUE) FROM s8 WHERE to_hex(id) = '1'
) AS t ORDER BY 1;
 id |                                                json_build_object                                                
----+-----------------------------------------------------------------------------------------------------------------
  1 | {"a": [], "b": 2, "c": "is", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
(1 row)

-- select json_build_object (builtin function, pushdown constraints, explain)
--Testcase 3889:
EXPLAIN VERBOSE
SELECT json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL, 'h', TRUE) FROM s8 WHERE id = 1;
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..314.59 rows=34 width=32)
   Output: (json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL::unknown, 'h', true))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_object('a', `c1`, 'b', `c2`, 'c', `c3`, 'd', 1, 'e', 'this is ''text'' value', 'f', pi(), 'g', NULL, 'h', true) FROM `test`.`s82` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', public.mysql_pi(), 'g', NULL::unknown, 'h', true) FROM public.s81mysql WHERE ((id = 1))
(7 rows)

-- select json_build_object (builtin function, pushdown constraints, result)
--Testcase 3890:
SELECT * FROM (
SELECT id, json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL, 'h', TRUE) FROM s8 WHERE id = 1
) AS t ORDER BY 1;
 id |                                                json_build_object                                                
----+-----------------------------------------------------------------------------------------------------------------
  1 | {"a": [], "b": 2, "c": "is", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
(1 row)

-- select json_build_object (builtin function, stub in constraints, explain)
--Testcase 3891:
EXPLAIN VERBOSE
SELECT json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL, 'h', TRUE) FROM s8 WHERE log2(id) > 1;
                                                                                                               QUERY PLAN                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2649.10 rows=2276 width=32)
   Output: (json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL::unknown, 'h', true))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_object('a', `c1`, 'b', `c2`, 'c', `c3`, 'd', 1, 'e', 'this is ''text'' value', 'f', pi(), 'g', NULL, 'h', true) FROM `test`.`s82` WHERE ((log2(`id`) > 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', public.mysql_pi(), 'g', NULL::unknown, 'h', true) FROM public.s81mysql WHERE ((public.log2(id) > 1::double precision))
(7 rows)

-- select json_build_object (builtin function, stub in constraints, result)
--Testcase 3892:
SELECT * FROM (
SELECT id, json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL, 'h', TRUE) FROM s8 WHERE log2(id) > 1
) AS t ORDER BY 1;
 id |                                                                             json_build_object                                                                              
----+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  3 | {"a": {"a": "10", "b": "15", "x": 25}, "b": 4, "c": "scalar", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
  4 | {"a": {"a": 1, "b": 2, "c": {"d": 4}}, "b": 5, "c": "scalar", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
  5 | {"a": ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "b": 5, "c": "scalar", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
(3 rows)

-- select json_build_object (builtin function, stub in constraints, explain)
--Testcase 3893:
EXPLAIN VERBOSE
SELECT json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL, 'h', TRUE) FROM s8 WHERE json_depth(json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL, 'h', TRUE)) > 0;
                                                                                                                                                                             QUERY PLAN                                                                                                                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..4355.60 rows=2276 width=32)
   Output: (json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL::unknown, 'h', true))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_object('a', `c1`, 'b', `c2`, 'c', `c3`, 'd', 1, 'e', 'this is ''text'' value', 'f', pi(), 'g', NULL, 'h', true) FROM `test`.`s82` WHERE ((json_depth(json_object('a', `c1`, 'b', `c2`, 'c', `c3`, 'd', 1, 'e', 'this is ''text'' value', 'f', pi(), 'g', NULL, 'h', true)) > 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', public.mysql_pi(), 'g', NULL::unknown, 'h', true) FROM public.s81mysql WHERE ((public.json_depth(json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', public.mysql_pi(), 'g', NULL::unknown, 'h', true)) > 0))
(7 rows)

-- select json_build_object (builtin function, stub in constraints, result)
--Testcase 3894:
SELECT * FROM (
SELECT id, json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL, 'h', TRUE) FROM s8 WHERE json_depth(json_build_object('a', c1, 'b', c2, 'c', c3, 'd', 1, 'e', 'this is ''text'' value', 'f', mysql_pi(), 'g', NULL, 'h', TRUE)) > 0
) AS t ORDER BY 1;
 id |                                                                             json_build_object                                                                              
----+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  0 | {"a": [[1, 2], [3, 4], 5], "b": 1, "c": "This", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
  1 | {"a": [], "b": 2, "c": "is", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
  2 | {"a": {}, "b": 3, "c": "text", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
  3 | {"a": {"a": "10", "b": "15", "x": 25}, "b": 4, "c": "scalar", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
  4 | {"a": {"a": 1, "b": 2, "c": {"d": 4}}, "b": 5, "c": "scalar", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
  5 | {"a": ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "b": 5, "c": "scalar", "d": 1, "e": "this is 'text' value", "f": 3.141592653589793, "g": null, "h": true}
(6 rows)

-- select json_build_object as nest function with agg (not pushdown, explain)
--Testcase 3895:
EXPLAIN VERBOSE
SELECT sum(id),json_build_object('sum', sum(id)) FROM s8;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=110.00..159.16 rows=1 width=40)
   Output: (sum(id)), json_build_object('sum', (sum(id)))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_build_object as nest function with agg (not pushdown, result)
--Testcase 3896:
SELECT sum(id),json_build_object('sum', sum(id)) FROM s8;
 sum | json_build_object 
-----+-------------------
  15 | {"sum" : 15}
(1 row)

-- select json_build_object as nest function with stub (pushdown, explain)
--Testcase 3897:
EXPLAIN VERBOSE
SELECT json_build_object('json_val', '{"a": 100}'::json, 'stub_log2', log2(id)) FROM s8;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2165.41 rows=6826 width=32)
   Output: (json_build_object('json_val', '{"a": 100}'::json, 'stub_log2', log2((id)::double precision)))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_object('json_val', CAST('{"a": 100}' AS JSON), 'stub_log2', log2(`id`)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT json_build_object('json_val', '{"a": 100}'::json, 'stub_log2', public.log2(id)) FROM public.s81mysql
(7 rows)

-- select json_build_object as nest function with stub (pushdown, result)
--Testcase 3898:
SELECT * FROM (
SELECT id, json_build_object('json_val', '{"a": 100}'::json, 'stub_log2', log2(id)) FROM s8
) AS t ORDER BY 1;
 id |                    json_build_object                     
----+----------------------------------------------------------
  0 | {"json_val": {"a": 100}, "stub_log2": null}
  1 | {"json_val": {"a": 100}, "stub_log2": 0.0}
  2 | {"json_val": {"a": 100}, "stub_log2": 1.0}
  3 | {"json_val": {"a": 100}, "stub_log2": 1.584962500721156}
  4 | {"json_val": {"a": 100}, "stub_log2": 2.0}
  5 | {"json_val": {"a": 100}, "stub_log2": 2.321928094887362}
(6 rows)

-- select json_build_object with non pushdown func and explicit constant (explain)
--Testcase 3899:
EXPLAIN VERBOSE
SELECT json_build_object('val1', '100'), cosd(id), 4.1 FROM s8;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..475.97 rows=6826 width=72)
   Output: json_build_object('val1', '100'), cosd((id)::double precision), 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id FROM public.s81mysql
(7 rows)

-- select json_build_object with non pushdown func and explicit constant (result)
--Testcase 3900:
SELECT * FROM (
SELECT id, json_build_object('val1', '100'), cosd(id), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_build_object |        cosd        | ?column? 
----+-------------------+--------------------+----------
  0 | {"val1" : "100"}  |                  1 |      4.1
  1 | {"val1" : "100"}  | 0.9998476951563913 |      4.1
  2 | {"val1" : "100"}  | 0.9993908270190958 |      4.1
  3 | {"val1" : "100"}  | 0.9986295347545738 |      4.1
  4 | {"val1" : "100"}  | 0.9975640502598242 |      4.1
  5 | {"val1" : "100"}  | 0.9961946980917455 |      4.1
(6 rows)

-- select json_build_object with order by (explain)
--Testcase 3901:
EXPLAIN VERBOSE
SELECT json_length(json_build_object(c1, '$[1], c2')) FROM s8 ORDER BY 1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=2583.05..2600.12 rows=6826 width=4)
   Output: (json_length(json_build_object(c1, '$[1], c2')))
   Sort Key: (json_length(json_build_object(s8.c1, '$[1], c2')))
   ->  Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=4)
         Output: (json_length(json_build_object(c1, '$[1], c2')))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT json_length(json_object(`c1`, '$[1], c2')) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.json_length(json_build_object(c1, '$[1], c2')) FROM public.s81mysql
(12 rows)

-- select json_build_object with order by (result)
--Testcase 3902:
SELECT json_length(json_build_object(c1, '$[1], c2')) FROM s8 ORDER BY 1;
 json_length 
-------------
           1
           1
           1
           1
           1
           1
(6 rows)

-- select json_build_object with group by (explain)
--Testcase 3903:
EXPLAIN VERBOSE
SELECT json_length(json_build_object('a', c1, 'b', c2, 'c', c3)) FROM s8 GROUP BY 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.91 rows=200 width=4)
   Output: (json_length(json_build_object('a', c1, 'b', c2, 'c', c3)))
   Group Key: (json_length(json_build_object('a', s8.c1, 'b', s8.c2, 'c', s8.c3)))
   ->  Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=4)
         Output: (json_length(json_build_object('a', c1, 'b', c2, 'c', c3)))
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_object('a', `c1`, 'b', `c2`, 'c', `c3`)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(json_build_object('a', c1, 'b', c2, 'c', c3)) FROM public.s81mysql
(10 rows)

-- select json_build_object with group by (result)
--Testcase 3904:
SELECT * FROM (
SELECT id, json_length(json_build_object('a', c1, 'b', c2, 'c', c3)) FROM s8 GROUP BY 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           3
  1 |           3
  2 |           3
  3 |           3
  4 |           3
  5 |           3
(6 rows)

-- select json_build_object with group by having (explain)
--Testcase 3905:
EXPLAIN VERBOSE
SELECT id, json_depth(json_build_object('a', 1)) FROM s8 GROUP BY 1 HAVING count(c2) > 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan  (cost=118.53..224.16 rows=1 width=8)
   Output: id, json_depth(json_build_object('a', 1))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT `id`, count(`c2`) FROM `test`.`s82` GROUP BY 1
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT id, count(c2) FROM public.s81mysql GROUP BY 1
(11 rows)

-- select json_build_object with group by having (result)
--Testcase 3906:
SELECT * FROM (
SELECT id, json_depth(json_build_object('a', 1)) FROM s8 GROUP BY 1 HAVING count(c2) > 1
) AS t ORDER BY 1;
 id | json_depth 
----+------------
(0 rows)

-- select json_build_object and as
--Testcase 3907:
SELECT * FROM (
SELECT id, json_build_object('a', c1, 'b', c2, 'c', c3) AS json_build_object1 FROM s8
) AS t ORDER BY 1;
 id |                                     json_build_object1                                     
----+--------------------------------------------------------------------------------------------
  0 | {"a" : [[1, 2], [3, 4], 5], "b" : 1, "c" : "This"}
  1 | {"a" : [], "b" : 2, "c" : "is"}
  2 | {"a" : {}, "b" : 3, "c" : "text"}
  3 | {"a" : {"a": "10", "b": "15", "x": 25}, "b" : 4, "c" : "scalar"}
  4 | {"a" : {"a": 1, "b": 2, "c": {"d": 4}}, "b" : 5, "c" : "scalar"}
  5 | {"a" : ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}], "b" : 5, "c" : "scalar"}
(6 rows)

-- select json_overlaps (builtin function, explain)
--Testcase 3908:
EXPLAIN VERBOSE
SELECT json_overlaps(c1, '[[1, 2], [3, 4], 5]'), json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'), json_overlaps(c1, c1),json_overlaps('{"a":1,"b":10,"d":10}', '{"c":1,"e":10,"f":1,"d":10}'),json_overlaps('[1,3,5,7]', '[2,5,7]') FROM s8;
                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8974.35 rows=6826 width=20)
   Output: (json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json)), (json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'::json)), (json_overlaps(c1, c1)), (json_overlaps('{"a":1,"b":10,"d":10}'::json, '{"c":1,"e":10,"f":1,"d":10}'::json)), (json_overlaps('[1,3,5,7]'::json, '[2,5,7]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_overlaps(`c1`, CAST('[[1, 2], [3, 4], 5]' AS JSON)), json_overlaps(json_array(`c1`, '1'), CAST('[[1, 2], [3, 4], 5]' AS JSON)), json_overlaps(`c1`, `c1`), json_overlaps(CAST('{"a":1,"b":10,"d":10}' AS JSON), CAST('{"c":1,"e":10,"f":1,"d":10}' AS JSON)), json_overlaps(CAST('[1,3,5,7]' AS JSON), CAST('[2,5,7]' AS JSON)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json), public.json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'::json), public.json_overlaps(c1, c1), public.json_overlaps('{"a":1,"b":10,"d":10}'::json, '{"c":1,"e":10,"f":1,"d":10}'::json), public.json_overlaps('[1,3,5,7]'::json, '[2,5,7]'::json) FROM public.s81mysql
(7 rows)

-- select json_overlaps (builtin function, result)
--Testcase 3909:
SELECT * FROM (
SELECT id, json_overlaps(c1, '[[1, 2], [3, 4], 5]'), json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'), json_overlaps(c1, c1),json_overlaps('{"a":1,"b":10,"d":10}', '{"c":1,"e":10,"f":1,"d":10}'),json_overlaps('[1,3,5,7]', '[2,5,7]') FROM s8
) AS t ORDER BY 1;
 id | json_overlaps | json_overlaps | json_overlaps | json_overlaps | json_overlaps 
----+---------------+---------------+---------------+---------------+---------------
  0 |             1 |             0 |             1 |             1 |             1
  1 |             0 |             0 |             0 |             1 |             1
  2 |             0 |             0 |             0 |             1 |             1
  3 |             0 |             0 |             1 |             1 |             1
  4 |             0 |             0 |             1 |             1 |             1
  5 |             0 |             0 |             1 |             1 |             1
(6 rows)

-- select json_overlaps (builtin function, not pushdown constraints, explain)
--Testcase 3910:
EXPLAIN VERBOSE
SELECT json_overlaps(c1, '[[1, 2], [3, 4], 5]'), json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'), json_overlaps(c1, c1),json_overlaps('{"a":1,"b":10,"d":10}', '{"c":1,"e":10,"f":1,"d":10}'),json_overlaps('[1,3,5,7]', '[2,5,7]') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                                                                                      QUERY PLAN                                                                                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..433.31 rows=34 width=20)
   Output: (json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json)), (json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'::json)), (json_overlaps(c1, c1)), (json_overlaps('{"a":1,"b":10,"d":10}'::json, '{"c":1,"e":10,"f":1,"d":10}'::json)), (json_overlaps('[1,3,5,7]'::json, '[2,5,7]'::json))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_overlaps(`c1`, CAST('[[1, 2], [3, 4], 5]' AS JSON)), json_overlaps(json_array(`c1`, '1'), CAST('[[1, 2], [3, 4], 5]' AS JSON)), json_overlaps(`c1`, `c1`), json_overlaps(CAST('{"a":1,"b":10,"d":10}' AS JSON), CAST('{"c":1,"e":10,"f":1,"d":10}' AS JSON)), json_overlaps(CAST('[1,3,5,7]' AS JSON), CAST('[2,5,7]' AS JSON)), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json), public.json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'::json), public.json_overlaps(c1, c1), public.json_overlaps('{"a":1,"b":10,"d":10}'::json, '{"c":1,"e":10,"f":1,"d":10}'::json), public.json_overlaps('[1,3,5,7]'::json, '[2,5,7]'::json), id FROM public.s81mysql
(8 rows)

-- select json_overlaps (builtin function, not pushdown constraints, result)
--Testcase 3911:
SELECT * FROM (
SELECT id, json_overlaps(c1, '[[1, 2], [3, 4], 5]'), json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'), json_overlaps(c1, c1),json_overlaps('{"a":1,"b":10,"d":10}', '{"c":1,"e":10,"f":1,"d":10}'),json_overlaps('[1,3,5,7]', '[2,5,7]') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_overlaps | json_overlaps | json_overlaps | json_overlaps | json_overlaps 
----+---------------+---------------+---------------+---------------+---------------
  2 |             0 |             0 |             0 |             1 |             1
(1 row)

-- select json_overlaps (builtin function, pushdown constraints, explain)
--Testcase 3912:
EXPLAIN VERBOSE
SELECT json_overlaps(c1, '[[1, 2], [3, 4], 5]'), json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'), json_overlaps(c1, c1),json_overlaps('{"a":1,"b":10,"d":10}', '{"c":1,"e":10,"f":1,"d":10}'),json_overlaps('[1,3,5,7]', '[2,5,7]') FROM s8 WHERE id != 0;
                                                                                                                                                                                             QUERY PLAN                                                                                                                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8948.15 rows=6792 width=20)
   Output: (json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json)), (json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'::json)), (json_overlaps(c1, c1)), (json_overlaps('{"a":1,"b":10,"d":10}'::json, '{"c":1,"e":10,"f":1,"d":10}'::json)), (json_overlaps('[1,3,5,7]'::json, '[2,5,7]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_overlaps(`c1`, CAST('[[1, 2], [3, 4], 5]' AS JSON)), json_overlaps(json_array(`c1`, '1'), CAST('[[1, 2], [3, 4], 5]' AS JSON)), json_overlaps(`c1`, `c1`), json_overlaps(CAST('{"a":1,"b":10,"d":10}' AS JSON), CAST('{"c":1,"e":10,"f":1,"d":10}' AS JSON)), json_overlaps(CAST('[1,3,5,7]' AS JSON), CAST('[2,5,7]' AS JSON)) FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json), public.json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'::json), public.json_overlaps(c1, c1), public.json_overlaps('{"a":1,"b":10,"d":10}'::json, '{"c":1,"e":10,"f":1,"d":10}'::json), public.json_overlaps('[1,3,5,7]'::json, '[2,5,7]'::json) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_overlaps (builtin function, pushdown constraints, result)
--Testcase 3913:
SELECT * FROM (
SELECT id, json_overlaps(c1, '[[1, 2], [3, 4], 5]'), json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'), json_overlaps(c1, c1),json_overlaps('{"a":1,"b":10,"d":10}', '{"c":1,"e":10,"f":1,"d":10}'),json_overlaps('[1,3,5,7]', '[2,5,7]') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | json_overlaps | json_overlaps | json_overlaps | json_overlaps | json_overlaps 
----+---------------+---------------+---------------+---------------+---------------
  1 |             0 |             0 |             0 |             1 |             1
  2 |             0 |             0 |             0 |             1 |             1
  3 |             0 |             0 |             1 |             1 |             1
  4 |             0 |             0 |             1 |             1 |             1
  5 |             0 |             0 |             1 |             1 |             1
(5 rows)

-- select json_overlaps (builtin function, json_overlaps in constraints, explain)
--Testcase 3914:
EXPLAIN VERBOSE
SELECT json_overlaps(c1, '[[1, 2], [3, 4], 5]'), json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'), json_overlaps(c1, c1),json_overlaps('{"a":1,"b":10,"d":10}', '{"c":1,"e":10,"f":1,"d":10}'),json_overlaps('[1,3,5,7]', '[2,5,7]') FROM s8 WHERE json_overlaps(c1, '[[1, 2], [3, 4], 5]') != 1;
                                                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..10654.65 rows=6792 width=20)
   Output: (json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json)), (json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'::json)), (json_overlaps(c1, c1)), (json_overlaps('{"a":1,"b":10,"d":10}'::json, '{"c":1,"e":10,"f":1,"d":10}'::json)), (json_overlaps('[1,3,5,7]'::json, '[2,5,7]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_overlaps(`c1`, CAST('[[1, 2], [3, 4], 5]' AS JSON)), json_overlaps(json_array(`c1`, '1'), CAST('[[1, 2], [3, 4], 5]' AS JSON)), json_overlaps(`c1`, `c1`), json_overlaps(CAST('{"a":1,"b":10,"d":10}' AS JSON), CAST('{"c":1,"e":10,"f":1,"d":10}' AS JSON)), json_overlaps(CAST('[1,3,5,7]' AS JSON), CAST('[2,5,7]' AS JSON)) FROM `test`.`s82` WHERE ((json_overlaps(`c1`, CAST('[[1, 2], [3, 4], 5]' AS JSON)) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json), public.json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'::json), public.json_overlaps(c1, c1), public.json_overlaps('{"a":1,"b":10,"d":10}'::json, '{"c":1,"e":10,"f":1,"d":10}'::json), public.json_overlaps('[1,3,5,7]'::json, '[2,5,7]'::json) FROM public.s81mysql WHERE ((public.json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json) <> 1))
(7 rows)

-- select json_overlaps (builtin function, json_overlaps in constraints, result)
--Testcase 3915:
SELECT * FROM (
SELECT id, json_overlaps(c1, '[[1, 2], [3, 4], 5]'), json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'), json_overlaps(c1, c1),json_overlaps('{"a":1,"b":10,"d":10}', '{"c":1,"e":10,"f":1,"d":10}'),json_overlaps('[1,3,5,7]', '[2,5,7]') FROM s8 WHERE json_overlaps(c1, '[[1, 2], [3, 4], 5]') != 1
) AS t ORDER BY 1;
 id | json_overlaps | json_overlaps | json_overlaps | json_overlaps | json_overlaps 
----+---------------+---------------+---------------+---------------+---------------
  1 |             0 |             0 |             0 |             1 |             1
  2 |             0 |             0 |             0 |             1 |             1
  3 |             0 |             0 |             1 |             1 |             1
  4 |             0 |             0 |             1 |             1 |             1
  5 |             0 |             0 |             1 |             1 |             1
(5 rows)

-- select json_overlaps (builtin function, json_overlaps in constraints, explain)
--Testcase 3916:
EXPLAIN VERBOSE
SELECT json_overlaps(c1, '[[1, 2], [3, 4], 5]'), json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'), json_overlaps(c1, c1),json_overlaps('{"a":1,"b":10,"d":10}', '{"c":1,"e":10,"f":1,"d":10}'),json_overlaps('[1,3,5,7]', '[2,5,7]') FROM s8 WHERE json_overlaps('[1,3,5,7]', '[2,5,7]') = 1;
                                                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2055.09 rows=34 width=20)
   Output: (json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json)), (json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'::json)), (json_overlaps(c1, c1)), (json_overlaps('{"a":1,"b":10,"d":10}'::json, '{"c":1,"e":10,"f":1,"d":10}'::json)), (json_overlaps('[1,3,5,7]'::json, '[2,5,7]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_overlaps(`c1`, CAST('[[1, 2], [3, 4], 5]' AS JSON)), json_overlaps(json_array(`c1`, '1'), CAST('[[1, 2], [3, 4], 5]' AS JSON)), json_overlaps(`c1`, `c1`), json_overlaps(CAST('{"a":1,"b":10,"d":10}' AS JSON), CAST('{"c":1,"e":10,"f":1,"d":10}' AS JSON)), json_overlaps(CAST('[1,3,5,7]' AS JSON), CAST('[2,5,7]' AS JSON)) FROM `test`.`s82` WHERE ((json_overlaps(CAST('[1,3,5,7]' AS JSON), CAST('[2,5,7]' AS JSON)) = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json), public.json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'::json), public.json_overlaps(c1, c1), public.json_overlaps('{"a":1,"b":10,"d":10}'::json, '{"c":1,"e":10,"f":1,"d":10}'::json), public.json_overlaps('[1,3,5,7]'::json, '[2,5,7]'::json) FROM public.s81mysql WHERE ((public.json_overlaps('[1,3,5,7]'::json, '[2,5,7]'::json) = 1))
(7 rows)

-- select json_overlaps (builtin function, json_overlaps in constraints, result)
--Testcase 3917:
SELECT * FROM (
SELECT id, json_overlaps(c1, '[[1, 2], [3, 4], 5]'), json_overlaps(json_build_array(c1, '1'), '[[1, 2], [3, 4], 5]'), json_overlaps(c1, c1),json_overlaps('{"a":1,"b":10,"d":10}', '{"c":1,"e":10,"f":1,"d":10}'),json_overlaps('[1,3,5,7]', '[2,5,7]') FROM s8 WHERE json_overlaps('[1,3,5,7]', '[2,5,7]') = 1
) AS t ORDER BY 1;
 id | json_overlaps | json_overlaps | json_overlaps | json_overlaps | json_overlaps 
----+---------------+---------------+---------------+---------------+---------------
  0 |             1 |             0 |             1 |             1 |             1
  1 |             0 |             0 |             0 |             1 |             1
  2 |             0 |             0 |             0 |             1 |             1
  3 |             0 |             0 |             1 |             1 |             1
  4 |             0 |             0 |             1 |             1 |             1
  5 |             0 |             0 |             1 |             1 |             1
(6 rows)

-- select json_overlaps with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3918:
EXPLAIN VERBOSE
SELECT json_overlaps(c1, c1), pi(), 4.1 FROM s8;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=44)
   Output: (json_overlaps(c1, c1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_overlaps(`c1`, `c1`), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_overlaps(c1, c1), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_overlaps with non pushdown func and explicit constant (result)
--Testcase 3919:
SELECT * FROM (
SELECT id, json_overlaps(c1, c1), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_overlaps |        pi         | ?column? 
----+---------------+-------------------+----------
  0 |             1 | 3.141592653589793 |      4.1
  1 |             0 | 3.141592653589793 |      4.1
  2 |             0 | 3.141592653589793 |      4.1
  3 |             1 | 3.141592653589793 |      4.1
  4 |             1 | 3.141592653589793 |      4.1
  5 |             1 | 3.141592653589793 |      4.1
(6 rows)

-- select json_overlaps with order by index (result)
--Testcase 3920:
SELECT id,  json_overlaps(c1, '[[1, 2], [3, 4], 5]') FROM s8 ORDER BY 2, 1;
 id | json_overlaps 
----+---------------
  1 |             0
  2 |             0
  3 |             0
  4 |             0
  5 |             0
  0 |             1
(6 rows)

-- select json_overlaps with order by index (result)
--Testcase 3921:
SELECT id,  json_overlaps(c1, '[[1, 2], [3, 4], 5]') FROM s8 ORDER BY 1, 2;
 id | json_overlaps 
----+---------------
  0 |             1
  1 |             0
  2 |             0
  3 |             0
  4 |             0
  5 |             0
(6 rows)

-- select json_overlaps with group by (EXPLAIN)
--Testcase 3922:
EXPLAIN VERBOSE
SELECT count(id), json_overlaps(c1, '[[1, 2], [3, 4], 5]') FROM s8 group by json_overlaps(c1, '[[1, 2], [3, 4], 5]');
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
   Output: count(id), (json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json))
   Group Key: (json_overlaps(s8.c1, '[[1, 2], [3, 4], 5]'::json))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_overlaps(`c1`, CAST('[[1, 2], [3, 4], 5]' AS JSON)), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json), id FROM public.s81mysql
(10 rows)

-- select json_overlaps with group by (result)
--Testcase 3923:
SELECT * FROM (
SELECT count(id), json_overlaps(c1, '[[1, 2], [3, 4], 5]') FROM s8 group by json_overlaps(c1, '[[1, 2], [3, 4], 5]')
) AS t ORDER BY 1;
 count | json_overlaps 
-------+---------------
     1 |             1
     5 |             0
(2 rows)

-- select json_overlaps with group by index (result)
--Testcase 3924:
SELECT * FROM (
SELECT id,  json_overlaps(c1, '[[1, 2], [3, 4], 5]') FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_overlaps 
----+---------------
  0 |             1
  1 |             0
  2 |             0
  3 |             0
  4 |             0
  5 |             0
(6 rows)

-- select json_overlaps with group by index (result)
--Testcase 3925:
SELECT * FROM (
SELECT id,  json_overlaps(c1, '[[1, 2], [3, 4], 5]') FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_overlaps 
----+---------------
  0 |             1
  1 |             0
  2 |             0
  3 |             0
  4 |             0
  5 |             0
(6 rows)

-- select json_overlaps with group by having (EXPLAIN)
--Testcase 3926:
EXPLAIN VERBOSE
SELECT count(c2), json_overlaps(c1, '[[1, 2], [3, 4], 5]') FROM s8 group by json_overlaps(c1, '[[1, 2], [3, 4], 5]') HAVING count(c2) > 0;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=12)
   Output: count(c2), (json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json))
   Group Key: (json_overlaps(s8.c1, '[[1, 2], [3, 4], 5]'::json))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json)), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_overlaps(`c1`, CAST('[[1, 2], [3, 4], 5]' AS JSON)), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_overlaps(c1, '[[1, 2], [3, 4], 5]'::json), c2 FROM public.s81mysql
(11 rows)

-- select json_overlaps with group by having (result)
--Testcase 3927:
SELECT * FROM (
SELECT count(c2), json_overlaps(c1, '[[1, 2], [3, 4], 5]') FROM s8 group by json_overlaps(c1, '[[1, 2], [3, 4], 5]') HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_overlaps 
-------+---------------
     1 |             1
     5 |             0
(2 rows)

-- select json_overlaps with group by index having (result)
--Testcase 3928:
SELECT * FROM (
SELECT c2,  json_overlaps(c1, '[[1, 2], [3, 4], 5]') FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_overlaps 
----+---------------
  1 |             1
  2 |             0
  3 |             0
  4 |             0
  5 |             0
(5 rows)

-- select json_overlaps with group by index having (result)
--Testcase 3929:
SELECT * FROM (
SELECT c2,  json_overlaps(c1, '[[1, 2], [3, 4], 5]') FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_overlaps 
----+---------------
  1 |             1
  2 |             0
  3 |             0
  4 |             0
  5 |             0
(5 rows)

-- select json_overlaps and as
--Testcase 3930:
SELECT * FROM (
SELECT id, json_overlaps(c1, c1) as json_overlaps1 FROM s8
) AS t ORDER BY 1;
 id | json_overlaps1 
----+----------------
  0 |              1
  1 |              0
  2 |              0
  3 |              1
  4 |              1
  5 |              1
(6 rows)

-- select json_pretty (builtin function, explain)
--Testcase 3931:
EXPLAIN VERBOSE
SELECT json_pretty(c1), json_pretty(json_build_array(c1, 1)), json_pretty('[1,3,5]'),  json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]') FROM s8;
                                                                                                                             QUERY PLAN                                                                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7267.84 rows=6826 width=128)
   Output: (json_pretty(c1)), (json_pretty(json_build_array(c1, 1))), (json_pretty('[1,3,5]'::json)), (json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_pretty(`c1`), json_pretty(json_array(`c1`, 1)), json_pretty(CAST('[1,3,5]' AS JSON)), json_pretty(CAST('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]' AS JSON)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_pretty(c1), public.json_pretty(json_build_array(c1, 1)), public.json_pretty('[1,3,5]'::json), public.json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]'::json) FROM public.s81mysql
(7 rows)

-- select json_pretty (builtin function, result)
--Testcase 3932:
SELECT * FROM (
SELECT id, json_pretty(c1), json_pretty(json_build_array(c1, 1)), json_pretty('[1,3,5]'),  json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]') FROM s8
) AS t ORDER BY 1;
 id |   json_pretty   |    json_pretty    | json_pretty |     json_pretty      
----+-----------------+-------------------+-------------+----------------------
  0 | [              +| [                +| [          +| [                   +
    |   [            +|   [              +|   1,       +|   "a",              +
    |     1,         +|     [            +|   3,       +|   1,                +
    |     2          +|       1,         +|   5        +|   {                 +
    |   ],           +|       2          +| ]           |     "key1": "value1"+
    |   [            +|     ],           +|             |   },                +
    |     3,         +|     [            +|             |   "5",              +
    |     4          +|       3,         +|             |   "77",             +
    |   ],           +|       4          +|             |   {                 +
    |   5            +|     ],           +|             |     "key2": [       +
    | ]               |     5            +|             |       "value3",     +
    |                 |   ],             +|             |       "valuex",     +
    |                 |   1              +|             |       "valuey"      +
    |                 | ]                 |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  1 | []              | [                +| [          +| [                   +
    |                 |   [],            +|   1,       +|   "a",              +
    |                 |   1              +|   3,       +|   1,                +
    |                 | ]                 |   5        +|   {                 +
    |                 |                   | ]           |     "key1": "value1"+
    |                 |                   |             |   },                +
    |                 |                   |             |   "5",              +
    |                 |                   |             |   "77",             +
    |                 |                   |             |   {                 +
    |                 |                   |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  2 | {}              | [                +| [          +| [                   +
    |                 |   {},            +|   1,       +|   "a",              +
    |                 |   1              +|   3,       +|   1,                +
    |                 | ]                 |   5        +|   {                 +
    |                 |                   | ]           |     "key1": "value1"+
    |                 |                   |             |   },                +
    |                 |                   |             |   "5",              +
    |                 |                   |             |   "77",             +
    |                 |                   |             |   {                 +
    |                 |                   |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  3 | {              +| [                +| [          +| [                   +
    |   "a": "10",   +|   {              +|   1,       +|   "a",              +
    |   "b": "15",   +|     "a": "10",   +|   3,       +|   1,                +
    |   "x": 25      +|     "b": "15",   +|   5        +|   {                 +
    | }               |     "x": 25      +| ]           |     "key1": "value1"+
    |                 |   },             +|             |   },                +
    |                 |   1              +|             |   "5",              +
    |                 | ]                 |             |   "77",             +
    |                 |                   |             |   {                 +
    |                 |                   |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  4 | {              +| [                +| [          +| [                   +
    |   "a": 1,      +|   {              +|   1,       +|   "a",              +
    |   "b": 2,      +|     "a": 1,      +|   3,       +|   1,                +
    |   "c": {       +|     "b": 2,      +|   5        +|   {                 +
    |     "d": 4     +|     "c": {       +| ]           |     "key1": "value1"+
    |   }            +|       "d": 4     +|             |   },                +
    | }               |     }            +|             |   "5",              +
    |                 |   },             +|             |   "77",             +
    |                 |   1              +|             |   {                 +
    |                 | ]                 |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  5 | [              +| [                +| [          +| [                   +
    |   "abc",       +|   [              +|   1,       +|   "a",              +
    |   [            +|     "abc",       +|   3,       +|   1,                +
    |     {          +|     [            +|   5        +|   {                 +
    |       "k": "10"+|       {          +| ]           |     "key1": "value1"+
    |     },         +|         "k": "10"+|             |   },                +
    |     "def"      +|       },         +|             |   "5",              +
    |   ],           +|       "def"      +|             |   "77",             +
    |   {            +|     ],           +|             |   {                 +
    |     "x": "abc" +|     {            +|             |     "key2": [       +
    |   },           +|       "x": "abc" +|             |       "value3",     +
    |   {            +|     },           +|             |       "valuex",     +
    |     "y": "bcd" +|     {            +|             |       "valuey"      +
    |   }            +|       "y": "bcd" +|             |     ]               +
    | ]               |     }            +|             |   },                +
    |                 |   ],             +|             |   "j",              +
    |                 |   1              +|             |   "2"               +
    |                 | ]                 |             | ]
(6 rows)

-- select json_pretty (builtin function, not pushdown constraints, explain)
--Testcase 3933:
EXPLAIN VERBOSE
SELECT json_pretty(c1), json_pretty(json_build_array(c1, 1)), json_pretty('[1,3,5]'),  json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                               QUERY PLAN                                                                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..424.81 rows=34 width=128)
   Output: (json_pretty(c1)), (json_pretty(json_build_array(c1, 1))), (json_pretty('[1,3,5]'::json)), (json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]'::json))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_pretty(`c1`), json_pretty(json_array(`c1`, 1)), json_pretty(CAST('[1,3,5]' AS JSON)), json_pretty(CAST('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]' AS JSON)), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_pretty(c1), public.json_pretty(json_build_array(c1, 1)), public.json_pretty('[1,3,5]'::json), public.json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]'::json), id FROM public.s81mysql
(8 rows)

-- select json_pretty (builtin function, not pushdown constraints, result)
--Testcase 3934:
SELECT * FROM (
SELECT id, json_pretty(c1), json_pretty(json_build_array(c1, 1)), json_pretty('[1,3,5]'),  json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_pretty | json_pretty | json_pretty |     json_pretty      
----+-------------+-------------+-------------+----------------------
  2 | {}          | [          +| [          +| [                   +
    |             |   {},      +|   1,       +|   "a",              +
    |             |   1        +|   3,       +|   1,                +
    |             | ]           |   5        +|   {                 +
    |             |             | ]           |     "key1": "value1"+
    |             |             |             |   },                +
    |             |             |             |   "5",              +
    |             |             |             |   "77",             +
    |             |             |             |   {                 +
    |             |             |             |     "key2": [       +
    |             |             |             |       "value3",     +
    |             |             |             |       "valuex",     +
    |             |             |             |       "valuey"      +
    |             |             |             |     ]               +
    |             |             |             |   },                +
    |             |             |             |   "j",              +
    |             |             |             |   "2"               +
    |             |             |             | ]
(1 row)

-- select json_pretty (builtin function, pushdown constraints, explain)
--Testcase 3935:
EXPLAIN VERBOSE
SELECT json_pretty(c1), json_pretty(json_build_array(c1, 1)), json_pretty('[1,3,5]'),  json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]') FROM s8 WHERE id != 0;
                                                                                                                                      QUERY PLAN                                                                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7250.14 rows=6792 width=128)
   Output: (json_pretty(c1)), (json_pretty(json_build_array(c1, 1))), (json_pretty('[1,3,5]'::json)), (json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_pretty(`c1`), json_pretty(json_array(`c1`, 1)), json_pretty(CAST('[1,3,5]' AS JSON)), json_pretty(CAST('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]' AS JSON)) FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_pretty(c1), public.json_pretty(json_build_array(c1, 1)), public.json_pretty('[1,3,5]'::json), public.json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]'::json) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_pretty (builtin function, pushdown constraints, result)
--Testcase 3936:
SELECT * FROM (
SELECT id, json_pretty(c1), json_pretty(json_build_array(c1, 1)), json_pretty('[1,3,5]'),  json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id |   json_pretty   |    json_pretty    | json_pretty |     json_pretty      
----+-----------------+-------------------+-------------+----------------------
  1 | []              | [                +| [          +| [                   +
    |                 |   [],            +|   1,       +|   "a",              +
    |                 |   1              +|   3,       +|   1,                +
    |                 | ]                 |   5        +|   {                 +
    |                 |                   | ]           |     "key1": "value1"+
    |                 |                   |             |   },                +
    |                 |                   |             |   "5",              +
    |                 |                   |             |   "77",             +
    |                 |                   |             |   {                 +
    |                 |                   |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  2 | {}              | [                +| [          +| [                   +
    |                 |   {},            +|   1,       +|   "a",              +
    |                 |   1              +|   3,       +|   1,                +
    |                 | ]                 |   5        +|   {                 +
    |                 |                   | ]           |     "key1": "value1"+
    |                 |                   |             |   },                +
    |                 |                   |             |   "5",              +
    |                 |                   |             |   "77",             +
    |                 |                   |             |   {                 +
    |                 |                   |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  3 | {              +| [                +| [          +| [                   +
    |   "a": "10",   +|   {              +|   1,       +|   "a",              +
    |   "b": "15",   +|     "a": "10",   +|   3,       +|   1,                +
    |   "x": 25      +|     "b": "15",   +|   5        +|   {                 +
    | }               |     "x": 25      +| ]           |     "key1": "value1"+
    |                 |   },             +|             |   },                +
    |                 |   1              +|             |   "5",              +
    |                 | ]                 |             |   "77",             +
    |                 |                   |             |   {                 +
    |                 |                   |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  4 | {              +| [                +| [          +| [                   +
    |   "a": 1,      +|   {              +|   1,       +|   "a",              +
    |   "b": 2,      +|     "a": 1,      +|   3,       +|   1,                +
    |   "c": {       +|     "b": 2,      +|   5        +|   {                 +
    |     "d": 4     +|     "c": {       +| ]           |     "key1": "value1"+
    |   }            +|       "d": 4     +|             |   },                +
    | }               |     }            +|             |   "5",              +
    |                 |   },             +|             |   "77",             +
    |                 |   1              +|             |   {                 +
    |                 | ]                 |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  5 | [              +| [                +| [          +| [                   +
    |   "abc",       +|   [              +|   1,       +|   "a",              +
    |   [            +|     "abc",       +|   3,       +|   1,                +
    |     {          +|     [            +|   5        +|   {                 +
    |       "k": "10"+|       {          +| ]           |     "key1": "value1"+
    |     },         +|         "k": "10"+|             |   },                +
    |     "def"      +|       },         +|             |   "5",              +
    |   ],           +|       "def"      +|             |   "77",             +
    |   {            +|     ],           +|             |   {                 +
    |     "x": "abc" +|     {            +|             |     "key2": [       +
    |   },           +|       "x": "abc" +|             |       "value3",     +
    |   {            +|     },           +|             |       "valuex",     +
    |     "y": "bcd" +|     {            +|             |       "valuey"      +
    |   }            +|       "y": "bcd" +|             |     ]               +
    | ]               |     }            +|             |   },                +
    |                 |   ],             +|             |   "j",              +
    |                 |   1              +|             |   "2"               +
    |                 | ]                 |             | ]
(5 rows)

-- select json_pretty (builtin function, json_pretty in constraints, explain)
--Testcase 3937:
EXPLAIN VERBOSE
SELECT json_pretty(c1), json_pretty(json_build_array(c1, 1)), json_pretty('[1,3,5]'),  json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]') FROM s8 WHERE json_length(json_pretty(c1)) != 1;
                                                                                                                                                          QUERY PLAN                                                                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..10663.15 rows=6792 width=128)
   Output: (json_pretty(c1)), (json_pretty(json_build_array(c1, 1))), (json_pretty('[1,3,5]'::json)), (json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_pretty(`c1`), json_pretty(json_array(`c1`, 1)), json_pretty(CAST('[1,3,5]' AS JSON)), json_pretty(CAST('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]' AS JSON)) FROM `test`.`s82` WHERE ((json_length(json_pretty(`c1`)) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_pretty(c1), public.json_pretty(json_build_array(c1, 1)), public.json_pretty('[1,3,5]'::json), public.json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]'::json) FROM public.s81mysql WHERE ((public.json_length(public.json_pretty(c1)) <> 1))
(7 rows)

-- select json_pretty (builtin function, json_pretty in constraints, result)
--Testcase 3938:
SELECT * FROM (
SELECT id, json_pretty(c1), json_pretty(json_build_array(c1, 1)), json_pretty('[1,3,5]'),  json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]') FROM s8 WHERE json_length(json_pretty(c1)) != 1
) AS t ORDER BY 1;
 id |   json_pretty   |    json_pretty    | json_pretty |     json_pretty      
----+-----------------+-------------------+-------------+----------------------
  0 | [              +| [                +| [          +| [                   +
    |   [            +|   [              +|   1,       +|   "a",              +
    |     1,         +|     [            +|   3,       +|   1,                +
    |     2          +|       1,         +|   5        +|   {                 +
    |   ],           +|       2          +| ]           |     "key1": "value1"+
    |   [            +|     ],           +|             |   },                +
    |     3,         +|     [            +|             |   "5",              +
    |     4          +|       3,         +|             |   "77",             +
    |   ],           +|       4          +|             |   {                 +
    |   5            +|     ],           +|             |     "key2": [       +
    | ]               |     5            +|             |       "value3",     +
    |                 |   ],             +|             |       "valuex",     +
    |                 |   1              +|             |       "valuey"      +
    |                 | ]                 |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  1 | []              | [                +| [          +| [                   +
    |                 |   [],            +|   1,       +|   "a",              +
    |                 |   1              +|   3,       +|   1,                +
    |                 | ]                 |   5        +|   {                 +
    |                 |                   | ]           |     "key1": "value1"+
    |                 |                   |             |   },                +
    |                 |                   |             |   "5",              +
    |                 |                   |             |   "77",             +
    |                 |                   |             |   {                 +
    |                 |                   |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  2 | {}              | [                +| [          +| [                   +
    |                 |   {},            +|   1,       +|   "a",              +
    |                 |   1              +|   3,       +|   1,                +
    |                 | ]                 |   5        +|   {                 +
    |                 |                   | ]           |     "key1": "value1"+
    |                 |                   |             |   },                +
    |                 |                   |             |   "5",              +
    |                 |                   |             |   "77",             +
    |                 |                   |             |   {                 +
    |                 |                   |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  3 | {              +| [                +| [          +| [                   +
    |   "a": "10",   +|   {              +|   1,       +|   "a",              +
    |   "b": "15",   +|     "a": "10",   +|   3,       +|   1,                +
    |   "x": 25      +|     "b": "15",   +|   5        +|   {                 +
    | }               |     "x": 25      +| ]           |     "key1": "value1"+
    |                 |   },             +|             |   },                +
    |                 |   1              +|             |   "5",              +
    |                 | ]                 |             |   "77",             +
    |                 |                   |             |   {                 +
    |                 |                   |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  4 | {              +| [                +| [          +| [                   +
    |   "a": 1,      +|   {              +|   1,       +|   "a",              +
    |   "b": 2,      +|     "a": 1,      +|   3,       +|   1,                +
    |   "c": {       +|     "b": 2,      +|   5        +|   {                 +
    |     "d": 4     +|     "c": {       +| ]           |     "key1": "value1"+
    |   }            +|       "d": 4     +|             |   },                +
    | }               |     }            +|             |   "5",              +
    |                 |   },             +|             |   "77",             +
    |                 |   1              +|             |   {                 +
    |                 | ]                 |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  5 | [              +| [                +| [          +| [                   +
    |   "abc",       +|   [              +|   1,       +|   "a",              +
    |   [            +|     "abc",       +|   3,       +|   1,                +
    |     {          +|     [            +|   5        +|   {                 +
    |       "k": "10"+|       {          +| ]           |     "key1": "value1"+
    |     },         +|         "k": "10"+|             |   },                +
    |     "def"      +|       },         +|             |   "5",              +
    |   ],           +|       "def"      +|             |   "77",             +
    |   {            +|     ],           +|             |   {                 +
    |     "x": "abc" +|     {            +|             |     "key2": [       +
    |   },           +|       "x": "abc" +|             |       "value3",     +
    |   {            +|     },           +|             |       "valuex",     +
    |     "y": "bcd" +|     {            +|             |       "valuey"      +
    |   }            +|       "y": "bcd" +|             |     ]               +
    | ]               |     }            +|             |   },                +
    |                 |   ],             +|             |   "j",              +
    |                 |   1              +|             |   "2"               +
    |                 | ]                 |             | ]
(6 rows)

-- select json_pretty (builtin function, json_pretty in constraints, explain)
--Testcase 3939:
EXPLAIN VERBOSE
SELECT json_pretty(c1), json_pretty(json_build_array(c1, 1)), json_pretty('[1,3,5]'),  json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]') FROM s8 WHERE json_length( json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]')) = 8;
                                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..3753.09 rows=34 width=128)
   Output: (json_pretty(c1)), (json_pretty(json_build_array(c1, 1))), (json_pretty('[1,3,5]'::json)), (json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_pretty(`c1`), json_pretty(json_array(`c1`, 1)), json_pretty(CAST('[1,3,5]' AS JSON)), json_pretty(CAST('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]' AS JSON)) FROM `test`.`s82` WHERE ((json_length(json_pretty(CAST('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]' AS JSON))) = 8))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_pretty(c1), public.json_pretty(json_build_array(c1, 1)), public.json_pretty('[1,3,5]'::json), public.json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]'::json) FROM public.s81mysql WHERE ((public.json_length(public.json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]'::json)) = 8))
(7 rows)

-- select json_pretty (builtin function, json_pretty in constraints, result)
--Testcase 3940:
SELECT * FROM (
SELECT id, json_pretty(c1), json_pretty(json_build_array(c1, 1)), json_pretty('[1,3,5]'),  json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]') FROM s8 WHERE json_length( json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]')) = 8
) AS t ORDER BY 1;
 id |   json_pretty   |    json_pretty    | json_pretty |     json_pretty      
----+-----------------+-------------------+-------------+----------------------
  0 | [              +| [                +| [          +| [                   +
    |   [            +|   [              +|   1,       +|   "a",              +
    |     1,         +|     [            +|   3,       +|   1,                +
    |     2          +|       1,         +|   5        +|   {                 +
    |   ],           +|       2          +| ]           |     "key1": "value1"+
    |   [            +|     ],           +|             |   },                +
    |     3,         +|     [            +|             |   "5",              +
    |     4          +|       3,         +|             |   "77",             +
    |   ],           +|       4          +|             |   {                 +
    |   5            +|     ],           +|             |     "key2": [       +
    | ]               |     5            +|             |       "value3",     +
    |                 |   ],             +|             |       "valuex",     +
    |                 |   1              +|             |       "valuey"      +
    |                 | ]                 |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  1 | []              | [                +| [          +| [                   +
    |                 |   [],            +|   1,       +|   "a",              +
    |                 |   1              +|   3,       +|   1,                +
    |                 | ]                 |   5        +|   {                 +
    |                 |                   | ]           |     "key1": "value1"+
    |                 |                   |             |   },                +
    |                 |                   |             |   "5",              +
    |                 |                   |             |   "77",             +
    |                 |                   |             |   {                 +
    |                 |                   |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  2 | {}              | [                +| [          +| [                   +
    |                 |   {},            +|   1,       +|   "a",              +
    |                 |   1              +|   3,       +|   1,                +
    |                 | ]                 |   5        +|   {                 +
    |                 |                   | ]           |     "key1": "value1"+
    |                 |                   |             |   },                +
    |                 |                   |             |   "5",              +
    |                 |                   |             |   "77",             +
    |                 |                   |             |   {                 +
    |                 |                   |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  3 | {              +| [                +| [          +| [                   +
    |   "a": "10",   +|   {              +|   1,       +|   "a",              +
    |   "b": "15",   +|     "a": "10",   +|   3,       +|   1,                +
    |   "x": 25      +|     "b": "15",   +|   5        +|   {                 +
    | }               |     "x": 25      +| ]           |     "key1": "value1"+
    |                 |   },             +|             |   },                +
    |                 |   1              +|             |   "5",              +
    |                 | ]                 |             |   "77",             +
    |                 |                   |             |   {                 +
    |                 |                   |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  4 | {              +| [                +| [          +| [                   +
    |   "a": 1,      +|   {              +|   1,       +|   "a",              +
    |   "b": 2,      +|     "a": 1,      +|   3,       +|   1,                +
    |   "c": {       +|     "b": 2,      +|   5        +|   {                 +
    |     "d": 4     +|     "c": {       +| ]           |     "key1": "value1"+
    |   }            +|       "d": 4     +|             |   },                +
    | }               |     }            +|             |   "5",              +
    |                 |   },             +|             |   "77",             +
    |                 |   1              +|             |   {                 +
    |                 | ]                 |             |     "key2": [       +
    |                 |                   |             |       "value3",     +
    |                 |                   |             |       "valuex",     +
    |                 |                   |             |       "valuey"      +
    |                 |                   |             |     ]               +
    |                 |                   |             |   },                +
    |                 |                   |             |   "j",              +
    |                 |                   |             |   "2"               +
    |                 |                   |             | ]
  5 | [              +| [                +| [          +| [                   +
    |   "abc",       +|   [              +|   1,       +|   "a",              +
    |   [            +|     "abc",       +|   3,       +|   1,                +
    |     {          +|     [            +|   5        +|   {                 +
    |       "k": "10"+|       {          +| ]           |     "key1": "value1"+
    |     },         +|         "k": "10"+|             |   },                +
    |     "def"      +|       },         +|             |   "5",              +
    |   ],           +|       "def"      +|             |   "77",             +
    |   {            +|     ],           +|             |   {                 +
    |     "x": "abc" +|     {            +|             |     "key2": [       +
    |   },           +|       "x": "abc" +|             |       "value3",     +
    |   {            +|     },           +|             |       "valuex",     +
    |     "y": "bcd" +|     {            +|             |       "valuey"      +
    |   }            +|       "y": "bcd" +|             |     ]               +
    | ]               |     }            +|             |   },                +
    |                 |   ],             +|             |   "j",              +
    |                 |   1              +|             |   "2"               +
    |                 | ]                 |             | ]
(6 rows)

-- select json_pretty as nest function with agg (not pushdown, explain)
--Testcase 3941:
EXPLAIN VERBOSE
SELECT sum(id), json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]') FROM s8;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]'::json)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_pretty as nest function with agg (not pushdown, result, error)
--Testcase 3942:
SELECT sum(id), json_pretty('["a",1,{"key1":"value1"},"5","77",{"key2":["value3","valuex","valuey"]},"j","2"]') FROM s8;
ERROR:  stub json_pretty(json) is called
CONTEXT:  PL/pgSQL function json_pretty(json) line 3 at RAISE
-- select json_pretty with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3943:
EXPLAIN VERBOSE
SELECT json_pretty('[1,3,5]'), pi(), 4.1 FROM s8;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (json_pretty('[1,3,5]'::json)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_pretty(CAST('[1,3,5]' AS JSON)), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_pretty('[1,3,5]'::json), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_pretty with non pushdown func and explicit constant (result)
--Testcase 3944:
SELECT * FROM (
SELECT id, json_pretty('[1,3,5]'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_pretty |        pi         | ?column? 
----+-------------+-------------------+----------
  0 | [          +| 3.141592653589793 |      4.1
    |   1,       +|                   | 
    |   3,       +|                   | 
    |   5        +|                   | 
    | ]           |                   | 
  1 | [          +| 3.141592653589793 |      4.1
    |   1,       +|                   | 
    |   3,       +|                   | 
    |   5        +|                   | 
    | ]           |                   | 
  2 | [          +| 3.141592653589793 |      4.1
    |   1,       +|                   | 
    |   3,       +|                   | 
    |   5        +|                   | 
    | ]           |                   | 
  3 | [          +| 3.141592653589793 |      4.1
    |   1,       +|                   | 
    |   3,       +|                   | 
    |   5        +|                   | 
    | ]           |                   | 
  4 | [          +| 3.141592653589793 |      4.1
    |   1,       +|                   | 
    |   3,       +|                   | 
    |   5        +|                   | 
    | ]           |                   | 
  5 | [          +| 3.141592653589793 |      4.1
    |   1,       +|                   | 
    |   3,       +|                   | 
    |   5        +|                   | 
    | ]           |                   | 
(6 rows)

-- select json_pretty with order by index (result)
--Testcase 3945:
SELECT id, json_length(json_pretty(c1)) FROM s8 ORDER BY 2, 1;
 id | json_length 
----+-------------
  1 |           0
  2 |           0
  0 |           3
  3 |           3
  4 |           3
  5 |           4
(6 rows)

-- select json_pretty with order by index (result)
--Testcase 3946:
SELECT id, json_length(json_pretty(c1)) FROM s8 ORDER BY 1, 2;
 id | json_length 
----+-------------
  0 |           3
  1 |           0
  2 |           0
  3 |           3
  4 |           3
  5 |           4
(6 rows)

-- select json_pretty with group by (EXPLAIN)
--Testcase 3947:
EXPLAIN VERBOSE
SELECT count(id), json_length(json_pretty(c1)) FROM s8 group by json_length(json_pretty(c1));
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3973.91 rows=200 width=12)
   Output: count(id), (json_length(json_pretty(c1)))
   Group Key: (json_length(json_pretty(s8.c1)))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_pretty(c1))), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_pretty(`c1`)), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_pretty(c1)), id FROM public.s81mysql
(10 rows)

-- select json_pretty with group by (result)
--Testcase 3948:
SELECT * FROM (
SELECT count(id), json_length(json_pretty(c1)) FROM s8 group by json_length(json_pretty(c1))
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           4
     2 |           0
     3 |           3
(3 rows)

-- select json_pretty with group by index (result)
--Testcase 3949:
SELECT * FROM (
SELECT id, json_length(json_pretty(c1)) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           3
  1 |           0
  2 |           0
  3 |           3
  4 |           3
  5 |           4
(6 rows)

-- select json_pretty with group by index (result)
--Testcase 3950:
SELECT * FROM (
SELECT id, json_length(json_pretty(c1)) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           3
  1 |           0
  2 |           0
  3 |           3
  4 |           3
  5 |           4
(6 rows)

-- select json_pretty with group by having (EXPLAIN)
--Testcase 3951:
EXPLAIN VERBOSE
SELECT count(c2), json_length(json_pretty(c1)) FROM s8 group by json_length(json_pretty(c1)) HAVING count(c2) > 0;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3907.91 rows=67 width=12)
   Output: count(c2), (json_length(json_pretty(c1)))
   Group Key: (json_length(json_pretty(s8.c1)))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_pretty(c1))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_pretty(`c1`)), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_pretty(c1)), c2 FROM public.s81mysql
(11 rows)

-- select json_pretty with group by having (result)
--Testcase 3952:
SELECT * FROM (
SELECT count(c2), json_length(json_pretty(c1)) FROM s8 group by json_length(json_pretty(c1)) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           4
     2 |           0
     3 |           3
(3 rows)

-- select json_pretty with group by index having (result)
--Testcase 3953:
SELECT * FROM (
SELECT c2, json_length(json_pretty(c1)) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           3
  2 |           0
  3 |           0
  4 |           3
  5 |           4
  5 |           3
(6 rows)

-- select json_pretty with group by index having (result)
--Testcase 3954:
SELECT * FROM (
SELECT c2, json_length(json_pretty(c1)) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           3
  2 |           0
  3 |           0
  4 |           3
  5 |           4
  5 |           3
(6 rows)

-- select json_pretty and as
--Testcase 3955:
SELECT * FROM (
SELECT id, json_pretty('[1,3,5]') as json_pretty1 FROM s8
) AS t ORDER BY 1;
 id | json_pretty1 
----+--------------
  0 | [           +
    |   1,        +
    |   3,        +
    |   5         +
    | ]
  1 | [           +
    |   1,        +
    |   3,        +
    |   5         +
    | ]
  2 | [           +
    |   1,        +
    |   3,        +
    |   5         +
    | ]
  3 | [           +
    |   1,        +
    |   3,        +
    |   5         +
    | ]
  4 | [           +
    |   1,        +
    |   3,        +
    |   5         +
    | ]
  5 | [           +
    |   1,        +
    |   3,        +
    |   5         +
    | ]
(6 rows)

-- select json_quote (builtin function, explain)
--Testcase 3956:
EXPLAIN VERBOSE
SELECT json_quote(c3), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM s8;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7250.78 rows=6826 width=128)
   Output: (json_quote(c3)), (json_quote('null'::text)), (json_quote('"null"'::text)), (json_quote('[1, 2, 3]'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_quote(`c3`), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_quote(c3), public.json_quote('null'::text), public.json_quote('"null"'::text), public.json_quote('[1, 2, 3]'::text) FROM public.s81mysql
(7 rows)

-- select json_quote (builtin function, result)
--Testcase 3957:
SELECT * FROM (
SELECT id, json_quote(c3), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM s8
) AS t ORDER BY 1;
 id | json_quote | json_quote | json_quote | json_quote  
----+------------+------------+------------+-------------
  0 | "This"     | "null"     | "\"null\"" | "[1, 2, 3]"
  1 | "is"       | "null"     | "\"null\"" | "[1, 2, 3]"
  2 | "text"     | "null"     | "\"null\"" | "[1, 2, 3]"
  3 | "scalar"   | "null"     | "\"null\"" | "[1, 2, 3]"
  4 | "scalar"   | "null"     | "\"null\"" | "[1, 2, 3]"
  5 | "scalar"   | "null"     | "\"null\"" | "[1, 2, 3]"
(6 rows)

-- select json_quote (builtin function, not pushdown constraints, explain)
--Testcase 3958:
EXPLAIN VERBOSE
SELECT json_quote(c3), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM s8 WHERE to_hex(id) = '2';
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..424.73 rows=34 width=128)
   Output: (json_quote(c3)), (json_quote('null'::text)), (json_quote('"null"'::text)), (json_quote('[1, 2, 3]'::text))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_quote(`c3`), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]'), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_quote(c3), public.json_quote('null'::text), public.json_quote('"null"'::text), public.json_quote('[1, 2, 3]'::text), id FROM public.s81mysql
(8 rows)

-- select json_quote (builtin function, not pushdown constraints, result)
--Testcase 3959:
SELECT * FROM (
SELECT id, json_quote(c3), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_quote | json_quote | json_quote | json_quote  
----+------------+------------+------------+-------------
  2 | "text"     | "null"     | "\"null\"" | "[1, 2, 3]"
(1 row)

-- select json_quote (builtin function, pushdown constraints, explain)
--Testcase 3960:
EXPLAIN VERBOSE
SELECT json_quote(c3), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM s8 WHERE id != 0;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7233.16 rows=6792 width=128)
   Output: (json_quote(c3)), (json_quote('null'::text)), (json_quote('"null"'::text)), (json_quote('[1, 2, 3]'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_quote(`c3`), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_quote(c3), public.json_quote('null'::text), public.json_quote('"null"'::text), public.json_quote('[1, 2, 3]'::text) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_quote (builtin function, pushdown constraints, result)
--Testcase 3961:
SELECT * FROM (
SELECT id, json_quote(c3), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | json_quote | json_quote | json_quote | json_quote  
----+------------+------------+------------+-------------
  1 | "is"       | "null"     | "\"null\"" | "[1, 2, 3]"
  2 | "text"     | "null"     | "\"null\"" | "[1, 2, 3]"
  3 | "scalar"   | "null"     | "\"null\"" | "[1, 2, 3]"
  4 | "scalar"   | "null"     | "\"null\"" | "[1, 2, 3]"
  5 | "scalar"   | "null"     | "\"null\"" | "[1, 2, 3]"
(5 rows)

-- select json_quote (builtin function, json_quote in constraints, explain)
--Testcase 3962:
EXPLAIN VERBOSE
SELECT json_quote(c3), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM s8 WHERE json_length(json_quote(c3)) != 0;
                                                                                                              QUERY PLAN                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..10646.17 rows=6792 width=128)
   Output: (json_quote(c3)), (json_quote('null'::text)), (json_quote('"null"'::text)), (json_quote('[1, 2, 3]'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_quote(`c3`), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM `test`.`s82` WHERE ((json_length(json_quote(`c3`)) <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_quote(c3), public.json_quote('null'::text), public.json_quote('"null"'::text), public.json_quote('[1, 2, 3]'::text) FROM public.s81mysql WHERE ((public.json_length(public.json_quote(c3)) <> 0))
(7 rows)

-- select json_quote (builtin function, json_quote in constraints, result)
--Testcase 3963:
SELECT * FROM (
SELECT id, json_quote(c3), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM s8 WHERE json_length(json_quote(c3)) != 0
) AS t ORDER BY 1;
 id | json_quote | json_quote | json_quote | json_quote  
----+------------+------------+------------+-------------
  0 | "This"     | "null"     | "\"null\"" | "[1, 2, 3]"
  1 | "is"       | "null"     | "\"null\"" | "[1, 2, 3]"
  2 | "text"     | "null"     | "\"null\"" | "[1, 2, 3]"
  3 | "scalar"   | "null"     | "\"null\"" | "[1, 2, 3]"
  4 | "scalar"   | "null"     | "\"null\"" | "[1, 2, 3]"
  5 | "scalar"   | "null"     | "\"null\"" | "[1, 2, 3]"
(6 rows)

-- select json_quote (builtin function, json_quote in constraints, explain)
--Testcase 3964:
EXPLAIN VERBOSE
SELECT json_quote(c3), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM s8 WHERE json_length(json_quote('[1, 2, 3]')) = 1;
                                                                                                                     QUERY PLAN                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..3753.01 rows=34 width=128)
   Output: (json_quote(c3)), (json_quote('null'::text)), (json_quote('"null"'::text)), (json_quote('[1, 2, 3]'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_quote(`c3`), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM `test`.`s82` WHERE ((json_length(json_quote('[1, 2, 3]')) = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_quote(c3), public.json_quote('null'::text), public.json_quote('"null"'::text), public.json_quote('[1, 2, 3]'::text) FROM public.s81mysql WHERE ((public.json_length(public.json_quote('[1, 2, 3]'::text)) = 1))
(7 rows)

-- select json_quote (builtin function, json_quote in constraints, result)
--Testcase 3965:
SELECT * FROM (
SELECT id, json_quote(c3), json_quote('null'), json_quote('"null"'), json_quote('[1, 2, 3]') FROM s8 WHERE json_length(json_quote('[1, 2, 3]')) = 1
) AS t ORDER BY 1;
 id | json_quote | json_quote | json_quote | json_quote  
----+------------+------------+------------+-------------
  0 | "This"     | "null"     | "\"null\"" | "[1, 2, 3]"
  1 | "is"       | "null"     | "\"null\"" | "[1, 2, 3]"
  2 | "text"     | "null"     | "\"null\"" | "[1, 2, 3]"
  3 | "scalar"   | "null"     | "\"null\"" | "[1, 2, 3]"
  4 | "scalar"   | "null"     | "\"null\"" | "[1, 2, 3]"
  5 | "scalar"   | "null"     | "\"null\"" | "[1, 2, 3]"
(6 rows)

-- select json_quote as nest function with agg (not pushdown, explain)
--Testcase 3966:
EXPLAIN VERBOSE
SELECT sum(id), json_quote('[1, 2, 3]') FROM s8;
                      QUERY PLAN                      
------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_quote('[1, 2, 3]'::text)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_quote as nest function with agg (not pushdown, result, error)
--Testcase 3967:
SELECT sum(id), json_quote('[1, 2, 3]') FROM s8;
ERROR:  stub json_quote(text) is called
CONTEXT:  PL/pgSQL function json_quote(text) line 3 at RAISE
-- select json_quote with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3968:
EXPLAIN VERBOSE
SELECT json_quote('null'), pi(), 4.1 FROM s8;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (json_quote('null'::text)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_quote('null'), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_quote('null'::text), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_quote with non pushdown func and explicit constant (result)
--Testcase 3969:
SELECT * FROM (
SELECT id, json_quote('null'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_quote |        pi         | ?column? 
----+------------+-------------------+----------
  0 | "null"     | 3.141592653589793 |      4.1
  1 | "null"     | 3.141592653589793 |      4.1
  2 | "null"     | 3.141592653589793 |      4.1
  3 | "null"     | 3.141592653589793 |      4.1
  4 | "null"     | 3.141592653589793 |      4.1
  5 | "null"     | 3.141592653589793 |      4.1
(6 rows)

-- select json_quote with order by index (result)
--Testcase 3970:
SELECT id,  json_length(json_quote(c3)) FROM s8 ORDER BY 2, 1;
 id | json_length 
----+-------------
  0 |           1
  1 |           1
  2 |           1
  3 |           1
  4 |           1
  5 |           1
(6 rows)

-- select json_quote with order by index (result)
--Testcase 3971:
SELECT id,  json_length(json_quote(c3)) FROM s8 ORDER BY 1, 2;
 id | json_length 
----+-------------
  0 |           1
  1 |           1
  2 |           1
  3 |           1
  4 |           1
  5 |           1
(6 rows)

-- select json_quote with group by (EXPLAIN)
--Testcase 3972:
EXPLAIN VERBOSE
SELECT count(id), json_length(json_quote(c3)) FROM s8 group by json_length(json_quote(c3));
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3973.91 rows=200 width=12)
   Output: count(id), (json_length(json_quote(c3)))
   Group Key: (json_length(json_quote(s8.c3)))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_quote(c3))), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_quote(`c3`)), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_quote(c3)), id FROM public.s81mysql
(10 rows)

-- select json_quote with group by (result)
--Testcase 3973:
SELECT * FROM (
SELECT count(id), json_length(json_quote(c3)) FROM s8 group by json_length(json_quote(c3))
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     6 |           1
(1 row)

-- select json_quote with group by index (result)
--Testcase 3974:
SELECT * FROM (
SELECT id,  json_length(json_quote(c3)) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           1
  1 |           1
  2 |           1
  3 |           1
  4 |           1
  5 |           1
(6 rows)

-- select json_quote with group by index (result)
--Testcase 3975:
SELECT * FROM (
SELECT id,  json_length(json_quote(c3)) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           1
  1 |           1
  2 |           1
  3 |           1
  4 |           1
  5 |           1
(6 rows)

-- select json_quote with group by having (EXPLAIN)
--Testcase 3976:
EXPLAIN VERBOSE
SELECT count(c2), json_length(json_quote(c3)) FROM s8 group by json_length(json_quote(c3)) HAVING count(c2) > 0;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3907.91 rows=67 width=12)
   Output: count(c2), (json_length(json_quote(c3)))
   Group Key: (json_length(json_quote(s8.c3)))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_quote(c3))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_quote(`c3`)), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_quote(c3)), c2 FROM public.s81mysql
(11 rows)

-- select json_quote with group by having (result)
--Testcase 3977:
SELECT * FROM (
SELECT count(c2), json_length(json_quote(c3)) FROM s8 group by json_length(json_quote(c3)) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     6 |           1
(1 row)

-- select json_quote with group by index having (result)
--Testcase 3978:
SELECT * FROM (
SELECT c2,  json_length(json_quote(c3)) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           1
  2 |           1
  3 |           1
  4 |           1
  5 |           1
(5 rows)

-- select json_quote with group by index having (result)
--Testcase 3979:
SELECT * FROM (
SELECT c2,  json_length(json_quote(c3)) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           1
  2 |           1
  3 |           1
  4 |           1
  5 |           1
(5 rows)

-- select json_quote and as
--Testcase 3980:
SELECT * FROM (
SELECT id, json_quote('null') as json_quote1 FROM s8
) AS t ORDER BY 1;
 id | json_quote1 
----+-------------
  0 | "null"
  1 | "null"
  2 | "null"
  3 | "null"
  4 | "null"
  5 | "null"
(6 rows)

-- select json_remove (builtin function, explain)
--Testcase 3981:
EXPLAIN VERBOSE
SELECT json_remove(c1, '$[1]'), json_remove(c1, '$[1]', '$[2]'),json_remove(json_build_array(c1, '1'), '$[1]', '$[2]'), json_remove('{ "a": 1, "b": [2, 3]}', '$.a'), json_remove('["a", ["b", "c"], "d"]', '$.a') FROM s8;
                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8974.35 rows=6826 width=160)
   Output: (json_remove(c1, VARIADIC '{$[1]}'::text[])), (json_remove(c1, VARIADIC '{$[1],$[2]}'::text[])), (json_remove(json_build_array(c1, '1'), VARIADIC '{$[1],$[2]}'::text[])), (json_remove('{ "a": 1, "b": [2, 3]}'::json, VARIADIC '{$.a}'::text[])), (json_remove('["a", ["b", "c"], "d"]'::json, VARIADIC '{$.a}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_remove(`c1`, '$[1]'), json_remove(`c1`, '$[1]', '$[2]'), json_remove(json_array(`c1`, '1'), '$[1]', '$[2]'), json_remove(CAST('{ "a": 1, "b": [2, 3]}' AS JSON), '$.a'), json_remove(CAST('["a", ["b", "c"], "d"]' AS JSON), '$.a') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_remove(c1, VARIADIC '{$[1]}'::text[]), public.json_remove(c1, VARIADIC '{$[1],$[2]}'::text[]), public.json_remove(json_build_array(c1, '1'), VARIADIC '{$[1],$[2]}'::text[]), public.json_remove('{ "a": 1, "b": [2, 3]}'::json, VARIADIC '{$.a}'::text[]), public.json_remove('["a", ["b", "c"], "d"]'::json, VARIADIC '{$.a}'::text[]) FROM public.s81mysql
(7 rows)

-- select json_remove (builtin function, result)
--Testcase 3982:
SELECT * FROM (
SELECT id, json_remove(c1, '$[1]'), json_remove(c1, '$[1]', '$[2]'), json_remove(json_build_array(c1, '1'), '$[1]', '$[2]'), json_remove('{ "a": 1, "b": [2, 3]}', '$.a'), json_remove('["a", ["b", "c"], "d"]', '$.a') FROM s8
) AS t ORDER BY 1;
 id |             json_remove             |           json_remove           |                         json_remove                         |  json_remove  |      json_remove       
----+-------------------------------------+---------------------------------+-------------------------------------------------------------+---------------+------------------------
  0 | [[1, 2], 5]                         | [[1, 2], 5]                     | [[[1, 2], [3, 4], 5]]                                       | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  1 | []                                  | []                              | [[]]                                                        | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  2 | {}                                  | {}                              | [{}]                                                        | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  3 | {"a": "10", "b": "15", "x": 25}     | {"a": "10", "b": "15", "x": 25} | [{"a": "10", "b": "15", "x": 25}]                           | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  4 | {"a": 1, "b": 2, "c": {"d": 4}}     | {"a": 1, "b": 2, "c": {"d": 4}} | [{"a": 1, "b": 2, "c": {"d": 4}}]                           | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  5 | ["abc", {"x": "abc"}, {"y": "bcd"}] | ["abc", {"x": "abc"}]           | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]] | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
(6 rows)

-- select json_remove (builtin function, not pushdown constraints, explain)
--Testcase 3983:
EXPLAIN VERBOSE
SELECT json_remove(c1, '$[1]'), json_remove(c1, '$[1]', '$[2]'), json_remove(json_build_array(c1, '1'), '$[1]', '$[2]'), json_remove('{ "a": 1, "b": [2, 3]}', '$.a'), json_remove('["a", ["b", "c"], "d"]', '$.a') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..433.31 rows=34 width=160)
   Output: (json_remove(c1, VARIADIC '{$[1]}'::text[])), (json_remove(c1, VARIADIC '{$[1],$[2]}'::text[])), (json_remove(json_build_array(c1, '1'), VARIADIC '{$[1],$[2]}'::text[])), (json_remove('{ "a": 1, "b": [2, 3]}'::json, VARIADIC '{$.a}'::text[])), (json_remove('["a", ["b", "c"], "d"]'::json, VARIADIC '{$.a}'::text[]))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_remove(`c1`, '$[1]'), json_remove(`c1`, '$[1]', '$[2]'), json_remove(json_array(`c1`, '1'), '$[1]', '$[2]'), json_remove(CAST('{ "a": 1, "b": [2, 3]}' AS JSON), '$.a'), json_remove(CAST('["a", ["b", "c"], "d"]' AS JSON), '$.a'), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_remove(c1, VARIADIC '{$[1]}'::text[]), public.json_remove(c1, VARIADIC '{$[1],$[2]}'::text[]), public.json_remove(json_build_array(c1, '1'), VARIADIC '{$[1],$[2]}'::text[]), public.json_remove('{ "a": 1, "b": [2, 3]}'::json, VARIADIC '{$.a}'::text[]), public.json_remove('["a", ["b", "c"], "d"]'::json, VARIADIC '{$.a}'::text[]), id FROM public.s81mysql
(8 rows)

-- select json_remove (builtin function, not pushdown constraints, result)
--Testcase 3984:
SELECT * FROM (
SELECT id, json_remove(c1, '$[1]'), json_remove(c1, '$[1]', '$[2]'), json_remove(json_build_array(c1, '1'), '$[1]', '$[2]'), json_remove('{ "a": 1, "b": [2, 3]}', '$.a'), json_remove('["a", ["b", "c"], "d"]', '$.a') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_remove | json_remove | json_remove |  json_remove  |      json_remove       
----+-------------+-------------+-------------+---------------+------------------------
  2 | {}          | {}          | [{}]        | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
(1 row)

-- select json_remove (builtin function, pushdown constraints, explain)
--Testcase 3985:
EXPLAIN VERBOSE
SELECT json_remove(c1, '$[1]'), json_remove(c1, '$[1]', '$[2]'), json_remove(json_build_array(c1, '1'), '$[1]', '$[2]'), json_remove('{ "a": 1, "b": [2, 3]}', '$.a'), json_remove('["a", ["b", "c"], "d"]', '$.a') FROM s8 WHERE id != 0;
                                                                                                                                                                                                     QUERY PLAN                                                                                                                                                                                                     
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8948.15 rows=6792 width=160)
   Output: (json_remove(c1, VARIADIC '{$[1]}'::text[])), (json_remove(c1, VARIADIC '{$[1],$[2]}'::text[])), (json_remove(json_build_array(c1, '1'), VARIADIC '{$[1],$[2]}'::text[])), (json_remove('{ "a": 1, "b": [2, 3]}'::json, VARIADIC '{$.a}'::text[])), (json_remove('["a", ["b", "c"], "d"]'::json, VARIADIC '{$.a}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_remove(`c1`, '$[1]'), json_remove(`c1`, '$[1]', '$[2]'), json_remove(json_array(`c1`, '1'), '$[1]', '$[2]'), json_remove(CAST('{ "a": 1, "b": [2, 3]}' AS JSON), '$.a'), json_remove(CAST('["a", ["b", "c"], "d"]' AS JSON), '$.a') FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_remove(c1, VARIADIC '{$[1]}'::text[]), public.json_remove(c1, VARIADIC '{$[1],$[2]}'::text[]), public.json_remove(json_build_array(c1, '1'), VARIADIC '{$[1],$[2]}'::text[]), public.json_remove('{ "a": 1, "b": [2, 3]}'::json, VARIADIC '{$.a}'::text[]), public.json_remove('["a", ["b", "c"], "d"]'::json, VARIADIC '{$.a}'::text[]) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_remove (builtin function, pushdown constraints, result)
--Testcase 3986:
SELECT * FROM (
SELECT id, json_remove(c1, '$[1]'), json_remove(c1, '$[1]', '$[2]'), json_remove(json_build_array(c1, '1'), '$[1]', '$[2]'), json_remove('{ "a": 1, "b": [2, 3]}', '$.a'), json_remove('["a", ["b", "c"], "d"]', '$.a') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id |             json_remove             |           json_remove           |                         json_remove                         |  json_remove  |      json_remove       
----+-------------------------------------+---------------------------------+-------------------------------------------------------------+---------------+------------------------
  1 | []                                  | []                              | [[]]                                                        | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  2 | {}                                  | {}                              | [{}]                                                        | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  3 | {"a": "10", "b": "15", "x": 25}     | {"a": "10", "b": "15", "x": 25} | [{"a": "10", "b": "15", "x": 25}]                           | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  4 | {"a": 1, "b": 2, "c": {"d": 4}}     | {"a": 1, "b": 2, "c": {"d": 4}} | [{"a": 1, "b": 2, "c": {"d": 4}}]                           | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  5 | ["abc", {"x": "abc"}, {"y": "bcd"}] | ["abc", {"x": "abc"}]           | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]] | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
(5 rows)

-- select json_remove (builtin function, json_remove in constraints, explain)
--Testcase 3987:
EXPLAIN VERBOSE
SELECT json_remove(c1, '$[1]'), json_remove(c1, '$[1]', '$[2]'), json_remove(json_build_array(c1, '1'), '$[1]', '$[2]'), json_remove('{ "a": 1, "b": [2, 3]}', '$.a'), json_remove('["a", ["b", "c"], "d"]', '$.a') FROM s8 WHERE json_length(json_remove(c1, '$[1]')) != 1;
                                                                                                                                                                                                                                      QUERY PLAN                                                                                                                                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..12361.15 rows=6792 width=160)
   Output: (json_remove(c1, VARIADIC '{$[1]}'::text[])), (json_remove(c1, VARIADIC '{$[1],$[2]}'::text[])), (json_remove(json_build_array(c1, '1'), VARIADIC '{$[1],$[2]}'::text[])), (json_remove('{ "a": 1, "b": [2, 3]}'::json, VARIADIC '{$.a}'::text[])), (json_remove('["a", ["b", "c"], "d"]'::json, VARIADIC '{$.a}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_remove(`c1`, '$[1]'), json_remove(`c1`, '$[1]', '$[2]'), json_remove(json_array(`c1`, '1'), '$[1]', '$[2]'), json_remove(CAST('{ "a": 1, "b": [2, 3]}' AS JSON), '$.a'), json_remove(CAST('["a", ["b", "c"], "d"]' AS JSON), '$.a') FROM `test`.`s82` WHERE ((json_length(json_remove(`c1`, '$[1]')) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_remove(c1, VARIADIC '{$[1]}'::text[]), public.json_remove(c1, VARIADIC '{$[1],$[2]}'::text[]), public.json_remove(json_build_array(c1, '1'), VARIADIC '{$[1],$[2]}'::text[]), public.json_remove('{ "a": 1, "b": [2, 3]}'::json, VARIADIC '{$.a}'::text[]), public.json_remove('["a", ["b", "c"], "d"]'::json, VARIADIC '{$.a}'::text[]) FROM public.s81mysql WHERE ((public.json_length(public.json_remove(c1, VARIADIC '{$[1]}'::text[])) <> 1))
(7 rows)

-- select json_remove (builtin function, json_remove in constraints, result)
--Testcase 3988:
SELECT * FROM (
SELECT id, json_remove(c1, '$[1]'), json_remove(c1, '$[1]', '$[2]'), json_remove(json_build_array(c1, '1'), '$[1]', '$[2]'), json_remove('{ "a": 1, "b": [2, 3]}', '$.a'), json_remove('["a", ["b", "c"], "d"]', '$.a') FROM s8 WHERE json_length(json_remove(c1, '$[1]')) != 1
) AS t ORDER BY 1;
 id |             json_remove             |           json_remove           |                         json_remove                         |  json_remove  |      json_remove       
----+-------------------------------------+---------------------------------+-------------------------------------------------------------+---------------+------------------------
  0 | [[1, 2], 5]                         | [[1, 2], 5]                     | [[[1, 2], [3, 4], 5]]                                       | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  1 | []                                  | []                              | [[]]                                                        | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  2 | {}                                  | {}                              | [{}]                                                        | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  3 | {"a": "10", "b": "15", "x": 25}     | {"a": "10", "b": "15", "x": 25} | [{"a": "10", "b": "15", "x": 25}]                           | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  4 | {"a": 1, "b": 2, "c": {"d": 4}}     | {"a": 1, "b": 2, "c": {"d": 4}} | [{"a": 1, "b": 2, "c": {"d": 4}}]                           | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  5 | ["abc", {"x": "abc"}, {"y": "bcd"}] | ["abc", {"x": "abc"}]           | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]] | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
(6 rows)

-- select json_remove (builtin function, json_remove in constraints, explain)
--Testcase 3989:
EXPLAIN VERBOSE
SELECT json_remove(c1, '$[1]'), json_remove(c1, '$[1]', '$[2]'), json_remove(json_build_array(c1, '1'), '$[1]', '$[2]'), json_remove('{ "a": 1, "b": [2, 3]}', '$.a'), json_remove('["a", ["b", "c"], "d"]', '$.a') FROM s8 WHERE json_length(json_remove('{ "a": 1, "b": [2, 3]}', '$.a')) = 1;
                                                                                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..3761.59 rows=34 width=160)
   Output: (json_remove(c1, VARIADIC '{$[1]}'::text[])), (json_remove(c1, VARIADIC '{$[1],$[2]}'::text[])), (json_remove(json_build_array(c1, '1'), VARIADIC '{$[1],$[2]}'::text[])), (json_remove('{ "a": 1, "b": [2, 3]}'::json, VARIADIC '{$.a}'::text[])), (json_remove('["a", ["b", "c"], "d"]'::json, VARIADIC '{$.a}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_remove(`c1`, '$[1]'), json_remove(`c1`, '$[1]', '$[2]'), json_remove(json_array(`c1`, '1'), '$[1]', '$[2]'), json_remove(CAST('{ "a": 1, "b": [2, 3]}' AS JSON), '$.a'), json_remove(CAST('["a", ["b", "c"], "d"]' AS JSON), '$.a') FROM `test`.`s82` WHERE ((json_length(json_remove(CAST('{ "a": 1, "b": [2, 3]}' AS JSON), '$.a')) = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_remove(c1, VARIADIC '{$[1]}'::text[]), public.json_remove(c1, VARIADIC '{$[1],$[2]}'::text[]), public.json_remove(json_build_array(c1, '1'), VARIADIC '{$[1],$[2]}'::text[]), public.json_remove('{ "a": 1, "b": [2, 3]}'::json, VARIADIC '{$.a}'::text[]), public.json_remove('["a", ["b", "c"], "d"]'::json, VARIADIC '{$.a}'::text[]) FROM public.s81mysql WHERE ((public.json_length(public.json_remove('{ "a": 1, "b": [2, 3]}'::json, VARIADIC '{$.a}'::text[])) = 1))
(7 rows)

-- select json_remove (builtin function, json_remove in constraints, result)
--Testcase 3990:
SELECT * FROM (
SELECT id, json_remove(c1, '$[1]'), json_remove(c1, '$[1]', '$[2]'), json_remove(json_build_array(c1, '1'), '$[1]', '$[2]'), json_remove('{ "a": 1, "b": [2, 3]}', '$.a'), json_remove('["a", ["b", "c"], "d"]', '$.a') FROM s8 WHERE json_length(json_remove('{ "a": 1, "b": [2, 3]}', '$.a')) = 1
) AS t ORDER BY 1;
 id |             json_remove             |           json_remove           |                         json_remove                         |  json_remove  |      json_remove       
----+-------------------------------------+---------------------------------+-------------------------------------------------------------+---------------+------------------------
  0 | [[1, 2], 5]                         | [[1, 2], 5]                     | [[[1, 2], [3, 4], 5]]                                       | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  1 | []                                  | []                              | [[]]                                                        | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  2 | {}                                  | {}                              | [{}]                                                        | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  3 | {"a": "10", "b": "15", "x": 25}     | {"a": "10", "b": "15", "x": 25} | [{"a": "10", "b": "15", "x": 25}]                           | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  4 | {"a": 1, "b": 2, "c": {"d": 4}}     | {"a": 1, "b": 2, "c": {"d": 4}} | [{"a": 1, "b": 2, "c": {"d": 4}}]                           | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
  5 | ["abc", {"x": "abc"}, {"y": "bcd"}] | ["abc", {"x": "abc"}]           | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]] | {"b": [2, 3]} | ["a", ["b", "c"], "d"]
(6 rows)

-- select json_remove as nest function with agg (not pushdown, explain)
--Testcase 3991:
EXPLAIN VERBOSE
SELECT sum(id), json_remove('{ "a": 1, "b": [2, 3]}', '$.a') FROM s8;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_remove('{ "a": 1, "b": [2, 3]}'::json, VARIADIC '{$.a}'::text[])
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_remove as nest function with agg (not pushdown, result, error)
--Testcase 3992:
SELECT sum(id), json_remove('{ "a": 1, "b": [2, 3]}', '$.a') FROM s8;
ERROR:  stub json_remove(json, variadic text[]) is called
CONTEXT:  PL/pgSQL function json_remove(json,text[]) line 3 at RAISE
-- select json_remove with non pushdown func and explicit constant (EXPLAIN)
--Testcase 3993:
EXPLAIN VERBOSE
SELECT json_remove(json_build_array(c1, '1'), '$[1]', '$[2]'), pi(), 4.1 FROM s8;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=72)
   Output: (json_remove(json_build_array(c1, '1'), VARIADIC '{$[1],$[2]}'::text[])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_remove(json_array(`c1`, '1'), '$[1]', '$[2]'), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_remove(json_build_array(c1, '1'), VARIADIC '{$[1],$[2]}'::text[]), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_remove with non pushdown func and explicit constant (result)
--Testcase 3994:
SELECT * FROM (
SELECT id, json_remove(json_build_array(c1, '1'), '$[1]', '$[2]'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id |                         json_remove                         |        pi         | ?column? 
----+-------------------------------------------------------------+-------------------+----------
  0 | [[[1, 2], [3, 4], 5]]                                       | 3.141592653589793 |      4.1
  1 | [[]]                                                        | 3.141592653589793 |      4.1
  2 | [{}]                                                        | 3.141592653589793 |      4.1
  3 | [{"a": "10", "b": "15", "x": 25}]                           | 3.141592653589793 |      4.1
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}]                           | 3.141592653589793 |      4.1
  5 | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]] | 3.141592653589793 |      4.1
(6 rows)

-- select json_remove with order by index (result)
--Testcase 3995:
SELECT id,  json_length(json_remove(c1, '$[1]')) FROM s8 ORDER BY 2, 1;
 id | json_length 
----+-------------
  1 |           0
  2 |           0
  0 |           2
  3 |           3
  4 |           3
  5 |           3
(6 rows)

-- select json_remove with order by index (result)
--Testcase 3996:
SELECT id,  json_length(json_remove(c1, '$[1]')) FROM s8 ORDER BY 1, 2;
 id | json_length 
----+-------------
  0 |           2
  1 |           0
  2 |           0
  3 |           3
  4 |           3
  5 |           3
(6 rows)

-- select json_remove with group by (EXPLAIN)
--Testcase 3997:
EXPLAIN VERBOSE
SELECT count(id), json_length(json_remove(c1, '$[1]')) FROM s8 group by json_length(json_remove(c1, '$[1]'));
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3973.91 rows=200 width=12)
   Output: count(id), (json_length(json_remove(c1, VARIADIC '{$[1]}'::text[])))
   Group Key: (json_length(json_remove(s8.c1, VARIADIC '{$[1]}'::text[])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_remove(c1, VARIADIC '{$[1]}'::text[]))), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_remove(`c1`, '$[1]')), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_remove(c1, VARIADIC '{$[1]}'::text[])), id FROM public.s81mysql
(10 rows)

-- select json_remove with group by (result)
--Testcase 3998:
SELECT * FROM (
SELECT count(id), json_length(json_remove(c1, '$[1]')) FROM s8 group by json_length(json_remove(c1, '$[1]'))
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           2
     2 |           0
     3 |           3
(3 rows)

-- select json_remove with group by index (result)
--Testcase 3999:
SELECT * FROM (
SELECT id,  json_length(json_remove(c1, '$[1]')) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           2
  1 |           0
  2 |           0
  3 |           3
  4 |           3
  5 |           3
(6 rows)

-- select json_remove with group by index (result)
--Testcase 4000:
SELECT * FROM (
SELECT id,  json_length(json_remove(c1, '$[1]')) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           2
  1 |           0
  2 |           0
  3 |           3
  4 |           3
  5 |           3
(6 rows)

-- select json_remove with group by having (EXPLAIN)
--Testcase 4001:
EXPLAIN VERBOSE
SELECT count(c2), json_length(json_remove(c1, '$[1]')) FROM s8 group by json_length(json_remove(c1, '$[1]')) HAVING count(c2) > 0;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3907.91 rows=67 width=12)
   Output: count(c2), (json_length(json_remove(c1, VARIADIC '{$[1]}'::text[])))
   Group Key: (json_length(json_remove(s8.c1, VARIADIC '{$[1]}'::text[])))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_remove(c1, VARIADIC '{$[1]}'::text[]))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_remove(`c1`, '$[1]')), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_remove(c1, VARIADIC '{$[1]}'::text[])), c2 FROM public.s81mysql
(11 rows)

-- select json_remove with group by having (result)
--Testcase 4002:
SELECT * FROM (
SELECT count(c2), json_length(json_remove(c1, '$[1]')) FROM s8 group by json_length(json_remove(c1, '$[1]')) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           2
     2 |           0
     3 |           3
(3 rows)

-- select json_remove with group by index having (result)
--Testcase 4003:
SELECT * FROM (
SELECT c2,  json_length(json_remove(c1, '$[1]')) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           2
  2 |           0
  3 |           0
  4 |           3
  5 |           3
(5 rows)

-- select json_remove with group by index having (result)
--Testcase 4004:
SELECT * FROM (
SELECT c2,  json_length(json_remove(c1, '$[1]')) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_length 
----+-------------
  1 |           2
  2 |           0
  3 |           0
  4 |           3
  5 |           3
(5 rows)

-- select json_remove and as
--Testcase 4005:
SELECT * FROM (
SELECT id, json_remove(json_build_array(c1, '1'), '$[1]', '$[2]') as json_remove1 FROM s8
) AS t ORDER BY 1;
 id |                        json_remove1                         
----+-------------------------------------------------------------
  0 | [[[1, 2], [3, 4], 5]]
  1 | [[]]
  2 | [{}]
  3 | [{"a": "10", "b": "15", "x": 25}]
  4 | [{"a": 1, "b": 2, "c": {"d": 4}}]
  5 | [["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]]
(6 rows)

-- select json_replace (stub function, explain)
--Testcase 4006:
EXPLAIN VERBOSE
SELECT json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_replace(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', pi()) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- select json_replace (stub function, result)
--Testcase 4007:
SELECT * FROM (
SELECT id, json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8
) AS t ORDER BY 1;
 id |   json_replace    
----+-------------------
  0 | 3.141592653589793
  1 | 3.141592653589793
  2 | 3.141592653589793
  3 | 3.141592653589793
  4 | 3.141592653589793
  5 | 3.141592653589793
(6 rows)

-- select json_replace (stub function, not pushdown constraints, explain)
--Testcase 4008:
EXPLAIN VERBOSE
SELECT json_replace(c1, '$.a, c2', '$.b, c3', '$.c, NULL', '$, TRUE', '$, pi()') FROM s8 WHERE to_hex(id) = '1';
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..399.23 rows=34 width=32)
   Output: (json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', NULL","''$'', TRUE","''$'', pi()"}'::path_value[]))
   Filter: (to_hex(s8.id) = '1'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_replace(`c1`, '$.a', c2, '$.b', c3, '$.c', NULL, '$', TRUE, '$', pi()), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', NULL","''$'', TRUE","''$'', pi()"}'::public.path_value[]), id FROM public.s81mysql
(8 rows)

-- select json_replace (stub function, not pushdown constraints, result)
--Testcase 4009:
SELECT * FROM (
SELECT id, json_replace(c1, '$.a, c2', '$.b, c3', '$.c, NULL', '$, TRUE', '$, pi()') FROM s8 WHERE to_hex(id) = '1'
) AS t ORDER BY 1;
 id |   json_replace    
----+-------------------
  1 | 3.141592653589793
(1 row)

-- select json_replace (stub function, pushdown constraints, explain)
--Testcase 4010:
EXPLAIN VERBOSE
SELECT json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, CAST("[true, false]" AS JSON)') FROM s8 WHERE id = 1;
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..314.50 rows=34 width=32)
   Output: (json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', CAST(\"[true, false]\" AS JSON)"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_replace(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', CAST("[true, false]" AS JSON)) FROM `test`.`s82` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_replace(c1, VARIADIC E'{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', CAST(\\"[true, false]\\" AS JSON)"}'::public.path_value[]) FROM public.s81mysql WHERE ((id = 1))
(7 rows)

-- select json_replace (stub function, pushdown constraints, result)
--Testcase 4011:
SELECT * FROM (
SELECT id, json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, CAST("[true, false]" AS JSON)') FROM s8 WHERE id = 1
) AS t ORDER BY 1;
 id | json_replace  
----+---------------
  1 | [true, false]
(1 row)

-- select json_replace (stub function, stub in constraints, explain)
--Testcase 4012:
EXPLAIN VERBOSE
SELECT json_replace(c1, '$.a, c2', '$.b, c3', '$.c, NULL', '$, TRUE', '$, "[true, false]"') FROM s8 WHERE log2(id) > 1;
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2643.41 rows=2276 width=32)
   Output: (json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', NULL","''$'', TRUE","''$'', ''[true, false]''"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_replace(`c1`, '$.a', c2, '$.b', c3, '$.c', NULL, '$', TRUE, '$', '[true, false]') FROM `test`.`s82` WHERE ((log2(`id`) > 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', NULL","''$'', TRUE","''$'', ''[true, false]''"}'::public.path_value[]) FROM public.s81mysql WHERE ((public.log2(id) > 1::double precision))
(7 rows)

-- select json_replace (stub function, stub in constraints, result)
--Testcase 4013:
SELECT * FROM (
SELECT id, json_replace(c1, '$.a, c2', '$.b, c3', '$.c, NULL', '$, TRUE', '$, "[true, false]"') FROM s8 WHERE log2(id) > 1
) AS t ORDER BY 1;
 id |  json_replace   
----+-----------------
  3 | "[true, false]"
  4 | "[true, false]"
  5 | "[true, false]"
(3 rows)

-- select json_replace (stub function, stub in constraints, explain)
--Testcase 4014:
EXPLAIN VERBOSE
SELECT json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8 WHERE json_depth(json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()')) > 0;
                                                                                                                                                                   QUERY PLAN                                                                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..4332.85 rows=2276 width=32)
   Output: (json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_replace(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', pi()) FROM `test`.`s82` WHERE ((json_depth(json_replace(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', pi())) > 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::public.path_value[]) FROM public.s81mysql WHERE ((public.json_depth(public.json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::public.path_value[])) > 0))
(7 rows)

-- select json_replace (stub function, stub in constraints, result)
--Testcase 4015:
SELECT * FROM (
SELECT id, json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8 WHERE json_depth(json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()')) > 0
) AS t ORDER BY 1;
 id |   json_replace    
----+-------------------
  0 | 3.141592653589793
  1 | 3.141592653589793
  2 | 3.141592653589793
  3 | 3.141592653589793
  4 | 3.141592653589793
  5 | 3.141592653589793
(6 rows)

-- json_replace with 1 arg explain
--Testcase 4016:
EXPLAIN VERBOSE
SELECT json_replace(c1, '$.a, c2') FROM s8;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_replace(c1, VARIADIC '{"''$.a'', c2"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_replace(`c1`, '$.a', c2) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_replace(c1, VARIADIC '{"''$.a'', c2"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_replace with 1 arg result
--Testcase 4017:
SELECT * FROM (
SELECT id, json_replace(c1, '$.a, c2') FROM s8
) AS t ORDER BY 1;
 id |                       json_replace                        
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {}
  3 | {"a": 4, "b": "15", "x": 25}
  4 | {"a": 5, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_replace with 2 args explain
--Testcase 4018:
EXPLAIN VERBOSE
SELECT json_replace(c1, '$.a, c2', '$.b, c3') FROM s8;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_replace(`c1`, '$.a', c2, '$.b', c3) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_replace with 2 args result
--Testcase 4019:
SELECT * FROM (
SELECT id, json_replace(c1, '$.a, c2', '$.b, c3') FROM s8
) AS t ORDER BY 1;
 id |                       json_replace                        
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {}
  3 | {"a": 4, "b": "scalar", "x": 25}
  4 | {"a": 5, "b": "scalar", "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_replace with 3 args explain
--Testcase 4020:
EXPLAIN VERBOSE
SELECT json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1') FROM s8;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_replace(`c1`, '$.a', c2, '$.b', c3, '$.c', 1) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_replace with 3 args result
--Testcase 4021:
SELECT * FROM (
SELECT id, json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1') FROM s8
) AS t ORDER BY 1;
 id |                       json_replace                        
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {}
  3 | {"a": 4, "b": "scalar", "x": 25}
  4 | {"a": 5, "b": "scalar", "c": 1}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_replace with 4 args explain
--Testcase 4022:
EXPLAIN VERBOSE
SELECT json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"') FROM s8;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_replace(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_replace with 4 args result
--Testcase 4023:
SELECT * FROM (
SELECT id, json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"') FROM s8
) AS t ORDER BY 1;
 id | json_replace 
----+--------------
  0 | "a"
  1 | "a"
  2 | "a"
  3 | "a"
  4 | "a"
  5 | "a"
(6 rows)

-- json_replace with 5 args explain
--Testcase 4024:
EXPLAIN VERBOSE
SELECT json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_replace(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', pi()) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_replace(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_replace with 5 args result
--Testcase 4025:
SELECT * FROM (
SELECT id, json_replace(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8
) AS t ORDER BY 1;
 id |   json_replace    
----+-------------------
  0 | 3.141592653589793
  1 | 3.141592653589793
  2 | 3.141592653589793
  3 | 3.141592653589793
  4 | 3.141592653589793
  5 | 3.141592653589793
(6 rows)

-- select json_replace as nest function with agg (not pushdown, explain)
--Testcase 4026:
EXPLAIN VERBOSE
SELECT sum(id),json_replace('["a", ["b", "c"], "d"]', '$, sum(id)') FROM s8;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_replace('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', sum(id)"}'::path_value[])
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_replace as nest function with agg (not pushdown, result, error)
--Testcase 4027:
SELECT sum(id),json_replace('["a", ["b", "c"], "d"]', '$, sum(id)') FROM s8;
ERROR:  stub json_replace(json, variadic path_value[]) is called
CONTEXT:  PL/pgSQL function json_replace(json,path_value[]) line 3 at RAISE
-- select json_replace as nest function with json_build_array (pushdown, explain)
--Testcase 4028:
EXPLAIN VERBOSE
SELECT json_replace(json_build_array('["a", ["b", "c"], "d"]', c1), '$, log2(id)') FROM s8;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=32)
   Output: (json_replace(json_build_array('["a", ["b", "c"], "d"]', c1), VARIADIC '{"''$'', log2(id)"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_replace(json_array('["a", ["b", "c"], "d"]', `c1`), '$', log2(id)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_replace(json_build_array('["a", ["b", "c"], "d"]', c1), VARIADIC '{"''$'', log2(id)"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- select json_replace as nest function with json_build_array (pushdown, result)
--Testcase 4029:
SELECT * FROM (
SELECT id, json_replace(json_build_array('["a", ["b", "c"], "d"]', c1), '$, log2(id)') FROM s8
) AS t ORDER BY 1;
 id |   json_replace    
----+-------------------
  0 | null
  1 | 0.0
  2 | 1.0
  3 | 1.584962500721156
  4 | 2.0
  5 | 2.321928094887362
(6 rows)

-- select json_replace with non pushdown func and explicit constant (explain)
--Testcase 4030:
EXPLAIN VERBOSE
SELECT json_replace(c1, '$.a, c2'), pi(), 4.1 FROM s8;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (json_replace(c1, VARIADIC '{"''$.a'', c2"}'::path_value[])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_replace(`c1`, '$.a', c2), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_replace(c1, VARIADIC '{"''$.a'', c2"}'::public.path_value[]), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_replace with non pushdown func and explicit constant (result)
--Testcase 4031:
SELECT * FROM (
SELECT id, json_replace(c1, '$.a, c2'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id |                       json_replace                        |        pi         | ?column? 
----+-----------------------------------------------------------+-------------------+----------
  0 | [[1, 2], [3, 4], 5]                                       | 3.141592653589793 |      4.1
  1 | []                                                        | 3.141592653589793 |      4.1
  2 | {}                                                        | 3.141592653589793 |      4.1
  3 | {"a": 4, "b": "15", "x": 25}                              | 3.141592653589793 |      4.1
  4 | {"a": 5, "b": 2, "c": {"d": 4}}                           | 3.141592653589793 |      4.1
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}] | 3.141592653589793 |      4.1
(6 rows)

-- select json_replace with order by (explain)
--Testcase 4032:
EXPLAIN VERBOSE
SELECT json_length(json_replace(c1, '$.a, c2')) FROM s8 ORDER BY 1;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=4)
   Output: (json_length(json_replace(c1, VARIADIC '{"''$.a'', c2"}'::path_value[])))
   Sort Key: (json_length(json_replace(s8.c1, VARIADIC '{"''$.a'', c2"}'::path_value[])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=4)
         Output: (json_length(json_replace(c1, VARIADIC '{"''$.a'', c2"}'::path_value[])))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT json_length(json_replace(`c1`, '$.a', c2)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.json_length(public.json_replace(c1, VARIADIC '{"''$.a'', c2"}'::public.path_value[])) FROM public.s81mysql
(12 rows)

-- select json_replace with order by (result)
--Testcase 4033:
SELECT json_length(json_replace(c1, '$.a, c2')) FROM s8 ORDER BY 1;
 json_length 
-------------
           0
           0
           3
           3
           3
           4
(6 rows)

-- select json_replace with group by (explain)
--Testcase 4034:
EXPLAIN VERBOSE
SELECT id, json_length(json_replace('["a", ["b", "c"], "d"]', '$, id')) FROM s8 GROUP BY 1 , 2;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..7353.17 rows=6826 width=8)
   Output: id, (json_length(json_replace('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', id"}'::path_value[])))
   Group Key: s8.id, (json_length(json_replace('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', id"}'::path_value[])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: id, (json_length(json_replace('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', id"}'::path_value[])))
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, json_length(json_replace(CAST('["a", ["b", "c"], "d"]' AS JSON), '$', id)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, public.json_length(public.json_replace('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', id"}'::public.path_value[])) FROM public.s81mysql
(10 rows)

-- select json_replace with group by (result)
--Testcase 4035:
SELECT * FROM (
SELECT id, json_length(json_replace('["a", ["b", "c"], "d"]', '$, id')) FROM s8 GROUP BY 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           1
  1 |           1
  2 |           1
  3 |           1
  4 |           1
  5 |           1
(6 rows)

-- select json_replace with group by having (explain)
--Testcase 4036:
EXPLAIN VERBOSE
SELECT json_depth(json_replace('["a", ["b", "c"], "d"]', '$, c2')) FROM s8 GROUP BY c2, 1 HAVING count(c2) > 1;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3888.97..5111.80 rows=2275 width=8)
   Output: (json_depth(json_replace('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', c2"}'::path_value[]))), c2
   Group Key: s8.c2, (json_depth(json_replace('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', c2"}'::path_value[])))
   Filter: (count(s8.c2) > 1)
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_depth(json_replace('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', c2"}'::path_value[]))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_depth(json_replace(CAST('["a", ["b", "c"], "d"]' AS JSON), '$', c2)), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_depth(public.json_replace('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', c2"}'::public.path_value[])), c2 FROM public.s81mysql
(11 rows)

-- select json_replace with group by having (result)
--Testcase 4037:
SELECT * FROM (
SELECT id, json_depth(json_replace('["a", ["b", "c"], "d"]', '$, c2')) FROM s8 GROUP BY c2, 1 HAVING count(c2) > 1
) AS t ORDER BY 1;
 id | json_depth 
----+------------
(0 rows)

-- select json_replace and as
--Testcase 4038:
SELECT * FROM (
SELECT id, json_replace(c1, '$.a, c2') AS json_replace1 FROM s8
) AS t ORDER BY 1;
 id |                       json_replace1                       
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {}
  3 | {"a": 4, "b": "15", "x": 25}
  4 | {"a": 5, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- select json_schema_valid (builtin function, explain)
--Testcase 4039:
EXPLAIN VERBOSE
SELECT json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), json_schema_valid(c1, json_quote('null')), json_schema_valid(c1, '{}'), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9;
                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s9  (cost=200.00..10663.78 rows=6826 width=20)
   Output: (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json)), (json_schema_valid(c1, json_quote('null'::text))), (json_schema_valid(c1, '{}'::json)), (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)), json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 9}' AS JSON)), json_schema_valid(`c1`, json_quote('null')), json_schema_valid(`c1`, CAST('{}' AS JSON)), json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 30}' AS JSON)) FROM `test`.`s92`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), public.json_schema_valid(c1, public.json_quote('null'::text)), public.json_schema_valid(c1, '{}'::json), public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM public.s91mysql
(7 rows)

-- select json_schema_valid (builtin function, result)
--Testcase 4040:
SELECT * FROM (
SELECT id, json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), json_schema_valid(c1, json_quote('null')), json_schema_valid(c1, '{}'), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9
) AS t ORDER BY 1;
 id | json_schema_valid | json_schema_valid | json_schema_valid | json_schema_valid | json_schema_valid 
----+-------------------+-------------------+-------------------+-------------------+-------------------
  0 |                 1 |                 1 |                 0 |                 0 |                 1
  1 |                 0 |                 0 |                 0 |                 1 |                 0
(2 rows)

-- select json_schema_valid (builtin function, not pushdown constraints, explain)
--Testcase 4041:
EXPLAIN VERBOSE
SELECT json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), json_schema_valid(c1, json_quote('null')), json_schema_valid(c1, '{}'), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE to_hex(id) = '1';
                                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s9  (cost=200.00..441.73 rows=34 width=20)
   Output: (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json)), (json_schema_valid(c1, json_quote('null'::text))), (json_schema_valid(c1, '{}'::json)), (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json))
   Filter: (to_hex(s9.id) = '1'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)), json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 9}' AS JSON)), json_schema_valid(`c1`, json_quote('null')), json_schema_valid(`c1`, CAST('{}' AS JSON)), json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 30}' AS JSON)), `id` FROM `test`.`s92`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), public.json_schema_valid(c1, public.json_quote('null'::text)), public.json_schema_valid(c1, '{}'::json), public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json), id FROM public.s91mysql
(8 rows)

-- select json_schema_valid (builtin function, not pushdown constraints, result)
--Testcase 4042:
SELECT * FROM (
SELECT id, json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), json_schema_valid(c1, json_quote('null')), json_schema_valid(c1, '{}'), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE to_hex(id) = '1'
) AS t ORDER BY 1;
 id | json_schema_valid | json_schema_valid | json_schema_valid | json_schema_valid | json_schema_valid 
----+-------------------+-------------------+-------------------+-------------------+-------------------
  1 |                 0 |                 0 |                 0 |                 1 |                 0
(1 row)

-- select json_schema_valid (builtin function, pushdown constraints, explain)
--Testcase 4043:
EXPLAIN VERBOSE
SELECT json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), json_schema_valid(c1, json_quote('null')), json_schema_valid(c1, '{}'), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE id != 0;
                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s9  (cost=200.00..10629.17 rows=6792 width=20)
   Output: (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json)), (json_schema_valid(c1, json_quote('null'::text))), (json_schema_valid(c1, '{}'::json)), (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)), json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 9}' AS JSON)), json_schema_valid(`c1`, json_quote('null')), json_schema_valid(`c1`, CAST('{}' AS JSON)), json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 30}' AS JSON)) FROM `test`.`s92` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), public.json_schema_valid(c1, public.json_quote('null'::text)), public.json_schema_valid(c1, '{}'::json), public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM public.s91mysql WHERE ((id <> 0))
(7 rows)

-- select json_schema_valid (builtin function, pushdown constraints, result)
--Testcase 4044:
SELECT * FROM (
SELECT id, json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), json_schema_valid(c1, json_quote('null')), json_schema_valid(c1, '{}'), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE id != 0
) AS t ORDER BY 1;
 id | json_schema_valid | json_schema_valid | json_schema_valid | json_schema_valid | json_schema_valid 
----+-------------------+-------------------+-------------------+-------------------+-------------------
  1 |                 0 |                 0 |                 0 |                 1 |                 0
(1 row)

-- select json_schema_valid (builtin function, json_schema_valid in constraints, explain)
--Testcase 4045:
EXPLAIN VERBOSE
SELECT json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), json_schema_valid(c1, json_quote('null')), json_schema_valid(c1, '{}'), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) != 0;
                                                                                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s9  (cost=200.00..12335.67 rows=6792 width=20)
   Output: (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json)), (json_schema_valid(c1, json_quote('null'::text))), (json_schema_valid(c1, '{}'::json)), (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)), json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 9}' AS JSON)), json_schema_valid(`c1`, json_quote('null')), json_schema_valid(`c1`, CAST('{}' AS JSON)), json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 30}' AS JSON)) FROM `test`.`s92` WHERE ((json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)) <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), public.json_schema_valid(c1, public.json_quote('null'::text)), public.json_schema_valid(c1, '{}'::json), public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM public.s91mysql WHERE ((public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) <> 0))
(7 rows)

-- select json_schema_valid (builtin function, json_schema_valid in constraints, result)
--Testcase 4046:
SELECT * FROM (
SELECT id, json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), json_schema_valid(c1, json_quote('null')), json_schema_valid(c1, '{}'), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) != 0
) AS t ORDER BY 1;
 id | json_schema_valid | json_schema_valid | json_schema_valid | json_schema_valid | json_schema_valid 
----+-------------------+-------------------+-------------------+-------------------+-------------------
  0 |                 1 |                 1 |                 0 |                 0 |                 1
(1 row)

-- select json_schema_valid (builtin function, json_schema_valid in constraints, explain)
--Testcase 4047:
EXPLAIN VERBOSE
SELECT json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), json_schema_valid(c1, json_quote('null')), json_schema_valid(c1, '{}'), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) = 1;
                                                                                                                                                                                                                                             QUERY PLAN                                                                                                                                                                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s9  (cost=200.00..2063.51 rows=34 width=20)
   Output: (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json)), (json_schema_valid(c1, json_quote('null'::text))), (json_schema_valid(c1, '{}'::json)), (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)), json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 9}' AS JSON)), json_schema_valid(`c1`, json_quote('null')), json_schema_valid(`c1`, CAST('{}' AS JSON)), json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 30}' AS JSON)) FROM `test`.`s92` WHERE ((json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 30}' AS JSON)) = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), public.json_schema_valid(c1, public.json_quote('null'::text)), public.json_schema_valid(c1, '{}'::json), public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM public.s91mysql WHERE ((public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) = 1))
(7 rows)

-- select json_schema_valid (builtin function, json_schema_valid in constraints, result)
--Testcase 4048:
SELECT * FROM (
SELECT id, json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 9}'::json), json_schema_valid(c1, json_quote('null')), json_schema_valid(c1, '{}'), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 30}'::json) = 1
) AS t ORDER BY 1;
 id | json_schema_valid | json_schema_valid | json_schema_valid | json_schema_valid | json_schema_valid 
----+-------------------+-------------------+-------------------+-------------------+-------------------
  0 |                 1 |                 1 |                 0 |                 0 |                 1
(1 row)

-- select json_schema_valid as nest function with agg (not pushdown, explain)
--Testcase 4049:
EXPLAIN VERBOSE
SELECT sum(id),json_schema_valid(json_build_object('latitude', sum(id), 'longitude', avg(id)), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (sum(id)), json_schema_valid(json_build_object('latitude', (sum(id)), 'longitude', (avg(id))), '{"latitude": 63.444697,"longitude": 30}'::json)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s9__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`), count(`id`) FROM `test`.`s92`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s9)
     Remote SQL: SELECT sum(id), count(id) FROM public.s91mysql
(11 rows)

-- select json_schema_valid as nest function with agg (not pushdown, result, error)
--Testcase 4050:
SELECT sum(id),json_schema_valid(json_build_object('latitude', sum(id), 'longitude', avg(id)), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9;
ERROR:  stub json_schema_valid(json, json) is called
CONTEXT:  PL/pgSQL function json_schema_valid(json,json) line 3 at RAISE
-- select json_schema_valid with non pushdown func and explicit constant (EXPLAIN)
--Testcase 4051:
EXPLAIN VERBOSE
SELECT json_schema_valid(c1, json_quote('null')), pi(), 4.1 FROM s9;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s9  (cost=200.00..3837.78 rows=6826 width=44)
   Output: (json_schema_valid(c1, json_quote('null'::text))), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_schema_valid(`c1`, json_quote('null')), 3.141592653589793, 4.1 FROM `test`.`s92`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_schema_valid(c1, public.json_quote('null'::text)), 3.141592653589793::double precision, 4.1 FROM public.s91mysql
(7 rows)

-- select json_schema_valid with non pushdown func and explicit constant (result)
--Testcase 4052:
SELECT * FROM (
SELECT id, json_schema_valid(c1, json_quote('null')), pi(), 4.1 FROM s9
) AS t ORDER BY 1;
 id | json_schema_valid |        pi         | ?column? 
----+-------------------+-------------------+----------
  0 |                 0 | 3.141592653589793 |      4.1
  1 |                 0 | 3.141592653589793 |      4.1
(2 rows)

-- select json_schema_valid with order by index (result)
--Testcase 4053:
SELECT id,  json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) FROM s9 order by 2, 1;
 id | json_schema_valid 
----+-------------------
  1 |                 0
  0 |                 1
(2 rows)

-- select json_schema_valid with order by index (result)
--Testcase 4054:
SELECT id,  json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) FROM s9 order by 1, 2;
 id | json_schema_valid 
----+-------------------
  0 |                 1
  1 |                 0
(2 rows)

-- select json_schema_valid with group by (EXPLAIN)
--Testcase 4055:
EXPLAIN VERBOSE
SELECT count(id), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) FROM s9 group by json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json);
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
   Output: count(id), (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json))
   Group Key: (json_schema_valid(s9.c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json))
   ->  Foreign Scan on public.s9  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)), `id` FROM `test`.`s92`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), id FROM public.s91mysql
(10 rows)

-- select json_schema_valid with group by (result)
--Testcase 4056:
SELECT * FROM (
SELECT count(id), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) FROM s9 group by json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)
) AS t ORDER BY 1;
 count | json_schema_valid 
-------+-------------------
     1 |                 0
     1 |                 1
(2 rows)

-- select json_schema_valid with group by index (result)
--Testcase 4057:
SELECT * FROM (
SELECT id,  json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) FROM s9 group by 2, 1
) AS t ORDER BY 1;
 id | json_schema_valid 
----+-------------------
  0 |                 1
  1 |                 0
(2 rows)

-- select json_schema_valid with group by index (result)
--Testcase 4058:
SELECT * FROM (
SELECT id,  json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) FROM s9 group by 1, 2
) AS t ORDER BY 1;
 id | json_schema_valid 
----+-------------------
  0 |                 1
  1 |                 0
(2 rows)

-- select json_schema_valid with group by having (EXPLAIN)
--Testcase 4059:
EXPLAIN VERBOSE
SELECT count(id), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) FROM s9 group by json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) HAVING count(id) > 0;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=12)
   Output: count(id), (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json))
   Group Key: (json_schema_valid(s9.c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json))
   Filter: (count(s9.id) > 0)
   ->  Foreign Scan on public.s9  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_schema_valid(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)), `id` FROM `test`.`s92`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), id FROM public.s91mysql
(11 rows)

-- select json_schema_valid with group by having (result)
--Testcase 4060:
SELECT * FROM (
SELECT count(id), json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) FROM s9 group by json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) HAVING count(id) > 0
) AS t ORDER BY 1;
 count | json_schema_valid 
-------+-------------------
     1 |                 0
     1 |                 1
(2 rows)

-- select json_schema_valid with group by index having (result)
--Testcase 4061:
SELECT * FROM (
SELECT id,  json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) FROM s9 group by 2, 1 HAVING count(id) > 0
) AS t ORDER BY 1;
 id | json_schema_valid 
----+-------------------
  0 |                 1
  1 |                 0
(2 rows)

-- select json_schema_valid with group by index having (result)
--Testcase 4062:
SELECT * FROM (
SELECT id,  json_schema_valid(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json) FROM s9 group by 1, 2 HAVING count(id) > 0
) AS t ORDER BY 1;
 id | json_schema_valid 
----+-------------------
  0 |                 1
  1 |                 0
(2 rows)

-- select json_schema_valid and as
--Testcase 4063:
SELECT * FROM (
SELECT id, json_schema_valid(c1, json_quote('null')) as json_schema_valid1 FROM s9
) AS t ORDER BY 1;
 id | json_schema_valid1 
----+--------------------
  0 |                  0
  1 |                  0
(2 rows)

-- select json_schema_validation_report (builtin function, explain)
--Testcase 4064:
EXPLAIN VERBOSE
SELECT json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'), json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'), json_schema_validation_report(c1, json_quote('null')), json_schema_validation_report(c1, '{}'), json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9;


 Foreign Scan on public.s9  (cost=200.00..10680.85 rows=6826 width=160)
   Output: (json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), (json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'::json)), (json_schema_validation_report(c1, json_quote('null'::text))), (json_schema_validation_report(c1, '{}'::json)), (json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)), json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.5}' AS JSON)), json_schema_validation_report(`c1`, json_quote('null')), json_schema_validation_report(`c1`, CAST('{}' AS JSON)), json_schema_validation_report(json_object('latitude', 63, 'longitude', 30), CAST('{"latitude": 63.444697,"longitude": 30}' AS JSON)) FROM `test`.`s92`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'::json), public.json_schema_validation_report(c1, public.json_quote('null'::text)), public.json_schema_validation_report(c1, '{}'::json), public.json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM public.s91mysql
(7 rows)

-- select json_schema_validation_report (builtin function, result)
--Testcase 4065:
SELECT * FROM (
SELECT id, json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'), json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'), json_schema_validation_report(c1, json_quote('null')), json_schema_validation_report(c1, '{}'), json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9
) AS t ORDER BY 1;
 id |                                                                                                                     json_schema_validation_report                                                                                                                     |                                                                                                                     json_schema_validation_report                                                                                                                     |                                                                                     json_schema_validation_report                                                                                     |                                                                                         json_schema_validation_report                                                                                         | json_schema_validation_report 

  0 | {"valid": true}                                                                                                                                                                                                                                                       | {"valid": true}                                                                                                                                                                                                                                                       | {"valid": false, "reason": "The JSON document location '#' failed requirement 'type' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "type"} | {"valid": false, "reason": "The JSON document location '#' failed requirement 'required' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "required"} | {"valid": true}
  1 | {"valid": false, "reason": "The JSON document location '#/latitude' failed requirement 'maximum' at JSON Schema location '#/properties/latitude'", "schema-location": "#/properties/latitude", "document-location": "#/latitude", "schema-failed-keyword": "maximum"} | {"valid": false, "reason": "The JSON document location '#/latitude' failed requirement 'maximum' at JSON Schema location '#/properties/latitude'", "schema-location": "#/properties/latitude", "document-location": "#/latitude", "schema-failed-keyword": "maximum"} | {"valid": false, "reason": "The JSON document location '#' failed requirement 'type' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "type"} | {"valid": true}                                                                                                                                                                                               | {"valid": true}
(2 rows)

-- select json_schema_validation_report (builtin function, not pushdown constraints, explain)
--Testcase 4066:
EXPLAIN VERBOSE
SELECT json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'), json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'), json_schema_validation_report(c1, json_quote('null')), json_schema_validation_report(c1, '{}'), json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE to_hex(id) = '1';


 Foreign Scan on public.s9  (cost=200.00..441.81 rows=34 width=160)
   Output: (json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), (json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'::json)), (json_schema_validation_report(c1, json_quote('null'::text))), (json_schema_validation_report(c1, '{}'::json)), (json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json))
   Filter: (to_hex(s9.id) = '1'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)), json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.5}' AS JSON)), json_schema_validation_report(`c1`, json_quote('null')), json_schema_validation_report(`c1`, CAST('{}' AS JSON)), json_schema_validation_report(json_object('latitude', 63, 'longitude', 30), CAST('{"latitude": 63.444697,"longitude": 30}' AS JSON)), `id` FROM `test`.`s92`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'::json), public.json_schema_validation_report(c1, public.json_quote('null'::text)), public.json_schema_validation_report(c1, '{}'::json), public.json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json), id FROM public.s91mysql
(8 rows)

-- select json_schema_validation_report (builtin function, not pushdown constraints, result)
--Testcase 4067:
SELECT * FROM (
SELECT id, json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'), json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'), json_schema_validation_report(c1, json_quote('null')), json_schema_validation_report(c1, '{}'), json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE to_hex(id) = '1'
) AS t ORDER BY 1;
 id |                                                                                                                     json_schema_validation_report                                                                                                                     |                                                                                                                     json_schema_validation_report                                                                                                                     |                                                                                     json_schema_validation_report                                                                                     | json_schema_validation_report | json_schema_validation_report 

  1 | {"valid": false, "reason": "The JSON document location '#/latitude' failed requirement 'maximum' at JSON Schema location '#/properties/latitude'", "schema-location": "#/properties/latitude", "document-location": "#/latitude", "schema-failed-keyword": "maximum"} | {"valid": false, "reason": "The JSON document location '#/latitude' failed requirement 'maximum' at JSON Schema location '#/properties/latitude'", "schema-location": "#/properties/latitude", "document-location": "#/latitude", "schema-failed-keyword": "maximum"} | {"valid": false, "reason": "The JSON document location '#' failed requirement 'type' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "type"} | {"valid": true}               | {"valid": true}
(1 row)

-- select json_schema_validation_report (builtin function, pushdown constraints, explain)
--Testcase 4068:
EXPLAIN VERBOSE
SELECT json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'), json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'), json_schema_validation_report(c1, json_quote('null')), json_schema_validation_report(c1, '{}'), json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE id != 0;
                                                                                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                                                                                                

 Foreign Scan on public.s9  (cost=200.00..10646.15 rows=6792 width=160)
   Output: (json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), (json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'::json)), (json_schema_validation_report(c1, json_quote('null'::text))), (json_schema_validation_report(c1, '{}'::json)), (json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)), json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.5}' AS JSON)), json_schema_validation_report(`c1`, json_quote('null')), json_schema_validation_report(`c1`, CAST('{}' AS JSON)), json_schema_validation_report(json_object('latitude', 63, 'longitude', 30), CAST('{"latitude": 63.444697,"longitude": 30}' AS JSON)) FROM `test`.`s92` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'::json), public.json_schema_validation_report(c1, public.json_quote('null'::text)), public.json_schema_validation_report(c1, '{}'::json), public.json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM public.s91mysql WHERE ((id <> 0))
(7 rows)

-- select json_schema_validation_report (builtin function, pushdown constraints, result)
--Testcase 4069:
SELECT * FROM (
SELECT id, json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'), json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'), json_schema_validation_report(c1, json_quote('null')), json_schema_validation_report(c1, '{}'), json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE id != 0
) AS t ORDER BY 1;
 id |                                                                                                                     json_schema_validation_report                                                                                                                     |                                                                                                                     json_schema_validation_report                                                                                                                     |                                                                                     json_schema_validation_report                                                                                     | json_schema_validation_report | json_schema_validation_report 

  1 | {"valid": false, "reason": "The JSON document location '#/latitude' failed requirement 'maximum' at JSON Schema location '#/properties/latitude'", "schema-location": "#/properties/latitude", "document-location": "#/latitude", "schema-failed-keyword": "maximum"} | {"valid": false, "reason": "The JSON document location '#/latitude' failed requirement 'maximum' at JSON Schema location '#/properties/latitude'", "schema-location": "#/properties/latitude", "document-location": "#/latitude", "schema-failed-keyword": "maximum"} | {"valid": false, "reason": "The JSON document location '#' failed requirement 'type' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "type"} | {"valid": true}               | {"valid": true}
(1 row)

-- select json_schema_validation_report (builtin function, json_schema_validation_report in constraints, explain)
--Testcase 4070:
EXPLAIN VERBOSE
SELECT json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'), json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'), json_schema_validation_report(c1, json_quote('null')), json_schema_validation_report(c1, '{}'), json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) != 0;


 Foreign Scan on public.s9  (cost=200.00..14059.15 rows=6792 width=160)
   Output: (json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), (json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'::json)), (json_schema_validation_report(c1, json_quote('null'::text))), (json_schema_validation_report(c1, '{}'::json)), (json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)), json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.5}' AS JSON)), json_schema_validation_report(`c1`, json_quote('null')), json_schema_validation_report(`c1`, CAST('{}' AS JSON)), json_schema_validation_report(json_object('latitude', 63, 'longitude', 30), CAST('{"latitude": 63.444697,"longitude": 30}' AS JSON)) FROM `test`.`s92` WHERE ((json_length(json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON))) <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'::json), public.json_schema_validation_report(c1, public.json_quote('null'::text)), public.json_schema_validation_report(c1, '{}'::json), public.json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM public.s91mysql WHERE ((public.json_length(public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)) <> 0))
(7 rows)

-- select json_schema_validation_report (builtin function, json_schema_validation_report in constraints, result)
--Testcase 4071:
SELECT * FROM (
SELECT id, json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'), json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'), json_schema_validation_report(c1, json_quote('null')), json_schema_validation_report(c1, '{}'), json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) != 0
) AS t ORDER BY 1;
 id |                                                                                                                     json_schema_validation_report                                                                                                                     |                                                                                                                     json_schema_validation_report                                                                                                                     |                                                                                     json_schema_validation_report                                                                                     |                                                                                         json_schema_validation_report                                                                                         | json_schema_validation_report 

  0 | {"valid": true}                                                                                                                                                                                                                                                       | {"valid": true}                                                                                                                                                                                                                                                       | {"valid": false, "reason": "The JSON document location '#' failed requirement 'type' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "type"} | {"valid": false, "reason": "The JSON document location '#' failed requirement 'required' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "required"} | {"valid": true}
  1 | {"valid": false, "reason": "The JSON document location '#/latitude' failed requirement 'maximum' at JSON Schema location '#/properties/latitude'", "schema-location": "#/properties/latitude", "document-location": "#/latitude", "schema-failed-keyword": "maximum"} | {"valid": false, "reason": "The JSON document location '#/latitude' failed requirement 'maximum' at JSON Schema location '#/properties/latitude'", "schema-location": "#/properties/latitude", "document-location": "#/latitude", "schema-failed-keyword": "maximum"} | {"valid": false, "reason": "The JSON document location '#' failed requirement 'type' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "type"} | {"valid": true}                                                                                                                                                                                               | {"valid": true}
(2 rows)

-- select json_schema_validation_report (builtin function, json_schema_validation_report in constraints, explain)
--Testcase 4072:
EXPLAIN VERBOSE
SELECT json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'), json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'), json_schema_validation_report(c1, json_quote('null')), json_schema_validation_report(c1, '{}'), json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE json_length(json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json)) = 1;


 Foreign Scan on public.s9  (cost=200.00..3787.15 rows=34 width=160)
   Output: (json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), (json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'::json)), (json_schema_validation_report(c1, json_quote('null'::text))), (json_schema_validation_report(c1, '{}'::json)), (json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON)), json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.5}' AS JSON)), json_schema_validation_report(`c1`, json_quote('null')), json_schema_validation_report(`c1`, CAST('{}' AS JSON)), json_schema_validation_report(json_object('latitude', 63, 'longitude', 30), CAST('{"latitude": 63.444697,"longitude": 30}' AS JSON)) FROM `test`.`s92` WHERE ((json_length(json_schema_validation_report(json_object('latitude', 63, 'longitude', 30), CAST('{"latitude": 63.444697,"longitude": 30}' AS JSON))) = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json), public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'::json), public.json_schema_validation_report(c1, public.json_quote('null'::text)), public.json_schema_validation_report(c1, '{}'::json), public.json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM public.s91mysql WHERE ((public.json_length(public.json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json)) = 1))
(7 rows)

-- select json_schema_validation_report (builtin function, json_schema_validation_report in constraints, result)
--Testcase 4073:
SELECT * FROM (
SELECT id, json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'), json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.5}'), json_schema_validation_report(c1, json_quote('null')), json_schema_validation_report(c1, '{}'), json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9 WHERE json_length(json_schema_validation_report(json_build_object('latitude', 63, 'longitude', 30), '{"latitude": 63.444697,"longitude": 30}'::json)) = 1
) AS t ORDER BY 1;
 id |                                                                                                                     json_schema_validation_report                                                                                                                     |                                                                                                                     json_schema_validation_report                                                                                                                     |                                                                                     json_schema_validation_report                                                                                     |                                                                                         json_schema_validation_report                                                                                         | json_schema_validation_report 
----+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------
  0 | {"valid": true}                                                                                                                                                                                                                                                       | {"valid": true}                                                                                                                                                                                                                                                       | {"valid": false, "reason": "The JSON document location '#' failed requirement 'type' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "type"} | {"valid": false, "reason": "The JSON document location '#' failed requirement 'required' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "required"} | {"valid": true}
  1 | {"valid": false, "reason": "The JSON document location '#/latitude' failed requirement 'maximum' at JSON Schema location '#/properties/latitude'", "schema-location": "#/properties/latitude", "document-location": "#/latitude", "schema-failed-keyword": "maximum"} | {"valid": false, "reason": "The JSON document location '#/latitude' failed requirement 'maximum' at JSON Schema location '#/properties/latitude'", "schema-location": "#/properties/latitude", "document-location": "#/latitude", "schema-failed-keyword": "maximum"} | {"valid": false, "reason": "The JSON document location '#' failed requirement 'type' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "type"} | {"valid": true}                                                                                                                                                                                               | {"valid": true}
(2 rows)

-- select json_schema_validation_report as nest function with agg (not pushdown, explain)
--Testcase 4074:
EXPLAIN VERBOSE
SELECT sum(id),json_schema_validation_report(json_build_object('latitude', 63, 'longitude', sum(id)), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_schema_validation_report(json_build_object('latitude', 63, 'longitude', (sum(id))), '{"latitude": 63.444697,"longitude": 30}'::json)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s9__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s92`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s9)
     Remote SQL: SELECT sum(id) FROM public.s91mysql
(11 rows)

-- select json_schema_validation_report as nest function with agg (not pushdown, result, error)
--Testcase 4075:
SELECT sum(id),json_schema_validation_report(json_build_object('latitude', 63, 'longitude', sum(id)), '{"latitude": 63.444697,"longitude": 30}'::json) FROM s9;
ERROR:  stub json_schema_validation_report(json, json) is called
CONTEXT:  PL/pgSQL function json_schema_validation_report(json,json) line 3 at RAISE
-- select json_schema_validation_report with non pushdown func and explicit constant (EXPLAIN)
--Testcase 4076:
EXPLAIN VERBOSE
SELECT json_schema_validation_report(c1, json_quote('null')), pi(), 4.1 FROM s9;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s9  (cost=200.00..3837.78 rows=6826 width=72)
   Output: (json_schema_validation_report(c1, json_quote('null'::text))), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_schema_validation_report(`c1`, json_quote('null')), 3.141592653589793, 4.1 FROM `test`.`s92`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_schema_validation_report(c1, public.json_quote('null'::text)), 3.141592653589793::double precision, 4.1 FROM public.s91mysql
(7 rows)

-- select json_schema_validation_report with non pushdown func and explicit constant (result)
--Testcase 4077:
SELECT * FROM (
SELECT id, json_schema_validation_report(c1, json_quote('null')), pi(), 4.1 FROM s9
) AS t ORDER BY 1;
 id |                                                                                     json_schema_validation_report                                                                                     |        pi         | ?column? 
----+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------+----------
  0 | {"valid": false, "reason": "The JSON document location '#' failed requirement 'type' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "type"} | 3.141592653589793 |      4.1
  1 | {"valid": false, "reason": "The JSON document location '#' failed requirement 'type' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "type"} | 3.141592653589793 |      4.1
(2 rows)

-- select json_schema_validation_report with order by index (result)
--Testcase 4078:
SELECT id,  json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) FROM s9 order by 2, 1;
 id | json_length 
----+-------------
  0 |           1
  1 |           5
(2 rows)

-- select json_schema_validation_report with order by index (result)
--Testcase 4079:
SELECT id,  json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) FROM s9 order by 1, 2;
 id | json_length 
----+-------------
  0 |           1
  1 |           5
(2 rows)

-- select json_schema_validation_report with group by (EXPLAIN)
--Testcase 4080:
EXPLAIN VERBOSE
SELECT count(id), json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) FROM s9 group by json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'));
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3973.91 rows=200 width=12)
   Output: count(id), (json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)))
   Group Key: (json_length(json_schema_validation_report(s9.c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)))
   ->  Foreign Scan on public.s9  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json))), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON))), `id` FROM `test`.`s92`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), id FROM public.s91mysql
(10 rows)

-- select json_schema_validation_report with group by (result)
--Testcase 4081:
SELECT * FROM (
SELECT count(id), json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) FROM s9 group by json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'))
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           5
     1 |           1
(2 rows)

-- select json_schema_validation_report with group by index (result)
--Testcase 4082:
SELECT * FROM (
SELECT id,  json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) FROM s9 group by 2, 1
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           1
  1 |           5
(2 rows)

-- select json_schema_validation_report with group by index (result)
--Testcase 4083:
SELECT * FROM (
SELECT id,  json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) FROM s9 group by 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           1
  1 |           5
(2 rows)

-- select json_schema_validation_report with group by having (EXPLAIN)
--Testcase 4084:
EXPLAIN VERBOSE
SELECT count(id), json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) FROM s9 group by json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) HAVING count(id) > 0;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..3907.91 rows=67 width=12)
   Output: count(id), (json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)))
   Group Key: (json_length(json_schema_validation_report(s9.c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)))
   Filter: (count(s9.id) > 0)
   ->  Foreign Scan on public.s9  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json))), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_length(json_schema_validation_report(`c1`, CAST('{"latitude": 63.444697,"longitude": 10.445118}' AS JSON))), `id` FROM `test`.`s92`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_length(public.json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}'::json)), id FROM public.s91mysql
(11 rows)

-- select json_schema_validation_report with group by having (result)
--Testcase 4085:
SELECT * FROM (
SELECT count(id), json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) FROM s9 group by json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) HAVING count(id) > 0
) AS t ORDER BY 1;
 count | json_length 
-------+-------------
     1 |           5
     1 |           1
(2 rows)

-- select json_schema_validation_report with group by index having (result)
--Testcase 4086:
SELECT * FROM (
SELECT id,  json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) FROM s9 group by 2, 1 HAVING count(id) > 0
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           1
  1 |           5
(2 rows)

-- select json_schema_validation_report with group by index having (result)
--Testcase 4087:
SELECT * FROM (
SELECT id,  json_length(json_schema_validation_report(c1, '{"latitude": 63.444697,"longitude": 10.445118}')) FROM s9 group by 1, 2 HAVING count(id) > 0
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           1
  1 |           5
(2 rows)

-- select json_schema_validation_report and as
--Testcase 4088:
SELECT * FROM (
SELECT id, json_schema_validation_report(c1, json_quote('null')) as json_schema_validation_report1 FROM s9
) AS t ORDER BY 1;
 id |                                                                                    json_schema_validation_report1                                                                                     
----+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  0 | {"valid": false, "reason": "The JSON document location '#' failed requirement 'type' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "type"}
  1 | {"valid": false, "reason": "The JSON document location '#' failed requirement 'type' at JSON Schema location '#'", "schema-location": "#", "document-location": "#", "schema-failed-keyword": "type"}
(2 rows)

-- select json_search (builtin function, explain)
--Testcase 4089:
EXPLAIN VERBOSE
SELECT json_search(c1, 'one', 'abc'), json_search(json_build_array(c1, '1'), 'all', 'abc'), json_search(c1, 'one', '%a%'),json_search('{"a":1,"b":10,"d":10}', 'all', '%1%'),json_search('[1,3,5,7]', 'one', '[2,5,7]') FROM s8;
                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8974.35 rows=6826 width=160)
   Output: (json_search(c1, 'one'::text, 'abc'::text)), (json_search(json_build_array(c1, '1'), 'all'::text, 'abc'::text)), (json_search(c1, 'one'::text, '%a%'::text)), (json_search('{"a":1,"b":10,"d":10}'::json, 'all'::text, '%1%'::text)), (json_search('[1,3,5,7]'::json, 'one'::text, '[2,5,7]'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_search(`c1`, 'one', 'abc'), json_search(json_array(`c1`, '1'), 'all', 'abc'), json_search(`c1`, 'one', '%a%'), json_search(CAST('{"a":1,"b":10,"d":10}' AS JSON), 'all', '%1%'), json_search(CAST('[1,3,5,7]' AS JSON), 'one', '[2,5,7]') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_search(c1, 'one'::text, 'abc'::text), public.json_search(json_build_array(c1, '1'), 'all'::text, 'abc'::text), public.json_search(c1, 'one'::text, '%a%'::text), public.json_search('{"a":1,"b":10,"d":10}'::json, 'all'::text, '%1%'::text), public.json_search('[1,3,5,7]'::json, 'one'::text, '[2,5,7]'::text) FROM public.s81mysql
(7 rows)

-- select json_search (builtin function, result)
--Testcase 4090:
SELECT * FROM (
SELECT id, json_search(c1, 'one', 'abc'), json_search(json_build_array(c1, '1'), 'all', 'abc'), json_search(c1, 'one', '%a%'),json_search('{"a":1,"b":10,"d":10}', 'all', '%1%'),json_search('[1,3,5,7]', 'one', '[2,5,7]') FROM s8
) AS t ORDER BY 1;
 id | json_search |       json_search        | json_search | json_search | json_search 
----+-------------+--------------------------+-------------+-------------+-------------
  0 |             |                          |             |             | 
  1 |             |                          |             |             | 
  2 |             |                          |             |             | 
  3 |             |                          |             |             | 
  4 |             |                          |             |             | 
  5 | "$[0]"      | ["$[0][0]", "$[0][2].x"] | "$[0]"      |             | 
(6 rows)

-- select json_search (builtin function, not pushdown constraints, explain)
--Testcase 4091:
EXPLAIN VERBOSE
SELECT json_search(c1, 'one', 'abc'), json_search(json_build_array(c1, '1'), 'all', 'abc'), json_search(c1, 'one', '%a%'),json_search('{"a":1,"b":10,"d":10}', 'all', '%1%'),json_search('[1,3,5,7]', 'one', '[2,5,7]') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..433.31 rows=34 width=160)
   Output: (json_search(c1, 'one'::text, 'abc'::text)), (json_search(json_build_array(c1, '1'), 'all'::text, 'abc'::text)), (json_search(c1, 'one'::text, '%a%'::text)), (json_search('{"a":1,"b":10,"d":10}'::json, 'all'::text, '%1%'::text)), (json_search('[1,3,5,7]'::json, 'one'::text, '[2,5,7]'::text))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_search(`c1`, 'one', 'abc'), json_search(json_array(`c1`, '1'), 'all', 'abc'), json_search(`c1`, 'one', '%a%'), json_search(CAST('{"a":1,"b":10,"d":10}' AS JSON), 'all', '%1%'), json_search(CAST('[1,3,5,7]' AS JSON), 'one', '[2,5,7]'), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_search(c1, 'one'::text, 'abc'::text), public.json_search(json_build_array(c1, '1'), 'all'::text, 'abc'::text), public.json_search(c1, 'one'::text, '%a%'::text), public.json_search('{"a":1,"b":10,"d":10}'::json, 'all'::text, '%1%'::text), public.json_search('[1,3,5,7]'::json, 'one'::text, '[2,5,7]'::text), id FROM public.s81mysql
(8 rows)

-- select json_search (builtin function, not pushdown constraints, result)
--Testcase 4092:
SELECT * FROM (
SELECT id, json_search(c1, 'one', 'abc'), json_search(json_build_array(c1, '1'), 'all', 'abc'), json_search(c1, 'one', '%a%'),json_search('{"a":1,"b":10,"d":10}', 'all', '%1%'),json_search('[1,3,5,7]', 'one', '[2,5,7]') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_search | json_search | json_search | json_search | json_search 
----+-------------+-------------+-------------+-------------+-------------
  2 |             |             |             |             | 
(1 row)

-- select json_search (builtin function, pushdown constraints, explain)
--Testcase 4093:
EXPLAIN VERBOSE
SELECT json_search(c1, 'one', 'abc'), json_search(json_build_array(c1, '1'), 'all', 'abc'), json_search(c1, 'one', '%a%'),json_search('{"a":1,"b":10,"d":10}', 'all', '%1%'),json_search('[1,3,5,7]', 'one', '[2,5,7]') FROM s8 WHERE id != 0;
                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8948.15 rows=6792 width=160)
   Output: (json_search(c1, 'one'::text, 'abc'::text)), (json_search(json_build_array(c1, '1'), 'all'::text, 'abc'::text)), (json_search(c1, 'one'::text, '%a%'::text)), (json_search('{"a":1,"b":10,"d":10}'::json, 'all'::text, '%1%'::text)), (json_search('[1,3,5,7]'::json, 'one'::text, '[2,5,7]'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_search(`c1`, 'one', 'abc'), json_search(json_array(`c1`, '1'), 'all', 'abc'), json_search(`c1`, 'one', '%a%'), json_search(CAST('{"a":1,"b":10,"d":10}' AS JSON), 'all', '%1%'), json_search(CAST('[1,3,5,7]' AS JSON), 'one', '[2,5,7]') FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_search(c1, 'one'::text, 'abc'::text), public.json_search(json_build_array(c1, '1'), 'all'::text, 'abc'::text), public.json_search(c1, 'one'::text, '%a%'::text), public.json_search('{"a":1,"b":10,"d":10}'::json, 'all'::text, '%1%'::text), public.json_search('[1,3,5,7]'::json, 'one'::text, '[2,5,7]'::text) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_search (builtin function, pushdown constraints, result)
--Testcase 4094:
SELECT * FROM (
SELECT id, json_search(c1, 'one', 'abc'), json_search(json_build_array(c1, '1'), 'all', 'abc'), json_search(c1, 'one', '%a%'),json_search('{"a":1,"b":10,"d":10}', 'all', '%1%'),json_search('[1,3,5,7]', 'one', '[2,5,7]') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | json_search |       json_search        | json_search | json_search | json_search 
----+-------------+--------------------------+-------------+-------------+-------------
  1 |             |                          |             |             | 
  2 |             |                          |             |             | 
  3 |             |                          |             |             | 
  4 |             |                          |             |             | 
  5 | "$[0]"      | ["$[0][0]", "$[0][2].x"] | "$[0]"      |             | 
(5 rows)

-- select json_search (builtin function, json_search in constraints, explain)
--Testcase 4095:
EXPLAIN VERBOSE
SELECT json_search(c1, 'one', 'abc'), json_search(json_build_array(c1, '1'), 'all', 'abc'), json_search(c1, 'one', '%a%'),json_search('{"a":1,"b":10,"d":10}', 'all', '%1%'),json_search('[1,3,5,7]', 'one', '[2,5,7]') FROM s8 WHERE json_search(c1, 'one', 'abc') NOT LIKE '$';
                                                                                                                                                                                                                     QUERY PLAN                                                                                                                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..10654.65 rows=6792 width=160)
   Output: (json_search(c1, 'one'::text, 'abc'::text)), (json_search(json_build_array(c1, '1'), 'all'::text, 'abc'::text)), (json_search(c1, 'one'::text, '%a%'::text)), (json_search('{"a":1,"b":10,"d":10}'::json, 'all'::text, '%1%'::text)), (json_search('[1,3,5,7]'::json, 'one'::text, '[2,5,7]'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_search(`c1`, 'one', 'abc'), json_search(json_array(`c1`, '1'), 'all', 'abc'), json_search(`c1`, 'one', '%a%'), json_search(CAST('{"a":1,"b":10,"d":10}' AS JSON), 'all', '%1%'), json_search(CAST('[1,3,5,7]' AS JSON), 'one', '[2,5,7]') FROM `test`.`s82` WHERE ((json_search(`c1`, 'one', 'abc') NOT LIKE BINARY '$'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_search(c1, 'one'::text, 'abc'::text), public.json_search(json_build_array(c1, '1'), 'all'::text, 'abc'::text), public.json_search(c1, 'one'::text, '%a%'::text), public.json_search('{"a":1,"b":10,"d":10}'::json, 'all'::text, '%1%'::text), public.json_search('[1,3,5,7]'::json, 'one'::text, '[2,5,7]'::text) FROM public.s81mysql WHERE ((public.json_search(c1, 'one'::text, 'abc'::text) !~~ '$'::text))
(7 rows)

-- select json_search (builtin function, json_search in constraints, result)
--Testcase 4096:
SELECT * FROM (
SELECT id, json_search(c1, 'one', 'abc'), json_search(json_build_array(c1, '1'), 'all', 'abc'), json_search(c1, 'one', '%a%'),json_search('{"a":1,"b":10,"d":10}', 'all', '%1%'),json_search('[1,3,5,7]', 'one', '[2,5,7]') FROM s8 WHERE json_search(c1, 'one', 'abc') NOT LIKE '$'
) AS t ORDER BY 1;
 id | json_search |       json_search        | json_search | json_search | json_search 
----+-------------+--------------------------+-------------+-------------+-------------
  5 | "$[0]"      | ["$[0][0]", "$[0][2].x"] | "$[0]"      |             | 
(1 row)

-- select json_search (builtin function, json_search in constraints, explain)
--Testcase 4097:
EXPLAIN VERBOSE
SELECT json_search(c1, 'one', 'abc'), json_search(json_build_array(c1, '1'), 'all', 'abc'), json_search(c1, 'one', '%a%'),json_search('{"a":1,"b":10,"d":10}', 'all', '%1%'),json_search('[1,3,5,7]', 'one', '[2,5,7]') FROM s8 where json_search('[1,3,5,7]', 'one', '[2,5,7]') IS NULL;
                                                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2038.02 rows=34 width=160)
   Output: (json_search(c1, 'one'::text, 'abc'::text)), (json_search(json_build_array(c1, '1'), 'all'::text, 'abc'::text)), (json_search(c1, 'one'::text, '%a%'::text)), (json_search('{"a":1,"b":10,"d":10}'::json, 'all'::text, '%1%'::text)), (json_search('[1,3,5,7]'::json, 'one'::text, '[2,5,7]'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_search(`c1`, 'one', 'abc'), json_search(json_array(`c1`, '1'), 'all', 'abc'), json_search(`c1`, 'one', '%a%'), json_search(CAST('{"a":1,"b":10,"d":10}' AS JSON), 'all', '%1%'), json_search(CAST('[1,3,5,7]' AS JSON), 'one', '[2,5,7]') FROM `test`.`s82` WHERE ((json_search(CAST('[1,3,5,7]' AS JSON), 'one', '[2,5,7]') IS NULL))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_search(c1, 'one'::text, 'abc'::text), public.json_search(json_build_array(c1, '1'), 'all'::text, 'abc'::text), public.json_search(c1, 'one'::text, '%a%'::text), public.json_search('{"a":1,"b":10,"d":10}'::json, 'all'::text, '%1%'::text), public.json_search('[1,3,5,7]'::json, 'one'::text, '[2,5,7]'::text) FROM public.s81mysql WHERE ((public.json_search('[1,3,5,7]'::json, 'one'::text, '[2,5,7]'::text) IS NULL))
(7 rows)

-- select json_search (builtin function, json_search in constraints, result)
--Testcase 4098:
SELECT * FROM (
SELECT id, json_search(c1, 'one', 'abc'), json_search(json_build_array(c1, '1'), 'all', 'abc'), json_search(c1, 'one', '%a%'),json_search('{"a":1,"b":10,"d":10}', 'all', '%1%'),json_search('[1,3,5,7]', 'one', '[2,5,7]') FROM s8 where json_search('[1,3,5,7]', 'one', '[2,5,7]') IS NULL
) AS t ORDER BY 1;
 id | json_search |       json_search        | json_search | json_search | json_search 
----+-------------+--------------------------+-------------+-------------+-------------
  0 |             |                          |             |             | 
  1 |             |                          |             |             | 
  2 |             |                          |             |             | 
  3 |             |                          |             |             | 
  4 |             |                          |             |             | 
  5 | "$[0]"      | ["$[0][0]", "$[0][2].x"] | "$[0]"      |             | 
(6 rows)

-- select json_search as nest function with agg (not pushdown, explain)
--Testcase 4099:
EXPLAIN VERBOSE
SELECT sum(id),json_search(json_build_array('{"a":1,"b":10,"d":10}', sum(id)), 'all', 'a') FROM s8;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_search(json_build_array('{"a":1,"b":10,"d":10}', (sum(id))), 'all'::text, 'a'::text)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_search as nest function with agg (not pushdown, result, error)
--Testcase 4100:
SELECT sum(id),json_search(json_build_array('{"a":1,"b":10,"d":10}', sum(id)), 'all', 'a') FROM s8;
ERROR:  stub json_search(json, text, text) is called
CONTEXT:  PL/pgSQL function json_search(json,text,text) line 3 at RAISE
-- select json_search with non pushdown func and explicit constant (EXPLAIN)
--Testcase 4101:
EXPLAIN VERBOSE
SELECT json_search(c1, 'one', '%a%'), pi(), 4.1 FROM s8;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (json_search(c1, 'one'::text, '%a%'::text)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_search(`c1`, 'one', '%a%'), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_search(c1, 'one'::text, '%a%'::text), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_search with non pushdown func and explicit constant (result)
--Testcase 4102:
SELECT * FROM (
SELECT id, json_search(c1, 'one', '%a%'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_search |        pi         | ?column? 
----+-------------+-------------------+----------
  0 |             | 3.141592653589793 |      4.1
  1 |             | 3.141592653589793 |      4.1
  2 |             | 3.141592653589793 |      4.1
  3 |             | 3.141592653589793 |      4.1
  4 |             | 3.141592653589793 |      4.1
  5 | "$[0]"      | 3.141592653589793 |      4.1
(6 rows)

-- select json_search with order by index (result)
--Testcase 4103:
SELECT id, json_search(c1, 'one', 'abc') FROM s8 ORDER BY 2, 1;
 id | json_search 
----+-------------
  5 | "$[0]"
  0 | 
  1 | 
  2 | 
  3 | 
  4 | 
(6 rows)

-- select json_search with order by index (result)
--Testcase 4104:
SELECT id, json_search(c1, 'one', 'abc') FROM s8 ORDER BY 1, 2;
 id | json_search 
----+-------------
  0 | 
  1 | 
  2 | 
  3 | 
  4 | 
  5 | "$[0]"
(6 rows)

-- select json_search with group by (EXPLAIN)
--Testcase 4105:
EXPLAIN VERBOSE
SELECT count(id), json_search(c1, 'one', 'abc') FROM s8 group by json_search(c1, 'one', 'abc');
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
   Output: count(id), (json_search(c1, 'one'::text, 'abc'::text))
   Group Key: (json_search(s8.c1, 'one'::text, 'abc'::text))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=36)
         Output: (json_search(c1, 'one'::text, 'abc'::text)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_search(`c1`, 'one', 'abc'), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_search(c1, 'one'::text, 'abc'::text), id FROM public.s81mysql
(10 rows)

-- select json_search with group by (result)
--Testcase 4106:
SELECT * FROM (
SELECT count(id), json_search(c1, 'one', 'abc') FROM s8 group by json_search(c1, 'one', 'abc')
) AS t ORDER BY 1;
 count | json_search 
-------+-------------
     1 | "$[0]"
     5 | 
(2 rows)

-- select json_search with group by index (result)
--Testcase 4107:
SELECT * FROM (
SELECT id, json_search(c1, 'one', 'abc') FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_search 
----+-------------
  0 | 
  1 | 
  2 | 
  3 | 
  4 | 
  5 | "$[0]"
(6 rows)

-- select json_search with group by index (result)
--Testcase 4108:
SELECT * FROM (
SELECT id, json_search(c1, 'one', 'abc') FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_search 
----+-------------
  0 | 
  1 | 
  2 | 
  3 | 
  4 | 
  5 | "$[0]"
(6 rows)

-- select json_search with group by having (EXPLAIN)
--Testcase 4109:
EXPLAIN VERBOSE
SELECT count(c2), json_search(c1, 'one', 'abc') FROM s8 group by json_search(c1, 'one', 'abc') HAVING count(c2) > 0;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=40)
   Output: count(c2), (json_search(c1, 'one'::text, 'abc'::text))
   Group Key: (json_search(s8.c1, 'one'::text, 'abc'::text))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=36)
         Output: (json_search(c1, 'one'::text, 'abc'::text)), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_search(`c1`, 'one', 'abc'), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_search(c1, 'one'::text, 'abc'::text), c2 FROM public.s81mysql
(11 rows)

-- select json_search with group by having (result)
--Testcase 4110:
SELECT * FROM (
SELECT count(c2), json_search(c1, 'one', 'abc') FROM s8 group by json_search(c1, 'one', 'abc') HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_search 
-------+-------------
     1 | "$[0]"
     5 | 
(2 rows)

-- select json_search with group by index having (result)
--Testcase 4111:
SELECT * FROM (
SELECT c2, json_search(c1, 'one', 'abc') FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_search 
----+-------------
  1 | 
  2 | 
  3 | 
  4 | 
  5 | "$[0]"
  5 | 
(6 rows)

-- select json_search with group by index having (result)
--Testcase 4112:
SELECT * FROM (
SELECT c2, json_search(c1, 'one', 'abc') FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_search 
----+-------------
  1 | 
  2 | 
  3 | 
  4 | 
  5 | "$[0]"
  5 | 
(6 rows)

-- select json_search and as
--Testcase 4113:
SELECT * FROM (
SELECT id, json_search(c1, 'one', '%a%') as json_search1 FROM s8
) AS t ORDER BY 1;
 id | json_search1 
----+--------------
  0 | 
  1 | 
  2 | 
  3 | 
  4 | 
  5 | "$[0]"
(6 rows)

-- JSON_SET()
-- select json_set (stub function, explain)
--Testcase 4114:
EXPLAIN VERBOSE
SELECT json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_set(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', pi()) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- select json_set (stub function, result)
--Testcase 4115:
SELECT * FROM (
SELECT id, json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8
) AS t ORDER BY 1;
 id |     json_set      
----+-------------------
  0 | 3.141592653589793
  1 | 3.141592653589793
  2 | 3.141592653589793
  3 | 3.141592653589793
  4 | 3.141592653589793
  5 | 3.141592653589793
(6 rows)

-- select json_set (stub function, not pushdown constraints, explain)
--Testcase 4116:
EXPLAIN VERBOSE
SELECT json_set(c1, '$.a, c2', '$.b, c3', '$.c, NULL', '$, TRUE', '$, pi()') FROM s8 WHERE to_hex(id) = '1';
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..399.23 rows=34 width=32)
   Output: (json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', NULL","''$'', TRUE","''$'', pi()"}'::path_value[]))
   Filter: (to_hex(s8.id) = '1'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_set(`c1`, '$.a', c2, '$.b', c3, '$.c', NULL, '$', TRUE, '$', pi()), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', NULL","''$'', TRUE","''$'', pi()"}'::public.path_value[]), id FROM public.s81mysql
(8 rows)

-- select json_set (stub function, not pushdown constraints, result)
--Testcase 4117:
SELECT * FROM (
SELECT id, json_set(c1, '$.a, c2', '$.b, c3', '$.c, NULL', '$, TRUE', '$, pi()') FROM s8 WHERE to_hex(id) = '1'
) AS t ORDER BY 1;
 id |     json_set      
----+-------------------
  1 | 3.141592653589793
(1 row)

-- select json_set (stub function, pushdown constraints, explain)
--Testcase 4118:
EXPLAIN VERBOSE
SELECT json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, CAST("[true, false]" AS JSON)') FROM s8 WHERE id = 1;
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..314.50 rows=34 width=32)
   Output: (json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', CAST(\"[true, false]\" AS JSON)"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_set(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', CAST("[true, false]" AS JSON)) FROM `test`.`s82` WHERE ((`id` = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_set(c1, VARIADIC E'{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', CAST(\\"[true, false]\\" AS JSON)"}'::public.path_value[]) FROM public.s81mysql WHERE ((id = 1))
(7 rows)

-- select json_set (stub function, pushdown constraints, result)
--Testcase 4119:
SELECT * FROM (
SELECT id, json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, CAST("[true, false]" AS JSON)') FROM s8 WHERE id = 1
) AS t ORDER BY 1;
 id |   json_set    
----+---------------
  1 | [true, false]
(1 row)

-- select json_set (stub function, stub in constraints, explain)
--Testcase 4120:
EXPLAIN VERBOSE
SELECT json_set(c1, '$.a, c2', '$.b, c3', '$.c, NULL', '$, TRUE', '$, "[true, false]"') FROM s8 WHERE log2(id) > 1;
                                                                                                               QUERY PLAN                                                                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2643.41 rows=2276 width=32)
   Output: (json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', NULL","''$'', TRUE","''$'', ''[true, false]''"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_set(`c1`, '$.a', c2, '$.b', c3, '$.c', NULL, '$', TRUE, '$', '[true, false]') FROM `test`.`s82` WHERE ((log2(`id`) > 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', NULL","''$'', TRUE","''$'', ''[true, false]''"}'::public.path_value[]) FROM public.s81mysql WHERE ((public.log2(id) > 1::double precision))
(7 rows)

-- select json_set (stub function, stub in constraints, result)
--Testcase 4121:
SELECT * FROM (
SELECT id, json_set(c1, '$.a, c2', '$.b, c3', '$.c, NULL', '$, TRUE', '$, "[true, false]"') FROM s8 WHERE log2(id) > 1
) AS t ORDER BY 1;
 id |    json_set     
----+-----------------
  3 | "[true, false]"
  4 | "[true, false]"
  5 | "[true, false]"
(3 rows)

-- select json_set (stub function, stub in constraints, explain)
--Testcase 4122:
EXPLAIN VERBOSE
SELECT json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8 WHERE json_depth(json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()')) > 0;
                                                                                                                                                               QUERY PLAN                                                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..4332.85 rows=2276 width=32)
   Output: (json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_set(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', pi()) FROM `test`.`s82` WHERE ((json_depth(json_set(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', pi())) > 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::public.path_value[]) FROM public.s81mysql WHERE ((public.json_depth(public.json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::public.path_value[])) > 0))
(7 rows)

-- select json_set (stub function, stub in constraints, result)
--Testcase 4123:
SELECT * FROM (
SELECT id, json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8 WHERE json_depth(json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()')) > 0
) AS t ORDER BY 1;
 id |     json_set      
----+-------------------
  0 | 3.141592653589793
  1 | 3.141592653589793
  2 | 3.141592653589793
  3 | 3.141592653589793
  4 | 3.141592653589793
  5 | 3.141592653589793
(6 rows)

-- json_set with 1 arg explain
--Testcase 4124:
EXPLAIN VERBOSE
SELECT json_set(c1, '$.a, c2') FROM s8;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_set(c1, VARIADIC '{"''$.a'', c2"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_set(`c1`, '$.a', c2) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_set(c1, VARIADIC '{"''$.a'', c2"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_set with 1 arg result
--Testcase 4125:
SELECT * FROM (
SELECT id, json_set(c1, '$.a, c2') FROM s8
) AS t ORDER BY 1;
 id |                         json_set                          
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {"a": 3}
  3 | {"a": 4, "b": "15", "x": 25}
  4 | {"a": 5, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_set with 2 args explain
--Testcase 4126:
EXPLAIN VERBOSE
SELECT json_set(c1, '$.a, c2', '$.b, c3') FROM s8;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_set(`c1`, '$.a', c2, '$.b', c3) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_set with 2 args result
--Testcase 4127:
SELECT * FROM (
SELECT id, json_set(c1, '$.a, c2', '$.b, c3') FROM s8
) AS t ORDER BY 1;
 id |                         json_set                          
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {"a": 3, "b": "text"}
  3 | {"a": 4, "b": "scalar", "x": 25}
  4 | {"a": 5, "b": "scalar", "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_set with 3 args explain
--Testcase 4128:
EXPLAIN VERBOSE
SELECT json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1') FROM s8;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_set(`c1`, '$.a', c2, '$.b', c3, '$.c', 1) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_set with 3 args result
--Testcase 4129:
SELECT * FROM (
SELECT id, json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1') FROM s8
) AS t ORDER BY 1;
 id |                         json_set                          
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {"a": 3, "b": "text", "c": 1}
  3 | {"a": 4, "b": "scalar", "c": 1, "x": 25}
  4 | {"a": 5, "b": "scalar", "c": 1}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_set with 4 args explain
--Testcase 4130:
EXPLAIN VERBOSE
SELECT json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"') FROM s8;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_set(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_set with 4 args result
--Testcase 4131:
SELECT * FROM (
SELECT id, json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"') FROM s8
) AS t ORDER BY 1;
 id | json_set 
----+----------
  0 | "a"
  1 | "a"
  2 | "a"
  3 | "a"
  4 | "a"
  5 | "a"
(6 rows)

-- json_set with 5 args explain
--Testcase 4132:
EXPLAIN VERBOSE
SELECT json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_set(`c1`, '$.a', c2, '$.b', c3, '$.c', 1, '$', 'a', '$', pi()) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_set(c1, VARIADIC '{"''$.a'', c2","''$.b'', c3","''$.c'', 1","''$'', ''a''","''$'', pi()"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- json_set with 5 args result
--Testcase 4133:
SELECT * FROM (
SELECT id, json_set(c1, '$.a, c2', '$.b, c3', '$.c, 1', '$, "a"', '$, pi()') FROM s8
) AS t ORDER BY 1;
 id |     json_set      
----+-------------------
  0 | 3.141592653589793
  1 | 3.141592653589793
  2 | 3.141592653589793
  3 | 3.141592653589793
  4 | 3.141592653589793
  5 | 3.141592653589793
(6 rows)

-- select json_set as nest function with agg (not pushdown, explain)
--Testcase 4134:
EXPLAIN VERBOSE
SELECT sum(id),json_set('["a", ["b", "c"], "d"]', '$, sum(id)') FROM s8;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_set('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', sum(id)"}'::path_value[])
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_set as nest function with agg (not pushdown, result, error)
--Testcase 4135:
SELECT sum(id),json_set('["a", ["b", "c"], "d"]', '$, sum(id)') FROM s8;
ERROR:  stub json_set(json, variadic path_value[]) is called
CONTEXT:  PL/pgSQL function json_set(json,path_value[]) line 3 at RAISE
-- select json_set as nest function with json_build_array (pushdown, explain)
--Testcase 4136:
EXPLAIN VERBOSE
SELECT json_set(json_build_array('["a", ["b", "c"], "d"]', c1), '$, log2(id)') FROM s8;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=32)
   Output: (json_set(json_build_array('["a", ["b", "c"], "d"]', c1), VARIADIC '{"''$'', log2(id)"}'::path_value[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_set(json_array('["a", ["b", "c"], "d"]', `c1`), '$', log2(id)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_set(json_build_array('["a", ["b", "c"], "d"]', c1), VARIADIC '{"''$'', log2(id)"}'::public.path_value[]) FROM public.s81mysql
(7 rows)

-- select json_set as nest function with json_build_array (pushdown, result)
--Testcase 4137:
SELECT * FROM (
SELECT id, json_set(json_build_array('["a", ["b", "c"], "d"]', c1), '$, log2(id)') FROM s8
) AS t ORDER BY 1;
 id |     json_set      
----+-------------------
  0 | null
  1 | 0.0
  2 | 1.0
  3 | 1.584962500721156
  4 | 2.0
  5 | 2.321928094887362
(6 rows)

-- select json_set with non pushdown func and explicit constant (explain)
--Testcase 4138:
EXPLAIN VERBOSE
SELECT json_set(c1, '$.a, c2'), pi(), 4.1 FROM s8;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (json_set(c1, VARIADIC '{"''$.a'', c2"}'::path_value[])), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_set(`c1`, '$.a', c2), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_set(c1, VARIADIC '{"''$.a'', c2"}'::public.path_value[]), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_set with non pushdown func and explicit constant (result)
--Testcase 4139:
SELECT * FROM (
SELECT id, json_set(c1, '$.a, c2'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id |                         json_set                          |        pi         | ?column? 
----+-----------------------------------------------------------+-------------------+----------
  0 | [[1, 2], [3, 4], 5]                                       | 3.141592653589793 |      4.1
  1 | []                                                        | 3.141592653589793 |      4.1
  2 | {"a": 3}                                                  | 3.141592653589793 |      4.1
  3 | {"a": 4, "b": "15", "x": 25}                              | 3.141592653589793 |      4.1
  4 | {"a": 5, "b": 2, "c": {"d": 4}}                           | 3.141592653589793 |      4.1
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}] | 3.141592653589793 |      4.1
(6 rows)

-- select json_set with order by (explain)
--Testcase 4140:
EXPLAIN VERBOSE
SELECT json_length(json_set(c1, '$.a, c2')) FROM s8 ORDER BY 1;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4272.49..4289.55 rows=6826 width=4)
   Output: (json_length(json_set(c1, VARIADIC '{"''$.a'', c2"}'::path_value[])))
   Sort Key: (json_length(json_set(s8.c1, VARIADIC '{"''$.a'', c2"}'::path_value[])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=4)
         Output: (json_length(json_set(c1, VARIADIC '{"''$.a'', c2"}'::path_value[])))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT json_length(json_set(`c1`, '$.a', c2)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.json_length(public.json_set(c1, VARIADIC '{"''$.a'', c2"}'::public.path_value[])) FROM public.s81mysql
(12 rows)

-- select json_set with order by (result)
--Testcase 4141:
SELECT json_length(json_set(c1, '$.a, c2')) FROM s8 ORDER BY 1;
 json_length 
-------------
           0
           1
           3
           3
           3
           4
(6 rows)

-- select json_set with group by (explain)
--Testcase 4142:
EXPLAIN VERBOSE
SELECT id, json_length(json_set('["a", ["b", "c"], "d"]', '$, id')) FROM s8 GROUP BY 1, 2;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3871.91..7353.17 rows=6826 width=8)
   Output: id, (json_length(json_set('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', id"}'::path_value[])))
   Group Key: s8.id, (json_length(json_set('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', id"}'::path_value[])))
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: id, (json_length(json_set('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', id"}'::path_value[])))
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT `id`, json_length(json_set(CAST('["a", ["b", "c"], "d"]' AS JSON), '$', id)) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT id, public.json_length(public.json_set('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', id"}'::public.path_value[])) FROM public.s81mysql
(10 rows)

-- select json_set with group by (result)
--Testcase 4143:
SELECT * FROM (
SELECT id, json_length(json_set('["a", ["b", "c"], "d"]', '$, id')) FROM s8 GROUP BY 1, 2
) AS t ORDER BY 1;
 id | json_length 
----+-------------
  0 |           1
  1 |           1
  2 |           1
  3 |           1
  4 |           1
  5 |           1
(6 rows)

-- select json_set with group by having (explain)
--Testcase 4144:
EXPLAIN VERBOSE
SELECT json_depth(json_set('["a", ["b", "c"], "d"]', '$, c2')) FROM s8 GROUP BY c2, 1 HAVING count(c2) > 1;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=3888.97..5111.80 rows=2275 width=8)
   Output: (json_depth(json_set('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', c2"}'::path_value[]))), c2
   Group Key: s8.c2, (json_depth(json_set('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', c2"}'::path_value[])))
   Filter: (count(s8.c2) > 1)
   ->  Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=8)
         Output: (json_depth(json_set('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', c2"}'::path_value[]))), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_depth(json_set(CAST('["a", ["b", "c"], "d"]' AS JSON), '$', c2)), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_depth(public.json_set('["a", ["b", "c"], "d"]'::json, VARIADIC '{"''$'', c2"}'::public.path_value[])), c2 FROM public.s81mysql
(11 rows)

-- select json_set with group by having (result)
--Testcase 4145:
SELECT * FROM (
SELECT id, json_depth(json_set('["a", ["b", "c"], "d"]', '$, c2')) FROM s8 GROUP BY c2, 1 HAVING count(c2) > 1
) AS t ORDER BY 1;
 id | json_depth 
----+------------
(0 rows)

-- select json_set and as
--Testcase 4146:
SELECT * FROM (
SELECT id, json_set(c1, '$.a, c2') AS json_set1 FROM s8
) AS t ORDER BY 1;
 id |                         json_set1                         
----+-----------------------------------------------------------
  0 | [[1, 2], [3, 4], 5]
  1 | []
  2 | {"a": 3}
  3 | {"a": 4, "b": "15", "x": 25}
  4 | {"a": 5, "b": 2, "c": {"d": 4}}
  5 | ["abc", [{"k": "10"}, "def"], {"x": "abc"}, {"y": "bcd"}]
(6 rows)

-- json_storage_free()
-- insert new value for test json_storage_free()
--Testcase 4147:
INSERT INTO s8__mysql_svr__0 VALUES (6, '{"a": 10, "b": "wxyz", "c": "[true, false]"}', 1, 'Text');
-- select json_storage_free (stub function, explain)
--Testcase 4148:
EXPLAIN VERBOSE
SELECT json_storage_free(c1), json_storage_free('{"a": 10, "b": "wxyz", "c": "[true, false]"}') FROM s8 WHERE id = 6;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..323.00 rows=34 width=8)
   Output: (json_storage_free(c1)), (json_storage_free('{"a": 10, "b": "wxyz", "c": "[true, false]"}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_storage_free(`c1`), json_storage_free(CAST('{"a": 10, "b": "wxyz", "c": "[true, false]"}' AS JSON)) FROM `test`.`s82` WHERE ((`id` = 6))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_storage_free(c1), public.json_storage_free('{"a": 10, "b": "wxyz", "c": "[true, false]"}'::json) FROM public.s81mysql WHERE ((id = 6))
(7 rows)

-- select json_storage_free (stub function, result)
--Testcase 4149:
SELECT json_storage_free(c1), json_storage_free('{"a": 10, "b": "wxyz", "c": "[true, false]"}') FROM s8 WHERE id = 6;
 json_storage_free | json_storage_free 
-------------------+-------------------
                 0 |                 0
(1 row)

-- update new value for json value of table s8
--Testcase 4150:
UPDATE s8__mysql_svr__0 SET c1 = json_set(c1, '$.a, 10', '$.b, "wx"') WHERE id = 6;
-- select json_storage_free (stub function, explain)
--Testcase 4151:
EXPLAIN VERBOSE
SELECT json_storage_free(c1), json_storage_free('{"a": 10, "b": "wxyz", "c": "[true, false]"}') FROM s8 WHERE id = 6;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..323.00 rows=34 width=8)
   Output: (json_storage_free(c1)), (json_storage_free('{"a": 10, "b": "wxyz", "c": "[true, false]"}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_storage_free(`c1`), json_storage_free(CAST('{"a": 10, "b": "wxyz", "c": "[true, false]"}' AS JSON)) FROM `test`.`s82` WHERE ((`id` = 6))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_storage_free(c1), public.json_storage_free('{"a": 10, "b": "wxyz", "c": "[true, false]"}'::json) FROM public.s81mysql WHERE ((id = 6))
(7 rows)

-- select json_storage_free (stub function, result)
--Testcase 4152:
SELECT json_storage_free(c1), json_storage_free('{"a": 10, "b": "wxyz", "c": "[true, false]"}') FROM s8 WHERE id = 6;
 json_storage_free | json_storage_free 
-------------------+-------------------
                 2 |                 0
(1 row)

-- revert change
--Testcase 4153:
DELETE FROM s8__mysql_svr__0 WHERE id = 6;
-- json_storage_size()
-- select json_storage_size (builtin function, explain)
--Testcase 4154:
EXPLAIN VERBOSE
SELECT json_storage_size(c1), json_storage_size(json_build_array(c1, 'a', c2)), json_storage_size('{"a": 1, "b": {"c": 30}}') FROM s8;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..5561.34 rows=6826 width=12)
   Output: (json_storage_size(c1)), (json_storage_size(json_build_array(c1, 'a', c2))), (json_storage_size('{"a": 1, "b": {"c": 30}}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_storage_size(`c1`), json_storage_size(json_array(`c1`, 'a', `c2`)), json_storage_size(CAST('{"a": 1, "b": {"c": 30}}' AS JSON)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_storage_size(c1), public.json_storage_size(json_build_array(c1, 'a', c2)), public.json_storage_size('{"a": 1, "b": {"c": 30}}'::json) FROM public.s81mysql
(7 rows)

-- select json_storage_size (builtin function, result)
--Testcase 4155:
SELECT * FROM (
SELECT id, json_storage_size(c1), json_storage_size(json_build_array(c1, 'a', c2)), json_storage_size('{"a": 1, "b": {"c": 30}}') FROM s8
) AS t ORDER BY 1;
 id | json_storage_size | json_storage_size | json_storage_size 
----+-------------------+-------------------+-------------------
  0 |                34 |                49 |                33
  1 |                 5 |                20 |                33
  2 |                 5 |                20 |                33
  3 |                35 |                50 |                33
  4 |                41 |                56 |                33
  5 |                82 |                97 |                33
(6 rows)

-- select json_storage_size (builtin function, not pushdown constraints, explain)
--Testcase 4156:
EXPLAIN VERBOSE
SELECT json_storage_size(c1), json_storage_size(json_build_array(c1, 'a', c2)), json_storage_size('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE to_hex(id) = '2';
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..416.31 rows=34 width=12)
   Output: (json_storage_size(c1)), (json_storage_size(json_build_array(c1, 'a', c2))), (json_storage_size('{"a": 1, "b": {"c": 30}}'::json))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_storage_size(`c1`), json_storage_size(json_array(`c1`, 'a', `c2`)), json_storage_size(CAST('{"a": 1, "b": {"c": 30}}' AS JSON)), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_storage_size(c1), public.json_storage_size(json_build_array(c1, 'a', c2)), public.json_storage_size('{"a": 1, "b": {"c": 30}}'::json), id FROM public.s81mysql
(8 rows)

-- select json_storage_size (builtin function, not pushdown constraints, result)
--Testcase 4157:
SELECT * FROM (
SELECT id, json_storage_size(c1), json_storage_size(json_build_array(c1, 'a', c2)), json_storage_size('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_storage_size | json_storage_size | json_storage_size 
----+-------------------+-------------------+-------------------
  2 |                 5 |                20 |                33
(1 row)

-- select json_storage_size (builtin function, pushdown constraints, explain)
--Testcase 4158:
EXPLAIN VERBOSE
SELECT json_storage_size(c1), json_storage_size(json_build_array(c1, 'a', c2)), json_storage_size('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE id != 0;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..5552.14 rows=6792 width=12)
   Output: (json_storage_size(c1)), (json_storage_size(json_build_array(c1, 'a', c2))), (json_storage_size('{"a": 1, "b": {"c": 30}}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_storage_size(`c1`), json_storage_size(json_array(`c1`, 'a', `c2`)), json_storage_size(CAST('{"a": 1, "b": {"c": 30}}' AS JSON)) FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_storage_size(c1), public.json_storage_size(json_build_array(c1, 'a', c2)), public.json_storage_size('{"a": 1, "b": {"c": 30}}'::json) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_storage_size (builtin function, pushdown constraints, result)
--Testcase 4159:
SELECT * FROM (
SELECT id, json_storage_size(c1), json_storage_size(json_build_array(c1, 'a', c2)), json_storage_size('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | json_storage_size | json_storage_size | json_storage_size 
----+-------------------+-------------------+-------------------
  1 |                 5 |                20 |                33
  2 |                 5 |                20 |                33
  3 |                35 |                50 |                33
  4 |                41 |                56 |                33
  5 |                82 |                97 |                33
(5 rows)

-- select json_storage_size (builtin function, json_storage_size in constraints, explain)
--Testcase 4160:
EXPLAIN VERBOSE
SELECT json_storage_size(c1), json_storage_size(json_build_array(c1, 'a', c2)), json_storage_size('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE json_storage_size(c1) != 1;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7258.64 rows=6792 width=12)
   Output: (json_storage_size(c1)), (json_storage_size(json_build_array(c1, 'a', c2))), (json_storage_size('{"a": 1, "b": {"c": 30}}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_storage_size(`c1`), json_storage_size(json_array(`c1`, 'a', `c2`)), json_storage_size(CAST('{"a": 1, "b": {"c": 30}}' AS JSON)) FROM `test`.`s82` WHERE ((json_storage_size(`c1`) <> 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_storage_size(c1), public.json_storage_size(json_build_array(c1, 'a', c2)), public.json_storage_size('{"a": 1, "b": {"c": 30}}'::json) FROM public.s81mysql WHERE ((public.json_storage_size(c1) <> 1))
(7 rows)

-- select json_storage_size (builtin function, json_storage_size in constraints, result)
--Testcase 4161:
SELECT * FROM (
SELECT id, json_storage_size(c1), json_storage_size(json_build_array(c1, 'a', c2)), json_storage_size('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE json_storage_size(c1) != 1
) AS t ORDER BY 1;
 id | json_storage_size | json_storage_size | json_storage_size 
----+-------------------+-------------------+-------------------
  0 |                34 |                49 |                33
  1 |                 5 |                20 |                33
  2 |                 5 |                20 |                33
  3 |                35 |                50 |                33
  4 |                41 |                56 |                33
  5 |                82 |                97 |                33
(6 rows)

-- select json_storage_size (builtin function, json_storage_size in constraints, explain)
--Testcase 4162:
EXPLAIN VERBOSE
SELECT json_storage_size(c1), json_storage_size(json_build_array(c1, 'a', c2)), json_storage_size('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE json_storage_size('{"a": 1, "b": {"c": 30}}') = 33;
                                                                                                                               QUERY PLAN                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2038.09 rows=34 width=12)
   Output: (json_storage_size(c1)), (json_storage_size(json_build_array(c1, 'a', c2))), (json_storage_size('{"a": 1, "b": {"c": 30}}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_storage_size(`c1`), json_storage_size(json_array(`c1`, 'a', `c2`)), json_storage_size(CAST('{"a": 1, "b": {"c": 30}}' AS JSON)) FROM `test`.`s82` WHERE ((json_storage_size(CAST('{"a": 1, "b": {"c": 30}}' AS JSON)) = 33))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_storage_size(c1), public.json_storage_size(json_build_array(c1, 'a', c2)), public.json_storage_size('{"a": 1, "b": {"c": 30}}'::json) FROM public.s81mysql WHERE ((public.json_storage_size('{"a": 1, "b": {"c": 30}}'::json) = 33))
(7 rows)

-- select json_storage_size (builtin function, json_storage_size in constraints, result)
--Testcase 4163:
SELECT * FROM (
SELECT id, json_storage_size(c1), json_storage_size(json_build_array(c1, 'a', c2)), json_storage_size('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE json_storage_size('{"a": 1, "b": {"c": 30}}') = 33
) AS t ORDER BY 1;
 id | json_storage_size | json_storage_size | json_storage_size 
----+-------------------+-------------------+-------------------
  0 |                34 |                49 |                33
  1 |                 5 |                20 |                33
  2 |                 5 |                20 |                33
  3 |                35 |                50 |                33
  4 |                41 |                56 |                33
  5 |                82 |                97 |                33
(6 rows)

-- select json_storage_size as nest function with agg (not pushdown, explain)
--Testcase 4164:
EXPLAIN VERBOSE
SELECT sum(id),json_storage_size('{"a": 1, "b": {"c": 30}}') FROM s8;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (sum(id)), json_storage_size('{"a": 1, "b": {"c": 30}}'::json)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_storage_size as nest function with agg (not pushdown, result, error)
--Testcase 4165:
SELECT sum(id),json_storage_size('{"a": 1, "b": {"c": 30}}') FROM s8;
ERROR:  stub json_storage_size(json) is called
CONTEXT:  PL/pgSQL function json_storage_size(json) line 3 at RAISE
-- select json_storage_size with non pushdown func and explicit constant (EXPLAIN)
--Testcase 4166:
EXPLAIN VERBOSE
SELECT json_storage_size(json_build_array(c1, 'a', c2)), pi(), 4.1 FROM s8;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=44)
   Output: (json_storage_size(json_build_array(c1, 'a', c2))), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_storage_size(json_array(`c1`, 'a', `c2`)), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_storage_size(json_build_array(c1, 'a', c2)), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_storage_size with non pushdown func and explicit constant (result)
--Testcase 4167:
SELECT * FROM (
SELECT id, json_storage_size(json_build_array(c1, 'a', c2)), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_storage_size |        pi         | ?column? 
----+-------------------+-------------------+----------
  0 |                49 | 3.141592653589793 |      4.1
  1 |                20 | 3.141592653589793 |      4.1
  2 |                20 | 3.141592653589793 |      4.1
  3 |                50 | 3.141592653589793 |      4.1
  4 |                56 | 3.141592653589793 |      4.1
  5 |                97 | 3.141592653589793 |      4.1
(6 rows)

-- select json_storage_size with order by (EXPLAIN)
--Testcase 4168:
EXPLAIN VERBOSE
SELECT id, json_storage_size(c1) FROM s8 ORDER BY json_storage_size(c1);
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=8)
   Output: id, (json_storage_size(c1))
   Sort Key: (json_storage_size(s8.c1))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: id, (json_storage_size(c1))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, json_storage_size(`c1`) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.json_storage_size(c1) FROM public.s81mysql
(12 rows)

-- select json_storage_size with order by (result)
--Testcase 4169:
SELECT id, json_storage_size(c1) FROM s8 ORDER BY json_storage_size(c1);
 id | json_storage_size 
----+-------------------
  1 |                 5
  2 |                 5
  0 |                34
  3 |                35
  4 |                41
  5 |                82
(6 rows)

-- select json_storage_size with order by index (result)
--Testcase 4170:
SELECT id, json_storage_size(c1) FROM s8 ORDER BY 2, 1;
 id | json_storage_size 
----+-------------------
  1 |                 5
  2 |                 5
  0 |                34
  3 |                35
  4 |                41
  5 |                82
(6 rows)

-- select json_storage_size with order by index (result)
--Testcase 4171:
SELECT id, json_storage_size(c1) FROM s8 ORDER BY 1, 2;
 id | json_storage_size 
----+-------------------
  0 |                34
  1 |                 5
  2 |                 5
  3 |                35
  4 |                41
  5 |                82
(6 rows)

-- select json_storage_size with group by (EXPLAIN)
--Testcase 4172:
EXPLAIN VERBOSE
SELECT count(id), json_storage_size(c1) FROM s8 group by json_storage_size(c1);
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
   Output: count(id), (json_storage_size(c1))
   Group Key: (json_storage_size(s8.c1))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_storage_size(c1)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_storage_size(`c1`), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_storage_size(c1), id FROM public.s81mysql
(10 rows)

-- select json_storage_size with group by (result)
--Testcase 4173:
SELECT * FROM (
SELECT count(id), json_storage_size(c1) FROM s8 group by json_storage_size(c1)
) AS t ORDER BY 1;
 count | json_storage_size 
-------+-------------------
     1 |                82
     1 |                34
     1 |                35
     1 |                41
     2 |                 5
(5 rows)

-- select json_storage_size with group by index (result)
--Testcase 4174:
SELECT * FROM (
SELECT id, json_storage_size(c1) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_storage_size 
----+-------------------
  0 |                34
  1 |                 5
  2 |                 5
  3 |                35
  4 |                41
  5 |                82
(6 rows)

-- select json_storage_size with group by index (result)
--Testcase 4175:
SELECT * FROM (
SELECT id, json_storage_size(c1) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_storage_size 
----+-------------------
  0 |                34
  1 |                 5
  2 |                 5
  3 |                35
  4 |                41
  5 |                82
(6 rows)

-- select json_storage_size with group by having (EXPLAIN)
--Testcase 4176:
EXPLAIN VERBOSE
SELECT count(c2), json_storage_size(c1) FROM s8 group by json_storage_size(c1) HAVING count(c2) > 0;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=12)
   Output: count(c2), (json_storage_size(c1))
   Group Key: (json_storage_size(s8.c1))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_storage_size(c1)), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_storage_size(`c1`), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_storage_size(c1), c2 FROM public.s81mysql
(11 rows)

-- select json_storage_size with group by having (result)
--Testcase 4177:
SELECT * FROM (
SELECT count(c2), json_storage_size(c1) FROM s8 group by json_storage_size(c1) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_storage_size 
-------+-------------------
     1 |                82
     1 |                34
     1 |                35
     1 |                41
     2 |                 5
(5 rows)

-- select json_storage_size with group by index having (result)
--Testcase 4178:
SELECT * FROM (
SELECT c2, json_storage_size(c1) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_storage_size 
----+-------------------
  1 |                34
  2 |                 5
  3 |                 5
  4 |                35
  5 |                82
  5 |                41
(6 rows)

-- select json_storage_size with group by index having (result)
--Testcase 4179:
SELECT * FROM (
SELECT c2, json_storage_size(c1) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_storage_size 
----+-------------------
  1 |                34
  2 |                 5
  3 |                 5
  4 |                35
  5 |                82
  5 |                41
(6 rows)

-- select json_storage_size and as
--Testcase 4180:
SELECT * FROM (
SELECT id, json_storage_size(json_build_array(c1, 'a', c2)) as json_storage_size1 FROM s8
) AS t ORDER BY 1;
 id | json_storage_size1 
----+--------------------
  0 |                 49
  1 |                 20
  2 |                 20
  3 |                 50
  4 |                 56
  5 |                 97
(6 rows)

-- mysql_json_table
-- select mysql_json_table (explain)
--Testcase 4181:
EXPLAIN VERBOSE
SELECT mysql_json_table(c1,'$',
       ARRAY['id VARCHAR(100) PATH "$.id"', '_type text PATH "$.type"', '_schema text PATH "$.$schema"', '_required json PATH "$.required"', '_properties json PATH "$.properties"', '_description text PATH "$.description"'],
       ARRAY['id', '_type', '_schema', '_required', '_properties', '_description'])
       FROM s9;


 Foreign Scan on public.s9  (cost=200.00..2131.28 rows=6826 width=32)
   Output: (mysql_json_table(c1, '$'::text, '{"id VARCHAR(100) PATH \"$.id\"","_type text PATH \"$.type\"","_schema text PATH \"$.$schema\"","_required json PATH \"$.required\"","_properties json PATH \"$.properties\"","_description text PATH \"$.description\""}'::text[], '{id,_type,_schema,_required,_properties,_description}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT  CONCAT('(', CONCAT_WS(',',  IF(ISNULL(r2.id), '', JSON_QUOTE(CONCAT(r2.id))),  IF(ISNULL(r2._type), '', JSON_QUOTE(CONCAT(r2._type))),  IF(ISNULL(r2._schema), '', JSON_QUOTE(CONCAT(r2._schema))),  IF(ISNULL(r2._required), '', JSON_QUOTE(CONCAT(r2._required))),  IF(ISNULL(r2._properties), '', JSON_QUOTE(CONCAT(r2._properties))),  IF(ISNULL(r2._description), '', JSON_QUOTE(CONCAT(r2._description)))), ')') FROM `test`.`s92`, JSON_TABLE(`c1`,'$' COLUMNS(id VARCHAR(100) PATH "$.id", _type text PATH "$.type", _schema text PATH "$.$schema", _required json PATH "$.required", _properties json PATH "$.properties", _description text PATH "$.description")) AS r2
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_table(c1, '$'::text, E'{"id VARCHAR(100) PATH \\"$.id\\"","_type text PATH \\"$.type\\"","_schema text PATH \\"$.$schema\\"","_required json PATH \\"$.required\\"","_properties json PATH \\"$.properties\\"","_description text PATH \\"$.description\\""}'::text[], '{id,_type,_schema,_required,_properties,_description}'::text[]) FROM public.s91mysql
(7 rows)

-- select mysql_json_table (result)
--Testcase 4182:
SELECT mysql_json_table(c1,'$',
       ARRAY['id VARCHAR(100) PATH "$.id"', '_type text PATH "$.type"', '_schema text PATH "$.$schema"', '_required json PATH "$.required"', '_properties json PATH "$.properties"', '_description text PATH "$.description"'],
       ARRAY['id', '_type', '_schema', '_required', '_properties', '_description'])
       FROM s9 ORDER BY 1;
                                                                                                                                           mysql_json_table                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ("http://json-schema.org/geo","object","http://json-schema.org/draft-04/schema#","[\"latitude\", \"longitude\"]","{\"latitude\": {\"type\": \"number\", \"maximum\": 90, \"minimum\": -90}, \"longitude\": {\"type\": \"number\", \"maximum\": 180, \"minimum\": -180}}","A geographical coordinate")
 ("http://json-schema.org/geo","object","http://json-schema.org/draft-04/schema#",,"{\"latitude\": {\"type\": \"number\", \"maximum\": 9, \"minimum\": -9}, \"longitude\": {\"type\": \"number\", \"maximum\": 18, \"minimum\": -18}}","A geographical coordinate")
(2 rows)

--Testcase 4183:
CREATE TABLE loc_tbl (
  id text,
  _type text,
  _schema text,
  _required json,
  _properties json,
  _description text
);
-- select mysql_json_table (result, access record)
--Testcase 4184:
SELECT * FROM (
  SELECT (mysql_json_table(c1,'$',
          ARRAY['id VARCHAR(100) PATH "$.id"', '_type text PATH "$.type"', '_schema text PATH "$.$schema"', '_required json PATH "$.required"', '_properties json PATH "$.properties"', '_description text PATH "$.description"'],
          ARRAY['id', '_type', '_schema', '_required', '_properties', '_description'])::loc_tbl).*
          FROM s9
) t ORDER BY _required::text;
             id             | _type  |                 _schema                 |         _required         |                                                            _properties                                                            |       _description        
----------------------------+--------+-----------------------------------------+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------+---------------------------
 http://json-schema.org/geo | object | http://json-schema.org/draft-04/schema# | ["latitude", "longitude"] | {"latitude": {"type": "number", "maximum": 90, "minimum": -90}, "longitude": {"type": "number", "maximum": 180, "minimum": -180}} | A geographical coordinate
 http://json-schema.org/geo | object | http://json-schema.org/draft-04/schema# |                           | {"latitude": {"type": "number", "maximum": 9, "minimum": -9}, "longitude": {"type": "number", "maximum": 18, "minimum": -18}}     | A geographical coordinate
(2 rows)

--Testcase 4185:
DROP TABLE loc_tbl;
-- select mysql_json_table (pushed down constraints, explain)
--Testcase 4186:
EXPLAIN VERBOSE
SELECT mysql_json_table(c1,'$',
       ARRAY['id VARCHAR(100) PATH "$.id"', '_type text PATH "$.type"', '_schema text PATH "$.$schema"', '_required json PATH "$.required"', '_properties json PATH "$.properties"', '_description text PATH "$.description"'],
       ARRAY['id', '_type', '_schema', '_required', '_properties', '_description'])
       FROM s9 WHERE json_depth(c1) > 1;


 Foreign Scan on public.s9  (cost=200.00..2626.35 rows=2276 width=32)
   Output: (mysql_json_table(c1, '$'::text, '{"id VARCHAR(100) PATH \"$.id\"","_type text PATH \"$.type\"","_schema text PATH \"$.$schema\"","_required json PATH \"$.required\"","_properties json PATH \"$.properties\"","_description text PATH \"$.description\""}'::text[], '{id,_type,_schema,_required,_properties,_description}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT  CONCAT('(', CONCAT_WS(',',  IF(ISNULL(r2.id), '', JSON_QUOTE(CONCAT(r2.id))),  IF(ISNULL(r2._type), '', JSON_QUOTE(CONCAT(r2._type))),  IF(ISNULL(r2._schema), '', JSON_QUOTE(CONCAT(r2._schema))),  IF(ISNULL(r2._required), '', JSON_QUOTE(CONCAT(r2._required))),  IF(ISNULL(r2._properties), '', JSON_QUOTE(CONCAT(r2._properties))),  IF(ISNULL(r2._description), '', JSON_QUOTE(CONCAT(r2._description)))), ')') FROM `test`.`s92`, JSON_TABLE(`c1`,'$' COLUMNS(id VARCHAR(100) PATH "$.id", _type text PATH "$.type", _schema text PATH "$.$schema", _required json PATH "$.required", _properties json PATH "$.properties", _description text PATH "$.description")) AS r2 WHERE ((json_depth(`c1`) > 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_table(c1, '$'::text, E'{"id VARCHAR(100) PATH \\"$.id\\"","_type text PATH \\"$.type\\"","_schema text PATH \\"$.$schema\\"","_required json PATH \\"$.required\\"","_properties json PATH \\"$.properties\\"","_description text PATH \\"$.description\\""}'::text[], '{id,_type,_schema,_required,_properties,_description}'::text[]) FROM public.s91mysql WHERE ((public.json_depth(c1) > 1))
(7 rows)

-- select mysql_json_table (pushed down constraints, result)
--Testcase 4187:
SELECT mysql_json_table(c1,'$',
       ARRAY['id VARCHAR(100) PATH "$.id"', '_type text PATH "$.type"', '_schema text PATH "$.$schema"', '_required json PATH "$.required"', '_properties json PATH "$.properties"', '_description text PATH "$.description"'],
       ARRAY['id', '_type', '_schema', '_required', '_properties', '_description'])
       FROM s9 WHERE json_depth(c1) > 1 ORDER BY 1;
                                                                                                                                           mysql_json_table                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ("http://json-schema.org/geo","object","http://json-schema.org/draft-04/schema#","[\"latitude\", \"longitude\"]","{\"latitude\": {\"type\": \"number\", \"maximum\": 90, \"minimum\": -90}, \"longitude\": {\"type\": \"number\", \"maximum\": 180, \"minimum\": -180}}","A geographical coordinate")
 ("http://json-schema.org/geo","object","http://json-schema.org/draft-04/schema#",,"{\"latitude\": {\"type\": \"number\", \"maximum\": 9, \"minimum\": -9}, \"longitude\": {\"type\": \"number\", \"maximum\": 18, \"minimum\": -18}}","A geographical coordinate")
(2 rows)

--Testcase 4188:
CREATE TABLE loc_tbl (
  id text,
  _type text,
  _schema text,
  _required json,
  _properties json,
  _description text
);
-- select mysql_json_table (pushed down constraints, result, access record)
--Testcase 4189:
SELECT id, _type FROM (
  SELECT (mysql_json_table(c1,'$',
          ARRAY['id VARCHAR(100) PATH "$.id"', '_type text PATH "$.type"', '_schema text PATH "$.$schema"', '_required json PATH "$.required"', '_properties json PATH "$.properties"', '_description text PATH "$.description"'],
          ARRAY['id', '_type', '_schema', '_required', '_properties', '_description'])::loc_tbl).*
          FROM s9 WHERE json_depth(c1) > 1
) t;
             id             | _type  
----------------------------+--------
 http://json-schema.org/geo | object
 http://json-schema.org/geo | object
(2 rows)

--Testcase 4190:
DROP TABLE loc_tbl;
-- mysql_json_table with nested path (explain)
--Testcase 4191:
EXPLAIN VERBOSE
SELECT mysql_json_table(c1,'$',
       ARRAY['id VARCHAR(100) PATH "$.id"', 'NESTED PATH "$.properties.*" COLUMNS(maximum int PATH "$.maximum", minimum int PATH "$.minimum")'],
       ARRAY['id', 'maximum', 'minimum']), c1
       FROM s9;
                                                                                                                                                                                                             QUERY PLAN                                                                                                                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s9  (cost=200.00..2131.28 rows=6826 width=64)
   Output: (mysql_json_table(c1, '$'::text, '{"id VARCHAR(100) PATH \"$.id\"","NESTED PATH \"$.properties.*\" COLUMNS(maximum int PATH \"$.maximum\", minimum int PATH \"$.minimum\")"}'::text[], '{id,maximum,minimum}'::text[])), c1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT  CONCAT('(', CONCAT_WS(',',  IF(ISNULL(r2.id), '', JSON_QUOTE(CONCAT(r2.id))),  IF(ISNULL(r2.maximum), '', JSON_QUOTE(CONCAT(r2.maximum))),  IF(ISNULL(r2.minimum), '', JSON_QUOTE(CONCAT(r2.minimum)))), ')'), `c1` FROM `test`.`s92`, JSON_TABLE(`c1`,'$' COLUMNS(id VARCHAR(100) PATH "$.id", NESTED PATH "$.properties.*" COLUMNS(maximum int PATH "$.maximum", minimum int PATH "$.minimum"))) AS r2
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_table(c1, '$'::text, E'{"id VARCHAR(100) PATH \\"$.id\\"","NESTED PATH \\"$.properties.*\\" COLUMNS(maximum int PATH \\"$.maximum\\", minimum int PATH \\"$.minimum\\")"}'::text[], '{id,maximum,minimum}'::text[]), c1 FROM public.s91mysql
(7 rows)

-- mysql_json_table with nested path (value)
--Testcase 4192:
SELECT mysql_json_table(c1,'$',
       ARRAY['id VARCHAR(100) PATH "$.id"', 'NESTED PATH "$.properties.*" COLUMNS(maximum int PATH "$.maximum", minimum int PATH "$.minimum")'],
       ARRAY['id', 'maximum', 'minimum']), c1
       FROM s9 ORDER BY 1;
              mysql_json_table               |                                                                                                                                                                        c1                                                                                                                                                                        
---------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ("http://json-schema.org/geo","180","-180") | {"id": "http://json-schema.org/geo", "type": "object", "$schema": "http://json-schema.org/draft-04/schema#", "required": ["latitude", "longitude"], "properties": {"latitude": {"type": "number", "maximum": 90, "minimum": -90}, "longitude": {"type": "number", "maximum": 180, "minimum": -180}}, "description": "A geographical coordinate"}
 ("http://json-schema.org/geo","18","-18")   | {"id": "http://json-schema.org/geo", "type": "object", "$schema": "http://json-schema.org/draft-04/schema#", "properties": {"latitude": {"type": "number", "maximum": 9, "minimum": -9}, "longitude": {"type": "number", "maximum": 18, "minimum": -18}}, "description": "A geographical coordinate"}
 ("http://json-schema.org/geo","90","-90")   | {"id": "http://json-schema.org/geo", "type": "object", "$schema": "http://json-schema.org/draft-04/schema#", "required": ["latitude", "longitude"], "properties": {"latitude": {"type": "number", "maximum": 90, "minimum": -90}, "longitude": {"type": "number", "maximum": 180, "minimum": -180}}, "description": "A geographical coordinate"}
 ("http://json-schema.org/geo","9","-9")     | {"id": "http://json-schema.org/geo", "type": "object", "$schema": "http://json-schema.org/draft-04/schema#", "properties": {"latitude": {"type": "number", "maximum": 9, "minimum": -9}, "longitude": {"type": "number", "maximum": 18, "minimum": -18}}, "description": "A geographical coordinate"}
(4 rows)

--Testcase 4193:
CREATE TABLE loc_tbl (
  id text,
  maximum int,
  minimum int
);
-- mysql_json_table with nested path (value, access record)
--Testcase 4194:
SELECT (t1::loc_tbl).*, c1 FROM (
SELECT mysql_json_table(c1,'$',
       ARRAY['id VARCHAR(100) PATH "$.id"', 'NESTED PATH "$.properties.*" COLUMNS(maximum int PATH "$.maximum", minimum int PATH "$.minimum")'],
       ARRAY['id', 'maximum', 'minimum']) AS t1, c1
       FROM s9
) t ORDER BY 1, 2;
             id             | maximum | minimum |                                                                                                                                                                        c1                                                                                                                                                                        
----------------------------+---------+---------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 http://json-schema.org/geo |       9 |      -9 | {"id": "http://json-schema.org/geo", "type": "object", "$schema": "http://json-schema.org/draft-04/schema#", "properties": {"latitude": {"type": "number", "maximum": 9, "minimum": -9}, "longitude": {"type": "number", "maximum": 18, "minimum": -18}}, "description": "A geographical coordinate"}
 http://json-schema.org/geo |      18 |     -18 | {"id": "http://json-schema.org/geo", "type": "object", "$schema": "http://json-schema.org/draft-04/schema#", "properties": {"latitude": {"type": "number", "maximum": 9, "minimum": -9}, "longitude": {"type": "number", "maximum": 18, "minimum": -18}}, "description": "A geographical coordinate"}
 http://json-schema.org/geo |      90 |     -90 | {"id": "http://json-schema.org/geo", "type": "object", "$schema": "http://json-schema.org/draft-04/schema#", "required": ["latitude", "longitude"], "properties": {"latitude": {"type": "number", "maximum": 90, "minimum": -90}, "longitude": {"type": "number", "maximum": 180, "minimum": -180}}, "description": "A geographical coordinate"}
 http://json-schema.org/geo |     180 |    -180 | {"id": "http://json-schema.org/geo", "type": "object", "$schema": "http://json-schema.org/draft-04/schema#", "required": ["latitude", "longitude"], "properties": {"latitude": {"type": "number", "maximum": 90, "minimum": -90}, "longitude": {"type": "number", "maximum": 180, "minimum": -180}}, "description": "A geographical coordinate"}
(4 rows)

--Testcase 4195:
DROP TABLE loc_tbl;
-- select mysql_json_table constant argument (explain)
--Testcase 4196:
EXPLAIN VERBOSE
SELECT id, mysql_json_table('[{"x":2,"y":"8"},{"x":"3","y":"7"},{"x":"4","y":6}]','$[*]',
       ARRAY['xval VARCHAR(100) PATH "$.x"', ' yval VARCHAR(100) PATH "$.y"'],
       ARRAY['xval', 'yval'])
       FROM s9 WHERE id = 0;
                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s9  (cost=200.00..314.50 rows=34 width=36)
   Output: id, (mysql_json_table('[{"x":2,"y":"8"},{"x":"3","y":"7"},{"x":"4","y":6}]'::json, '$[*]'::text, '{"xval VARCHAR(100) PATH \"$.x\""," yval VARCHAR(100) PATH \"$.y\""}'::text[], '{xval,yval}'::text[]))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT `id`,  CONCAT('(', CONCAT_WS(',',  IF(ISNULL(r2.xval), '', JSON_QUOTE(CONCAT(r2.xval))),  IF(ISNULL(r2.yval), '', JSON_QUOTE(CONCAT(r2.yval)))), ')') FROM `test`.`s92`, JSON_TABLE(CAST('[{"x":2,"y":"8"},{"x":"3","y":"7"},{"x":"4","y":6}]' AS JSON),'$[*]' COLUMNS(xval VARCHAR(100) PATH "$.x",  yval VARCHAR(100) PATH "$.y")) AS r2 WHERE ((`id` = 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT id, public.mysql_json_table('[{"x":2,"y":"8"},{"x":"3","y":"7"},{"x":"4","y":6}]'::json, '$[*]'::text, E'{"xval VARCHAR(100) PATH \\"$.x\\""," yval VARCHAR(100) PATH \\"$.y\\""}'::text[], '{xval,yval}'::text[]) FROM public.s91mysql WHERE ((id = 0))
(7 rows)

-- select mysql_json_table constant argument (result)
--Testcase 4197:
SELECT id, mysql_json_table('[{"x":2,"y":"8"},{"x":"3","y":"7"},{"x":"4","y":6}]','$[*]',
       ARRAY['xval VARCHAR(100) PATH "$.x"', ' yval VARCHAR(100) PATH "$.y"'],
       ARRAY['xval', 'yval'])
       FROM s9 WHERE id = 0;
 id | mysql_json_table 
----+------------------
  0 | ("2","8")
  0 | ("3","7")
  0 | ("4","6")
(3 rows)

--Testcase 4198:
CREATE TABLE loc_tbl (
  xval int,
  yval int
);
-- select mysql_json_table constant argument (result)
--Testcase 4199:
SELECT (t1::loc_tbl).*, id FROM (
SELECT id, mysql_json_table('[{"x":2,"y":"8"},{"x":"3","y":"7"},{"x":"4","y":6}]','$[*]',
       ARRAY['xval VARCHAR(100) PATH "$.x"', ' yval VARCHAR(100) PATH "$.y"'],
       ARRAY['xval', 'yval']) AS t1, c1
       FROM s9 WHERE id = 0
) t;
 xval | yval | id 
------+------+----
    2 |    8 |  0
    3 |    7 |  0
    4 |    6 |  0
(3 rows)

--Testcase 4200:
DROP TABLE loc_tbl;
-- JSON_TYPE()
-- select json_type (builtin function, explain)
--Testcase 4201:
EXPLAIN VERBOSE
SELECT json_type(c1), json_type(json_build_array(c1, '1')), json_type(json_build_object('a', '1', 'b', c2)),json_type('{"a":1,"b":10,"d":10}'),json_type('[1,3,5,7]') FROM s8;
                                                                                                                         QUERY PLAN                                                                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8991.41 rows=6826 width=160)
   Output: (json_type(c1)), (json_type(json_build_array(c1, '1'))), (json_type(json_build_object('a', '1', 'b', c2))), (json_type('{"a":1,"b":10,"d":10}'::json)), (json_type('[1,3,5,7]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_type(`c1`), json_type(json_array(`c1`, '1')), json_type(json_object('a', '1', 'b', `c2`)), json_type(CAST('{"a":1,"b":10,"d":10}' AS JSON)), json_type(CAST('[1,3,5,7]' AS JSON)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_type(c1), public.json_type(json_build_array(c1, '1')), public.json_type(json_build_object('a', '1', 'b', c2)), public.json_type('{"a":1,"b":10,"d":10}'::json), public.json_type('[1,3,5,7]'::json) FROM public.s81mysql
(7 rows)

-- select json_type (builtin function, result)
--Testcase 4202:
SELECT * FROM (
SELECT id, json_type(c1), json_type(json_build_array(c1, '1')), json_type(json_build_object('a', '1', 'b', c2)),json_type('{"a":1,"b":10,"d":10}'),json_type('[1,3,5,7]') FROM s8
) AS t ORDER BY 1;
 id | json_type | json_type | json_type | json_type | json_type 
----+-----------+-----------+-----------+-----------+-----------
  0 | ARRAY     | ARRAY     | OBJECT    | OBJECT    | ARRAY
  1 | ARRAY     | ARRAY     | OBJECT    | OBJECT    | ARRAY
  2 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
  3 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
  4 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
  5 | ARRAY     | ARRAY     | OBJECT    | OBJECT    | ARRAY
(6 rows)

-- select json_type (builtin function, not pushdown constraints, explain)
--Testcase 4203:
EXPLAIN VERBOSE
SELECT json_type(c1), json_type(json_build_array(c1, '1')), json_type(json_build_object('a', '1', 'b', c2)),json_type('{"a":1,"b":10,"d":10}'),json_type('[1,3,5,7]') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                           QUERY PLAN                                                                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..433.40 rows=34 width=160)
   Output: (json_type(c1)), (json_type(json_build_array(c1, '1'))), (json_type(json_build_object('a', '1', 'b', c2))), (json_type('{"a":1,"b":10,"d":10}'::json)), (json_type('[1,3,5,7]'::json))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_type(`c1`), json_type(json_array(`c1`, '1')), json_type(json_object('a', '1', 'b', `c2`)), json_type(CAST('{"a":1,"b":10,"d":10}' AS JSON)), json_type(CAST('[1,3,5,7]' AS JSON)), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_type(c1), public.json_type(json_build_array(c1, '1')), public.json_type(json_build_object('a', '1', 'b', c2)), public.json_type('{"a":1,"b":10,"d":10}'::json), public.json_type('[1,3,5,7]'::json), id FROM public.s81mysql
(8 rows)

-- select json_type (builtin function, not pushdown constraints, result)
--Testcase 4204:
SELECT * FROM (
SELECT id, json_type(c1), json_type(json_build_array(c1, '1')), json_type(json_build_object('a', '1', 'b', c2)),json_type('{"a":1,"b":10,"d":10}'),json_type('[1,3,5,7]') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_type | json_type | json_type | json_type | json_type 
----+-----------+-----------+-----------+-----------+-----------
  2 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
(1 row)

-- select json_type (builtin function, pushdown constraints, explain)
--Testcase 4205:
EXPLAIN VERBOSE
SELECT json_type(c1), json_type(json_build_array(c1, '1')), json_type(json_build_object('a', '1', 'b', c2)),json_type('{"a":1,"b":10,"d":10}'),json_type('[1,3,5,7]') FROM s8 WHERE id != 0;
                                                                                                                                  QUERY PLAN                                                                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8965.12 rows=6792 width=160)
   Output: (json_type(c1)), (json_type(json_build_array(c1, '1'))), (json_type(json_build_object('a', '1', 'b', c2))), (json_type('{"a":1,"b":10,"d":10}'::json)), (json_type('[1,3,5,7]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_type(`c1`), json_type(json_array(`c1`, '1')), json_type(json_object('a', '1', 'b', `c2`)), json_type(CAST('{"a":1,"b":10,"d":10}' AS JSON)), json_type(CAST('[1,3,5,7]' AS JSON)) FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_type(c1), public.json_type(json_build_array(c1, '1')), public.json_type(json_build_object('a', '1', 'b', c2)), public.json_type('{"a":1,"b":10,"d":10}'::json), public.json_type('[1,3,5,7]'::json) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_type (builtin function, pushdown constraints, result)
--Testcase 4206:
SELECT * FROM (
SELECT id, json_type(c1), json_type(json_build_array(c1, '1')), json_type(json_build_object('a', '1', 'b', c2)),json_type('{"a":1,"b":10,"d":10}'),json_type('[1,3,5,7]') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | json_type | json_type | json_type | json_type | json_type 
----+-----------+-----------+-----------+-----------+-----------
  1 | ARRAY     | ARRAY     | OBJECT    | OBJECT    | ARRAY
  2 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
  3 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
  4 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
  5 | ARRAY     | ARRAY     | OBJECT    | OBJECT    | ARRAY
(5 rows)

-- select json_type (builtin function, json_type in constraints, explain)
--Testcase 4207:
EXPLAIN VERBOSE
SELECT json_type(c1), json_type(json_build_array(c1, '1')), json_type(json_build_object('a', '1', 'b', c2)),json_type('{"a":1,"b":10,"d":10}'),json_type('[1,3,5,7]') FROM s8 WHERE json_type(c1) NOT LIKE '$';
                                                                                                                                                QUERY PLAN                                                                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..10671.62 rows=6792 width=160)
   Output: (json_type(c1)), (json_type(json_build_array(c1, '1'))), (json_type(json_build_object('a', '1', 'b', c2))), (json_type('{"a":1,"b":10,"d":10}'::json)), (json_type('[1,3,5,7]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_type(`c1`), json_type(json_array(`c1`, '1')), json_type(json_object('a', '1', 'b', `c2`)), json_type(CAST('{"a":1,"b":10,"d":10}' AS JSON)), json_type(CAST('[1,3,5,7]' AS JSON)) FROM `test`.`s82` WHERE ((json_type(`c1`) NOT LIKE BINARY '$'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_type(c1), public.json_type(json_build_array(c1, '1')), public.json_type(json_build_object('a', '1', 'b', c2)), public.json_type('{"a":1,"b":10,"d":10}'::json), public.json_type('[1,3,5,7]'::json) FROM public.s81mysql WHERE ((public.json_type(c1) !~~ '$'::text))
(7 rows)

-- select json_type (builtin function, json_type in constraints, result)
--Testcase 4208:
SELECT * FROM (
SELECT id, json_type(c1), json_type(json_build_array(c1, '1')), json_type(json_build_object('a', '1', 'b', c2)),json_type('{"a":1,"b":10,"d":10}'),json_type('[1,3,5,7]') FROM s8 WHERE json_type(c1) NOT LIKE '$'
) AS t ORDER BY 1;
 id | json_type | json_type | json_type | json_type | json_type 
----+-----------+-----------+-----------+-----------+-----------
  0 | ARRAY     | ARRAY     | OBJECT    | OBJECT    | ARRAY
  1 | ARRAY     | ARRAY     | OBJECT    | OBJECT    | ARRAY
  2 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
  3 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
  4 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
  5 | ARRAY     | ARRAY     | OBJECT    | OBJECT    | ARRAY
(6 rows)

-- select json_type (builtin function, json_type in constraints, explain)
--Testcase 4209:
EXPLAIN VERBOSE
SELECT json_type(c1), json_type(json_build_array(c1, '1')), json_type(json_build_object('a', '1', 'b', c2)),json_type('{"a":1,"b":10,"d":10}'),json_type('[1,3,5,7]') FROM s8 where json_type('[1,3,5,7]') LIKE 'ARRAY';
                                                                                                                                                         QUERY PLAN                                                                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2055.17 rows=34 width=160)
   Output: (json_type(c1)), (json_type(json_build_array(c1, '1'))), (json_type(json_build_object('a', '1', 'b', c2))), (json_type('{"a":1,"b":10,"d":10}'::json)), (json_type('[1,3,5,7]'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_type(`c1`), json_type(json_array(`c1`, '1')), json_type(json_object('a', '1', 'b', `c2`)), json_type(CAST('{"a":1,"b":10,"d":10}' AS JSON)), json_type(CAST('[1,3,5,7]' AS JSON)) FROM `test`.`s82` WHERE ((json_type(CAST('[1,3,5,7]' AS JSON)) LIKE BINARY 'ARRAY'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_type(c1), public.json_type(json_build_array(c1, '1')), public.json_type(json_build_object('a', '1', 'b', c2)), public.json_type('{"a":1,"b":10,"d":10}'::json), public.json_type('[1,3,5,7]'::json) FROM public.s81mysql WHERE ((public.json_type('[1,3,5,7]'::json) ~~ 'ARRAY'::text))
(7 rows)

-- select json_type (builtin function, json_type in constraints, result)
--Testcase 4210:
SELECT * FROM (
SELECT id, json_type(c1), json_type(json_build_array(c1, '1')), json_type(json_build_object('a', '1', 'b', c2)),json_type('{"a":1,"b":10,"d":10}'),json_type('[1,3,5,7]') FROM s8 where json_type('[1,3,5,7]') LIKE 'ARRAY'
) AS t ORDER BY 1;
 id | json_type | json_type | json_type | json_type | json_type 
----+-----------+-----------+-----------+-----------+-----------
  0 | ARRAY     | ARRAY     | OBJECT    | OBJECT    | ARRAY
  1 | ARRAY     | ARRAY     | OBJECT    | OBJECT    | ARRAY
  2 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
  3 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
  4 | OBJECT    | ARRAY     | OBJECT    | OBJECT    | ARRAY
  5 | ARRAY     | ARRAY     | OBJECT    | OBJECT    | ARRAY
(6 rows)

-- select json_type as nest function with agg (not pushdown, explain)
--Testcase 4211:
EXPLAIN VERBOSE
SELECT sum(id),json_type(json_build_object('a', '1', 'b',sum(id))) FROM s8;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_type(json_build_object('a', '1', 'b', (sum(id))))
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_type as nest function with agg (not pushdown, result, error)
--Testcase 4212:
SELECT sum(id),json_type(json_build_object('a', '1', 'b',sum(id))) FROM s8;
ERROR:  stub json_type(json) is called
CONTEXT:  PL/pgSQL function json_type(json) line 3 at RAISE
-- select json_type with non pushdown func and explicit constant (EXPLAIN)
--Testcase 4213:
EXPLAIN VERBOSE
SELECT json_type(json_build_object('a', '1', 'b', c2)), pi(), 4.1 FROM s8;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=72)
   Output: (json_type(json_build_object('a', '1', 'b', c2))), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_type(json_object('a', '1', 'b', `c2`)), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_type(json_build_object('a', '1', 'b', c2)), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_type with non pushdown func and explicit constant (result)
--Testcase 4214:
SELECT * FROM (
SELECT id, json_type(json_build_object('a', '1', 'b', c2)), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_type |        pi         | ?column? 
----+-----------+-------------------+----------
  0 | OBJECT    | 3.141592653589793 |      4.1
  1 | OBJECT    | 3.141592653589793 |      4.1
  2 | OBJECT    | 3.141592653589793 |      4.1
  3 | OBJECT    | 3.141592653589793 |      4.1
  4 | OBJECT    | 3.141592653589793 |      4.1
  5 | OBJECT    | 3.141592653589793 |      4.1
(6 rows)

-- select json_type with order by index (result)
--Testcase 4215:
SELECT id, json_type(c1) FROM s8 ORDER BY 2, 1;
 id | json_type 
----+-----------
  0 | ARRAY
  1 | ARRAY
  5 | ARRAY
  2 | OBJECT
  3 | OBJECT
  4 | OBJECT
(6 rows)

-- select json_type with order by index (result)
--Testcase 4216:
SELECT id, json_type(c1) FROM s8 ORDER BY 1, 2;
 id | json_type 
----+-----------
  0 | ARRAY
  1 | ARRAY
  2 | OBJECT
  3 | OBJECT
  4 | OBJECT
  5 | ARRAY
(6 rows)

-- select json_type with group by (EXPLAIN)
--Testcase 4217:
EXPLAIN VERBOSE
SELECT count(id), json_type(c1) FROM s8 group by json_type(c1);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
   Output: count(id), (json_type(c1))
   Group Key: (json_type(s8.c1))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=36)
         Output: (json_type(c1)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_type(`c1`), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_type(c1), id FROM public.s81mysql
(10 rows)

-- select json_type with group by (result)
--Testcase 4218:
SELECT * FROM (
SELECT count(id), json_type(c1) FROM s8 group by json_type(c1)
) AS t ORDER BY 1;
 count | json_type 
-------+-----------
     3 | ARRAY
     3 | OBJECT
(2 rows)

-- select json_type with group by index (result)
--Testcase 4219:
SELECT * FROM (
SELECT id, json_type(c1) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_type 
----+-----------
  0 | ARRAY
  1 | ARRAY
  2 | OBJECT
  3 | OBJECT
  4 | OBJECT
  5 | ARRAY
(6 rows)

-- select json_type with group by index (result)
--Testcase 4220:
SELECT * FROM (
SELECT id, json_type(c1) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_type 
----+-----------
  0 | ARRAY
  1 | ARRAY
  2 | OBJECT
  3 | OBJECT
  4 | OBJECT
  5 | ARRAY
(6 rows)

-- select json_type with group by having (EXPLAIN)
--Testcase 4221:
EXPLAIN VERBOSE
SELECT count(c2), json_type(c1) FROM s8 group by json_type(c1) HAVING count(c2) > 0;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=40)
   Output: count(c2), (json_type(c1))
   Group Key: (json_type(s8.c1))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=36)
         Output: (json_type(c1)), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_type(`c1`), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_type(c1), c2 FROM public.s81mysql
(11 rows)

-- select json_type with group by having (result)
--Testcase 4222:
SELECT * FROM (
SELECT count(c2), json_type(c1) FROM s8 group by json_type(c1) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_type 
-------+-----------
     3 | ARRAY
     3 | OBJECT
(2 rows)

-- select json_type with group by index having (result)
--Testcase 4223:
SELECT * FROM (
SELECT c2, json_type(c1) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_type 
----+-----------
  1 | ARRAY
  2 | ARRAY
  3 | OBJECT
  4 | OBJECT
  5 | OBJECT
  5 | ARRAY
(6 rows)

-- select json_type with group by index having (result)
--Testcase 4224:
SELECT * FROM (
SELECT c2, json_type(c1) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_type 
----+-----------
  1 | ARRAY
  2 | ARRAY
  3 | OBJECT
  4 | OBJECT
  5 | OBJECT
  5 | ARRAY
(6 rows)

-- select json_type and as
--Testcase 4225:
SELECT * FROM (
SELECT id, json_type(json_build_object('a', '1', 'b', c2)) as json_type1 FROM s8
) AS t ORDER BY 1;
 id | json_type1 
----+------------
  0 | OBJECT
  1 | OBJECT
  2 | OBJECT
  3 | OBJECT
  4 | OBJECT
  5 | OBJECT
(6 rows)

-- select json_unquote (builtin function, explain)
--Testcase 4226:
EXPLAIN VERBOSE
SELECT json_unquote(c3), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM s8;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7250.78 rows=6826 width=128)
   Output: (json_unquote(c3)), (json_unquote('null'::text)), (json_unquote('"null"'::text)), (json_unquote('[1, 2, 3]'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_unquote(`c3`), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_unquote(c3), public.json_unquote('null'::text), public.json_unquote('"null"'::text), public.json_unquote('[1, 2, 3]'::text) FROM public.s81mysql
(7 rows)

-- select json_unquote (builtin function, result)
--Testcase 4227:
SELECT * FROM (
SELECT id, json_unquote(c3), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM s8
) AS t ORDER BY 1;
 id | json_unquote | json_unquote | json_unquote | json_unquote 
----+--------------+--------------+--------------+--------------
  0 | This         | null         | null         | [1, 2, 3]
  1 | is           | null         | null         | [1, 2, 3]
  2 | text         | null         | null         | [1, 2, 3]
  3 | scalar       | null         | null         | [1, 2, 3]
  4 | scalar       | null         | null         | [1, 2, 3]
  5 | scalar       | null         | null         | [1, 2, 3]
(6 rows)

-- select json_unquote (builtin function, not pushdown constraints, explain)
--Testcase 4228:
EXPLAIN VERBOSE
SELECT json_unquote(c3), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM s8 WHERE to_hex(id) = '2';
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..424.73 rows=34 width=128)
   Output: (json_unquote(c3)), (json_unquote('null'::text)), (json_unquote('"null"'::text)), (json_unquote('[1, 2, 3]'::text))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_unquote(`c3`), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]'), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_unquote(c3), public.json_unquote('null'::text), public.json_unquote('"null"'::text), public.json_unquote('[1, 2, 3]'::text), id FROM public.s81mysql
(8 rows)

-- select json_unquote (builtin function, not pushdown constraints, result)
--Testcase 4229:
SELECT * FROM (
SELECT id, json_unquote(c3), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_unquote | json_unquote | json_unquote | json_unquote 
----+--------------+--------------+--------------+--------------
  2 | text         | null         | null         | [1, 2, 3]
(1 row)

-- select json_unquote (builtin function, pushdown constraints, explain)
--Testcase 4230:
EXPLAIN VERBOSE
SELECT json_unquote(c3), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM s8 WHERE id != 0;
                                                                                              QUERY PLAN                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7233.16 rows=6792 width=128)
   Output: (json_unquote(c3)), (json_unquote('null'::text)), (json_unquote('"null"'::text)), (json_unquote('[1, 2, 3]'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_unquote(`c3`), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_unquote(c3), public.json_unquote('null'::text), public.json_unquote('"null"'::text), public.json_unquote('[1, 2, 3]'::text) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_unquote (builtin function, pushdown constraints, result)
--Testcase 4231:
SELECT * FROM (
SELECT id, json_unquote(c3), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | json_unquote | json_unquote | json_unquote | json_unquote 
----+--------------+--------------+--------------+--------------
  1 | is           | null         | null         | [1, 2, 3]
  2 | text         | null         | null         | [1, 2, 3]
  3 | scalar       | null         | null         | [1, 2, 3]
  4 | scalar       | null         | null         | [1, 2, 3]
  5 | scalar       | null         | null         | [1, 2, 3]
(5 rows)

-- select json_unquote (builtin function, json_unquote in constraints, explain)
--Testcase 4232:
EXPLAIN VERBOSE
SELECT json_unquote(c3), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM s8 WHERE json_unquote(c3) NOT LIKE 'text';
                                                                                                               QUERY PLAN                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8939.67 rows=6792 width=128)
   Output: (json_unquote(c3)), (json_unquote('null'::text)), (json_unquote('"null"'::text)), (json_unquote('[1, 2, 3]'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_unquote(`c3`), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM `test`.`s82` WHERE ((json_unquote(`c3`) NOT LIKE BINARY 'text'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_unquote(c3), public.json_unquote('null'::text), public.json_unquote('"null"'::text), public.json_unquote('[1, 2, 3]'::text) FROM public.s81mysql WHERE ((public.json_unquote(c3) !~~ 'text'::text))
(7 rows)

-- select json_unquote (builtin function, json_unquote in constraints, result)
--Testcase 4233:
SELECT * FROM (
SELECT id, json_unquote(c3), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM s8 WHERE json_unquote(c3) NOT LIKE 'text'
) AS t ORDER BY 1;
 id | json_unquote | json_unquote | json_unquote | json_unquote 
----+--------------+--------------+--------------+--------------
  0 | This         | null         | null         | [1, 2, 3]
  1 | is           | null         | null         | [1, 2, 3]
  3 | scalar       | null         | null         | [1, 2, 3]
  4 | scalar       | null         | null         | [1, 2, 3]
  5 | scalar       | null         | null         | [1, 2, 3]
(5 rows)

-- select json_unquote (builtin function, json_unquote in constraints, explain)
--Testcase 4234:
EXPLAIN VERBOSE
SELECT json_unquote(c3), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM s8 WHERE json_unquote('[1, 2, 3]') LIKE '[1, 2, 3]';
                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2046.50 rows=34 width=128)
   Output: (json_unquote(c3)), (json_unquote('null'::text)), (json_unquote('"null"'::text)), (json_unquote('[1, 2, 3]'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_unquote(`c3`), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM `test`.`s82` WHERE ((json_unquote('[1, 2, 3]') LIKE BINARY '[1, 2, 3]'))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_unquote(c3), public.json_unquote('null'::text), public.json_unquote('"null"'::text), public.json_unquote('[1, 2, 3]'::text) FROM public.s81mysql WHERE ((public.json_unquote('[1, 2, 3]'::text) ~~ '[1, 2, 3]'::text))
(7 rows)

-- select json_unquote (builtin function, json_unquote in constraints, result)
--Testcase 4235:
SELECT * FROM (
SELECT id, json_unquote(c3), json_unquote('null'), json_unquote('"null"'), json_unquote('[1, 2, 3]') FROM s8 WHERE json_unquote('[1, 2, 3]') LIKE '[1, 2, 3]'
) AS t ORDER BY 1;
 id | json_unquote | json_unquote | json_unquote | json_unquote 
----+--------------+--------------+--------------+--------------
  0 | This         | null         | null         | [1, 2, 3]
  1 | is           | null         | null         | [1, 2, 3]
  2 | text         | null         | null         | [1, 2, 3]
  3 | scalar       | null         | null         | [1, 2, 3]
  4 | scalar       | null         | null         | [1, 2, 3]
  5 | scalar       | null         | null         | [1, 2, 3]
(6 rows)

-- select json_unquote as nest function with agg (not pushdown, explain)
--Testcase 4236:
EXPLAIN VERBOSE
SELECT sum(id), json_unquote('[1, 2, 3]') FROM s8;
                      QUERY PLAN                      
------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=40)
   Output: (sum(id)), json_unquote('[1, 2, 3]'::text)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_unquote as nest function with agg (not pushdown, result, error)
--Testcase 4237:
SELECT sum(id), json_unquote('[1, 2, 3]') FROM s8;
ERROR:  stub json_unquote(text) is called
CONTEXT:  PL/pgSQL function json_unquote(text) line 3 at RAISE
-- select json_unquote with non pushdown func and explicit constant (EXPLAIN)
--Testcase 4238:
EXPLAIN VERBOSE
SELECT json_unquote('null'), pi(), 4.1 FROM s8;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (json_unquote('null'::text)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_unquote('null'), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_unquote('null'::text), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_unquote with non pushdown func and explicit constant (result)
--Testcase 4239:
SELECT * FROM (
SELECT id, json_unquote('null'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_unquote |        pi         | ?column? 
----+--------------+-------------------+----------
  0 | null         | 3.141592653589793 |      4.1
  1 | null         | 3.141592653589793 |      4.1
  2 | null         | 3.141592653589793 |      4.1
  3 | null         | 3.141592653589793 |      4.1
  4 | null         | 3.141592653589793 |      4.1
  5 | null         | 3.141592653589793 |      4.1
(6 rows)

-- select json_unquote with order by (EXPLAIN)
--Testcase 4240:
EXPLAIN VERBOSE
SELECT id,  json_unquote(c3) FROM s8 ORDER BY json_unquote(c3);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Sort  (cost=2565.99..2583.05 rows=6826 width=36)
   Output: id, (json_unquote(c3))
   Sort Key: (json_unquote(s8.c3))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=36)
         Output: id, (json_unquote(c3))
         Node: mysql_svr / Status: Alive
           Sort push-down: no
           Local server startup cost: 10
           Remote query: SELECT `id`, json_unquote(`c3`) FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT id, public.json_unquote(c3) FROM public.s81mysql
(12 rows)

-- select json_unquote with order by (result)
--Testcase 4241:
SELECT id,  json_unquote(c3) FROM s8 ORDER BY json_unquote(c3);
 id | json_unquote 
----+--------------
  1 | is
  3 | scalar
  4 | scalar
  5 | scalar
  2 | text
  0 | This
(6 rows)

-- select json_unquote with order by index (result)
--Testcase 4242:
SELECT id,  json_unquote(c3) FROM s8 ORDER BY 2, 1;
 id | json_unquote 
----+--------------
  1 | is
  3 | scalar
  4 | scalar
  5 | scalar
  2 | text
  0 | This
(6 rows)

-- select json_unquote with order by index (result)
--Testcase 4243:
SELECT id,  json_unquote(c3) FROM s8 ORDER BY 1, 2;
 id | json_unquote 
----+--------------
  0 | This
  1 | is
  2 | text
  3 | scalar
  4 | scalar
  5 | scalar
(6 rows)

-- select json_unquote with group by (EXPLAIN)
--Testcase 4244:
EXPLAIN VERBOSE
SELECT count(id), json_unquote(c3) FROM s8 group by json_unquote(c3);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
   Output: count(id), (json_unquote(c3))
   Group Key: (json_unquote(s8.c3))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=36)
         Output: (json_unquote(c3)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_unquote(`c3`), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_unquote(c3), id FROM public.s81mysql
(10 rows)

-- select json_unquote with group by (result)
--Testcase 4245:
SELECT * FROM (
SELECT count(id), json_unquote(c3) FROM s8 group by json_unquote(c3)
) AS t ORDER BY 1;
 count | json_unquote 
-------+--------------
     1 | is
     1 | text
     1 | This
     3 | scalar
(4 rows)

-- select json_unquote with group by index (result)
--Testcase 4246:
SELECT * FROM (
SELECT id,  json_unquote(c3) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_unquote 
----+--------------
  0 | This
  1 | is
  2 | text
  3 | scalar
  4 | scalar
  5 | scalar
(6 rows)

-- select json_unquote with group by index (result)
--Testcase 4247:
SELECT * FROM (
SELECT id,  json_unquote(c3) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_unquote 
----+--------------
  0 | This
  1 | is
  2 | text
  3 | scalar
  4 | scalar
  5 | scalar
(6 rows)

-- select json_unquote with group by having (EXPLAIN)
--Testcase 4248:
EXPLAIN VERBOSE
SELECT count(c2), json_unquote(c3) FROM s8 group by json_unquote(c3) HAVING count(c2) > 0;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=40)
   Output: count(c2), (json_unquote(c3))
   Group Key: (json_unquote(s8.c3))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=36)
         Output: (json_unquote(c3)), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_unquote(`c3`), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_unquote(c3), c2 FROM public.s81mysql
(11 rows)

-- select json_unquote with group by having (result)
--Testcase 4249:
SELECT * FROM (
SELECT count(c2), json_unquote(c3) FROM s8 group by json_unquote(c3) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_unquote 
-------+--------------
     1 | is
     1 | text
     1 | This
     3 | scalar
(4 rows)

-- select json_unquote with group by index having (result)
--Testcase 4250:
SELECT * FROM (
SELECT c2,  json_unquote(c3) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_unquote 
----+--------------
  1 | This
  2 | is
  3 | text
  4 | scalar
  5 | scalar
(5 rows)

-- select json_unquote with group by index having (result)
--Testcase 4251:
SELECT * FROM (
SELECT c2,  json_unquote(c3) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_unquote 
----+--------------
  1 | This
  2 | is
  3 | text
  4 | scalar
  5 | scalar
(5 rows)

-- select json_unquote and as
--Testcase 4252:
SELECT * FROM (
SELECT id, json_unquote('null') as json_unquote1 FROM s8
) AS t ORDER BY 1;
 id | json_unquote1 
----+---------------
  0 | null
  1 | null
  2 | null
  3 | null
  4 | null
  5 | null
(6 rows)

-- select json_valid (builtin function, explain)
--Testcase 4253:
EXPLAIN VERBOSE
SELECT json_valid(c1), json_valid(json_build_array(c1, 'a', c2)), json_valid('{"a": 1, "b": {"c": 30}}') FROM s8;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..5561.34 rows=6826 width=12)
   Output: (json_valid(c1)), (json_valid(json_build_array(c1, 'a', c2))), (json_valid('{"a": 1, "b": {"c": 30}}'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_valid(`c1`), json_valid(json_array(`c1`, 'a', `c2`)), json_valid('{"a": 1, "b": {"c": 30}}') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_valid(c1), public.json_valid(json_build_array(c1, 'a', c2)), public.json_valid('{"a": 1, "b": {"c": 30}}'::text) FROM public.s81mysql
(7 rows)

-- select json_valid (builtin function, result)
--Testcase 4254:
SELECT * FROM (
SELECT id, json_valid(c1), json_valid(json_build_array(c1, 'a', c2)), json_valid('{"a": 1, "b": {"c": 30}}') FROM s8
) AS t ORDER BY 1;
 id | json_valid | json_valid | json_valid 
----+------------+------------+------------
  0 |          1 |          1 |          1
  1 |          1 |          1 |          1
  2 |          1 |          1 |          1
  3 |          1 |          1 |          1
  4 |          1 |          1 |          1
  5 |          1 |          1 |          1
(6 rows)

-- select json_valid (builtin function, not pushdown constraints, explain)
--Testcase 4255:
EXPLAIN VERBOSE
SELECT json_valid(c1), json_valid(json_build_array(c1, 'a', c2)), json_valid('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE to_hex(id) = '2';
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..416.31 rows=34 width=12)
   Output: (json_valid(c1)), (json_valid(json_build_array(c1, 'a', c2))), (json_valid('{"a": 1, "b": {"c": 30}}'::text))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_valid(`c1`), json_valid(json_array(`c1`, 'a', `c2`)), json_valid('{"a": 1, "b": {"c": 30}}'), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_valid(c1), public.json_valid(json_build_array(c1, 'a', c2)), public.json_valid('{"a": 1, "b": {"c": 30}}'::text), id FROM public.s81mysql
(8 rows)

-- select json_valid (builtin function, not pushdown constraints, result)
--Testcase 4256:
SELECT * FROM (
SELECT id, json_valid(c1), json_valid(json_build_array(c1, 'a', c2)), json_valid('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | json_valid | json_valid | json_valid 
----+------------+------------+------------
  2 |          1 |          1 |          1
(1 row)

-- select json_valid (builtin function, pushdown constraints, explain)
--Testcase 4257:
EXPLAIN VERBOSE
SELECT json_valid(c1), json_valid(json_build_array(c1, 'a', c2)), json_valid('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE id != 0;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..5552.14 rows=6792 width=12)
   Output: (json_valid(c1)), (json_valid(json_build_array(c1, 'a', c2))), (json_valid('{"a": 1, "b": {"c": 30}}'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_valid(`c1`), json_valid(json_array(`c1`, 'a', `c2`)), json_valid('{"a": 1, "b": {"c": 30}}') FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_valid(c1), public.json_valid(json_build_array(c1, 'a', c2)), public.json_valid('{"a": 1, "b": {"c": 30}}'::text) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select json_valid (builtin function, pushdown constraints, result)
--Testcase 4258:
SELECT * FROM (
SELECT id, json_valid(c1), json_valid(json_build_array(c1, 'a', c2)), json_valid('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | json_valid | json_valid | json_valid 
----+------------+------------+------------
  1 |          1 |          1 |          1
  2 |          1 |          1 |          1
  3 |          1 |          1 |          1
  4 |          1 |          1 |          1
  5 |          1 |          1 |          1
(5 rows)

-- select json_valid (builtin function, json_valid in constraints, explain)
--Testcase 4259:
EXPLAIN VERBOSE
SELECT json_valid(c1), json_valid(json_build_array(c1, 'a', c2)), json_valid('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE json_valid(c1) != 0;
                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7258.64 rows=6792 width=12)
   Output: (json_valid(c1)), (json_valid(json_build_array(c1, 'a', c2))), (json_valid('{"a": 1, "b": {"c": 30}}'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_valid(`c1`), json_valid(json_array(`c1`, 'a', `c2`)), json_valid('{"a": 1, "b": {"c": 30}}') FROM `test`.`s82` WHERE ((json_valid(`c1`) <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_valid(c1), public.json_valid(json_build_array(c1, 'a', c2)), public.json_valid('{"a": 1, "b": {"c": 30}}'::text) FROM public.s81mysql WHERE ((public.json_valid(c1) <> 0))
(7 rows)

-- select json_valid (builtin function, json_valid in constraints, result)
--Testcase 4260:
SELECT * FROM (
SELECT id, json_valid(c1), json_valid(json_build_array(c1, 'a', c2)), json_valid('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE json_valid(c1) != 0
) AS t ORDER BY 1;
 id | json_valid | json_valid | json_valid 
----+------------+------------+------------
  0 |          1 |          1 |          1
  1 |          1 |          1 |          1
  2 |          1 |          1 |          1
  3 |          1 |          1 |          1
  4 |          1 |          1 |          1
  5 |          1 |          1 |          1
(6 rows)

-- select json_valid (builtin function, json_valid in constraints, explain)
--Testcase 4261:
EXPLAIN VERBOSE
SELECT json_valid(c1), json_valid(json_build_array(c1, 'a', c2)), json_valid('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE json_valid('{"a": 1, "b": {"c": 30}}') = 1;
                                                                                                                 QUERY PLAN                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2038.09 rows=34 width=12)
   Output: (json_valid(c1)), (json_valid(json_build_array(c1, 'a', c2))), (json_valid('{"a": 1, "b": {"c": 30}}'::text))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_valid(`c1`), json_valid(json_array(`c1`, 'a', `c2`)), json_valid('{"a": 1, "b": {"c": 30}}') FROM `test`.`s82` WHERE ((json_valid('{"a": 1, "b": {"c": 30}}') = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_valid(c1), public.json_valid(json_build_array(c1, 'a', c2)), public.json_valid('{"a": 1, "b": {"c": 30}}'::text) FROM public.s81mysql WHERE ((public.json_valid('{"a": 1, "b": {"c": 30}}'::text) = 1))
(7 rows)

-- select json_valid (builtin function, json_valid in constraints, result)
--Testcase 4262:
SELECT * FROM (
SELECT id, json_valid(c1), json_valid(json_build_array(c1, 'a', c2)), json_valid('{"a": 1, "b": {"c": 30}}') FROM s8 WHERE json_valid('{"a": 1, "b": {"c": 30}}') = 1
) AS t ORDER BY 1;
 id | json_valid | json_valid | json_valid 
----+------------+------------+------------
  0 |          1 |          1 |          1
  1 |          1 |          1 |          1
  2 |          1 |          1 |          1
  3 |          1 |          1 |          1
  4 |          1 |          1 |          1
  5 |          1 |          1 |          1
(6 rows)

-- select json_valid as nest function with agg (not pushdown, explain)
--Testcase 4263:
EXPLAIN VERBOSE
SELECT sum(id),json_valid('{"a": 1, "b": {"c": 30}}') FROM s8;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (sum(id)), json_valid('{"a": 1, "b": {"c": 30}}'::text)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select json_valid as nest function with agg (not pushdown, result, error)
--Testcase 4264:
SELECT sum(id),json_valid('{"a": 1, "b": {"c": 30}}') FROM s8;
ERROR:  stub json_valid(text) is called
CONTEXT:  PL/pgSQL function json_valid(text) line 3 at RAISE
-- select json_valid with non pushdown func and explicit constant (EXPLAIN)
--Testcase 4265:
EXPLAIN VERBOSE
SELECT json_valid(json_build_array(c1, 'a', c2)), pi(), 4.1 FROM s8;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2148.35 rows=6826 width=44)
   Output: (json_valid(json_build_array(c1, 'a', c2))), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_valid(json_array(`c1`, 'a', `c2`)), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.json_valid(json_build_array(c1, 'a', c2)), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select json_valid with non pushdown func and explicit constant (result)
--Testcase 4266:
SELECT * FROM (
SELECT id, json_valid(json_build_array(c1, 'a', c2)), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | json_valid |        pi         | ?column? 
----+------------+-------------------+----------
  0 |          1 | 3.141592653589793 |      4.1
  1 |          1 | 3.141592653589793 |      4.1
  2 |          1 | 3.141592653589793 |      4.1
  3 |          1 | 3.141592653589793 |      4.1
  4 |          1 | 3.141592653589793 |      4.1
  5 |          1 | 3.141592653589793 |      4.1
(6 rows)

-- select json_valid with order by index (result)
--Testcase 4267:
SELECT id, json_valid(c1) FROM s8 ORDER BY 2, 1;
 id | json_valid 
----+------------
  0 |          1
  1 |          1
  2 |          1
  3 |          1
  4 |          1
  5 |          1
(6 rows)

-- select json_valid with order by index (result)
--Testcase 4268:
SELECT id, json_valid(c1) FROM s8 ORDER BY 1, 2;
 id | json_valid 
----+------------
  0 |          1
  1 |          1
  2 |          1
  3 |          1
  4 |          1
  5 |          1
(6 rows)

-- select json_valid with group by (EXPLAIN)
--Testcase 4269:
EXPLAIN VERBOSE
SELECT count(id), json_valid(c1) FROM s8 group by json_valid(c1);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
   Output: count(id), (json_valid(c1))
   Group Key: (json_valid(s8.c1))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_valid(c1)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_valid(`c1`), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_valid(c1), id FROM public.s81mysql
(10 rows)

-- select json_valid with group by (result)
--Testcase 4270:
SELECT * FROM (
SELECT count(id), json_valid(c1) FROM s8 group by json_valid(c1)
) AS t ORDER BY 1;
 count | json_valid 
-------+------------
     6 |          1
(1 row)

-- select json_valid with group by index (result)
--Testcase 4271:
SELECT * FROM (
SELECT id, json_valid(c1) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | json_valid 
----+------------
  0 |          1
  1 |          1
  2 |          1
  3 |          1
  4 |          1
  5 |          1
(6 rows)

-- select json_valid with group by index (result)
--Testcase 4272:
SELECT * FROM (
SELECT id, json_valid(c1) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | json_valid 
----+------------
  0 |          1
  1 |          1
  2 |          1
  3 |          1
  4 |          1
  5 |          1
(6 rows)

-- select json_valid with group by having (EXPLAIN)
--Testcase 4273:
EXPLAIN VERBOSE
SELECT count(c2), json_valid(c1) FROM s8 group by json_valid(c1) HAVING count(c2) > 0;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=12)
   Output: count(c2), (json_valid(c1))
   Group Key: (json_valid(s8.c1))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (json_valid(c1)), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_valid(`c1`), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.json_valid(c1), c2 FROM public.s81mysql
(11 rows)

-- select json_valid with group by having (result)
--Testcase 4274:
SELECT * FROM (
SELECT count(c2), json_valid(c1) FROM s8 group by json_valid(c1) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | json_valid 
-------+------------
     6 |          1
(1 row)

-- select json_valid with group by index having (result)
--Testcase 4275:
SELECT * FROM (
SELECT c2, json_valid(c1) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_valid 
----+------------
  1 |          1
  2 |          1
  3 |          1
  4 |          1
  5 |          1
(5 rows)

-- select json_valid with group by index having (result)
--Testcase 4276:
SELECT * FROM (
SELECT c2, json_valid(c1) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | json_valid 
----+------------
  1 |          1
  2 |          1
  3 |          1
  4 |          1
  5 |          1
(5 rows)

-- select json_valid and as
--Testcase 4277:
SELECT * FROM (
SELECT id, json_valid(json_build_array(c1, 'a', c2)) as json_valid1 FROM s8
) AS t ORDER BY 1;
 id | json_valid1 
----+-------------
  0 |           1
  1 |           1
  2 |           1
  3 |           1
  4 |           1
  5 |           1
(6 rows)

-- select mysql_json_value (stub function, explain)
--Testcase 4278:
EXPLAIN VERBOSE
SELECT mysql_json_value(c1, '$.a'), mysql_json_value(c1, '$[1]'), mysql_json_value('{"item": "shoes", "price": "49.95"}', '$.price', 'returning decimal(10, 1)')::numeric FROM s8;
                                                                                                                            QUERY PLAN                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..5578.41 rows=6826 width=96)
   Output: (mysql_json_value(c1, '$.a'::text)), (mysql_json_value(c1, '$[1]'::text)), ((mysql_json_value('{"item": "shoes", "price": "49.95"}'::json, '$.price'::text, 'returning decimal(10, 1)'::text))::numeric)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_value(`c1`, '$.a'), json_value(`c1`, '$[1]'), json_value(CAST('{"item": "shoes", "price": "49.95"}' AS JSON), '$.price' returning decimal(10, 1)) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_value(c1, '$.a'::text), public.mysql_json_value(c1, '$[1]'::text), public.mysql_json_value('{"item": "shoes", "price": "49.95"}'::json, '$.price'::text, 'returning decimal(10, 1)'::text)::numeric FROM public.s81mysql
(7 rows)

-- select mysql_json_value (stub function, result)
--Testcase 4279:
SELECT * FROM (
SELECT id, mysql_json_value(c1, '$.a'), mysql_json_value(c1, '$[1]'), mysql_json_value('{"item": "shoes", "price": "49.95"}', '$.price', 'returning decimal(10, 1)')::numeric FROM s8
) AS t ORDER BY 1;
 id | mysql_json_value |   mysql_json_value   | mysql_json_value 
----+------------------+----------------------+------------------
  0 |                  | [3, 4]               |             50.0
  1 |                  |                      |             50.0
  2 |                  |                      |             50.0
  3 | 10               |                      |             50.0
  4 | 1                |                      |             50.0
  5 |                  | [{"k": "10"}, "def"] |             50.0
(6 rows)

-- select mysql_json_value (stub function, not pushdown constraints, explain)
--Testcase 4280:
EXPLAIN VERBOSE
SELECT mysql_json_value(c1, '$.a'), mysql_json_value(c1, '$[1]'), mysql_json_value('{"item": "shoes", "price": "49.95"}', '$.price', 'returning decimal(10, 1)')::numeric FROM s8 WHERE to_hex(id) = '2';
                                                                                                                              QUERY PLAN                                                                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..416.40 rows=34 width=96)
   Output: (mysql_json_value(c1, '$.a'::text)), (mysql_json_value(c1, '$[1]'::text)), ((mysql_json_value('{"item": "shoes", "price": "49.95"}'::json, '$.price'::text, 'returning decimal(10, 1)'::text))::numeric)
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_value(`c1`, '$.a'), json_value(`c1`, '$[1]'), json_value(CAST('{"item": "shoes", "price": "49.95"}' AS JSON), '$.price' returning decimal(10, 1)), `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_value(c1, '$.a'::text), public.mysql_json_value(c1, '$[1]'::text), public.mysql_json_value('{"item": "shoes", "price": "49.95"}'::json, '$.price'::text, 'returning decimal(10, 1)'::text)::numeric, id FROM public.s81mysql
(8 rows)

-- select mysql_json_value (stub function, not pushdown constraints, result)
--Testcase 4281:
SELECT * FROM (
SELECT id, mysql_json_value(c1, '$.a'), mysql_json_value(c1, '$[1]'), mysql_json_value('{"item": "shoes", "price": "49.95"}', '$.price', 'returning decimal(10, 1)')::numeric FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 id | mysql_json_value | mysql_json_value | mysql_json_value 
----+------------------+------------------+------------------
  2 |                  |                  |             50.0
(1 row)

-- select mysql_json_value (stub function, pushdown constraints, explain)
--Testcase 4282:
EXPLAIN VERBOSE
SELECT mysql_json_value(c1, '$.a'), mysql_json_value(c1, '$[1]'), mysql_json_value('{"item": "shoes", "price": "49.95"}', '$.price', 'returning decimal(10, 1)')::numeric FROM s8 WHERE id != 0;
                                                                                                                                     QUERY PLAN                                                                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..5569.12 rows=6792 width=96)
   Output: (mysql_json_value(c1, '$.a'::text)), (mysql_json_value(c1, '$[1]'::text)), ((mysql_json_value('{"item": "shoes", "price": "49.95"}'::json, '$.price'::text, 'returning decimal(10, 1)'::text))::numeric)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_value(`c1`, '$.a'), json_value(`c1`, '$[1]'), json_value(CAST('{"item": "shoes", "price": "49.95"}' AS JSON), '$.price' returning decimal(10, 1)) FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_value(c1, '$.a'::text), public.mysql_json_value(c1, '$[1]'::text), public.mysql_json_value('{"item": "shoes", "price": "49.95"}'::json, '$.price'::text, 'returning decimal(10, 1)'::text)::numeric FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select mysql_json_value (stub function, pushdown constraints, result)
--Testcase 4283:
SELECT * FROM (
SELECT id, mysql_json_value(c1, '$.a'), mysql_json_value(c1, '$[1]'), mysql_json_value('{"item": "shoes", "price": "49.95"}', '$.price', 'returning decimal(10, 1)')::numeric FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 id | mysql_json_value |   mysql_json_value   | mysql_json_value 
----+------------------+----------------------+------------------
  1 |                  |                      |             50.0
  2 |                  |                      |             50.0
  3 | 10               |                      |             50.0
  4 | 1                |                      |             50.0
  5 |                  | [{"k": "10"}, "def"] |             50.0
(5 rows)

-- select mysql_json_value (stub function, mysql_json_value in constraints, explain)
--Testcase 4284:
EXPLAIN VERBOSE
SELECT mysql_json_value(c1, '$.a'), mysql_json_value(c1, '$[1]'), mysql_json_value('{"item": "shoes", "price": "49.95"}', '$.price', 'returning decimal(10, 1)')::numeric FROM s8 WHERE mysql_json_value(c1, '$.a', 'default 0 on empty')::int > 1;
                                                                                                                                                                          QUERY PLAN                                                                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..3809.86 rows=2276 width=96)
   Output: (mysql_json_value(c1, '$.a'::text)), (mysql_json_value(c1, '$[1]'::text)), ((mysql_json_value('{"item": "shoes", "price": "49.95"}'::json, '$.price'::text, 'returning decimal(10, 1)'::text))::numeric)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_value(`c1`, '$.a'), json_value(`c1`, '$[1]'), json_value(CAST('{"item": "shoes", "price": "49.95"}' AS JSON), '$.price' returning decimal(10, 1)) FROM `test`.`s82` WHERE ((json_value(`c1`, '$.a' default 0 on empty) > 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_value(c1, '$.a'::text), public.mysql_json_value(c1, '$[1]'::text), public.mysql_json_value('{"item": "shoes", "price": "49.95"}'::json, '$.price'::text, 'returning decimal(10, 1)'::text)::numeric FROM public.s81mysql WHERE ((public.mysql_json_value(c1, '$.a'::text, 'default 0 on empty'::text)::integer > 1))
(7 rows)

-- select mysql_json_value (stub function, mysql_json_value in constraints, result)
--Testcase 4285:
SELECT * FROM (
SELECT id, mysql_json_value(c1, '$.a'), mysql_json_value(c1, '$[1]'), mysql_json_value('{"item": "shoes", "price": "49.95"}', '$.price', 'returning decimal(10, 1)')::numeric FROM s8 WHERE mysql_json_value(c1, '$.a', 'default 0 on empty')::int > 1
) AS t ORDER BY 1;
 id | mysql_json_value | mysql_json_value | mysql_json_value 
----+------------------+------------------+------------------
  3 | 10               |                  |             50.0
(1 row)

-- select mysql_json_value (stub function, mysql_json_value in constraints, explain)
--Testcase 4286:
EXPLAIN VERBOSE
SELECT mysql_json_value(c1, '$.a'), mysql_json_value(c1, '$[1]'), mysql_json_value('{"item": "shoes", "price": "49.95"}', '$.price', 'returning decimal(10, 1)')::numeric FROM s8 WHERE mysql_json_value('{"item": "shoes", "price": "49.95"}', '$.price', 'returning decimal(10, 2)')::decimal = 49.95;
                                                                                                                                                                                                      QUERY PLAN                                                                                                                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2072.30 rows=34 width=96)
   Output: (mysql_json_value(c1, '$.a'::text)), (mysql_json_value(c1, '$[1]'::text)), ((mysql_json_value('{"item": "shoes", "price": "49.95"}'::json, '$.price'::text, 'returning decimal(10, 1)'::text))::numeric)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_value(`c1`, '$.a'), json_value(`c1`, '$[1]'), json_value(CAST('{"item": "shoes", "price": "49.95"}' AS JSON), '$.price' returning decimal(10, 1)) FROM `test`.`s82` WHERE ((json_value(CAST('{"item": "shoes", "price": "49.95"}' AS JSON), '$.price' returning decimal(10, 2)) = 49.95))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_value(c1, '$.a'::text), public.mysql_json_value(c1, '$[1]'::text), public.mysql_json_value('{"item": "shoes", "price": "49.95"}'::json, '$.price'::text, 'returning decimal(10, 1)'::text)::numeric FROM public.s81mysql WHERE ((public.mysql_json_value('{"item": "shoes", "price": "49.95"}'::json, '$.price'::text, 'returning decimal(10, 2)'::text)::numeric = 49.95))
(7 rows)

-- select mysql_json_value (stub function, mysql_json_value in constraints, result)
--Testcase 4287:
SELECT * FROM (
SELECT id, mysql_json_value(c1, '$.a'), mysql_json_value(c1, '$[1]'), mysql_json_value('{"item": "shoes", "price": "49.95"}', '$.price', 'returning decimal(10, 1)')::numeric FROM s8 WHERE mysql_json_value('{"item": "shoes", "price": "49.95"}', '$.price', 'returning decimal(10, 2)')::decimal = 49.95
) AS t ORDER BY 1;
 id | mysql_json_value |   mysql_json_value   | mysql_json_value 
----+------------------+----------------------+------------------
  0 |                  | [3, 4]               |             50.0
  1 |                  |                      |             50.0
  2 |                  |                      |             50.0
  3 | 10               |                      |             50.0
  4 | 1                |                      |             50.0
  5 |                  | [{"k": "10"}, "def"] |             50.0
(6 rows)

-- select mysql_json_value (stub function, abnormal cast, explain)
--Testcase 4288:
EXPLAIN VERBOSE
SELECT mysql_json_value(c1, '$.a')::date FROM s8;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2165.41 rows=6826 width=4)
   Output: ((mysql_json_value(c1, '$.a'::text))::date)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_value(`c1`, '$.a') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_value(c1, '$.a'::text)::date FROM public.s81mysql
(7 rows)

-- select mysql_json_value (stub function, abnormal cast, result)
--Testcase 4289:
SELECT mysql_json_value(c1, '$.a')::date FROM s8; -- should fail
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: invalid input syntax for type date: "10"
-- select mysql_json_value (stub function, abnormal cast, explain)
--Testcase 4290:
EXPLAIN VERBOSE
SELECT mysql_json_value(c1, '$.a', 'returning date')::date FROM s8;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2165.41 rows=6826 width=4)
   Output: ((mysql_json_value(c1, '$.a'::text, 'returning date'::text))::date)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_value(`c1`, '$.a' returning date) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_value(c1, '$.a'::text, 'returning date'::text)::date FROM public.s81mysql
(7 rows)

-- select mysql_json_value (stub function, abnormal cast, result)
--Testcase 4291:
SELECT mysql_json_value(c1, '$.a', 'returning date')::date FROM s8; --empty result
 mysql_json_value 
------------------
 
 
 
 
 
 
(6 rows)

-- select mysql_json_value (stub function, abnormal cast, explain)
--Testcase 4292:
EXPLAIN VERBOSE
SELECT mysql_json_value(c1, '$.a', 'returning date', 'error on error')::date FROM s8;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2165.41 rows=6826 width=4)
   Output: ((mysql_json_value(c1, '$.a'::text, 'returning date'::text, 'error on error'::text))::date)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_value(`c1`, '$.a' returning date error on error) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_value(c1, '$.a'::text, 'returning date'::text, 'error on error'::text)::date FROM public.s81mysql
(7 rows)

-- select mysql_json_value (stub function, abnormal cast, result)
--Testcase 4293:
SELECT mysql_json_value(c1, '$.a', 'returning date', 'error on error')::date FROM s8; -- should fail
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL:  mysql_fdw: failed to execute the MySQL query: 
DATE value is out of range in 'json_value'
-- select mysql_json_value with normal cast
--Testcase 4294:
SELECT mysql_json_value('{"a": "2000-01-01"}', '$.a')::timestamp, mysql_json_value('{"a": "2000-01-01"}', '$.a')::date , mysql_json_value('{"a": 1234}', '$.a')::bigint, mysql_json_value('{"a": "b"}', '$.a')::text FROM s8;
  mysql_json_value   | mysql_json_value | mysql_json_value | mysql_json_value 
---------------------+------------------+------------------+------------------
 2000-01-01 00:00:00 | 2000-01-01       |             1234 | b
 2000-01-01 00:00:00 | 2000-01-01       |             1234 | b
 2000-01-01 00:00:00 | 2000-01-01       |             1234 | b
 2000-01-01 00:00:00 | 2000-01-01       |             1234 | b
 2000-01-01 00:00:00 | 2000-01-01       |             1234 | b
 2000-01-01 00:00:00 | 2000-01-01       |             1234 | b
(6 rows)

-- select mysql_json_value with normal cast
--Testcase 4295:
SELECT mysql_json_value('{"a": "2000-01-01"}', '$.a')::timestamptz, mysql_json_value('{"a": "12:10:20.123456"}', '$.a')::time , mysql_json_value('{"a": "12:10:20.123456"}', '$.a')::timetz FROM s8;
    mysql_json_value    | mysql_json_value |  mysql_json_value  
------------------------+------------------+--------------------
 2000-01-01 09:00:00+09 | 12:10:20.123456  | 12:10:20.123456+00
 2000-01-01 09:00:00+09 | 12:10:20.123456  | 12:10:20.123456+00
 2000-01-01 09:00:00+09 | 12:10:20.123456  | 12:10:20.123456+00
 2000-01-01 00:00:00+09 | 12:10:20.123456  | 12:10:20.123456+09
 2000-01-01 00:00:00+09 | 12:10:20.123456  | 12:10:20.123456+09
 2000-01-01 00:00:00+09 | 12:10:20.123456  | 12:10:20.123456+09
(6 rows)

-- select mysql_json_value with type modifier (explain)
--Testcase 4296:
EXPLAIN VERBOSE
SELECT mysql_json_value('{"a": "2000-01-01 12:02:01.123456"}', '$.a')::timestamp(3), mysql_json_value('{"a": "2000-01-01 12:02:01.123456"}', '$.a')::timestamptz(3), mysql_json_value('{"a": "12:10:20.123456"}', '$.a')::time(3), mysql_json_value('{"a": "12:10:20.123456"}', '$.a')::timetz(3) FROM s8;
                                                                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7455.56 rows=6826 width=36)
   Output: ((mysql_json_value('{"a": "2000-01-01 12:02:01.123456"}'::json, '$.a'::text))::timestamp(3) without time zone), ((mysql_json_value('{"a": "2000-01-01 12:02:01.123456"}'::json, '$.a'::text))::timestamp(3) with time zone), ((mysql_json_value('{"a": "12:10:20.123456"}'::json, '$.a'::text))::time(3) without time zone), ((mysql_json_value('{"a": "12:10:20.123456"}'::json, '$.a'::text))::time(3) with time zone)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_value(CAST('{"a": "2000-01-01 12:02:01.123456"}' AS JSON), '$.a'), json_value(CAST('{"a": "2000-01-01 12:02:01.123456"}' AS JSON), '$.a'), json_value(CAST('{"a": "12:10:20.123456"}' AS JSON), '$.a'), json_value(CAST('{"a": "12:10:20.123456"}' AS JSON), '$.a') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_value('{"a": "2000-01-01 12:02:01.123456"}'::json, '$.a'::text)::timestamp(3) without time zone, public.mysql_json_value('{"a": "2000-01-01 12:02:01.123456"}'::json, '$.a'::text)::timestamp(3) with time zone, public.mysql_json_value('{"a": "12:10:20.123456"}'::json, '$.a'::text)::time(3) without time zone, public.mysql_json_value('{"a": "12:10:20.123456"}'::json, '$.a'::text)::time(3) with time zone FROM public.s81mysql
(7 rows)

-- select mysql_json_value with type modifier (result)
--Testcase 4297:
SELECT mysql_json_value('{"a": "2000-01-01 12:02:01.123456"}', '$.a')::timestamp(3), mysql_json_value('{"a": "2000-01-01 12:02:01.123456"}', '$.a')::timestamptz(3), mysql_json_value('{"a": "12:10:20.123456"}', '$.a')::time(3), mysql_json_value('{"a": "12:10:20.123456"}', '$.a')::timetz(3) FROM s8;
    mysql_json_value     |      mysql_json_value      | mysql_json_value | mysql_json_value 
-------------------------+----------------------------+------------------+------------------
 2000-01-01 12:02:01.123 | 2000-01-01 12:02:01.123+09 | 12:10:20.123     | 12:10:20.123+09
 2000-01-01 12:02:01.123 | 2000-01-01 12:02:01.123+09 | 12:10:20.123     | 12:10:20.123+09
 2000-01-01 12:02:01.123 | 2000-01-01 12:02:01.123+09 | 12:10:20.123     | 12:10:20.123+09
 2000-01-01 12:02:01.123 | 2000-01-01 21:02:01.123+09 | 12:10:20.123     | 12:10:20.123+00
 2000-01-01 12:02:01.123 | 2000-01-01 21:02:01.123+09 | 12:10:20.123     | 12:10:20.123+00
 2000-01-01 12:02:01.123 | 2000-01-01 21:02:01.123+09 | 12:10:20.123     | 12:10:20.123+00
(6 rows)

-- select mysql_json_value with type modifier (explain)
--Testcase 4298:
EXPLAIN VERBOSE
SELECT mysql_json_value('{"a": 100}', '$.a')::numeric(10, 2), mysql_json_value('{"a": 100}', '$.a')::decimal(10, 2), json_unquote(mysql_json_value('{"a": "1.123456"}', '$.a'))::numeric(10, 3) FROM s8;
                                                                                                                   QUERY PLAN                                                                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7404.36 rows=6826 width=48)
   Output: ((mysql_json_value('{"a": 100}'::json, '$.a'::text))::numeric(10,2)), ((mysql_json_value('{"a": 100}'::json, '$.a'::text))::numeric(10,2)), ((json_unquote(mysql_json_value('{"a": "1.123456"}'::json, '$.a'::text)))::numeric(10,3))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_value(CAST('{"a": 100}' AS JSON), '$.a'), json_unquote(json_value(CAST('{"a": "1.123456"}' AS JSON), '$.a')) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_value('{"a": 100}'::json, '$.a'::text)::numeric(10,2), public.json_unquote(public.mysql_json_value('{"a": "1.123456"}'::json, '$.a'::text))::numeric(10,3) FROM public.s81mysql
(7 rows)

-- select mysql_json_value with type modifier (result)
--Testcase 4299:
SELECT mysql_json_value('{"a": 100}', '$.a')::numeric(10, 2), mysql_json_value('{"a": 100}', '$.a')::decimal(10, 2), json_unquote(mysql_json_value('{"a": "1.123456"}', '$.a'))::numeric(10, 3) FROM s8;
 mysql_json_value | mysql_json_value | json_unquote 
------------------+------------------+--------------
           100.00 |           100.00 |        1.123
           100.00 |           100.00 |        1.123
           100.00 |           100.00 |        1.123
           100.00 |           100.00 |        1.123
           100.00 |           100.00 |        1.123
           100.00 |           100.00 |        1.123
(6 rows)

-- select mysql_json_value as nest function with agg (not pushdown, explain)
--Testcase 4300:
EXPLAIN VERBOSE
SELECT sum(id), mysql_json_value(json_build_object('item', 'shoe', 'price', sum(id)), '$.price')::int FROM s8;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.42 rows=1 width=12)
   Output: (sum(id)), ((mysql_json_value(json_build_object('item', 'shoe', 'price', sum(id)), '$.price'::text))::integer)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`), json_value(json_object('item', 'shoe', 'price', sum(`id`)), '$.price') FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id), public.mysql_json_value(json_build_object('item', 'shoe', 'price', sum(id)), '$.price'::text)::integer FROM public.s81mysql
(11 rows)

-- select mysql_json_value as nest function with agg (not pushdown, result, error)
--Testcase 4301:
SELECT sum(id), mysql_json_value(json_build_object('item', 'shoe', 'price', sum(id)), '$.price')::int FROM s8;
 sum | mysql_json_value 
-----+------------------
  15 |               15
(1 row)

-- select mysql_json_value with non pushdown func and explicit constant (EXPLAIN)
--Testcase 4302:
EXPLAIN VERBOSE
SELECT mysql_json_value(c1, '$[1]'), pi(), 4.1 FROM s8;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=72)
   Output: (mysql_json_value(c1, '$[1]'::text)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT json_value(`c1`, '$[1]'), 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.mysql_json_value(c1, '$[1]'::text), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select mysql_json_value with non pushdown func and explicit constant (result)
--Testcase 4303:
SELECT * FROM (
SELECT id, mysql_json_value(c1, '$[1]'), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id |   mysql_json_value   |        pi         | ?column? 
----+----------------------+-------------------+----------
  0 | [3, 4]               | 3.141592653589793 |      4.1
  1 |                      | 3.141592653589793 |      4.1
  2 |                      | 3.141592653589793 |      4.1
  3 |                      | 3.141592653589793 |      4.1
  4 |                      | 3.141592653589793 |      4.1
  5 | [{"k": "10"}, "def"] | 3.141592653589793 |      4.1
(6 rows)

-- select mysql_json_value with order by index (result)
--Testcase 4304:
SELECT id, mysql_json_value(c1, '$.a') FROM s8 ORDER BY 2, 1;
 id | mysql_json_value 
----+------------------
  4 | 1
  3 | 10
  0 | 
  1 | 
  2 | 
  5 | 
(6 rows)

-- select mysql_json_value with order by index (result)
--Testcase 4305:
SELECT id, mysql_json_value(c1, '$.a') FROM s8 ORDER BY 1, 2;
 id | mysql_json_value 
----+------------------
  0 | 
  1 | 
  2 | 
  3 | 10
  4 | 1
  5 | 
(6 rows)

-- select mysql_json_value with group by (EXPLAIN)
--Testcase 4306:
EXPLAIN VERBOSE
SELECT count(id), mysql_json_value(c1, '$.a') FROM s8 group by mysql_json_value(c1, '$.a');
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=40)
   Output: count(id), (mysql_json_value(c1, '$.a'::text))
   Group Key: (mysql_json_value(s8.c1, '$.a'::text))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=36)
         Output: (mysql_json_value(c1, '$.a'::text)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_value(`c1`, '$.a'), `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.mysql_json_value(c1, '$.a'::text), id FROM public.s81mysql
(10 rows)

-- select mysql_json_value with group by (result)
--Testcase 4307:
SELECT * FROM (
SELECT count(id), mysql_json_value(c1, '$.a') FROM s8 group by mysql_json_value(c1, '$.a')
) AS t ORDER BY 1;
 count | mysql_json_value 
-------+------------------
     1 | 10
     1 | 1
     4 | 
(3 rows)

-- select mysql_json_value with group by index (result)
--Testcase 4308:
SELECT * FROM (
SELECT id, mysql_json_value(c1, '$.a') FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | mysql_json_value 
----+------------------
  0 | 
  1 | 
  2 | 
  3 | 10
  4 | 1
  5 | 
(6 rows)

-- select mysql_json_value with group by index (result)
--Testcase 4309:
SELECT * FROM (
SELECT id, mysql_json_value(c1, '$.a') FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | mysql_json_value 
----+------------------
  0 | 
  1 | 
  2 | 
  3 | 10
  4 | 1
  5 | 
(6 rows)

-- select mysql_json_value with group by having (EXPLAIN)
--Testcase 4310:
EXPLAIN VERBOSE
SELECT count(c2), mysql_json_value(c1, '$.a') FROM s8 group by mysql_json_value(c1, '$.a') HAVING count(c2) > 0;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=40)
   Output: count(c2), (mysql_json_value(c1, '$.a'::text))
   Group Key: (mysql_json_value(s8.c1, '$.a'::text))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=36)
         Output: (mysql_json_value(c1, '$.a'::text)), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT json_value(`c1`, '$.a'), `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.mysql_json_value(c1, '$.a'::text), c2 FROM public.s81mysql
(11 rows)

-- select mysql_json_value with group by having (result)
--Testcase 4311:
SELECT * FROM (
SELECT count(c2), mysql_json_value(c1, '$.a') FROM s8 group by mysql_json_value(c1, '$.a') HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | mysql_json_value 
-------+------------------
     1 | 10
     1 | 1
     4 | 
(3 rows)

-- select mysql_json_value with group by index having (result)
--Testcase 4312:
SELECT * FROM (
SELECT c2, mysql_json_value(c1, '$.a') FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | mysql_json_value 
----+------------------
  1 | 
  2 | 
  3 | 
  4 | 10
  5 | 1
  5 | 
(6 rows)

-- select mysql_json_value with group by index having (result)
--Testcase 4313:
SELECT * FROM (
SELECT c2, mysql_json_value(c1, '$.a') FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | mysql_json_value 
----+------------------
  1 | 
  2 | 
  3 | 
  4 | 10
  5 | 1
  5 | 
(6 rows)

-- select mysql_json_value and as
--Testcase 4314:
SELECT * FROM (
SELECT id, mysql_json_value(c1, '$[1]') as mysql_json_value1 FROM s8
) AS t ORDER BY 1;
 id |  mysql_json_value1   
----+----------------------
  0 | [3, 4]
  1 | 
  2 | 
  3 | 
  4 | 
  5 | [{"k": "10"}, "def"]
(6 rows)

-- select member_of (builtin function, explain)
--Testcase 4315:
EXPLAIN VERBOSE
SELECT member_of(5, c1), member_of('ab'::text, c1), member_of('[3,4]'::json, c1), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}') FROM s8;
                                                                                                                  QUERY PLAN                                                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7267.84 rows=6826 width=16)
   Output: (member_of(5, c1)), (member_of('ab'::text, c1)), (member_of('[3,4]'::json, c1)), (member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT 5 MEMBER OF(`c1`) , 'ab' MEMBER OF(`c1`) , CAST('[3,4]' AS JSON) MEMBER OF(`c1`) , json_object('item', 'shoes') MEMBER OF(CAST('{"item": "shoes", "price": "49.95"}' AS JSON))  FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.member_of(5, c1), public.member_of('ab'::text, c1), public.member_of('[3,4]'::json, c1), public.member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}'::json) FROM public.s81mysql
(7 rows)

-- select member_of (builtin function, result)
--Testcase 4316:
SELECT * FROM (
SELECT member_of(5, c1), member_of('ab'::text, c1), member_of('[3,4]'::json, c1), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}') FROM s8
) AS t ORDER BY 1;
 member_of | member_of | member_of | member_of 
-----------+-----------+-----------+-----------
         0 |         0 |         0 |         0
         0 |         0 |         0 |         0
         0 |         0 |         0 |         0
         0 |         0 |         0 |         0
         0 |         0 |         0 |         0
         1 |         0 |         1 |         0
(6 rows)

-- select member_of (builtin function, not pushdown constraints, explain)
--Testcase 4317:
EXPLAIN VERBOSE
SELECT member_of(5, c1), member_of('ab'::text, c1), member_of('[3,4]'::json, c1), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}') FROM s8 WHERE to_hex(id) = '2';
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..424.81 rows=34 width=16)
   Output: (member_of(5, c1)), (member_of('ab'::text, c1)), (member_of('[3,4]'::json, c1)), (member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}'::json))
   Filter: (to_hex(s8.id) = '2'::text)
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT 5 MEMBER OF(`c1`) , 'ab' MEMBER OF(`c1`) , CAST('[3,4]' AS JSON) MEMBER OF(`c1`) , json_object('item', 'shoes') MEMBER OF(CAST('{"item": "shoes", "price": "49.95"}' AS JSON)) , `id` FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.member_of(5, c1), public.member_of('ab'::text, c1), public.member_of('[3,4]'::json, c1), public.member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}'::json), id FROM public.s81mysql
(8 rows)

-- select member_of (builtin function, not pushdown constraints, result)
--Testcase 4318:
SELECT * FROM (
SELECT member_of(5, c1), member_of('ab'::text, c1), member_of('[3,4]'::json, c1), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}') FROM s8 WHERE to_hex(id) = '2'
) AS t ORDER BY 1;
 member_of | member_of | member_of | member_of 
-----------+-----------+-----------+-----------
         0 |         0 |         0 |         0
(1 row)

-- select member_of (builtin function, pushdown constraints, explain)
--Testcase 4319:
EXPLAIN VERBOSE
SELECT member_of(5, c1), member_of('ab'::text, c1), member_of('[3,4]'::json, c1), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}') FROM s8 WHERE id != 0;
                                                                                                                           QUERY PLAN                                                                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..7250.14 rows=6792 width=16)
   Output: (member_of(5, c1)), (member_of('ab'::text, c1)), (member_of('[3,4]'::json, c1)), (member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT 5 MEMBER OF(`c1`) , 'ab' MEMBER OF(`c1`) , CAST('[3,4]' AS JSON) MEMBER OF(`c1`) , json_object('item', 'shoes') MEMBER OF(CAST('{"item": "shoes", "price": "49.95"}' AS JSON))  FROM `test`.`s82` WHERE ((`id` <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.member_of(5, c1), public.member_of('ab'::text, c1), public.member_of('[3,4]'::json, c1), public.member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}'::json) FROM public.s81mysql WHERE ((id <> 0))
(7 rows)

-- select member_of (builtin function, pushdown constraints, result)
--Testcase 4320:
SELECT * FROM (
SELECT member_of(5, c1), member_of('ab'::text, c1), member_of('[3,4]'::json, c1), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}') FROM s8 WHERE id != 0
) AS t ORDER BY 1;
 member_of | member_of | member_of | member_of 
-----------+-----------+-----------+-----------
         0 |         0 |         0 |         0
         0 |         0 |         0 |         0
         0 |         0 |         0 |         0
         0 |         0 |         0 |         0
         0 |         0 |         0 |         0
(5 rows)

-- select member_of (builtin function, member_of in constraints, explain)
--Testcase 4321:
EXPLAIN VERBOSE
SELECT member_of(5, c1), member_of('ab'::text, c1), member_of('[3,4]'::json, c1), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}') FROM s8 WHERE member_of(5, c1) != 0;
                                                                                                                                      QUERY PLAN                                                                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..8956.65 rows=6792 width=16)
   Output: (member_of(5, c1)), (member_of('ab'::text, c1)), (member_of('[3,4]'::json, c1)), (member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT 5 MEMBER OF(`c1`) , 'ab' MEMBER OF(`c1`) , CAST('[3,4]' AS JSON) MEMBER OF(`c1`) , json_object('item', 'shoes') MEMBER OF(CAST('{"item": "shoes", "price": "49.95"}' AS JSON))  FROM `test`.`s82` WHERE ((5 MEMBER OF(`c1`)  <> 0))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.member_of(5, c1), public.member_of('ab'::text, c1), public.member_of('[3,4]'::json, c1), public.member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}'::json) FROM public.s81mysql WHERE ((public.member_of(5, c1) <> 0))
(7 rows)

-- select member_of (builtin function, member_of in constraints, result)
--Testcase 4322:
SELECT * FROM (
SELECT member_of(5, c1), member_of('ab'::text, c1), member_of('[3,4]'::json, c1), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}') FROM s8 WHERE member_of(5, c1) != 0
) AS t ORDER BY 1;
 member_of | member_of | member_of | member_of 
-----------+-----------+-----------+-----------
         1 |         0 |         1 |         0
(1 row)

-- select member_of (builtin function, member_of in constraints, explain)
--Testcase 4323:
EXPLAIN VERBOSE
SELECT member_of(5, c1), member_of('ab'::text, c1), member_of('[3,4]'::json, c1), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}') FROM s8 WHERE member_of(json_build_object('item', 'shoes', 'price', '49.95'), '{"item": "shoes", "price": "49.95"}') = 1;
                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..2063.65 rows=34 width=16)
   Output: (member_of(5, c1)), (member_of('ab'::text, c1)), (member_of('[3,4]'::json, c1)), (member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}'::json))
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT 5 MEMBER OF(`c1`) , 'ab' MEMBER OF(`c1`) , CAST('[3,4]' AS JSON) MEMBER OF(`c1`) , json_object('item', 'shoes') MEMBER OF(CAST('{"item": "shoes", "price": "49.95"}' AS JSON))  FROM `test`.`s82` WHERE ((json_object('item', 'shoes', 'price', '49.95') MEMBER OF(CAST('{"item": "shoes", "price": "49.95"}' AS JSON))  = 1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.member_of(5, c1), public.member_of('ab'::text, c1), public.member_of('[3,4]'::json, c1), public.member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}'::json) FROM public.s81mysql WHERE ((public.member_of(json_build_object('item', 'shoes', 'price', '49.95'), '{"item": "shoes", "price": "49.95"}'::json) = 1))
(7 rows)

-- select member_of (builtin function, member_of in constraints, result)
--Testcase 4324:
SELECT * FROM (
SELECT member_of(5, c1), member_of('ab'::text, c1), member_of('[3,4]'::json, c1), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}') FROM s8 WHERE member_of(json_build_object('item', 'shoes', 'price', '49.95'), '{"item": "shoes", "price": "49.95"}') = 1
) AS t ORDER BY 1;
 member_of | member_of | member_of | member_of 
-----------+-----------+-----------+-----------
         0 |         0 |         0 |         0
         0 |         0 |         0 |         0
         0 |         0 |         0 |         0
         0 |         0 |         0 |         0
         0 |         0 |         0 |         0
         1 |         0 |         1 |         0
(6 rows)

-- select member_of as nest function with agg (not pushdown, explain)
--Testcase 4325:
EXPLAIN VERBOSE
SELECT sum(id), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}') FROM s8;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=110.00..159.41 rows=1 width=12)
   Output: (sum(id)), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}'::json)
   Node: mysql_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (test.s8__mysql_svr__0)
     Local server startup cost: 10
     Remote query: SELECT sum(`id`) FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s8)
     Remote SQL: SELECT sum(id) FROM public.s81mysql
(11 rows)

-- select member_of as nest function with agg (not pushdown, result, error)
--Testcase 4326:
SELECT sum(id), member_of(json_build_object('item', 'shoes'), '{"item": "shoes", "price": "49.95"}') FROM s8;
ERROR:  stub member_of(anyelement, json) is called
CONTEXT:  PL/pgSQL function member_of(anyelement,json) line 3 at RAISE
-- select member_of with non pushdown func and explicit constant (EXPLAIN)
--Testcase 4327:
EXPLAIN VERBOSE
SELECT member_of('ab'::text, c1), member_of('[3,4]'::json, c1), pi(), 4.1 FROM s8;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s8  (cost=200.00..3837.78 rows=6826 width=48)
   Output: (member_of('ab'::text, c1)), (member_of('[3,4]'::json, c1)), '3.141592653589793'::double precision, 4.1
   Node: mysql_svr / Status: Alive
     Local server startup cost: 10
     Remote query: SELECT 'ab' MEMBER OF(`c1`) , CAST('[3,4]' AS JSON) MEMBER OF(`c1`) , 3.141592653589793, 4.1 FROM `test`.`s82`
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.member_of('ab'::text, c1), public.member_of('[3,4]'::json, c1), 3.141592653589793::double precision, 4.1 FROM public.s81mysql
(7 rows)

-- select member_of with non pushdown func and explicit constant (result)
--Testcase 4328:
SELECT * FROM (
SELECT id, member_of('ab'::text, c1), member_of('[3,4]'::json, c1), pi(), 4.1 FROM s8
) AS t ORDER BY 1;
 id | member_of | member_of |        pi         | ?column? 
----+-----------+-----------+-------------------+----------
  0 |         0 |         1 | 3.141592653589793 |      4.1
  1 |         0 |         0 | 3.141592653589793 |      4.1
  2 |         0 |         0 | 3.141592653589793 |      4.1
  3 |         0 |         0 | 3.141592653589793 |      4.1
  4 |         0 |         0 | 3.141592653589793 |      4.1
  5 |         0 |         0 | 3.141592653589793 |      4.1
(6 rows)

-- select member_of with order by index (result)
--Testcase 4329:
SELECT id, member_of(5, c1) FROM s8 ORDER BY 2, 1;
 id | member_of 
----+-----------
  1 |         0
  2 |         0
  3 |         0
  4 |         0
  5 |         0
  0 |         1
(6 rows)

-- select member_of with order by index (result)
--Testcase 4330:
SELECT id, member_of(5, c1) FROM s8 ORDER BY 1, 2;
 id | member_of 
----+-----------
  0 |         1
  1 |         0
  2 |         0
  3 |         0
  4 |         0
  5 |         0
(6 rows)

-- select member_of with group by (EXPLAIN)
--Testcase 4331:
EXPLAIN VERBOSE
SELECT count(id), member_of(5, c1) FROM s8 group by member_of(5, c1);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2217.41 rows=200 width=12)
   Output: count(id), (member_of(5, c1))
   Group Key: (member_of(5, s8.c1))
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (member_of(5, c1)), id
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT 5 MEMBER OF(`c1`) , `id` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.member_of(5, c1), id FROM public.s81mysql
(10 rows)

-- select member_of with group by (result)
--Testcase 4332:
SELECT * FROM (
SELECT count(id), member_of(5, c1) FROM s8 group by member_of(5, c1)
) AS t ORDER BY 1;
 count | member_of 
-------+-----------
     1 |         1
     5 |         0
(2 rows)

-- select member_of with group by index (result)
--Testcase 4333:
SELECT * FROM (
SELECT id, member_of(5, c1) FROM s8 group by 2, 1
) AS t ORDER BY 1;
 id | member_of 
----+-----------
  0 |         1
  1 |         0
  2 |         0
  3 |         0
  4 |         0
  5 |         0
(6 rows)

-- select member_of with group by index (result)
--Testcase 4334:
SELECT * FROM (
SELECT id, member_of(5, c1) FROM s8 group by 1, 2
) AS t ORDER BY 1;
 id | member_of 
----+-----------
  0 |         1
  1 |         0
  2 |         0
  3 |         0
  4 |         0
  5 |         0
(6 rows)

-- select member_of with group by having (EXPLAIN)
--Testcase 4335:
EXPLAIN VERBOSE
SELECT count(c2), member_of(5, c1) FROM s8 group by member_of(5, c1) HAVING count(c2) > 0;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 HashAggregate  (cost=2165.41..2184.66 rows=67 width=12)
   Output: count(c2), (member_of(5, c1))
   Group Key: (member_of(5, s8.c1))
   Filter: (count(s8.c2) > 0)
   ->  Foreign Scan on public.s8  (cost=200.00..2131.28 rows=6826 width=8)
         Output: (member_of(5, c1)), c2
         Node: mysql_svr / Status: Alive
           Local server startup cost: 10
           Remote query: SELECT 5 MEMBER OF(`c1`) , `c2` FROM `test`.`s82`
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT public.member_of(5, c1), c2 FROM public.s81mysql
(11 rows)

-- select member_of with group by having (result)
--Testcase 4336:
SELECT * FROM (
SELECT count(c2), member_of(5, c1) FROM s8 group by member_of(5, c1) HAVING count(c2) > 0
) AS t ORDER BY 1;
 count | member_of 
-------+-----------
     1 |         1
     5 |         0
(2 rows)

-- select member_of with group by index having (result)
--Testcase 4337:
SELECT * FROM (
SELECT c2, member_of(5, c1) FROM s8 group by 2, 1 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | member_of 
----+-----------
  1 |         1
  2 |         0
  3 |         0
  4 |         0
  5 |         0
(5 rows)

-- select member_of with group by index having (result)
--Testcase 4338:
SELECT * FROM (
SELECT c2, member_of(5, c1) FROM s8 group by 1, 2 HAVING count(c2) > 0
) AS t ORDER BY 1;
 c2 | member_of 
----+-----------
  1 |         1
  2 |         0
  3 |         0
  4 |         0
  5 |         0
(5 rows)

-- select member_of and as
--Testcase 4339:
SELECT * FROM (
SELECT member_of('ab'::text, c1), member_of('[3,4]'::json, c1) as member_of1 FROM s8
) AS t ORDER BY 1, 2;
 member_of | member_of1 
-----------+------------
         0 |          0
         0 |          0
         0 |          0
         0 |          0
         0 |          0
         0 |          1
(6 rows)

--Drop all foreign tables
--Testcase 4340:
DROP FOREIGN TABLE ftextsearch__mysql_svr__0;
--Testcase 4341:
DROP FOREIGN TABLE ftextsearch__pgspider_svr__0;
--Testcase 4342:
DROP FOREIGN TABLE s3__mysql_svr__0;
ERROR:  foreign table "s3__mysql_svr__0" does not exist
--Testcase 4343:
DROP FOREIGN TABLE s7a__mysql_svr__0;
--Testcase 4344:
DROP FOREIGN TABLE s8__mysql_svr__0;
--Testcase 4345:
DROP FOREIGN TABLE s9__mysql_svr__0;
--Testcase 4346:
DROP USER MAPPING FOR CURRENT_USER SERVER mysql_svr;
--Testcase 4347:
DROP SERVER mysql_svr;
--Testcase 4348:
DROP EXTENSION mysql_fdw;
--Testcase 4349:
DROP FOREIGN TABLE s3__pgspider_svr__0;
--Testcase 4350:
DROP FOREIGN TABLE time_tbl__pgspider_svr__0;
--Testcase 4351:
DROP FOREIGN TABLE s8__pgspider_svr__0;
--Testcase 4352:
DROP FOREIGN TABLE s9__pgspider_svr__0;
--Testcase 4353:
DROP FOREIGN TABLE s7a__pgspider_svr__0;
--Testcase 4354:
DROP USER MAPPING FOR CURRENT_USER SERVER pgspider_svr;
--Testcase 4355:
DROP SERVER pgspider_svr;
--Testcase 4356:
DROP EXTENSION pgspider_fdw;
--Testcase 4357:
DROP FOREIGN TABLE s3;
--Testcase 4358:
DROP FOREIGN TABLE time_tbl;
--Testcase 4359:
DROP FOREIGN TABLE s8;
--Testcase 4360:
DROP FOREIGN TABLE s9;
--Testcase 4361:
DROP FOREIGN TABLE s7a;
--Testcase 4362:
DROP FOREIGN TABLE ftextsearch;
--Testcase 4363:
DROP USER MAPPING FOR CURRENT_USER SERVER pgspider_core_svr;
--Testcase 4364:
DROP SERVER pgspider_core_svr;
--Testcase 4365:
DROP EXTENSION pgspider_core_fdw;
