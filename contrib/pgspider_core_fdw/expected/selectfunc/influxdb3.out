--Testcase 1:
SET datestyle=ISO;
--Testcase 2:
SET timezone='Japan';
--Testcase 3:
CREATE EXTENSION pgspider_core_fdw;
--Testcase 4:
CREATE SERVER pgspider_core_svr FOREIGN DATA WRAPPER pgspider_core_fdw OPTIONS (host '127.0.0.1');
--Testcase 5:
CREATE USER MAPPING FOR CURRENT_USER SERVER pgspider_core_svr;
----------------------------------------------------------
-- test structure
-- PGSpider Top Node -+-> Child PGSpider Node -> Data source
--                    +-> Data source
-- stub functions are provided by pgspider_fdw and/or Data source FDW (mix use)
----------------------------------------------------------
-- Data source: influxdb
--Testcase 6:
CREATE FOREIGN TABLE s3 (time timestamp with time zone, tag1 text, value1 float8, value2 bigint, value3 float8, value4 bigint, __spd_url text) SERVER pgspider_core_svr;
--Testcase 7:
CREATE EXTENSION pgspider_fdw;
--Testcase 8:
CREATE SERVER pgspider_svr FOREIGN DATA WRAPPER pgspider_fdw OPTIONS (host '127.0.0.1', port '5433', dbname 'postgres');
--Testcase 9:
CREATE USER MAPPING FOR CURRENT_USER SERVER pgspider_svr;
--Testcase 10:
CREATE FOREIGN TABLE s3__pgspider_svr__0 (time timestamp with time zone, tag1 text, value1 float8, value2 bigint, value3 float8, value4 bigint, __spd_url text) SERVER pgspider_svr OPTIONS (table_name 's31influx');
--Testcase 11:
CREATE EXTENSION influxdb_fdw;
--Testcase 12:
CREATE SERVER influxdb_svr FOREIGN DATA WRAPPER influxdb_fdw OPTIONS (dbname 'selectfunc_db', host 'http://localhost', port '8086');
--Testcase 13:
CREATE USER MAPPING FOR CURRENT_USER SERVER influxdb_svr OPTIONS (user 'user', password 'pass');
--Testcase 14:
CREATE FOREIGN TABLE s3__influxdb_svr__0 (time timestamp with time zone, tag1 text, value1 float8, value2 bigint, value3 float8, value4 bigint) SERVER influxdb_svr OPTIONS (table 's32', tags 'tag1');
-- s3 (value1,3 as float8, value2,4 as bigint)
--Testcase 15:
\d s3;
                              Foreign table "public.s3"
  Column   |           Type           | Collation | Nullable | Default | FDW options 
-----------+--------------------------+-----------+----------+---------+-------------
 time      | timestamp with time zone |           |          |         | 
 tag1      | text                     |           |          |         | 
 value1    | double precision         |           |          |         | 
 value2    | bigint                   |           |          |         | 
 value3    | double precision         |           |          |         | 
 value4    | bigint                   |           |          |         | 
 __spd_url | text                     |           |          |         | 
Server: pgspider_core_svr

--Testcase 16:
SELECT * FROM s3 ORDER BY 1,2,3,4,5,6,7;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:00+09 | a    |    0.1 |    100 |   -0.1 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:01+09 | a    |    0.2 |    100 |   -0.2 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 | a    |    0.3 |    100 |   -0.3 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:03+09 | b    |    1.1 |    200 |   -1.1 |   -200 | /influxdb_svr/
 1970-01-01 09:00:04+09 | b    |    2.2 |    200 |   -2.2 |   -200 | /influxdb_svr/
 1970-01-01 09:00:05+09 | b    |    3.3 |    200 |   -3.3 |   -200 | /influxdb_svr/
(6 rows)

-- select float8() (not pushdown, remove float8, explain)
--Testcase 17:
EXPLAIN VERBOSE
SELECT float8(value1), float8(value2), float8(value3), float8(value4) FROM s3 ORDER BY 1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=32)
   Output: value1, (float8(value2)), value3, (float8(value4))
   Sort Key: s3.value1
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=32)
         Output: value1, float8(value2), value3, float8(value4)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", "value2", "value3", "value4" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, value2, value3, value4 FROM public.s31influx
(11 rows)

-- select float8() (not pushdown, remove float8, result)
--Testcase 18:
SELECT * FROM (
SELECT float8(value1), float8(value2), float8(value3), float8(value4) FROM s3
) AS t ORDER BY 1,2,3,4;
 float8 | float8 | float8 | float8 
--------+--------+--------+--------
    0.1 |    100 |   -0.1 |   -100
    0.2 |    100 |   -0.2 |   -100
    0.3 |    100 |   -0.3 |   -100
    1.1 |    200 |   -1.1 |   -200
    2.2 |    200 |   -2.2 |   -200
    3.3 |    200 |   -3.3 |   -200
(6 rows)

-- select sqrt (builtin function, explain)
--Testcase 19:
EXPLAIN VERBOSE
SELECT sqrt(value1), sqrt(value2) FROM s3 ORDER BY 1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Sort  (cost=4111.29..4128.36 rows=6826 width=16)
   Output: (sqrt(value1)), (sqrt((value2)::double precision))
   Sort Key: (sqrt(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3676.59 rows=6826 width=16)
         Output: (sqrt(value1)), (sqrt((value2)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sqrt("value1"), sqrt("value2") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT sqrt(value1), sqrt(value2) FROM public.s31influx
(11 rows)

-- select sqrt (buitin function, result)
--Testcase 20:
SELECT * FROM (
SELECT sqrt(value1), sqrt(value2) FROM s3
) AS t ORDER BY 1,2;
        sqrt         |        sqrt        
---------------------+--------------------
 0.31622776601683794 |                 10
  0.4472135954999579 |                 10
  0.5477225575051661 |                 10
  1.0488088481701516 | 14.142135623730951
  1.4832396974191326 | 14.142135623730951
   1.816590212458495 | 14.142135623730951
(6 rows)

-- select sqrt (builtin function, not pushdown constraints, explain)
--Testcase 21:
EXPLAIN VERBOSE
SELECT sqrt(value1), sqrt(value2) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort  (cost=4108.69..4125.67 rows=6792 width=16)
   Output: (sqrt(value1)), (sqrt((value2)::double precision))
   Sort Key: (sqrt(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3676.39 rows=6792 width=16)
         Output: (sqrt(value1)), (sqrt((value2)::double precision))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sqrt("value1"), sqrt("value2"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT sqrt(value1), sqrt(value2), value2 FROM public.s31influx
(12 rows)

-- select sqrt (builtin function, not pushdown constraints, result)
--Testcase 22:
SELECT * FROM (
SELECT sqrt(value1), sqrt(value2) FROM s3 WHERE to_hex(value2) != '64'
) AS t ORDER BY 1,2;
        sqrt        |        sqrt        
--------------------+--------------------
 1.0488088481701516 | 14.142135623730951
 1.4832396974191326 | 14.142135623730951
  1.816590212458495 | 14.142135623730951
(3 rows)

-- select sqrt (builtin function, pushdown constraints, explain)
--Testcase 23:
EXPLAIN VERBOSE
SELECT sqrt(value1), sqrt(value2) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=4099.82..4116.80 rows=6792 width=16)
   Output: (sqrt(value1)), (sqrt((value2)::double precision))
   Sort Key: (sqrt(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3667.52 rows=6792 width=16)
         Output: (sqrt(value1)), (sqrt((value2)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sqrt("value1"), sqrt("value2") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT sqrt(value1), sqrt(value2) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select sqrt (builtin function, pushdown constraints, result)
--Testcase 24:
SELECT * FROM (
SELECT sqrt(value1), sqrt(value2) FROM s3 WHERE value2 != 200
) AS t ORDER BY 1,2;
        sqrt         | sqrt 
---------------------+------
 0.31622776601683794 |   10
  0.4472135954999579 |   10
  0.5477225575051661 |   10
(3 rows)

-- select sqrt(*) (stub function, explain)
--Testcase 25:
EXPLAIN VERBOSE
SELECT sqrt_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (sqrt_all())
   Sort Key: (sqrt_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (sqrt_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sqrt(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sqrt_all() FROM public.s31influx
(11 rows)

-- select sqrt(*) (stub function, result)
--Testcase 26:
SELECT * FROM (
SELECT sqrt_all() from s3
) AS t ORDER BY 1;
                                    sqrt_all                                    
--------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.31622776601683794,10,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.4472135954999579,10,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.5477225575051661,10,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.0488088481701516,14.142135623730951,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.4832396974191326,14.142135623730951,,,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1.816590212458495,14.142135623730951,,,/influxdb_svr/)
(6 rows)

-- select sqrt(*) (stub function and group by tag only) (explain)
--Testcase 27:
EXPLAIN VERBOSE
SELECT sqrt_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (sqrt_all()), tag1
   Sort Key: (sqrt_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (sqrt_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sqrt(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.sqrt_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select sqrt(*) (stub function and group by tag only) (result)
--Testcase 28:
SELECT sqrt_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                    sqrt_all                                    
--------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.31622776601683794,10,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.4472135954999579,10,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.5477225575051661,10,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.0488088481701516,14.142135623730951,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.4832396974191326,14.142135623730951,,,/influxdb_svr/)
(5 rows)

-- select abs (builtin function, explain)
--Testcase 29:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 ORDER BY 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort  (cost=4128.36..4145.42 rows=6826 width=32)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Sort Key: (abs(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3693.65 rows=6826 width=32)
         Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT abs("value1"), abs("value2"), abs("value3"), abs("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM public.s31influx
(11 rows)

-- ABS() returns negative values if integer (https://github.com/influxdata/influxdb/issues/10261)
-- select abs (buitin function, result)
--Testcase 30:
SELECT * FROM (
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3
) AS t ORDER BY 1,2,3,4;
 abs | abs | abs | abs 
-----+-----+-----+-----
 0.1 | 100 | 0.1 | 100
 0.2 | 100 | 0.2 | 100
 0.3 | 100 | 0.3 | 100
 1.1 | 200 | 1.1 | 200
 2.2 | 200 | 2.2 | 200
 3.3 | 200 | 3.3 | 200
(6 rows)

-- select abs (builtin function, not pushdown constraints, explain)
--Testcase 31:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4125.67..4142.65 rows=6792 width=32)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Sort Key: (abs(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3693.38 rows=6792 width=32)
         Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT abs("value1"), abs("value2"), abs("value3"), abs("value4"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT abs(value1), abs(value2), abs(value3), abs(value4), value2 FROM public.s31influx
(12 rows)

-- select abs (builtin function, not pushdown constraints, result)
--Testcase 32:
SELECT * FROM (
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE to_hex(value2) != '64'
) AS t ORDER BY 1,2,3,4;
 abs | abs | abs | abs 
-----+-----+-----+-----
 1.1 | 200 | 1.1 | 200
 2.2 | 200 | 2.2 | 200
 3.3 | 200 | 3.3 | 200
(3 rows)

-- select abs (builtin function, pushdown constraints, explain)
--Testcase 33:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4116.80..4133.78 rows=6792 width=32)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Sort Key: (abs(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3684.50 rows=6792 width=32)
         Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT abs("value1"), abs("value2"), abs("value3"), abs("value4") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select abs (builtin function, pushdown constraints, result)
--Testcase 34:
SELECT * FROM (
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE value2 != 200
) AS t ORDER BY 1,2,3,4;
 abs | abs | abs | abs 
-----+-----+-----+-----
 0.1 | 100 | 0.1 | 100
 0.2 | 100 | 0.2 | 100
 0.3 | 100 | 0.3 | 100
(3 rows)

-- select log (builtin function, need to swap arguments, numeric cast, explain)
-- log_<base>(v) : postgresql (base, v), influxdb (v, base)
--Testcase 35:
EXPLAIN VERBOSE
SELECT log(value1::numeric, value2::numeric) FROM s3 WHERE value1 != 1 ORDER BY 1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4099.82..4116.80 rows=6792 width=32)
   Output: (log((value1)::numeric, (value2)::numeric))
   Sort Key: (log((s3.value1)::numeric, (s3.value2)::numeric))
   ->  Foreign Scan on public.s3  (cost=110.00..3667.52 rows=6792 width=32)
         Output: (log((value1)::numeric, (value2)::numeric))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT log("value2", "value1") FROM "s32" WHERE (("value1" <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log(value1::numeric, value2::numeric) FROM public.s31influx WHERE ((value1 <> 1::double precision))
(11 rows)

-- select log (builtin function, need to swap arguments, numeric cast, result)
--Testcase 36:
SELECT * FROM (
SELECT log(value1::numeric, value2::numeric) FROM s3 WHERE value1 != 1
) AS t ORDER BY 1;
         log         
---------------------
  -3.824978578786397
 -2.8613531161467867
 -2.0000000000000004
    4.43773989221174
   6.719852756654074
  55.590256753535286
(6 rows)

-- select log (builtin function, need to swap arguments, float8, explain)
--Testcase 37:
EXPLAIN VERBOSE
SELECT log(value1::numeric, 0.1) FROM s3 WHERE value1 != 1 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4082.84..4099.82 rows=6792 width=32)
   Output: (log((value1)::numeric, 0.1))
   Sort Key: (log((s3.value1)::numeric, 0.1))
   ->  Foreign Scan on public.s3  (cost=110.00..3650.54 rows=6792 width=32)
         Output: (log((value1)::numeric, 0.1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT log(0.1, "value1") FROM "s32" WHERE (("value1" <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log(value1::numeric, 0.1) FROM public.s31influx WHERE ((value1 <> 1::double precision))
(11 rows)

-- select log (builtin function, need to swap arguments, float8, result)
--Testcase 38:
SELECT * FROM (
SELECT log(value1::numeric, 0.1) FROM s3 WHERE value1 != 1
) AS t ORDER BY 1;
         log         
---------------------
 -24.158857928096783
   -2.92036730043365
 -1.9285884584617043
                   1
   1.430676558073393
   1.912489289393198
(6 rows)

-- select log (builtin function, need to swap arguments, bigint, explain)
--Testcase 39:
EXPLAIN VERBOSE
SELECT log(value2::numeric, 3) FROM s3 WHERE value1 != 1 ORDER BY 1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4082.84..4099.82 rows=6792 width=32)
   Output: (log((value2)::numeric, '3'::numeric))
   Sort Key: (log((s3.value2)::numeric, '3'::numeric))
   ->  Foreign Scan on public.s3  (cost=110.00..3650.54 rows=6792 width=32)
         Output: (log((value2)::numeric, '3'::numeric))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT log(3, "value2") FROM "s32" WHERE (("value1" <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log(value2::numeric, 3::numeric) FROM public.s31influx WHERE ((value1 <> 1::double precision))
(11 rows)

-- select log (builtin function, need to swap arguments, bigint, result)
--Testcase 40:
SELECT * FROM (
SELECT log(value2::numeric, 3) FROM s3 WHERE value1 != 1
) AS t ORDER BY 1;
         log         
---------------------
  0.2073511669203535
  0.2073511669203535
  0.2073511669203535
 0.23856062735983116
 0.23856062735983116
 0.23856062735983116
(6 rows)

-- select log (builtin function, need to swap arguments, mix type, explain)
--Testcase 41:
EXPLAIN VERBOSE
SELECT log(value1::numeric, value2::numeric) FROM s3 WHERE value1 != 1 ORDER BY 1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4099.82..4116.80 rows=6792 width=32)
   Output: (log((value1)::numeric, (value2)::numeric))
   Sort Key: (log((s3.value1)::numeric, (s3.value2)::numeric))
   ->  Foreign Scan on public.s3  (cost=110.00..3667.52 rows=6792 width=32)
         Output: (log((value1)::numeric, (value2)::numeric))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT log("value2", "value1") FROM "s32" WHERE (("value1" <> 1))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log(value1::numeric, value2::numeric) FROM public.s31influx WHERE ((value1 <> 1::double precision))
(11 rows)

-- select log (builtin function, need to swap arguments, mix type, result)
--Testcase 42:
SELECT * FROM (
SELECT log(value1::numeric, value2::numeric) FROM s3 WHERE value1 != 1
) AS t ORDER BY 1;
         log         
---------------------
  -3.824978578786397
 -2.8613531161467867
 -2.0000000000000004
    4.43773989221174
   6.719852756654074
  55.590256753535286
(6 rows)

-- select log(*) (stub function, explain)
--Testcase 43:
EXPLAIN VERBOSE
SELECT log_all(50) FROM s3 ORDER BY 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (log_all('50'::double precision))
   Sort Key: (log_all('50'::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (log_all('50'::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT log(*, 50) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.log_all(50::double precision) FROM public.s31influx
(11 rows)

-- select log(*) (stub function, result)
--Testcase 44:
SELECT * FROM (
SELECT log_all(50) FROM s3
) AS t ORDER BY 1;
                                           log_all                                            
----------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-0.5885919100677789,1.177183820135558,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,-0.41140808993222105,1.177183820135558,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,-0.3077621994183976,1.177183820135558,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.024363399620113902,1.3543676402711158,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,0.20154721975567183,1.3543676402711158,,,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,0.3051931102694953,1.3543676402711158,,,/influxdb_svr/)
(6 rows)

-- select log(*) (stub function, explain)
--Testcase 45:
EXPLAIN VERBOSE
SELECT log_all(70.5) FROM s3 ORDER BY 1;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (log_all('70.5'::double precision))
   Sort Key: (log_all('70.5'::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (log_all('70.5'::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT log(*, 70.5) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.log_all(70.5::double precision) FROM public.s31influx
(11 rows)

-- select log(*) (stub function, result)
--Testcase 46:
SELECT * FROM (
SELECT log_all(70.5) FROM s3
) AS t ORDER BY 1;
                                            log_all                                            
-----------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-0.5410701701500463,1.0821403403000929,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,-0.3781918191758683,1.0821403403000929,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,-0.28291409167667503,1.0821403403000929,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.02239634720152814,1.2450186912742707,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,0.18527469817570616,1.2450186912742707,,,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,0.28055242567489946,1.2450186912742707,,,/influxdb_svr/)
(6 rows)

-- select log(*) (stub function and group by tag only) (explain)
--Testcase 47:
EXPLAIN VERBOSE
SELECT log_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (log_all('50'::double precision)), tag1
   Sort Key: (log_all('50'::double precision))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (log_all('50'::double precision)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT log(*, 50) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.log_all(50::double precision), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select log(*) (stub function and group by tag only) (result)
--Testcase 48:
SELECT log_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                           log_all                                            
----------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-0.5885919100677789,1.177183820135558,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,-0.41140808993222105,1.177183820135558,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,-0.3077621994183976,1.177183820135558,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.024363399620113902,1.3543676402711158,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,0.20154721975567183,1.3543676402711158,,,/influxdb_svr/)
(5 rows)

-- select multiple star functions (do not push down, raise warning and stub error) (result)
--Testcase 49:
SELECT ln_all(),log10_all(),log_all(50) FROM s3 ORDER BY 1;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub ln_all() is called
CONTEXT:  PL/pgSQL function ln_all() line 3 at RAISE
-- select log2 (stub function, explain)
--Testcase 50:
EXPLAIN VERBOSE
SELECT log2(value1),log2(value2) FROM s3;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7055.45 rows=6826 width=16)
   Output: (log2(value1)), (log2((value2)::double precision))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT log2("value1"), log2("value2") FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT public.log2(value1), public.log2(value2) FROM public.s31influx
(6 rows)

-- select log2 (stub function, result)
--Testcase 51:
SELECT * FROM (
SELECT log2(value1),log2(value2) FROM s3
) AS t ORDER BY 1,2;
        log2         |       log2        
---------------------+-------------------
  -3.321928094887362 | 6.643856189774724
  -2.321928094887362 | 6.643856189774724
  -1.736965594166206 | 6.643856189774724
 0.13750352374993502 | 7.643856189774724
  1.1375035237499351 | 7.643856189774724
   1.722466024471091 | 7.643856189774724
(6 rows)

-- select log2(*) (stub function, explain)
--Testcase 52:
EXPLAIN VERBOSE
SELECT log2_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (log2_all())
   Sort Key: (log2_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (log2_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT log2(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.log2_all() FROM public.s31influx
(11 rows)

-- select log2(*) (stub function, result)
--Testcase 53:
SELECT * FROM (
SELECT log2_all() from s3
) AS t ORDER BY 1;
                                          log2_all                                          
--------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-3.321928094887362,6.643856189774724,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,-2.321928094887362,6.643856189774724,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,-1.736965594166206,6.643856189774724,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.13750352374993502,7.643856189774724,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1375035237499351,7.643856189774724,,,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1.722466024471091,7.643856189774724,,,/influxdb_svr/)
(6 rows)

-- select log2(*) (stub function and group by tag only) (explain)
--Testcase 54:
EXPLAIN VERBOSE
SELECT log2_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (log2_all()), tag1
   Sort Key: (log2_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (log2_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT log2(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.log2_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select log2(*) (stub function and group by tag only) (result)
--Testcase 55:
SELECT log2_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                          log2_all                                          
--------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-3.321928094887362,6.643856189774724,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,-2.321928094887362,6.643856189774724,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,-1.736965594166206,6.643856189774724,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.13750352374993502,7.643856189774724,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1375035237499351,7.643856189774724,,,/influxdb_svr/)
(5 rows)

-- select log10 (stub function, explain)
--Testcase 56:
EXPLAIN VERBOSE
SELECT log10(value1),log10(value2) FROM s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=4111.29..4128.36 rows=6826 width=16)
   Output: (log10(value1)), (log10((value2)::double precision))
   Sort Key: (log10(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3676.59 rows=6826 width=16)
         Output: (log10(value1)), (log10((value2)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT log10("value1"), log10("value2") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT log10(value1), log10(value2) FROM public.s31influx
(11 rows)

-- select log10 (stub function, result)
--Testcase 57:
SELECT * FROM (
SELECT log10(value1),log10(value2) FROM s3
) AS t ORDER BY 1,2;
        log10        |       log10       
---------------------+-------------------
 -0.9999999999999999 |                 2
 -0.6989700043360187 |                 2
 -0.5228787452803376 |                 2
 0.04139268515822507 | 2.301029995663981
  0.3424226808222063 | 2.301029995663981
  0.5185139398778875 | 2.301029995663981
(6 rows)

-- select log10(*) (stub function, explain)
--Testcase 58:
EXPLAIN VERBOSE
SELECT log10_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (log10_all())
   Sort Key: (log10_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (log10_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT log10(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.log10_all() FROM public.s31influx
(11 rows)

-- select log10(*) (stub function, result)
--Testcase 59:
SELECT * FROM (
SELECT log10_all() from s3
) AS t ORDER BY 1;
                                   log10_all                                    
--------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-0.9999999999999999,2,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,-0.6989700043360187,2,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,-0.5228787452803376,2,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.04139268515822507,2.301029995663981,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,0.3424226808222063,2.301029995663981,,,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,0.5185139398778875,2.301029995663981,,,/influxdb_svr/)
(6 rows)

-- select log10(*) (stub function and group by tag only) (explain)
--Testcase 60:
EXPLAIN VERBOSE
SELECT log10_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (log10_all()), tag1
   Sort Key: (log10_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (log10_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT log10(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.log10_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select log10(*) (stub function and group by tag only) (result)
--Testcase 61:
SELECT log10_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                   log10_all                                    
--------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-0.9999999999999999,2,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,-0.6989700043360187,2,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,-0.5228787452803376,2,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.04139268515822507,2.301029995663981,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,0.3424226808222063,2.301029995663981,,,/influxdb_svr/)
(5 rows)

-- select multiple star functions (do not push down, raise warning and stub error) (result)
--Testcase 62:
SELECT log2_all(), log10_all() FROM s3 ORDER BY 1;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub log2_all() is called
CONTEXT:  PL/pgSQL function log2_all() line 3 at RAISE
-- select spread (stub agg function, explain)
--Testcase 63:
EXPLAIN VERBOSE
SELECT spread(value1),spread(value2),spread(value3),spread(value4) FROM s3 ORDER BY 1;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=32)
   Output: (spread(value1)), (spread(value2)), (spread(value3)), (spread(value4))
   Sort Key: (spread(s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=32)
         Output: (spread(value1)), (spread(value2)), (spread(value3)), (spread(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT min("value1"), max("value1"), min("value2"), max("value2"), min("value3"), max("value3"), min("value4"), max("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT min(value1), max(value1), min(value2), max(value2), min(value3), max(value3), min(value4), max(value4) FROM public.s31influx
(14 rows)

-- select spread (stub agg function, result)
--Testcase 64:
SELECT * FROM (
SELECT spread(value1),spread(value2),spread(value3),spread(value4) FROM s3
) AS t ORDER BY 1,2,3,4;
       spread       | spread |       spread       | spread 
--------------------+--------+--------------------+--------
 3.1999999999999997 |    100 | 3.1999999999999997 |    100
(1 row)

-- select spread (stub agg function, raise exception if not expected type)
--Testcase 65:
SELECT * FROM (
SELECT spread(value1::numeric),spread(value2::numeric),spread(value3::numeric),spread(value4::numeric) FROM s3
) AS t ORDER BY 1,2,3,4;
       spread       | spread |       spread       | spread 
--------------------+--------+--------------------+--------
 3.1999999999999997 |    100 | 3.1999999999999997 |    100
(1 row)

-- select abs as nest function with agg (pushdown, explain)
--Testcase 66:
EXPLAIN VERBOSE
SELECT sum(value3),abs(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (abs((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), abs((sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select abs as nest function with agg (pushdown, result)
--Testcase 67:
SELECT * FROM (
SELECT sum(value3),abs(sum(value3)) FROM s3
) AS t ORDER BY 1,2;
        sum         |        abs        
--------------------+-------------------
 -7.199999999999999 | 7.199999999999999
(1 row)

-- select abs as nest with log2 (pushdown, explain)
--Testcase 68:
EXPLAIN VERBOSE
SELECT abs(log2(value1)),abs(log2(1/value1)) FROM s3;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (abs(log2(value1))), (abs(log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT abs(log2("value1")), abs(log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT abs(public.log2(value1)), abs(public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select abs as nest with log2 (pushdown, result)
--Testcase 69:
SELECT * FROM (
SELECT abs(log2(value1)),abs(log2(1/value1)) FROM s3
) AS t ORDER BY 1,2;
         abs         |         abs         
---------------------+---------------------
 0.13750352374993502 | 0.13750352374993496
  1.1375035237499351 |   1.137503523749935
   1.722466024471091 |   1.722466024471091
   1.736965594166206 |   1.736965594166206
   2.321928094887362 |   2.321928094887362
   3.321928094887362 |   3.321928094887362
(6 rows)

-- select abs with non pushdown func and explicit constant (explain)
--Testcase 70:
EXPLAIN VERBOSE
SELECT abs(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (abs(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (abs(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (abs(value3)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT abs("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT abs(value3), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select abs with non pushdown func and explicit constant (result)
--Testcase 71:
SELECT * FROM (
SELECT abs(value3), pi(), 4.1 FROM s3
) AS t ORDER BY 1,2,3;
 abs |        pi         | ?column? 
-----+-------------------+----------
 0.1 | 3.141592653589793 |      4.1
 0.2 | 3.141592653589793 |      4.1
 0.3 | 3.141592653589793 |      4.1
 1.1 | 3.141592653589793 |      4.1
 2.2 | 3.141592653589793 |      4.1
 3.3 | 3.141592653589793 |      4.1
(6 rows)

-- select sqrt as nest function with agg and explicit constant (pushdown, explain)
--Testcase 72:
EXPLAIN VERBOSE
SELECT sqrt(count(value1)), pi(), 4.1 FROM s3 ORDER BY 1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=48)
   Output: (sqrt(((count(value1)))::double precision)), '3.141592653589793'::double precision, 4.1
   Sort Key: (sqrt(((count(s3.value1)))::double precision))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=48)
         Output: sqrt(((count(value1)))::double precision), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT count("value1") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT count(value1) FROM public.s31influx
(14 rows)

-- select sqrt as nest function with agg and explicit constant (pushdown, result)
--Testcase 73:
SELECT * FROM (
SELECT sqrt(count(value1)), pi(), 4.1 FROM s3
) AS t ORDER BY 1,2,3;
       sqrt        |        pi         | ?column? 
-------------------+-------------------+----------
 2.449489742783178 | 3.141592653589793 |      4.1
(1 row)

-- select sqrt as nest function with agg and explicit constant and tag (error, explain)
--Testcase 74:
EXPLAIN VERBOSE
SELECT sqrt(count(value1)), pi(), 4.1, tag1 FROM s3 ORDER BY 1;
ERROR:  column "s3.tag1" must appear in the GROUP BY clause or be used in an aggregate function
LINE 2: SELECT sqrt(count(value1)), pi(), 4.1, tag1 FROM s3 ORDER BY...
                                               ^
-- select spread (stub agg function and group by influx_time() and tag) (explain)
--Testcase 75:
EXPLAIN VERBOSE
SELECT spread("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=48)
   Output: (spread(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (spread(s3.value1))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=48)
         Output: spread(value1), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=48)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1, value1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=48)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1, value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1, value1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select spread (stub agg function and group by influx_time() and tag) (result)
--Testcase 76:
SELECT * FROM (
SELECT spread("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1
) AS t ORDER BY 1,2,3;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select spread (stub agg function and group by tag only) (result)
--Testcase 77:
SELECT * FROM (
SELECT tag1,spread("value1") FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1
) AS t ORDER BY 1,2;
 tag1 |       spread        
------+---------------------
 a    | 0.19999999999999998
 b    |                 1.1
(2 rows)

-- select spread (stub agg function and other aggs) (result)
--Testcase 78:
SELECT sum("value1"),spread("value1"),count("value1") FROM s3 ORDER BY 1;
        sum        |       spread       | count 
-------------------+--------------------+-------
 7.199999999999999 | 3.1999999999999997 |     6
(1 row)

-- select abs with order by (explain)
--Testcase 79:
EXPLAIN VERBOSE
SELECT value1, abs(1-value1) FROM s3 ORDER BY abs(1-value1);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (abs(('1'::double precision - value1)))
   Sort Key: (abs(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (abs(('1'::double precision - value1)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", abs((1 - "value1")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, abs((1::double precision - value1)) FROM public.s31influx
(11 rows)

-- select abs with order by (result)
--Testcase 80:
SELECT value1, abs(1-value1) FROM s3 ORDER BY abs(1-value1);
 value1 |         abs         
--------+---------------------
    1.1 | 0.10000000000000009
    0.3 |                 0.7
    0.2 |                 0.8
    0.1 |                 0.9
    2.2 |  1.2000000000000002
    3.3 |                 2.3
(6 rows)

-- select abs with order by index (result)
--Testcase 81:
SELECT value1, abs(1-value1) FROM s3 ORDER BY 2,1;
 value1 |         abs         
--------+---------------------
    1.1 | 0.10000000000000009
    0.3 |                 0.7
    0.2 |                 0.8
    0.1 |                 0.9
    2.2 |  1.2000000000000002
    3.3 |                 2.3
(6 rows)

-- select abs with order by index (result)
--Testcase 82:
SELECT value1, abs(1-value1) FROM s3 ORDER BY 1,2;
 value1 |         abs         
--------+---------------------
    0.1 |                 0.9
    0.2 |                 0.8
    0.3 |                 0.7
    1.1 | 0.10000000000000009
    2.2 |  1.2000000000000002
    3.3 |                 2.3
(6 rows)

-- select abs and as
--Testcase 83:
SELECT * FROM (
SELECT abs(value3) as abs1 FROM s3
) AS t ORDER BY 1;
 abs1 
------
  0.1
  0.2
  0.3
  1.1
  2.2
  3.3
(6 rows)

-- select abs(*) (stub function, explain)
--Testcase 84:
EXPLAIN VERBOSE
SELECT abs_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (abs_all())
   Sort Key: (abs_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (abs_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT abs(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.abs_all() FROM public.s31influx
(11 rows)

-- select abs(*) (stub function, result)
--Testcase 85:
SELECT * FROM (
SELECT abs_all() from s3
) AS t ORDER BY 1;
                               abs_all                               
---------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,0.1,100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.2,100,0.2,100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.3,100,0.3,100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.1,200,1.1,200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2.2,200,2.2,200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,3.3,200,3.3,200,/influxdb_svr/)
(6 rows)

-- select abs(*) (stub function and group by tag only) (explain)
--Testcase 86:
EXPLAIN VERBOSE
SELECT abs_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (abs_all()), tag1
   Sort Key: (abs_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (abs_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT abs(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.abs_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select abs(*) (stub function and group by tag only) (result)
--Testcase 87:
SELECT abs_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                               abs_all                               
---------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,0.1,100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.2,100,0.2,100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.3,100,0.3,100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.1,200,1.1,200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2.2,200,2.2,200,/influxdb_svr/)
(5 rows)

-- select abs(*) (stub function, expose data, explain)
--Testcase 88:
EXPLAIN VERBOSE
SELECT (abs_all()::s3).* from s3 ORDER BY 1;
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((abs_all()))::s3)."time"), ((((abs_all()))::s3).tag1), ((((abs_all()))::s3).value1), ((((abs_all()))::s3).value2), ((((abs_all()))::s3).value3), ((((abs_all()))::s3).value4), ((((abs_all()))::s3).__spd_url)
   Sort Key: ((((abs_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((abs_all()))::s3)."time", (((abs_all()))::s3).tag1, (((abs_all()))::s3).value1, (((abs_all()))::s3).value2, (((abs_all()))::s3).value3, (((abs_all()))::s3).value4, (((abs_all()))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT abs(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.abs_all() FROM public.s31influx
(11 rows)

-- select abs(*) (stub function, expose data, result)
--Testcase 89:
SELECT * FROM (
SELECT (abs_all()::s3).* from s3
) AS t ORDER BY 1;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      |    0.1 |    100 |    0.1 |    100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:01+09 |      |    0.2 |    100 |    0.2 |    100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |    0.3 |    100 |    0.3 |    100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:03+09 |      |    1.1 |    200 |    1.1 |    200 | /influxdb_svr/
 1970-01-01 09:00:04+09 |      |    2.2 |    200 |    2.2 |    200 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |    3.3 |    200 |    3.3 |    200 | /influxdb_svr/
(6 rows)

-- select spread over join query (explain)
--Testcase 90:
EXPLAIN VERBOSE
SELECT spread(t1.value1), spread(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=932.56..932.56 rows=1 width=16)
   Output: (spread(t1.value1)), (spread(t2.value1))
   Sort Key: (spread(t1.value1))
   ->  Aggregate  (cost=932.54..932.55 rows=1 width=16)
         Output: spread(t1.value1), spread(t2.value1)
         ->  Nested Loop  (cost=220.00..354.54 rows=1156 width=16)
               Output: t1.value1, t2.value1
               ->  Foreign Scan on public.s3 t1  (cost=110.00..170.00 rows=34 width=8)
                     Output: t1.value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
               ->  Materialize  (cost=110.00..170.17 rows=34 width=8)
                     Output: t2.value1
                     ->  Foreign Scan on public.s3 t2  (cost=110.00..170.00 rows=34 width=8)
                           Output: t2.value1
                           Node: influxdb_svr / Status: Alive
                             Sort push-down: no
                             InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                           Node: pgspider_svr / Status: Alive
                             Sort push-down: no
                             Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
(25 rows)

-- select spread over join query (result, stub call error)
--Testcase 91:
SELECT spread(t1.value1), spread(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
ERROR:  stub spread_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function spread_sfunc(double precision,double precision) line 3 at RAISE
-- select spread with having (explain)
--Testcase 92:
EXPLAIN VERBOSE
SELECT spread(value1) FROM s3 HAVING spread(value1) > 100 ORDER BY 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=8)
   Output: (spread(value1))
   Sort Key: (spread(s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=8)
         Output: (spread(value1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT min("value1"), max("value1") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT min(value1), max(value1) FROM public.s31influx
(14 rows)

-- select spread with having (result, not pushdown, stub call error)
--Testcase 93:
SELECT spread(value1) FROM s3 HAVING spread(value1) > 100 ORDER BY 1;
 spread 
--------
(0 rows)

-- select spread(*) (stub agg function, explain)
--Testcase 94:
EXPLAIN VERBOSE
SELECT spread_all(*) from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (spread_all(*))
   Sort Key: (spread_all(*))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: spread_all(*)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select spread(*) (stub agg function, result)
--Testcase 95:
SELECT spread_all(*) from s3 ORDER BY 1;
ERROR:  stub spread_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function spread_all_sfunc(text) line 3 at RAISE
-- select spread(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 96:
EXPLAIN VERBOSE
SELECT spread_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (spread_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (spread_all(*))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: spread_all(*), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select spread(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 97:
SELECT spread_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select spread(*) (stub agg function and group by tag only) (explain)
--Testcase 98:
EXPLAIN VERBOSE
SELECT spread_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (spread_all(*)), tag1
   Sort Key: (spread_all(*))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: spread_all(*), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select spread(*) (stub agg function and group by tag only) (result)
--Testcase 99:
SELECT spread_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub spread_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function spread_all_sfunc(text) line 3 at RAISE
-- select spread(*) (stub agg function, expose data, explain)
--Testcase 100:
EXPLAIN VERBOSE
SELECT (spread_all(*)::s3).* from s3 ORDER BY 1;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((spread_all(*))::s3)."time"), (((spread_all(*))::s3).tag1), (((spread_all(*))::s3).value1), (((spread_all(*))::s3).value2), (((spread_all(*))::s3).value3), (((spread_all(*))::s3).value4), (((spread_all(*))::s3).__spd_url)
   Sort Key: (((spread_all(*))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((spread_all(*))::s3)."time", ((spread_all(*))::s3).tag1, ((spread_all(*))::s3).value1, ((spread_all(*))::s3).value2, ((spread_all(*))::s3).value3, ((spread_all(*))::s3).value4, ((spread_all(*))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select spread(*) (stub agg function, expose data, result)
--Testcase 101:
SELECT (spread_all(*)::s3).* from s3 ORDER BY 1;
ERROR:  stub spread_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function spread_all_sfunc(text) line 3 at RAISE
-- select spread(regex) (stub agg function, explain)
--Testcase 102:
EXPLAIN VERBOSE
SELECT spread('/value[1,4]/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (spread('/value[1,4]/'::text))
   Sort Key: (spread('/value[1,4]/'::text))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: spread('/value[1,4]/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select spread(regex) (stub agg function, result)
--Testcase 103:
SELECT spread('/value[1,4]/') from s3 ORDER BY 1;
ERROR:  stub spread_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function spread_sfunc(text,text) line 3 at RAISE
-- select spread(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 104:
EXPLAIN VERBOSE
SELECT spread('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (spread('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (spread('/^v.*/'::text))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: spread('/^v.*/'::text), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select spread(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 105:
SELECT spread('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select spread(regex) (stub agg function and group by tag only) (explain)
--Testcase 106:
EXPLAIN VERBOSE
SELECT spread('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (spread('/value[1,4]/'::text)), tag1
   Sort Key: (spread('/value[1,4]/'::text))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: spread('/value[1,4]/'::text), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select spread(regex) (stub agg function and group by tag only) (result)
--Testcase 107:
SELECT spread('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub spread_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function spread_sfunc(text,text) line 3 at RAISE
-- select spread(regex) (stub agg function, expose data, explain)
--Testcase 108:
EXPLAIN VERBOSE
SELECT (spread('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                     QUERY PLAN                                                                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((spread('/value[1,4]/'::text))::s3)."time"), (((spread('/value[1,4]/'::text))::s3).tag1), (((spread('/value[1,4]/'::text))::s3).value1), (((spread('/value[1,4]/'::text))::s3).value2), (((spread('/value[1,4]/'::text))::s3).value3), (((spread('/value[1,4]/'::text))::s3).value4), (((spread('/value[1,4]/'::text))::s3).__spd_url)
   Sort Key: (((spread('/value[1,4]/'::text))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((spread('/value[1,4]/'::text))::s3)."time", ((spread('/value[1,4]/'::text))::s3).tag1, ((spread('/value[1,4]/'::text))::s3).value1, ((spread('/value[1,4]/'::text))::s3).value2, ((spread('/value[1,4]/'::text))::s3).value3, ((spread('/value[1,4]/'::text))::s3).value4, ((spread('/value[1,4]/'::text))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select spread(regex) (stub agg function, expose data, result)
--Testcase 109:
SELECT (spread('/value[1,4]/')::s3).* from s3 ORDER BY 1;
ERROR:  stub spread_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function spread_sfunc(text,text) line 3 at RAISE
-- select abs with arithmetic and tag in the middle (explain)
--Testcase 110:
EXPLAIN VERBOSE
SELECT abs(value1) + 1, value2, tag1, sqrt(value2) FROM s3 ORDER BY 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4128.36..4145.42 rows=6826 width=56)
   Output: ((abs(value1) + '1'::double precision)), value2, tag1, (sqrt((value2)::double precision))
   Sort Key: ((abs(s3.value1) + '1'::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..3693.65 rows=6826 width=56)
         Output: ((abs(value1) + '1'::double precision)), value2, tag1, (sqrt((value2)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT (abs("value1") + 1), "value2", "tag1", sqrt("value2") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT (abs(value1) + 1::double precision), value2, tag1, sqrt(value2) FROM public.s31influx
(11 rows)

-- select abs with arithmetic and tag in the middle (result)
--Testcase 111:
SELECT * FROM (
SELECT abs(value1) + 1, value2, tag1, sqrt(value2) FROM s3
) AS t ORDER BY 1,2,3,4;
 ?column? | value2 | tag1 |        sqrt        
----------+--------+------+--------------------
      1.1 |    100 | a    |                 10
      1.2 |    100 | a    |                 10
      1.3 |    100 | a    |                 10
      2.1 |    200 | b    | 14.142135623730951
      3.2 |    200 | b    | 14.142135623730951
      4.3 |    200 | b    | 14.142135623730951
(6 rows)

-- select with order by limit (explain)
--Testcase 112:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value3), sqrt(value2) FROM s3 ORDER BY abs(value3);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=4128.36..4145.42 rows=6826 width=24)
   Output: (abs(value1)), (abs(value3)), (sqrt((value2)::double precision))
   Sort Key: (abs(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3693.65 rows=6826 width=24)
         Output: (abs(value1)), (abs(value3)), (sqrt((value2)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT abs("value1"), abs("value3"), sqrt("value2") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT abs(value1), abs(value3), sqrt(value2) FROM public.s31influx
(11 rows)

-- select with order by limit (result)
--Testcase 113:
SELECT * FROM (
SELECT abs(value1), abs(value3), sqrt(value2) FROM s3 ORDER BY abs(value3)
) AS t ORDER BY 1,2,3;
 abs | abs |        sqrt        
-----+-----+--------------------
 0.1 | 0.1 |                 10
 0.2 | 0.2 |                 10
 0.3 | 0.3 |                 10
 1.1 | 1.1 | 14.142135623730951
 2.2 | 2.2 | 14.142135623730951
 3.3 | 3.3 | 14.142135623730951
(6 rows)

-- select mixing with non pushdown func (all not pushdown, explain)
--Testcase 114:
EXPLAIN VERBOSE
SELECT abs(value1), sqrt(value2), upper(tag1) FROM s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=4128.36..4145.42 rows=6826 width=48)
   Output: (abs(value1)), (sqrt((value2)::double precision)), (upper(tag1))
   Sort Key: (abs(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3693.65 rows=6826 width=48)
         Output: abs(value1), sqrt((value2)::double precision), upper(tag1)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "tag1", "value1", "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT tag1, value1, value2 FROM public.s31influx
(11 rows)

-- select mixing with non pushdown func (result)
--Testcase 115:
SELECT * FROM (
SELECT abs(value1), sqrt(value2), upper(tag1) FROM s3
) AS t ORDER BY 1,2,3;
 abs |        sqrt        | upper 
-----+--------------------+-------
 0.1 |                 10 | A
 0.2 |                 10 | A
 0.3 |                 10 | A
 1.1 | 14.142135623730951 | B
 2.2 | 14.142135623730951 | B
 3.3 | 14.142135623730951 | B
(6 rows)

-- nested function in where clause (explain)
--Testcase 116:
EXPLAIN VERBOSE
SELECT sqrt(abs(value3)),min(value1) FROM s3 GROUP BY value3 HAVING sqrt(abs(value3)) > 0 ORDER BY 1,2;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=179.58..179.59 rows=1 width=24)
   Output: (sqrt(abs(value3))), (min(value1)), value3
   Sort Key: (sqrt(abs(s3.value3))), (min(s3.value1))
   ->  Foreign Scan  (cost=102.84..179.57 rows=1 width=24)
         Output: sqrt(abs(value3)), (min(value1)), value3
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: no
           InfluxDB query: SELECT "value1", "value3" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT min(value1), value3 FROM public.s31influx WHERE ((sqrt(abs(value3)) > 0::double precision)) GROUP BY 2
(14 rows)

-- nested function in where clause (result)
--Testcase 117:
SELECT sqrt(abs(value3)),min(value1) FROM s3 GROUP BY value3 HAVING sqrt(abs(value3)) > 0 ORDER BY 1,2;
        sqrt         | min 
---------------------+-----
 0.31622776601683794 | 0.1
  0.4472135954999579 | 0.2
  0.5477225575051661 | 0.3
  1.0488088481701516 | 1.1
  1.4832396974191326 | 2.2
   1.816590212458495 | 3.3
(6 rows)

--Testcase 118:
EXPLAIN VERBOSE
SELECT first(time, value1), first(time, value2), first(time, value3), first(time, value4) FROM s3 ORDER BY 1;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=32)
   Output: (first("time", value1)), (first("time", value2)), (first("time", value3)), (first("time", value4))
   Sort Key: (first(s3."time", s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=32)
         Output: (first("time", value1)), (first("time", value2)), (first("time", value3)), (first("time", value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT first("value1"), first("value2"), first("value3"), first("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.first("time", value1), public.first("time", value2), public.first("time", value3), public.first("time", value4) FROM public.s31influx
(14 rows)

--Testcase 119:
SELECT first(time, value1), first(time, value2), first(time, value3), first(time, value4) FROM s3 ORDER BY 1;
       first        | first |        first        | first 
--------------------+-------+---------------------+-------
 1.2000000000000002 |   300 | -1.2000000000000002 |  -300
(1 row)

-- select first(*) (stub agg function, explain)
--Testcase 120:
EXPLAIN VERBOSE
SELECT first_all(*) from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (first_all(*))
   Sort Key: (first_all(*))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: first_all(*)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select first(*) (stub agg function, result)
--Testcase 121:
SELECT * FROM (
SELECT first_all(*) from s3
) AS t ORDER BY 1;
ERROR:  stub first_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function first_all_sfunc(text) line 3 at RAISE
-- select first(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 122:
EXPLAIN VERBOSE
SELECT first_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (first_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (first_all(*))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: first_all(*), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select first(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 123:
SELECT first_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- -- select first(*) (stub agg function and group by tag only) (explain)
-- -- EXPLAIN VERBOSE
-- SELECT first_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
-- -- select first(*) (stub agg function and group by tag only) (result)
-- -- SELECT first_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
-- select first(*) (stub agg function, expose data, explain)
--Testcase 124:
EXPLAIN VERBOSE
SELECT (first_all(*)::s3).* from s3 ORDER BY 1;
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((first_all(*))::s3)."time"), (((first_all(*))::s3).tag1), (((first_all(*))::s3).value1), (((first_all(*))::s3).value2), (((first_all(*))::s3).value3), (((first_all(*))::s3).value4), (((first_all(*))::s3).__spd_url)
   Sort Key: (((first_all(*))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((first_all(*))::s3)."time", ((first_all(*))::s3).tag1, ((first_all(*))::s3).value1, ((first_all(*))::s3).value2, ((first_all(*))::s3).value3, ((first_all(*))::s3).value4, ((first_all(*))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select first(*) (stub agg function, expose data, result)
--Testcase 125:
SELECT * FROM (
SELECT (first_all(*)::s3).* from s3
) AS t ORDER BY 1;
ERROR:  stub first_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function first_all_sfunc(text) line 3 at RAISE
-- select first(regex) (stub function, explain)
--Testcase 126:
EXPLAIN VERBOSE
SELECT first('/value[1,4]/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (first('/value[1,4]/'::text))
   Sort Key: (first('/value[1,4]/'::text))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: first('/value[1,4]/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select first(regex) (stub function, explain)
--Testcase 127:
SELECT first('/value[1,4]/') from s3 ORDER BY 1;
ERROR:  stub first_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function first_sfunc(text,text) line 3 at RAISE
-- select multiple regex functions (do not push down, raise warning and stub error) (explain)
--Testcase 128:
EXPLAIN VERBOSE
SELECT first('/value[1,4]/'), first('/^v.*/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=7038.41..7038.41 rows=1 width=64)
   Output: (first('/value[1,4]/'::text)), (first('/^v.*/'::text))
   Sort Key: (first('/value[1,4]/'::text))
   ->  Aggregate  (cost=7038.39..7038.40 rows=1 width=64)
         Output: first('/value[1,4]/'::text), first('/^v.*/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select multiple regex functions (do not push down, raise warning and stub error) (result)
--Testcase 129:
SELECT first('/value[1,4]/'), first('/^v.*/') from s3 ORDER BY 1;
ERROR:  stub first_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function first_sfunc(text,text) line 3 at RAISE
-- select first(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 130:
EXPLAIN VERBOSE
SELECT first('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (first('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (first('/^v.*/'::text))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: first('/^v.*/'::text), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select first(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 131:
SELECT first('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- -- select first(regex) (stub agg function and group by tag only) (explain)
-- -- EXPLAIN VERBOSE
-- SELECT first('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
-- -- select first(regex) (stub agg function and group by tag only) (result)
-- -- SELECT first('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
-- select first(regex) (stub agg function, expose data, explain)
--Testcase 132:
EXPLAIN VERBOSE
SELECT (first('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                 QUERY PLAN                                                                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((first('/value[1,4]/'::text))::s3)."time"), (((first('/value[1,4]/'::text))::s3).tag1), (((first('/value[1,4]/'::text))::s3).value1), (((first('/value[1,4]/'::text))::s3).value2), (((first('/value[1,4]/'::text))::s3).value3), (((first('/value[1,4]/'::text))::s3).value4), (((first('/value[1,4]/'::text))::s3).__spd_url)
   Sort Key: (((first('/value[1,4]/'::text))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((first('/value[1,4]/'::text))::s3)."time", ((first('/value[1,4]/'::text))::s3).tag1, ((first('/value[1,4]/'::text))::s3).value1, ((first('/value[1,4]/'::text))::s3).value2, ((first('/value[1,4]/'::text))::s3).value3, ((first('/value[1,4]/'::text))::s3).value4, ((first('/value[1,4]/'::text))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select first(regex) (stub agg function, expose data, result)
--Testcase 133:
SELECT * FROM (
SELECT (first('/value[1,4]/')::s3).* from s3
) AS t ORDER BY 1;
ERROR:  stub first_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function first_sfunc(text,text) line 3 at RAISE
--Testcase 134:
EXPLAIN VERBOSE
SELECT last(time, value1), last(time, value2), last(time, value3), last(time, value4) FROM s3 ORDER BY 1;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=32)
   Output: (last("time", value1)), (last("time", value2)), (last("time", value3)), (last("time", value4))
   Sort Key: (last(s3."time", s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=32)
         Output: (last("time", value1)), (last("time", value2)), (last("time", value3)), (last("time", value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT last("value1"), last("value2"), last("value3"), last("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.last("time", value1), public.last("time", value2), public.last("time", value3), public.last("time", value4) FROM public.s31influx
(14 rows)

--Testcase 135:
SELECT last(time, value1), last(time, value2), last(time, value3), last(time, value4) FROM s3 ORDER BY 1;
 last | last | last | last 
------+------+------+------
  3.3 |  200 | -0.3 | -100
(1 row)

-- select last(*) (stub agg function, explain)
--Testcase 136:
EXPLAIN VERBOSE
SELECT last_all(*) from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (last_all(*))
   Sort Key: (last_all(*))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: last_all(*)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select last(*) (stub agg function, result)
--Testcase 137:
SELECT * FROM (
SELECT last_all(*) from s3
) AS t ORDER BY 1;
ERROR:  stub last_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function last_all_sfunc(text) line 3 at RAISE
-- select last(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 138:
EXPLAIN VERBOSE
SELECT last_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (last_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (last_all(*))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: last_all(*), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select last(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 139:
SELECT last_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- -- select last(*) (stub agg function and group by tag only) (explain)
-- -- EXPLAIN VERBOSE
-- SELECT last_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
-- -- select last(*) (stub agg function and group by tag only) (result)
-- -- SELECT last_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
-- select last(*) (stub agg function, expose data, explain)
--Testcase 140:
EXPLAIN VERBOSE
SELECT (last_all(*)::s3).* from s3 ORDER BY 1;
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((last_all(*))::s3)."time"), (((last_all(*))::s3).tag1), (((last_all(*))::s3).value1), (((last_all(*))::s3).value2), (((last_all(*))::s3).value3), (((last_all(*))::s3).value4), (((last_all(*))::s3).__spd_url)
   Sort Key: (((last_all(*))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((last_all(*))::s3)."time", ((last_all(*))::s3).tag1, ((last_all(*))::s3).value1, ((last_all(*))::s3).value2, ((last_all(*))::s3).value3, ((last_all(*))::s3).value4, ((last_all(*))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select last(*) (stub agg function, expose data, result)
--Testcase 141:
SELECT * FROM (
SELECT (last_all(*)::s3).* from s3
) AS t ORDER BY 1;
ERROR:  stub last_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function last_all_sfunc(text) line 3 at RAISE
-- select last(regex) (stub function, explain)
--Testcase 142:
EXPLAIN VERBOSE
SELECT last('/value[1,4]/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (last('/value[1,4]/'::text))
   Sort Key: (last('/value[1,4]/'::text))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: last('/value[1,4]/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select last(regex) (stub function, result)
--Testcase 143:
SELECT last('/value[1,4]/') from s3 ORDER BY 1;
ERROR:  stub last_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function last_sfunc(text,text) line 3 at RAISE
-- select multiple regex functions (do not push down, raise warning and stub error) (explain)
--Testcase 144:
EXPLAIN VERBOSE
SELECT first('/value[1,4]/'), first('/^v.*/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=7038.41..7038.41 rows=1 width=64)
   Output: (first('/value[1,4]/'::text)), (first('/^v.*/'::text))
   Sort Key: (first('/value[1,4]/'::text))
   ->  Aggregate  (cost=7038.39..7038.40 rows=1 width=64)
         Output: first('/value[1,4]/'::text), first('/^v.*/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select multiple regex functions (do not push down, raise warning and stub error) (result)
--Testcase 145:
SELECT first('/value[1,4]/'), first('/^v.*/') from s3 ORDER BY 1;
ERROR:  stub first_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function first_sfunc(text,text) line 3 at RAISE
-- select last(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 146:
EXPLAIN VERBOSE
SELECT last('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (last('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (last('/^v.*/'::text))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: last('/^v.*/'::text), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select last(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 147:
SELECT last('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- -- select last(regex) (stub agg function and group by tag only) (explain)
-- -- EXPLAIN VERBOSE
-- SELECT last('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
-- -- select last(regex) (stub agg function and group by tag only) (result)
-- -- SELECT last('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
-- select last(regex) (stub agg function, expose data, explain)
--Testcase 148:
EXPLAIN VERBOSE
SELECT (last('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                              QUERY PLAN                                                                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((last('/value[1,4]/'::text))::s3)."time"), (((last('/value[1,4]/'::text))::s3).tag1), (((last('/value[1,4]/'::text))::s3).value1), (((last('/value[1,4]/'::text))::s3).value2), (((last('/value[1,4]/'::text))::s3).value3), (((last('/value[1,4]/'::text))::s3).value4), (((last('/value[1,4]/'::text))::s3).__spd_url)
   Sort Key: (((last('/value[1,4]/'::text))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((last('/value[1,4]/'::text))::s3)."time", ((last('/value[1,4]/'::text))::s3).tag1, ((last('/value[1,4]/'::text))::s3).value1, ((last('/value[1,4]/'::text))::s3).value2, ((last('/value[1,4]/'::text))::s3).value3, ((last('/value[1,4]/'::text))::s3).value4, ((last('/value[1,4]/'::text))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select last(regex) (stub agg function, expose data, result)
--Testcase 149:
SELECT * FROM (
SELECT (last('/value[1,4]/')::s3).* from s3
) AS t ORDER BY 1;
ERROR:  stub last_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function last_sfunc(text,text) line 3 at RAISE
--Testcase 150:
EXPLAIN VERBOSE
SELECT sample(value2, 3) FROM s3 WHERE value2 < 200 ORDER BY 1;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Sort  (cost=153.70..153.71 rows=1 width=8)
   Output: (sample(value2, 3))
   Sort Key: (sample(s3.value2, 3))
   ->  Foreign Scan  (cost=101.00..153.69 rows=1 width=8)
         Output: (sample(value2, 3))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sample("value2", 3) FROM "s32" WHERE (("value2" < 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.sample(value2, 3) FROM public.s31influx WHERE ((value2 < 200))
(14 rows)

--Testcase 151:
SELECT sample(value2, 3) FROM s3 WHERE value2 < 200 ORDER BY 1;
 sample 
--------
    300
(1 row)

--Testcase 152:
EXPLAIN VERBOSE
SELECT sample(value2, 1) FROM s3 WHERE time >= to_timestamp(0) AND time <= to_timestamp(5) GROUP BY influx_time(time, interval '3s') ORDER BY 1;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.69..205.77 rows=32 width=16)
   Output: (sample(value2, 1)), (influx_time("time", '@ 3 secs'::interval))
   Sort Key: (sample(s3.value2, 1))
   ->  GroupAggregate  (cost=187.90..204.89 rows=32 width=16)
         Output: sample(value2, 1), (influx_time("time", '@ 3 secs'::interval))
         Group Key: (influx_time(s3."time", '@ 3 secs'::interval))
         ->  Sort  (cost=187.90..187.98 rows=34 width=16)
               Output: (influx_time("time", '@ 3 secs'::interval)), value2
               Sort Key: (influx_time(s3."time", '@ 3 secs'::interval))
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=16)
                     Output: influx_time("time", '@ 3 secs'::interval), value2
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "value2" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:05'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", value2 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:05+09'))
(17 rows)

--Testcase 153:
SELECT sample(value2, 1) FROM s3 WHERE time >= to_timestamp(0) AND time <= to_timestamp(5) GROUP BY influx_time(time, interval '3s') ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select sample(*, int) (stub agg function, explain)
--Testcase 154:
EXPLAIN VERBOSE
SELECT sample_all(50) from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (sample_all(50))
   Sort Key: (sample_all(50))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (sample_all(50))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sample(*, 50) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sample_all(50) FROM public.s31influx
(11 rows)

-- select sample(*, int) (stub agg function, result)
--Testcase 155:
SELECT * FROM (
SELECT sample_all(50) from s3
) AS t ORDER BY 1;
                              sample_all                               
-----------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,3.3,200,-3.3,-200,/influxdb_svr/)
(6 rows)

-- select sample(*, int) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 156:
EXPLAIN VERBOSE
SELECT sample_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=204.95..205.03 rows=32 width=72)
   Output: (sample_all(50)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (sample_all(50))
   ->  Group  (cost=187.90..204.15 rows=32 width=72)
         Output: sample_all(50), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select sample(*, int) (stub agg function and group by influx_time() and tag) (result)
--Testcase 157:
SELECT sample_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- -- select sample(*, int) (stub agg function and group by tag only) (explain)
-- -- EXPLAIN VERBOSE
-- SELECT sample_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
-- -- select sample(*, int) (stub agg function and group by tag only) (result)
-- -- SELECT sample_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
-- select sample(*, int) (stub agg function, expose data, explain)
--Testcase 158:
EXPLAIN VERBOSE
SELECT (sample_all(50)::s3).* from s3 ORDER BY 1;
                                                                                                                           QUERY PLAN                                                                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((sample_all(50)))::s3)."time"), ((((sample_all(50)))::s3).tag1), ((((sample_all(50)))::s3).value1), ((((sample_all(50)))::s3).value2), ((((sample_all(50)))::s3).value3), ((((sample_all(50)))::s3).value4), ((((sample_all(50)))::s3).__spd_url)
   Sort Key: ((((sample_all(50)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((sample_all(50)))::s3)."time", (((sample_all(50)))::s3).tag1, (((sample_all(50)))::s3).value1, (((sample_all(50)))::s3).value2, (((sample_all(50)))::s3).value3, (((sample_all(50)))::s3).value4, (((sample_all(50)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sample(*, 50) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sample_all(50) FROM public.s31influx
(11 rows)

-- select sample(*, int) (stub agg function, expose data, result)
--Testcase 159:
SELECT * FROM (
SELECT (sample_all(50)::s3).* from s3
) AS t ORDER BY 1;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      |    0.1 |    100 |   -0.1 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:01+09 |      |    0.2 |    100 |   -0.2 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |    0.3 |    100 |   -0.3 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:03+09 |      |    1.1 |    200 |   -1.1 |   -200 | /influxdb_svr/
 1970-01-01 09:00:04+09 |      |    2.2 |    200 |   -2.2 |   -200 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |    3.3 |    200 |   -3.3 |   -200 | /influxdb_svr/
(6 rows)

-- select sample(regex) (stub agg function, explain)
--Testcase 160:
EXPLAIN VERBOSE
SELECT sample('/value[1,4]/', 50) from s3 ORDER BY 1;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (sample('/value[1,4]/'::text, 50))
   Sort Key: (sample('/value[1,4]/'::text, 50))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (sample('/value[1,4]/'::text, 50))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sample(/value[1,4]/, 50) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sample('/value[1,4]/'::text, 50) FROM public.s31influx
(11 rows)

-- select sample(regex) (stub agg function, result)
--Testcase 161:
SELECT sample('/value[1,4]/', 50) from s3 ORDER BY 1;
                             sample                             
----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.2,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.3,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.1,,,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2.2,,,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,3.3,,,-200,/influxdb_svr/)
(6 rows)

-- select sample(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 162:
EXPLAIN VERBOSE
SELECT sample('/^v.*/', 50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=204.95..205.03 rows=32 width=72)
   Output: (sample('/^v.*/'::text, 50)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (sample('/^v.*/'::text, 50))
   ->  Group  (cost=187.90..204.15 rows=32 width=72)
         Output: sample('/^v.*/'::text, 50), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select sample(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 163:
SELECT sample('/^v.*/', 50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- -- select sample(regex) (stub agg function and group by tag only) (explain)
-- -- EXPLAIN VERBOSE
-- SELECT sample('/value[1,4]/', 50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
-- -- select sample(regex) (stub agg function and group by tag only) (result)
-- -- SELECT sample('/value[1,4]/', 50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
-- select sample(regex) (stub agg function, expose data, explain)
--Testcase 164:
EXPLAIN VERBOSE
SELECT (sample('/value[1,4]/', 50)::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                          QUERY PLAN                                                                                                                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((sample('/value[1,4]/'::text, 50)))::s3)."time"), ((((sample('/value[1,4]/'::text, 50)))::s3).tag1), ((((sample('/value[1,4]/'::text, 50)))::s3).value1), ((((sample('/value[1,4]/'::text, 50)))::s3).value2), ((((sample('/value[1,4]/'::text, 50)))::s3).value3), ((((sample('/value[1,4]/'::text, 50)))::s3).value4), ((((sample('/value[1,4]/'::text, 50)))::s3).__spd_url)
   Sort Key: ((((sample('/value[1,4]/'::text, 50)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((sample('/value[1,4]/'::text, 50)))::s3)."time", (((sample('/value[1,4]/'::text, 50)))::s3).tag1, (((sample('/value[1,4]/'::text, 50)))::s3).value1, (((sample('/value[1,4]/'::text, 50)))::s3).value2, (((sample('/value[1,4]/'::text, 50)))::s3).value3, (((sample('/value[1,4]/'::text, 50)))::s3).value4, (((sample('/value[1,4]/'::text, 50)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sample(/value[1,4]/, 50) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sample('/value[1,4]/'::text, 50) FROM public.s31influx
(11 rows)

-- select sample(regex) (stub agg function, expose data, result)
--Testcase 165:
SELECT * FROM (
SELECT (sample('/value[1,4]/', 50)::s3).* from s3
) AS t ORDER BY 1;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      |    0.1 |        |        |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:01+09 |      |    0.2 |        |        |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |    0.3 |        |        |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:03+09 |      |    1.1 |        |        |   -200 | /influxdb_svr/
 1970-01-01 09:00:04+09 |      |    2.2 |        |        |   -200 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |    3.3 |        |        |   -200 | /influxdb_svr/
(6 rows)

--Testcase 166:
EXPLAIN VERBOSE
SELECT cumulative_sum(value1),cumulative_sum(value2),cumulative_sum(value3),cumulative_sum(value4) FROM s3 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (cumulative_sum(value1)), (cumulative_sum(value2)), (cumulative_sum(value3)), (cumulative_sum(value4))
   Sort Key: (cumulative_sum(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (cumulative_sum(value1)), (cumulative_sum(value2)), (cumulative_sum(value3)), (cumulative_sum(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT cumulative_sum("value1"), cumulative_sum("value2"), cumulative_sum("value3"), cumulative_sum("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.cumulative_sum(value1), public.cumulative_sum(value2), public.cumulative_sum(value3), public.cumulative_sum(value4) FROM public.s31influx
(11 rows)

--Testcase 167:
SELECT cumulative_sum(value1),cumulative_sum(value2),cumulative_sum(value3),cumulative_sum(value4) FROM s3 ORDER BY 1;
   cumulative_sum    | cumulative_sum |    cumulative_sum    | cumulative_sum 
---------------------+----------------+----------------------+----------------
                 0.1 |            100 |                 -0.1 |           -100
 0.30000000000000004 |            200 | -0.30000000000000004 |           -200
  0.6000000000000001 |            300 |  -0.6000000000000001 |           -300
                 1.1 |            200 |                 -1.1 |           -200
  3.3000000000000003 |            400 |  -3.3000000000000003 |           -400
                 6.6 |            600 |                 -6.6 |           -600
(6 rows)

-- select cumulative_sum(*) (stub function, explain)
--Testcase 168:
EXPLAIN VERBOSE
SELECT cumulative_sum_all() from s3 ORDER BY 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (cumulative_sum_all())
   Sort Key: (cumulative_sum_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (cumulative_sum_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT cumulative_sum(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.cumulative_sum_all() FROM public.s31influx
(11 rows)

-- select cumulative_sum(*) (stub function, result)
--Testcase 169:
SELECT * FROM (
SELECT cumulative_sum_all() from s3
) AS t ORDER BY 1;
                                          cumulative_sum_all                                           
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.30000000000000004,200,-0.30000000000000004,-200,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.6000000000000001,300,-0.6000000000000001,-300,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,3.3000000000000003,400,-3.3000000000000003,-400,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,6.6,600,-6.6,-600,/influxdb_svr/)
(6 rows)

-- select cumulative_sum(regex) (stub function, result)
--Testcase 170:
SELECT cumulative_sum('/value[1,4]/') from s3 ORDER BY 1;
                                 cumulative_sum                                 
--------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.30000000000000004,,,-200,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.6000000000000001,,,-300,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.1,,,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,3.3000000000000003,,,-400,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,6.6,,,-600,/influxdb_svr/)
(6 rows)

-- select cumulative_sum(regex) (stub function, result)
--Testcase 171:
SELECT cumulative_sum('/value[1,4]/') from s3 ORDER BY 1;
                                 cumulative_sum                                 
--------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.30000000000000004,,,-200,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.6000000000000001,,,-300,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.1,,,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,3.3000000000000003,,,-400,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,6.6,,,-600,/influxdb_svr/)
(6 rows)

-- select multiple star and regex functions (do not push down, raise warning and stub error) (result)
--Testcase 172:
EXPLAIN VERBOSE
SELECT cumulative_sum_all(), cumulative_sum('/value[1,4]/') from s3 ORDER BY 1;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=7473.10..7490.16 rows=6826 width=64)
   Output: (cumulative_sum_all()), (cumulative_sum('/value[1,4]/'::text))
   Sort Key: (cumulative_sum_all())
   ->  Foreign Scan on public.s3  (cost=110.00..7038.39 rows=6826 width=64)
         Output: cumulative_sum_all(), cumulative_sum('/value[1,4]/'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT * FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT NULL FROM public.s31influx
(11 rows)

-- select multiple star and regex functions (do not push down, raise warning and stub error) (result)
--Testcase 173:
SELECT cumulative_sum_all(), cumulative_sum('/value[1,4]/') from s3 ORDER BY 1;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub cumulative_sum_all() is called
CONTEXT:  PL/pgSQL function cumulative_sum_all() line 3 at RAISE
-- select cumulative_sum(*) (stub function and group by tag only) (explain)
--Testcase 174:
EXPLAIN VERBOSE
SELECT cumulative_sum_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (cumulative_sum_all()), tag1
   Sort Key: (cumulative_sum_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (cumulative_sum_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT cumulative_sum(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.cumulative_sum_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select cumulative_sum(*) (stub function and group by tag only) (result)
--Testcase 175:
SELECT cumulative_sum_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                          cumulative_sum_all                                           
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.30000000000000004,200,-0.30000000000000004,-200,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.6000000000000001,300,-0.6000000000000001,-300,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,3.3000000000000003,400,-3.3000000000000003,-400,/influxdb_svr/)
(5 rows)

-- select cumulative_sum(regex) (stub function and group by tag only) (explain)
--Testcase 176:
EXPLAIN VERBOSE
SELECT cumulative_sum('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (cumulative_sum('/value[1,4]/'::text)), tag1
   Sort Key: (cumulative_sum('/value[1,4]/'::text))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (cumulative_sum('/value[1,4]/'::text)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT cumulative_sum(/value[1,4]/) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.cumulative_sum('/value[1,4]/'::text), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select cumulative_sum(regex) (stub function and group by tag only) (result)
--Testcase 177:
SELECT cumulative_sum('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                 cumulative_sum                                 
--------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.30000000000000004,,,-200,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.6000000000000001,,,-300,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.1,,,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,3.3000000000000003,,,-400,/influxdb_svr/)
(5 rows)

-- select cumulative_sum(*), cumulative_sum(regex) (stub function, expose data, explain)
--Testcase 178:
EXPLAIN VERBOSE
SELECT (cumulative_sum_all()::s3).*, (cumulative_sum('/value[1,4]/')::s3).* from s3 ORDER BY 1;


 Sort  (cost=28428.92..28445.98 rows=6826 width=208)
   Output: ((((cumulative_sum_all()))::s3)."time"), ((((cumulative_sum_all()))::s3).tag1), ((((cumulative_sum_all()))::s3).value1), ((((cumulative_sum_all()))::s3).value2), ((((cumulative_sum_all()))::s3).value3), ((((cumulative_sum_all()))::s3).value4), ((((cumulative_sum_all()))::s3).__spd_url), ((((cumulative_sum('/value[1,4]/'::text)))::s3)."time"), ((((cumulative_sum('/value[1,4]/'::text)))::s3).tag1), ((((cumulative_sum('/value[1,4]/'::text)))::s3).value1), ((((cumulative_sum('/value[1,4]/'::text)))::s3).value2), ((((cumulative_sum('/value[1,4]/'::text)))::s3).value3), ((((cumulative_sum('/value[1,4]/'::text)))::s3).value4), ((((cumulative_sum('/value[1,4]/'::text)))::s3).__spd_url)
   Sort Key: ((((cumulative_sum_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..27994.21 rows=6826 width=208)
         Output: (((cumulative_sum_all()))::s3)."time", (((cumulative_sum_all()))::s3).tag1, (((cumulative_sum_all()))::s3).value1, (((cumulative_sum_all()))::s3).value2, (((cumulative_sum_all()))::s3).value3, (((cumulative_sum_all()))::s3).value4, (((cumulative_sum_all()))::s3).__spd_url, (((cumulative_sum('/value[1,4]/'::text)))::s3)."time", (((cumulative_sum('/value[1,4]/'::text)))::s3).tag1, (((cumulative_sum('/value[1,4]/'::text)))::s3).value1, (((cumulative_sum('/value[1,4]/'::text)))::s3).value2, (((cumulative_sum('/value[1,4]/'::text)))::s3).value3, (((cumulative_sum('/value[1,4]/'::text)))::s3).value4, (((cumulative_sum('/value[1,4]/'::text)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT cumulative_sum(*), cumulative_sum(/value[1,4]/) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.cumulative_sum_all(), public.cumulative_sum('/value[1,4]/'::text) FROM public.s31influx
(11 rows)

-- select cumulative_sum(*), cumulative_sum(regex) (stub function, expose data, result)
--Testcase 179:
SELECT (cumulative_sum_all()::s3).*, (cumulative_sum('/value[1,4]/')::s3).* from s3 ORDER BY 1;
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: pgspider_fdw fail to get tuples from child process
{
ERROR:  stub cumulative_sum_all() is called
CONTEXT:  PL/pgSQL function public.cumulative_sum_all() line 3 at RAISE
}
--Testcase 180:
EXPLAIN VERBOSE
SELECT derivative(value1),derivative(value2),derivative(value3),derivative(value4) FROM s3 ORDER BY 1;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (derivative(value1)), (derivative(value2)), (derivative(value3)), (derivative(value4))
   Sort Key: (derivative(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (derivative(value1)), (derivative(value2)), (derivative(value3)), (derivative(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT derivative("value1"), derivative("value2"), derivative("value3"), derivative("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.derivative(value1), public.derivative(value2), public.derivative(value3), public.derivative(value4) FROM public.s31influx
(11 rows)

--Testcase 181:
SELECT * FROM (
SELECT derivative(value1),derivative(value2),derivative(value3),derivative(value4) FROM s3
) as t ORDER BY 1, 2, 3, 4;
     derivative      | derivative |      derivative      | derivative 
---------------------+------------+----------------------+------------
 0.09999999999999998 |          0 | -0.09999999999999998 |          0
                 0.1 |          0 |                 -0.1 |          0
  1.0999999999999996 |          0 |  -1.0999999999999996 |          0
                 1.1 |          0 |                 -1.1 |          0
(4 rows)

--Testcase 182:
EXPLAIN VERBOSE
SELECT derivative(value1, interval '0.5s'),derivative(value2, interval '0.2s'),derivative(value3, interval '0.1s'),derivative(value4, interval '2s') FROM s3 ORDER BY 1;
                                                                                                                         QUERY PLAN                                                                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (derivative(value1, '@ 0.5 secs'::interval)), (derivative(value2, '@ 0.2 secs'::interval)), (derivative(value3, '@ 0.1 secs'::interval)), (derivative(value4, '@ 2 secs'::interval))
   Sort Key: (derivative(s3.value1, '@ 0.5 secs'::interval))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (derivative(value1, '@ 0.5 secs'::interval)), (derivative(value2, '@ 0.2 secs'::interval)), (derivative(value3, '@ 0.1 secs'::interval)), (derivative(value4, '@ 2 secs'::interval))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT derivative("value1", 0d0h0m0s500000u), derivative("value2", 0d0h0m0s200000u), derivative("value3", 0d0h0m0s100000u), derivative("value4", 0d0h0m2s0u) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.derivative(value1, '00:00:00.5'::interval), public.derivative(value2, '00:00:00.2'::interval), public.derivative(value3, '00:00:00.1'::interval), public.derivative(value4, '00:00:02'::interval) FROM public.s31influx
(11 rows)

--Testcase 183:
SELECT derivative(value1, interval '0.5s'),derivative(value2, interval '0.2s'),derivative(value3, interval '0.1s'),derivative(value4, interval '2s') FROM s3 ORDER BY 1;
     derivative      | derivative |      derivative       | derivative 
---------------------+------------+-----------------------+------------
 0.04999999999999999 |          0 | -0.009999999999999998 |          0
                0.05 |          0 |                 -0.01 |          0
  0.5499999999999998 |          0 |  -0.10999999999999996 |          0
                0.55 |          0 |  -0.11000000000000001 |          0
(4 rows)

-- select derivative(*) (stub function, explain)
--Testcase 184:
EXPLAIN VERBOSE
SELECT derivative_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (derivative_all())
   Sort Key: (derivative_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (derivative_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT derivative(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.derivative_all() FROM public.s31influx
(11 rows)

-- select derivative(*) (stub function, result)
--Testcase 185:
SELECT * FROM (
SELECT derivative_all() from s3
) as t ORDER BY 1;
                                          derivative_all                                          
--------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,-0.1,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,-0.09999999999999998,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,0,-1.1,0,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1.0999999999999996,0,-1.0999999999999996,0,/influxdb_svr/)
(4 rows)

-- select derivative(regex) (stub function, explain)
--Testcase 186:
EXPLAIN VERBOSE
SELECT derivative('/value[1,4]/') from s3 ORDER BY 1;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (derivative('/value[1,4]/'::text))
   Sort Key: (derivative('/value[1,4]/'::text))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (derivative('/value[1,4]/'::text))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT derivative(/value[1,4]/) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.derivative('/value[1,4]/'::text) FROM public.s31influx
(11 rows)

-- select derivative(regex) (stub function, result)
--Testcase 187:
SELECT derivative('/value[1,4]/') from s3 ORDER BY 1;
                                 derivative                                  
-----------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,,,0,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1.0999999999999996,,,0,/influxdb_svr/)
(4 rows)

-- select multiple star and regex functions (do not push down, raise warning and stub error) (explain)
--Testcase 188:
EXPLAIN VERBOSE
SELECT derivative_all(), derivative('/value[1,4]/') from s3 ORDER BY 1;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=7473.10..7490.16 rows=6826 width=64)
   Output: (derivative_all()), (derivative('/value[1,4]/'::text))
   Sort Key: (derivative_all())
   ->  Foreign Scan on public.s3  (cost=110.00..7038.39 rows=6826 width=64)
         Output: derivative_all(), derivative('/value[1,4]/'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT * FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT NULL FROM public.s31influx
(11 rows)

-- select multiple star and regex functions (do not push down, raise warning and stub error) (explain)
--Testcase 189:
SELECT derivative_all(), derivative('/value[1,4]/') from s3 ORDER BY 1;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub derivative_all() is called
CONTEXT:  PL/pgSQL function derivative_all() line 3 at RAISE
-- select derivative(*) (stub function and group by tag only) (explain)
--Testcase 190:
EXPLAIN VERBOSE
SELECT derivative_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (derivative_all()), tag1
   Sort Key: (derivative_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (derivative_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT derivative(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.derivative_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select derivative(*) (stub function and group by tag only) (result)
--Testcase 191:
SELECT derivative_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                          derivative_all                                          
--------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,-0.1,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,-0.09999999999999998,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,0,-1.1,0,/influxdb_svr/)
(3 rows)

-- select derivative(regex) (stub function and group by tag only) (explain)
--Testcase 192:
EXPLAIN VERBOSE
SELECT derivative('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (derivative('/value[1,4]/'::text)), tag1
   Sort Key: (derivative('/value[1,4]/'::text))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (derivative('/value[1,4]/'::text)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT derivative(/value[1,4]/) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.derivative('/value[1,4]/'::text), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select derivative(regex) (stub function and group by tag only) (result)
--Testcase 193:
SELECT derivative('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                 derivative                                  
-----------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,,,0,/influxdb_svr/)
(3 rows)

-- select derivative(*) (stub function, expose data, explain)
--Testcase 194:
EXPLAIN VERBOSE
SELECT (derivative_all()::s3).* from s3 ORDER BY 1;
                                                                                                                                  QUERY PLAN                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((derivative_all()))::s3)."time"), ((((derivative_all()))::s3).tag1), ((((derivative_all()))::s3).value1), ((((derivative_all()))::s3).value2), ((((derivative_all()))::s3).value3), ((((derivative_all()))::s3).value4), ((((derivative_all()))::s3).__spd_url)
   Sort Key: ((((derivative_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((derivative_all()))::s3)."time", (((derivative_all()))::s3).tag1, (((derivative_all()))::s3).value1, (((derivative_all()))::s3).value2, (((derivative_all()))::s3).value3, (((derivative_all()))::s3).value4, (((derivative_all()))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT derivative(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.derivative_all() FROM public.s31influx
(11 rows)

-- select derivative(*) (stub function, expose data, result)
--Testcase 195:
SELECT * FROM (
SELECT (derivative_all()::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |       value1        | value2 |        value3        | value4 |          __spd_url          
------------------------+------+---------------------+--------+----------------------+--------+-----------------------------
 1970-01-01 09:00:01+09 |      |                 0.1 |      0 |                 -0.1 |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      | 0.09999999999999998 |      0 | -0.09999999999999998 |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      |                 1.1 |      0 |                 -1.1 |      0 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |  1.0999999999999996 |      0 |  -1.0999999999999996 |      0 | /influxdb_svr/
(4 rows)

-- select derivative(regex) (stub function, expose data, explain)
--Testcase 196:
EXPLAIN VERBOSE
SELECT (derivative('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                          QUERY PLAN                                                                                                                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((derivative('/value[1,4]/'::text)))::s3)."time"), ((((derivative('/value[1,4]/'::text)))::s3).tag1), ((((derivative('/value[1,4]/'::text)))::s3).value1), ((((derivative('/value[1,4]/'::text)))::s3).value2), ((((derivative('/value[1,4]/'::text)))::s3).value3), ((((derivative('/value[1,4]/'::text)))::s3).value4), ((((derivative('/value[1,4]/'::text)))::s3).__spd_url)
   Sort Key: ((((derivative('/value[1,4]/'::text)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((derivative('/value[1,4]/'::text)))::s3)."time", (((derivative('/value[1,4]/'::text)))::s3).tag1, (((derivative('/value[1,4]/'::text)))::s3).value1, (((derivative('/value[1,4]/'::text)))::s3).value2, (((derivative('/value[1,4]/'::text)))::s3).value3, (((derivative('/value[1,4]/'::text)))::s3).value4, (((derivative('/value[1,4]/'::text)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT derivative(/value[1,4]/) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.derivative('/value[1,4]/'::text) FROM public.s31influx
(11 rows)

-- select derivative(regex) (stub function, expose data, result)
--Testcase 197:
SELECT * FROM (
SELECT (derivative('/value[1,4]/')::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |       value1        | value2 | value3 | value4 |          __spd_url          
------------------------+------+---------------------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:01+09 |      |                 0.1 |        |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      | 0.09999999999999998 |        |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      |                 1.1 |        |        |      0 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |  1.0999999999999996 |        |        |      0 | /influxdb_svr/
(4 rows)

--Testcase 198:
EXPLAIN VERBOSE
SELECT non_negative_derivative(value1),non_negative_derivative(value2),non_negative_derivative(value3),non_negative_derivative(value4) FROM s3 ORDER BY 1;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (non_negative_derivative(value1)), (non_negative_derivative(value2)), (non_negative_derivative(value3)), (non_negative_derivative(value4))
   Sort Key: (non_negative_derivative(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (non_negative_derivative(value1)), (non_negative_derivative(value2)), (non_negative_derivative(value3)), (non_negative_derivative(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT non_negative_derivative("value1"), non_negative_derivative("value2"), non_negative_derivative("value3"), non_negative_derivative("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.non_negative_derivative(value1), public.non_negative_derivative(value2), public.non_negative_derivative(value3), public.non_negative_derivative(value4) FROM public.s31influx
(11 rows)

--Testcase 199:
SELECT * FROM (
SELECT non_negative_derivative(value1),non_negative_derivative(value2),non_negative_derivative(value3),non_negative_derivative(value4) FROM s3
) as t ORDER BY 1, 2, 3, 4;
 non_negative_derivative | non_negative_derivative | non_negative_derivative | non_negative_derivative 
-------------------------+-------------------------+-------------------------+-------------------------
     0.09999999999999998 |                       0 |                         |                       0
                     0.1 |                       0 |                         |                       0
      1.0999999999999996 |                       0 |                         |                       0
                     1.1 |                       0 |                         |                       0
(4 rows)

--Testcase 200:
EXPLAIN VERBOSE
SELECT non_negative_derivative(value1, interval '0.5s'),non_negative_derivative(value2, interval '0.2s'),non_negative_derivative(value3, interval '0.1s'),non_negative_derivative(value4, interval '2s') FROM s3 ORDER BY 1;
                                                                                                                                                   QUERY PLAN                                                                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (non_negative_derivative(value1, '@ 0.5 secs'::interval)), (non_negative_derivative(value2, '@ 0.2 secs'::interval)), (non_negative_derivative(value3, '@ 0.1 secs'::interval)), (non_negative_derivative(value4, '@ 2 secs'::interval))
   Sort Key: (non_negative_derivative(s3.value1, '@ 0.5 secs'::interval))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (non_negative_derivative(value1, '@ 0.5 secs'::interval)), (non_negative_derivative(value2, '@ 0.2 secs'::interval)), (non_negative_derivative(value3, '@ 0.1 secs'::interval)), (non_negative_derivative(value4, '@ 2 secs'::interval))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT non_negative_derivative("value1", 0d0h0m0s500000u), non_negative_derivative("value2", 0d0h0m0s200000u), non_negative_derivative("value3", 0d0h0m0s100000u), non_negative_derivative("value4", 0d0h0m2s0u) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.non_negative_derivative(value1, '00:00:00.5'::interval), public.non_negative_derivative(value2, '00:00:00.2'::interval), public.non_negative_derivative(value3, '00:00:00.1'::interval), public.non_negative_derivative(value4, '00:00:02'::interval) FROM public.s31influx
(11 rows)

--Testcase 201:
SELECT non_negative_derivative(value1, interval '0.5s'),non_negative_derivative(value2, interval '0.2s'),non_negative_derivative(value3, interval '0.1s'),non_negative_derivative(value4, interval '2s') FROM s3 ORDER BY 1;
 non_negative_derivative | non_negative_derivative | non_negative_derivative | non_negative_derivative 
-------------------------+-------------------------+-------------------------+-------------------------
     0.04999999999999999 |                       0 |                         |                       0
                    0.05 |                       0 |                         |                       0
      0.5499999999999998 |                       0 |                         |                       0
                    0.55 |                       0 |                         |                       0
(4 rows)

-- select non_negative_derivative(*) (stub function, explain)
--Testcase 202:
EXPLAIN VERBOSE
SELECT non_negative_derivative_all() from s3 ORDER BY 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (non_negative_derivative_all())
   Sort Key: (non_negative_derivative_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (non_negative_derivative_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT non_negative_derivative(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.non_negative_derivative_all() FROM public.s31influx
(11 rows)

-- select non_negative_derivative(*) (stub function, result)
--Testcase 203:
SELECT * FROM (
SELECT non_negative_derivative_all() from s3
) as t ORDER BY 1;
                         non_negative_derivative_all                          
------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,0,,0,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1.0999999999999996,0,,0,/influxdb_svr/)
(4 rows)

-- select non_negative_derivative(regex) (stub function, explain)
--Testcase 204:
EXPLAIN VERBOSE
SELECT non_negative_derivative('/value[1,4]/') from s3 ORDER BY 1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (non_negative_derivative('/value[1,4]/'::text))
   Sort Key: (non_negative_derivative('/value[1,4]/'::text))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (non_negative_derivative('/value[1,4]/'::text))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT non_negative_derivative(/value[1,4]/) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.non_negative_derivative('/value[1,4]/'::text) FROM public.s31influx
(11 rows)

-- select non_negative_derivative(regex) (stub function, result)
--Testcase 205:
SELECT non_negative_derivative('/value[1,4]/') from s3 ORDER BY 1;
                           non_negative_derivative                           
-----------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,,,0,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1.0999999999999996,,,0,/influxdb_svr/)
(4 rows)

-- select non_negative_derivative(*) (stub function and group by tag only) (explain)
--Testcase 206:
EXPLAIN VERBOSE
SELECT non_negative_derivative_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (non_negative_derivative_all()), tag1
   Sort Key: (non_negative_derivative_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (non_negative_derivative_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT non_negative_derivative(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.non_negative_derivative_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select non_negative_derivative(*) (stub function and group by tag only) (result)
--Testcase 207:
SELECT non_negative_derivative_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                         non_negative_derivative_all                          
------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,0,,0,/influxdb_svr/)
(3 rows)

-- select non_negative_derivative(regex) (stub function and group by tag only) (explain)
--Testcase 208:
EXPLAIN VERBOSE
SELECT non_negative_derivative('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                    QUERY PLAN                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (non_negative_derivative('/value[1,4]/'::text)), tag1
   Sort Key: (non_negative_derivative('/value[1,4]/'::text))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (non_negative_derivative('/value[1,4]/'::text)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT non_negative_derivative(/value[1,4]/) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.non_negative_derivative('/value[1,4]/'::text), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select non_negative_derivative(regex) (stub function and group by tag only) (result)
--Testcase 209:
SELECT non_negative_derivative('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                           non_negative_derivative                           
-----------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,,,0,/influxdb_svr/)
(3 rows)

-- select non_negative_derivative(*) (stub function, expose data, explain)
--Testcase 210:
EXPLAIN VERBOSE
SELECT (non_negative_derivative_all()::s3).* from s3 ORDER BY 1;
                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((non_negative_derivative_all()))::s3)."time"), ((((non_negative_derivative_all()))::s3).tag1), ((((non_negative_derivative_all()))::s3).value1), ((((non_negative_derivative_all()))::s3).value2), ((((non_negative_derivative_all()))::s3).value3), ((((non_negative_derivative_all()))::s3).value4), ((((non_negative_derivative_all()))::s3).__spd_url)
   Sort Key: ((((non_negative_derivative_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((non_negative_derivative_all()))::s3)."time", (((non_negative_derivative_all()))::s3).tag1, (((non_negative_derivative_all()))::s3).value1, (((non_negative_derivative_all()))::s3).value2, (((non_negative_derivative_all()))::s3).value3, (((non_negative_derivative_all()))::s3).value4, (((non_negative_derivative_all()))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT non_negative_derivative(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.non_negative_derivative_all() FROM public.s31influx
(11 rows)

-- select non_negative_derivative(*) (stub function, expose data, result)
--Testcase 211:
SELECT * FROM (
SELECT (non_negative_derivative_all()::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |       value1        | value2 | value3 | value4 |          __spd_url          
------------------------+------+---------------------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:01+09 |      |                 0.1 |      0 |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      | 0.09999999999999998 |      0 |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      |                 1.1 |      0 |        |      0 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |  1.0999999999999996 |      0 |        |      0 | /influxdb_svr/
(4 rows)

-- select non_negative_derivative(regex) (stub function, expose data, explain)
--Testcase 212:
EXPLAIN VERBOSE
SELECT (non_negative_derivative('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((non_negative_derivative('/value[1,4]/'::text)))::s3)."time"), ((((non_negative_derivative('/value[1,4]/'::text)))::s3).tag1), ((((non_negative_derivative('/value[1,4]/'::text)))::s3).value1), ((((non_negative_derivative('/value[1,4]/'::text)))::s3).value2), ((((non_negative_derivative('/value[1,4]/'::text)))::s3).value3), ((((non_negative_derivative('/value[1,4]/'::text)))::s3).value4), ((((non_negative_derivative('/value[1,4]/'::text)))::s3).__spd_url)
   Sort Key: ((((non_negative_derivative('/value[1,4]/'::text)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((non_negative_derivative('/value[1,4]/'::text)))::s3)."time", (((non_negative_derivative('/value[1,4]/'::text)))::s3).tag1, (((non_negative_derivative('/value[1,4]/'::text)))::s3).value1, (((non_negative_derivative('/value[1,4]/'::text)))::s3).value2, (((non_negative_derivative('/value[1,4]/'::text)))::s3).value3, (((non_negative_derivative('/value[1,4]/'::text)))::s3).value4, (((non_negative_derivative('/value[1,4]/'::text)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT non_negative_derivative(/value[1,4]/) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.non_negative_derivative('/value[1,4]/'::text) FROM public.s31influx
(11 rows)

-- select non_negative_derivative(regex) (stub function, expose data, result)
--Testcase 213:
SELECT * FROM (
SELECT (non_negative_derivative('/value[1,4]/')::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |       value1        | value2 | value3 | value4 |          __spd_url          
------------------------+------+---------------------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:01+09 |      |                 0.1 |        |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      | 0.09999999999999998 |        |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      |                 1.1 |        |        |      0 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |  1.0999999999999996 |        |        |      0 | /influxdb_svr/
(4 rows)

--Testcase 214:
EXPLAIN VERBOSE
SELECT difference(value1),difference(value2),difference(value3),difference(value4) FROM s3 ORDER BY 1;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (difference(value1)), (difference(value2)), (difference(value3)), (difference(value4))
   Sort Key: (difference(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (difference(value1)), (difference(value2)), (difference(value3)), (difference(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT difference("value1"), difference("value2"), difference("value3"), difference("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.difference(value1), public.difference(value2), public.difference(value3), public.difference(value4) FROM public.s31influx
(11 rows)

--Testcase 215:
SELECT difference(value1),difference(value2),difference(value3),difference(value4) FROM s3 ORDER BY 1;
     difference      | difference |      difference      | difference 
---------------------+------------+----------------------+------------
 0.09999999999999998 |          0 | -0.09999999999999998 |          0
                 0.1 |          0 |                 -0.1 |          0
  1.0999999999999996 |          0 |  -1.0999999999999996 |          0
                 1.1 |          0 |                 -1.1 |          0
(4 rows)

-- select difference(*) (stub function, explain)
--Testcase 216:
EXPLAIN VERBOSE
SELECT difference_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (difference_all())
   Sort Key: (difference_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (difference_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT difference(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.difference_all() FROM public.s31influx
(11 rows)

-- select difference(*) (stub function, result)
--Testcase 217:
SELECT * FROM (
SELECT difference_all() from s3
) as t ORDER BY 1;
                                          difference_all                                          
--------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,-0.1,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,-0.09999999999999998,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,0,-1.1,0,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1.0999999999999996,0,-1.0999999999999996,0,/influxdb_svr/)
(4 rows)

-- select difference(regex) (stub function, explain)
--Testcase 218:
EXPLAIN VERBOSE
SELECT difference('/value[1,4]/') from s3 ORDER BY 1;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (difference('/value[1,4]/'::text))
   Sort Key: (difference('/value[1,4]/'::text))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (difference('/value[1,4]/'::text))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT difference(/value[1,4]/) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.difference('/value[1,4]/'::text) FROM public.s31influx
(11 rows)

-- select difference(regex) (stub function, result)
--Testcase 219:
SELECT difference('/value[1,4]/') from s3 ORDER BY 1;
                                 difference                                  
-----------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,,,0,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1.0999999999999996,,,0,/influxdb_svr/)
(4 rows)

-- select difference(*) (stub function and group by tag only) (explain)
--Testcase 220:
EXPLAIN VERBOSE
SELECT difference_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (difference_all()), tag1
   Sort Key: (difference_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (difference_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT difference(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.difference_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select difference(*) (stub function and group by tag only) (result)
--Testcase 221:
 SELECT difference_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                          difference_all                                          
--------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,-0.1,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,-0.09999999999999998,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,0,-1.1,0,/influxdb_svr/)
(3 rows)

-- select difference(regex) (stub function and group by tag only) (explain)
--Testcase 222:
EXPLAIN VERBOSE
SELECT difference('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (difference('/value[1,4]/'::text)), tag1
   Sort Key: (difference('/value[1,4]/'::text))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (difference('/value[1,4]/'::text)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT difference(/value[1,4]/) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.difference('/value[1,4]/'::text), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select difference(regex) (stub function and group by tag only) (result)
--Testcase 223:
SELECT difference('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                 difference                                  
-----------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,,,0,/influxdb_svr/)
(3 rows)

-- select difference(*) (stub function, expose data, explain)
--Testcase 224:
EXPLAIN VERBOSE
SELECT (difference_all()::s3).* from s3 ORDER BY 1;
                                                                                                                                  QUERY PLAN                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((difference_all()))::s3)."time"), ((((difference_all()))::s3).tag1), ((((difference_all()))::s3).value1), ((((difference_all()))::s3).value2), ((((difference_all()))::s3).value3), ((((difference_all()))::s3).value4), ((((difference_all()))::s3).__spd_url)
   Sort Key: ((((difference_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((difference_all()))::s3)."time", (((difference_all()))::s3).tag1, (((difference_all()))::s3).value1, (((difference_all()))::s3).value2, (((difference_all()))::s3).value3, (((difference_all()))::s3).value4, (((difference_all()))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT difference(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.difference_all() FROM public.s31influx
(11 rows)

-- select difference(*) (stub function, expose data, result)
--Testcase 225:
SELECT * FROM (
SELECT (difference_all()::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |       value1        | value2 |        value3        | value4 |          __spd_url          
------------------------+------+---------------------+--------+----------------------+--------+-----------------------------
 1970-01-01 09:00:01+09 |      |                 0.1 |      0 |                 -0.1 |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      | 0.09999999999999998 |      0 | -0.09999999999999998 |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      |                 1.1 |      0 |                 -1.1 |      0 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |  1.0999999999999996 |      0 |  -1.0999999999999996 |      0 | /influxdb_svr/
(4 rows)

-- select difference(regex) (stub function, expose data, explain)
--Testcase 226:
EXPLAIN VERBOSE
SELECT (difference('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                          QUERY PLAN                                                                                                                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((difference('/value[1,4]/'::text)))::s3)."time"), ((((difference('/value[1,4]/'::text)))::s3).tag1), ((((difference('/value[1,4]/'::text)))::s3).value1), ((((difference('/value[1,4]/'::text)))::s3).value2), ((((difference('/value[1,4]/'::text)))::s3).value3), ((((difference('/value[1,4]/'::text)))::s3).value4), ((((difference('/value[1,4]/'::text)))::s3).__spd_url)
   Sort Key: ((((difference('/value[1,4]/'::text)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((difference('/value[1,4]/'::text)))::s3)."time", (((difference('/value[1,4]/'::text)))::s3).tag1, (((difference('/value[1,4]/'::text)))::s3).value1, (((difference('/value[1,4]/'::text)))::s3).value2, (((difference('/value[1,4]/'::text)))::s3).value3, (((difference('/value[1,4]/'::text)))::s3).value4, (((difference('/value[1,4]/'::text)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT difference(/value[1,4]/) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.difference('/value[1,4]/'::text) FROM public.s31influx
(11 rows)

-- select difference(regex) (stub function, expose data, result)
--Testcase 227:
SELECT * FROM (
SELECT (difference('/value[1,4]/')::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |       value1        | value2 | value3 | value4 |          __spd_url          
------------------------+------+---------------------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:01+09 |      |                 0.1 |        |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      | 0.09999999999999998 |        |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      |                 1.1 |        |        |      0 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |  1.0999999999999996 |        |        |      0 | /influxdb_svr/
(4 rows)

--Testcase 228:
EXPLAIN VERBOSE
SELECT non_negative_difference(value1),non_negative_difference(value2),non_negative_difference(value3),non_negative_difference(value4) FROM s3 ORDER BY 1;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (non_negative_difference(value1)), (non_negative_difference(value2)), (non_negative_difference(value3)), (non_negative_difference(value4))
   Sort Key: (non_negative_difference(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (non_negative_difference(value1)), (non_negative_difference(value2)), (non_negative_difference(value3)), (non_negative_difference(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT non_negative_difference("value1"), non_negative_difference("value2"), non_negative_difference("value3"), non_negative_difference("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.non_negative_difference(value1), public.non_negative_difference(value2), public.non_negative_difference(value3), public.non_negative_difference(value4) FROM public.s31influx
(11 rows)

--Testcase 229:
SELECT non_negative_difference(value1),non_negative_difference(value2),non_negative_difference(value3),non_negative_difference(value4) FROM s3 ORDER BY 1;
 non_negative_difference | non_negative_difference | non_negative_difference | non_negative_difference 
-------------------------+-------------------------+-------------------------+-------------------------
     0.09999999999999998 |                       0 |                         |                       0
                     0.1 |                       0 |                         |                       0
      1.0999999999999996 |                       0 |                         |                       0
                     1.1 |                       0 |                         |                       0
(4 rows)

-- select non_negative_difference(*) (stub function, explain)
--Testcase 230:
EXPLAIN VERBOSE
SELECT non_negative_difference_all() from s3 ORDER BY 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (non_negative_difference_all())
   Sort Key: (non_negative_difference_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (non_negative_difference_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT non_negative_difference(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.non_negative_difference_all() FROM public.s31influx
(11 rows)

-- select non_negative_difference(*) (stub function, result)
--Testcase 231:
SELECT * FROM (
SELECT non_negative_difference_all() from s3
) as t ORDER BY 1;
                         non_negative_difference_all                          
------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,0,,0,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1.0999999999999996,0,,0,/influxdb_svr/)
(4 rows)

-- select non_negative_difference(regex) (stub function, explain)
--Testcase 232:
EXPLAIN VERBOSE
SELECT non_negative_difference('/value[1,4]/') from s3 ORDER BY 1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (non_negative_difference('/value[1,4]/'::text))
   Sort Key: (non_negative_difference('/value[1,4]/'::text))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (non_negative_difference('/value[1,4]/'::text))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT non_negative_difference(/value[1,4]/) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.non_negative_difference('/value[1,4]/'::text) FROM public.s31influx
(11 rows)

-- select non_negative_difference(*), non_negative_difference(regex) (stub function, result)
--Testcase 233:
SELECT non_negative_difference('/value[1,4]/') from s3 ORDER BY 1;
                           non_negative_difference                           
-----------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,,,0,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1.0999999999999996,,,0,/influxdb_svr/)
(4 rows)

-- select non_negative_difference(*) (stub function and group by tag only) (explain)
--Testcase 234:
EXPLAIN VERBOSE
SELECT non_negative_difference_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (non_negative_difference_all()), tag1
   Sort Key: (non_negative_difference_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (non_negative_difference_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT non_negative_difference(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.non_negative_difference_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select non_negative_difference(*) (stub function and group by tag only) (result)
--Testcase 235:
SELECT non_negative_difference_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                         non_negative_difference_all                          
------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,0,,0,/influxdb_svr/)
(3 rows)

-- select non_negative_difference(regex) (stub function and group by tag only) (explain)
--Testcase 236:
EXPLAIN VERBOSE
SELECT non_negative_difference('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                    QUERY PLAN                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (non_negative_difference('/value[1,4]/'::text)), tag1
   Sort Key: (non_negative_difference('/value[1,4]/'::text))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (non_negative_difference('/value[1,4]/'::text)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT non_negative_difference(/value[1,4]/) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.non_negative_difference('/value[1,4]/'::text), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select non_negative_difference(regex) (stub function and group by tag only) (result)
--Testcase 237:
SELECT non_negative_difference('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                           non_negative_difference                           
-----------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1,,,0,/influxdb_svr/)
(3 rows)

-- select non_negative_difference(*) (stub function, expose data, explain)
--Testcase 238:
EXPLAIN VERBOSE
SELECT (non_negative_difference_all()::s3).* from s3 ORDER BY 1;
                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((non_negative_difference_all()))::s3)."time"), ((((non_negative_difference_all()))::s3).tag1), ((((non_negative_difference_all()))::s3).value1), ((((non_negative_difference_all()))::s3).value2), ((((non_negative_difference_all()))::s3).value3), ((((non_negative_difference_all()))::s3).value4), ((((non_negative_difference_all()))::s3).__spd_url)
   Sort Key: ((((non_negative_difference_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((non_negative_difference_all()))::s3)."time", (((non_negative_difference_all()))::s3).tag1, (((non_negative_difference_all()))::s3).value1, (((non_negative_difference_all()))::s3).value2, (((non_negative_difference_all()))::s3).value3, (((non_negative_difference_all()))::s3).value4, (((non_negative_difference_all()))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT non_negative_difference(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.non_negative_difference_all() FROM public.s31influx
(11 rows)

-- select non_negative_difference(*) (stub function, expose data, result)
--Testcase 239:
SELECT * FROM (
SELECT (non_negative_difference_all()::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |       value1        | value2 | value3 | value4 |          __spd_url          
------------------------+------+---------------------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:01+09 |      |                 0.1 |      0 |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      | 0.09999999999999998 |      0 |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      |                 1.1 |      0 |        |      0 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |  1.0999999999999996 |      0 |        |      0 | /influxdb_svr/
(4 rows)

-- select non_negative_difference(regex) (stub function, expose data, explain)
--Testcase 240:
EXPLAIN VERBOSE
SELECT (non_negative_difference('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((non_negative_difference('/value[1,4]/'::text)))::s3)."time"), ((((non_negative_difference('/value[1,4]/'::text)))::s3).tag1), ((((non_negative_difference('/value[1,4]/'::text)))::s3).value1), ((((non_negative_difference('/value[1,4]/'::text)))::s3).value2), ((((non_negative_difference('/value[1,4]/'::text)))::s3).value3), ((((non_negative_difference('/value[1,4]/'::text)))::s3).value4), ((((non_negative_difference('/value[1,4]/'::text)))::s3).__spd_url)
   Sort Key: ((((non_negative_difference('/value[1,4]/'::text)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((non_negative_difference('/value[1,4]/'::text)))::s3)."time", (((non_negative_difference('/value[1,4]/'::text)))::s3).tag1, (((non_negative_difference('/value[1,4]/'::text)))::s3).value1, (((non_negative_difference('/value[1,4]/'::text)))::s3).value2, (((non_negative_difference('/value[1,4]/'::text)))::s3).value3, (((non_negative_difference('/value[1,4]/'::text)))::s3).value4, (((non_negative_difference('/value[1,4]/'::text)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT non_negative_difference(/value[1,4]/) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.non_negative_difference('/value[1,4]/'::text) FROM public.s31influx
(11 rows)

-- select non_negative_difference(regex) (stub function, expose data, result)
--Testcase 241:
SELECT * FROM (
SELECT (non_negative_difference('/value[1,4]/')::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |       value1        | value2 | value3 | value4 |          __spd_url          
------------------------+------+---------------------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:01+09 |      |                 0.1 |        |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      | 0.09999999999999998 |        |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      |                 1.1 |        |        |      0 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |  1.0999999999999996 |        |        |      0 | /influxdb_svr/
(4 rows)

--Testcase 242:
EXPLAIN VERBOSE
SELECT elapsed(value1),elapsed(value2),elapsed(value3),elapsed(value4) FROM s3 ORDER BY 1;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (elapsed(value1)), (elapsed(value2)), (elapsed(value3)), (elapsed(value4))
   Sort Key: (elapsed(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (elapsed(value1)), (elapsed(value2)), (elapsed(value3)), (elapsed(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT elapsed("value1"), elapsed("value2"), elapsed("value3"), elapsed("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.elapsed(value1), public.elapsed(value2), public.elapsed(value3), public.elapsed(value4) FROM public.s31influx
(11 rows)

--Testcase 243:
SELECT elapsed(value1),elapsed(value2),elapsed(value3),elapsed(value4) FROM s3 ORDER BY 1;
  elapsed   |  elapsed   |  elapsed   |  elapsed   
------------+------------+------------+------------
 1000000000 | 1000000000 | 1000000000 | 1000000000
 1000000000 | 1000000000 | 1000000000 | 1000000000
 1000000000 | 1000000000 | 1000000000 | 1000000000
 1000000000 | 1000000000 | 1000000000 | 1000000000
(4 rows)

--Testcase 244:
EXPLAIN VERBOSE
SELECT elapsed(value1, interval '0.5s'),elapsed(value2, interval '0.2s'),elapsed(value3, interval '0.1s'),elapsed(value4, interval '2s') FROM s3 ORDER BY 1;
                                                                                                                   QUERY PLAN                                                                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (elapsed(value1, '@ 0.5 secs'::interval)), (elapsed(value2, '@ 0.2 secs'::interval)), (elapsed(value3, '@ 0.1 secs'::interval)), (elapsed(value4, '@ 2 secs'::interval))
   Sort Key: (elapsed(s3.value1, '@ 0.5 secs'::interval))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (elapsed(value1, '@ 0.5 secs'::interval)), (elapsed(value2, '@ 0.2 secs'::interval)), (elapsed(value3, '@ 0.1 secs'::interval)), (elapsed(value4, '@ 2 secs'::interval))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT elapsed("value1", 0d0h0m0s500000u), elapsed("value2", 0d0h0m0s200000u), elapsed("value3", 0d0h0m0s100000u), elapsed("value4", 0d0h0m2s0u) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.elapsed(value1, '00:00:00.5'::interval), public.elapsed(value2, '00:00:00.2'::interval), public.elapsed(value3, '00:00:00.1'::interval), public.elapsed(value4, '00:00:02'::interval) FROM public.s31influx
(11 rows)

--Testcase 245:
SELECT elapsed(value1, interval '0.5s'),elapsed(value2, interval '0.2s'),elapsed(value3, interval '0.1s'),elapsed(value4, interval '2s') FROM s3 ORDER BY 1;
 elapsed | elapsed | elapsed | elapsed 
---------+---------+---------+---------
       2 |       5 |      10 |       0
       2 |       5 |      10 |       0
       2 |       5 |      10 |       0
       2 |       5 |      10 |       0
(4 rows)

-- select elapsed(*) (stub function, explain)
--Testcase 246:
EXPLAIN VERBOSE
SELECT elapsed_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (elapsed_all())
   Sort Key: (elapsed_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (elapsed_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT elapsed(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.elapsed_all() FROM public.s31influx
(11 rows)

-- select elapsed(*) (stub function, result)
--Testcase 247:
SELECT * FROM (
SELECT elapsed_all() from s3
) as t ORDER BY 1;
                                           elapsed_all                                           
-------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,1000000000,1000000000,1000000000,1000000000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,1000000000,1000000000,1000000000,1000000000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1000000000,1000000000,1000000000,1000000000,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1000000000,1000000000,1000000000,1000000000,/influxdb_svr/)
(4 rows)

-- select elapsed(regex) (stub function, explain)
--Testcase 248:
EXPLAIN VERBOSE
SELECT elapsed('/value[1,4]/') from s3 ORDER BY 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (elapsed('/value[1,4]/'::text))
   Sort Key: (elapsed('/value[1,4]/'::text))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (elapsed('/value[1,4]/'::text))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT elapsed(/value[1,4]/) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.elapsed('/value[1,4]/'::text) FROM public.s31influx
(11 rows)

-- select elapsed(regex) (stub function, result)
--Testcase 249:
SELECT elapsed('/value[1,4]/') from s3 ORDER BY 1;
                                   elapsed                                   
-----------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,1000000000,,,1000000000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,1000000000,,,1000000000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1000000000,,,1000000000,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1000000000,,,1000000000,/influxdb_svr/)
(4 rows)

-- select elapsed(*) (stub function and group by tag only) (explain)
--Testcase 250:
EXPLAIN VERBOSE
SELECT elapsed_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (elapsed_all()), tag1
   Sort Key: (elapsed_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (elapsed_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT elapsed(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.elapsed_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select elapsed(*) (stub function and group by tag only) (result)
--Testcase 251:
SELECT elapsed_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                           elapsed_all                                           
-------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,1000000000,1000000000,1000000000,1000000000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,1000000000,1000000000,1000000000,1000000000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1000000000,1000000000,1000000000,1000000000,/influxdb_svr/)
(3 rows)

-- select elapsed(regex) (stub function and group by tag only) (explain)
--Testcase 252:
EXPLAIN VERBOSE
SELECT elapsed('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (elapsed('/value[1,4]/'::text)), tag1
   Sort Key: (elapsed('/value[1,4]/'::text))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (elapsed('/value[1,4]/'::text)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT elapsed(/value[1,4]/) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.elapsed('/value[1,4]/'::text), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select elapsed(regex) (stub function and group by tag only) (result)
--Testcase 253:
SELECT elapsed('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                   elapsed                                   
-----------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,1000000000,,,1000000000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,1000000000,,,1000000000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1000000000,,,1000000000,/influxdb_svr/)
(3 rows)

-- select elapsed(*) (stub function, expose data, explain)
--Testcase 254:
EXPLAIN VERBOSE
SELECT (elapsed_all()::s3).* from s3 ORDER BY 1;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((elapsed_all()))::s3)."time"), ((((elapsed_all()))::s3).tag1), ((((elapsed_all()))::s3).value1), ((((elapsed_all()))::s3).value2), ((((elapsed_all()))::s3).value3), ((((elapsed_all()))::s3).value4), ((((elapsed_all()))::s3).__spd_url)
   Sort Key: ((((elapsed_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((elapsed_all()))::s3)."time", (((elapsed_all()))::s3).tag1, (((elapsed_all()))::s3).value1, (((elapsed_all()))::s3).value2, (((elapsed_all()))::s3).value3, (((elapsed_all()))::s3).value4, (((elapsed_all()))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT elapsed(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.elapsed_all() FROM public.s31influx
(11 rows)

-- select elapsed(*) (stub function, expose data, result)
--Testcase 255:
SELECT * FROM (
SELECT (elapsed_all()::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |   value1   |   value2   |   value3   |   value4   |          __spd_url          
------------------------+------+------------+------------+------------+------------+-----------------------------
 1970-01-01 09:00:01+09 |      | 1000000000 | 1000000000 | 1000000000 | 1000000000 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      | 1000000000 | 1000000000 | 1000000000 | 1000000000 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      | 1000000000 | 1000000000 | 1000000000 | 1000000000 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      | 1000000000 | 1000000000 | 1000000000 | 1000000000 | /influxdb_svr/
(4 rows)

-- select elapsed(regex) (stub function, expose data, explain)
--Testcase 256:
EXPLAIN VERBOSE
SELECT (elapsed('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((elapsed('/value[1,4]/'::text)))::s3)."time"), ((((elapsed('/value[1,4]/'::text)))::s3).tag1), ((((elapsed('/value[1,4]/'::text)))::s3).value1), ((((elapsed('/value[1,4]/'::text)))::s3).value2), ((((elapsed('/value[1,4]/'::text)))::s3).value3), ((((elapsed('/value[1,4]/'::text)))::s3).value4), ((((elapsed('/value[1,4]/'::text)))::s3).__spd_url)
   Sort Key: ((((elapsed('/value[1,4]/'::text)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((elapsed('/value[1,4]/'::text)))::s3)."time", (((elapsed('/value[1,4]/'::text)))::s3).tag1, (((elapsed('/value[1,4]/'::text)))::s3).value1, (((elapsed('/value[1,4]/'::text)))::s3).value2, (((elapsed('/value[1,4]/'::text)))::s3).value3, (((elapsed('/value[1,4]/'::text)))::s3).value4, (((elapsed('/value[1,4]/'::text)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT elapsed(/value[1,4]/) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.elapsed('/value[1,4]/'::text) FROM public.s31influx
(11 rows)

-- select elapsed(regex) (stub function, expose data, result)
--Testcase 257:
SELECT * FROM (
SELECT (elapsed('/value[1,4]/')::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |   value1   | value2 | value3 |   value4   |          __spd_url          
------------------------+------+------------+--------+--------+------------+-----------------------------
 1970-01-01 09:00:01+09 |      | 1000000000 |        |        | 1000000000 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      | 1000000000 |        |        | 1000000000 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      | 1000000000 |        |        | 1000000000 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      | 1000000000 |        |        | 1000000000 | /influxdb_svr/
(4 rows)

--Testcase 258:
EXPLAIN VERBOSE
SELECT moving_average(value1, 2),moving_average(value2, 2),moving_average(value3, 2),moving_average(value4, 2) FROM s3 ORDER BY 1;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (moving_average(value1, 2)), (moving_average(value2, 2)), (moving_average(value3, 2)), (moving_average(value4, 2))
   Sort Key: (moving_average(s3.value1, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (moving_average(value1, 2)), (moving_average(value2, 2)), (moving_average(value3, 2)), (moving_average(value4, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT moving_average("value1", 2), moving_average("value2", 2), moving_average("value3", 2), moving_average("value4", 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.moving_average(value1, 2), public.moving_average(value2, 2), public.moving_average(value3, 2), public.moving_average(value4, 2) FROM public.s31influx
(11 rows)

--Testcase 259:
SELECT moving_average(value1, 2),moving_average(value2, 2),moving_average(value3, 2),moving_average(value4, 2) FROM s3 ORDER BY 1;
   moving_average    | moving_average |    moving_average    | moving_average 
---------------------+----------------+----------------------+----------------
 0.15000000000000002 |            100 | -0.15000000000000002 |           -100
                0.25 |            100 |                -0.25 |           -100
  1.6500000000000001 |            200 |  -1.6500000000000001 |           -200
                2.75 |            200 |                -2.75 |           -200
(4 rows)

-- select moving_average(*) (stub function, explain)
--Testcase 260:
EXPLAIN VERBOSE
SELECT moving_average_all(2) from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (moving_average_all(2))
   Sort Key: (moving_average_all(2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (moving_average_all(2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT moving_average(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.moving_average_all(2) FROM public.s31influx
(11 rows)

-- select moving_average(*) (stub function, result)
--Testcase 261:
SELECT * FROM (
SELECT moving_average_all(2) from s3
) as t ORDER BY 1;
                                          moving_average_all                                           
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.15000000000000002,100,-0.15000000000000002,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.25,100,-0.25,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.6500000000000001,200,-1.6500000000000001,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,2.75,200,-2.75,-200,/influxdb_svr/)
(4 rows)

-- select moving_average(regex) (stub function, explain)
--Testcase 262:
EXPLAIN VERBOSE
SELECT moving_average('/value[1,4]/', 2) from s3 ORDER BY 1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (moving_average('/value[1,4]/'::text, 2))
   Sort Key: (moving_average('/value[1,4]/'::text, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (moving_average('/value[1,4]/'::text, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT moving_average(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.moving_average('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select moving_average(regex) (stub function, result)
--Testcase 263:
SELECT moving_average('/value[1,4]/', 2) from s3 ORDER BY 1;
                                 moving_average                                 
--------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.15000000000000002,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.25,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.6500000000000001,,,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,2.75,,,-200,/influxdb_svr/)
(4 rows)

-- select moving_average(*) (stub function and group by tag only) (explain)
--Testcase 264:
EXPLAIN VERBOSE
SELECT moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (moving_average_all(2)), tag1
   Sort Key: (moving_average_all(2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (moving_average_all(2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT moving_average(*, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.moving_average_all(2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select moving_average(*) (stub function and group by tag only) (result)
--Testcase 265:
SELECT moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                          moving_average_all                                           
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.15000000000000002,100,-0.15000000000000002,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.25,100,-0.25,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.6500000000000001,200,-1.6500000000000001,-200,/influxdb_svr/)
(3 rows)

-- select moving_average(regex) (stub function and group by tag only) (explain)
--Testcase 266:
EXPLAIN VERBOSE
SELECT moving_average('/value[1,4]/', 2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                 QUERY PLAN                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (moving_average('/value[1,4]/'::text, 2)), tag1
   Sort Key: (moving_average('/value[1,4]/'::text, 2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (moving_average('/value[1,4]/'::text, 2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT moving_average(/value[1,4]/, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.moving_average('/value[1,4]/'::text, 2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select moving_average(regex) (stub function and group by tag only) (result)
--Testcase 267:
SELECT moving_average('/value[1,4]/', 2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                 moving_average                                 
--------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.15000000000000002,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.25,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.6500000000000001,,,-200,/influxdb_svr/)
(3 rows)

-- select moving_average(*) (stub function, expose data, explain)
--Testcase 268:
EXPLAIN VERBOSE
SELECT (moving_average_all(2)::s3).* from s3 ORDER BY 1;
                                                                                                                                                   QUERY PLAN                                                                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((moving_average_all(2)))::s3)."time"), ((((moving_average_all(2)))::s3).tag1), ((((moving_average_all(2)))::s3).value1), ((((moving_average_all(2)))::s3).value2), ((((moving_average_all(2)))::s3).value3), ((((moving_average_all(2)))::s3).value4), ((((moving_average_all(2)))::s3).__spd_url)
   Sort Key: ((((moving_average_all(2)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((moving_average_all(2)))::s3)."time", (((moving_average_all(2)))::s3).tag1, (((moving_average_all(2)))::s3).value1, (((moving_average_all(2)))::s3).value2, (((moving_average_all(2)))::s3).value3, (((moving_average_all(2)))::s3).value4, (((moving_average_all(2)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT moving_average(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.moving_average_all(2) FROM public.s31influx
(11 rows)

-- select moving_average(*) (stub function, expose data, result)
--Testcase 269:
SELECT * FROM (
SELECT (moving_average_all(2)::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |       value1        | value2 |        value3        | value4 |          __spd_url          
------------------------+------+---------------------+--------+----------------------+--------+-----------------------------
 1970-01-01 09:00:01+09 |      | 0.15000000000000002 |    100 | -0.15000000000000002 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |                0.25 |    100 |                -0.25 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      |  1.6500000000000001 |    200 |  -1.6500000000000001 |   -200 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |                2.75 |    200 |                -2.75 |   -200 | /influxdb_svr/
(4 rows)

-- select moving_average(regex) (stub function, expose data, explain)
--Testcase 270:
EXPLAIN VERBOSE
SELECT (moving_average('/value[1,4]/', 2)::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((moving_average('/value[1,4]/'::text, 2)))::s3)."time"), ((((moving_average('/value[1,4]/'::text, 2)))::s3).tag1), ((((moving_average('/value[1,4]/'::text, 2)))::s3).value1), ((((moving_average('/value[1,4]/'::text, 2)))::s3).value2), ((((moving_average('/value[1,4]/'::text, 2)))::s3).value3), ((((moving_average('/value[1,4]/'::text, 2)))::s3).value4), ((((moving_average('/value[1,4]/'::text, 2)))::s3).__spd_url)
   Sort Key: ((((moving_average('/value[1,4]/'::text, 2)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((moving_average('/value[1,4]/'::text, 2)))::s3)."time", (((moving_average('/value[1,4]/'::text, 2)))::s3).tag1, (((moving_average('/value[1,4]/'::text, 2)))::s3).value1, (((moving_average('/value[1,4]/'::text, 2)))::s3).value2, (((moving_average('/value[1,4]/'::text, 2)))::s3).value3, (((moving_average('/value[1,4]/'::text, 2)))::s3).value4, (((moving_average('/value[1,4]/'::text, 2)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT moving_average(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.moving_average('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select moving_average(regex) (stub function, expose data, result)
--Testcase 271:
SELECT * FROM (
SELECT (moving_average('/value[1,4]/', 2)::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |       value1        | value2 | value3 | value4 |          __spd_url          
------------------------+------+---------------------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:01+09 |      | 0.15000000000000002 |        |        |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |                0.25 |        |        |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      |  1.6500000000000001 |        |        |   -200 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |                2.75 |        |        |   -200 | /influxdb_svr/
(4 rows)

--Testcase 272:
EXPLAIN VERBOSE
SELECT chande_momentum_oscillator(value1, 2),chande_momentum_oscillator(value2, 2),chande_momentum_oscillator(value3, 2),chande_momentum_oscillator(value4, 2) FROM s3 ORDER BY 1;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (chande_momentum_oscillator(value1, 2)), (chande_momentum_oscillator(value2, 2)), (chande_momentum_oscillator(value3, 2)), (chande_momentum_oscillator(value4, 2))
   Sort Key: (chande_momentum_oscillator(s3.value1, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (chande_momentum_oscillator(value1, 2)), (chande_momentum_oscillator(value2, 2)), (chande_momentum_oscillator(value3, 2)), (chande_momentum_oscillator(value4, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT chande_momentum_oscillator("value1", 2), chande_momentum_oscillator("value2", 2), chande_momentum_oscillator("value3", 2), chande_momentum_oscillator("value4", 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.chande_momentum_oscillator(value1, 2), public.chande_momentum_oscillator(value2, 2), public.chande_momentum_oscillator(value3, 2), public.chande_momentum_oscillator(value4, 2) FROM public.s31influx
(11 rows)

--Testcase 273:
SELECT chande_momentum_oscillator(value1, 2),chande_momentum_oscillator(value2, 2),chande_momentum_oscillator(value3, 2),chande_momentum_oscillator(value4, 2) FROM s3 ORDER BY 1;
 chande_momentum_oscillator | chande_momentum_oscillator | chande_momentum_oscillator | chande_momentum_oscillator 
----------------------------+----------------------------+----------------------------+----------------------------
                        100 |                          0 |                       -100 |                          0
                        100 |                          0 |                       -100 |                          0
                        100 |                          0 |                       -100 |                          0
                        100 |                          0 |                       -100 |                          0
(4 rows)

--Testcase 274:
EXPLAIN VERBOSE
SELECT chande_momentum_oscillator(value1, 2, 2),chande_momentum_oscillator(value2, 2, 2),chande_momentum_oscillator(value3, 2, 2),chande_momentum_oscillator(value4, 2, 2) FROM s3 ORDER BY 1;
                                                                                                                      QUERY PLAN                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (chande_momentum_oscillator(value1, 2, 2)), (chande_momentum_oscillator(value2, 2, 2)), (chande_momentum_oscillator(value3, 2, 2)), (chande_momentum_oscillator(value4, 2, 2))
   Sort Key: (chande_momentum_oscillator(s3.value1, 2, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (chande_momentum_oscillator(value1, 2, 2)), (chande_momentum_oscillator(value2, 2, 2)), (chande_momentum_oscillator(value3, 2, 2)), (chande_momentum_oscillator(value4, 2, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT chande_momentum_oscillator("value1", 2, 2), chande_momentum_oscillator("value2", 2, 2), chande_momentum_oscillator("value3", 2, 2), chande_momentum_oscillator("value4", 2, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.chande_momentum_oscillator(value1, 2, 2), public.chande_momentum_oscillator(value2, 2, 2), public.chande_momentum_oscillator(value3, 2, 2), public.chande_momentum_oscillator(value4, 2, 2) FROM public.s31influx
(11 rows)

--Testcase 275:
SELECT chande_momentum_oscillator(value1, 2, 2),chande_momentum_oscillator(value2, 2, 2),chande_momentum_oscillator(value3, 2, 2),chande_momentum_oscillator(value4, 2, 2) FROM s3 ORDER BY 1;
 chande_momentum_oscillator | chande_momentum_oscillator | chande_momentum_oscillator | chande_momentum_oscillator 
----------------------------+----------------------------+----------------------------+----------------------------
                        100 |                          0 |                       -100 |                          0
                        100 |                          0 |                       -100 |                          0
(2 rows)

-- select chande_momentum_oscillator(*) (stub function, explain)
--Testcase 276:
EXPLAIN VERBOSE
SELECT chande_momentum_oscillator_all(2) from s3 ORDER BY 1;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (chande_momentum_oscillator_all(2))
   Sort Key: (chande_momentum_oscillator_all(2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (chande_momentum_oscillator_all(2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT chande_momentum_oscillator(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.chande_momentum_oscillator_all(2) FROM public.s31influx
(11 rows)

-- select chande_momentum_oscillator(*) (stub function, result)
--Testcase 277:
SELECT * FROM (
SELECT chande_momentum_oscillator_all(2) from s3
) as t ORDER BY 1;
                  chande_momentum_oscillator_all                  
------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,100,0,-100,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,100,0,-100,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,100,0,-100,0,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,100,0,-100,0,/influxdb_svr/)
(4 rows)

-- select chande_momentum_oscillator(regex) (stub function, explain)
--Testcase 278:
EXPLAIN VERBOSE
SELECT chande_momentum_oscillator('/value[1,4]/',2) from s3 ORDER BY 1;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (chande_momentum_oscillator('/value[1,4]/'::text, 2))
   Sort Key: (chande_momentum_oscillator('/value[1,4]/'::text, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (chande_momentum_oscillator('/value[1,4]/'::text, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT chande_momentum_oscillator(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.chande_momentum_oscillator('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select chande_momentum_oscillator(regex) (stub function, result)
--Testcase 279:
SELECT chande_momentum_oscillator('/value[1,4]/',2) from s3 ORDER BY 1;
                 chande_momentum_oscillator                  
-------------------------------------------------------------
 (1970-01-01T00:00:01Z,,100,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,100,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,100,,,0,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,100,,,0,/influxdb_svr/)
(4 rows)

-- select chande_momentum_oscillator(*) (stub function and group by tag only) (explain)
--Testcase 280:
EXPLAIN VERBOSE
SELECT chande_momentum_oscillator_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (chande_momentum_oscillator_all(2)), tag1
   Sort Key: (chande_momentum_oscillator_all(2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (chande_momentum_oscillator_all(2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT chande_momentum_oscillator(*, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.chande_momentum_oscillator_all(2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select chande_momentum_oscillator(*) (stub function and group by tag only) (result)
--Testcase 281:
SELECT chande_momentum_oscillator_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                  chande_momentum_oscillator_all                  
------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,100,0,-100,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,100,0,-100,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,100,0,-100,0,/influxdb_svr/)
(3 rows)

-- select chande_momentum_oscillator(regex) (stub function and group by tag only) (explain)
--Testcase 282:
EXPLAIN VERBOSE
SELECT chande_momentum_oscillator('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                       QUERY PLAN                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (chande_momentum_oscillator('/value[1,4]/'::text, 2)), tag1
   Sort Key: (chande_momentum_oscillator('/value[1,4]/'::text, 2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (chande_momentum_oscillator('/value[1,4]/'::text, 2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT chande_momentum_oscillator(/value[1,4]/, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.chande_momentum_oscillator('/value[1,4]/'::text, 2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select chande_momentum_oscillator(regex) (stub function and group by tag only) (result)
--Testcase 283:
SELECT chande_momentum_oscillator('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                 chande_momentum_oscillator                  
-------------------------------------------------------------
 (1970-01-01T00:00:01Z,,100,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,100,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,100,,,0,/influxdb_svr/)
(3 rows)

-- select chande_momentum_oscillator(*) (stub function, expose data, explain)
--Testcase 284:
EXPLAIN VERBOSE
SELECT (chande_momentum_oscillator_all(2)::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                             QUERY PLAN                                                                                                                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((chande_momentum_oscillator_all(2)))::s3)."time"), ((((chande_momentum_oscillator_all(2)))::s3).tag1), ((((chande_momentum_oscillator_all(2)))::s3).value1), ((((chande_momentum_oscillator_all(2)))::s3).value2), ((((chande_momentum_oscillator_all(2)))::s3).value3), ((((chande_momentum_oscillator_all(2)))::s3).value4), ((((chande_momentum_oscillator_all(2)))::s3).__spd_url)
   Sort Key: ((((chande_momentum_oscillator_all(2)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((chande_momentum_oscillator_all(2)))::s3)."time", (((chande_momentum_oscillator_all(2)))::s3).tag1, (((chande_momentum_oscillator_all(2)))::s3).value1, (((chande_momentum_oscillator_all(2)))::s3).value2, (((chande_momentum_oscillator_all(2)))::s3).value3, (((chande_momentum_oscillator_all(2)))::s3).value4, (((chande_momentum_oscillator_all(2)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT chande_momentum_oscillator(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.chande_momentum_oscillator_all(2) FROM public.s31influx
(11 rows)

-- select chande_momentum_oscillator(*) (stub function, expose data, result)
--Testcase 285:
SELECT * FROM (
SELECT (chande_momentum_oscillator_all(2)::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:01+09 |      |    100 |      0 |   -100 |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |    100 |      0 |   -100 |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      |    100 |      0 |   -100 |      0 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |    100 |      0 |   -100 |      0 | /influxdb_svr/
(4 rows)

-- select chande_momentum_oscillator(regex) (stub function, expose data, explain)
--Testcase 286:
EXPLAIN VERBOSE
SELECT (chande_momentum_oscillator('/value[1,4]/',2)::s3).* from s3 ORDER BY 1;


 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3)."time"), ((((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).tag1), ((((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).value1), ((((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).value2), ((((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).value3), ((((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).value4), ((((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).__spd_url)
   Sort Key: ((((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3)."time", (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).tag1, (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).value1, (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).value2, (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).value3, (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).value4, (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT chande_momentum_oscillator(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.chande_momentum_oscillator('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select chande_momentum_oscillator(regex) (stub function, expose data, result)
--Testcase 287:
SELECT * FROM (
SELECT (chande_momentum_oscillator('/value[1,4]/',2)::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:01+09 |      |    100 |        |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |    100 |        |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:04+09 |      |    100 |        |        |      0 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |    100 |        |        |      0 | /influxdb_svr/
(4 rows)

--Testcase 288:
EXPLAIN VERBOSE
SELECT exponential_moving_average(value1, 2),exponential_moving_average(value2, 2),exponential_moving_average(value3, 2),exponential_moving_average(value4, 2) FROM s3 ORDER BY 1, 2, 3, 4;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (exponential_moving_average(value1, 2)), (exponential_moving_average(value2, 2)), (exponential_moving_average(value3, 2)), (exponential_moving_average(value4, 2))
   Sort Key: (exponential_moving_average(s3.value1, 2)), (exponential_moving_average(s3.value2, 2)), (exponential_moving_average(s3.value3, 2)), (exponential_moving_average(s3.value4, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (exponential_moving_average(value1, 2)), (exponential_moving_average(value2, 2)), (exponential_moving_average(value3, 2)), (exponential_moving_average(value4, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT exponential_moving_average("value1", 2), exponential_moving_average("value2", 2), exponential_moving_average("value3", 2), exponential_moving_average("value4", 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.exponential_moving_average(value1, 2), public.exponential_moving_average(value2, 2), public.exponential_moving_average(value3, 2), public.exponential_moving_average(value4, 2) FROM public.s31influx
(11 rows)

--Testcase 289:
SELECT exponential_moving_average(value1, 2),exponential_moving_average(value2, 2),exponential_moving_average(value3, 2),exponential_moving_average(value4, 2) FROM s3 ORDER BY 1, 2, 3, 4;
 exponential_moving_average | exponential_moving_average | exponential_moving_average | exponential_moving_average 
----------------------------+----------------------------+----------------------------+----------------------------
        0.16666666666666669 |                        100 |       -0.16666666666666669 |                       -100
        0.25555555555555554 |                        100 |       -0.25555555555555554 |                       -100
         1.8333333333333335 |                        200 |        -1.8333333333333335 |                       -200
          2.811111111111111 |                        200 |         -2.811111111111111 |                       -200
(4 rows)

--Testcase 290:
EXPLAIN VERBOSE
SELECT exponential_moving_average(value1, 2, 2),exponential_moving_average(value2, 2, 2),exponential_moving_average(value3, 2, 2),exponential_moving_average(value4, 2, 2) FROM s3 ORDER BY 1;
                                                                                                                      QUERY PLAN                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (exponential_moving_average(value1, 2, 2)), (exponential_moving_average(value2, 2, 2)), (exponential_moving_average(value3, 2, 2)), (exponential_moving_average(value4, 2, 2))
   Sort Key: (exponential_moving_average(s3.value1, 2, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (exponential_moving_average(value1, 2, 2)), (exponential_moving_average(value2, 2, 2)), (exponential_moving_average(value3, 2, 2)), (exponential_moving_average(value4, 2, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT exponential_moving_average("value1", 2, 2), exponential_moving_average("value2", 2, 2), exponential_moving_average("value3", 2, 2), exponential_moving_average("value4", 2, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.exponential_moving_average(value1, 2, 2), public.exponential_moving_average(value2, 2, 2), public.exponential_moving_average(value3, 2, 2), public.exponential_moving_average(value4, 2, 2) FROM public.s31influx
(11 rows)

--Testcase 291:
SELECT exponential_moving_average(value1, 2, 2),exponential_moving_average(value2, 2, 2),exponential_moving_average(value3, 2, 2),exponential_moving_average(value4, 2, 2) FROM s3 ORDER BY 1;
 exponential_moving_average | exponential_moving_average | exponential_moving_average | exponential_moving_average 
----------------------------+----------------------------+----------------------------+----------------------------
        0.25555555555555554 |                        100 |       -0.25555555555555554 |                       -100
          2.811111111111111 |                        200 |         -2.811111111111111 |                       -200
(2 rows)

-- select exponential_moving_average(*) (stub function, explain)
--Testcase 292:
EXPLAIN VERBOSE
SELECT exponential_moving_average_all(2) from s3 ORDER BY 1;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (exponential_moving_average_all(2))
   Sort Key: (exponential_moving_average_all(2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (exponential_moving_average_all(2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT exponential_moving_average(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.exponential_moving_average_all(2) FROM public.s31influx
(11 rows)

-- select exponential_moving_average(*) (stub function, result)
--Testcase 293:
SELECT * FROM (
SELECT exponential_moving_average_all(2) from s3
) as t ORDER BY 1;
                                    exponential_moving_average_all                                     
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.16666666666666669,100,-0.16666666666666669,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.25555555555555554,100,-0.25555555555555554,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.8333333333333335,200,-1.8333333333333335,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,2.811111111111111,200,-2.811111111111111,-200,/influxdb_svr/)
(4 rows)

-- select exponential_moving_average(regex) (stub function, explain)
--Testcase 294:
EXPLAIN VERBOSE
SELECT exponential_moving_average('/value[1,4]/',2) from s3 ORDER BY 1;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (exponential_moving_average('/value[1,4]/'::text, 2))
   Sort Key: (exponential_moving_average('/value[1,4]/'::text, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (exponential_moving_average('/value[1,4]/'::text, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT exponential_moving_average(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.exponential_moving_average('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select exponential_moving_average(regex) (stub function, result)
--Testcase 295:
SELECT exponential_moving_average('/value[1,4]/',2) from s3 ORDER BY 1;
                           exponential_moving_average                           
--------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.16666666666666669,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.25555555555555554,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.8333333333333335,,,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,2.811111111111111,,,-200,/influxdb_svr/)
(4 rows)

-- select exponential_moving_average(*) (stub function and group by tag only) (explain)
--Testcase 296:
EXPLAIN VERBOSE
SELECT exponential_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (exponential_moving_average_all(2)), tag1
   Sort Key: (exponential_moving_average_all(2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (exponential_moving_average_all(2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT exponential_moving_average(*, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.exponential_moving_average_all(2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select exponential_moving_average(*) (stub function and group by tag only) (result)
--Testcase 297:
SELECT exponential_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                    exponential_moving_average_all                                     
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.16666666666666669,100,-0.16666666666666669,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.25555555555555554,100,-0.25555555555555554,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.8333333333333335,200,-1.8333333333333335,-200,/influxdb_svr/)
(3 rows)

-- select exponential_moving_average(regex) (stub function and group by tag only) (explain)
--Testcase 298:
EXPLAIN VERBOSE
SELECT exponential_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                       QUERY PLAN                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (exponential_moving_average('/value[1,4]/'::text, 2)), tag1
   Sort Key: (exponential_moving_average('/value[1,4]/'::text, 2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (exponential_moving_average('/value[1,4]/'::text, 2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT exponential_moving_average(/value[1,4]/, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.exponential_moving_average('/value[1,4]/'::text, 2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select exponential_moving_average(regex) (stub function and group by tag only) (result)
--Testcase 299:
SELECT exponential_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                           exponential_moving_average                           
--------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.16666666666666669,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.25555555555555554,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.8333333333333335,,,-200,/influxdb_svr/)
(3 rows)

--Testcase 300:
EXPLAIN VERBOSE
SELECT double_exponential_moving_average(value1, 2),double_exponential_moving_average(value2, 2),double_exponential_moving_average(value3, 2),double_exponential_moving_average(value4, 2) FROM s3 ORDER BY 1;
                                                                                                                              QUERY PLAN                                                                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (double_exponential_moving_average(value1, 2)), (double_exponential_moving_average(value2, 2)), (double_exponential_moving_average(value3, 2)), (double_exponential_moving_average(value4, 2))
   Sort Key: (double_exponential_moving_average(s3.value1, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (double_exponential_moving_average(value1, 2)), (double_exponential_moving_average(value2, 2)), (double_exponential_moving_average(value3, 2)), (double_exponential_moving_average(value4, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT double_exponential_moving_average("value1", 2), double_exponential_moving_average("value2", 2), double_exponential_moving_average("value3", 2), double_exponential_moving_average("value4", 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.double_exponential_moving_average(value1, 2), public.double_exponential_moving_average(value2, 2), public.double_exponential_moving_average(value3, 2), public.double_exponential_moving_average(value4, 2) FROM public.s31influx
(11 rows)

--Testcase 301:
SELECT double_exponential_moving_average(value1, 2),double_exponential_moving_average(value2, 2),double_exponential_moving_average(value3, 2),double_exponential_moving_average(value4, 2) FROM s3 ORDER BY 1;
 double_exponential_moving_average | double_exponential_moving_average | double_exponential_moving_average | double_exponential_moving_average 
-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------
                0.1888888888888889 |                               100 |               -0.1888888888888889 |                              -100
               0.29259259259259257 |                               100 |              -0.29259259259259257 |                              -100
                 2.077777777777778 |                               200 |                -2.077777777777778 |                              -200
                3.2185185185185183 |                               200 |               -3.2185185185185183 |                              -200
(4 rows)

--Testcase 302:
EXPLAIN VERBOSE
SELECT double_exponential_moving_average(value1, 2, 2),double_exponential_moving_average(value2, 2, 2),double_exponential_moving_average(value3, 2, 2),double_exponential_moving_average(value4, 2, 2) FROM s3 ORDER BY 1;
                                                                                                                                    QUERY PLAN                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (double_exponential_moving_average(value1, 2, 2)), (double_exponential_moving_average(value2, 2, 2)), (double_exponential_moving_average(value3, 2, 2)), (double_exponential_moving_average(value4, 2, 2))
   Sort Key: (double_exponential_moving_average(s3.value1, 2, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (double_exponential_moving_average(value1, 2, 2)), (double_exponential_moving_average(value2, 2, 2)), (double_exponential_moving_average(value3, 2, 2)), (double_exponential_moving_average(value4, 2, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT double_exponential_moving_average("value1", 2, 2), double_exponential_moving_average("value2", 2, 2), double_exponential_moving_average("value3", 2, 2), double_exponential_moving_average("value4", 2, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.double_exponential_moving_average(value1, 2, 2), public.double_exponential_moving_average(value2, 2, 2), public.double_exponential_moving_average(value3, 2, 2), public.double_exponential_moving_average(value4, 2, 2) FROM public.s31influx
(11 rows)

--Testcase 303:
SELECT double_exponential_moving_average(value1, 2, 2),double_exponential_moving_average(value2, 2, 2),double_exponential_moving_average(value3, 2, 2),double_exponential_moving_average(value4, 2, 2) FROM s3 ORDER BY 1;
 double_exponential_moving_average | double_exponential_moving_average | double_exponential_moving_average | double_exponential_moving_average 
-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------
               0.29259259259259257 |                               100 |              -0.29259259259259257 |                              -100
                3.2185185185185183 |                               200 |               -3.2185185185185183 |                              -200
(2 rows)

-- select double_exponential_moving_average(*) (stub function, explain)
--Testcase 304:
EXPLAIN VERBOSE
SELECT double_exponential_moving_average_all(2) from s3 ORDER BY 1;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (double_exponential_moving_average_all(2))
   Sort Key: (double_exponential_moving_average_all(2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (double_exponential_moving_average_all(2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT double_exponential_moving_average(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.double_exponential_moving_average_all(2) FROM public.s31influx
(11 rows)

-- select double_exponential_moving_average(*) (stub function, result)
--Testcase 305:
SELECT * FROM (
SELECT double_exponential_moving_average_all(2) from s3
) as t ORDER BY 1;
                                 double_exponential_moving_average_all                                 
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1888888888888889,100,-0.1888888888888889,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.29259259259259257,100,-0.29259259259259257,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2.077777777777778,200,-2.077777777777778,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,3.2185185185185183,200,-3.2185185185185183,-200,/influxdb_svr/)
(4 rows)

-- select double_exponential_moving_average(regex) (stub function, explain)
--Testcase 306:
EXPLAIN VERBOSE
SELECT double_exponential_moving_average('/value[1,4]/',2) from s3 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (double_exponential_moving_average('/value[1,4]/'::text, 2))
   Sort Key: (double_exponential_moving_average('/value[1,4]/'::text, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (double_exponential_moving_average('/value[1,4]/'::text, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT double_exponential_moving_average(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.double_exponential_moving_average('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select double_exponential_moving_average(regex) (stub function, result)
--Testcase 307:
SELECT double_exponential_moving_average('/value[1,4]/',2) from s3 ORDER BY 1;
                       double_exponential_moving_average                        
--------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1888888888888889,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.29259259259259257,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2.077777777777778,,,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,3.2185185185185183,,,-200,/influxdb_svr/)
(4 rows)

-- select double_exponential_moving_average(*) (stub function and group by tag only) (explain)
--Testcase 308:
EXPLAIN VERBOSE
SELECT double_exponential_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (double_exponential_moving_average_all(2)), tag1
   Sort Key: (double_exponential_moving_average_all(2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (double_exponential_moving_average_all(2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT double_exponential_moving_average(*, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.double_exponential_moving_average_all(2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select double_exponential_moving_average(*) (stub function and group by tag only) (result)
--Testcase 309:
SELECT double_exponential_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                 double_exponential_moving_average_all                                 
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1888888888888889,100,-0.1888888888888889,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.29259259259259257,100,-0.29259259259259257,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2.077777777777778,200,-2.077777777777778,-200,/influxdb_svr/)
(3 rows)

-- select double_exponential_moving_average(regex) (stub function and group by tag only) (explain)
--Testcase 310:
EXPLAIN VERBOSE
SELECT double_exponential_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (double_exponential_moving_average('/value[1,4]/'::text, 2)), tag1
   Sort Key: (double_exponential_moving_average('/value[1,4]/'::text, 2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (double_exponential_moving_average('/value[1,4]/'::text, 2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT double_exponential_moving_average(/value[1,4]/, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.double_exponential_moving_average('/value[1,4]/'::text, 2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select double_exponential_moving_average(regex) (stub function and group by tag only) (result)
--Testcase 311:
SELECT double_exponential_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                       double_exponential_moving_average                        
--------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1888888888888889,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.29259259259259257,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2.077777777777778,,,-200,/influxdb_svr/)
(3 rows)

--Testcase 312:
EXPLAIN VERBOSE
SELECT kaufmans_efficiency_ratio(value1, 2),kaufmans_efficiency_ratio(value2, 2),kaufmans_efficiency_ratio(value3, 2),kaufmans_efficiency_ratio(value4, 2) FROM s3 ORDER BY 1;
                                                                                                              QUERY PLAN                                                                                                               
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (kaufmans_efficiency_ratio(value1, 2)), (kaufmans_efficiency_ratio(value2, 2)), (kaufmans_efficiency_ratio(value3, 2)), (kaufmans_efficiency_ratio(value4, 2))
   Sort Key: (kaufmans_efficiency_ratio(s3.value1, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (kaufmans_efficiency_ratio(value1, 2)), (kaufmans_efficiency_ratio(value2, 2)), (kaufmans_efficiency_ratio(value3, 2)), (kaufmans_efficiency_ratio(value4, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT kaufmans_efficiency_ratio("value1", 2), kaufmans_efficiency_ratio("value2", 2), kaufmans_efficiency_ratio("value3", 2), kaufmans_efficiency_ratio("value4", 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.kaufmans_efficiency_ratio(value1, 2), public.kaufmans_efficiency_ratio(value2, 2), public.kaufmans_efficiency_ratio(value3, 2), public.kaufmans_efficiency_ratio(value4, 2) FROM public.s31influx
(11 rows)

--Testcase 313:
SELECT kaufmans_efficiency_ratio(value1, 2),kaufmans_efficiency_ratio(value2, 2),kaufmans_efficiency_ratio(value3, 2),kaufmans_efficiency_ratio(value4, 2) FROM s3 ORDER BY 1;
 kaufmans_efficiency_ratio | kaufmans_efficiency_ratio | kaufmans_efficiency_ratio | kaufmans_efficiency_ratio 
---------------------------+---------------------------+---------------------------+---------------------------
                         1 |                         0 |                         1 |                         0
                         1 |                         0 |                         1 |                         0
(2 rows)

--Testcase 314:
EXPLAIN VERBOSE
SELECT kaufmans_efficiency_ratio(value1, 2, 2),kaufmans_efficiency_ratio(value2, 2, 2),kaufmans_efficiency_ratio(value3, 2, 2),kaufmans_efficiency_ratio(value4, 2, 2) FROM s3 ORDER BY 1;
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (kaufmans_efficiency_ratio(value1, 2, 2)), (kaufmans_efficiency_ratio(value2, 2, 2)), (kaufmans_efficiency_ratio(value3, 2, 2)), (kaufmans_efficiency_ratio(value4, 2, 2))
   Sort Key: (kaufmans_efficiency_ratio(s3.value1, 2, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (kaufmans_efficiency_ratio(value1, 2, 2)), (kaufmans_efficiency_ratio(value2, 2, 2)), (kaufmans_efficiency_ratio(value3, 2, 2)), (kaufmans_efficiency_ratio(value4, 2, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT kaufmans_efficiency_ratio("value1", 2, 2), kaufmans_efficiency_ratio("value2", 2, 2), kaufmans_efficiency_ratio("value3", 2, 2), kaufmans_efficiency_ratio("value4", 2, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.kaufmans_efficiency_ratio(value1, 2, 2), public.kaufmans_efficiency_ratio(value2, 2, 2), public.kaufmans_efficiency_ratio(value3, 2, 2), public.kaufmans_efficiency_ratio(value4, 2, 2) FROM public.s31influx
(11 rows)

--Testcase 315:
SELECT kaufmans_efficiency_ratio(value1, 2, 2),kaufmans_efficiency_ratio(value2, 2, 2),kaufmans_efficiency_ratio(value3, 2, 2),kaufmans_efficiency_ratio(value4, 2, 2) FROM s3 ORDER BY 1;
 kaufmans_efficiency_ratio | kaufmans_efficiency_ratio | kaufmans_efficiency_ratio | kaufmans_efficiency_ratio 
---------------------------+---------------------------+---------------------------+---------------------------
                         1 |                         0 |                         1 |                         0
                         1 |                         0 |                         1 |                         0
(2 rows)

-- select kaufmans_efficiency_ratio(*) (stub function, explain)
--Testcase 316:
EXPLAIN VERBOSE
SELECT kaufmans_efficiency_ratio_all(2) from s3 ORDER BY 1;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (kaufmans_efficiency_ratio_all(2))
   Sort Key: (kaufmans_efficiency_ratio_all(2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (kaufmans_efficiency_ratio_all(2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT kaufmans_efficiency_ratio(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.kaufmans_efficiency_ratio_all(2) FROM public.s31influx
(11 rows)

-- select kaufmans_efficiency_ratio(*) (stub function, result)
--Testcase 317:
SELECT * FROM (
SELECT kaufmans_efficiency_ratio_all(2) from s3
) as t ORDER BY 1;
                kaufmans_efficiency_ratio_all                
-------------------------------------------------------------
 (1970-01-01T00:00:02Z,,1,0,1,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1,0,1,0,/influxdb_svr/)
(2 rows)

-- select kaufmans_efficiency_ratio(regex) (stub function, explain)
--Testcase 318:
EXPLAIN VERBOSE
SELECT kaufmans_efficiency_ratio('/value[1,4]/',2) from s3 ORDER BY 1;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (kaufmans_efficiency_ratio('/value[1,4]/'::text, 2))
   Sort Key: (kaufmans_efficiency_ratio('/value[1,4]/'::text, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (kaufmans_efficiency_ratio('/value[1,4]/'::text, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT kaufmans_efficiency_ratio(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.kaufmans_efficiency_ratio('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select kaufmans_efficiency_ratio(regex) (stub function, result)
--Testcase 319:
SELECT kaufmans_efficiency_ratio('/value[1,4]/',2) from s3 ORDER BY 1;
                 kaufmans_efficiency_ratio                 
-----------------------------------------------------------
 (1970-01-01T00:00:02Z,,1,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1,,,0,/influxdb_svr/)
(2 rows)

-- select kaufmans_efficiency_ratio(*) (stub function and group by tag only) (explain)
--Testcase 320:
EXPLAIN VERBOSE
SELECT kaufmans_efficiency_ratio_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (kaufmans_efficiency_ratio_all(2)), tag1
   Sort Key: (kaufmans_efficiency_ratio_all(2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (kaufmans_efficiency_ratio_all(2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT kaufmans_efficiency_ratio(*, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.kaufmans_efficiency_ratio_all(2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select kaufmans_efficiency_ratio(*) (stub function and group by tag only) (result)
--Testcase 321:
SELECT kaufmans_efficiency_ratio_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                kaufmans_efficiency_ratio_all                
-------------------------------------------------------------
 (1970-01-01T00:00:02Z,,1,0,1,0,/pgspider_svr/influxdb_svr/)
(1 row)

-- select kaufmans_efficiency_ratio(regex) (stub function and group by tag only) (explain)
--Testcase 322:
EXPLAIN VERBOSE
SELECT kaufmans_efficiency_ratio('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)), tag1
   Sort Key: (kaufmans_efficiency_ratio('/value[1,4]/'::text, 2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT kaufmans_efficiency_ratio(/value[1,4]/, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.kaufmans_efficiency_ratio('/value[1,4]/'::text, 2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select kaufmans_efficiency_ratio(regex) (stub function and group by tag only) (result)
--Testcase 323:
SELECT kaufmans_efficiency_ratio('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                 kaufmans_efficiency_ratio                 
-----------------------------------------------------------
 (1970-01-01T00:00:02Z,,1,,,0,/pgspider_svr/influxdb_svr/)
(1 row)

-- select kaufmans_efficiency_ratio(*) (stub function, expose data, explain)
--Testcase 324:
EXPLAIN VERBOSE
SELECT (kaufmans_efficiency_ratio_all(2)::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                          QUERY PLAN                                                                                                                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((kaufmans_efficiency_ratio_all(2)))::s3)."time"), ((((kaufmans_efficiency_ratio_all(2)))::s3).tag1), ((((kaufmans_efficiency_ratio_all(2)))::s3).value1), ((((kaufmans_efficiency_ratio_all(2)))::s3).value2), ((((kaufmans_efficiency_ratio_all(2)))::s3).value3), ((((kaufmans_efficiency_ratio_all(2)))::s3).value4), ((((kaufmans_efficiency_ratio_all(2)))::s3).__spd_url)
   Sort Key: ((((kaufmans_efficiency_ratio_all(2)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((kaufmans_efficiency_ratio_all(2)))::s3)."time", (((kaufmans_efficiency_ratio_all(2)))::s3).tag1, (((kaufmans_efficiency_ratio_all(2)))::s3).value1, (((kaufmans_efficiency_ratio_all(2)))::s3).value2, (((kaufmans_efficiency_ratio_all(2)))::s3).value3, (((kaufmans_efficiency_ratio_all(2)))::s3).value4, (((kaufmans_efficiency_ratio_all(2)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT kaufmans_efficiency_ratio(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.kaufmans_efficiency_ratio_all(2) FROM public.s31influx
(11 rows)

-- select kaufmans_efficiency_ratio(*) (stub function, expose data, result)
--Testcase 325:
SELECT * FROM (
SELECT (kaufmans_efficiency_ratio_all(2)::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:02+09 |      |      1 |      0 |      1 |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:05+09 |      |      1 |      0 |      1 |      0 | /influxdb_svr/
(2 rows)

-- select kaufmans_efficiency_ratio(regex) (stub function, expose data, explain)
--Testcase 326:
EXPLAIN VERBOSE
SELECT (kaufmans_efficiency_ratio('/value[1,4]/',2)::s3).* from s3 ORDER BY 1;


 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3)."time"), ((((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).tag1), ((((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).value1), ((((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).value2), ((((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).value3), ((((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).value4), ((((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).__spd_url)
   Sort Key: ((((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3)."time", (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).tag1, (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).value1, (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).value2, (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).value3, (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).value4, (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT kaufmans_efficiency_ratio(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.kaufmans_efficiency_ratio('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select kaufmans_efficiency_ratio(regex) (stub function, expose data, result)
--Testcase 327:
SELECT * FROM (
SELECT (kaufmans_efficiency_ratio('/value[1,4]/',2)::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:02+09 |      |      1 |        |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:05+09 |      |      1 |        |        |      0 | /influxdb_svr/
(2 rows)

--Testcase 328:
EXPLAIN VERBOSE
SELECT kaufmans_adaptive_moving_average(value1, 2),kaufmans_adaptive_moving_average(value2, 2),kaufmans_adaptive_moving_average(value3, 2),kaufmans_adaptive_moving_average(value4, 2) FROM s3 ORDER BY 1;
                                                                                                                            QUERY PLAN                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (kaufmans_adaptive_moving_average(value1, 2)), (kaufmans_adaptive_moving_average(value2, 2)), (kaufmans_adaptive_moving_average(value3, 2)), (kaufmans_adaptive_moving_average(value4, 2))
   Sort Key: (kaufmans_adaptive_moving_average(s3.value1, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (kaufmans_adaptive_moving_average(value1, 2)), (kaufmans_adaptive_moving_average(value2, 2)), (kaufmans_adaptive_moving_average(value3, 2)), (kaufmans_adaptive_moving_average(value4, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT kaufmans_adaptive_moving_average("value1", 2), kaufmans_adaptive_moving_average("value2", 2), kaufmans_adaptive_moving_average("value3", 2), kaufmans_adaptive_moving_average("value4", 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.kaufmans_adaptive_moving_average(value1, 2), public.kaufmans_adaptive_moving_average(value2, 2), public.kaufmans_adaptive_moving_average(value3, 2), public.kaufmans_adaptive_moving_average(value4, 2) FROM public.s31influx
(11 rows)

--Testcase 329:
SELECT kaufmans_adaptive_moving_average(value1, 2),kaufmans_adaptive_moving_average(value2, 2),kaufmans_adaptive_moving_average(value3, 2),kaufmans_adaptive_moving_average(value4, 2) FROM s3 ORDER BY 1;
 kaufmans_adaptive_moving_average | kaufmans_adaptive_moving_average | kaufmans_adaptive_moving_average | kaufmans_adaptive_moving_average 
----------------------------------+----------------------------------+----------------------------------+----------------------------------
              0.24444444444444446 |                              100 |             -0.24444444444444446 |                             -100
                2.688888888888889 |                              200 |               -2.688888888888889 |                             -200
(2 rows)

--Testcase 330:
EXPLAIN VERBOSE
SELECT kaufmans_adaptive_moving_average(value1, 2, 2),kaufmans_adaptive_moving_average(value2, 2, 2),kaufmans_adaptive_moving_average(value3, 2, 2),kaufmans_adaptive_moving_average(value4, 2, 2) FROM s3 ORDER BY 1;
                                                                                                                                  QUERY PLAN                                                                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (kaufmans_adaptive_moving_average(value1, 2, 2)), (kaufmans_adaptive_moving_average(value2, 2, 2)), (kaufmans_adaptive_moving_average(value3, 2, 2)), (kaufmans_adaptive_moving_average(value4, 2, 2))
   Sort Key: (kaufmans_adaptive_moving_average(s3.value1, 2, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (kaufmans_adaptive_moving_average(value1, 2, 2)), (kaufmans_adaptive_moving_average(value2, 2, 2)), (kaufmans_adaptive_moving_average(value3, 2, 2)), (kaufmans_adaptive_moving_average(value4, 2, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT kaufmans_adaptive_moving_average("value1", 2, 2), kaufmans_adaptive_moving_average("value2", 2, 2), kaufmans_adaptive_moving_average("value3", 2, 2), kaufmans_adaptive_moving_average("value4", 2, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.kaufmans_adaptive_moving_average(value1, 2, 2), public.kaufmans_adaptive_moving_average(value2, 2, 2), public.kaufmans_adaptive_moving_average(value3, 2, 2), public.kaufmans_adaptive_moving_average(value4, 2, 2) FROM public.s31influx
(11 rows)

--Testcase 331:
SELECT kaufmans_adaptive_moving_average(value1, 2, 2),kaufmans_adaptive_moving_average(value2, 2, 2),kaufmans_adaptive_moving_average(value3, 2, 2),kaufmans_adaptive_moving_average(value4, 2, 2) FROM s3 ORDER BY 1;
 kaufmans_adaptive_moving_average | kaufmans_adaptive_moving_average | kaufmans_adaptive_moving_average | kaufmans_adaptive_moving_average 
----------------------------------+----------------------------------+----------------------------------+----------------------------------
              0.24444444444444446 |                              100 |             -0.24444444444444446 |                             -100
                2.688888888888889 |                              200 |               -2.688888888888889 |                             -200
(2 rows)

-- select kaufmans_adaptive_moving_average(*) (stub function, explain)
--Testcase 332:
EXPLAIN VERBOSE
SELECT kaufmans_adaptive_moving_average_all(2) from s3 ORDER BY 1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (kaufmans_adaptive_moving_average_all(2))
   Sort Key: (kaufmans_adaptive_moving_average_all(2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (kaufmans_adaptive_moving_average_all(2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT kaufmans_adaptive_moving_average(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.kaufmans_adaptive_moving_average_all(2) FROM public.s31influx
(11 rows)

-- select kaufmans_adaptive_moving_average(*) (stub function, result)
--Testcase 333:
SELECT * FROM (
SELECT kaufmans_adaptive_moving_average_all(2) from s3
) as t ORDER BY 1;
                                 kaufmans_adaptive_moving_average_all                                  
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,0.24444444444444446,100,-0.24444444444444446,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:05Z,,2.688888888888889,200,-2.688888888888889,-200,/influxdb_svr/)
(2 rows)

-- select kaufmans_adaptive_moving_average(regex) (stub function, explain)
--Testcase 334:
EXPLAIN VERBOSE
SELECT kaufmans_adaptive_moving_average('/value[1,4]/',2) from s3 ORDER BY 1;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (kaufmans_adaptive_moving_average('/value[1,4]/'::text, 2))
   Sort Key: (kaufmans_adaptive_moving_average('/value[1,4]/'::text, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (kaufmans_adaptive_moving_average('/value[1,4]/'::text, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT kaufmans_adaptive_moving_average(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.kaufmans_adaptive_moving_average('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select kaufmans_adaptive_moving_average(regex) (stub function, result)
--Testcase 335:
SELECT kaufmans_adaptive_moving_average('/value[1,4]/',2) from s3 ORDER BY 1;
                        kaufmans_adaptive_moving_average                        
--------------------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,0.24444444444444446,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:05Z,,2.688888888888889,,,-200,/influxdb_svr/)
(2 rows)

-- select kaufmans_adaptive_moving_average(*) (stub function and group by tag only) (explain)
--Testcase 336:
EXPLAIN VERBOSE
SELECT kaufmans_adaptive_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                 QUERY PLAN                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (kaufmans_adaptive_moving_average_all(2)), tag1
   Sort Key: (kaufmans_adaptive_moving_average_all(2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (kaufmans_adaptive_moving_average_all(2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT kaufmans_adaptive_moving_average(*, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.kaufmans_adaptive_moving_average_all(2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select kaufmans_adaptive_moving_average(*) (stub function and group by tag only) (result)
--Testcase 337:
SELECT kaufmans_adaptive_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                 kaufmans_adaptive_moving_average_all                                  
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,0.24444444444444446,100,-0.24444444444444446,-100,/pgspider_svr/influxdb_svr/)
(1 row)

-- select kaufmans_adaptive_moving_average(regex) (stub function and group by tag only) (explain)
--Testcase 338:
EXPLAIN VERBOSE
SELECT kaufmans_adaptive_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                          QUERY PLAN                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (kaufmans_adaptive_moving_average('/value[1,4]/'::text, 2)), tag1
   Sort Key: (kaufmans_adaptive_moving_average('/value[1,4]/'::text, 2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (kaufmans_adaptive_moving_average('/value[1,4]/'::text, 2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT kaufmans_adaptive_moving_average(/value[1,4]/, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.kaufmans_adaptive_moving_average('/value[1,4]/'::text, 2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select kaufmans_adaptive_moving_average(regex) (stub function and group by tag only) (result)
--Testcase 339:
SELECT kaufmans_adaptive_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                        kaufmans_adaptive_moving_average                        
--------------------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,0.24444444444444446,,,-100,/pgspider_svr/influxdb_svr/)
(1 row)

--Testcase 340:
EXPLAIN VERBOSE
SELECT triple_exponential_moving_average(value1, 2),triple_exponential_moving_average(value2, 2),triple_exponential_moving_average(value3, 2),triple_exponential_moving_average(value4, 2) FROM s3 ORDER BY 1;
                                                                                                                              QUERY PLAN                                                                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (triple_exponential_moving_average(value1, 2)), (triple_exponential_moving_average(value2, 2)), (triple_exponential_moving_average(value3, 2)), (triple_exponential_moving_average(value4, 2))
   Sort Key: (triple_exponential_moving_average(s3.value1, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (triple_exponential_moving_average(value1, 2)), (triple_exponential_moving_average(value2, 2)), (triple_exponential_moving_average(value3, 2)), (triple_exponential_moving_average(value4, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT triple_exponential_moving_average("value1", 2), triple_exponential_moving_average("value2", 2), triple_exponential_moving_average("value3", 2), triple_exponential_moving_average("value4", 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.triple_exponential_moving_average(value1, 2), public.triple_exponential_moving_average(value2, 2), public.triple_exponential_moving_average(value3, 2), public.triple_exponential_moving_average(value4, 2) FROM public.s31influx
(11 rows)

--Testcase 341:
SELECT triple_exponential_moving_average(value1, 2),triple_exponential_moving_average(value2, 2),triple_exponential_moving_average(value3, 2),triple_exponential_moving_average(value4, 2) FROM s3 ORDER BY 1;
 triple_exponential_moving_average | triple_exponential_moving_average | triple_exponential_moving_average | triple_exponential_moving_average 
-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------
                0.1962962962962963 |                               100 |               -0.1962962962962963 |                              -100
               0.30000000000000004 |                               100 |              -0.30000000000000004 |                              -100
                2.1592592592592585 |                               200 |               -2.1592592592592585 |                              -200
                3.3000000000000007 |                               200 |               -3.3000000000000007 |                              -200
(4 rows)

--Testcase 342:
EXPLAIN VERBOSE
SELECT triple_exponential_moving_average(value1, 2, 2),triple_exponential_moving_average(value2, 2, 2),triple_exponential_moving_average(value3, 2, 2),triple_exponential_moving_average(value4, 2, 2) FROM s3 ORDER BY 1;
                                                                                                                                    QUERY PLAN                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (triple_exponential_moving_average(value1, 2, 2)), (triple_exponential_moving_average(value2, 2, 2)), (triple_exponential_moving_average(value3, 2, 2)), (triple_exponential_moving_average(value4, 2, 2))
   Sort Key: (triple_exponential_moving_average(s3.value1, 2, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (triple_exponential_moving_average(value1, 2, 2)), (triple_exponential_moving_average(value2, 2, 2)), (triple_exponential_moving_average(value3, 2, 2)), (triple_exponential_moving_average(value4, 2, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT triple_exponential_moving_average("value1", 2, 2), triple_exponential_moving_average("value2", 2, 2), triple_exponential_moving_average("value3", 2, 2), triple_exponential_moving_average("value4", 2, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.triple_exponential_moving_average(value1, 2, 2), public.triple_exponential_moving_average(value2, 2, 2), public.triple_exponential_moving_average(value3, 2, 2), public.triple_exponential_moving_average(value4, 2, 2) FROM public.s31influx
(11 rows)

--Testcase 343:
SELECT triple_exponential_moving_average(value1, 2, 2),triple_exponential_moving_average(value2, 2, 2),triple_exponential_moving_average(value3, 2, 2),triple_exponential_moving_average(value4, 2, 2) FROM s3 ORDER BY 1;
 triple_exponential_moving_average | triple_exponential_moving_average | triple_exponential_moving_average | triple_exponential_moving_average 
-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------
               0.30000000000000004 |                               100 |              -0.30000000000000004 |                              -100
                3.3000000000000007 |                               200 |               -3.3000000000000007 |                              -200
(2 rows)

-- select triple_exponential_moving_average(*) (stub function, explain)
--Testcase 344:
EXPLAIN VERBOSE
SELECT triple_exponential_moving_average_all(2) from s3 ORDER BY 1;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (triple_exponential_moving_average_all(2))
   Sort Key: (triple_exponential_moving_average_all(2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (triple_exponential_moving_average_all(2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT triple_exponential_moving_average(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.triple_exponential_moving_average_all(2) FROM public.s31influx
(11 rows)

-- select triple_exponential_moving_average(*) (stub function, result)
--Testcase 345:
SELECT * FROM (
SELECT triple_exponential_moving_average_all(2) from s3
) as t ORDER BY 1;
                                 triple_exponential_moving_average_all                                 
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1962962962962963,100,-0.1962962962962963,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.30000000000000004,100,-0.30000000000000004,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2.1592592592592585,200,-2.1592592592592585,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,3.3000000000000007,200,-3.3000000000000007,-200,/influxdb_svr/)
(4 rows)

-- select triple_exponential_moving_average(regex) (stub function, explain)
--Testcase 346:
EXPLAIN VERBOSE
SELECT triple_exponential_moving_average('/value[1,4]/',2) from s3 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (triple_exponential_moving_average('/value[1,4]/'::text, 2))
   Sort Key: (triple_exponential_moving_average('/value[1,4]/'::text, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (triple_exponential_moving_average('/value[1,4]/'::text, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT triple_exponential_moving_average(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.triple_exponential_moving_average('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select triple_exponential_moving_average(regex) (stub function, result)
--Testcase 347:
SELECT triple_exponential_moving_average('/value[1,4]/',2) from s3 ORDER BY 1;
                       triple_exponential_moving_average                        
--------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1962962962962963,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.30000000000000004,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2.1592592592592585,,,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,3.3000000000000007,,,-200,/influxdb_svr/)
(4 rows)

-- select triple_exponential_moving_average(*) (stub function and group by tag only) (explain)
--Testcase 348:
EXPLAIN VERBOSE
SELECT triple_exponential_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (triple_exponential_moving_average_all(2)), tag1
   Sort Key: (triple_exponential_moving_average_all(2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (triple_exponential_moving_average_all(2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT triple_exponential_moving_average(*, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.triple_exponential_moving_average_all(2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select triple_exponential_moving_average(*) (stub function and group by tag only) (result)
--Testcase 349:
SELECT triple_exponential_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                 triple_exponential_moving_average_all                                 
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1962962962962963,100,-0.1962962962962963,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.30000000000000004,100,-0.30000000000000004,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2.1592592592592585,200,-2.1592592592592585,-200,/influxdb_svr/)
(3 rows)

-- select triple_exponential_moving_average(regex) (stub function and group by tag only) (explain)
--Testcase 350:
EXPLAIN VERBOSE
SELECT triple_exponential_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (triple_exponential_moving_average('/value[1,4]/'::text, 2)), tag1
   Sort Key: (triple_exponential_moving_average('/value[1,4]/'::text, 2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (triple_exponential_moving_average('/value[1,4]/'::text, 2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT triple_exponential_moving_average(/value[1,4]/, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.triple_exponential_moving_average('/value[1,4]/'::text, 2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select triple_exponential_moving_average(regex) (stub function and group by tag only) (result)
--Testcase 351:
SELECT triple_exponential_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                       triple_exponential_moving_average                        
--------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1962962962962963,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.30000000000000004,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2.1592592592592585,,,-200,/influxdb_svr/)
(3 rows)

--Testcase 352:
EXPLAIN VERBOSE
SELECT triple_exponential_derivative(value1, 2),triple_exponential_derivative(value2, 2),triple_exponential_derivative(value3, 2),triple_exponential_derivative(value4, 2) FROM s3 ORDER BY 1;
                                                                                                                      QUERY PLAN                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (triple_exponential_derivative(value1, 2)), (triple_exponential_derivative(value2, 2)), (triple_exponential_derivative(value3, 2)), (triple_exponential_derivative(value4, 2))
   Sort Key: (triple_exponential_derivative(s3.value1, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (triple_exponential_derivative(value1, 2)), (triple_exponential_derivative(value2, 2)), (triple_exponential_derivative(value3, 2)), (triple_exponential_derivative(value4, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT triple_exponential_derivative("value1", 2), triple_exponential_derivative("value2", 2), triple_exponential_derivative("value3", 2), triple_exponential_derivative("value4", 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.triple_exponential_derivative(value1, 2), public.triple_exponential_derivative(value2, 2), public.triple_exponential_derivative(value3, 2), public.triple_exponential_derivative(value4, 2) FROM public.s31influx
(11 rows)

--Testcase 353:
SELECT triple_exponential_derivative(value1, 2),triple_exponential_derivative(value2, 2),triple_exponential_derivative(value3, 2),triple_exponential_derivative(value4, 2) FROM s3 ORDER BY 1;
 triple_exponential_derivative | triple_exponential_derivative | triple_exponential_derivative | triple_exponential_derivative 
-------------------------------+-------------------------------+-------------------------------+-------------------------------
             45.71428571428569 |                             0 |             45.71428571428569 |                             0
             45.71428571428569 |                             0 |             45.71428571428569 |                             0
(2 rows)

--Testcase 354:
EXPLAIN VERBOSE
SELECT triple_exponential_derivative(value1, 2, 2),triple_exponential_derivative(value2, 2, 2),triple_exponential_derivative(value3, 2, 2),triple_exponential_derivative(value4, 2, 2) FROM s3 ORDER BY 1;
                                                                                                                            QUERY PLAN                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (triple_exponential_derivative(value1, 2, 2)), (triple_exponential_derivative(value2, 2, 2)), (triple_exponential_derivative(value3, 2, 2)), (triple_exponential_derivative(value4, 2, 2))
   Sort Key: (triple_exponential_derivative(s3.value1, 2, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (triple_exponential_derivative(value1, 2, 2)), (triple_exponential_derivative(value2, 2, 2)), (triple_exponential_derivative(value3, 2, 2)), (triple_exponential_derivative(value4, 2, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT triple_exponential_derivative("value1", 2, 2), triple_exponential_derivative("value2", 2, 2), triple_exponential_derivative("value3", 2, 2), triple_exponential_derivative("value4", 2, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.triple_exponential_derivative(value1, 2, 2), public.triple_exponential_derivative(value2, 2, 2), public.triple_exponential_derivative(value3, 2, 2), public.triple_exponential_derivative(value4, 2, 2) FROM public.s31influx
(11 rows)

--Testcase 355:
SELECT triple_exponential_derivative(value1, 2, 2),triple_exponential_derivative(value2, 2, 2),triple_exponential_derivative(value3, 2, 2),triple_exponential_derivative(value4, 2, 2) FROM s3 ORDER BY 1;
 triple_exponential_derivative | triple_exponential_derivative | triple_exponential_derivative | triple_exponential_derivative 
-------------------------------+-------------------------------+-------------------------------+-------------------------------
             45.71428571428569 |                             0 |             45.71428571428569 |                             0
             45.71428571428569 |                             0 |             45.71428571428569 |                             0
(2 rows)

-- select triple_exponential_derivative(*) (stub function, explain)
--Testcase 356:
EXPLAIN VERBOSE
SELECT triple_exponential_derivative_all(2) from s3 ORDER BY 1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (triple_exponential_derivative_all(2))
   Sort Key: (triple_exponential_derivative_all(2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (triple_exponential_derivative_all(2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT triple_exponential_derivative(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.triple_exponential_derivative_all(2) FROM public.s31influx
(11 rows)

-- select triple_exponential_derivative(*) (stub function, result)
--Testcase 357:
SELECT * FROM (
SELECT triple_exponential_derivative_all(2) from s3
) as t ORDER BY 1;
                              triple_exponential_derivative_all                              
---------------------------------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,45.71428571428569,0,45.71428571428569,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:05Z,,45.71428571428569,0,45.71428571428569,0,/influxdb_svr/)
(2 rows)

-- select triple_exponential_derivative(regex) (stub function, explain)
--Testcase 358:
EXPLAIN VERBOSE
SELECT triple_exponential_derivative('/value[1,4]/',2) from s3 ORDER BY 1;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (triple_exponential_derivative('/value[1,4]/'::text, 2))
   Sort Key: (triple_exponential_derivative('/value[1,4]/'::text, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (triple_exponential_derivative('/value[1,4]/'::text, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT triple_exponential_derivative(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.triple_exponential_derivative('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select triple_exponential_derivative(regex) (stub function, result)
--Testcase 359:
SELECT triple_exponential_derivative('/value[1,4]/',2) from s3 ORDER BY 1;
                       triple_exponential_derivative                       
---------------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,45.71428571428569,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:05Z,,45.71428571428569,,,0,/influxdb_svr/)
(2 rows)

-- select triple_exponential_derivative(*) (stub function and group by tag only) (explain)
--Testcase 360:
EXPLAIN VERBOSE
SELECT triple_exponential_derivative_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (triple_exponential_derivative_all(2)), tag1
   Sort Key: (triple_exponential_derivative_all(2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (triple_exponential_derivative_all(2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT triple_exponential_derivative(*, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.triple_exponential_derivative_all(2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select triple_exponential_derivative(*) (stub function and group by tag only) (result)
--Testcase 361:
SELECT triple_exponential_derivative_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                              triple_exponential_derivative_all                              
---------------------------------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,45.71428571428569,0,45.71428571428569,0,/pgspider_svr/influxdb_svr/)
(1 row)

-- select triple_exponential_derivative(regex) (stub function and group by tag only) (explain)
--Testcase 362:
EXPLAIN VERBOSE
SELECT triple_exponential_derivative('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                        QUERY PLAN                                                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (triple_exponential_derivative('/value[1,4]/'::text, 2)), tag1
   Sort Key: (triple_exponential_derivative('/value[1,4]/'::text, 2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (triple_exponential_derivative('/value[1,4]/'::text, 2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT triple_exponential_derivative(/value[1,4]/, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.triple_exponential_derivative('/value[1,4]/'::text, 2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select triple_exponential_derivative(regex) (stub function and group by tag only) (result)
--Testcase 363:
SELECT triple_exponential_derivative('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                       triple_exponential_derivative                       
---------------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,45.71428571428569,,,0,/pgspider_svr/influxdb_svr/)
(1 row)

--Testcase 364:
EXPLAIN VERBOSE
SELECT relative_strength_index(value1, 2),relative_strength_index(value2, 2),relative_strength_index(value3, 2),relative_strength_index(value4, 2) FROM s3 ORDER BY 1;
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (relative_strength_index(value1, 2)), (relative_strength_index(value2, 2)), (relative_strength_index(value3, 2)), (relative_strength_index(value4, 2))
   Sort Key: (relative_strength_index(s3.value1, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (relative_strength_index(value1, 2)), (relative_strength_index(value2, 2)), (relative_strength_index(value3, 2)), (relative_strength_index(value4, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT relative_strength_index("value1", 2), relative_strength_index("value2", 2), relative_strength_index("value3", 2), relative_strength_index("value4", 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.relative_strength_index(value1, 2), public.relative_strength_index(value2, 2), public.relative_strength_index(value3, 2), public.relative_strength_index(value4, 2) FROM public.s31influx
(11 rows)

--Testcase 365:
SELECT relative_strength_index(value1, 2),relative_strength_index(value2, 2),relative_strength_index(value3, 2),relative_strength_index(value4, 2) FROM s3 ORDER BY 1;
 relative_strength_index | relative_strength_index | relative_strength_index | relative_strength_index 
-------------------------+-------------------------+-------------------------+-------------------------
                     100 |                     100 |                       0 |                       0
                     100 |                     100 |                       0 |                       0
(2 rows)

--Testcase 366:
EXPLAIN VERBOSE
SELECT relative_strength_index(value1, 2, 2),relative_strength_index(value2, 2, 2),relative_strength_index(value3, 2, 2),relative_strength_index(value4, 2, 2) FROM s3 ORDER BY 1;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (relative_strength_index(value1, 2, 2)), (relative_strength_index(value2, 2, 2)), (relative_strength_index(value3, 2, 2)), (relative_strength_index(value4, 2, 2))
   Sort Key: (relative_strength_index(s3.value1, 2, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (relative_strength_index(value1, 2, 2)), (relative_strength_index(value2, 2, 2)), (relative_strength_index(value3, 2, 2)), (relative_strength_index(value4, 2, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT relative_strength_index("value1", 2, 2), relative_strength_index("value2", 2, 2), relative_strength_index("value3", 2, 2), relative_strength_index("value4", 2, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.relative_strength_index(value1, 2, 2), public.relative_strength_index(value2, 2, 2), public.relative_strength_index(value3, 2, 2), public.relative_strength_index(value4, 2, 2) FROM public.s31influx
(11 rows)

--Testcase 367:
SELECT relative_strength_index(value1, 2, 2),relative_strength_index(value2, 2, 2),relative_strength_index(value3, 2, 2),relative_strength_index(value4, 2, 2) FROM s3 ORDER BY 1;
 relative_strength_index | relative_strength_index | relative_strength_index | relative_strength_index 
-------------------------+-------------------------+-------------------------+-------------------------
                     100 |                     100 |                       0 |                       0
                     100 |                     100 |                       0 |                       0
(2 rows)

-- select relative_strength_index(*) (stub function, explain)
--Testcase 368:
EXPLAIN VERBOSE
SELECT relative_strength_index_all(2) from s3 ORDER BY 1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (relative_strength_index_all(2))
   Sort Key: (relative_strength_index_all(2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (relative_strength_index_all(2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT relative_strength_index(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.relative_strength_index_all(2) FROM public.s31influx
(11 rows)

-- select relative_strength_index(*) (stub function, result)
--Testcase 369:
SELECT * FROM (
SELECT relative_strength_index_all(2) from s3
) as t ORDER BY 1;
                   relative_strength_index_all                   
-----------------------------------------------------------------
 (1970-01-01T00:00:02Z,,100,100,0,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:05Z,,100,100,0,0,/influxdb_svr/)
(2 rows)

-- select relative_strength_index(regex) (stub function, explain)
--Testcase 370:
EXPLAIN VERBOSE
SELECT relative_strength_index('/value[1,4]/',2) from s3 ORDER BY 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (relative_strength_index('/value[1,4]/'::text, 2))
   Sort Key: (relative_strength_index('/value[1,4]/'::text, 2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (relative_strength_index('/value[1,4]/'::text, 2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT relative_strength_index(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.relative_strength_index('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select relative_strength_index(regex) (stub function, result)
--Testcase 371:
SELECT relative_strength_index('/value[1,4]/',2) from s3 ORDER BY 1;
                   relative_strength_index                   
-------------------------------------------------------------
 (1970-01-01T00:00:02Z,,100,,,0,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:05Z,,100,,,0,/influxdb_svr/)
(2 rows)

-- select relative_strength_index(*) (stub function and group by tag only) (explain)
--Testcase 372:
EXPLAIN VERBOSE
SELECT relative_strength_index_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (relative_strength_index_all(2)), tag1
   Sort Key: (relative_strength_index_all(2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (relative_strength_index_all(2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT relative_strength_index(*, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.relative_strength_index_all(2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select relative_strength_index(*) (stub function and group by tag only) (result)
--Testcase 373:
SELECT relative_strength_index_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                   relative_strength_index_all                   
-----------------------------------------------------------------
 (1970-01-01T00:00:02Z,,100,100,0,0,/pgspider_svr/influxdb_svr/)
(1 row)

-- select relative_strength_index(regex) (stub function and group by tag only) (explain)
--Testcase 374:
EXPLAIN VERBOSE
SELECT relative_strength_index('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (relative_strength_index('/value[1,4]/'::text, 2)), tag1
   Sort Key: (relative_strength_index('/value[1,4]/'::text, 2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (relative_strength_index('/value[1,4]/'::text, 2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT relative_strength_index(/value[1,4]/, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.relative_strength_index('/value[1,4]/'::text, 2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select relative_strength_index(regex) (stub function and group by tag only) (result)
--Testcase 375:
SELECT relative_strength_index('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                   relative_strength_index                   
-------------------------------------------------------------
 (1970-01-01T00:00:02Z,,100,,,0,/pgspider_svr/influxdb_svr/)
(1 row)

-- select relative_strength_index(*) (stub function, expose data, explain)
--Testcase 376:
EXPLAIN VERBOSE
SELECT (relative_strength_index_all(2)::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((relative_strength_index_all(2)))::s3)."time"), ((((relative_strength_index_all(2)))::s3).tag1), ((((relative_strength_index_all(2)))::s3).value1), ((((relative_strength_index_all(2)))::s3).value2), ((((relative_strength_index_all(2)))::s3).value3), ((((relative_strength_index_all(2)))::s3).value4), ((((relative_strength_index_all(2)))::s3).__spd_url)
   Sort Key: ((((relative_strength_index_all(2)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((relative_strength_index_all(2)))::s3)."time", (((relative_strength_index_all(2)))::s3).tag1, (((relative_strength_index_all(2)))::s3).value1, (((relative_strength_index_all(2)))::s3).value2, (((relative_strength_index_all(2)))::s3).value3, (((relative_strength_index_all(2)))::s3).value4, (((relative_strength_index_all(2)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT relative_strength_index(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.relative_strength_index_all(2) FROM public.s31influx
(11 rows)

-- select relative_strength_index(*) (stub function, expose data, result)
--Testcase 377:
SELECT * FROM (
SELECT (relative_strength_index_all(2)::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:02+09 |      |    100 |    100 |      0 |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:05+09 |      |    100 |    100 |      0 |      0 | /influxdb_svr/
(2 rows)

-- select relative_strength_index(regex) (stub function, expose data, explain)
--Testcase 378:
EXPLAIN VERBOSE
SELECT (relative_strength_index('/value[1,4]/',2)::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((relative_strength_index('/value[1,4]/'::text, 2)))::s3)."time"), ((((relative_strength_index('/value[1,4]/'::text, 2)))::s3).tag1), ((((relative_strength_index('/value[1,4]/'::text, 2)))::s3).value1), ((((relative_strength_index('/value[1,4]/'::text, 2)))::s3).value2), ((((relative_strength_index('/value[1,4]/'::text, 2)))::s3).value3), ((((relative_strength_index('/value[1,4]/'::text, 2)))::s3).value4), ((((relative_strength_index('/value[1,4]/'::text, 2)))::s3).__spd_url)
   Sort Key: ((((relative_strength_index('/value[1,4]/'::text, 2)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((relative_strength_index('/value[1,4]/'::text, 2)))::s3)."time", (((relative_strength_index('/value[1,4]/'::text, 2)))::s3).tag1, (((relative_strength_index('/value[1,4]/'::text, 2)))::s3).value1, (((relative_strength_index('/value[1,4]/'::text, 2)))::s3).value2, (((relative_strength_index('/value[1,4]/'::text, 2)))::s3).value3, (((relative_strength_index('/value[1,4]/'::text, 2)))::s3).value4, (((relative_strength_index('/value[1,4]/'::text, 2)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT relative_strength_index(/value[1,4]/, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.relative_strength_index('/value[1,4]/'::text, 2) FROM public.s31influx
(11 rows)

-- select relative_strength_index(regex) (stub function, expose data, result)
--Testcase 379:
SELECT * FROM (
SELECT (relative_strength_index('/value[1,4]/',2)::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:02+09 |      |    100 |        |        |      0 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:05+09 |      |    100 |        |        |      0 | /influxdb_svr/
(2 rows)

-- select integral (stub agg function, explain)
--Testcase 380:
EXPLAIN VERBOSE
SELECT integral(value1),integral(value2),integral(value3),integral(value4) FROM s3 ORDER BY 1;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=32)
   Output: (integral(value1)), (integral(value2)), (integral(value3)), (integral(value4))
   Sort Key: (integral(s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=32)
         Output: (integral(value1)), (integral(value2)), (integral(value3)), (integral(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT integral("value1"), integral("value2"), integral("value3"), integral("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.integral(value1), public.integral(value2), public.integral(value3), public.integral(value4) FROM public.s31influx
(14 rows)

-- select integral (stub agg function, result)
--Testcase 381:
SELECT integral(value1),integral(value2),integral(value3),integral(value4) FROM s3 ORDER BY 1;
     integral      | integral |      integral      | integral 
-------------------+----------+--------------------+----------
 4.800000000000001 |      600 | -4.800000000000001 |     -600
(1 row)

--Testcase 382:
EXPLAIN VERBOSE
SELECT integral(value1, interval '1s'),integral(value2, interval '1s'),integral(value3, interval '1s'),integral(value4, interval '1s') FROM s3 ORDER BY 1;
                                                                                                                  QUERY PLAN                                                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=32)
   Output: (integral(value1, '@ 1 sec'::interval)), (integral(value2, '@ 1 sec'::interval)), (integral(value3, '@ 1 sec'::interval)), (integral(value4, '@ 1 sec'::interval))
   Sort Key: (integral(s3.value1, '@ 1 sec'::interval))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=32)
         Output: (integral(value1, '@ 1 sec'::interval)), (integral(value2, '@ 1 sec'::interval)), (integral(value3, '@ 1 sec'::interval)), (integral(value4, '@ 1 sec'::interval))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT integral("value1", 0d0h0m1s0u), integral("value2", 0d0h0m1s0u), integral("value3", 0d0h0m1s0u), integral("value4", 0d0h0m1s0u) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.integral(value1, '00:00:01'::interval), public.integral(value2, '00:00:01'::interval), public.integral(value3, '00:00:01'::interval), public.integral(value4, '00:00:01'::interval) FROM public.s31influx
(14 rows)

-- select integral (stub agg function, result)
--Testcase 383:
SELECT integral(value1, interval '1s'),integral(value2, interval '1s'),integral(value3, interval '1s'),integral(value4, interval '1s') FROM s3 ORDER BY 1;
     integral      | integral |      integral      | integral 
-------------------+----------+--------------------+----------
 4.800000000000001 |      600 | -4.800000000000001 |     -600
(1 row)

-- select integral (stub agg function, raise exception if not expected type)
--SELECT integral(value1::numeric),integral(value2::numeric),integral(value3::numeric),integral(value4::numeric) FROM s3 ORDER BY 1;
-- select integral (stub agg function and group by influx_time() and tag) (explain)
--Testcase 384:
EXPLAIN VERBOSE
SELECT integral("value1"),influx_time(time, interval '1s'),tag1 FROM s3 GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort  (cost=7132.16..7132.66 rows=200 width=48)
   Output: (integral(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (integral(s3.value1))
   ->  HashAggregate  (cost=7072.52..7124.52 rows=200 width=48)
         Output: integral(value1), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: influx_time(s3."time", '@ 1 sec'::interval), s3.tag1
         ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=48)
               Output: influx_time("time", '@ 1 sec'::interval), tag1, value1
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT "tag1", "value1" FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT "time", tag1, value1 FROM public.s31influx
(14 rows)

-- select integral (stub agg function and group by influx_time() and tag) (result)
--Testcase 385:
SELECT integral("value1"),influx_time(time, interval '1s'),tag1 FROM s3 GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select integral (stub agg function and group by influx_time() and tag) (explain)
--Testcase 386:
EXPLAIN VERBOSE
SELECT integral("value1", interval '1s'),influx_time(time, interval '1s'),tag1 FROM s3 GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=7132.16..7132.66 rows=200 width=48)
   Output: (integral(value1, '@ 1 sec'::interval)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (integral(s3.value1, '@ 1 sec'::interval))
   ->  HashAggregate  (cost=7072.52..7124.52 rows=200 width=48)
         Output: integral(value1, '@ 1 sec'::interval), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: influx_time(s3."time", '@ 1 sec'::interval), s3.tag1
         ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=48)
               Output: influx_time("time", '@ 1 sec'::interval), tag1, value1
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT "tag1", "value1" FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT "time", tag1, value1 FROM public.s31influx
(14 rows)

-- select integral (stub agg function and group by influx_time() and tag) (result)
--Testcase 387:
SELECT integral("value1", interval '1s'),influx_time(time, interval '1s'),tag1 FROM s3 GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select integral (stub agg function and group by tag only) (result)
--Testcase 388:
SELECT tag1,integral("value1") FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
 tag1 |      integral      
------+--------------------
 a    |                0.4
 b    | 1.6500000000000001
(2 rows)

-- select integral (stub agg function and other aggs) (result)
--Testcase 389:
SELECT sum("value1"),integral("value1"),count("value1") FROM s3 ORDER BY 1;
        sum        |     integral      | count 
-------------------+-------------------+-------
 7.199999999999999 | 4.800000000000001 |     6
(1 row)

-- select integral (stub agg function and group by tag only) (result)
--Testcase 390:
SELECT tag1,integral("value1", interval '1s') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
 tag1 |      integral      
------+--------------------
 a    |                0.4
 b    | 1.6500000000000001
(2 rows)

-- select integral (stub agg function and other aggs) (result)
--Testcase 391:
SELECT sum("value1"),integral("value1", interval '1s'),count("value1") FROM s3 ORDER BY 1;
        sum        |     integral      | count 
-------------------+-------------------+-------
 7.199999999999999 | 4.800000000000001 |     6
(1 row)

-- select integral over join query (explain)
--Testcase 392:
EXPLAIN VERBOSE
SELECT integral(t1.value1), integral(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=932.56..932.56 rows=1 width=16)
   Output: (integral(t1.value1)), (integral(t2.value1))
   Sort Key: (integral(t1.value1))
   ->  Aggregate  (cost=932.54..932.55 rows=1 width=16)
         Output: integral(t1.value1), integral(t2.value1)
         ->  Nested Loop  (cost=220.00..354.54 rows=1156 width=16)
               Output: t1.value1, t2.value1
               ->  Foreign Scan on public.s3 t1  (cost=110.00..170.00 rows=34 width=8)
                     Output: t1.value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
               ->  Materialize  (cost=110.00..170.17 rows=34 width=8)
                     Output: t2.value1
                     ->  Foreign Scan on public.s3 t2  (cost=110.00..170.00 rows=34 width=8)
                           Output: t2.value1
                           Node: influxdb_svr / Status: Alive
                             Sort push-down: no
                             InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                           Node: pgspider_svr / Status: Alive
                             Sort push-down: no
                             Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
(25 rows)

-- select integral over join query (result, stub call error)
--Testcase 393:
SELECT integral(t1.value1), integral(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
ERROR:  stub integral_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function integral_sfunc(double precision,double precision) line 3 at RAISE
-- select integral over join query (explain)
--Testcase 394:
EXPLAIN VERBOSE
SELECT integral(t1.value1, interval '1s'), integral(t2.value1, interval '1s') FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=932.56..932.56 rows=1 width=16)
   Output: (integral(t1.value1, '@ 1 sec'::interval)), (integral(t2.value1, '@ 1 sec'::interval))
   Sort Key: (integral(t1.value1, '@ 1 sec'::interval))
   ->  Aggregate  (cost=932.54..932.55 rows=1 width=16)
         Output: integral(t1.value1, '@ 1 sec'::interval), integral(t2.value1, '@ 1 sec'::interval)
         ->  Nested Loop  (cost=220.00..354.54 rows=1156 width=16)
               Output: t1.value1, t2.value1
               ->  Foreign Scan on public.s3 t1  (cost=110.00..170.00 rows=34 width=8)
                     Output: t1.value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
               ->  Materialize  (cost=110.00..170.17 rows=34 width=8)
                     Output: t2.value1
                     ->  Foreign Scan on public.s3 t2  (cost=110.00..170.00 rows=34 width=8)
                           Output: t2.value1
                           Node: influxdb_svr / Status: Alive
                             Sort push-down: no
                             InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                           Node: pgspider_svr / Status: Alive
                             Sort push-down: no
                             Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
(25 rows)

-- select integral over join query (result, stub call error)
--Testcase 395:
SELECT integral(t1.value1, interval '1s'), integral(t2.value1, interval '1s') FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
ERROR:  stub integral_sfunc(double precision, float8, interval) is called
CONTEXT:  PL/pgSQL function integral_sfunc(double precision,double precision,interval) line 3 at RAISE
-- select integral with having (explain)
--Testcase 396:
EXPLAIN VERBOSE
SELECT integral(value1) FROM s3 HAVING integral(value1) > 100 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=8)
   Output: (integral(value1))
   Sort Key: (integral(s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=8)
         Output: (integral(value1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT integral("value1") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.integral(value1) FROM public.s31influx
(14 rows)

-- select integral with having (explain, not pushdown, stub call error)
--Testcase 397:
SELECT integral(value1) FROM s3 HAVING integral(value1) > 100 ORDER BY 1;
 integral 
----------
(0 rows)

-- select integral with having (explain)
--Testcase 398:
EXPLAIN VERBOSE
SELECT integral(value1, interval '1s') FROM s3 HAVING integral(value1, interval '1s') > 100 ORDER BY 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=8)
   Output: (integral(value1, '@ 1 sec'::interval))
   Sort Key: (integral(s3.value1, '@ 1 sec'::interval))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=8)
         Output: (integral(value1, '@ 1 sec'::interval))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT integral("value1", 0d0h0m1s0u) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.integral(value1, '00:00:01'::interval) FROM public.s31influx
(14 rows)

-- select integral with having (explain, not pushdown, stub call error)
--Testcase 399:
SELECT integral(value1, interval '1s') FROM s3 HAVING integral(value1, interval '1s') > 100 ORDER BY 1;
 integral 
----------
(0 rows)

-- select integral(*) (stub agg function, explain)
--Testcase 400:
EXPLAIN VERBOSE
SELECT integral_all(*) from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (integral_all(*))
   Sort Key: (integral_all(*))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: integral_all(*)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select integral(*) (stub agg function, result)
--Testcase 401:
SELECT integral_all(*) from s3 ORDER BY 1;
ERROR:  stub integral_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function integral_all_sfunc(text) line 3 at RAISE
-- select integral(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 402:
EXPLAIN VERBOSE
SELECT integral_all(*) FROM s3 GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Sort  (cost=7132.16..7132.66 rows=200 width=72)
   Output: (integral_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (integral_all(*))
   ->  HashAggregate  (cost=7072.52..7124.52 rows=200 width=72)
         Output: integral_all(*), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: influx_time(s3."time", '@ 1 sec'::interval), s3.tag1
         ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=40)
               Output: influx_time("time", '@ 1 sec'::interval), tag1
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT "tag1", "value1" FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT "time", tag1 FROM public.s31influx
(14 rows)

-- select integral(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 403:
SELECT integral_all(*) FROM s3 GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select integral(*) (stub agg function and group by tag only) (explain)
--Testcase 404:
EXPLAIN VERBOSE
SELECT integral_all(*) FROM s3 WHERE value1 > 0.3 GROUP BY tag1 ORDER BY 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort  (cost=1897.76..1898.26 rows=200 width=64)
   Output: (integral_all(*)), tag1
   Sort Key: (integral_all(*))
   ->  HashAggregate  (cost=1888.11..1890.11 rows=200 width=64)
         Output: integral_all(*), tag1
         Group Key: s3.tag1
         ->  Foreign Scan on public.s3  (cost=110.00..1313.42 rows=2276 width=32)
               Output: tag1
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE (("value1" > 0.3))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT tag1 FROM public.s31influx WHERE ((value1 > 0.3::double precision))
(14 rows)

-- select integral(*) (stub agg function and group by tag only) (result)
--Testcase 405:
SELECT integral_all(*) FROM s3 WHERE value1 > 0.3 GROUP BY tag1 ORDER BY 1;
ERROR:  stub integral_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function integral_all_sfunc(text) line 3 at RAISE
-- select integral(*) (stub agg function, expose data, explain)
--Testcase 406:
EXPLAIN VERBOSE
SELECT (integral_all(*)::s3).* from s3 ORDER BY 1;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((integral_all(*))::s3)."time"), (((integral_all(*))::s3).tag1), (((integral_all(*))::s3).value1), (((integral_all(*))::s3).value2), (((integral_all(*))::s3).value3), (((integral_all(*))::s3).value4), (((integral_all(*))::s3).__spd_url)
   Sort Key: (((integral_all(*))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((integral_all(*))::s3)."time", ((integral_all(*))::s3).tag1, ((integral_all(*))::s3).value1, ((integral_all(*))::s3).value2, ((integral_all(*))::s3).value3, ((integral_all(*))::s3).value4, ((integral_all(*))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select integral(*) (stub agg function, expose data, result)
--Testcase 407:
SELECT (integral_all(*)::s3).* from s3 ORDER BY 1;
ERROR:  stub integral_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function integral_all_sfunc(text) line 3 at RAISE
-- select integral(regex) (stub agg function, explain)
--Testcase 408:
EXPLAIN VERBOSE
SELECT integral('/value[1,4]/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (integral('/value[1,4]/'::text))
   Sort Key: (integral('/value[1,4]/'::text))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: integral('/value[1,4]/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select integral(regex) (stub agg function, result)
--Testcase 409:
SELECT integral('/value[1,4]/') from s3 ORDER BY 1;
ERROR:  stub integral_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function integral_sfunc(text,text) line 3 at RAISE
-- select integral(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 410:
EXPLAIN VERBOSE
SELECT integral('/^v.*/') FROM s3 GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort  (cost=7132.16..7132.66 rows=200 width=72)
   Output: (integral('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (integral('/^v.*/'::text))
   ->  HashAggregate  (cost=7072.52..7124.52 rows=200 width=72)
         Output: integral('/^v.*/'::text), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: influx_time(s3."time", '@ 1 sec'::interval), s3.tag1
         ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=40)
               Output: influx_time("time", '@ 1 sec'::interval), tag1
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT "tag1", "value1" FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT "time", tag1 FROM public.s31influx
(14 rows)

-- select integral(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 411:
SELECT integral('/^v.*/') FROM s3 GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select integral(regex) (stub agg function and group by tag only) (explain)
--Testcase 412:
EXPLAIN VERBOSE
SELECT integral('/value[1,4]/') FROM s3 WHERE value1 > 0.3 GROUP BY tag1 ORDER BY 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort  (cost=1897.76..1898.26 rows=200 width=64)
   Output: (integral('/value[1,4]/'::text)), tag1
   Sort Key: (integral('/value[1,4]/'::text))
   ->  HashAggregate  (cost=1888.11..1890.11 rows=200 width=64)
         Output: integral('/value[1,4]/'::text), tag1
         Group Key: s3.tag1
         ->  Foreign Scan on public.s3  (cost=110.00..1313.42 rows=2276 width=32)
               Output: tag1
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE (("value1" > 0.3))
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT tag1 FROM public.s31influx WHERE ((value1 > 0.3::double precision))
(14 rows)

-- select integral(regex) (stub agg function and group by tag only) (result)
--Testcase 413:
SELECT integral('/value[1,4]/') FROM s3 WHERE value1 > 0.3 GROUP BY tag1 ORDER BY 1;
ERROR:  stub integral_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function integral_sfunc(text,text) line 3 at RAISE
-- select integral(regex) (stub agg function, expose data, explain)
--Testcase 414:
EXPLAIN VERBOSE
SELECT (integral('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((integral('/value[1,4]/'::text))::s3)."time"), (((integral('/value[1,4]/'::text))::s3).tag1), (((integral('/value[1,4]/'::text))::s3).value1), (((integral('/value[1,4]/'::text))::s3).value2), (((integral('/value[1,4]/'::text))::s3).value3), (((integral('/value[1,4]/'::text))::s3).value4), (((integral('/value[1,4]/'::text))::s3).__spd_url)
   Sort Key: (((integral('/value[1,4]/'::text))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((integral('/value[1,4]/'::text))::s3)."time", ((integral('/value[1,4]/'::text))::s3).tag1, ((integral('/value[1,4]/'::text))::s3).value1, ((integral('/value[1,4]/'::text))::s3).value2, ((integral('/value[1,4]/'::text))::s3).value3, ((integral('/value[1,4]/'::text))::s3).value4, ((integral('/value[1,4]/'::text))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select integral(regex) (stub agg function, expose data, result)
--Testcase 415:
SELECT (integral('/value[1,4]/')::s3).* from s3 ORDER BY 1;
ERROR:  stub integral_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function integral_sfunc(text,text) line 3 at RAISE
-- select mean (stub agg function, explain)
--Testcase 416:
EXPLAIN VERBOSE
SELECT mean(value1),mean(value2),mean(value3),mean(value4) FROM s3 ORDER BY 1;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=32)
   Output: (mean(value1)), (mean(value2)), (mean(value3)), (mean(value4))
   Sort Key: (mean(s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=32)
         Output: (mean(value1)), (mean(value2)), (mean(value3)), (mean(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT mean("value1"), mean("value2"), mean("value3"), mean("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.mean(value1), public.mean(value2), public.mean(value3), public.mean(value4) FROM public.s31influx
(14 rows)

-- select mean (stub agg function, result)
--Testcase 417:
SELECT mean(value1),mean(value2),mean(value3),mean(value4) FROM s3 ORDER BY 1;
 mean | mean | mean | mean 
------+------+------+------
  2.4 |  300 | -2.4 | -300
(1 row)

-- select mean (stub agg function, raise exception if not expected type)
--SELECT mean(value1::numeric),mean(value2::numeric),mean(value3::numeric),mean(value4::numeric) FROM s3 ORDER BY 1;
-- select mean (stub agg function and group by influx_time() and tag) (explain)
--Testcase 418:
EXPLAIN VERBOSE
SELECT mean("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=48)
   Output: (mean(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (mean(s3.value1))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=48)
         Output: mean(value1), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=48)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1, value1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=48)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1, value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1, value1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select mean (stub agg function and group by influx_time() and tag) (result)
--Testcase 419:
SELECT mean("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select mean (stub agg function and group by tag only) (result)
--Testcase 420:
SELECT tag1,mean("value1") FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
 tag1 |        mean         
------+---------------------
 a    | 0.20000000000000004
 b    |  1.6500000000000001
(2 rows)

-- select mean (stub agg function and other aggs) (result)
--Testcase 421:
SELECT sum("value1"),mean("value1"),count("value1") FROM s3 ORDER BY 1;
        sum        | mean | count 
-------------------+------+-------
 7.199999999999999 |  2.4 |     6
(1 row)

-- select mean over join query (explain)
--Testcase 422:
EXPLAIN VERBOSE
SELECT mean(t1.value1), mean(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=932.56..932.56 rows=1 width=16)
   Output: (mean(t1.value1)), (mean(t2.value1))
   Sort Key: (mean(t1.value1))
   ->  Aggregate  (cost=932.54..932.55 rows=1 width=16)
         Output: mean(t1.value1), mean(t2.value1)
         ->  Nested Loop  (cost=220.00..354.54 rows=1156 width=16)
               Output: t1.value1, t2.value1
               ->  Foreign Scan on public.s3 t1  (cost=110.00..170.00 rows=34 width=8)
                     Output: t1.value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
               ->  Materialize  (cost=110.00..170.17 rows=34 width=8)
                     Output: t2.value1
                     ->  Foreign Scan on public.s3 t2  (cost=110.00..170.00 rows=34 width=8)
                           Output: t2.value1
                           Node: influxdb_svr / Status: Alive
                             Sort push-down: no
                             InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                           Node: pgspider_svr / Status: Alive
                             Sort push-down: no
                             Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
(25 rows)

-- select mean over join query (result, stub call error)
--Testcase 423:
SELECT mean(t1.value1), mean(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
ERROR:  stub mean_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function mean_sfunc(double precision,double precision) line 3 at RAISE
-- select mean with having (explain)
--Testcase 424:
EXPLAIN VERBOSE
SELECT mean(value1) FROM s3 HAVING mean(value1) > 100 ORDER BY 1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=8)
   Output: (mean(value1))
   Sort Key: (mean(s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=8)
         Output: (mean(value1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT mean("value1") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.mean(value1) FROM public.s31influx
(14 rows)

-- select mean with having (explain, not pushdown, stub call error)
--Testcase 425:
SELECT mean(value1) FROM s3 HAVING mean(value1) > 100 ORDER BY 1;
 mean 
------
(0 rows)

-- select mean(*) (stub agg function, explain)
--Testcase 426:
EXPLAIN VERBOSE
SELECT mean_all(*) from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (mean_all(*))
   Sort Key: (mean_all(*))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: mean_all(*)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select mean(*) (stub agg function, result)
--Testcase 427:
SELECT mean_all(*) from s3 ORDER BY 1;
ERROR:  stub mean_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function mean_all_sfunc(text) line 3 at RAISE
-- select mean(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 428:
EXPLAIN VERBOSE
SELECT mean_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (mean_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (mean_all(*))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: mean_all(*), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select mean(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 429:
SELECT mean_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select mean(*) (stub agg function and group by tag only) (explain)
--Testcase 430:
EXPLAIN VERBOSE
SELECT mean_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (mean_all(*)), tag1
   Sort Key: (mean_all(*))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: mean_all(*), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select mean(*) (stub agg function and group by tag only) (result)
--Testcase 431:
SELECT mean_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub mean_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function mean_all_sfunc(text) line 3 at RAISE
-- select mean(*) (stub agg function, expose data, explain)
--Testcase 432:
EXPLAIN VERBOSE
SELECT (mean_all(*)::s3).* from s3 ORDER BY 1;
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((mean_all(*))::s3)."time"), (((mean_all(*))::s3).tag1), (((mean_all(*))::s3).value1), (((mean_all(*))::s3).value2), (((mean_all(*))::s3).value3), (((mean_all(*))::s3).value4), (((mean_all(*))::s3).__spd_url)
   Sort Key: (((mean_all(*))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((mean_all(*))::s3)."time", ((mean_all(*))::s3).tag1, ((mean_all(*))::s3).value1, ((mean_all(*))::s3).value2, ((mean_all(*))::s3).value3, ((mean_all(*))::s3).value4, ((mean_all(*))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select mean(*) (stub agg function, expose data, result)
--Testcase 433:
SELECT (mean_all(*)::s3).* from s3 ORDER BY 1;
ERROR:  stub mean_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function mean_all_sfunc(text) line 3 at RAISE
-- select mean(regex) (stub agg function, explain)
--Testcase 434:
EXPLAIN VERBOSE
SELECT mean('/value[1,4]/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (mean('/value[1,4]/'::text))
   Sort Key: (mean('/value[1,4]/'::text))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: mean('/value[1,4]/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select mean(regex) (stub agg function, result)
--Testcase 435:
SELECT mean('/value[1,4]/') from s3 ORDER BY 1;
ERROR:  stub mean_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function mean_sfunc(text,text) line 3 at RAISE
-- select mean(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 436:
EXPLAIN VERBOSE
SELECT mean('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (mean('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (mean('/^v.*/'::text))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: mean('/^v.*/'::text), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select mean(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 437:
SELECT mean('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select mean(regex) (stub agg function and group by tag only) (explain)
--Testcase 438:
EXPLAIN VERBOSE
SELECT mean('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (mean('/value[1,4]/'::text)), tag1
   Sort Key: (mean('/value[1,4]/'::text))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: mean('/value[1,4]/'::text), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select mean(regex) (stub agg function and group by tag only) (result)
--Testcase 439:
SELECT mean('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub mean_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function mean_sfunc(text,text) line 3 at RAISE
-- select mean(regex) (stub agg function, expose data, explain)
--Testcase 440:
EXPLAIN VERBOSE
SELECT (mean('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                              QUERY PLAN                                                                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((mean('/value[1,4]/'::text))::s3)."time"), (((mean('/value[1,4]/'::text))::s3).tag1), (((mean('/value[1,4]/'::text))::s3).value1), (((mean('/value[1,4]/'::text))::s3).value2), (((mean('/value[1,4]/'::text))::s3).value3), (((mean('/value[1,4]/'::text))::s3).value4), (((mean('/value[1,4]/'::text))::s3).__spd_url)
   Sort Key: (((mean('/value[1,4]/'::text))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((mean('/value[1,4]/'::text))::s3)."time", ((mean('/value[1,4]/'::text))::s3).tag1, ((mean('/value[1,4]/'::text))::s3).value1, ((mean('/value[1,4]/'::text))::s3).value2, ((mean('/value[1,4]/'::text))::s3).value3, ((mean('/value[1,4]/'::text))::s3).value4, ((mean('/value[1,4]/'::text))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select mean(regex) (stub agg function, expose data, result)
--Testcase 441:
SELECT (mean('/value[1,4]/')::s3).* from s3 ORDER BY 1;
ERROR:  stub mean_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function mean_sfunc(text,text) line 3 at RAISE
-- select median (stub agg function, explain)
--Testcase 442:
EXPLAIN VERBOSE
SELECT median(value1),median(value2),median(value3),median(value4) FROM s3 ORDER BY 1;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=32)
   Output: (median(value1)), (median(value2)), (median(value3)), (median(value4))
   Sort Key: (median(s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=32)
         Output: (median(value1)), (median(value2)), (median(value3)), (median(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT median("value1"), median("value2"), median("value3"), median("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.median(value1), public.median(value2), public.median(value3), public.median(value4) FROM public.s31influx
(14 rows)

-- select median (stub agg function, result)
--Testcase 443:
SELECT median(value1),median(value2),median(value3),median(value4) FROM s3 ORDER BY 1;
       median       | median |       median        | median 
--------------------+--------+---------------------+--------
 2.4000000000000004 |    300 | -2.4000000000000004 |   -300
(1 row)

-- select median (stub agg function, raise exception if not expected type)
--SELECT median(value1::numeric),median(value2::numeric),median(value3::numeric),median(value4::numeric) FROM s3 ORDER BY 1;
-- select median (stub agg function and group by influx_time() and tag) (explain)
--Testcase 444:
EXPLAIN VERBOSE
SELECT median("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=48)
   Output: (median(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (median(s3.value1))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=48)
         Output: median(value1), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=48)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1, value1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=48)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1, value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1, value1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select median (stub agg function and group by influx_time() and tag) (result)
--Testcase 445:
SELECT median("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select median (stub agg function and group by tag only) (result)
--Testcase 446:
SELECT tag1,median("value1") FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
 tag1 |       median       
------+--------------------
 a    |                0.2
 b    | 1.6500000000000001
(2 rows)

-- select median (stub agg function and other aggs) (result)
--Testcase 447:
SELECT sum("value1"),median("value1"),count("value1") FROM s3 ORDER BY 1;
        sum        |       median       | count 
-------------------+--------------------+-------
 7.199999999999999 | 2.4000000000000004 |     6
(1 row)

-- select median over join query (explain)
--Testcase 448:
EXPLAIN VERBOSE
SELECT median(t1.value1), median(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=932.56..932.56 rows=1 width=16)
   Output: (median(t1.value1)), (median(t2.value1))
   Sort Key: (median(t1.value1))
   ->  Aggregate  (cost=932.54..932.55 rows=1 width=16)
         Output: median(t1.value1), median(t2.value1)
         ->  Nested Loop  (cost=220.00..354.54 rows=1156 width=16)
               Output: t1.value1, t2.value1
               ->  Foreign Scan on public.s3 t1  (cost=110.00..170.00 rows=34 width=8)
                     Output: t1.value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
               ->  Materialize  (cost=110.00..170.17 rows=34 width=8)
                     Output: t2.value1
                     ->  Foreign Scan on public.s3 t2  (cost=110.00..170.00 rows=34 width=8)
                           Output: t2.value1
                           Node: influxdb_svr / Status: Alive
                             Sort push-down: no
                             InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                           Node: pgspider_svr / Status: Alive
                             Sort push-down: no
                             Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
(25 rows)

-- select median over join query (result, stub call error)
--Testcase 449:
SELECT median(t1.value1), median(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
ERROR:  stub median_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function median_sfunc(double precision,double precision) line 3 at RAISE
-- select median with having (explain)
--Testcase 450:
EXPLAIN VERBOSE
SELECT median(value1) FROM s3 HAVING median(value1) > 100 ORDER BY 1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=8)
   Output: (median(value1))
   Sort Key: (median(s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=8)
         Output: (median(value1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT median("value1") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.median(value1) FROM public.s31influx
(14 rows)

-- select median with having (explain, not pushdown, stub call error)
--Testcase 451:
SELECT median(value1) FROM s3 HAVING median(value1) > 100 ORDER BY 1;
 median 
--------
(0 rows)

-- select median(*) (stub agg function, explain)
--Testcase 452:
EXPLAIN VERBOSE
SELECT median_all(*) from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (median_all(*))
   Sort Key: (median_all(*))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: median_all(*)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select median(*) (stub agg function, result)
--Testcase 453:
SELECT median_all(*) from s3 ORDER BY 1;
ERROR:  stub median_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function median_all_sfunc(text) line 3 at RAISE
-- select median(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 454:
EXPLAIN VERBOSE
SELECT median_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (median_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (median_all(*))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: median_all(*), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select median(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 455:
SELECT median_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select median(*) (stub agg function and group by tag only) (explain)
--Testcase 456:
EXPLAIN VERBOSE
SELECT median_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (median_all(*)), tag1
   Sort Key: (median_all(*))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: median_all(*), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select median(*) (stub agg function and group by tag only) (result)
--Testcase 457:
SELECT median_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub median_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function median_all_sfunc(text) line 3 at RAISE
-- select median(*) (stub agg function, expose data, explain)
--Testcase 458:
EXPLAIN VERBOSE
SELECT (median_all(*)::s3).* from s3 ORDER BY 1;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((median_all(*))::s3)."time"), (((median_all(*))::s3).tag1), (((median_all(*))::s3).value1), (((median_all(*))::s3).value2), (((median_all(*))::s3).value3), (((median_all(*))::s3).value4), (((median_all(*))::s3).__spd_url)
   Sort Key: (((median_all(*))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((median_all(*))::s3)."time", ((median_all(*))::s3).tag1, ((median_all(*))::s3).value1, ((median_all(*))::s3).value2, ((median_all(*))::s3).value3, ((median_all(*))::s3).value4, ((median_all(*))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select median(*) (stub agg function, expose data, result)
--Testcase 459:
SELECT (median_all(*)::s3).* from s3 ORDER BY 1;
ERROR:  stub median_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function median_all_sfunc(text) line 3 at RAISE
-- select median(regex) (stub agg function, explain)
--Testcase 460:
EXPLAIN VERBOSE
SELECT median('/^v.*/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (median('/^v.*/'::text))
   Sort Key: (median('/^v.*/'::text))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: median('/^v.*/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select median(regex) (stub agg function, result)
--Testcase 461:
SELECT  median('/^v.*/') from s3 ORDER BY 1;
ERROR:  stub median_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function median_sfunc(text,text) line 3 at RAISE
-- select median(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 462:
EXPLAIN VERBOSE
SELECT median('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (median('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (median('/^v.*/'::text))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: median('/^v.*/'::text), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select median(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 463:
SELECT median('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select median(regex) (stub agg function and group by tag only) (explain)
--Testcase 464:
EXPLAIN VERBOSE
SELECT median('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (median('/value[1,4]/'::text)), tag1
   Sort Key: (median('/value[1,4]/'::text))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: median('/value[1,4]/'::text), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select median(regex) (stub agg function and group by tag only) (result)
--Testcase 465:
SELECT median('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub median_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function median_sfunc(text,text) line 3 at RAISE
-- select median(regex) (stub agg function, expose data, explain)
--Testcase 466:
EXPLAIN VERBOSE
SELECT (median('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                     QUERY PLAN                                                                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((median('/value[1,4]/'::text))::s3)."time"), (((median('/value[1,4]/'::text))::s3).tag1), (((median('/value[1,4]/'::text))::s3).value1), (((median('/value[1,4]/'::text))::s3).value2), (((median('/value[1,4]/'::text))::s3).value3), (((median('/value[1,4]/'::text))::s3).value4), (((median('/value[1,4]/'::text))::s3).__spd_url)
   Sort Key: (((median('/value[1,4]/'::text))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((median('/value[1,4]/'::text))::s3)."time", ((median('/value[1,4]/'::text))::s3).tag1, ((median('/value[1,4]/'::text))::s3).value1, ((median('/value[1,4]/'::text))::s3).value2, ((median('/value[1,4]/'::text))::s3).value3, ((median('/value[1,4]/'::text))::s3).value4, ((median('/value[1,4]/'::text))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select median(regex) (stub agg function, expose data, result)
--Testcase 467:
SELECT (median('/value[1,4]/')::s3).* from s3 ORDER BY 1;
ERROR:  stub median_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function median_sfunc(text,text) line 3 at RAISE
-- select influx_mode (stub agg function, explain)
--Testcase 468:
EXPLAIN VERBOSE
SELECT influx_mode(value1),influx_mode(value2),influx_mode(value3),influx_mode(value4) FROM s3 ORDER BY 1;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=32)
   Output: (influx_mode(value1)), (influx_mode(value2)), (influx_mode(value3)), (influx_mode(value4))
   Sort Key: (influx_mode(s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=32)
         Output: (influx_mode(value1)), (influx_mode(value2)), (influx_mode(value3)), (influx_mode(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT mode("value1"), mode("value2"), mode("value3"), mode("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.influx_mode(value1), public.influx_mode(value2), public.influx_mode(value3), public.influx_mode(value4) FROM public.s31influx
(14 rows)

-- select influx_mode (stub agg function, result)
--Testcase 469:
SELECT influx_mode(value1),influx_mode(value2),influx_mode(value3),influx_mode(value4) FROM s3 ORDER BY 1;
    influx_mode     | influx_mode |     influx_mode     | influx_mode 
--------------------+-------------+---------------------+-------------
 1.2000000000000002 |         300 | -3.5999999999999996 |        -300
(1 row)

-- select influx_mode (stub agg function, raise exception if not expected type)
--SELECT influx_mode(value1::numeric),influx_mode(value2::numeric),influx_mode(value3::numeric),influx_mode(value4::numeric) FROM s3 ORDER BY 1;
-- select influx_mode (stub agg function and group by influx_time() and tag) (explain)
--Testcase 470:
EXPLAIN VERBOSE
SELECT influx_mode("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=48)
   Output: (influx_mode(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (influx_mode(s3.value1))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=48)
         Output: influx_mode(value1), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=48)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1, value1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=48)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1, value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1, value1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_mode (stub agg function and group by influx_time() and tag) (result)
--Testcase 471:
SELECT influx_mode("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select influx_mode (stub agg function and group by tag only) (result)
--Testcase 472:
SELECT tag1,influx_mode("value1") FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
 tag1 | influx_mode 
------+-------------
 a    |         0.1
 b    |         1.1
(2 rows)

-- select influx_mode (stub agg function and other aggs) (result)
--Testcase 473:
SELECT sum("value1"),influx_mode("value1"),count("value1") FROM s3 ORDER BY 1;
        sum        |    influx_mode     | count 
-------------------+--------------------+-------
 7.199999999999999 | 1.2000000000000002 |     6
(1 row)

-- select influx_mode over join query (explain)
--Testcase 474:
EXPLAIN VERBOSE
SELECT influx_mode(t1.value1), influx_mode(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=932.56..932.56 rows=1 width=16)
   Output: (influx_mode(t1.value1)), (influx_mode(t2.value1))
   Sort Key: (influx_mode(t1.value1))
   ->  Aggregate  (cost=932.54..932.55 rows=1 width=16)
         Output: influx_mode(t1.value1), influx_mode(t2.value1)
         ->  Nested Loop  (cost=220.00..354.54 rows=1156 width=16)
               Output: t1.value1, t2.value1
               ->  Foreign Scan on public.s3 t1  (cost=110.00..170.00 rows=34 width=8)
                     Output: t1.value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
               ->  Materialize  (cost=110.00..170.17 rows=34 width=8)
                     Output: t2.value1
                     ->  Foreign Scan on public.s3 t2  (cost=110.00..170.00 rows=34 width=8)
                           Output: t2.value1
                           Node: influxdb_svr / Status: Alive
                             Sort push-down: no
                             InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                           Node: pgspider_svr / Status: Alive
                             Sort push-down: no
                             Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
(25 rows)

-- select influx_mode over join query (result, stub call error)
--Testcase 475:
SELECT influx_mode(t1.value1), influx_mode(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
ERROR:  stub influx_mode_sfunc(anyelement, anyelement) is called
CONTEXT:  PL/pgSQL function influx_mode_sfunc(anyelement,anyelement) line 3 at RAISE
-- select influx_mode with having (explain)
--Testcase 476:
EXPLAIN VERBOSE
SELECT influx_mode(value1) FROM s3 HAVING influx_mode(value1) > 100 ORDER BY 1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=8)
   Output: (influx_mode(value1))
   Sort Key: (influx_mode(s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=8)
         Output: (influx_mode(value1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT mode("value1") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.influx_mode(value1) FROM public.s31influx
(14 rows)

-- select influx_mode with having (explain, not pushdown, stub call error)
--Testcase 477:
SELECT influx_mode(value1) FROM s3 HAVING influx_mode(value1) > 100 ORDER BY 1;
 influx_mode 
-------------
(0 rows)

-- select influx_mode(*) (stub agg function, explain)
--Testcase 478:
EXPLAIN VERBOSE
SELECT influx_mode_all(*) from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (influx_mode_all(*))
   Sort Key: (influx_mode_all(*))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: influx_mode_all(*)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_mode(*) (stub agg function, result)
--Testcase 479:
SELECT influx_mode_all(*) from s3 ORDER BY 1;
ERROR:  stub influx_mode_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_mode_all_sfunc(text) line 3 at RAISE
-- select influx_mode(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 480:
EXPLAIN VERBOSE
SELECT influx_mode_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (influx_mode_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (influx_mode_all(*))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: influx_mode_all(*), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_mode(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 481:
SELECT influx_mode_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select influx_mode(*) (stub agg function and group by tag only) (explain)
--Testcase 482:
EXPLAIN VERBOSE
SELECT influx_mode_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (influx_mode_all(*)), tag1
   Sort Key: (influx_mode_all(*))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: influx_mode_all(*), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_mode(*) (stub agg function and group by tag only) (result)
--Testcase 483:
SELECT influx_mode_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub influx_mode_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_mode_all_sfunc(text) line 3 at RAISE
-- select influx_mode(*) (stub agg function, expose data, explain)
--Testcase 484:
EXPLAIN VERBOSE
SELECT (influx_mode_all(*)::s3).* from s3 ORDER BY 1;
                                                                                                                                  QUERY PLAN                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((influx_mode_all(*))::s3)."time"), (((influx_mode_all(*))::s3).tag1), (((influx_mode_all(*))::s3).value1), (((influx_mode_all(*))::s3).value2), (((influx_mode_all(*))::s3).value3), (((influx_mode_all(*))::s3).value4), (((influx_mode_all(*))::s3).__spd_url)
   Sort Key: (((influx_mode_all(*))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((influx_mode_all(*))::s3)."time", ((influx_mode_all(*))::s3).tag1, ((influx_mode_all(*))::s3).value1, ((influx_mode_all(*))::s3).value2, ((influx_mode_all(*))::s3).value3, ((influx_mode_all(*))::s3).value4, ((influx_mode_all(*))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_mode(*) (stub agg function, expose data, result)
--Testcase 485:
SELECT (influx_mode_all(*)::s3).* from s3 ORDER BY 1;
ERROR:  stub influx_mode_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_mode_all_sfunc(text) line 3 at RAISE
-- select influx_mode(regex) (stub function, explain)
--Testcase 486:
EXPLAIN VERBOSE
SELECT influx_mode('/value[1,4]/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (influx_mode('/value[1,4]/'::text))
   Sort Key: (influx_mode('/value[1,4]/'::text))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: influx_mode('/value[1,4]/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_mode(regex) (stub function, result)
--Testcase 487:
SELECT influx_mode('/value[1,4]/') from s3 ORDER BY 1;
ERROR:  stub influx_mode_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function influx_mode_sfunc(text,text) line 3 at RAISE
-- select influx_mode(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 488:
EXPLAIN VERBOSE
SELECT influx_mode('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (influx_mode('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (influx_mode('/^v.*/'::text))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: influx_mode('/^v.*/'::text), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_mode(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 489:
SELECT influx_mode('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select influx_mode(regex) (stub agg function and group by tag only) (explain)
--Testcase 490:
EXPLAIN VERBOSE
SELECT influx_mode('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (influx_mode('/value[1,4]/'::text)), tag1
   Sort Key: (influx_mode('/value[1,4]/'::text))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: influx_mode('/value[1,4]/'::text), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_mode(regex) (stub agg function and group by tag only) (result)
--Testcase 491:
SELECT influx_mode('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub influx_mode_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function influx_mode_sfunc(text,text) line 3 at RAISE
-- select influx_mode(regex) (stub agg function, expose data, explain)
--Testcase 492:
EXPLAIN VERBOSE
SELECT (influx_mode('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                      QUERY PLAN                                                                                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((influx_mode('/value[1,4]/'::text))::s3)."time"), (((influx_mode('/value[1,4]/'::text))::s3).tag1), (((influx_mode('/value[1,4]/'::text))::s3).value1), (((influx_mode('/value[1,4]/'::text))::s3).value2), (((influx_mode('/value[1,4]/'::text))::s3).value3), (((influx_mode('/value[1,4]/'::text))::s3).value4), (((influx_mode('/value[1,4]/'::text))::s3).__spd_url)
   Sort Key: (((influx_mode('/value[1,4]/'::text))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((influx_mode('/value[1,4]/'::text))::s3)."time", ((influx_mode('/value[1,4]/'::text))::s3).tag1, ((influx_mode('/value[1,4]/'::text))::s3).value1, ((influx_mode('/value[1,4]/'::text))::s3).value2, ((influx_mode('/value[1,4]/'::text))::s3).value3, ((influx_mode('/value[1,4]/'::text))::s3).value4, ((influx_mode('/value[1,4]/'::text))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_mode(regex) (stub agg function, expose data, result)
--Testcase 493:
SELECT (influx_mode('/value[1,4]/')::s3).* from s3 ORDER BY 1;
ERROR:  stub influx_mode_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function influx_mode_sfunc(text,text) line 3 at RAISE
-- select stddev (agg function, explain)
--Testcase 494:
EXPLAIN VERBOSE
SELECT stddev(value1),stddev(value2),stddev(value3),stddev(value4) FROM s3 ORDER BY 1;
                                                                                                                            QUERY PLAN                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=144.17..144.17 rows=1 width=80)
   Output: (stddev(value1)), (stddev(value2)), (stddev(value3)), (stddev(value4))
   Sort Key: (stddev(s3.value1))
   ->  Foreign Scan  (cost=100.00..144.16 rows=1 width=80)
         Output: (stddev(value1)), (stddev(value2)), (stddev(value3)), (stddev(value4))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: no
           InfluxDB query: SELECT "value1", "value2", "value3", "value4" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT count(value1), sum(value1), sum((value1 * value1)), count(value2), sum(value2), sum((value2 * value2)), count(value3), sum(value3), sum((value3 * value3)), count(value4), sum(value4), sum((value4 * value4)) FROM public.s31influx
(14 rows)

-- select stddev (agg function, result)
--Testcase 495:
SELECT stddev(value1),stddev(value2),stddev(value3),stddev(value4) FROM s3 ORDER BY 1;
       stddev       |      stddev      |       stddev       |      stddev      
--------------------+------------------+--------------------+------------------
 1.2992305415129373 | 54.7722557505166 | 1.2992305415129373 | 54.7722557505166
(1 row)

-- select stddev (agg function and group by influx_time() and tag) (explain)
--Testcase 496:
EXPLAIN VERBOSE
SELECT stddev("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=197.44..197.52 rows=32 width=48)
   Output: (stddev(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (stddev(s3.value1))
   ->  GroupAggregate  (cost=187.90..196.64 rows=32 width=48)
         Output: stddev(value1), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=48)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1, value1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=48)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1, value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1, value1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select stddev (agg function and group by influx_time() and tag) (result)
--Testcase 497:
SELECT stddev("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select stddev (agg function and group by tag only) (result)
--Testcase 498:
SELECT tag1,stddev("value1") FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
 tag1 |       stddev        
------+---------------------
 a    | 0.09999999999999994
 b    |   0.777817459305202
(2 rows)

-- select stddev (agg function and other aggs) (result)
--Testcase 499:
SELECT sum("value1"),stddev("value1"),count("value1") FROM s3 ORDER BY 1;
        sum        |       stddev       | count 
-------------------+--------------------+-------
 7.199999999999999 | 1.2992305415129373 |     6
(1 row)

-- select stddev(*) (stub agg function, explain)
--Testcase 500:
EXPLAIN VERBOSE
SELECT stddev_all(*) from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (stddev_all(*))
   Sort Key: (stddev_all(*))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: stddev_all(*)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select stddev(*) (stub agg function, result)
--Testcase 501:
SELECT stddev_all(*) from s3 ORDER BY 1;
ERROR:  stub stddev_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function stddev_all_sfunc(text) line 3 at RAISE
-- select stddev(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 502:
EXPLAIN VERBOSE
SELECT stddev_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (stddev_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (stddev_all(*))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: stddev_all(*), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select stddev(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 503:
SELECT stddev_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select stddev(*) (stub agg function and group by tag only) (explain)
--Testcase 504:
EXPLAIN VERBOSE
SELECT stddev_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (stddev_all(*)), tag1
   Sort Key: (stddev_all(*))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: stddev_all(*), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select stddev(*) (stub agg function and group by tag only) (result)
--Testcase 505:
SELECT stddev_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub stddev_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function stddev_all_sfunc(text) line 3 at RAISE
-- select stddev(regex) (stub function, explain)
--Testcase 506:
EXPLAIN VERBOSE
SELECT stddev('/value[1,4]/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (stddev('/value[1,4]/'::text))
   Sort Key: (stddev('/value[1,4]/'::text))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: stddev('/value[1,4]/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select stddev(regex) (stub function, result)
--Testcase 507:
SELECT stddev('/value[1,4]/') from s3 ORDER BY 1;
ERROR:  stub stddev_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function stddev_sfunc(text,text) line 3 at RAISE
-- select stddev(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 508:
EXPLAIN VERBOSE
SELECT stddev('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (stddev('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (stddev('/^v.*/'::text))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: stddev('/^v.*/'::text), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select stddev(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 509:
SELECT stddev('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select stddev(regex) (stub agg function and group by tag only) (explain)
--Testcase 510:
EXPLAIN VERBOSE
SELECT stddev('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (stddev('/value[1,4]/'::text)), tag1
   Sort Key: (stddev('/value[1,4]/'::text))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: stddev('/value[1,4]/'::text), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select stddev(regex) (stub agg function and group by tag only) (result)
--Testcase 511:
SELECT stddev('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub stddev_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function stddev_sfunc(text,text) line 3 at RAISE
-- select influx_sum(*) (stub agg function, explain)
--Testcase 512:
EXPLAIN VERBOSE
SELECT influx_sum_all(*) from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (influx_sum_all(*))
   Sort Key: (influx_sum_all(*))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: influx_sum_all(*)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_sum(*) (stub agg function, result)
--Testcase 513:
SELECT influx_sum_all(*) from s3 ORDER BY 1;
ERROR:  stub influx_sum_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_sum_all_sfunc(text) line 3 at RAISE
-- select influx_sum(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 514:
EXPLAIN VERBOSE
SELECT influx_sum_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (influx_sum_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (influx_sum_all(*))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: influx_sum_all(*), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_sum(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 515:
SELECT influx_sum_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select influx_sum(*) (stub agg function and group by tag only) (explain)
--Testcase 516:
EXPLAIN VERBOSE
SELECT influx_sum_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (influx_sum_all(*)), tag1
   Sort Key: (influx_sum_all(*))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: influx_sum_all(*), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_sum(*) (stub agg function and group by tag only) (result)
--Testcase 517:
SELECT influx_sum_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub influx_sum_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_sum_all_sfunc(text) line 3 at RAISE
-- select influx_sum(*) (stub agg function, expose data, explain)
--Testcase 518:
EXPLAIN VERBOSE
SELECT (influx_sum_all(*)::s3).* from s3 ORDER BY 1;
                                                                                                                              QUERY PLAN                                                                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((influx_sum_all(*))::s3)."time"), (((influx_sum_all(*))::s3).tag1), (((influx_sum_all(*))::s3).value1), (((influx_sum_all(*))::s3).value2), (((influx_sum_all(*))::s3).value3), (((influx_sum_all(*))::s3).value4), (((influx_sum_all(*))::s3).__spd_url)
   Sort Key: (((influx_sum_all(*))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((influx_sum_all(*))::s3)."time", ((influx_sum_all(*))::s3).tag1, ((influx_sum_all(*))::s3).value1, ((influx_sum_all(*))::s3).value2, ((influx_sum_all(*))::s3).value3, ((influx_sum_all(*))::s3).value4, ((influx_sum_all(*))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_sum(*) (stub agg function, expose data, result)
--Testcase 519:
SELECT (influx_sum_all(*)::s3).* from s3 ORDER BY 1;
ERROR:  stub influx_sum_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_sum_all_sfunc(text) line 3 at RAISE
-- select influx_sum(regex) (stub function, explain)
--Testcase 520:
EXPLAIN VERBOSE
SELECT influx_sum('/value[1,4]/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (influx_sum('/value[1,4]/'::text))
   Sort Key: (influx_sum('/value[1,4]/'::text))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: influx_sum('/value[1,4]/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_sum(regex) (stub function, result)
--Testcase 521:
SELECT influx_sum('/value[1,4]/') from s3 ORDER BY 1;
ERROR:  stub influx_sum_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function influx_sum_sfunc(text,text) line 3 at RAISE
-- select influx_sum(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 522:
EXPLAIN VERBOSE
SELECT influx_sum('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (influx_sum('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (influx_sum('/^v.*/'::text))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: influx_sum('/^v.*/'::text), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_sum(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 523:
SELECT influx_sum('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select influx_sum(regex) (stub agg function and group by tag only) (explain)
--Testcase 524:
EXPLAIN VERBOSE
SELECT influx_sum('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (influx_sum('/value[1,4]/'::text)), tag1
   Sort Key: (influx_sum('/value[1,4]/'::text))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: influx_sum('/value[1,4]/'::text), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_sum(regex) (stub agg function and group by tag only) (result)
--Testcase 525:
SELECT influx_sum('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub influx_sum_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function influx_sum_sfunc(text,text) line 3 at RAISE
-- select influx_sum(regex) (stub agg function, expose data, explain)
--Testcase 526:
EXPLAIN VERBOSE
SELECT (influx_sum('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((influx_sum('/value[1,4]/'::text))::s3)."time"), (((influx_sum('/value[1,4]/'::text))::s3).tag1), (((influx_sum('/value[1,4]/'::text))::s3).value1), (((influx_sum('/value[1,4]/'::text))::s3).value2), (((influx_sum('/value[1,4]/'::text))::s3).value3), (((influx_sum('/value[1,4]/'::text))::s3).value4), (((influx_sum('/value[1,4]/'::text))::s3).__spd_url)
   Sort Key: (((influx_sum('/value[1,4]/'::text))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((influx_sum('/value[1,4]/'::text))::s3)."time", ((influx_sum('/value[1,4]/'::text))::s3).tag1, ((influx_sum('/value[1,4]/'::text))::s3).value1, ((influx_sum('/value[1,4]/'::text))::s3).value2, ((influx_sum('/value[1,4]/'::text))::s3).value3, ((influx_sum('/value[1,4]/'::text))::s3).value4, ((influx_sum('/value[1,4]/'::text))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_sum(regex) (stub agg function, expose data, result)
--Testcase 527:
SELECT (influx_sum('/value[1,4]/')::s3).* from s3 ORDER BY 1;
ERROR:  stub influx_sum_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function influx_sum_sfunc(text,text) line 3 at RAISE
-- selector function bottom() (explain)
--Testcase 528:
EXPLAIN VERBOSE
SELECT bottom(value1, 1) FROM s3 ORDER BY 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=8)
   Output: (bottom(value1, 1))
   Sort Key: (bottom(s3.value1, 1))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=8)
         Output: (bottom(value1, 1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT bottom("value1", 1) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.bottom(value1, 1) FROM public.s31influx
(11 rows)

-- selector function bottom() (result)
--Testcase 529:
SELECT bottom(value1, 1) FROM s3 ORDER BY 1;
 bottom 
--------
    0.1
    1.1
(2 rows)

-- selector function bottom() cannot be combined with other functions(explain)
--Testcase 530:
EXPLAIN VERBOSE
SELECT bottom(value1, 1), bottom(value2, 1), bottom(value3, 1), bottom(value4, 1) FROM s3 ORDER BY 1;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (bottom(value1, 1)), (bottom(value2, 1)), (bottom(value3, 1)), (bottom(value4, 1))
   Sort Key: (bottom(s3.value1, 1))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (bottom(value1, 1)), (bottom(value2, 1)), (bottom(value3, 1)), (bottom(value4, 1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT bottom("value1", 1), bottom("value2", 1), bottom("value3", 1), bottom("value4", 1) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.bottom(value1, 1), public.bottom(value2, 1), public.bottom(value3, 1), public.bottom(value4, 1) FROM public.s31influx
(11 rows)

-- selector function bottom() cannot be combined with other functions(result)
--Testcase 531:
SELECT bottom(value1, 1), bottom(value2, 1), bottom(value3, 1), bottom(value4, 1) FROM s3 ORDER BY 1;
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: influxdb_fdw : selector function bottom() cannot be combined with other functions
-- select influx_max(*) (stub agg function, explain)
--Testcase 532:
EXPLAIN VERBOSE
SELECT influx_max_all(*) from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (influx_max_all(*))
   Sort Key: (influx_max_all(*))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: influx_max_all(*)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_max(*) (stub agg function, result)
--Testcase 533:
SELECT influx_max_all(*) from s3 ORDER BY 1;
ERROR:  stub influx_max_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_max_all_sfunc(text) line 3 at RAISE
-- select influx_max(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 534:
EXPLAIN VERBOSE
SELECT influx_max_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (influx_max_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (influx_max_all(*))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: influx_max_all(*), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_max(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 535:
SELECT influx_max_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select influx_max(*) (stub agg function and group by tag only) (explain)
--Testcase 536:
EXPLAIN VERBOSE
SELECT influx_max_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (influx_max_all(*)), tag1
   Sort Key: (influx_max_all(*))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: influx_max_all(*), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_max(*) (stub agg function and group by tag only) (result)
--Testcase 537:
SELECT influx_max_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub influx_max_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_max_all_sfunc(text) line 3 at RAISE
-- select influx_max(*) (stub agg function, expose data, explain)
--Testcase 538:
EXPLAIN VERBOSE
SELECT (influx_max_all(*)::s3).* from s3 ORDER BY 1;
                                                                                                                              QUERY PLAN                                                                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((influx_max_all(*))::s3)."time"), (((influx_max_all(*))::s3).tag1), (((influx_max_all(*))::s3).value1), (((influx_max_all(*))::s3).value2), (((influx_max_all(*))::s3).value3), (((influx_max_all(*))::s3).value4), (((influx_max_all(*))::s3).__spd_url)
   Sort Key: (((influx_max_all(*))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((influx_max_all(*))::s3)."time", ((influx_max_all(*))::s3).tag1, ((influx_max_all(*))::s3).value1, ((influx_max_all(*))::s3).value2, ((influx_max_all(*))::s3).value3, ((influx_max_all(*))::s3).value4, ((influx_max_all(*))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_max(*) (stub agg function, expose data, result)
--Testcase 539:
SELECT (influx_max_all(*)::s3).* from s3 ORDER BY 1;
ERROR:  stub influx_max_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_max_all_sfunc(text) line 3 at RAISE
-- select influx_max(regex) (stub function, explain)
--Testcase 540:
EXPLAIN VERBOSE
SELECT influx_max('/value[1,4]/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (influx_max('/value[1,4]/'::text))
   Sort Key: (influx_max('/value[1,4]/'::text))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: influx_max('/value[1,4]/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_max(regex) (stub function, result)
--Testcase 541:
SELECT influx_max('/value[1,4]/') from s3 ORDER BY 1;
ERROR:  stub influx_max_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function influx_max_sfunc(text,text) line 3 at RAISE
-- select influx_max(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 542:
EXPLAIN VERBOSE
SELECT influx_max('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (influx_max('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (influx_max('/^v.*/'::text))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: influx_max('/^v.*/'::text), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_max(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 543:
SELECT influx_max('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select influx_max(regex) (stub agg function and group by tag only) (explain)
--Testcase 544:
EXPLAIN VERBOSE
SELECT influx_max('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (influx_max('/value[1,4]/'::text)), tag1
   Sort Key: (influx_max('/value[1,4]/'::text))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: influx_max('/value[1,4]/'::text), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_max(regex) (stub agg function and group by tag only) (result)
--Testcase 545:
SELECT influx_max('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub influx_max_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function influx_max_sfunc(text,text) line 3 at RAISE
-- select influx_max(regex) (stub agg function, expose data, explain)
--Testcase 546:
EXPLAIN VERBOSE
SELECT (influx_max('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((influx_max('/value[1,4]/'::text))::s3)."time"), (((influx_max('/value[1,4]/'::text))::s3).tag1), (((influx_max('/value[1,4]/'::text))::s3).value1), (((influx_max('/value[1,4]/'::text))::s3).value2), (((influx_max('/value[1,4]/'::text))::s3).value3), (((influx_max('/value[1,4]/'::text))::s3).value4), (((influx_max('/value[1,4]/'::text))::s3).__spd_url)
   Sort Key: (((influx_max('/value[1,4]/'::text))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((influx_max('/value[1,4]/'::text))::s3)."time", ((influx_max('/value[1,4]/'::text))::s3).tag1, ((influx_max('/value[1,4]/'::text))::s3).value1, ((influx_max('/value[1,4]/'::text))::s3).value2, ((influx_max('/value[1,4]/'::text))::s3).value3, ((influx_max('/value[1,4]/'::text))::s3).value4, ((influx_max('/value[1,4]/'::text))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_max(regex) (stub agg function, expose data, result)
--Testcase 547:
SELECT (influx_max('/value[1,4]/')::s3).* from s3 ORDER BY 1;
ERROR:  stub influx_max_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function influx_max_sfunc(text,text) line 3 at RAISE
-- select influx_min(*) (stub agg function, explain)
--Testcase 548:
EXPLAIN VERBOSE
SELECT influx_min_all(*) from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (influx_min_all(*))
   Sort Key: (influx_min_all(*))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: influx_min_all(*)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_min(*) (stub agg function, result)
--Testcase 549:
SELECT influx_min_all(*) from s3 ORDER BY 1;
ERROR:  stub influx_min_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_min_all_sfunc(text) line 3 at RAISE
-- select influx_min(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 550:
EXPLAIN VERBOSE
SELECT influx_min_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (influx_min_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (influx_min_all(*))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: influx_min_all(*), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_min(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 551:
SELECT influx_min_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select influx_min(*) (stub agg function and group by tag only) (explain)
--Testcase 552:
EXPLAIN VERBOSE
SELECT influx_min_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (influx_min_all(*)), tag1
   Sort Key: (influx_min_all(*))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: influx_min_all(*), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_min(*) (stub agg function and group by tag only) (result)
--Testcase 553:
SELECT influx_min_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub influx_min_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_min_all_sfunc(text) line 3 at RAISE
-- select influx_min(*) (stub agg function, expose data, explain)
--Testcase 554:
EXPLAIN VERBOSE
SELECT (influx_min_all(*)::s3).* from s3 ORDER BY 1;
                                                                                                                              QUERY PLAN                                                                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((influx_min_all(*))::s3)."time"), (((influx_min_all(*))::s3).tag1), (((influx_min_all(*))::s3).value1), (((influx_min_all(*))::s3).value2), (((influx_min_all(*))::s3).value3), (((influx_min_all(*))::s3).value4), (((influx_min_all(*))::s3).__spd_url)
   Sort Key: (((influx_min_all(*))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((influx_min_all(*))::s3)."time", ((influx_min_all(*))::s3).tag1, ((influx_min_all(*))::s3).value1, ((influx_min_all(*))::s3).value2, ((influx_min_all(*))::s3).value3, ((influx_min_all(*))::s3).value4, ((influx_min_all(*))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_min(*) (stub agg function, expose data, result)
--Testcase 555:
SELECT (influx_min_all(*)::s3).* from s3 ORDER BY 1;
ERROR:  stub influx_min_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_min_all_sfunc(text) line 3 at RAISE
-- select influx_min(regex) (stub function, explain)
--Testcase 556:
EXPLAIN VERBOSE
SELECT influx_min('/value[1,4]/') from s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (influx_min('/value[1,4]/'::text))
   Sort Key: (influx_min('/value[1,4]/'::text))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: influx_min('/value[1,4]/'::text)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_min(regex) (stub function, result)
--Testcase 557:
SELECT influx_min('/value[1,4]/') from s3 ORDER BY 1;
ERROR:  stub influx_min_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function influx_min_sfunc(text,text) line 3 at RAISE
-- select influx_min(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 558:
EXPLAIN VERBOSE
SELECT influx_min('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (influx_min('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (influx_min('/^v.*/'::text))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: influx_min('/^v.*/'::text), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_min(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 559:
SELECT influx_min('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select influx_min(regex) (stub agg function and group by tag only) (explain)
--Testcase 560:
EXPLAIN VERBOSE
SELECT influx_min('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (influx_min('/value[1,4]/'::text)), tag1
   Sort Key: (influx_min('/value[1,4]/'::text))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: influx_min('/value[1,4]/'::text), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select influx_min(regex) (stub agg function and group by tag only) (result)
--Testcase 561:
SELECT influx_min('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub influx_min_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function influx_min_sfunc(text,text) line 3 at RAISE
-- select influx_min(regex) (stub agg function, expose data, explain)
--Testcase 562:
EXPLAIN VERBOSE
SELECT (influx_min('/value[1,4]/')::s3).* from s3 ORDER BY 1;
                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=5331.94..5331.95 rows=1 width=104)
   Output: (((influx_min('/value[1,4]/'::text))::s3)."time"), (((influx_min('/value[1,4]/'::text))::s3).tag1), (((influx_min('/value[1,4]/'::text))::s3).value1), (((influx_min('/value[1,4]/'::text))::s3).value2), (((influx_min('/value[1,4]/'::text))::s3).value3), (((influx_min('/value[1,4]/'::text))::s3).value4), (((influx_min('/value[1,4]/'::text))::s3).__spd_url)
   Sort Key: (((influx_min('/value[1,4]/'::text))::s3)."time")
   ->  Aggregate  (cost=5331.89..5331.93 rows=1 width=104)
         Output: ((influx_min('/value[1,4]/'::text))::s3)."time", ((influx_min('/value[1,4]/'::text))::s3).tag1, ((influx_min('/value[1,4]/'::text))::s3).value1, ((influx_min('/value[1,4]/'::text))::s3).value2, ((influx_min('/value[1,4]/'::text))::s3).value3, ((influx_min('/value[1,4]/'::text))::s3).value4, ((influx_min('/value[1,4]/'::text))::s3).__spd_url
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select influx_min(regex) (stub agg function, expose data, result)
--Testcase 563:
SELECT (influx_min('/value[1,4]/')::s3).* from s3 ORDER BY 1;
ERROR:  stub influx_min_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function influx_min_sfunc(text,text) line 3 at RAISE
-- selector function percentile() (explain)
--Testcase 564:
EXPLAIN VERBOSE
SELECT percentile(value1, 50), percentile(value2, 60), percentile(value3, 25), percentile(value4, 33) FROM s3 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (percentile(value1, 50)), (percentile(value2, 60)), (percentile(value3, 25)), (percentile(value4, 33))
   Sort Key: (percentile(s3.value1, 50))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (percentile(value1, 50)), (percentile(value2, 60)), (percentile(value3, 25)), (percentile(value4, 33))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT percentile("value1", 50), percentile("value2", 60), percentile("value3", 25), percentile("value4", 33) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.percentile(value1, 50), public.percentile(value2, 60), public.percentile(value3, 25), public.percentile(value4, 33) FROM public.s31influx
(11 rows)

-- selector function percentile() (result)
--Testcase 565:
SELECT * FROM (
SELECT percentile(value1, 50), percentile(value2, 60), percentile(value3, 25), percentile(value4, 33) FROM s3
) as t ORDER BY 1, 2, 3, 4;
 percentile | percentile | percentile | percentile 
------------+------------+------------+------------
        0.2 |        100 |       -0.3 |       -100
        2.2 |        200 |       -3.3 |       -200
(2 rows)

-- selector function percentile() (explain)
--Testcase 566:
EXPLAIN VERBOSE
SELECT percentile(value1, 1.5), percentile(value2, 6.7), percentile(value3, 20.5), percentile(value4, 75.2) FROM s3 ORDER BY 3;
                                                                                                                         QUERY PLAN                                                                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (percentile(value1, '1.5'::double precision)), (percentile(value2, '6.7'::double precision)), (percentile(value3, '20.5'::double precision)), (percentile(value4, '75.2'::double precision))
   Sort Key: (percentile(s3.value3, '20.5'::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (percentile(value1, '1.5'::double precision)), (percentile(value2, '6.7'::double precision)), (percentile(value3, '20.5'::double precision)), (percentile(value4, '75.2'::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT percentile("value1", 1.5), percentile("value2", 6.7), percentile("value3", 20.5), percentile("value4", 75.2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.percentile(value1, 1.5::double precision), public.percentile(value2, 6.7::double precision), public.percentile(value3, 20.5::double precision), public.percentile(value4, 75.2::double precision) FROM public.s31influx
(11 rows)

-- selector function percentile() (result)
--Testcase 567:
SELECT percentile(value1, 1.5), percentile(value2, 6.7), percentile(value3, 20.5), percentile(value4, 75.2) FROM s3 ORDER BY 3;
 percentile | percentile | percentile | percentile 
------------+------------+------------+------------
            |            |       -3.3 |       -200
            |            |       -0.3 |       -100
(2 rows)

-- select percentile(*, int) (stub function, explain)
--Testcase 568:
EXPLAIN VERBOSE
SELECT percentile_all(50) from s3 ORDER BY 1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (percentile_all(50))
   Sort Key: (percentile_all(50))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (percentile_all(50))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT percentile(*, 50) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.percentile_all(50) FROM public.s31influx
(11 rows)

-- select percentile(*, int) (stub function, result)
--Testcase 569:
SELECT * FROM (
SELECT percentile_all(50) from s3
) as t ORDER BY 1;
                            percentile_all                             
-----------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.2,100,-0.2,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:00Z,,2.2,200,-2.2,-200,/influxdb_svr/)
(2 rows)

-- select percentile(*, float8) (stub function, explain)
--Testcase 570:
EXPLAIN VERBOSE
SELECT percentile_all(70.5) from s3 ORDER BY 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (percentile_all('70.5'::double precision))
   Sort Key: (percentile_all('70.5'::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (percentile_all('70.5'::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT percentile(*, 70.5) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.percentile_all(70.5::double precision) FROM public.s31influx
(11 rows)

-- select percentile(*, float8) (stub function, result)
--Testcase 571:
SELECT percentile_all(70.5) from s3 ORDER BY 1;
                            percentile_all                             
-----------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.2,100,-0.2,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:00Z,,2.2,200,-2.2,-200,/influxdb_svr/)
(2 rows)

-- select percentile(*, int) (stub function and group by influx_time() and tag) (explain)
--Testcase 572:
EXPLAIN VERBOSE
SELECT percentile_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=204.95..205.03 rows=32 width=72)
   Output: (percentile_all(50)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (percentile_all(50))
   ->  Group  (cost=187.90..204.15 rows=32 width=72)
         Output: percentile_all(50), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select percentile(*, int) (stub function and group by influx_time() and tag) (result)
--Testcase 573:
SELECT percentile_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select percentile(*, float8) (stub function and group by influx_time() and tag) (explain)
--Testcase 574:
EXPLAIN VERBOSE
SELECT percentile_all(70.5) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=204.95..205.03 rows=32 width=72)
   Output: (percentile_all('70.5'::double precision)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (percentile_all('70.5'::double precision))
   ->  Group  (cost=187.90..204.15 rows=32 width=72)
         Output: percentile_all('70.5'::double precision), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select percentile(*, float8) (stub function and group by influx_time() and tag) (result)
--Testcase 575:
SELECT percentile_all(70.5) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select percentile(*, int) (stub function and group by tag only) (explain)
--Testcase 576:
EXPLAIN VERBOSE
SELECT percentile_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (percentile_all(50)), tag1
   Sort Key: (percentile_all(50))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (percentile_all(50)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT percentile(*, 50) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.percentile_all(50), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select percentile(*, int) (stub function and group by tag only) (result)
--Testcase 577:
SELECT percentile_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                            percentile_all                             
-----------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.2,100,-0.2,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:00Z,,1.1,200,-2.2,-200,/influxdb_svr/)
(2 rows)

-- select percentile(*, float8) (stub function and group by tag only) (explain)
--Testcase 578:
EXPLAIN VERBOSE
SELECT percentile_all(70.5) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                QUERY PLAN                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (percentile_all('70.5'::double precision)), tag1
   Sort Key: (percentile_all('70.5'::double precision))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (percentile_all('70.5'::double precision)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT percentile(*, 70.5) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.percentile_all(70.5::double precision), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select percentile(*, float8) (stub function and group by tag only) (result)
--Testcase 579:
SELECT percentile_all(70.5) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                            percentile_all                             
-----------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.2,100,-0.2,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:00Z,,1.1,200,-2.2,-200,/influxdb_svr/)
(2 rows)

-- select percentile(*, int) (stub function, expose data, explain)
--Testcase 580:
EXPLAIN VERBOSE
SELECT (percentile_all(50)::s3).* from s3 ORDER BY 1, 2, 3, 4;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((percentile_all(50)))::s3)."time"), ((((percentile_all(50)))::s3).tag1), ((((percentile_all(50)))::s3).value1), ((((percentile_all(50)))::s3).value2), ((((percentile_all(50)))::s3).value3), ((((percentile_all(50)))::s3).value4), ((((percentile_all(50)))::s3).__spd_url)
   Sort Key: ((((percentile_all(50)))::s3)."time"), ((((percentile_all(50)))::s3).tag1), ((((percentile_all(50)))::s3).value1), ((((percentile_all(50)))::s3).value2)
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((percentile_all(50)))::s3)."time", (((percentile_all(50)))::s3).tag1, (((percentile_all(50)))::s3).value1, (((percentile_all(50)))::s3).value2, (((percentile_all(50)))::s3).value3, (((percentile_all(50)))::s3).value4, (((percentile_all(50)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT percentile(*, 50) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.percentile_all(50) FROM public.s31influx
(11 rows)

-- select percentile(*, int) (stub function, expose data, result)
--Testcase 581:
SELECT * FROM (
SELECT (percentile_all(50)::s3).* from s3
) as t ORDER BY 1, 2, 3, 4;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      |    0.2 |    100 |   -0.2 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:00+09 |      |    2.2 |    200 |   -2.2 |   -200 | /influxdb_svr/
(2 rows)

-- select percentile(*, int) (stub function, expose data, explain)
--Testcase 582:
EXPLAIN VERBOSE
SELECT (percentile_all(70.5)::s3).* from s3 ORDER BY 1, 2, 3, 4;
                                                                                                                                                                                                                      QUERY PLAN                                                                                                                                                                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((percentile_all('70.5'::double precision)))::s3)."time"), ((((percentile_all('70.5'::double precision)))::s3).tag1), ((((percentile_all('70.5'::double precision)))::s3).value1), ((((percentile_all('70.5'::double precision)))::s3).value2), ((((percentile_all('70.5'::double precision)))::s3).value3), ((((percentile_all('70.5'::double precision)))::s3).value4), ((((percentile_all('70.5'::double precision)))::s3).__spd_url)
   Sort Key: ((((percentile_all('70.5'::double precision)))::s3)."time"), ((((percentile_all('70.5'::double precision)))::s3).tag1), ((((percentile_all('70.5'::double precision)))::s3).value1), ((((percentile_all('70.5'::double precision)))::s3).value2)
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((percentile_all('70.5'::double precision)))::s3)."time", (((percentile_all('70.5'::double precision)))::s3).tag1, (((percentile_all('70.5'::double precision)))::s3).value1, (((percentile_all('70.5'::double precision)))::s3).value2, (((percentile_all('70.5'::double precision)))::s3).value3, (((percentile_all('70.5'::double precision)))::s3).value4, (((percentile_all('70.5'::double precision)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT percentile(*, 70.5) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.percentile_all(70.5::double precision) FROM public.s31influx
(11 rows)

-- select percentile(*, int) (stub function, expose data, result)
--Testcase 583:
SELECT * FROM (
SELECT (percentile_all(70.5)::s3).* from s3
) as t ORDER BY 1, 2, 3, 4;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      |    0.2 |    100 |   -0.2 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:00+09 |      |    2.2 |    200 |   -2.2 |   -200 | /influxdb_svr/
(2 rows)

-- select percentile(regex) (stub function, explain)
--Testcase 584:
EXPLAIN VERBOSE
SELECT percentile('/value[1,4]/', 50) from s3 ORDER BY 1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (percentile('/value[1,4]/'::text, 50))
   Sort Key: (percentile('/value[1,4]/'::text, 50))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (percentile('/value[1,4]/'::text, 50))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT percentile(/value[1,4]/, 50) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.percentile('/value[1,4]/'::text, 50) FROM public.s31influx
(11 rows)

-- select percentile(regex) (stub function, result)
--Testcase 585:
SELECT percentile('/value[1,4]/', 50) from s3 ORDER BY 1;
                           percentile                           
----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.2,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:00Z,,2.2,,,-200,/influxdb_svr/)
(2 rows)

-- select percentile(regex) (stub function and group by influx_time() and tag) (explain)
--Testcase 586:
EXPLAIN VERBOSE
SELECT percentile('/^v.*/', 50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=204.95..205.03 rows=32 width=72)
   Output: (percentile('/^v.*/'::text, 50)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (percentile('/^v.*/'::text, 50))
   ->  Group  (cost=187.90..204.15 rows=32 width=72)
         Output: percentile('/^v.*/'::text, 50), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select percentile(regex) (stub function and group by influx_time() and tag) (result)
--Testcase 587:
SELECT percentile('/^v.*/', 50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select percentile(regex) (stub function and group by tag only) (explain)
--Testcase 588:
EXPLAIN VERBOSE
SELECT percentile('/value[1,4]/', 70.5) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (percentile('/value[1,4]/'::text, '70.5'::double precision)), tag1
   Sort Key: (percentile('/value[1,4]/'::text, '70.5'::double precision))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (percentile('/value[1,4]/'::text, '70.5'::double precision)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT percentile(/value[1,4]/, 70.5) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.percentile('/value[1,4]/'::text, 70.5::double precision), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select percentile(regex) (stub function and group by tag only) (result)
--Testcase 589:
SELECT percentile('/value[1,4]/', 70.5) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                           percentile                           
----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.2,,,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:00Z,,1.1,,,-200,/influxdb_svr/)
(2 rows)

-- select percentile(regex) (stub function, expose data, explain)
--Testcase 590:
EXPLAIN VERBOSE
SELECT (percentile('/value[1,4]/', 50)::s3).* from s3 ORDER BY 1, 2, 3;
                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((percentile('/value[1,4]/'::text, 50)))::s3)."time"), ((((percentile('/value[1,4]/'::text, 50)))::s3).tag1), ((((percentile('/value[1,4]/'::text, 50)))::s3).value1), ((((percentile('/value[1,4]/'::text, 50)))::s3).value2), ((((percentile('/value[1,4]/'::text, 50)))::s3).value3), ((((percentile('/value[1,4]/'::text, 50)))::s3).value4), ((((percentile('/value[1,4]/'::text, 50)))::s3).__spd_url)
   Sort Key: ((((percentile('/value[1,4]/'::text, 50)))::s3)."time"), ((((percentile('/value[1,4]/'::text, 50)))::s3).tag1), ((((percentile('/value[1,4]/'::text, 50)))::s3).value1)
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((percentile('/value[1,4]/'::text, 50)))::s3)."time", (((percentile('/value[1,4]/'::text, 50)))::s3).tag1, (((percentile('/value[1,4]/'::text, 50)))::s3).value1, (((percentile('/value[1,4]/'::text, 50)))::s3).value2, (((percentile('/value[1,4]/'::text, 50)))::s3).value3, (((percentile('/value[1,4]/'::text, 50)))::s3).value4, (((percentile('/value[1,4]/'::text, 50)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT percentile(/value[1,4]/, 50) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.percentile('/value[1,4]/'::text, 50) FROM public.s31influx
(11 rows)

-- select percentile(regex) (stub function, expose data, result)
--Testcase 591:
SELECT * FROM (
SELECT (percentile('/value[1,4]/', 50)::s3).* from s3
) as t ORDER BY 1, 2, 3;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      |    0.2 |        |        |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:00+09 |      |    2.2 |        |        |   -200 | /influxdb_svr/
(2 rows)

-- select percentile(regex) (stub function, expose data, explain)
--Testcase 592:
EXPLAIN VERBOSE
SELECT (percentile('/value[1,4]/', 70.5)::s3).* from s3 ORDER BY 1, 2, 3;


 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3)."time"), ((((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).tag1), ((((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value1), ((((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value2), ((((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value3), ((((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value4), ((((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).__spd_url)
   Sort Key: ((((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3)."time"), ((((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).tag1), ((((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value1)
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3)."time", (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).tag1, (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value1, (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value2, (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value3, (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value4, (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT percentile(/value[1,4]/, 70.5) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.percentile('/value[1,4]/'::text, 70.5::double precision) FROM public.s31influx
(11 rows)

-- select percentile(regex) (stub function, expose data, result)
--Testcase 593:
SELECT * FROM (
SELECT (percentile('/value[1,4]/', 70.5)::s3).* from s3
) as t ORDER BY 1, 2, 3;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      |    0.2 |        |        |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:00+09 |      |    2.2 |        |        |   -200 | /influxdb_svr/
(2 rows)

-- selector function top(field_key,N) (explain)
--Testcase 594:
EXPLAIN VERBOSE
SELECT top(value1, 1) FROM s3 ORDER BY 1;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=8)
   Output: (top(value1, 1))
   Sort Key: (top(s3.value1, 1))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=8)
         Output: (top(value1, 1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT top("value1", 1) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.top(value1, 1) FROM public.s31influx
(11 rows)

-- selector function top(field_key,N) (result)
--Testcase 595:
SELECT top(value1, 1) FROM s3 ORDER BY 1;
 top 
-----
 0.3
 3.3
(2 rows)

-- selector function top(field_key,tag_key(s),N) (explain)
--Testcase 596:
EXPLAIN VERBOSE
SELECT top(value1, tag1, 1) FROM s3 ORDER BY 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=8)
   Output: (top(value1, tag1, 1))
   Sort Key: (top(s3.value1, s3.tag1, 1))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=8)
         Output: (top(value1, tag1, 1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT top("value1", "tag1", 1) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.top(value1, tag1, 1) FROM public.s31influx
(11 rows)

-- selector function top(field_key,tag_key(s),N) (result)
--Testcase 597:
SELECT top(value1, tag1, 1) FROM s3 ORDER BY 1;
 top 
-----
 0.3
 3.3
(2 rows)

-- selector function top() cannot be combined with other functions(explain)
--Testcase 598:
EXPLAIN VERBOSE
SELECT top(value1, 1), top(value2, 1), top(value3, 1), top(value4, 1) FROM s3 ORDER BY 1;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10886.10..10903.16 rows=6826 width=32)
   Output: (top(value1, 1)), (top(value2, 1)), (top(value3, 1)), (top(value4, 1))
   Sort Key: (top(s3.value1, 1))
   ->  Foreign Scan on public.s3  (cost=110.00..10451.39 rows=6826 width=32)
         Output: (top(value1, 1)), (top(value2, 1)), (top(value3, 1)), (top(value4, 1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT top("value1", 1), top("value2", 1), top("value3", 1), top("value4", 1) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.top(value1, 1), public.top(value2, 1), public.top(value3, 1), public.top(value4, 1) FROM public.s31influx
(11 rows)

-- selector function top() cannot be combined with other functions(result)
--Testcase 599:
SELECT top(value1, 1), top(value2, 1), top(value3, 1), top(value4, 1) FROM s3 ORDER BY 1;
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: influxdb_fdw : selector function top() cannot be combined with other functions
-- select acos (builtin function, explain)
--Testcase 600:
EXPLAIN VERBOSE
SELECT acos(value1), acos(value2), acos(value3), acos(value4) FROM s3 ORDER BY 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4162.49..4179.55 rows=6826 width=32)
   Output: (acos(value1)), (acos((value2)::double precision)), (acos(value3)), (acos((value4)::double precision))
   Sort Key: (acos(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.78 rows=6826 width=32)
         Output: (acos(value1)), (acos((value2)::double precision)), (acos(value3)), (acos((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT acos("value1"), acos("value2"), acos("value3"), acos("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT acos(value1), acos(value2), acos(value3), acos(value4) FROM public.s31influx
(11 rows)

-- select acos (builtin function, result)
--Testcase 601:
SELECT acos(value1), acos(value2), acos(value3), acos(value4) FROM s3 ORDER BY 1;
        acos        | acos |        acos        | acos 
--------------------+------+--------------------+------
  1.266103672779499 |      | 1.8754889808102941 |     
 1.3694384060045657 |      | 1.7721542475852274 |     
 1.4706289056333368 |      | 1.6709637479564563 |     
                    |      |                    |     
                    |      |                    |     
                    |      |                    |     
(6 rows)

-- select acos (builtin function, not pushdown constraints, explain)
--Testcase 602:
EXPLAIN VERBOSE
SELECT acos(value1), acos(value2), acos(value3), acos(value4) FROM s3 WHERE to_hex(value2) = '64' ORDER BY 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=247.57..247.65 rows=34 width=32)
   Output: (acos(value1)), (acos((value2)::double precision)), (acos(value3)), (acos((value4)::double precision))
   Sort Key: (acos(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..246.70 rows=34 width=32)
         Output: (acos(value1)), (acos((value2)::double precision)), (acos(value3)), (acos((value4)::double precision))
         Filter: (to_hex(s3.value2) = '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT acos("value1"), acos("value2"), acos("value3"), acos("value4"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT acos(value1), acos(value2), acos(value3), acos(value4), value2 FROM public.s31influx
(12 rows)

-- select acos (builtin function, not pushdown constraints, result)
--Testcase 603:
SELECT acos(value1), acos(value2), acos(value3), acos(value4) FROM s3 WHERE to_hex(value2) = '64' ORDER BY 1;
        acos        | acos |        acos        | acos 
--------------------+------+--------------------+------
  1.266103672779499 |      | 1.8754889808102941 |     
 1.3694384060045657 |      | 1.7721542475852274 |     
 1.4706289056333368 |      | 1.6709637479564563 |     
(3 rows)

-- select acos (builtin function, pushdown constraints, explain)
--Testcase 604:
EXPLAIN VERBOSE
SELECT acos(value1), acos(value2), acos(value3), acos(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4150.76..4167.74 rows=6792 width=32)
   Output: (acos(value1)), (acos((value2)::double precision)), (acos(value3)), (acos((value4)::double precision))
   Sort Key: (acos(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3718.46 rows=6792 width=32)
         Output: (acos(value1)), (acos((value2)::double precision)), (acos(value3)), (acos((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT acos("value1"), acos("value2"), acos("value3"), acos("value4") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT acos(value1), acos(value2), acos(value3), acos(value4) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select acos (builtin function, pushdown constraints, result)
--Testcase 605:
SELECT acos(value1), acos(value2), acos(value3), acos(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
        acos        | acos |        acos        | acos 
--------------------+------+--------------------+------
  1.266103672779499 |      | 1.8754889808102941 |     
 1.3694384060045657 |      | 1.7721542475852274 |     
 1.4706289056333368 |      | 1.6709637479564563 |     
(3 rows)

-- select acos as nest function with (pushdown, explain)
--Testcase 606:
EXPLAIN VERBOSE
SELECT sum(value3),acos(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (acos((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), acos((sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select acos as nest function with (pushdown, result)
--Testcase 607:
SELECT sum(value3),acos(sum(value3)) FROM s3 ORDER BY 1;
ERROR:  input is out of range
-- select acos as nest with log2 (pushdown, explain)
--Testcase 608:
EXPLAIN VERBOSE
SELECT acos(log2(value1)),acos(log2(1/value1)) FROM s3;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (acos(log2(value1))), (acos(log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT acos(log2("value1")), acos(log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT acos(public.log2(value1)), acos(public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select acos as nest with log2 (pushdown, result)
--Testcase 609:
SELECT * FROM (
SELECT acos(log2(value1)),acos(log2(1/value1)) FROM s3
) as t ORDER BY 1, 2;
        acos        |        acos        
--------------------+--------------------
 1.4328557728353513 | 1.7087368807544419
                    |                   
                    |                   
                    |                   
                    |                   
                    |                   
(6 rows)

-- select acos with non pushdown func and explicit constant (explain)
--Testcase 610:
EXPLAIN VERBOSE
SELECT acos(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (acos(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (acos(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (acos(value3)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT acos("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT acos(value3), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select acos with non pushdown func and explicit constant (result)
--Testcase 611:
SELECT * FROM (
SELECT acos(value3), pi(), 4.1 FROM s3
) as t ORDER BY 1;
        acos        |        pi         | ?column? 
--------------------+-------------------+----------
 1.6709637479564563 | 3.141592653589793 |      4.1
 1.7721542475852274 | 3.141592653589793 |      4.1
 1.8754889808102941 | 3.141592653589793 |      4.1
                    | 3.141592653589793 |      4.1
                    | 3.141592653589793 |      4.1
                    | 3.141592653589793 |      4.1
(6 rows)

-- select acos with order by (explain)
--Testcase 612:
EXPLAIN VERBOSE
SELECT value1, acos(1-value1) FROM s3 ORDER BY acos(1-value1);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (acos(('1'::double precision - value1)))
   Sort Key: (acos(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (acos(('1'::double precision - value1)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", acos((1 - "value1")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, acos((1::double precision - value1)) FROM public.s31influx
(11 rows)

-- select acos with order by (result)
--Testcase 613:
SELECT value1, acos(1-value1) FROM s3 ORDER BY acos(1-value1);
 value1 |        acos         
--------+---------------------
    0.1 | 0.45102681179626236
    0.2 |  0.6435011087932843
    0.3 |  0.7953988301841436
    1.1 |  1.6709637479564565
    2.2 |                    
    3.3 |                    
(6 rows)

-- select acos with order by index (result)
--Testcase 614:
SELECT value1, acos(1-value1) FROM s3 ORDER BY 2,1;
 value1 |        acos         
--------+---------------------
    0.1 | 0.45102681179626236
    0.2 |  0.6435011087932843
    0.3 |  0.7953988301841436
    1.1 |  1.6709637479564565
    2.2 |                    
    3.3 |                    
(6 rows)

-- select acos with order by index (result)
--Testcase 615:
SELECT value1, acos(1-value1) FROM s3 ORDER BY 1,2;
 value1 |        acos         
--------+---------------------
    0.1 | 0.45102681179626236
    0.2 |  0.6435011087932843
    0.3 |  0.7953988301841436
    1.1 |  1.6709637479564565
    2.2 |                    
    3.3 |                    
(6 rows)

-- select acos and as
--Testcase 616:
SELECT acos(value3) as acos1 FROM s3 ORDER BY 1;
       acos1        
--------------------
 1.6709637479564563
 1.7721542475852274
 1.8754889808102941
                   
                   
                   
(6 rows)

-- select acos(*) (stub function, explain)
--Testcase 617:
EXPLAIN VERBOSE
SELECT acos_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (acos_all())
   Sort Key: (acos_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (acos_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT acos(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.acos_all() FROM public.s31influx
(11 rows)

-- select acos(*) (stub function, result)
--Testcase 618:
SELECT * FROM (
SELECT acos_all() from s3
) as t ORDER BY 1;
                                          acos_all                                           
---------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,1.4706289056333368,,1.6709637479564563,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,1.3694384060045657,,1.7721542475852274,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,1.266103672779499,,1.8754889808102941,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,,,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,,,,,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,,,,,/influxdb_svr/)
(6 rows)

-- select acos(*) (stub function and group by tag only) (explain)
--Testcase 619:
EXPLAIN VERBOSE
SELECT acos_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (acos_all()), tag1
   Sort Key: (acos_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (acos_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT acos(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.acos_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select acos(*) (stub function and group by tag only) (result)
--Testcase 620:
SELECT acos_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                          acos_all                                           
---------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,1.4706289056333368,,1.6709637479564563,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,1.3694384060045657,,1.7721542475852274,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,1.266103672779499,,1.8754889808102941,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,,,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,,,,,/influxdb_svr/)
(5 rows)

-- select acos(*) (stub function, expose data, explain)
--Testcase 621:
EXPLAIN VERBOSE
SELECT (acos_all()::s3).* from s3 ORDER BY 1;
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((acos_all()))::s3)."time"), ((((acos_all()))::s3).tag1), ((((acos_all()))::s3).value1), ((((acos_all()))::s3).value2), ((((acos_all()))::s3).value3), ((((acos_all()))::s3).value4), ((((acos_all()))::s3).__spd_url)
   Sort Key: ((((acos_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((acos_all()))::s3)."time", (((acos_all()))::s3).tag1, (((acos_all()))::s3).value1, (((acos_all()))::s3).value2, (((acos_all()))::s3).value3, (((acos_all()))::s3).value4, (((acos_all()))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT acos(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.acos_all() FROM public.s31influx
(11 rows)

-- select acos(*) (stub function, expose data, result)
--Testcase 622:
SELECT * FROM (
SELECT (acos_all()::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |       value1       | value2 |       value3       | value4 |          __spd_url          
------------------------+------+--------------------+--------+--------------------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      | 1.4706289056333368 |        | 1.6709637479564563 |        | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:01+09 |      | 1.3694384060045657 |        | 1.7721542475852274 |        | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |  1.266103672779499 |        | 1.8754889808102941 |        | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:03+09 |      |                    |        |                    |        | /influxdb_svr/
 1970-01-01 09:00:04+09 |      |                    |        |                    |        | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |                    |        |                    |        | /influxdb_svr/
(6 rows)

-- select asin (builtin function, explain)
--Testcase 623:
EXPLAIN VERBOSE
SELECT asin(value1), asin(value2), asin(value3), asin(value4) FROM s3 ORDER BY 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4162.49..4179.55 rows=6826 width=32)
   Output: (asin(value1)), (asin((value2)::double precision)), (asin(value3)), (asin((value4)::double precision))
   Sort Key: (asin(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.78 rows=6826 width=32)
         Output: (asin(value1)), (asin((value2)::double precision)), (asin(value3)), (asin((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT asin("value1"), asin("value2"), asin("value3"), asin("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT asin(value1), asin(value2), asin(value3), asin(value4) FROM public.s31influx
(11 rows)

-- select asin (builtin function, result)
--Testcase 624:
SELECT asin(value1), asin(value2), asin(value3), asin(value4) FROM s3 ORDER BY 1;
        asin         | asin |         asin         | asin 
---------------------+------+----------------------+------
  0.1001674211615598 |      |  -0.1001674211615598 |     
 0.20135792079033082 |      | -0.20135792079033082 |     
  0.3046926540153975 |      |  -0.3046926540153975 |     
                     |      |                      |     
                     |      |                      |     
                     |      |                      |     
(6 rows)

-- select asin (builtin function, not pushdown constraints, explain)
--Testcase 625:
EXPLAIN VERBOSE
SELECT asin(value1), asin(value2), asin(value3), asin(value4) FROM s3 WHERE to_hex(value2) = '64' ORDER BY 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=247.57..247.65 rows=34 width=32)
   Output: (asin(value1)), (asin((value2)::double precision)), (asin(value3)), (asin((value4)::double precision))
   Sort Key: (asin(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..246.70 rows=34 width=32)
         Output: (asin(value1)), (asin((value2)::double precision)), (asin(value3)), (asin((value4)::double precision))
         Filter: (to_hex(s3.value2) = '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT asin("value1"), asin("value2"), asin("value3"), asin("value4"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT asin(value1), asin(value2), asin(value3), asin(value4), value2 FROM public.s31influx
(12 rows)

-- select asin (builtin function, not pushdown constraints, result)
--Testcase 626:
SELECT asin(value1), asin(value2), asin(value3), asin(value4) FROM s3 WHERE to_hex(value2) = '64' ORDER BY 1;
        asin         | asin |         asin         | asin 
---------------------+------+----------------------+------
  0.1001674211615598 |      |  -0.1001674211615598 |     
 0.20135792079033082 |      | -0.20135792079033082 |     
  0.3046926540153975 |      |  -0.3046926540153975 |     
(3 rows)

-- select asin (builtin function, pushdown constraints, explain)
--Testcase 627:
EXPLAIN VERBOSE
SELECT asin(value1), asin(value2), asin(value3), asin(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4150.76..4167.74 rows=6792 width=32)
   Output: (asin(value1)), (asin((value2)::double precision)), (asin(value3)), (asin((value4)::double precision))
   Sort Key: (asin(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3718.46 rows=6792 width=32)
         Output: (asin(value1)), (asin((value2)::double precision)), (asin(value3)), (asin((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT asin("value1"), asin("value2"), asin("value3"), asin("value4") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT asin(value1), asin(value2), asin(value3), asin(value4) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select asin (builtin function, pushdown constraints, result)
--Testcase 628:
SELECT asin(value1), asin(value2), asin(value3), asin(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
        asin         | asin |         asin         | asin 
---------------------+------+----------------------+------
  0.1001674211615598 |      |  -0.1001674211615598 |     
 0.20135792079033082 |      | -0.20135792079033082 |     
  0.3046926540153975 |      |  -0.3046926540153975 |     
(3 rows)

-- select asin as nest function with (pushdown, explain)
--Testcase 629:
EXPLAIN VERBOSE
SELECT sum(value3),asin(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (asin((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), asin((sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select asin as nest function with (pushdown, result)
--Testcase 630:
SELECT sum(value3),asin(sum(value3)) FROM s3 ORDER BY 1;
ERROR:  input is out of range
-- select asin as nest with log2 (pushdown, explain)
--Testcase 631:
EXPLAIN VERBOSE
SELECT asin(log2(value1)),asin(log2(1/value1)) FROM s3;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (asin(log2(value1))), (asin(log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT asin(log2("value1")), asin(log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT asin(public.log2(value1)), asin(public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select asin as nest with log2 (pushdown, result)
--Testcase 632:
SELECT * FROM (
SELECT asin(log2(value1)),asin(log2(1/value1)) FROM s3
) as t ORDER BY 1;
        asin         |         asin         
---------------------+----------------------
 0.13794055395954533 | -0.13794055395954527
                     |                     
                     |                     
                     |                     
                     |                     
                     |                     
(6 rows)

-- select asin with non pushdown func and explicit constant (explain)
--Testcase 633:
EXPLAIN VERBOSE
SELECT asin(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (asin(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (asin(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (asin(value3)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT asin("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT asin(value3), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select asin with non pushdown func and explicit constant (result)
--Testcase 634:
SELECT asin(value3), pi(), 4.1 FROM s3 ORDER BY 1;
         asin         |        pi         | ?column? 
----------------------+-------------------+----------
  -0.3046926540153975 | 3.141592653589793 |      4.1
 -0.20135792079033082 | 3.141592653589793 |      4.1
  -0.1001674211615598 | 3.141592653589793 |      4.1
                      | 3.141592653589793 |      4.1
                      | 3.141592653589793 |      4.1
                      | 3.141592653589793 |      4.1
(6 rows)

-- select asin with order by (explain)
--Testcase 635:
EXPLAIN VERBOSE
SELECT value1, asin(1-value1) FROM s3 ORDER BY asin(1-value1);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (asin(('1'::double precision - value1)))
   Sort Key: (asin(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (asin(('1'::double precision - value1)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", asin((1 - "value1")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, asin((1::double precision - value1)) FROM public.s31influx
(11 rows)

-- select asin with order by (result)
--Testcase 636:
SELECT value1, asin(1-value1) FROM s3 ORDER BY asin(1-value1);
 value1 |         asin         
--------+----------------------
    1.1 | -0.10016742116155988
    0.3 |    0.775397496610753
    0.2 |   0.9272952180016123
    0.1 |   1.1197695149986342
    2.2 |                     
    3.3 |                     
(6 rows)

-- select asin with order by index (result)
--Testcase 637:
SELECT value1, asin(1-value1) FROM s3 ORDER BY 2,1;
 value1 |         asin         
--------+----------------------
    1.1 | -0.10016742116155988
    0.3 |    0.775397496610753
    0.2 |   0.9272952180016123
    0.1 |   1.1197695149986342
    2.2 |                     
    3.3 |                     
(6 rows)

-- select asin with order by index (result)
--Testcase 638:
SELECT value1, asin(1-value1) FROM s3 ORDER BY 1,2;
 value1 |         asin         
--------+----------------------
    0.1 |   1.1197695149986342
    0.2 |   0.9272952180016123
    0.3 |    0.775397496610753
    1.1 | -0.10016742116155988
    2.2 |                     
    3.3 |                     
(6 rows)

-- select asin and as
--Testcase 639:
SELECT asin(value3) as asin1 FROM s3 ORDER BY 1;
        asin1         
----------------------
  -0.3046926540153975
 -0.20135792079033082
  -0.1001674211615598
                     
                     
                     
(6 rows)

-- select asin(*) (stub function, explain)
--Testcase 640:
EXPLAIN VERBOSE
SELECT asin_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (asin_all())
   Sort Key: (asin_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (asin_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT asin(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.asin_all() FROM public.s31influx
(11 rows)

-- select asin(*) (stub function, result)
--Testcase 641:
SELECT * FROM (
SELECT asin_all() from s3
) as t ORDER BY 1;
                                            asin_all                                            
------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1001674211615598,,-0.1001674211615598,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.20135792079033082,,-0.20135792079033082,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.3046926540153975,,-0.3046926540153975,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,,,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,,,,,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,,,,,/influxdb_svr/)
(6 rows)

-- select asin(*) (stub function and group by tag only) (explain)
--Testcase 642:
EXPLAIN VERBOSE
SELECT asin_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (asin_all()), tag1
   Sort Key: (asin_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (asin_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT asin(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.asin_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select asin(*) (stub function and group by tag only) (result)
--Testcase 643:
SELECT asin_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                            asin_all                                            
------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1001674211615598,,-0.1001674211615598,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.20135792079033082,,-0.20135792079033082,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.3046926540153975,,-0.3046926540153975,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,,,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,,,,,/influxdb_svr/)
(5 rows)

-- select asin(*) (stub function, expose data, explain)
--Testcase 644:
EXPLAIN VERBOSE
SELECT (asin_all()::s3).* from s3 ORDER BY 1;
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((asin_all()))::s3)."time"), ((((asin_all()))::s3).tag1), ((((asin_all()))::s3).value1), ((((asin_all()))::s3).value2), ((((asin_all()))::s3).value3), ((((asin_all()))::s3).value4), ((((asin_all()))::s3).__spd_url)
   Sort Key: ((((asin_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((asin_all()))::s3)."time", (((asin_all()))::s3).tag1, (((asin_all()))::s3).value1, (((asin_all()))::s3).value2, (((asin_all()))::s3).value3, (((asin_all()))::s3).value4, (((asin_all()))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT asin(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.asin_all() FROM public.s31influx
(11 rows)

-- select asin(*) (stub function, expose data, result)
--Testcase 645:
SELECT * FROM (
SELECT (asin_all()::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |       value1        | value2 |        value3        | value4 |          __spd_url          
------------------------+------+---------------------+--------+----------------------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      |  0.1001674211615598 |        |  -0.1001674211615598 |        | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:01+09 |      | 0.20135792079033082 |        | -0.20135792079033082 |        | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |  0.3046926540153975 |        |  -0.3046926540153975 |        | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:03+09 |      |                     |        |                      |        | /influxdb_svr/
 1970-01-01 09:00:04+09 |      |                     |        |                      |        | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |                     |        |                      |        | /influxdb_svr/
(6 rows)

-- select atan (builtin function, explain)
--Testcase 646:
EXPLAIN VERBOSE
SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM s3 ORDER BY 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4162.49..4179.55 rows=6826 width=32)
   Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision))
   Sort Key: (atan(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.78 rows=6826 width=32)
         Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT atan("value1"), atan("value2"), atan("value3"), atan("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM public.s31influx
(11 rows)

-- select atan (builtin function, result)
--Testcase 647:
SELECT * FROM (
SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM s3
) as t ORDER BY 1;
        atan         |        atan        |         atan         |        atan         
---------------------+--------------------+----------------------+---------------------
 0.09966865249116204 | 1.5607966601082313 | -0.09966865249116204 | -1.5607966601082313
 0.19739555984988078 | 1.5607966601082313 | -0.19739555984988078 | -1.5607966601082313
  0.2914567944778671 | 1.5607966601082313 |  -0.2914567944778671 | -1.5607966601082313
  0.8329812666744317 | 1.5657963684609382 |  -0.8329812666744317 | -1.5657963684609382
  1.1441688336680205 | 1.5657963684609382 |  -1.1441688336680205 | -1.5657963684609382
  1.2765617616837088 | 1.5657963684609382 |  -1.2765617616837088 | -1.5657963684609382
(6 rows)

-- select atan (builtin function, not pushdown constraints, explain)
--Testcase 648:
EXPLAIN VERBOSE
SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4159.63..4176.61 rows=6792 width=32)
   Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision))
   Sort Key: (atan(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.34 rows=6792 width=32)
         Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT atan("value1"), atan("value2"), atan("value3"), atan("value4"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan(value1), atan(value2), atan(value3), atan(value4), value2 FROM public.s31influx
(12 rows)

-- select atan (builtin function, not pushdown constraints, result)
--Testcase 649:
SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
        atan        |        atan        |        atan         |        atan         
--------------------+--------------------+---------------------+---------------------
 0.8329812666744317 | 1.5657963684609382 | -0.8329812666744317 | -1.5657963684609382
 1.1441688336680205 | 1.5657963684609382 | -1.1441688336680205 | -1.5657963684609382
 1.2765617616837088 | 1.5657963684609382 | -1.2765617616837088 | -1.5657963684609382
(3 rows)

-- select atan (builtin function, pushdown constraints, explain)
--Testcase 650:
EXPLAIN VERBOSE
SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4150.76..4167.74 rows=6792 width=32)
   Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision))
   Sort Key: (atan(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3718.46 rows=6792 width=32)
         Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT atan("value1"), atan("value2"), atan("value3"), atan("value4") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select atan (builtin function, pushdown constraints, result)
--Testcase 651:
SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
        atan         |        atan        |         atan         |        atan         
---------------------+--------------------+----------------------+---------------------
 0.09966865249116204 | 1.5607966601082313 | -0.09966865249116204 | -1.5607966601082313
 0.19739555984988078 | 1.5607966601082313 | -0.19739555984988078 | -1.5607966601082313
  0.2914567944778671 | 1.5607966601082313 |  -0.2914567944778671 | -1.5607966601082313
(3 rows)

-- select atan as nest function with agg (pushdown, explain)
--Testcase 652:
EXPLAIN VERBOSE
SELECT sum(value3),atan(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (atan((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), atan((sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select atan as nest function with agg (pushdown, result)
--Testcase 653:
SELECT sum(value3),atan(sum(value3)) FROM s3 ORDER BY 1;
        sum         |        atan         
--------------------+---------------------
 -7.199999999999999 | -1.4327903031373772
(1 row)

-- select atan as nest with log2 (pushdown, explain)
--Testcase 654:
EXPLAIN VERBOSE
SELECT atan(log2(value1)),atan(log2(1/value1)) FROM s3;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (atan(log2(value1))), (atan(log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT atan(log2("value1")), atan(log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT atan(public.log2(value1)), atan(public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select atan as nest with log2 (pushdown, result)
--Testcase 655:
SELECT * FROM (
SELECT atan(log2(value1)),atan(log2(1/value1)) FROM s3
) as t ORDER BY 1;
        atan         |         atan         
---------------------+----------------------
  -1.278394850250925 |    1.278394850250925
 -1.1641274254270142 |   1.1641274254270142
 -1.0484236379153637 |   1.0484236379153637
 0.13664662085466017 | -0.13664662085466012
  0.8496386749711663 |  -0.8496386749711662
   1.044791373608735 |   -1.044791373608735
(6 rows)

-- select atan with non pushdown func and explicit constant (explain)
--Testcase 656:
EXPLAIN VERBOSE
SELECT atan(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (atan(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (atan(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (atan(value3)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT atan("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan(value3), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select atan with non pushdown func and explicit constant (result)
--Testcase 657:
SELECT atan(value3), pi(), 4.1 FROM s3 ORDER BY 1;
         atan         |        pi         | ?column? 
----------------------+-------------------+----------
  -1.2765617616837088 | 3.141592653589793 |      4.1
  -1.1441688336680205 | 3.141592653589793 |      4.1
  -0.8329812666744317 | 3.141592653589793 |      4.1
  -0.2914567944778671 | 3.141592653589793 |      4.1
 -0.19739555984988078 | 3.141592653589793 |      4.1
 -0.09966865249116204 | 3.141592653589793 |      4.1
(6 rows)

-- select atan with order by (explain)
--Testcase 658:
EXPLAIN VERBOSE
SELECT value1, atan(1-value1) FROM s3 ORDER BY atan(1-value1);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (atan(('1'::double precision - value1)))
   Sort Key: (atan(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (atan(('1'::double precision - value1)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", atan((1 - "value1")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, atan((1::double precision - value1)) FROM public.s31influx
(11 rows)

-- select atan with order by (result)
--Testcase 659:
SELECT value1, atan(1-value1) FROM s3 ORDER BY atan(1-value1);
 value1 |         atan         
--------+----------------------
    3.3 |  -1.1606689862534056
    2.2 |  -0.8760580505981934
    1.1 | -0.09966865249116212
    0.3 |   0.6107259643892086
    0.2 |   0.6747409422235526
    0.1 |   0.7328151017865066
(6 rows)

-- select atan with order by index (result)
--Testcase 660:
SELECT value1, atan(1-value1) FROM s3 ORDER BY 2,1;
 value1 |         atan         
--------+----------------------
    3.3 |  -1.1606689862534056
    2.2 |  -0.8760580505981934
    1.1 | -0.09966865249116212
    0.3 |   0.6107259643892086
    0.2 |   0.6747409422235526
    0.1 |   0.7328151017865066
(6 rows)

-- select atan with order by index (result)
--Testcase 661:
SELECT value1, atan(1-value1) FROM s3 ORDER BY 1,2;
 value1 |         atan         
--------+----------------------
    0.1 |   0.7328151017865066
    0.2 |   0.6747409422235526
    0.3 |   0.6107259643892086
    1.1 | -0.09966865249116212
    2.2 |  -0.8760580505981934
    3.3 |  -1.1606689862534056
(6 rows)

-- select atan and as
--Testcase 662:
SELECT * FROM (
SELECT atan(value3) as atan1 FROM s3
) as t ORDER BY 1;
        atan1         
----------------------
  -1.2765617616837088
  -1.1441688336680205
  -0.8329812666744317
  -0.2914567944778671
 -0.19739555984988078
 -0.09966865249116204
(6 rows)

-- select atan(*) (stub function, explain)
--Testcase 663:
EXPLAIN VERBOSE
SELECT atan_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (atan_all())
   Sort Key: (atan_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (atan_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT atan(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.atan_all() FROM public.s31influx
(11 rows)

-- select atan(*) (stub function, result)
--Testcase 664:
SELECT * FROM (
SELECT atan_all() from s3
) as t ORDER BY 1;
                                                              atan_all                                                               
-------------------------------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.09966865249116204,1.5607966601082313,-0.09966865249116204,-1.5607966601082313,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.19739555984988078,1.5607966601082313,-0.19739555984988078,-1.5607966601082313,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.2914567944778671,1.5607966601082313,-0.2914567944778671,-1.5607966601082313,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.8329812666744317,1.5657963684609382,-0.8329812666744317,-1.5657963684609382,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1441688336680205,1.5657963684609382,-1.1441688336680205,-1.5657963684609382,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1.2765617616837088,1.5657963684609382,-1.2765617616837088,-1.5657963684609382,/influxdb_svr/)
(6 rows)

-- select atan(*) (stub function and group by tag only) (explain)
--Testcase 665:
EXPLAIN VERBOSE
SELECT atan_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (atan_all()), tag1
   Sort Key: (atan_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (atan_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT atan(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.atan_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select atan(*) (stub function and group by tag only) (result)
--Testcase 666:
SELECT atan_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                              atan_all                                                               
-------------------------------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.09966865249116204,1.5607966601082313,-0.09966865249116204,-1.5607966601082313,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.19739555984988078,1.5607966601082313,-0.19739555984988078,-1.5607966601082313,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.2914567944778671,1.5607966601082313,-0.2914567944778671,-1.5607966601082313,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.8329812666744317,1.5657963684609382,-0.8329812666744317,-1.5657963684609382,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,1.1441688336680205,1.5657963684609382,-1.1441688336680205,-1.5657963684609382,/influxdb_svr/)
(5 rows)

-- select atan(*) (stub function, expose data, explain)
--Testcase 667:
EXPLAIN VERBOSE
SELECT (atan_all()::s3).* from s3 ORDER BY 1;
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((atan_all()))::s3)."time"), ((((atan_all()))::s3).tag1), ((((atan_all()))::s3).value1), ((((atan_all()))::s3).value2), ((((atan_all()))::s3).value3), ((((atan_all()))::s3).value4), ((((atan_all()))::s3).__spd_url)
   Sort Key: ((((atan_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((atan_all()))::s3)."time", (((atan_all()))::s3).tag1, (((atan_all()))::s3).value1, (((atan_all()))::s3).value2, (((atan_all()))::s3).value3, (((atan_all()))::s3).value4, (((atan_all()))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT atan(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.atan_all() FROM public.s31influx
(11 rows)

-- select multiple star functions (do not push down, raise warning and stub error) (result)
--Testcase 668:
SELECT asin_all(), acos_all(), atan_all() FROM s3 ORDER BY 1;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub asin_all() is called
CONTEXT:  PL/pgSQL function asin_all() line 3 at RAISE
-- select atan2 (builtin function, explain)
--Testcase 669:
EXPLAIN VERBOSE
SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM s3 ORDER BY 1;
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4196.62..4213.68 rows=6826 width=32)
   Output: (atan2(value1, (value2)::double precision)), (atan2((value2)::double precision, value3)), (atan2(value3, (value4)::double precision)), (atan2((value4)::double precision, value1))
   Sort Key: (atan2(s3.value1, (s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..3761.91 rows=6826 width=32)
         Output: (atan2(value1, (value2)::double precision)), (atan2((value2)::double precision, value3)), (atan2(value3, (value4)::double precision)), (atan2((value4)::double precision, value1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT atan2("value1", "value2"), atan2("value2", "value3"), atan2("value3", "value4"), atan2("value4", "value1") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM public.s31influx
(11 rows)

-- select atan2 (builtin function, result)
--Testcase 670:
SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM s3 ORDER BY 1;
         atan2         |       atan2        |        atan2        |        atan2        
-----------------------+--------------------+---------------------+---------------------
 0.0009999996666668668 | 1.5717963264615635 |  -3.140592653923126 | -1.5697963271282296
 0.0019999973333397333 | 1.5727963241282363 | -3.1395926562564536 | -1.5687963294615568
 0.0029999910000485996 | 1.5737963177949452 | -3.1385926625897445 |  -1.567796335794848
  0.005499944542673214 | 1.5762962713375697 |   -3.13609270904712 | -1.5652963822522235
  0.010999556365540751 | 1.5817958831604373 | -3.1305930972242524 | -1.5597967704293558
  0.016498502869548654 | 1.5872948296644451 | -3.1250941507202445 |  -1.554297823925348
(6 rows)

-- select atan2 (builtin function, not pushdown constraints, explain)
--Testcase 671:
EXPLAIN VERBOSE
SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4193.59..4210.57 rows=6792 width=32)
   Output: (atan2(value1, (value2)::double precision)), (atan2((value2)::double precision, value3)), (atan2(value3, (value4)::double precision)), (atan2((value4)::double precision, value1))
   Sort Key: (atan2(s3.value1, (s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..3761.30 rows=6792 width=32)
         Output: (atan2(value1, (value2)::double precision)), (atan2((value2)::double precision, value3)), (atan2(value3, (value4)::double precision)), (atan2((value4)::double precision, value1))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT atan2("value1", "value2"), atan2("value2", "value3"), atan2("value3", "value4"), atan2("value4", "value1"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1), value2 FROM public.s31influx
(12 rows)

-- select atan2 (builtin function, not pushdown constraints, result)
--Testcase 672:
SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
        atan2         |       atan2        |        atan2        |        atan2        
----------------------+--------------------+---------------------+---------------------
 0.005499944542673214 | 1.5762962713375697 |   -3.13609270904712 | -1.5652963822522235
 0.010999556365540751 | 1.5817958831604373 | -3.1305930972242524 | -1.5597967704293558
 0.016498502869548654 | 1.5872948296644451 | -3.1250941507202445 |  -1.554297823925348
(3 rows)

-- select atan2 (builtin function, pushdown constraints, explain)
--Testcase 673:
EXPLAIN VERBOSE
SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4184.72..4201.70 rows=6792 width=32)
   Output: (atan2(value1, (value2)::double precision)), (atan2((value2)::double precision, value3)), (atan2(value3, (value4)::double precision)), (atan2((value4)::double precision, value1))
   Sort Key: (atan2(s3.value1, (s3.value2)::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..3752.42 rows=6792 width=32)
         Output: (atan2(value1, (value2)::double precision)), (atan2((value2)::double precision, value3)), (atan2(value3, (value4)::double precision)), (atan2((value4)::double precision, value1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT atan2("value1", "value2"), atan2("value2", "value3"), atan2("value3", "value4"), atan2("value4", "value1") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select atan2 (builtin function, pushdown constraints, result)
--Testcase 674:
SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM s3 WHERE value2 != 200 ORDER BY 1;
         atan2         |       atan2        |        atan2        |        atan2        
-----------------------+--------------------+---------------------+---------------------
 0.0009999996666668668 | 1.5717963264615635 |  -3.140592653923126 | -1.5697963271282296
 0.0019999973333397333 | 1.5727963241282363 | -3.1395926562564536 | -1.5687963294615568
 0.0029999910000485996 | 1.5737963177949452 | -3.1385926625897445 |  -1.567796335794848
(3 rows)

-- select atan2 as nest function with agg (pushdown, explain)
--Testcase 675:
EXPLAIN VERBOSE
SELECT sum(value3), sum(value4),atan2(sum(value3), sum(value3)) FROM s3 ORDER BY 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=48)
   Output: (sum(value3)), (sum(value4)), (atan2((sum(value3)), (sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=48)
         Output: (sum(value3)), (sum(value4)), atan2((sum(value3)), (sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3"), sum("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3), sum(value4) FROM public.s31influx
(14 rows)

-- select atan2 as nest function with agg (pushdown, result)
--Testcase 676:
SELECT sum(value3), sum(value4),atan2(sum(value3), sum(value3)) FROM s3 ORDER BY 1;
        sum         | sum  |       atan2        
--------------------+------+--------------------
 -7.199999999999999 | -900 | -2.356194490192345
(1 row)

-- select atan2 as nest with log2 (pushdown, explain)
--Testcase 677:
EXPLAIN VERBOSE
SELECT atan2(log2(value1), log2(value1)),atan2(log2(1/value1), log2(1/value1)) FROM s3;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..10519.65 rows=6826 width=16)
   Output: (atan2(log2(value1), log2(value1))), (atan2(log2(('1'::double precision / value1)), log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT atan2(log2("value1"), log2("value1")), atan2(log2((1 / "value1")), log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT atan2(public.log2(value1), public.log2(value1)), atan2(public.log2((1::double precision / value1)), public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select atan2 as nest with log2 (pushdown, result)
--Testcase 678:
SELECT * FROM (
SELECT atan2(log2(value1), log2(value1)),atan2(log2(1/value1), log2(1/value1)) FROM s3
) as t ORDER BY 1;
       atan2        |       atan2        
--------------------+--------------------
 -2.356194490192345 | 0.7853981633974483
 -2.356194490192345 | 0.7853981633974483
 -2.356194490192345 | 0.7853981633974483
 0.7853981633974483 | -2.356194490192345
 0.7853981633974483 | -2.356194490192345
 0.7853981633974483 | -2.356194490192345
(6 rows)

-- select atan2 with non pushdown func and explicit constant (explain)
--Testcase 679:
EXPLAIN VERBOSE
SELECT atan2(value3, value4), pi(), 4.1 FROM s3 ORDER BY 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=48)
   Output: (atan2(value3, (value4)::double precision)), '3.141592653589793'::double precision, 4.1
   Sort Key: (atan2(s3.value3, (s3.value4)::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=48)
         Output: (atan2(value3, (value4)::double precision)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT atan2("value3", "value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT atan2(value3, value4), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select atan2 with non pushdown func and explicit constant (result)
--Testcase 680:
SELECT atan2(value3, value4), pi(), 4.1 FROM s3 ORDER BY 1;
        atan2        |        pi         | ?column? 
---------------------+-------------------+----------
  -3.140592653923126 | 3.141592653589793 |      4.1
 -3.1395926562564536 | 3.141592653589793 |      4.1
 -3.1385926625897445 | 3.141592653589793 |      4.1
   -3.13609270904712 | 3.141592653589793 |      4.1
 -3.1305930972242524 | 3.141592653589793 |      4.1
 -3.1250941507202445 | 3.141592653589793 |      4.1
(6 rows)

-- select atan2 with order by (explain)
--Testcase 681:
EXPLAIN VERBOSE
SELECT value1, atan2(1-value1, 1-value2) FROM s3 ORDER BY atan2(1-value1, 1-value2);
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Sort  (cost=4128.36..4145.42 rows=6826 width=16)
   Output: value1, (atan2(('1'::double precision - value1), ((1 - value2))::double precision))
   Sort Key: (atan2(('1'::double precision - s3.value1), ((1 - s3.value2))::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..3693.65 rows=6826 width=16)
         Output: value1, (atan2(('1'::double precision - value1), ((1 - value2))::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", atan2((1 - "value1"), (1 - "value2")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, atan2((1::double precision - value1), (1 - value2)) FROM public.s31influx
(11 rows)

-- select atan2 with order by (result)
--Testcase 682:
SELECT value1, atan2(1-value1, 1-value2) FROM s3 ORDER BY atan2(1-value1, 1-value2);
 value1 |        atan2        
--------+---------------------
    1.1 |  -3.141090141069277
    2.2 | -3.1355625759253205
    3.3 |  -3.130035379243216
    0.1 |  3.1325019949247332
    0.2 |  3.1335120213928933
    0.3 |  3.1345220643486456
(6 rows)

-- select atan2 with order by index (result)
--Testcase 683:
SELECT value1, atan2(1-value1, 1-value2) FROM s3 ORDER BY 2,1;
 value1 |        atan2        
--------+---------------------
    1.1 |  -3.141090141069277
    2.2 | -3.1355625759253205
    3.3 |  -3.130035379243216
    0.1 |  3.1325019949247332
    0.2 |  3.1335120213928933
    0.3 |  3.1345220643486456
(6 rows)

-- select atan2 with order by index (result)
--Testcase 684:
SELECT value1, atan2(1-value1, 1-value2) FROM s3 ORDER BY 1,2;
 value1 |        atan2        
--------+---------------------
    0.1 |  3.1325019949247332
    0.2 |  3.1335120213928933
    0.3 |  3.1345220643486456
    1.1 |  -3.141090141069277
    2.2 | -3.1355625759253205
    3.3 |  -3.130035379243216
(6 rows)

-- select atan2 and as
--Testcase 685:
SELECT atan2(value3, value4) as atan21 FROM s3 ORDER BY 1;
       atan21        
---------------------
  -3.140592653923126
 -3.1395926562564536
 -3.1385926625897445
   -3.13609270904712
 -3.1305930972242524
 -3.1250941507202445
(6 rows)

-- select atan2(*) (stub function, explain)
--Testcase 686:
EXPLAIN VERBOSE
SELECT atan2_all(value1) from s3 ORDER BY 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (atan2_all(value1))
   Sort Key: (atan2_all(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (atan2_all(value1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT atan2(*, "value1") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.atan2_all(value1) FROM public.s31influx
(11 rows)

-- select atan2(*) (stub function, result)
--Testcase 687:
SELECT * FROM (
SELECT atan2_all(value1) from s3
) as t ORDER BY 1;
                                                             atan2_all                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.7853981633974483,1.5697963271282296,-0.7853981633974483,-1.5697963271282296,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.7853981633974483,1.5687963294615568,-0.7853981633974483,-1.5687963294615568,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.7853981633974483,1.567796335794848,-0.7853981633974483,-1.567796335794848,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.7853981633974483,1.5652963822522235,-0.7853981633974483,-1.5652963822522235,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,0.7853981633974483,1.5597967704293558,-0.7853981633974483,-1.5597967704293558,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,0.7853981633974483,1.554297823925348,-0.7853981633974483,-1.554297823925348,/influxdb_svr/)
(6 rows)

-- select ceil (builtin function, explain)
--Testcase 688:
EXPLAIN VERBOSE
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM s3 ORDER BY 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4162.49..4179.55 rows=6826 width=32)
   Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision))
   Sort Key: (ceil(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.78 rows=6826 width=32)
         Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT ceil("value1"), ceil("value2"), ceil("value3"), ceil("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM public.s31influx
(11 rows)

-- select ceil (builtin function, result)
--Testcase 689:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM s3 ORDER BY 1;
 ceil | ceil | ceil | ceil 
------+------+------+------
    1 |  100 |   -0 | -100
    1 |  100 |   -0 | -100
    1 |  100 |   -0 | -100
    2 |  200 |   -1 | -200
    3 |  200 |   -2 | -200
    4 |  200 |   -3 | -200
(6 rows)

-- select ceil (builtin function, not pushdown constraints, explain)
--Testcase 690:
EXPLAIN VERBOSE
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4159.63..4176.61 rows=6792 width=32)
   Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision))
   Sort Key: (ceil(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.34 rows=6792 width=32)
         Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT ceil("value1"), ceil("value2"), ceil("value3"), ceil("value4"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), value2 FROM public.s31influx
(12 rows)

-- select ceil (builtin function, not pushdown constraints, result)
--Testcase 691:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
 ceil | ceil | ceil | ceil 
------+------+------+------
    2 |  200 |   -1 | -200
    3 |  200 |   -2 | -200
    4 |  200 |   -3 | -200
(3 rows)

-- select ceil (builtin function, pushdown constraints, explain)
--Testcase 692:
EXPLAIN VERBOSE
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4150.76..4167.74 rows=6792 width=32)
   Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision))
   Sort Key: (ceil(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3718.46 rows=6792 width=32)
         Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT ceil("value1"), ceil("value2"), ceil("value3"), ceil("value4") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select ceil (builtin function, pushdown constraints, result)
--Testcase 693:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
 ceil | ceil | ceil | ceil 
------+------+------+------
    1 |  100 |   -0 | -100
    1 |  100 |   -0 | -100
    1 |  100 |   -0 | -100
(3 rows)

-- select ceil as nest function with agg (pushdown, explain)
--Testcase 694:
EXPLAIN VERBOSE
SELECT sum(value3),ceil(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (ceil((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), ceil((sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select ceil as nest function with agg (pushdown, result)
--Testcase 695:
SELECT sum(value3),ceil(sum(value3)) FROM s3 ORDER BY 1;
        sum         | ceil 
--------------------+------
 -7.199999999999999 |   -7
(1 row)

-- select ceil as nest with log2 (pushdown, explain)
--Testcase 696:
EXPLAIN VERBOSE
SELECT ceil(log2(value1)),ceil(log2(1/value1)) FROM s3;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (ceil(log2(value1))), (ceil(log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT ceil(log2("value1")), ceil(log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ceil(public.log2(value1)), ceil(public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select ceil as nest with log2 (pushdown, result)
--Testcase 697:
SELECT * FROM (
SELECT ceil(log2(value1)),ceil(log2(1/value1)) FROM s3
) as t ORDER BY 1;
 ceil | ceil 
------+------
   -3 |    4
   -2 |    3
   -1 |    2
    1 |   -0
    2 |   -1
    2 |   -1
(6 rows)

-- select ceil with non pushdown func and explicit constant (explain)
--Testcase 698:
EXPLAIN VERBOSE
SELECT ceil(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (ceil(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (ceil(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (ceil(value3)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT ceil("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ceil(value3), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select ceil with non pushdown func and explicit constant (result)
--Testcase 699:
SELECT * FROM (
SELECT ceil(value3), pi(), 4.1 FROM s3
) as t ORDER BY 1;
 ceil |        pi         | ?column? 
------+-------------------+----------
   -3 | 3.141592653589793 |      4.1
   -2 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
   -0 | 3.141592653589793 |      4.1
   -0 | 3.141592653589793 |      4.1
   -0 | 3.141592653589793 |      4.1
(6 rows)

-- select ceil with order by (explain)
--Testcase 700:
EXPLAIN VERBOSE
SELECT value1, ceil(1-value1) FROM s3 ORDER BY ceil(1-value1);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (ceil(('1'::double precision - value1)))
   Sort Key: (ceil(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (ceil(('1'::double precision - value1)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", ceil((1 - "value1")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, ceil((1::double precision - value1)) FROM public.s31influx
(11 rows)

-- select ceil with order by (result)
--Testcase 701:
SELECT value1, ceil(1-value1) FROM s3 ORDER BY ceil(1-value1);
 value1 | ceil 
--------+------
    3.3 |   -2
    2.2 |   -1
    1.1 |   -0
    0.1 |    1
    0.2 |    1
    0.3 |    1
(6 rows)

-- select ceil with order by index (result)
--Testcase 702:
SELECT value1, ceil(1-value1) FROM s3 ORDER BY 2,1;
 value1 | ceil 
--------+------
    3.3 |   -2
    2.2 |   -1
    1.1 |   -0
    0.1 |    1
    0.2 |    1
    0.3 |    1
(6 rows)

-- select ceil with order by index (result)
--Testcase 703:
SELECT value1, ceil(1-value1) FROM s3 ORDER BY 1,2;
 value1 | ceil 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |   -0
    2.2 |   -1
    3.3 |   -2
(6 rows)

-- select ceil and as
--Testcase 704:
SELECT * FROM (
SELECT ceil(value3) as ceil1 FROM s3
) as t ORDER BY 1;
 ceil1 
-------
    -3
    -2
    -1
    -0
    -0
    -0
(6 rows)

-- select ceil(*) (stub function, explain)
--Testcase 705:
EXPLAIN VERBOSE
SELECT ceil_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (ceil_all())
   Sort Key: (ceil_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (ceil_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT ceil(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.ceil_all() FROM public.s31influx
(11 rows)

-- select ceil(*) (stub function, result)
--Testcase 706:
SELECT * FROM (
SELECT ceil_all() from s3
) as t ORDER BY 1;
                             ceil_all                              
-------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,1,100,-0,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,1,100,-0,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,1,100,-0,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,2,200,-1,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,3,200,-2,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,4,200,-3,-200,/influxdb_svr/)
(6 rows)

-- select ceil(*) (stub function and group by tag only) (explain)
--Testcase 707:
EXPLAIN VERBOSE
SELECT ceil_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (ceil_all()), tag1
   Sort Key: (ceil_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (ceil_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT ceil(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.ceil_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select ceil(*) (stub function and group by tag only) (result)
--Testcase 708:
SELECT ceil_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                             ceil_all                              
-------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,1,100,-0,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,1,100,-0,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,1,100,-0,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,2,200,-1,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,3,200,-2,-200,/influxdb_svr/)
(5 rows)

-- select ceil(*) (stub function, expose data, explain)
--Testcase 709:
EXPLAIN VERBOSE
SELECT (ceil_all()::s3).* from s3 ORDER BY 1;
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((ceil_all()))::s3)."time"), ((((ceil_all()))::s3).tag1), ((((ceil_all()))::s3).value1), ((((ceil_all()))::s3).value2), ((((ceil_all()))::s3).value3), ((((ceil_all()))::s3).value4), ((((ceil_all()))::s3).__spd_url)
   Sort Key: ((((ceil_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((ceil_all()))::s3)."time", (((ceil_all()))::s3).tag1, (((ceil_all()))::s3).value1, (((ceil_all()))::s3).value2, (((ceil_all()))::s3).value3, (((ceil_all()))::s3).value4, (((ceil_all()))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT ceil(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.ceil_all() FROM public.s31influx
(11 rows)

-- select ceil(*) (stub function, expose data, result)
--Testcase 710:
SELECT * FROM (
SELECT (ceil_all()::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      |      1 |    100 |     -0 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:01+09 |      |      1 |    100 |     -0 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |      1 |    100 |     -0 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:03+09 |      |      2 |    200 |     -1 |   -200 | /influxdb_svr/
 1970-01-01 09:00:04+09 |      |      3 |    200 |     -2 |   -200 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |      4 |    200 |     -3 |   -200 | /influxdb_svr/
(6 rows)

-- select cos (builtin function, explain)
--Testcase 711:
EXPLAIN VERBOSE
SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM s3 ORDER BY 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4162.49..4179.55 rows=6826 width=32)
   Output: (cos(value1)), (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision))
   Sort Key: (cos(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.78 rows=6826 width=32)
         Output: (cos(value1)), (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT cos("value1"), cos("value2"), cos("value3"), cos("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM public.s31influx
(11 rows)

-- select cos (builtin function, result)
--Testcase 712:
SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM s3 ORDER BY 1;
         cos         |         cos         |         cos         |         cos         
---------------------+---------------------+---------------------+---------------------
  -0.987479769908865 | 0.48718767500700594 |  -0.987479769908865 | 0.48718767500700594
 -0.5885011172553458 | 0.48718767500700594 | -0.5885011172553458 | 0.48718767500700594
  0.4535961214255773 | 0.48718767500700594 |  0.4535961214255773 | 0.48718767500700594
   0.955336489125606 |  0.8623188722876839 |   0.955336489125606 |  0.8623188722876839
  0.9800665778412416 |  0.8623188722876839 |  0.9800665778412416 |  0.8623188722876839
  0.9950041652780257 |  0.8623188722876839 |  0.9950041652780257 |  0.8623188722876839
(6 rows)

-- select cos (builtin function, not pushdown constraints, explain)
--Testcase 713:
EXPLAIN VERBOSE
SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4159.63..4176.61 rows=6792 width=32)
   Output: (cos(value1)), (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision))
   Sort Key: (cos(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.34 rows=6792 width=32)
         Output: (cos(value1)), (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT cos("value1"), cos("value2"), cos("value3"), cos("value4"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT cos(value1), cos(value2), cos(value3), cos(value4), value2 FROM public.s31influx
(12 rows)

-- select cos (builtin function, not pushdown constraints, result)
--Testcase 714:
SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
         cos         |         cos         |         cos         |         cos         
---------------------+---------------------+---------------------+---------------------
  -0.987479769908865 | 0.48718767500700594 |  -0.987479769908865 | 0.48718767500700594
 -0.5885011172553458 | 0.48718767500700594 | -0.5885011172553458 | 0.48718767500700594
  0.4535961214255773 | 0.48718767500700594 |  0.4535961214255773 | 0.48718767500700594
(3 rows)

-- select cos (builtin function, pushdown constraints, explain)
--Testcase 715:
EXPLAIN VERBOSE
SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4150.76..4167.74 rows=6792 width=32)
   Output: (cos(value1)), (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision))
   Sort Key: (cos(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3718.46 rows=6792 width=32)
         Output: (cos(value1)), (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT cos("value1"), cos("value2"), cos("value3"), cos("value4") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select cos (builtin function, pushdown constraints, result)
--Testcase 716:
SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
        cos         |        cos         |        cos         |        cos         
--------------------+--------------------+--------------------+--------------------
  0.955336489125606 | 0.8623188722876839 |  0.955336489125606 | 0.8623188722876839
 0.9800665778412416 | 0.8623188722876839 | 0.9800665778412416 | 0.8623188722876839
 0.9950041652780257 | 0.8623188722876839 | 0.9950041652780257 | 0.8623188722876839
(3 rows)

-- select cos as nest function with agg (pushdown, explain)
--Testcase 717:
EXPLAIN VERBOSE
SELECT sum(value3),cos(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (cos((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), cos((sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select cos as nest function with agg (pushdown, result)
--Testcase 718:
SELECT sum(value3),cos(sum(value3)) FROM s3 ORDER BY 1;
        sum         |        cos         
--------------------+--------------------
 -7.199999999999999 | 0.6083513145322552
(1 row)

-- select cos as nest with log2 (pushdown, explain)
--Testcase 719:
EXPLAIN VERBOSE
SELECT cos(log2(value1)),cos(log2(1/value1)) FROM s3;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (cos(log2(value1))), (cos(log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT cos(log2("value1")), cos(log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT cos(public.log2(value1)), cos(public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select cos as nest with log2 (pushdown, result)
--Testcase 720:
SELECT * FROM (
SELECT cos(log2(value1)),cos(log2(1/value1)) FROM s3
) as t ORDER BY 1;
         cos          |         cos          
----------------------+----------------------
  -0.9837835835253638 |  -0.9837835835253638
  -0.6824664254067903 |  -0.6824664254067903
 -0.16540560524328635 | -0.16540560524328635
 -0.15108887216909284 | -0.15108887216909284
   0.4198615822391889 |   0.4198615822391891
   0.9905612762159983 |   0.9905612762159983
(6 rows)

-- select cos with non pushdown func and explicit constant (explain)
--Testcase 721:
EXPLAIN VERBOSE
SELECT cos(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (cos(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (cos(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (cos(value3)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT cos("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT cos(value3), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select cos with non pushdown func and explicit constant (result)
--Testcase 722:
SELECT cos(value3), pi(), 4.1 FROM s3 ORDER BY 1;
         cos         |        pi         | ?column? 
---------------------+-------------------+----------
  -0.987479769908865 | 3.141592653589793 |      4.1
 -0.5885011172553458 | 3.141592653589793 |      4.1
  0.4535961214255773 | 3.141592653589793 |      4.1
   0.955336489125606 | 3.141592653589793 |      4.1
  0.9800665778412416 | 3.141592653589793 |      4.1
  0.9950041652780257 | 3.141592653589793 |      4.1
(6 rows)

-- select cos with order by (explain)
--Testcase 723:
EXPLAIN VERBOSE
SELECT value1, cos(1-value1) FROM s3 ORDER BY cos(1-value1);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (cos(('1'::double precision - value1)))
   Sort Key: (cos(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (cos(('1'::double precision - value1)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", cos((1 - "value1")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, cos((1::double precision - value1)) FROM public.s31influx
(11 rows)

-- select cos with order by (result)
--Testcase 724:
SELECT value1, cos(1-value1) FROM s3 ORDER BY cos(1-value1);
 value1 |        cos         
--------+--------------------
    3.3 | -0.666276021279824
    2.2 | 0.3623577544766734
    0.1 | 0.6216099682706645
    0.2 | 0.6967067093471655
    0.3 | 0.7648421872844884
    1.1 | 0.9950041652780257
(6 rows)

-- select cos with order by index (result)
--Testcase 725:
SELECT value1, cos(1-value1) FROM s3 ORDER BY 2,1;
 value1 |        cos         
--------+--------------------
    3.3 | -0.666276021279824
    2.2 | 0.3623577544766734
    0.1 | 0.6216099682706645
    0.2 | 0.6967067093471655
    0.3 | 0.7648421872844884
    1.1 | 0.9950041652780257
(6 rows)

-- select cos with order by index (result)
--Testcase 726:
SELECT value1, cos(1-value1) FROM s3 ORDER BY 1,2;
 value1 |        cos         
--------+--------------------
    0.1 | 0.6216099682706645
    0.2 | 0.6967067093471655
    0.3 | 0.7648421872844884
    1.1 | 0.9950041652780257
    2.2 | 0.3623577544766734
    3.3 | -0.666276021279824
(6 rows)

-- select cos and as
--Testcase 727:
SELECT cos(value3) as cos1 FROM s3 ORDER BY 1;
        cos1         
---------------------
  -0.987479769908865
 -0.5885011172553458
  0.4535961214255773
   0.955336489125606
  0.9800665778412416
  0.9950041652780257
(6 rows)

-- select cos(*) (stub function, explain)
--Testcase 728:
EXPLAIN VERBOSE
SELECT cos_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (cos_all())
   Sort Key: (cos_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (cos_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT cos(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.cos_all() FROM public.s31influx
(11 rows)

-- select cos(*) (stub function, result)
--Testcase 729:
SELECT * FROM (
SELECT cos_all() from s3
) as t ORDER BY 1;
                                                             cos_all                                                             
---------------------------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.9950041652780257,0.8623188722876839,0.9950041652780257,0.8623188722876839,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.9800665778412416,0.8623188722876839,0.9800665778412416,0.8623188722876839,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.955336489125606,0.8623188722876839,0.955336489125606,0.8623188722876839,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.4535961214255773,0.48718767500700594,0.4535961214255773,0.48718767500700594,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,-0.5885011172553458,0.48718767500700594,-0.5885011172553458,0.48718767500700594,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,-0.987479769908865,0.48718767500700594,-0.987479769908865,0.48718767500700594,/influxdb_svr/)
(6 rows)

-- select cos(*) (stub function and group by tag only) (explain)
--Testcase 730:
EXPLAIN VERBOSE
SELECT cos_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (cos_all()), tag1
   Sort Key: (cos_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (cos_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT cos(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.cos_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select cos(*) (stub function and group by tag only) (result)
--Testcase 731:
SELECT cos_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                             cos_all                                                             
---------------------------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.9950041652780257,0.8623188722876839,0.9950041652780257,0.8623188722876839,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.9800665778412416,0.8623188722876839,0.9800665778412416,0.8623188722876839,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.955336489125606,0.8623188722876839,0.955336489125606,0.8623188722876839,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.4535961214255773,0.48718767500700594,0.4535961214255773,0.48718767500700594,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,-0.5885011172553458,0.48718767500700594,-0.5885011172553458,0.48718767500700594,/influxdb_svr/)
(5 rows)

-- select exp (builtin function, explain)
--Testcase 732:
EXPLAIN VERBOSE
SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM s3 ORDER BY 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4162.49..4179.55 rows=6826 width=32)
   Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision))
   Sort Key: (exp(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.78 rows=6826 width=32)
         Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT exp("value1"), exp("value2"), exp("value3"), exp("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM public.s31influx
(11 rows)

-- select exp (builtin function, result)
--Testcase 733:
SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM s3 ORDER BY 1;
        exp         |          exp           |         exp          |          exp           
--------------------+------------------------+----------------------+------------------------
 1.1051709180756477 | 2.6881171418161356e+43 |   0.9048374180359595 |  3.720075976020836e-44
 1.2214027581601699 | 2.6881171418161356e+43 |   0.8187307530779819 |  3.720075976020836e-44
 1.3498588075760032 | 2.6881171418161356e+43 |   0.7408182206817179 |  3.720075976020836e-44
 3.0041660239464334 |   7.22597376812575e+86 |   0.3328710836980795 | 1.3838965267367376e-87
  9.025013499434122 |   7.22597376812575e+86 |  0.11080315836233386 | 1.3838965267367376e-87
 27.112638920657883 |   7.22597376812575e+86 | 0.036883167401240015 | 1.3838965267367376e-87
(6 rows)

-- select exp (builtin function, not pushdown constraints, explain)
--Testcase 734:
EXPLAIN VERBOSE
SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4159.63..4176.61 rows=6792 width=32)
   Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision))
   Sort Key: (exp(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.34 rows=6792 width=32)
         Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT exp("value1"), exp("value2"), exp("value3"), exp("value4"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT exp(value1), exp(value2), exp(value3), exp(value4), value2 FROM public.s31influx
(12 rows)

-- select exp (builtin function, not pushdown constraints, result)
--Testcase 735:
SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
        exp         |         exp          |         exp          |          exp           
--------------------+----------------------+----------------------+------------------------
 3.0041660239464334 | 7.22597376812575e+86 |   0.3328710836980795 | 1.3838965267367376e-87
  9.025013499434122 | 7.22597376812575e+86 |  0.11080315836233386 | 1.3838965267367376e-87
 27.112638920657883 | 7.22597376812575e+86 | 0.036883167401240015 | 1.3838965267367376e-87
(3 rows)

-- select exp (builtin function, pushdown constraints, explain)
--Testcase 736:
EXPLAIN VERBOSE
SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4150.76..4167.74 rows=6792 width=32)
   Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision))
   Sort Key: (exp(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3718.46 rows=6792 width=32)
         Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT exp("value1"), exp("value2"), exp("value3"), exp("value4") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select exp (builtin function, pushdown constraints, result)
--Testcase 737:
SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
        exp         |          exp           |        exp         |          exp          
--------------------+------------------------+--------------------+-----------------------
 1.1051709180756477 | 2.6881171418161356e+43 | 0.9048374180359595 | 3.720075976020836e-44
 1.2214027581601699 | 2.6881171418161356e+43 | 0.8187307530779819 | 3.720075976020836e-44
 1.3498588075760032 | 2.6881171418161356e+43 | 0.7408182206817179 | 3.720075976020836e-44
(3 rows)

-- select exp as nest function with agg (pushdown, explain)
--Testcase 738:
EXPLAIN VERBOSE
SELECT sum(value3),exp(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (exp((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), exp((sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select exp as nest function with agg (pushdown, result)
--Testcase 739:
SELECT sum(value3),exp(sum(value3)) FROM s3 ORDER BY 1;
        sum         |          exp          
--------------------+-----------------------
 -7.199999999999999 | 0.0007465858083766799
(1 row)

-- select exp as nest with log2 (pushdown, explain)
--Testcase 740:
EXPLAIN VERBOSE
SELECT exp(log2(value1)),exp(log2(1/value1)) FROM s3;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (exp(log2(value1))), (exp(log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT exp(log2("value1")), exp(log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT exp(public.log2(value1)), exp(public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select exp as nest with log2 (pushdown, result)
--Testcase 741:
SELECT * FROM (
SELECT exp(log2(value1)),exp(log2(1/value1)) FROM s3
) as t ORDER BY 1;
         exp          |         exp         
----------------------+---------------------
 0.036083192820787216 |  27.713733786437786
  0.09808428735752978 |  10.195312898128853
  0.17605380962499628 |   5.680081573526024
   1.1474057491358827 |  0.8715312789334596
    3.118972197745508 | 0.32061843985747357
    5.598317042626601 | 0.17862511043690787
(6 rows)

-- select exp with non pushdown func and explicit constant (explain)
--Testcase 742:
EXPLAIN VERBOSE
SELECT exp(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (exp(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (exp(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (exp(value3)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT exp("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT exp(value3), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select exp with non pushdown func and explicit constant (result)
--Testcase 743:
SELECT exp(value3), pi(), 4.1 FROM s3 ORDER BY 1;
         exp          |        pi         | ?column? 
----------------------+-------------------+----------
 0.036883167401240015 | 3.141592653589793 |      4.1
  0.11080315836233386 | 3.141592653589793 |      4.1
   0.3328710836980795 | 3.141592653589793 |      4.1
   0.7408182206817179 | 3.141592653589793 |      4.1
   0.8187307530779819 | 3.141592653589793 |      4.1
   0.9048374180359595 | 3.141592653589793 |      4.1
(6 rows)

-- select exp with order by (explain)
--Testcase 744:
EXPLAIN VERBOSE
SELECT value1, exp(1-value1) FROM s3 ORDER BY exp(1-value1);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (exp(('1'::double precision - value1)))
   Sort Key: (exp(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (exp(('1'::double precision - value1)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", exp((1 - "value1")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, exp((1::double precision - value1)) FROM public.s31influx
(11 rows)

-- select exp with order by (result)
--Testcase 745:
SELECT value1, exp(1-value1) FROM s3 ORDER BY exp(1-value1);
 value1 |         exp         
--------+---------------------
    3.3 | 0.10025884372280375
    2.2 |   0.301194211912202
    1.1 |  0.9048374180359595
    0.3 |  2.0137527074704766
    0.2 |   2.225540928492468
    0.1 |    2.45960311115695
(6 rows)

-- select exp with order by index (result)
--Testcase 746:
SELECT value1, exp(1-value1) FROM s3 ORDER BY 2,1;
 value1 |         exp         
--------+---------------------
    3.3 | 0.10025884372280375
    2.2 |   0.301194211912202
    1.1 |  0.9048374180359595
    0.3 |  2.0137527074704766
    0.2 |   2.225540928492468
    0.1 |    2.45960311115695
(6 rows)

-- select exp with order by index (result)
--Testcase 747:
SELECT value1, exp(1-value1) FROM s3 ORDER BY 1,2;
 value1 |         exp         
--------+---------------------
    0.1 |    2.45960311115695
    0.2 |   2.225540928492468
    0.3 |  2.0137527074704766
    1.1 |  0.9048374180359595
    2.2 |   0.301194211912202
    3.3 | 0.10025884372280375
(6 rows)

-- select exp and as
--Testcase 748:
SELECT exp(value3) as exp1 FROM s3 ORDER BY 1;
         exp1         
----------------------
 0.036883167401240015
  0.11080315836233386
   0.3328710836980795
   0.7408182206817179
   0.8187307530779819
   0.9048374180359595
(6 rows)

-- select exp(*) (stub function, explain)
--Testcase 749:
EXPLAIN VERBOSE
SELECT exp_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (exp_all())
   Sort Key: (exp_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (exp_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT exp(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.exp_all() FROM public.s31influx
(11 rows)

-- select exp(*) (stub function, result)
--Testcase 750:
SELECT * FROM (
SELECT exp_all() from s3
) as t ORDER BY 1;
                                                                exp_all                                                                 
----------------------------------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,1.1051709180756477,2.6881171418161356e+43,0.9048374180359595,3.720075976020836e-44,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,1.2214027581601699,2.6881171418161356e+43,0.8187307530779819,3.720075976020836e-44,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,1.3498588075760032,2.6881171418161356e+43,0.7408182206817179,3.720075976020836e-44,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,3.0041660239464334,7.22597376812575e+86,0.3328710836980795,1.3838965267367376e-87,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,9.025013499434122,7.22597376812575e+86,0.11080315836233386,1.3838965267367376e-87,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,27.112638920657883,7.22597376812575e+86,0.036883167401240015,1.3838965267367376e-87,/influxdb_svr/)
(6 rows)

-- select exp(*) (stub function and group by tag only) (explain)
--Testcase 751:
EXPLAIN VERBOSE
SELECT exp_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (exp_all()), tag1
   Sort Key: (exp_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (exp_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT exp(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.exp_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select exp(*) (stub function and group by tag only) (result)
--Testcase 752:
SELECT exp_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                exp_all                                                                 
----------------------------------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,1.1051709180756477,2.6881171418161356e+43,0.9048374180359595,3.720075976020836e-44,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,1.2214027581601699,2.6881171418161356e+43,0.8187307530779819,3.720075976020836e-44,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,1.3498588075760032,2.6881171418161356e+43,0.7408182206817179,3.720075976020836e-44,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,3.0041660239464334,7.22597376812575e+86,0.3328710836980795,1.3838965267367376e-87,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,9.025013499434122,7.22597376812575e+86,0.11080315836233386,1.3838965267367376e-87,/influxdb_svr/)
(5 rows)

-- select multiple star functions (do not push down, raise warning and stub error) (result)
--Testcase 753:
SELECT ceil_all(), cos_all(), exp_all() FROM s3 ORDER BY 1;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub ceil_all() is called
CONTEXT:  PL/pgSQL function ceil_all() line 3 at RAISE
-- select floor (builtin function, explain)
--Testcase 754:
EXPLAIN VERBOSE
SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM s3 ORDER BY 1;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4162.49..4179.55 rows=6826 width=32)
   Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision))
   Sort Key: (floor(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.78 rows=6826 width=32)
         Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT floor("value1"), floor("value2"), floor("value3"), floor("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM public.s31influx
(11 rows)

-- select floor (builtin function, result)
--Testcase 755:
SELECT * FROM (
SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM s3
) as t ORDER BY 1, 2, 3, 4;
 floor | floor | floor | floor 
-------+-------+-------+-------
     0 |   100 |    -1 |  -100
     0 |   100 |    -1 |  -100
     0 |   100 |    -1 |  -100
     1 |   200 |    -2 |  -200
     2 |   200 |    -3 |  -200
     3 |   200 |    -4 |  -200
(6 rows)

-- select floor (builtin function, not pushdown constraints, explain)
--Testcase 756:
EXPLAIN VERBOSE
SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4159.63..4176.61 rows=6792 width=32)
   Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision))
   Sort Key: (floor(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.34 rows=6792 width=32)
         Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT floor("value1"), floor("value2"), floor("value3"), floor("value4"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT floor(value1), floor(value2), floor(value3), floor(value4), value2 FROM public.s31influx
(12 rows)

-- select floor (builtin function, not pushdown constraints, result)
--Testcase 757:
SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
 floor | floor | floor | floor 
-------+-------+-------+-------
     1 |   200 |    -2 |  -200
     2 |   200 |    -3 |  -200
     3 |   200 |    -4 |  -200
(3 rows)

-- select floor (builtin function, pushdown constraints, explain)
--Testcase 758:
EXPLAIN VERBOSE
SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4150.76..4167.74 rows=6792 width=32)
   Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision))
   Sort Key: (floor(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3718.46 rows=6792 width=32)
         Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT floor("value1"), floor("value2"), floor("value3"), floor("value4") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select floor (builtin function, pushdown constraints, result)
--Testcase 759:
SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
 floor | floor | floor | floor 
-------+-------+-------+-------
     0 |   100 |    -1 |  -100
     0 |   100 |    -1 |  -100
     0 |   100 |    -1 |  -100
(3 rows)

-- select floor as nest function with agg (pushdown, explain)
--Testcase 760:
EXPLAIN VERBOSE
SELECT sum(value3),floor(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (floor((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), floor((sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select floor as nest function with agg (pushdown, result)
--Testcase 761:
SELECT sum(value3),floor(sum(value3)) FROM s3 ORDER BY 1;
        sum         | floor 
--------------------+-------
 -7.199999999999999 |    -8
(1 row)

-- select floor as nest with log2 (pushdown, explain)
--Testcase 762:
EXPLAIN VERBOSE
SELECT floor(log2(value1)),floor(log2(1/value1)) FROM s3;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (floor(log2(value1))), (floor(log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT floor(log2("value1")), floor(log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT floor(public.log2(value1)), floor(public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select floor as nest with log2 (pushdown, result)
--Testcase 763:
SELECT * FROM (
SELECT floor(log2(value1)),floor(log2(1/value1)) FROM s3
) as t ORDER BY 1;
 floor | floor 
-------+-------
    -4 |     3
    -3 |     2
    -2 |     1
     0 |    -1
     1 |    -2
     1 |    -2
(6 rows)

-- select floor with non pushdown func and explicit constant (explain)
--Testcase 764:
EXPLAIN VERBOSE
SELECT floor(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (floor(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (floor(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (floor(value3)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT floor("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT floor(value3), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select floor with non pushdown func and explicit constant (result)
--Testcase 765:
SELECT * FROM (
SELECT floor(value3), pi(), 4.1 FROM s3
) as t ORDER BY 1;
 floor |        pi         | ?column? 
-------+-------------------+----------
    -4 | 3.141592653589793 |      4.1
    -3 | 3.141592653589793 |      4.1
    -2 | 3.141592653589793 |      4.1
    -1 | 3.141592653589793 |      4.1
    -1 | 3.141592653589793 |      4.1
    -1 | 3.141592653589793 |      4.1
(6 rows)

-- select floor with order by (explain)
--Testcase 766:
EXPLAIN VERBOSE
SELECT value1, floor(1-value1) FROM s3 ORDER BY floor(1-value1);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (floor(('1'::double precision - value1)))
   Sort Key: (floor(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (floor(('1'::double precision - value1)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", floor((1 - "value1")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, floor((1::double precision - value1)) FROM public.s31influx
(11 rows)

-- select floor with order by (result)
--Testcase 767:
SELECT value1, floor(1-value1) FROM s3 ORDER BY floor(1-value1);
 value1 | floor 
--------+-------
    3.3 |    -3
    2.2 |    -2
    1.1 |    -1
    0.1 |     0
    0.2 |     0
    0.3 |     0
(6 rows)

-- select floor with order by index (result)
--Testcase 768:
SELECT value1, floor(1-value1) FROM s3 ORDER BY 2,1;
 value1 | floor 
--------+-------
    3.3 |    -3
    2.2 |    -2
    1.1 |    -1
    0.1 |     0
    0.2 |     0
    0.3 |     0
(6 rows)

-- select floor with order by index (result)
--Testcase 769:
SELECT value1, floor(1-value1) FROM s3 ORDER BY 1,2;
 value1 | floor 
--------+-------
    0.1 |     0
    0.2 |     0
    0.3 |     0
    1.1 |    -1
    2.2 |    -2
    3.3 |    -3
(6 rows)

-- select floor and as
--Testcase 770:
SELECT floor(value3) as floor1 FROM s3 ORDER BY 1;
 floor1 
--------
     -4
     -3
     -2
     -1
     -1
     -1
(6 rows)

-- select floor(*) (stub function, explain)
--Testcase 771:
EXPLAIN VERBOSE
SELECT floor_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (floor_all())
   Sort Key: (floor_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (floor_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT floor(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.floor_all() FROM public.s31influx
(11 rows)

-- select floor(*) (stub function, result)
--Testcase 772:
SELECT * FROM (
SELECT floor_all() from s3
) as t ORDER BY 1;
                             floor_all                             
-------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0,100,-1,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0,100,-1,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0,100,-1,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1,200,-2,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2,200,-3,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,3,200,-4,-200,/influxdb_svr/)
(6 rows)

-- select floor(*) (stub function and group by tag only) (explain)
--Testcase 773:
EXPLAIN VERBOSE
SELECT floor_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (floor_all()), tag1
   Sort Key: (floor_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (floor_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT floor(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.floor_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select floor(*) (stub function and group by tag only) (result)
--Testcase 774:
SELECT floor_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                             floor_all                             
-------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0,100,-1,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0,100,-1,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0,100,-1,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1,200,-2,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2,200,-3,-200,/influxdb_svr/)
(5 rows)

-- select floor(*) (stub function, expose data, explain)
--Testcase 775:
EXPLAIN VERBOSE
SELECT (floor_all()::s3).* from s3 ORDER BY 1;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((floor_all()))::s3)."time"), ((((floor_all()))::s3).tag1), ((((floor_all()))::s3).value1), ((((floor_all()))::s3).value2), ((((floor_all()))::s3).value3), ((((floor_all()))::s3).value4), ((((floor_all()))::s3).__spd_url)
   Sort Key: ((((floor_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((floor_all()))::s3)."time", (((floor_all()))::s3).tag1, (((floor_all()))::s3).value1, (((floor_all()))::s3).value2, (((floor_all()))::s3).value3, (((floor_all()))::s3).value4, (((floor_all()))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT floor(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.floor_all() FROM public.s31influx
(11 rows)

-- select floor(*) (stub function, expose data, result)
--Testcase 776:
SELECT * FROM (
SELECT (floor_all()::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      |      0 |    100 |     -1 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:01+09 |      |      0 |    100 |     -1 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |      0 |    100 |     -1 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:03+09 |      |      1 |    200 |     -2 |   -200 | /influxdb_svr/
 1970-01-01 09:00:04+09 |      |      2 |    200 |     -3 |   -200 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |      3 |    200 |     -4 |   -200 | /influxdb_svr/
(6 rows)

-- select ln (builtin function, explain)
--Testcase 777:
EXPLAIN VERBOSE
SELECT ln(value1), ln(value2), ln(value3), ln(value4) FROM s3 ORDER BY 1;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Sort  (cost=4162.49..4179.55 rows=6826 width=32)
   Output: (ln(value1)), (ln((value2)::double precision)), (ln(value3)), (ln((value4)::double precision))
   Sort Key: (ln(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.78 rows=6826 width=32)
         Output: (ln(value1)), (ln((value2)::double precision)), (ln(value3)), (ln((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT ln("value1"), ln("value2"), ln("value3"), ln("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ln(value1), ln(value2), ln(value3), ln(value4) FROM public.s31influx
(11 rows)

-- select ln (builtin function, result)
--Testcase 778:
SELECT * FROM (
SELECT ln(value1), ln(value2), ln(value3), ln(value4) FROM s3
) as t ORDER BY 1, 2, 3, 4;
         ln          |        ln         | ln | ln 
---------------------+-------------------+----+----
 -2.3025850929940455 | 4.605170185988092 |    |   
 -1.6094379124341003 | 4.605170185988092 |    |   
 -1.2039728043259361 | 4.605170185988092 |    |   
 0.09531017980432493 | 5.298317366548036 |    |   
  0.7884573603642703 | 5.298317366548036 |    |   
  1.1939224684724346 | 5.298317366548036 |    |   
(6 rows)

-- select ln (builtin function, not pushdown constraints, explain)
--Testcase 779:
EXPLAIN VERBOSE
SELECT ln(value1), ln(value2), ln(value3), ln(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Sort  (cost=4159.63..4176.61 rows=6792 width=32)
   Output: (ln(value1)), (ln((value2)::double precision)), (ln(value3)), (ln((value4)::double precision))
   Sort Key: (ln(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.34 rows=6792 width=32)
         Output: (ln(value1)), (ln((value2)::double precision)), (ln(value3)), (ln((value4)::double precision))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT ln("value1"), ln("value2"), ln("value3"), ln("value4"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ln(value1), ln(value2), ln(value3), ln(value4), value2 FROM public.s31influx
(12 rows)

-- select ln (builtin function, not pushdown constraints, result)
--Testcase 780:
SELECT ln(value1), ln(value2), ln(value3), ln(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
         ln          |        ln         | ln | ln 
---------------------+-------------------+----+----
 0.09531017980432493 | 5.298317366548036 |    |   
  0.7884573603642703 | 5.298317366548036 |    |   
  1.1939224684724346 | 5.298317366548036 |    |   
(3 rows)

-- select ln (builtin function, pushdown constraints, explain)
--Testcase 781:
EXPLAIN VERBOSE
SELECT ln(value1), ln(value2), ln(value3), ln(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4150.76..4167.74 rows=6792 width=32)
   Output: (ln(value1)), (ln((value2)::double precision)), (ln(value3)), (ln((value4)::double precision))
   Sort Key: (ln(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3718.46 rows=6792 width=32)
         Output: (ln(value1)), (ln((value2)::double precision)), (ln(value3)), (ln((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT ln("value1"), ln("value2"), ln("value3"), ln("value4") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ln(value1), ln(value2), ln(value3), ln(value4) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select ln (builtin function, pushdown constraints, result)
--Testcase 782:
SELECT ln(value1), ln(value2), ln(value3), ln(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
         ln          |        ln         | ln | ln 
---------------------+-------------------+----+----
 -2.3025850929940455 | 4.605170185988092 |    |   
 -1.6094379124341003 | 4.605170185988092 |    |   
 -1.2039728043259361 | 4.605170185988092 |    |   
(3 rows)

-- select ln as nest function with agg (pushdown, explain)
--Testcase 783:
EXPLAIN VERBOSE
SELECT sum(value3),ln(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (ln((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), ln((sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select ln as nest function with agg (pushdown, result)
--Testcase 784:
SELECT sum(value3),ln(sum(value3)) FROM s3 ORDER BY 1;
ERROR:  cannot take logarithm of a negative number
-- select ln as nest with log2 (pushdown, explain)
--Testcase 785:
EXPLAIN VERBOSE
SELECT ln(log2(value1)),ln(log2(1/value1)) FROM s3;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (ln(log2(value1))), (ln(log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT ln(log2("value1")), ln(log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT ln(public.log2(value1)), ln(public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select ln as nest with log2 (pushdown, result)
--Testcase 786:
SELECT * FROM (
SELECT ln(log2(value1)),ln(log2(1/value1)) FROM s3
) as t ORDER BY 1;
         ln          |         ln         
---------------------+--------------------
 -1.9841057349316293 |                   
 0.12883596964031102 |                   
  0.5437569991660601 |                   
                     | 1.2005453658296201
                     | 0.8423979159087749
                     |   0.55213967944403
(6 rows)

-- select ln with non pushdown func and explicit constant (explain)
--Testcase 787:
EXPLAIN VERBOSE
SELECT ln(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (ln(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (ln(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (ln(value3)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT ln("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT ln(value3), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select ln with non pushdown func and explicit constant (result)
--Testcase 788:
SELECT ln(value3), pi(), 4.1 FROM s3 ORDER BY 1;
 ln |        pi         | ?column? 
----+-------------------+----------
    | 3.141592653589793 |      4.1
    | 3.141592653589793 |      4.1
    | 3.141592653589793 |      4.1
    | 3.141592653589793 |      4.1
    | 3.141592653589793 |      4.1
    | 3.141592653589793 |      4.1
(6 rows)

-- select ln with order by (explain)
--Testcase 789:
EXPLAIN VERBOSE
SELECT value1, ln(1-value1) FROM s3 ORDER BY ln(1-value1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (ln(('1'::double precision - value1)))
   Sort Key: (ln(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (ln(('1'::double precision - value1)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", ln((1 - "value1")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, ln((1::double precision - value1)) FROM public.s31influx
(11 rows)

-- select ln with order by (result)
--Testcase 790:
SELECT value1, ln(1-value1) FROM s3 ORDER BY ln(1-value1);
 value1 |          ln          
--------+----------------------
    0.3 | -0.35667494393873245
    0.2 |  -0.2231435513142097
    0.1 | -0.10536051565782628
    1.1 |                     
    2.2 |                     
    3.3 |                     
(6 rows)

-- select ln with order by index (result)
--Testcase 791:
SELECT value1, ln(1-value1) FROM s3 ORDER BY 2,1;
 value1 |          ln          
--------+----------------------
    0.3 | -0.35667494393873245
    0.2 |  -0.2231435513142097
    0.1 | -0.10536051565782628
    1.1 |                     
    2.2 |                     
    3.3 |                     
(6 rows)

-- select ln with order by index (result)
--Testcase 792:
SELECT value1, ln(1-value1) FROM s3 ORDER BY 1,2;
 value1 |          ln          
--------+----------------------
    0.1 | -0.10536051565782628
    0.2 |  -0.2231435513142097
    0.3 | -0.35667494393873245
    1.1 |                     
    2.2 |                     
    3.3 |                     
(6 rows)

-- select ln and as
--Testcase 793:
SELECT ln(value1) as ln1 FROM s3 ORDER BY 1;
         ln1         
---------------------
 -2.3025850929940455
 -1.6094379124341003
 -1.2039728043259361
 0.09531017980432493
  0.7884573603642703
  1.1939224684724346
(6 rows)

-- select ln(*) (stub function, explain)
--Testcase 794:
EXPLAIN VERBOSE
SELECT ln_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (ln_all())
   Sort Key: (ln_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (ln_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT ln(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.ln_all() FROM public.s31influx
(11 rows)

-- select ln(*) (stub function, result)
--Testcase 795:
SELECT * FROM (
SELECT ln_all() from s3
) as t ORDER BY 1;
                                           ln_all                                            
---------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-2.3025850929940455,4.605170185988092,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,-1.6094379124341003,4.605170185988092,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,-1.2039728043259361,4.605170185988092,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.09531017980432493,5.298317366548036,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,0.7884573603642703,5.298317366548036,,,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,1.1939224684724346,5.298317366548036,,,/influxdb_svr/)
(6 rows)

-- select ln(*) (stub function and group by tag only) (explain)
--Testcase 796:
EXPLAIN VERBOSE
SELECT ln_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (ln_all()), tag1
   Sort Key: (ln_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (ln_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT ln(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.ln_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select ln(*) (stub function and group by tag only) (result)
--Testcase 797:
SELECT ln_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                           ln_all                                            
---------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-2.3025850929940455,4.605170185988092,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,-1.6094379124341003,4.605170185988092,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,-1.2039728043259361,4.605170185988092,,,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.09531017980432493,5.298317366548036,,,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,0.7884573603642703,5.298317366548036,,,/influxdb_svr/)
(5 rows)

-- select multiple star functions (do not push down, raise warning and stub error) (result)
--Testcase 798:
SELECT ln_all(), floor_all() FROM s3 ORDER BY 1;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub ln_all() is called
CONTEXT:  PL/pgSQL function ln_all() line 3 at RAISE
-- select pow (builtin function, explain)
--Testcase 799:
EXPLAIN VERBOSE
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 ORDER BY 1;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4162.49..4179.55 rows=6826 width=32)
   Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
   Sort Key: (pow(s3.value1, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.78 rows=6826 width=32)
         Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT pow("value1", 2), pow("value2", 2), pow("value3", 2), pow("value4", 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT pow(value1, 2::double precision), pow(value2, 2::double precision), pow(value3, 2::double precision), pow(value4, 2::double precision) FROM public.s31influx
(11 rows)

-- select pow (builtin function, result)
--Testcase 800:
SELECT * FROM (
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3
) as t ORDER BY 1, 2, 3, 4;
         pow          |  pow  |         pow          |  pow  
----------------------+-------+----------------------+-------
 0.010000000000000002 | 10000 | 0.010000000000000002 | 10000
  0.04000000000000001 | 10000 |  0.04000000000000001 | 10000
                 0.09 | 10000 |                 0.09 | 10000
   1.2100000000000002 | 40000 |   1.2100000000000002 | 40000
    4.840000000000001 | 40000 |    4.840000000000001 | 40000
   10.889999999999999 | 40000 |   10.889999999999999 | 40000
(6 rows)

-- select pow (builtin function, not pushdown constraints, explain)
--Testcase 801:
EXPLAIN VERBOSE
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4159.63..4176.61 rows=6792 width=32)
   Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
   Sort Key: (pow(s3.value1, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.34 rows=6792 width=32)
         Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT pow("value1", 2), pow("value2", 2), pow("value3", 2), pow("value4", 2), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT pow(value1, 2::double precision), pow(value2, 2::double precision), pow(value3, 2::double precision), pow(value4, 2::double precision), value2 FROM public.s31influx
(12 rows)

-- select pow (builtin function, not pushdown constraints, result)
--Testcase 802:
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
        pow         |  pow  |        pow         |  pow  
--------------------+-------+--------------------+-------
 1.2100000000000002 | 40000 | 1.2100000000000002 | 40000
  4.840000000000001 | 40000 |  4.840000000000001 | 40000
 10.889999999999999 | 40000 | 10.889999999999999 | 40000
(3 rows)

-- select pow (builtin function, pushdown constraints, explain)
--Testcase 803:
EXPLAIN VERBOSE
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4150.76..4167.74 rows=6792 width=32)
   Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
   Sort Key: (pow(s3.value1, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..3718.46 rows=6792 width=32)
         Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT pow("value1", 2), pow("value2", 2), pow("value3", 2), pow("value4", 2) FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT pow(value1, 2::double precision), pow(value2, 2::double precision), pow(value3, 2::double precision), pow(value4, 2::double precision) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select pow (builtin function, pushdown constraints, result)
--Testcase 804:
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 WHERE value2 != 200 ORDER BY 1;
         pow          |  pow  |         pow          |  pow  
----------------------+-------+----------------------+-------
 0.010000000000000002 | 10000 | 0.010000000000000002 | 10000
  0.04000000000000001 | 10000 |  0.04000000000000001 | 10000
                 0.09 | 10000 |                 0.09 | 10000
(3 rows)

-- select pow as nest function with agg (pushdown, explain)
--Testcase 805:
EXPLAIN VERBOSE
SELECT sum(value3),pow(sum(value3), 2) FROM s3 ORDER BY 1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (pow((sum(value3)), '2'::double precision))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), pow((sum(value3)), '2'::double precision)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select pow as nest function with agg (pushdown, result)
--Testcase 806:
SELECT sum(value3),pow(sum(value3), 2) FROM s3 ORDER BY 1;
        sum         |        pow        
--------------------+-------------------
 -7.199999999999999 | 51.83999999999999
(1 row)

-- select pow as nest with log2 (pushdown, explain)
--Testcase 807:
EXPLAIN VERBOSE
SELECT pow(log2(value1), 2),pow(log2(1/value1), 2) FROM s3;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (pow(log2(value1), '2'::double precision)), (pow(log2(('1'::double precision / value1)), '2'::double precision))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT pow(log2("value1"), 2), pow(log2((1 / "value1")), 2) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT pow(public.log2(value1), 2::double precision), pow(public.log2((1::double precision / value1)), 2::double precision) FROM public.s31influx
(6 rows)

-- select pow as nest with log2 (pushdown, result)
--Testcase 808:
SELECT * FROM (
SELECT pow(log2(value1), 2),pow(log2(1/value1), 2) FROM s3
) as t ORDER BY 1;
         pow          |         pow          
----------------------+----------------------
 0.018907219043648945 | 0.018907219043648928
   1.2939142665435193 |   1.2939142665435188
    2.966889205457245 |    2.966889205457245
   3.0170494753171613 |   3.0170494753171613
    5.391350077827255 |    5.391350077827255
    11.03520626760198 |    11.03520626760198
(6 rows)

-- select pow with non pushdown func and explicit constant (explain)
--Testcase 809:
EXPLAIN VERBOSE
SELECT pow(value3, 2), pi(), 4.1 FROM s3 ORDER BY 1;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (pow(value3, '2'::double precision)), '3.141592653589793'::double precision, 4.1
   Sort Key: (pow(s3.value3, '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (pow(value3, '2'::double precision)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT pow("value3", 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT pow(value3, 2::double precision), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select pow with non pushdown func and explicit constant (result)
--Testcase 810:
SELECT pow(value3, 2), pi(), 4.1 FROM s3 ORDER BY 1;
         pow          |        pi         | ?column? 
----------------------+-------------------+----------
 0.010000000000000002 | 3.141592653589793 |      4.1
  0.04000000000000001 | 3.141592653589793 |      4.1
                 0.09 | 3.141592653589793 |      4.1
   1.2100000000000002 | 3.141592653589793 |      4.1
    4.840000000000001 | 3.141592653589793 |      4.1
   10.889999999999999 | 3.141592653589793 |      4.1
(6 rows)

-- select pow with order by (explain)
--Testcase 811:
EXPLAIN VERBOSE
SELECT value1, pow(1-value1, 2) FROM s3 ORDER BY pow(1-value1, 2);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (pow(('1'::double precision - value1), '2'::double precision))
   Sort Key: (pow(('1'::double precision - s3.value1), '2'::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (pow(('1'::double precision - value1), '2'::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", pow((1 - "value1"), 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, pow((1::double precision - value1), 2::double precision) FROM public.s31influx
(11 rows)

-- select pow with order by (result)
--Testcase 812:
SELECT value1, pow(1-value1, 2) FROM s3 ORDER BY pow(1-value1, 2);
 value1 |         pow          
--------+----------------------
    1.1 | 0.010000000000000018
    0.3 |  0.48999999999999994
    0.2 |   0.6400000000000001
    0.1 |                 0.81
    2.2 |   1.4400000000000004
    3.3 |    5.289999999999999
(6 rows)

-- select pow with order by index (result)
--Testcase 813:
SELECT value1, pow(1-value1, 2) FROM s3 ORDER BY 2,1;
 value1 |         pow          
--------+----------------------
    1.1 | 0.010000000000000018
    0.3 |  0.48999999999999994
    0.2 |   0.6400000000000001
    0.1 |                 0.81
    2.2 |   1.4400000000000004
    3.3 |    5.289999999999999
(6 rows)

-- select pow with order by index (result)
--Testcase 814:
SELECT value1, pow(1-value1, 2) FROM s3 ORDER BY 1,2;
 value1 |         pow          
--------+----------------------
    0.1 |                 0.81
    0.2 |   0.6400000000000001
    0.3 |  0.48999999999999994
    1.1 | 0.010000000000000018
    2.2 |   1.4400000000000004
    3.3 |    5.289999999999999
(6 rows)

-- select pow and as
--Testcase 815:
SELECT * FROM (
SELECT pow(value3, 2) as pow1 FROM s3
) as t ORDER BY 1;
         pow1         
----------------------
 0.010000000000000002
  0.04000000000000001
                 0.09
   1.2100000000000002
    4.840000000000001
   10.889999999999999
(6 rows)

-- select pow_all(2) (stub function, explain)
--Testcase 816:
EXPLAIN VERBOSE
SELECT pow_all(2) from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (pow_all(2))
   Sort Key: (pow_all(2))
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (pow_all(2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT pow(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.pow_all(2) FROM public.s31influx
(11 rows)

-- select pow_all(2) (stub function, result)
--Testcase 817:
SELECT * FROM (
SELECT pow_all(2) from s3
) as t ORDER BY 1;
                                                  pow_all                                                  
-----------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.010000000000000002,10000,0.010000000000000002,10000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.04000000000000001,10000,0.04000000000000001,10000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09,10000,0.09,10000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.2100000000000002,40000,1.2100000000000002,40000,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,4.840000000000001,40000,4.840000000000001,40000,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,10.889999999999999,40000,10.889999999999999,40000,/influxdb_svr/)
(6 rows)

-- select pow_all(2) (stub function and group by tag only) (explain)
--Testcase 818:
EXPLAIN VERBOSE
SELECT pow_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (pow_all(2)), tag1
   Sort Key: (pow_all(2))
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (pow_all(2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT pow(*, 2) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.pow_all(2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select pow_all(2) (stub function and group by tag only) (result)
--Testcase 819:
SELECT pow_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                  pow_all                                                  
-----------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.010000000000000002,10000,0.010000000000000002,10000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.04000000000000001,10000,0.04000000000000001,10000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.09,10000,0.09,10000,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.2100000000000002,40000,1.2100000000000002,40000,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,4.840000000000001,40000,4.840000000000001,40000,/influxdb_svr/)
(5 rows)

-- select pow_all(2) (stub function, expose data, explain)
--Testcase 820:
EXPLAIN VERBOSE
SELECT (pow_all(2)::s3).* from s3 ORDER BY 1;
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((pow_all(2)))::s3)."time"), ((((pow_all(2)))::s3).tag1), ((((pow_all(2)))::s3).value1), ((((pow_all(2)))::s3).value2), ((((pow_all(2)))::s3).value3), ((((pow_all(2)))::s3).value4), ((((pow_all(2)))::s3).__spd_url)
   Sort Key: ((((pow_all(2)))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((pow_all(2)))::s3)."time", (((pow_all(2)))::s3).tag1, (((pow_all(2)))::s3).value1, (((pow_all(2)))::s3).value2, (((pow_all(2)))::s3).value3, (((pow_all(2)))::s3).value4, (((pow_all(2)))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT pow(*, 2) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.pow_all(2) FROM public.s31influx
(11 rows)

-- select pow_all(2) (stub function, expose data, result)
--Testcase 821:
SELECT * FROM (
SELECT (pow_all(2)::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 |        value1        | value2 |        value3        | value4 |          __spd_url          
------------------------+------+----------------------+--------+----------------------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      | 0.010000000000000002 |  10000 | 0.010000000000000002 |  10000 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:01+09 |      |  0.04000000000000001 |  10000 |  0.04000000000000001 |  10000 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |                 0.09 |  10000 |                 0.09 |  10000 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:03+09 |      |   1.2100000000000002 |  40000 |   1.2100000000000002 |  40000 | /influxdb_svr/
 1970-01-01 09:00:04+09 |      |    4.840000000000001 |  40000 |    4.840000000000001 |  40000 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |   10.889999999999999 |  40000 |   10.889999999999999 |  40000 | /influxdb_svr/
(6 rows)

-- select round (builtin function, explain)
--Testcase 822:
EXPLAIN VERBOSE
SELECT round(value1), round(value2), round(value3), round(value4) FROM s3 ORDER BY 1;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4162.49..4179.55 rows=6826 width=32)
   Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision))
   Sort Key: (round(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.78 rows=6826 width=32)
         Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT round("value1"), round("value2"), round("value3"), round("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT round(value1), round(value2), round(value3), round(value4) FROM public.s31influx
(11 rows)

-- select round (builtin function, result)
--Testcase 823:
SELECT round(value1), round(value2), round(value3), round(value4) FROM s3 ORDER BY 1;
 round | round | round | round 
-------+-------+-------+-------
     0 |   100 |    -0 |  -100
     0 |   100 |    -0 |  -100
     0 |   100 |    -0 |  -100
     1 |   200 |    -1 |  -200
     2 |   200 |    -2 |  -200
     3 |   200 |    -3 |  -200
(6 rows)

-- select round (builtin function, not pushdown constraints, explain)
--Testcase 824:
EXPLAIN VERBOSE
SELECT round(value1), round(value2), round(value3), round(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4159.63..4176.61 rows=6792 width=32)
   Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision))
   Sort Key: (round(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.34 rows=6792 width=32)
         Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT round("value1"), round("value2"), round("value3"), round("value4"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT round(value1), round(value2), round(value3), round(value4), value2 FROM public.s31influx
(12 rows)

-- select round (builtin function, not pushdown constraints, result)
--Testcase 825:
SELECT round(value1), round(value2), round(value3), round(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
 round | round | round | round 
-------+-------+-------+-------
     1 |   200 |    -1 |  -200
     2 |   200 |    -2 |  -200
     3 |   200 |    -3 |  -200
(3 rows)

-- select round (builtin function, pushdown constraints, explain)
--Testcase 826:
EXPLAIN VERBOSE
SELECT round(value1), round(value2), round(value3), round(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4150.76..4167.74 rows=6792 width=32)
   Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision))
   Sort Key: (round(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3718.46 rows=6792 width=32)
         Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT round("value1"), round("value2"), round("value3"), round("value4") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT round(value1), round(value2), round(value3), round(value4) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select round (builtin function, pushdown constraints, result)
--Testcase 827:
SELECT round(value1), round(value2), round(value3), round(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
 round | round | round | round 
-------+-------+-------+-------
     0 |   100 |    -0 |  -100
     0 |   100 |    -0 |  -100
     0 |   100 |    -0 |  -100
(3 rows)

-- select round as nest function with agg (pushdown, explain)
--Testcase 828:
EXPLAIN VERBOSE
SELECT sum(value3),round(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (round((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), round((sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select round as nest function with agg (pushdown, result)
--Testcase 829:
SELECT sum(value3),round(sum(value3)) FROM s3 ORDER BY 1;
        sum         | round 
--------------------+-------
 -7.199999999999999 |    -7
(1 row)

-- select round as nest with log2 (pushdown, explain)
--Testcase 830:
EXPLAIN VERBOSE
SELECT round(log2(value1)),round(log2(1/value1)) FROM s3;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (round(log2(value1))), (round(log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT round(log2("value1")), round(log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT round(public.log2(value1)), round(public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select round as nest with log2 (pushdown, result)
--Testcase 831:
SELECT * FROM (
SELECT round(log2(value1)),round(log2(1/value1)) FROM s3
) as t ORDER BY 1;
 round | round 
-------+-------
    -3 |     3
    -2 |     2
    -2 |     2
     0 |    -0
     1 |    -1
     2 |    -2
(6 rows)

-- select round with non pushdown func and roundlicit constant (explain)
--Testcase 832:
EXPLAIN VERBOSE
SELECT round(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (round(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (round(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (round(value3)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT round("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT round(value3), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select round with non pushdown func and roundlicit constant (result)
--Testcase 833:
SELECT round(value3), pi(), 4.1 FROM s3 ORDER BY 1;
 round |        pi         | ?column? 
-------+-------------------+----------
    -3 | 3.141592653589793 |      4.1
    -2 | 3.141592653589793 |      4.1
    -1 | 3.141592653589793 |      4.1
    -0 | 3.141592653589793 |      4.1
    -0 | 3.141592653589793 |      4.1
    -0 | 3.141592653589793 |      4.1
(6 rows)

-- select round with order by (explain)
--Testcase 834:
EXPLAIN VERBOSE
SELECT value1, round(1-value1) FROM s3 ORDER BY round(1-value1);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (round(('1'::double precision - value1)))
   Sort Key: (round(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (round(('1'::double precision - value1)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", round((1 - "value1")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, round((1::double precision - value1)) FROM public.s31influx
(11 rows)

-- select round with order by (result)
--Testcase 835:
SELECT value1, round(1-value1) FROM s3 ORDER BY round(1-value1);
 value1 | round 
--------+-------
    3.3 |    -2
    2.2 |    -1
    1.1 |    -0
    0.1 |     1
    0.2 |     1
    0.3 |     1
(6 rows)

-- select round with order by index (result)
--Testcase 836:
SELECT value1, round(1-value1) FROM s3 ORDER BY 2,1;
 value1 | round 
--------+-------
    3.3 |    -2
    2.2 |    -1
    1.1 |    -0
    0.1 |     1
    0.2 |     1
    0.3 |     1
(6 rows)

-- select round with order by index (result)
--Testcase 837:
SELECT value1, round(1-value1) FROM s3 ORDER BY 1,2;
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |    -0
    2.2 |    -1
    3.3 |    -2
(6 rows)

-- select round and as
--Testcase 838:
SELECT round(value3) as round1 FROM s3 ORDER BY 1;
 round1 
--------
     -3
     -2
     -1
     -0
     -0
     -0
(6 rows)

-- select round(*) (stub function, explain)
--Testcase 839:
EXPLAIN VERBOSE
SELECT round_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (round_all())
   Sort Key: (round_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (round_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT round(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.round_all() FROM public.s31influx
(11 rows)

-- select round(*) (stub function, result)
--Testcase 840:
SELECT * FROM (
SELECT round_all() from s3
) as t ORDER BY 1;
                             round_all                             
-------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0,100,-0,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0,100,-0,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0,100,-0,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1,200,-1,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2,200,-2,-200,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,3,200,-3,-200,/influxdb_svr/)
(6 rows)

-- select round(*) (stub function and group by tag only) (explain)
--Testcase 841:
EXPLAIN VERBOSE
SELECT round_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (round_all()), tag1
   Sort Key: (round_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (round_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT round(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.round_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select round(*) (stub function and group by tag only) (result)
--Testcase 842:
SELECT round_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                             round_all                             
-------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0,100,-0,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0,100,-0,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0,100,-0,-100,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1,200,-1,-200,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,2,200,-2,-200,/influxdb_svr/)
(5 rows)

-- select round(*) (stub function, expose data, explain)
--Testcase 843:
EXPLAIN VERBOSE
SELECT (round_all()::s3).* from s3 ORDER BY 1;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16244.51..16261.57 rows=6826 width=104)
   Output: ((((round_all()))::s3)."time"), ((((round_all()))::s3).tag1), ((((round_all()))::s3).value1), ((((round_all()))::s3).value2), ((((round_all()))::s3).value3), ((((round_all()))::s3).value4), ((((round_all()))::s3).__spd_url)
   Sort Key: ((((round_all()))::s3)."time")
   ->  Foreign Scan on public.s3  (cost=110.00..15809.80 rows=6826 width=104)
         Output: (((round_all()))::s3)."time", (((round_all()))::s3).tag1, (((round_all()))::s3).value1, (((round_all()))::s3).value2, (((round_all()))::s3).value3, (((round_all()))::s3).value4, (((round_all()))::s3).__spd_url
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT round(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.round_all() FROM public.s31influx
(11 rows)

-- select round(*) (stub function, expose data, result)
--Testcase 844:
SELECT * FROM (
SELECT (round_all()::s3).* from s3
) as t ORDER BY 1;
          time          | tag1 | value1 | value2 | value3 | value4 |          __spd_url          
------------------------+------+--------+--------+--------+--------+-----------------------------
 1970-01-01 09:00:00+09 |      |      0 |    100 |     -0 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:01+09 |      |      0 |    100 |     -0 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:02+09 |      |      0 |    100 |     -0 |   -100 | /pgspider_svr/influxdb_svr/
 1970-01-01 09:00:03+09 |      |      1 |    200 |     -1 |   -200 | /influxdb_svr/
 1970-01-01 09:00:04+09 |      |      2 |    200 |     -2 |   -200 | /influxdb_svr/
 1970-01-01 09:00:05+09 |      |      3 |    200 |     -3 |   -200 | /influxdb_svr/
(6 rows)

-- select sin (builtin function, explain)
--Testcase 845:
EXPLAIN VERBOSE
SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM s3 ORDER BY 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4162.49..4179.55 rows=6826 width=32)
   Output: (sin(value1)), (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision))
   Sort Key: (sin(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.78 rows=6826 width=32)
         Output: (sin(value1)), (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sin("value1"), sin("value2"), sin("value3"), sin("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM public.s31influx
(11 rows)

-- select sin (builtin function, result)
--Testcase 846:
SELECT * FROM (
SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM s3
) as t ORDER BY 1, 2, 3, 4;
         sin         |         sin         |         sin          |        sin         
---------------------+---------------------+----------------------+--------------------
 -0.1577456941432482 | -0.8732972972139945 |   0.1577456941432482 | 0.8732972972139945
 0.09983341664682815 | -0.5063656411097588 | -0.09983341664682815 | 0.5063656411097588
 0.19866933079506122 | -0.5063656411097588 | -0.19866933079506122 | 0.5063656411097588
 0.29552020666133955 | -0.5063656411097588 | -0.29552020666133955 | 0.5063656411097588
  0.8084964038195901 | -0.8732972972139945 |  -0.8084964038195901 | 0.8732972972139945
  0.8912073600614354 | -0.8732972972139945 |  -0.8912073600614354 | 0.8732972972139945
(6 rows)

-- select sin (builtin function, not pushdown constraints, explain)
--Testcase 847:
EXPLAIN VERBOSE
SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4159.63..4176.61 rows=6792 width=32)
   Output: (sin(value1)), (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision))
   Sort Key: (sin(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.34 rows=6792 width=32)
         Output: (sin(value1)), (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sin("value1"), sin("value2"), sin("value3"), sin("value4"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT sin(value1), sin(value2), sin(value3), sin(value4), value2 FROM public.s31influx
(12 rows)

-- select sin (builtin function, not pushdown constraints, result)
--Testcase 848:
SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
         sin         |         sin         |         sin         |        sin         
---------------------+---------------------+---------------------+--------------------
 -0.1577456941432482 | -0.8732972972139945 |  0.1577456941432482 | 0.8732972972139945
  0.8084964038195901 | -0.8732972972139945 | -0.8084964038195901 | 0.8732972972139945
  0.8912073600614354 | -0.8732972972139945 | -0.8912073600614354 | 0.8732972972139945
(3 rows)

-- select sin (builtin function, pushdown constraints, explain)
--Testcase 849:
EXPLAIN VERBOSE
SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4150.76..4167.74 rows=6792 width=32)
   Output: (sin(value1)), (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision))
   Sort Key: (sin(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3718.46 rows=6792 width=32)
         Output: (sin(value1)), (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sin("value1"), sin("value2"), sin("value3"), sin("value4") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select sin (builtin function, pushdown constraints, result)
--Testcase 850:
SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
         sin         |         sin         |         sin          |        sin         
---------------------+---------------------+----------------------+--------------------
 0.09983341664682815 | -0.5063656411097588 | -0.09983341664682815 | 0.5063656411097588
 0.19866933079506122 | -0.5063656411097588 | -0.19866933079506122 | 0.5063656411097588
 0.29552020666133955 | -0.5063656411097588 | -0.29552020666133955 | 0.5063656411097588
(3 rows)

-- select sin as nest function with agg (pushdown, explain)
--Testcase 851:
EXPLAIN VERBOSE
SELECT sum(value3),sin(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (sin((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), sin((sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select sin as nest function with agg (pushdown, result)
--Testcase 852:
SELECT sum(value3),sin(sum(value3)) FROM s3 ORDER BY 1;
        sum         |         sin         
--------------------+---------------------
 -7.199999999999999 | -0.7936678638491527
(1 row)

-- select sin as nest with log2 (pushdown, explain)
--Testcase 853:
EXPLAIN VERBOSE
SELECT sin(log2(value1)),sin(log2(1/value1)) FROM s3;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (sin(log2(value1))), (sin(log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT sin(log2("value1")), sin(log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT sin(public.log2(value1)), sin(public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select sin as nest with log2 (pushdown, result)
--Testcase 854:
SELECT * FROM (
SELECT sin(log2(value1)),sin(log2(1/value1)) FROM s3
) as t ORDER BY 1;
         sin         |         sin          
---------------------+----------------------
  -0.986225626190124 |    0.986225626190124
  -0.730916943429606 |    0.730916943429606
  0.1370706316514691 | -0.13707063165146907
 0.17935958515226794 | -0.17935958515226794
  0.9075881509581342 |   -0.907588150958134
  0.9885201832571107 |  -0.9885201832571107
(6 rows)

-- select sin with non pushdown func and explicit constant (explain)
--Testcase 855:
EXPLAIN VERBOSE
SELECT sin(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (sin(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (sin(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (sin(value3)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sin("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT sin(value3), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select sin with non pushdown func and explicit constant (result)
--Testcase 856:
SELECT sin(value3), pi(), 4.1 FROM s3 ORDER BY 1;
         sin          |        pi         | ?column? 
----------------------+-------------------+----------
  -0.8912073600614354 | 3.141592653589793 |      4.1
  -0.8084964038195901 | 3.141592653589793 |      4.1
 -0.29552020666133955 | 3.141592653589793 |      4.1
 -0.19866933079506122 | 3.141592653589793 |      4.1
 -0.09983341664682815 | 3.141592653589793 |      4.1
   0.1577456941432482 | 3.141592653589793 |      4.1
(6 rows)

-- select sin with order by (explain)
--Testcase 857:
EXPLAIN VERBOSE
SELECT value1, sin(1-value1) FROM s3 ORDER BY sin(1-value1);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (sin(('1'::double precision - value1)))
   Sort Key: (sin(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (sin(('1'::double precision - value1)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", sin((1 - "value1")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, sin((1::double precision - value1)) FROM public.s31influx
(11 rows)

-- select sin with order by (result)
--Testcase 858:
SELECT value1, sin(1-value1) FROM s3 ORDER BY sin(1-value1);
 value1 |         sin          
--------+----------------------
    2.2 |  -0.9320390859672264
    3.3 |  -0.7457052121767203
    1.1 | -0.09983341664682824
    0.3 |    0.644217687237691
    0.2 |   0.7173560908995227
    0.1 |   0.7833269096274834
(6 rows)

-- select sin with order by index (result)
--Testcase 859:
SELECT value1, sin(1-value1) FROM s3 ORDER BY 2,1;
 value1 |         sin          
--------+----------------------
    2.2 |  -0.9320390859672264
    3.3 |  -0.7457052121767203
    1.1 | -0.09983341664682824
    0.3 |    0.644217687237691
    0.2 |   0.7173560908995227
    0.1 |   0.7833269096274834
(6 rows)

-- select sin with order by index (result)
--Testcase 860:
SELECT value1, sin(1-value1) FROM s3 ORDER BY 1,2;
 value1 |         sin          
--------+----------------------
    0.1 |   0.7833269096274834
    0.2 |   0.7173560908995227
    0.3 |    0.644217687237691
    1.1 | -0.09983341664682824
    2.2 |  -0.9320390859672264
    3.3 |  -0.7457052121767203
(6 rows)

-- select sin and as
--Testcase 861:
SELECT sin(value3) as sin1 FROM s3 ORDER BY 1;
         sin1         
----------------------
  -0.8912073600614354
  -0.8084964038195901
 -0.29552020666133955
 -0.19866933079506122
 -0.09983341664682815
   0.1577456941432482
(6 rows)

-- select sin(*) (stub function, explain)
--Testcase 862:
EXPLAIN VERBOSE
SELECT sin_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (sin_all())
   Sort Key: (sin_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (sin_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT sin(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.sin_all() FROM public.s31influx
(11 rows)

-- select sin(*) (stub function, result)
--Testcase 863:
SELECT * FROM (
SELECT sin_all() from s3
) as t ORDER BY 1;
                                                               sin_all                                                               
-------------------------------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.09983341664682815,-0.5063656411097588,-0.09983341664682815,0.5063656411097588,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.19866933079506122,-0.5063656411097588,-0.19866933079506122,0.5063656411097588,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.29552020666133955,-0.5063656411097588,-0.29552020666133955,0.5063656411097588,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.8912073600614354,-0.8732972972139945,-0.8912073600614354,0.8732972972139945,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,0.8084964038195901,-0.8732972972139945,-0.8084964038195901,0.8732972972139945,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,-0.1577456941432482,-0.8732972972139945,0.1577456941432482,0.8732972972139945,/influxdb_svr/)
(6 rows)

-- select sin(*) (stub function and group by tag only) (explain)
--Testcase 864:
EXPLAIN VERBOSE
SELECT sin_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (sin_all()), tag1
   Sort Key: (sin_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (sin_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sin(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.sin_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select sin(*) (stub function and group by tag only) (result)
--Testcase 865:
SELECT sin_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                               sin_all                                                               
-------------------------------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.09983341664682815,-0.5063656411097588,-0.09983341664682815,0.5063656411097588,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.19866933079506122,-0.5063656411097588,-0.19866933079506122,0.5063656411097588,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.29552020666133955,-0.5063656411097588,-0.29552020666133955,0.5063656411097588,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,0.8912073600614354,-0.8732972972139945,-0.8912073600614354,0.8732972972139945,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,0.8084964038195901,-0.8732972972139945,-0.8084964038195901,0.8732972972139945,/influxdb_svr/)
(5 rows)

-- select tan (builtin function, explain)
--Testcase 866:
EXPLAIN VERBOSE
SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM s3 ORDER BY 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4162.49..4179.55 rows=6826 width=32)
   Output: (tan(value1)), (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision))
   Sort Key: (tan(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.78 rows=6826 width=32)
         Output: (tan(value1)), (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT tan("value1"), tan("value2"), tan("value3"), tan("value4") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM public.s31influx
(11 rows)

-- select tan (builtin function, result)
--Testcase 867:
SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM s3 ORDER BY 1;
         tan         |         tan         |         tan          |        tan         
---------------------+---------------------+----------------------+--------------------
 -1.3738230567687948 | -1.7925274837903817 |   1.3738230567687948 | 1.7925274837903817
 0.10033467208545055 |  -0.587213915156929 | -0.10033467208545055 |  0.587213915156929
 0.15974574766003222 | -1.7925274837903817 | -0.15974574766003222 | 1.7925274837903817
  0.2027100355086725 |  -0.587213915156929 |  -0.2027100355086725 |  0.587213915156929
 0.30933624960962325 |  -0.587213915156929 | -0.30933624960962325 |  0.587213915156929
  1.9647596572486523 | -1.7925274837903817 |  -1.9647596572486523 | 1.7925274837903817
(6 rows)

-- select tan (builtin function, not pushdown constraints, explain)
--Testcase 868:
EXPLAIN VERBOSE
SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4159.63..4176.61 rows=6792 width=32)
   Output: (tan(value1)), (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision))
   Sort Key: (tan(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3727.34 rows=6792 width=32)
         Output: (tan(value1)), (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision))
         Filter: (to_hex(s3.value2) <> '64'::text)
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT tan("value1"), tan("value2"), tan("value3"), tan("value4"), "value2" FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT tan(value1), tan(value2), tan(value3), tan(value4), value2 FROM public.s31influx
(12 rows)

-- select tan (builtin function, not pushdown constraints, result)
--Testcase 869:
SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
         tan         |         tan         |         tan          |        tan         
---------------------+---------------------+----------------------+--------------------
 -1.3738230567687948 | -1.7925274837903817 |   1.3738230567687948 | 1.7925274837903817
 0.15974574766003222 | -1.7925274837903817 | -0.15974574766003222 | 1.7925274837903817
  1.9647596572486523 | -1.7925274837903817 |  -1.9647596572486523 | 1.7925274837903817
(3 rows)

-- select tan (builtin function, pushdown constraints, explain)
--Testcase 870:
EXPLAIN VERBOSE
SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4150.76..4167.74 rows=6792 width=32)
   Output: (tan(value1)), (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision))
   Sort Key: (tan(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3718.46 rows=6792 width=32)
         Output: (tan(value1)), (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT tan("value1"), tan("value2"), tan("value3"), tan("value4") FROM "s32" WHERE (("value2" <> 200))
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM public.s31influx WHERE ((value2 <> 200))
(11 rows)

-- select tan (builtin function, pushdown constraints, result)
--Testcase 871:
SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
         tan         |        tan         |         tan          |        tan        
---------------------+--------------------+----------------------+-------------------
 0.10033467208545055 | -0.587213915156929 | -0.10033467208545055 | 0.587213915156929
  0.2027100355086725 | -0.587213915156929 |  -0.2027100355086725 | 0.587213915156929
 0.30933624960962325 | -0.587213915156929 | -0.30933624960962325 | 0.587213915156929
(3 rows)

-- select tan as nest function with agg (pushdown, explain)
--Testcase 872:
EXPLAIN VERBOSE
SELECT sum(value3),tan(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=145.17..145.18 rows=1 width=16)
   Output: (sum(value3)), (tan((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=16)
         Output: (sum(value3)), tan((sum(value3)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT sum("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31influx
(14 rows)

-- select tan as nest function with agg (pushdown, result)
--Testcase 873:
SELECT sum(value3),tan(sum(value3)) FROM s3 ORDER BY 1;
        sum         |        tan         
--------------------+--------------------
 -7.199999999999999 | -1.304620940055636
(1 row)

-- select tan as nest with log2 (pushdown, explain)
--Testcase 874:
EXPLAIN VERBOSE
SELECT tan(log2(value1)),tan(log2(1/value1)) FROM s3;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=110.00..7089.59 rows=6826 width=16)
   Output: (tan(log2(value1))), (tan(log2(('1'::double precision / value1))))
   Node: influxdb_svr / Status: Alive
     InfluxDB query: SELECT tan(log2("value1")), tan(log2((1 / "value1"))) FROM "s32"
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT tan(public.log2(value1)), tan(public.log2((1::double precision / value1))) FROM public.s31influx
(6 rows)

-- select tan as nest with log2 (pushdown, result)
--Testcase 875:
SELECT * FROM (
SELECT tan(log2(value1)),tan(log2(1/value1)) FROM s3
) as t ORDER BY 1, 2;
         tan          |         tan         
----------------------+---------------------
   -6.542640560257786 |   6.542640560257786
 -0.18231609894275463 | 0.18231609894275463
  0.13837673139726087 | -0.1383767313972608
   1.0709932624069183 | -1.0709932624069183
   2.1616365710761665 |  -2.161636571076165
    5.962467987342611 |  -5.962467987342611
(6 rows)

-- select tan with non pushdown func and tanlicit constant (explain)
--Testcase 876:
EXPLAIN VERBOSE
SELECT tan(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (tan(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (tan(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: (tan(value3)), '3.141592653589793'::double precision, 4.1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT tan("value3") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT tan(value3), 3.141592653589793::double precision, 4.1 FROM public.s31influx
(11 rows)

-- select tan with non pushdown func and tanlicit constant (result)
--Testcase 877:
SELECT tan(value3), pi(), 4.1 FROM s3 ORDER BY 1;
         tan          |        pi         | ?column? 
----------------------+-------------------+----------
  -1.9647596572486523 | 3.141592653589793 |      4.1
 -0.30933624960962325 | 3.141592653589793 |      4.1
  -0.2027100355086725 | 3.141592653589793 |      4.1
 -0.15974574766003222 | 3.141592653589793 |      4.1
 -0.10033467208545055 | 3.141592653589793 |      4.1
   1.3738230567687948 | 3.141592653589793 |      4.1
(6 rows)

-- select tan with order by (explain)
--Testcase 878:
EXPLAIN VERBOSE
SELECT value1, tan(1-value1) FROM s3 ORDER BY tan(1-value1);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (tan(('1'::double precision - value1)))
   Sort Key: (tan(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (tan(('1'::double precision - value1)))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT "value1", tan((1 - "value1")) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT value1, tan((1::double precision - value1)) FROM public.s31influx
(11 rows)

-- select tan with order by (result)
--Testcase 879:
SELECT value1, tan(1-value1) FROM s3 ORDER BY tan(1-value1);
 value1 |         tan          
--------+----------------------
    2.2 |  -2.5721516221263205
    1.1 | -0.10033467208545063
    0.3 |   0.8422883804630794
    0.2 |   1.0296385570503641
    3.3 |   1.1192136417341327
    0.1 |    1.260158217550339
(6 rows)

-- select tan with order by index (result)
--Testcase 880:
SELECT value1, tan(1-value1) FROM s3 ORDER BY 2,1;
 value1 |         tan          
--------+----------------------
    2.2 |  -2.5721516221263205
    1.1 | -0.10033467208545063
    0.3 |   0.8422883804630794
    0.2 |   1.0296385570503641
    3.3 |   1.1192136417341327
    0.1 |    1.260158217550339
(6 rows)

-- select tan with order by index (result)
--Testcase 881:
SELECT value1, tan(1-value1) FROM s3 ORDER BY 1,2;
 value1 |         tan          
--------+----------------------
    0.1 |    1.260158217550339
    0.2 |   1.0296385570503641
    0.3 |   0.8422883804630794
    1.1 | -0.10033467208545063
    2.2 |  -2.5721516221263205
    3.3 |   1.1192136417341327
(6 rows)

-- select tan and as
--Testcase 882:
SELECT tan(value3) as tan1 FROM s3 ORDER BY 1;
         tan1         
----------------------
  -1.9647596572486523
 -0.30933624960962325
  -0.2027100355086725
 -0.15974574766003222
 -0.10033467208545055
   1.3738230567687948
(6 rows)

-- select tan(*) (stub function, explain)
--Testcase 883:
EXPLAIN VERBOSE
SELECT tan_all() from s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=5766.60..5783.66 rows=6826 width=32)
   Output: (tan_all())
   Sort Key: (tan_all())
   ->  Foreign Scan on public.s3  (cost=110.00..5331.89 rows=6826 width=32)
         Output: (tan_all())
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           InfluxDB query: SELECT tan(*) FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT public.tan_all() FROM public.s31influx
(11 rows)

-- select tan(*) (stub function, result)
--Testcase 884:
SELECT * FROM (
SELECT tan_all() from s3
) as t ORDER BY 1;
                                                              tan_all                                                              
-----------------------------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.10033467208545055,-0.587213915156929,-0.10033467208545055,0.587213915156929,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.2027100355086725,-0.587213915156929,-0.2027100355086725,0.587213915156929,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.30933624960962325,-0.587213915156929,-0.30933624960962325,0.587213915156929,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.9647596572486523,-1.7925274837903817,-1.9647596572486523,1.7925274837903817,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,-1.3738230567687948,-1.7925274837903817,1.3738230567687948,1.7925274837903817,/influxdb_svr/)
 (1970-01-01T00:00:05Z,,0.15974574766003222,-1.7925274837903817,-0.15974574766003222,1.7925274837903817,/influxdb_svr/)
(6 rows)

-- select tan(*) (stub function and group by tag only) (explain)
--Testcase 885:
EXPLAIN VERBOSE
SELECT tan_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=166.73..166.73 rows=0 width=64)
   Output: (tan_all()), tag1
   Sort Key: (tan_all())
   ->  Foreign Scan  (cost=101.04..166.72 rows=0 width=64)
         Output: (tan_all()), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT tan(*) FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.tan_all(), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select tan(*) (stub function and group by tag only) (result)
--Testcase 886:
SELECT tan_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                              tan_all                                                              
-----------------------------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.10033467208545055,-0.587213915156929,-0.10033467208545055,0.587213915156929,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:01Z,,0.2027100355086725,-0.587213915156929,-0.2027100355086725,0.587213915156929,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:02Z,,0.30933624960962325,-0.587213915156929,-0.30933624960962325,0.587213915156929,/pgspider_svr/influxdb_svr/)
 (1970-01-01T00:00:03Z,,1.9647596572486523,-1.7925274837903817,-1.9647596572486523,1.7925274837903817,/influxdb_svr/)
 (1970-01-01T00:00:04Z,,-1.3738230567687948,-1.7925274837903817,1.3738230567687948,1.7925274837903817,/influxdb_svr/)
(5 rows)

-- select multiple star functions (do not push down, raise warning and stub error) (result)
--Testcase 887:
SELECT sin_all(), round_all(), tan_all() FROM s3 ORDER BY 1;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub sin_all() is called
CONTEXT:  PL/pgSQL function sin_all() line 3 at RAISE
-- select predictors function holt_winters() (explain)
--Testcase 888:
EXPLAIN VERBOSE
SELECT holt_winters(min(value1), 5, 1) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s') ORDER BY 1;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.27..205.35 rows=32 width=16)
   Output: (holt_winters(min(value1), 5, 1)), (influx_time("time", '@ 1 sec'::interval))
   Sort Key: (holt_winters(min(s3.value1), 5, 1))
   ->  GroupAggregate  (cost=187.90..204.47 rows=32 width=16)
         Output: holt_winters(min(value1), 5, 1), (influx_time("time", '@ 1 sec'::interval))
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval))
         ->  Sort  (cost=187.90..187.98 rows=34 width=16)
               Output: (influx_time("time", '@ 1 sec'::interval)), value1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval))
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=16)
                     Output: influx_time("time", '@ 1 sec'::interval), value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", value1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select predictors function holt_winters() (result)
--Testcase 889:
SELECT holt_winters(min(value1), 5, 1) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s') ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select predictors function holt_winters_with_fit() (explain)
--Testcase 890:
EXPLAIN VERBOSE
SELECT holt_winters_with_fit(min(value1), 5, 1) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s') ORDER BY 1;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.27..205.35 rows=32 width=16)
   Output: (holt_winters_with_fit(min(value1), 5, 1)), (influx_time("time", '@ 1 sec'::interval))
   Sort Key: (holt_winters_with_fit(min(s3.value1), 5, 1))
   ->  GroupAggregate  (cost=187.90..204.47 rows=32 width=16)
         Output: holt_winters_with_fit(min(value1), 5, 1), (influx_time("time", '@ 1 sec'::interval))
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval))
         ->  Sort  (cost=187.90..187.98 rows=34 width=16)
               Output: (influx_time("time", '@ 1 sec'::interval)), value1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval))
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=16)
                     Output: influx_time("time", '@ 1 sec'::interval), value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", value1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select predictors function holt_winters_with_fit() (result)
--Testcase 891:
SELECT holt_winters_with_fit(min(value1), 5, 1) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s') ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select count(*) function of InfluxDB (stub agg function, explain)
--Testcase 892:
EXPLAIN VERBOSE
SELECT influx_count_all(*) FROM s3 ORDER BY 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort  (cost=5331.91..5331.91 rows=1 width=32)
   Output: (influx_count_all(*))
   Sort Key: (influx_count_all(*))
   ->  Aggregate  (cost=5331.89..5331.90 rows=1 width=32)
         Output: influx_count_all(*)
         ->  Foreign Scan on public.s3  (cost=110.00..3625.39 rows=6826 width=0)
               Node: influxdb_svr / Status: Alive
                 Sort push-down: no
                 InfluxDB query: SELECT * FROM "s32"
               Node: pgspider_svr / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT NULL FROM public.s31influx
(12 rows)

-- select count(*) function of InfluxDB (stub agg function, result)
--Testcase 893:
SELECT influx_count_all(*) FROM s3 ORDER BY 1;
ERROR:  stub influx_count_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_count_all_sfunc(text) line 3 at RAISE
-- select count(*) function of InfluxDB (stub agg function and group by influx_time() and tag) (explain)
--Testcase 894:
EXPLAIN VERBOSE
SELECT influx_count_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=72)
   Output: (influx_count_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (influx_count_all(*))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=72)
         Output: influx_count_all(*), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=40)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=40)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select count(*) function of InfluxDB (stub agg function and group by influx_time() and tag) (result)
--Testcase 895:
SELECT influx_count_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select count(*) function of InfluxDB (stub agg function and group by tag only) (explain)
--Testcase 896:
EXPLAIN VERBOSE
SELECT influx_count_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=189.19..189.27 rows=32 width=64)
   Output: (influx_count_all(*)), tag1
   Sort Key: (influx_count_all(*))
   ->  GroupAggregate  (cost=179.40..188.39 rows=32 width=64)
         Output: influx_count_all(*), tag1
         Group Key: s3.tag1
         ->  Sort  (cost=179.40..179.48 rows=34 width=32)
               Output: tag1
               Sort Key: s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..178.53 rows=34 width=32)
                     Output: tag1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select count(*) function of InfluxDB (stub agg function and group by tag only) (result)
--Testcase 897:
SELECT influx_count_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
ERROR:  stub influx_count_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_count_all_sfunc(text) line 3 at RAISE
-- select count(*) function of InfluxDB over join query (explain)
--Testcase 898:
EXPLAIN VERBOSE
SELECT influx_count_all(*) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=643.56..643.56 rows=1 width=32)
   Output: (influx_count_all(*))
   Sort Key: (influx_count_all(*))
   ->  Aggregate  (cost=643.54..643.55 rows=1 width=32)
         Output: influx_count_all(*)
         ->  Nested Loop  (cost=220.00..354.54 rows=1156 width=0)
               ->  Foreign Scan on public.s3 t1  (cost=110.00..170.00 rows=34 width=8)
                     Output: t1.value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
               ->  Materialize  (cost=110.00..170.17 rows=34 width=8)
                     Output: t2.value1
                     ->  Foreign Scan on public.s3 t2  (cost=110.00..170.00 rows=34 width=8)
                           Output: t2.value1
                           Node: influxdb_svr / Status: Alive
                             Sort push-down: no
                             InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                           Node: pgspider_svr / Status: Alive
                             Sort push-down: no
                             Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
(24 rows)

-- select count(*) function of InfluxDB over join query (result, stub call error)
--Testcase 899:
SELECT influx_count_all(*) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
ERROR:  stub influx_count_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_count_all_sfunc(text) line 3 at RAISE
-- select distinct (stub agg function, explain)
--Testcase 900:
EXPLAIN VERBOSE
SELECT influx_distinct(value1) FROM s3 ORDER BY 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=8)
   Output: (influx_distinct(value1))
   Sort Key: (influx_distinct(s3.value1))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=8)
         Output: (influx_distinct(value1))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT distinct("value1") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.influx_distinct(value1) FROM public.s31influx
(14 rows)

-- select distinct (stub agg function, result)
--Testcase 901:
SELECT influx_distinct(value1) FROM s3 ORDER BY 1;
 influx_distinct 
-----------------
             7.2
(1 row)

-- select distinct (stub agg function and group by influx_time() and tag) (explain)
--Testcase 902:
EXPLAIN VERBOSE
SELECT influx_distinct(value1), influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.77..205.85 rows=32 width=48)
   Output: (influx_distinct(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   Sort Key: (influx_distinct(s3.value1))
   ->  GroupAggregate  (cost=187.90..204.97 rows=32 width=48)
         Output: influx_distinct(value1), (influx_time("time", '@ 1 sec'::interval)), tag1
         Group Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
         ->  Sort  (cost=187.90..187.98 rows=34 width=48)
               Output: (influx_time("time", '@ 1 sec'::interval)), tag1, value1
               Sort Key: (influx_time(s3."time", '@ 1 sec'::interval)), s3.tag1
               ->  Foreign Scan on public.s3  (cost=110.00..187.03 rows=34 width=48)
                     Output: influx_time("time", '@ 1 sec'::interval), tag1, value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "tag1", "value1" FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04'))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT "time", tag1, value1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09'))
(17 rows)

-- select distinct (stub agg function and group by influx_time() and tag) (result)
--Testcase 903:
SELECT influx_distinct(value1), influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1 ORDER BY 1;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- select distinct (stub agg function and group by tag only) (explain)
--Testcase 904:
EXPLAIN VERBOSE
SELECT influx_distinct(value2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=162.73..162.73 rows=1 width=40)
   Output: (influx_distinct(value2)), tag1
   Sort Key: (influx_distinct(s3.value2))
   ->  Foreign Scan  (cost=101.04..162.72 rows=1 width=40)
         Output: (influx_distinct(value2)), tag1
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT distinct("value2") FROM "s32" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.influx_distinct(value2), tag1 FROM public.s31influx WHERE (("time" >= '1970-01-01 09:00:00+09')) AND (("time" <= '1970-01-01 09:00:04+09')) GROUP BY 2
(14 rows)

-- select distinct (stub agg function and group by tag only) (result)
--Testcase 905:
SELECT influx_distinct(value2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY 1;
 influx_distinct 
-----------------
             100
             200
(2 rows)

-- select distinct over join query (explain)
--Testcase 906:
EXPLAIN VERBOSE
SELECT influx_distinct(t1.value2) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=643.56..643.56 rows=1 width=8)
   Output: (influx_distinct(t1.value2))
   Sort Key: (influx_distinct(t1.value2))
   ->  Aggregate  (cost=643.54..643.55 rows=1 width=8)
         Output: influx_distinct(t1.value2)
         ->  Nested Loop  (cost=220.00..354.54 rows=1156 width=8)
               Output: t1.value2
               ->  Foreign Scan on public.s3 t1  (cost=110.00..170.00 rows=34 width=16)
                     Output: t1.value2, t1.value1
                     Node: influxdb_svr / Status: Alive
                       Sort push-down: no
                       InfluxDB query: SELECT "value1", "value2" FROM "s32" WHERE (("value1" = 0.1))
                     Node: pgspider_svr / Status: Alive
                       Sort push-down: no
                       Remote SQL: SELECT value1, value2 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
               ->  Materialize  (cost=110.00..170.17 rows=34 width=8)
                     Output: t2.value1
                     ->  Foreign Scan on public.s3 t2  (cost=110.00..170.00 rows=34 width=8)
                           Output: t2.value1
                           Node: influxdb_svr / Status: Alive
                             Sort push-down: no
                             InfluxDB query: SELECT "value1" FROM "s32" WHERE (("value1" = 0.1))
                           Node: pgspider_svr / Status: Alive
                             Sort push-down: no
                             Remote SQL: SELECT value1 FROM public.s31influx WHERE ((value1 = 0.1::double precision))
(25 rows)

-- select distinct over join query (result, stub call error)
--Testcase 907:
SELECT influx_distinct(t1.value2) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1 ORDER BY 1;
ERROR:  stub influx_distinct_sfunc(anyelement, anyelement) is called
CONTEXT:  PL/pgSQL function influx_distinct_sfunc(anyelement,anyelement) line 3 at RAISE
-- select distinct with having (explain)
--Testcase 908:
EXPLAIN VERBOSE
SELECT influx_distinct(value2) FROM s3 HAVING influx_distinct(value2) > 100 ORDER BY 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Sort  (cost=145.17..145.17 rows=1 width=8)
   Output: (influx_distinct(value2))
   Sort Key: (influx_distinct(s3.value2))
   ->  Foreign Scan  (cost=101.00..145.16 rows=1 width=8)
         Output: (influx_distinct(value2))
         Node: influxdb_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           InfluxDB query: SELECT distinct("value2") FROM "s32"
         Node: pgspider_svr / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT public.influx_distinct(value2) FROM public.s31influx
(14 rows)

-- select distinct with having (result, not pushdown, stub call error)
--Testcase 909:
SELECT influx_distinct(value2) FROM s3 HAVING influx_distinct(value2) > 100 ORDER BY 1;
 influx_distinct 
-----------------
             300
(1 row)

--Drop all foreign tables
--Testcase 910:
DROP FOREIGN TABLE s3__influxdb_svr__0;
--Testcase 911:
DROP USER MAPPING FOR CURRENT_USER SERVER influxdb_svr;
--Testcase 912:
DROP SERVER influxdb_svr;
--Testcase 913:
DROP EXTENSION influxdb_fdw;
--Testcase 914:
DROP FOREIGN TABLE s3__pgspider_svr__0;
--Testcase 915:
DROP USER MAPPING FOR CURRENT_USER SERVER pgspider_svr;
--Testcase 916:
DROP SERVER pgspider_svr;
--Testcase 917:
DROP EXTENSION pgspider_fdw;
--Testcase 918:
DROP FOREIGN TABLE s3;
--Testcase 919:
DROP USER MAPPING FOR CURRENT_USER SERVER pgspider_core_svr;
--Testcase 920:
DROP SERVER pgspider_core_svr;
--Testcase 921:
DROP EXTENSION pgspider_core_fdw;
