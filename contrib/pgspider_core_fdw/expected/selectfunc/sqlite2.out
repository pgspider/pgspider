--Testcase 1:
SET datestyle=ISO;
--Testcase 2:
SET timezone='Japan';
--Testcase 3:
CREATE EXTENSION pgspider_core_fdw;
--Testcase 4:
CREATE SERVER pgspider_core_svr FOREIGN DATA WRAPPER pgspider_core_fdw OPTIONS (host '127.0.0.1');
--Testcase 5:
CREATE USER MAPPING FOR CURRENT_USER SERVER pgspider_core_svr;
----------------------------------------------------------
-- test structure
-- PGSpider Top Node -> Child PGSpider Node -> Data source
-- stub functions are provided by pgspider_fdw
----------------------------------------------------------
-- Data source: sqlite
--Testcase 6:
CREATE FOREIGN TABLE s3 (id text, time timestamp, tag1 text, value1 float, value2 int, value3 float, value4 int, str1 text, str2 text, __spd_url text) SERVER pgspider_core_svr;
--Testcase 7:
CREATE EXTENSION pgspider_fdw;
--Testcase 8:
CREATE SERVER pgspider_svr FOREIGN DATA WRAPPER pgspider_fdw OPTIONS (host '127.0.0.1', port '5433', dbname 'postgres');
--Testcase 9:
CREATE USER MAPPING FOR CURRENT_USER SERVER pgspider_svr;
--Testcase 10:
CREATE FOREIGN TABLE s3__pgspider_svr__0 (id text, time timestamp, tag1 text, value1 float, value2 int, value3 float, value4 int, str1 text, str2 text, __spd_url text) SERVER pgspider_svr OPTIONS(table_name 's3sqlite');
-- s3 (value1 as float8, value2 as bigint)
--Testcase 11:
\d s3;
                               Foreign table "public.s3"
  Column   |            Type             | Collation | Nullable | Default | FDW options 
-----------+-----------------------------+-----------+----------+---------+-------------
 id        | text                        |           |          |         | 
 time      | timestamp without time zone |           |          |         | 
 tag1      | text                        |           |          |         | 
 value1    | double precision            |           |          |         | 
 value2    | integer                     |           |          |         | 
 value3    | double precision            |           |          |         | 
 value4    | integer                     |           |          |         | 
 str1      | text                        |           |          |         | 
 str2      | text                        |           |          |         | 
 __spd_url | text                        |           |          |         | 
Server: pgspider_core_svr

--Testcase 12:
SELECT * FROM s3 ORDER BY 1,2,3,4,5,6,7,8,9,10;
 id |        time         | tag1 | value1 | value2 | value3 | value4 |   str1    |   str2    |         __spd_url         
----+---------------------+------+--------+--------+--------+--------+-----------+-----------+---------------------------
 0  | 1970-01-01 00:00:00 | a    |    0.1 |    100 |   -0.1 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/sqlite_svr/
 1  | 1970-01-01 00:00:01 | a    |    0.2 |    100 |   -0.2 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/sqlite_svr/
 2  | 1970-01-01 00:00:02 | a    |    0.3 |    100 |   -0.3 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/sqlite_svr/
 3  | 1970-01-01 00:00:03 | b    |    1.1 |    200 |   -1.1 |   -200 | ---XYZ--- |    XYZ    | /pgspider_svr/sqlite_svr/
 4  | 1970-01-01 00:00:04 | b    |    2.2 |    200 |   -2.2 |   -200 | ---XYZ--- |    XYZ    | /pgspider_svr/sqlite_svr/
 5  | 1970-01-01 00:00:05 | b    |    3.3 |    200 |   -3.3 |   -200 | ---XYZ--- |    XYZ    | /pgspider_svr/sqlite_svr/
(6 rows)

-- select abs (builtin function, explain)
--Testcase 13:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=100.00..246.52 rows=3413 width=24)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM public.s3sqlite
(4 rows)

-- select abs (buitin function, result)
--Testcase 14:
SELECT * FROM (
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3
) AS t ORDER BY 1,2,3,4;
 abs | abs | abs | abs 
-----+-----+-----+-----
 0.1 | 100 | 0.1 | 100
 0.2 | 100 | 0.2 | 100
 0.3 | 100 | 0.3 | 100
 1.1 | 200 | 1.1 | 200
 2.2 | 200 | 2.2 | 200
 3.3 | 200 | 3.3 | 200
(6 rows)

-- select abs (builtin function, not pushdown constraints, explain)
--Testcase 15:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE to_hex(value2) != '64';
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=100.00..263.41 rows=3396 width=24)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Filter: (to_hex(s3.value2) <> '64'::text)
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT abs(value1), abs(value2), abs(value3), abs(value4), value2 FROM public.s3sqlite
(5 rows)

-- select abs (builtin function, not pushdown constraints, result)
--Testcase 16:
SELECT * FROM (
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE to_hex(value2) != '64'
) AS t ORDER BY 1,2,3,4;
 abs | abs | abs | abs 
-----+-----+-----+-----
 1.1 | 200 | 1.1 | 200
 2.2 | 200 | 2.2 | 200
 3.3 | 200 | 3.3 | 200
(3 rows)

-- select abs (builtin function, pushdown constraints, explain)
--Testcase 17:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE value2 != 200;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=100.00..254.54 rows=3396 width=24)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM public.s3sqlite WHERE ((value2 <> 200))
(4 rows)

-- select abs (builtin function, pushdown constraints, result)
--Testcase 18:
SELECT * FROM (
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE value2 != 200
) AS t ORDER BY 1,2,3,4;
 abs | abs | abs | abs 
-----+-----+-----+-----
 0.1 | 100 | 0.1 | 100
 0.2 | 100 | 0.2 | 100
 0.3 | 100 | 0.3 | 100
(3 rows)

-- select abs as nest function with agg (pushdown, explain)
--Testcase 19:
EXPLAIN VERBOSE
SELECT sum(value3),abs(sum(value3)) FROM s3;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan  (cost=0.00..0.00 rows=1 width=16)
   Output: (sum(value3)), (abs(sum(value3)))
   Node: pgspider_svr / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.s3)
     Remote SQL: SELECT sum(value3), abs(sum(value3)) FROM public.s3sqlite
(6 rows)

-- select abs as nest function with agg (pushdown, result)
--Testcase 20:
SELECT sum(value3),abs(sum(value3)) FROM s3;
 sum  | abs 
------+-----
 -7.2 | 7.2
(1 row)

-- select abs with non pushdown func and explicit constant (explain)
--Testcase 21:
EXPLAIN VERBOSE
SELECT abs(value3), pi(), 4.1 FROM s3;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=100.00..220.92 rows=3413 width=48)
   Output: (abs(value3)), '3.141592653589793'::double precision, 4.1
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT abs(value3), 3.141592653589793::double precision, 4.1 FROM public.s3sqlite
(4 rows)

-- select abs with non pushdown func and explicit constant (result)
--Testcase 22:
SELECT * FROM (
SELECT abs(value3), pi(), 4.1 FROM s3
) AS t ORDER BY 1,2,3;
 abs |        pi         | ?column? 
-----+-------------------+----------
 0.1 | 3.141592653589793 |      4.1
 0.2 | 3.141592653589793 |      4.1
 0.3 | 3.141592653589793 |      4.1
 1.1 | 3.141592653589793 |      4.1
 2.2 | 3.141592653589793 |      4.1
 3.3 | 3.141592653589793 |      4.1
(6 rows)

-- select abs with order by (explain)
--Testcase 23:
EXPLAIN VERBOSE
SELECT value1, abs(1-value1) FROM s3 ORDER BY abs(1-value1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=429.74..438.28 rows=3413 width=16)
   Output: value1, (abs(('1'::double precision - value1)))
   Sort Key: (abs(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=100.00..229.45 rows=3413 width=16)
         Output: value1, (abs(('1'::double precision - value1)))
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT value1, abs((1::double precision - value1)) FROM public.s3sqlite
(7 rows)

-- select abs with order by (result)
--Testcase 24:
SELECT value1, abs(1-value1) FROM s3 ORDER BY abs(1-value1);
 value1 |         abs         
--------+---------------------
    1.1 | 0.10000000000000009
    0.3 |                 0.7
    0.2 |                 0.8
    0.1 |                 0.9
    2.2 |  1.2000000000000002
    3.3 |                 2.3
(6 rows)

-- select abs with order by index (result)
--Testcase 25:
SELECT value1, abs(1-value1) FROM s3 ORDER BY 2,1;
 value1 |         abs         
--------+---------------------
    1.1 | 0.10000000000000009
    0.3 |                 0.7
    0.2 |                 0.8
    0.1 |                 0.9
    2.2 |  1.2000000000000002
    3.3 |                 2.3
(6 rows)

-- select abs with order by index (result)
--Testcase 26:
SELECT value1, abs(1-value1) FROM s3 ORDER BY 1,2;
 value1 |         abs         
--------+---------------------
    0.1 |                 0.9
    0.2 |                 0.8
    0.3 |                 0.7
    1.1 | 0.10000000000000009
    2.2 |  1.2000000000000002
    3.3 |                 2.3
(6 rows)

-- select abs and as
--Testcase 27:
SELECT * FROM (
SELECT abs(value3) as abs1 FROM s3
) AS t ORDER BY 1;
 abs1 
------
  0.1
  0.2
  0.3
  1.1
  2.2
  3.3
(6 rows)

-- select abs with arithmetic and tag in the middle (explain)
--Testcase 28:
EXPLAIN VERBOSE
SELECT abs(value1) + 1, value2, tag1, sqrt(value2) FROM s3;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=100.00..246.52 rows=3413 width=52)
   Output: ((abs(value1) + '1'::double precision)), value2, tag1, (sqrt((value2)::double precision))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT (abs(value1) + 1::double precision), value2, tag1, sqrt(value2) FROM public.s3sqlite
(4 rows)

-- select abs with arithmetic and tag in the middle (result)
--Testcase 29:
SELECT * FROM (
SELECT abs(value1) + 1, value2, tag1, sqrt(value2) FROM s3
) AS t ORDER BY 1,2,3,4;
 ?column? | value2 | tag1 |        sqrt        
----------+--------+------+--------------------
      1.1 |    100 | a    |                 10
      1.2 |    100 | a    |                 10
      1.3 |    100 | a    |                 10
      2.1 |    200 | b    | 14.142135623730951
      3.2 |    200 | b    | 14.142135623730951
      4.3 |    200 | b    | 14.142135623730951
(6 rows)

-- select with order by limit (explain)
--Testcase 30:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value3), sqrt(value2) FROM s3 ORDER BY abs(value3) LIMIT 1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=263.58..263.59 rows=1 width=24)
   Output: (abs(value1)), (abs(value3)), (sqrt((value2)::double precision))
   ->  Sort  (cost=263.58..272.12 rows=3413 width=24)
         Output: (abs(value1)), (abs(value3)), (sqrt((value2)::double precision))
         Sort Key: (abs(s3.value3))
         ->  Foreign Scan on public.s3  (cost=100.00..246.52 rows=3413 width=24)
               Output: (abs(value1)), (abs(value3)), (sqrt((value2)::double precision))
               Node: pgspider_svr / Status: Alive
                 Remote SQL: SELECT abs(value1), abs(value3), sqrt(value2) FROM public.s3sqlite
(9 rows)

-- select with order by limit (explain)
--Testcase 31:
SELECT abs(value1), abs(value3), sqrt(value2) FROM s3 ORDER BY abs(value3) LIMIT 1;
 abs | abs | sqrt 
-----+-----+------
 0.1 | 0.1 |   10
(1 row)

-- select mixing with non pushdown func (all not pushdown, explain)
--Testcase 32:
EXPLAIN VERBOSE
SELECT abs(value1), sqrt(value2), upper(tag1) FROM s3;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=100.00..246.52 rows=3413 width=48)
   Output: (abs(value1)), (sqrt((value2)::double precision)), (upper(tag1))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT abs(value1), sqrt(value2), upper(tag1) FROM public.s3sqlite
(4 rows)

-- select mixing with non pushdown func (result)
--Testcase 33:
SELECT * FROM (
SELECT abs(value1), sqrt(value2), upper(tag1) FROM s3
) AS t ORDER BY 1,2,3;
 abs |        sqrt        | upper 
-----+--------------------+-------
 0.1 |                 10 | A
 0.2 |                 10 | A
 0.3 |                 10 | A
 1.1 | 14.142135623730951 | B
 2.2 | 14.142135623730951 | B
 3.3 | 14.142135623730951 | B
(6 rows)

-- sqlite pushdown supported functions (explain)
--Testcase 34:
EXPLAIN VERBOSE
SELECT abs(value3), length(tag1), ltrim(str2), ltrim(str1, '-'), replace(str1, 'XYZ', 'ABC'), round(value3), rtrim(str1, '-'), rtrim(str2), substr(str1, 4), substr(str1, 4, 3) FROM s3;
                                                                                                                  QUERY PLAN                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=100.00..297.71 rows=3413 width=244)
   Output: (abs(value3)), (length(tag1)), (ltrim(str2)), (ltrim(str1, '-'::text)), (replace(str1, 'XYZ'::text, 'ABC'::text)), (round(value3)), (rtrim(str1, '-'::text)), (rtrim(str2)), (substr(str1, 4)), (substr(str1, 4, 3))
   Node: pgspider_svr / Status: Alive
     Remote SQL: SELECT abs(value3), length(tag1), ltrim(str2), ltrim(str1, '-'::text), replace(str1, 'XYZ'::text, 'ABC'::text), round(value3), rtrim(str1, '-'::text), rtrim(str2), substr(str1, 4), substr(str1, 4, 3) FROM public.s3sqlite
(4 rows)

-- sqlite pushdown supported functions (result)
--Testcase 35:
SELECT * FROM (
SELECT abs(value3), length(tag1), ltrim(str2), ltrim(str1, '-'), replace(str1, 'XYZ', 'ABC'), round(value3), rtrim(str1, '-'), rtrim(str2), substr(str1, 4), substr(str1, 4, 3) FROM s3
) AS t ORDER BY 1,2,3,4,5,6,7,8,9,10;
 abs | length | ltrim  | ltrim  |  replace  | round | rtrim  | rtrim  | substr | substr 
-----+--------+--------+--------+-----------+-------+--------+--------+--------+--------
 0.1 |      1 | XYZ    | XYZ--- | ---ABC--- |     0 | ---XYZ |    XYZ | XYZ--- | XYZ
 0.2 |      1 | XYZ    | XYZ--- | ---ABC--- |     0 | ---XYZ |    XYZ | XYZ--- | XYZ
 0.3 |      1 | XYZ    | XYZ--- | ---ABC--- |     0 | ---XYZ |    XYZ | XYZ--- | XYZ
 1.1 |      1 | XYZ    | XYZ--- | ---ABC--- |    -1 | ---XYZ |    XYZ | XYZ--- | XYZ
 2.2 |      1 | XYZ    | XYZ--- | ---ABC--- |    -2 | ---XYZ |    XYZ | XYZ--- | XYZ
 3.3 |      1 | XYZ    | XYZ--- | ---ABC--- |    -3 | ---XYZ |    XYZ | XYZ--- | XYZ
(6 rows)

--Drop all foreign tables
--Testcase 36:
DROP FOREIGN TABLE s3__pgspider_svr__0;
--Testcase 37:
DROP USER MAPPING FOR CURRENT_USER SERVER pgspider_svr;
--Testcase 38:
DROP SERVER pgspider_svr;
--Testcase 39:
DROP EXTENSION pgspider_fdw;
--Testcase 40:
DROP FOREIGN TABLE s3;
--Testcase 41:
DROP USER MAPPING FOR CURRENT_USER SERVER pgspider_core_svr;
--Testcase 42:
DROP SERVER pgspider_core_svr;
--Testcase 43:
DROP EXTENSION pgspider_core_fdw;
