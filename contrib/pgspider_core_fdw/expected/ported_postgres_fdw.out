-- ===================================================================
-- create FDW objects
-- ===================================================================
--Testcase 1:
CREATE EXTENSION postgres_fdw;
--Testcase 2:
CREATE EXTENSION pgspider_core_fdw;
--Testcase 3:
CREATE EXTENSION dblink;
-- we use dblink to support insert data during test is in progress in some test cases
--Testcase 4:
select dblink_connect('dbname=postdb host=127.0.0.1
  port=15432 user=postgres password=postgres');
 dblink_connect 
----------------
 OK
(1 row)

--Testcase 5:
CREATE SERVER pgspider_srv FOREIGN DATA WRAPPER pgspider_core_fdw;
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER postgres_srv FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (host '127.0.0.1',
                     port '15432',
                     dbname 'postdb'
            )$$;
        EXECUTE $$CREATE SERVER postgres_srv2 FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (host '127.0.0.1',
                     port '15432',
                     dbname 'postdb'
            )$$;
        EXECUTE $$CREATE SERVER postgres_srv3 FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (host '127.0.0.1',
                     port '15432',
                     dbname 'postdb'
            )$$;
    END;
$d$;
--Testcase 6:
CREATE USER MAPPING FOR public SERVER pgspider_srv
  OPTIONS (user 'postgres', password 'postgres');
--Testcase 7:
CREATE USER MAPPING FOR public SERVER postgres_srv
  OPTIONS (user 'postgres', password 'postgres');
--Testcase 8:
CREATE USER MAPPING FOR public SERVER postgres_srv2
  OPTIONS (user 'postgres', password 'postgres');
--Testcase 9:
CREATE USER MAPPING FOR public SERVER postgres_srv3
  OPTIONS (user 'postgres', password 'postgres');
-- ===================================================================
-- create objects used through PostgreSQL FDW server
-- ===================================================================
--Testcase 10:
CREATE TYPE user_enum AS ENUM ('foo', 'bar', 'buz');
--Testcase 11:
CREATE SCHEMA "S 1";
--CREATE TABLE "S 1"."T 1" (
--	"C 1" int NOT NULL,
--	c2 int NOT NULL,
--	c3 text,
--	c4 timestamptz,
--	c5 timestamp,
--	c6 varchar(10),
--	c7 char(10),
--	c8 user_enum,
--	CONSTRAINT t1_pkey PRIMARY KEY ("C 1")
--);
--CREATE TABLE "S 1"."T 2" (
--	c1 int NOT NULL,
--	c2 text,
--	CONSTRAINT t2_pkey PRIMARY KEY (c1)
--);
--CREATE TABLE "S 1"."T 3" (
--	c1 int NOT NULL,
--	c2 int NOT NULL,
--	c3 text,
--	CONSTRAINT t3_pkey PRIMARY KEY (c1)
--);
--CREATE TABLE "S 1"."T 4" (
--	c1 int NOT NULL,
--	c2 int NOT NULL,
--	c3 text,
--	CONSTRAINT t4_pkey PRIMARY KEY (c1)
--);
-- Disable autovacuum for these tables to avoid unexpected effects of that
--ALTER TABLE "S 1"."T 1" SET (autovacuum_enabled = 'false');
--ALTER TABLE "S 1"."T 2" SET (autovacuum_enabled = 'false');
--ALTER TABLE "S 1"."T 3" SET (autovacuum_enabled = 'false');
--ALTER TABLE "S 1"."T 4" SET (autovacuum_enabled = 'false');
IMPORT FOREIGN SCHEMA "S 1" FROM SERVER postgres_srv INTO "S 1";
--Testcase 12:
INSERT INTO "S 1"."T 1"
	SELECT id,
	       id % 10,
	       to_char(id, 'FM00000'),
	       '1970-01-01'::timestamptz + ((id % 100) || ' days')::interval,
	       '1970-01-01'::timestamp + ((id % 100) || ' days')::interval,
	       id % 10,
	       id % 10,
	       'foo'::user_enum
	FROM generate_series(1, 1000) id;
--Testcase 13:
INSERT INTO "S 1"."T 2"
	SELECT id,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
--Testcase 14:
INSERT INTO "S 1"."T 3"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
--Testcase 15:
DELETE FROM "S 1"."T 3" WHERE c1 % 2 != 0;	-- delete for outer join tests
--Testcase 16:
INSERT INTO "S 1"."T 4"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
--Testcase 17:
DELETE FROM "S 1"."T 4" WHERE c1 % 3 != 0;	-- delete for outer join tests
ANALYZE "S 1"."T 1";
ANALYZE "S 1"."T 2";
ANALYZE "S 1"."T 3";
ANALYZE "S 1"."T 4";
-- ===================================================================
-- create foreign tables
-- ===================================================================
--Testcase 18:
CREATE FOREIGN TABLE ft1 (
	c0 int,
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 user_enum,
	__spd_url text
) SERVER pgspider_srv;
--Testcase 19:
ALTER FOREIGN TABLE ft1 DROP COLUMN c0;
--Testcase 20:
CREATE FOREIGN TABLE ft1__postgres_srv__0 (
	c0 int,
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 user_enum
) SERVER postgres_srv OPTIONS (schema_name 'S 1', table_name 'T 1');
--Testcase 21:
ALTER FOREIGN TABLE ft1__postgres_srv__0 DROP COLUMN c0;
--Testcase 22:
CREATE FOREIGN TABLE ft2 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	cx int,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 user_enum,
	__spd_url text
) SERVER pgspider_srv;
--Testcase 23:
ALTER FOREIGN TABLE ft2 DROP COLUMN cx;
--Testcase 24:
CREATE FOREIGN TABLE ft2__postgres_srv__0 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	cx int,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 user_enum
) SERVER postgres_srv OPTIONS (schema_name 'S 1', table_name 'T 1');
--Testcase 25:
ALTER FOREIGN TABLE ft2__postgres_srv__0 DROP COLUMN cx;
--Testcase 26:
CREATE FOREIGN TABLE ft4 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	__spd_url text
) SERVER pgspider_srv;
--Testcase 27:
CREATE FOREIGN TABLE ft4__postgres_srv__0 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER postgres_srv OPTIONS (schema_name 'S 1', table_name 'T 3');
--Testcase 28:
CREATE FOREIGN TABLE ft5 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	__spd_url text
) SERVER pgspider_srv;
--Testcase 29:
CREATE FOREIGN TABLE ft5__postgres_srv__0 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER postgres_srv OPTIONS (schema_name 'S 1', table_name 'T 4');
--Testcase 30:
CREATE FOREIGN TABLE ft6 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	__spd_url text
) SERVER pgspider_srv;
--Testcase 31:
CREATE FOREIGN TABLE ft6__postgres_srv2__0 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER postgres_srv2 OPTIONS (schema_name 'S 1', table_name 'T 4');
-- ===================================================================
-- tests for validator
-- ===================================================================
-- skip, pgspider_core_fdw does not support these options
-- requiressl and some other parameters are omitted because
-- valid values for them depend on configure options
--  ALTER SERVER pgspider_srv OPTIONS (
-- 	use_remote_estimate 'false',
-- 	updatable 'true',
-- 	fdw_startup_cost '123.456',
-- 	fdw_tuple_cost '0.123',
-- 	service 'value',
-- 	connect_timeout 'value',
-- 	dbname 'value',
-- 	host 'value',
-- 	hostaddr 'value',
-- 	port 'value',
-- 	--client_encoding 'value',
-- 	application_name 'value',
-- 	--fallback_application_name 'value',
-- 	keepalives 'value',
-- 	keepalives_idle 'value',
-- 	keepalives_interval 'value',
-- 	tcp_user_timeout 'value',
-- 	-- requiressl 'value',
-- 	sslcompression 'value',
-- 	sslmode 'value',
-- 	sslcert 'value',
-- 	sslkey 'value',
-- 	sslrootcert 'value',
-- 	sslcrl 'value',
-- 	--requirepeer 'value',
-- 	krbsrvname 'value',
-- 	gsslib 'value'
-- 	--replication 'value'
--);
-- Error, invalid list syntax
--  ALTER SERVER pgspider_srv OPTIONS (ADD extensions 'foo; bar');
-- OK but gets a warning
-- ALTER SERVER pgspider_srv OPTIONS (ADD extensions 'foo, bar');
-- ALTER SERVER pgspider_srv OPTIONS (DROP extensions);
--Testcase 34:
ALTER USER MAPPING FOR public SERVER pgspider_srv
	OPTIONS (DROP user, DROP password);
-- Skip, pgspider_core_fdw does not support ssl
-- Attempt to add a valid option that's not allowed in a user mapping
--ALTER USER MAPPING FOR public SERVER pgspider_srv
--	OPTIONS (ADD sslmode 'require');
-- But we can add valid ones fine
--ALTER USER MAPPING FOR public SERVER pgspider_srv
--	OPTIONS (ADD sslpassword 'dummy');
-- Ensure valid options we haven't used in a user mapping yet are
-- permitted to check validation.
--ALTER USER MAPPING FOR public SERVER pgspider_srv
--	OPTIONS (ADD sslkey 'value', ADD sslcert 'value');
--Testcase 35:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c1 OPTIONS (column_name 'C 1');
--Testcase 36:
ALTER FOREIGN TABLE ft1__postgres_srv__0 ALTER COLUMN c1 OPTIONS (column_name 'C 1');
--Testcase 37:
ALTER FOREIGN TABLE ft2 ALTER COLUMN c1 OPTIONS (column_name 'C 1');
--Testcase 38:
ALTER FOREIGN TABLE ft2__postgres_srv__0 ALTER COLUMN c1 OPTIONS (column_name 'C 1');
--Testcase 39:
\det+
                                        List of foreign tables
 Schema |         Table         |    Server     |              FDW options              | Description 
--------+-----------------------+---------------+---------------------------------------+-------------
 public | ft1                   | pgspider_srv  |                                       | 
 public | ft1__postgres_srv__0  | postgres_srv  | (schema_name 'S 1', table_name 'T 1') | 
 public | ft2                   | pgspider_srv  |                                       | 
 public | ft2__postgres_srv__0  | postgres_srv  | (schema_name 'S 1', table_name 'T 1') | 
 public | ft4                   | pgspider_srv  |                                       | 
 public | ft4__postgres_srv__0  | postgres_srv  | (schema_name 'S 1', table_name 'T 3') | 
 public | ft5                   | pgspider_srv  |                                       | 
 public | ft5__postgres_srv__0  | postgres_srv  | (schema_name 'S 1', table_name 'T 4') | 
 public | ft6                   | pgspider_srv  |                                       | 
 public | ft6__postgres_srv2__0 | postgres_srv2 | (schema_name 'S 1', table_name 'T 4') | 
(10 rows)

-- Test that alteration of server options causes reconnection
-- Remote's errors might be non-English, so hide them to ensure stable results
\set VERBOSITY terse
--Testcase 40:
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |              c4              
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

--Testcase 41:
ALTER SERVER postgres_srv OPTIONS (SET dbname 'no such database');
--Testcase 42:
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: could not connect to server "postgres_srv"
DO $d$
    BEGIN
        EXECUTE $$ALTER SERVER postgres_srv
            OPTIONS (SET dbname 'postdb')$$;
    END;
$d$;
--Testcase 43:
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
  c3   |              c4              
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

-- Test that alteration of user mapping options causes reconnection
-- ALTER USER MAPPING FOR CURRENT_USER SERVER postgres_srv
--   OPTIONS (ADD user 'no such user');
-- SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
-- ALTER USER MAPPING FOR CURRENT_USER SERVER postgres_srv
--   OPTIONS (DROP user);
-- SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
\set VERBOSITY default
-- Now we should be able to run ANALYZE.
-- To exercise multiple code paths, we use local stats on ft1
-- and remote-estimate mode on ft2.
--ANALYZE ft1;
--Testcase 44:
ALTER FOREIGN TABLE ft2 OPTIONS (use_remote_estimate 'true');
-- ===================================================================
-- test error case for create publication on foreign table
-- ===================================================================
--Testcase 1186:
CREATE PUBLICATION testpub_ftbl FOR TABLE ft1;  -- should fail
ERROR:  cannot add relation "ft1" to publication
DETAIL:  This operation is not supported for foreign tables.
-- ===================================================================
-- simple queries
-- ===================================================================
-- single table without alias
--Testcase 45:
EXPLAIN (COSTS OFF) SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
              QUERY PLAN              
--------------------------------------
 Foreign Scan on ft1
   Node: postgres_srv / Status: Alive
(2 rows)

--Testcase 46:
SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
 103 |  3 | 00103 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /postgres_srv/
 104 |  4 | 00104 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /postgres_srv/
 105 |  5 | 00105 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /postgres_srv/
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 107 |  7 | 00107 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /postgres_srv/
 108 |  8 | 00108 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /postgres_srv/
 109 |  9 | 00109 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /postgres_srv/
 110 |  0 | 00110 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /postgres_srv/
(10 rows)

-- single table with alias - also test that tableoid sort is not pushed to remote side
--Testcase 47:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, tableoid
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, tableoid
         Sort Key: t1.c3, t1.c1, t1.tableoid
         ->  Foreign Scan on public.ft1 t1
               Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, tableoid
               Node: postgres_srv / Status: Alive
                 Limit push-down: no
                 Sort push-down: no
                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(11 rows)

--Testcase 48:
SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
 103 |  3 | 00103 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /postgres_srv/
 104 |  4 | 00104 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /postgres_srv/
 105 |  5 | 00105 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /postgres_srv/
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 107 |  7 | 00107 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /postgres_srv/
 108 |  8 | 00108 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /postgres_srv/
 109 |  9 | 00109 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /postgres_srv/
 110 |  0 | 00110 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /postgres_srv/
(10 rows)

-- whole-row reference
--Testcase 49:
EXPLAIN (VERBOSE, COSTS OFF) SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: t1.*, c3, c1
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c3 ASC NULLS LAST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
(6 rows)

--Testcase 50:
SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                    t1                                                     
-----------------------------------------------------------------------------------------------------------
 (101,1,00101,"Fri Jan 02 00:00:00 1970 PST","Fri Jan 02 00:00:00 1970",1,"1         ",foo,/postgres_srv/)
 (102,2,00102,"Sat Jan 03 00:00:00 1970 PST","Sat Jan 03 00:00:00 1970",2,"2         ",foo,/postgres_srv/)
 (103,3,00103,"Sun Jan 04 00:00:00 1970 PST","Sun Jan 04 00:00:00 1970",3,"3         ",foo,/postgres_srv/)
 (104,4,00104,"Mon Jan 05 00:00:00 1970 PST","Mon Jan 05 00:00:00 1970",4,"4         ",foo,/postgres_srv/)
 (105,5,00105,"Tue Jan 06 00:00:00 1970 PST","Tue Jan 06 00:00:00 1970",5,"5         ",foo,/postgres_srv/)
 (106,6,00106,"Wed Jan 07 00:00:00 1970 PST","Wed Jan 07 00:00:00 1970",6,"6         ",foo,/postgres_srv/)
 (107,7,00107,"Thu Jan 08 00:00:00 1970 PST","Thu Jan 08 00:00:00 1970",7,"7         ",foo,/postgres_srv/)
 (108,8,00108,"Fri Jan 09 00:00:00 1970 PST","Fri Jan 09 00:00:00 1970",8,"8         ",foo,/postgres_srv/)
 (109,9,00109,"Sat Jan 10 00:00:00 1970 PST","Sat Jan 10 00:00:00 1970",9,"9         ",foo,/postgres_srv/)
 (110,0,00110,"Sun Jan 11 00:00:00 1970 PST","Sun Jan 11 00:00:00 1970",0,"0         ",foo,/postgres_srv/)
(10 rows)

-- empty result
--Testcase 51:
SELECT * FROM ft1 WHERE false;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 | __spd_url 
----+----+----+----+----+----+----+----+-----------
(0 rows)

-- with WHERE clause
--Testcase 52:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c7 >= '1')) AND (("C 1" = 101)) AND ((c6 = '1'))
(4 rows)

--Testcase 53:
SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

-- with FOR UPDATE/SHARE
--Testcase 54:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 LockRows
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, t1.*
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, t1.*
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 101))
(6 rows)

--Testcase 55:
SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

--Testcase 56:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 LockRows
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, t1.*
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, t1.*
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 102))
(6 rows)

--Testcase 57:
SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
(1 row)

-- aggregate
--Testcase 58:
SELECT COUNT(*) FROM ft1 t1;
 count 
-------
  1000
(1 row)

-- subquery
--Testcase 59:
SELECT * FROM ft1 t1 WHERE t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 <= 10) ORDER BY c1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /postgres_srv/
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /postgres_srv/
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /postgres_srv/
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /postgres_srv/
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /postgres_srv/
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /postgres_srv/
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /postgres_srv/
(10 rows)

-- subquery+MAX
--Testcase 60:
SELECT * FROM ft1 t1 WHERE t1.c3 = (SELECT MAX(c3) FROM ft2 t2) ORDER BY c1;
  c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
------+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 1000 |  0 | 01000 | Thu Jan 01 00:00:00 1970 PST | Thu Jan 01 00:00:00 1970 | 0  | 0          | foo | /postgres_srv/
(1 row)

-- used in CTE
--Testcase 61:
WITH t1 AS (SELECT * FROM ft1 WHERE c1 <= 10) SELECT t2.c1, t2.c2, t2.c3, t2.c4 FROM t1, ft2 t2 WHERE t1.c1 = t2.c1 ORDER BY t1.c1;
 c1 | c2 |  c3   |              c4              
----+----+-------+------------------------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970 PST
(10 rows)

-- fixed values
--Testcase 62:
SELECT 'fixed', NULL FROM ft1 t1 WHERE c1 = 1;
 ?column? | ?column? 
----------+----------
 fixed    | 
(1 row)

-- Test forcing the remote server to produce sorted data for a merge join.
--Testcase 63:
SET enable_hashjoin TO false;
--Testcase 64:
SET enable_nestloop TO false;
-- inner join; expressions in the clauses appear in the equivalence class list
--Testcase 65:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C 1" FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2."C 1"
   ->  Merge Join
         Output: t1.c1, t2."C 1"
         Merge Cond: (t2."C 1" = t1.c1)
         ->  Sort
               Output: t2."C 1"
               Sort Key: t2."C 1"
               ->  Foreign Scan on "S 1"."T 1" t2
                     Output: t2."C 1"
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(19 rows)

--Testcase 66:
SELECT t1.c1, t2."C 1" FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
 c1  | C 1 
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
--Testcase 67:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C 1" FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2."C 1"
   ->  Merge Right Join
         Output: t1.c1, t2."C 1"
         Merge Cond: (t2."C 1" = t1.c1)
         ->  Sort
               Output: t2."C 1"
               Sort Key: t2."C 1"
               ->  Foreign Scan on "S 1"."T 1" t2
                     Output: t2."C 1"
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(19 rows)

--Testcase 68:
SELECT t1.c1, t2."C 1" FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
 c1  | C 1 
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- A join between local table and foreign join. ORDER BY clause is added to the
-- foreign join so that the local table can be joined using merge join strategy.
--Testcase 69:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1" FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1"
   ->  Merge Left Join
         Output: t1."C 1"
         Merge Cond: (t1."C 1" = t3.c1)
         ->  Sort
               Output: t1."C 1"
               Sort Key: t1."C 1"
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1."C 1"
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Sort
               Output: t3.c1
               Sort Key: t3.c1
               ->  Foreign Scan
                     Output: t3.c1
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Relations: (public.ft1 t2) INNER JOIN (public.ft2 t3)
                       Remote SQL: SELECT r3."C 1" FROM ("S 1"."T 1" r2 INNER JOIN "S 1"."T 1" r3 ON (((r2."C 1" = r3."C 1"))))
(20 rows)

--Testcase 70:
SELECT t1."C 1" FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- Test similar to above, except that the full join prevents any equivalence
-- classes from being merged. This produces single relation equivalence classes
-- included in join restrictions.
--Testcase 71:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1", t2.c1, t3.c1
   ->  Merge Left Join
         Output: t1."C 1", t2.c1, t3.c1
         Merge Cond: (t1."C 1" = t3.c1)
         ->  Sort
               Output: t1."C 1"
               Sort Key: t1."C 1"
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1."C 1"
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Sort
               Output: t3.c1, t2.c1
               Sort Key: t3.c1
               ->  Foreign Scan
                     Output: t3.c1, t2.c1
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Relations: (public.ft2 t3) LEFT JOIN (public.ft1 t2)
                       Remote SQL: SELECT r3."C 1", r2."C 1" FROM ("S 1"."T 1" r3 LEFT JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r3."C 1"))))
(20 rows)

--Testcase 72:
SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

-- Test similar to above with all full outer joins
--Testcase 73:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1", t2.c1, t3.c1
   ->  Merge Full Join
         Output: t1."C 1", t2.c1, t3.c1
         Merge Cond: (t1."C 1" = t3.c1)
         ->  Sort
               Output: t1."C 1"
               Sort Key: t1."C 1"
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1."C 1"
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Sort
               Output: t2.c1, t3.c1
               Sort Key: t3.c1
               ->  Foreign Scan
                     Output: t2.c1, t3.c1
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Relations: (public.ft1 t2) FULL JOIN (public.ft2 t3)
                       Remote SQL: SELECT r2."C 1", r3."C 1" FROM ("S 1"."T 1" r2 FULL JOIN "S 1"."T 1" r3 ON (((r2."C 1" = r3."C 1"))))
(20 rows)

--Testcase 74:
SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

--Testcase 75:
RESET enable_hashjoin;
--Testcase 76:
RESET enable_nestloop;
-- Test executing assertion in estimate_path_cost_size() that makes sure that
-- retrieved_rows for foreign rel re-used to cost pre-sorted foreign paths is
-- a sensible value even when the rel has tuples=0
--Testcase 77:
CREATE FOREIGN TABLE ft_empty (c1 int NOT NULL, c2 text, __spd_url text)
  SERVER pgspider_srv;
--Testcase 78:
CREATE FOREIGN TABLE ft_empty__postgres_srv__0 (c1 int NOT NULL, c2 text)
  SERVER postgres_srv OPTIONS (table_name 'ft_empty');
--Testcase 79:
INSERT INTO ft_empty__postgres_srv__0
  SELECT id, 'AAA' || to_char(id, 'FM000') FROM generate_series(1, 100) id;
--Testcase 80:
DELETE FROM ft_empty__postgres_srv__0;
ANALYZE ft_empty__postgres_srv__0;
--Testcase 81:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft_empty ORDER BY c1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft_empty
   Output: c1, c2, __spd_url
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Remote SQL: SELECT c1, c2 FROM public.ft_empty ORDER BY c1 ASC NULLS LAST
(5 rows)

-- ===================================================================
-- WHERE with remotely-executable conditions
-- ===================================================================
--Testcase 82:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 1;         -- Var, OpExpr(b), Const
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

--Testcase 83:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 100 AND t1.c2 = 0; -- BoolExpr
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 100)) AND ((c2 = 0))
(4 rows)

--Testcase 84:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NULL;        -- NullTest
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" IS NULL))
(4 rows)

--Testcase 85:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NOT NULL;    -- NullTest
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" IS NOT NULL))
(4 rows)

--Testcase 86:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs(c1), 0) = 1; -- FuncExpr
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((round(abs("C 1"), 0) = 1::numeric))
(4 rows)

--Testcase 87:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = -c1;          -- OpExpr(l)
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = (- "C 1")))
(4 rows)

--Testcase 88:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL); -- DistinctExpr
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((("C 1" IS NOT NULL) IS DISTINCT FROM ("C 1" IS NOT NULL)))
(4 rows)

--Testcase 89:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = ANY(ARRAY[c2, 1, c1 + 0]); -- ScalarArrayOpExpr
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = ANY (ARRAY[c2, 1, ("C 1" + 0)])))
(4 rows)

--Testcase 90:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = (ARRAY[c1,c2,3])[1]; -- SubscriptingRef
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = ((ARRAY["C 1", c2, 3])[1])))
(4 rows)

--Testcase 91:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c6 = E'foo''s\\bar';  -- check special chars
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c6 = E'foo''s\\bar'))
(4 rows)

--Testcase 92:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c8 = 'foo';  -- can't be sent to remote
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = 'foo'::user_enum)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(5 rows)

-- parameterized remote path for foreign table
--Testcase 93:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM "S 1"."T 1" a, ft2 b WHERE a."C 1" = 47 AND b.c1 = a.c2;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.__spd_url
   Hash Cond: (b.c1 = a.c2)
   ->  Foreign Scan on public.ft2 b
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.__spd_url
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
   ->  Hash
         Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8
         ->  Foreign Scan on "S 1"."T 1" a
               Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 47))
(12 rows)

--Testcase 94:
SELECT * FROM ft2 a, ft2 b WHERE a.c1 = 47 AND b.c1 = a.c2;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------+----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 47 |  7 | 00047 | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /postgres_srv/ |  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /postgres_srv/
(1 row)

-- check both safe and unsafe join conditions
--Testcase 95:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft2 a, ft2 b
  WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, a.__spd_url, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.__spd_url
   Hash Cond: ((b.c1 = a.c1) AND ((b.c7)::text = upper((a.c7)::text)))
   ->  Foreign Scan on public.ft2 b
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.__spd_url
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
   ->  Hash
         Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, a.__spd_url
         ->  Foreign Scan on public.ft2 a
               Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, a.__spd_url
               Filter: (a.c8 = 'foo'::user_enum)
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c2 = 6))
(14 rows)

--Testcase 96:
SELECT * FROM ft2 a, ft2 b
WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    | c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------+-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
   6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |   6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 126 |  6 | 00126 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 126 |  6 | 00126 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 136 |  6 | 00136 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 136 |  6 | 00136 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 146 |  6 | 00146 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 146 |  6 | 00146 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 156 |  6 | 00156 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 156 |  6 | 00156 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 166 |  6 | 00166 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 166 |  6 | 00166 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 176 |  6 | 00176 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 176 |  6 | 00176 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 186 |  6 | 00186 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 186 |  6 | 00186 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 196 |  6 | 00196 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 196 |  6 | 00196 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 206 |  6 | 00206 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 206 |  6 | 00206 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 216 |  6 | 00216 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 216 |  6 | 00216 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 226 |  6 | 00226 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 226 |  6 | 00226 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 236 |  6 | 00236 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 236 |  6 | 00236 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 246 |  6 | 00246 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 246 |  6 | 00246 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 256 |  6 | 00256 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 256 |  6 | 00256 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 266 |  6 | 00266 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 266 |  6 | 00266 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 276 |  6 | 00276 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 276 |  6 | 00276 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 286 |  6 | 00286 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 286 |  6 | 00286 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 296 |  6 | 00296 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 296 |  6 | 00296 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 306 |  6 | 00306 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 306 |  6 | 00306 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 316 |  6 | 00316 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 316 |  6 | 00316 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 326 |  6 | 00326 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 326 |  6 | 00326 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 336 |  6 | 00336 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 336 |  6 | 00336 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 346 |  6 | 00346 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 346 |  6 | 00346 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 356 |  6 | 00356 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 356 |  6 | 00356 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 366 |  6 | 00366 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 366 |  6 | 00366 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 376 |  6 | 00376 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 376 |  6 | 00376 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 386 |  6 | 00386 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 386 |  6 | 00386 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 396 |  6 | 00396 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 396 |  6 | 00396 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 406 |  6 | 00406 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 406 |  6 | 00406 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 416 |  6 | 00416 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 416 |  6 | 00416 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 426 |  6 | 00426 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 426 |  6 | 00426 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 436 |  6 | 00436 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 436 |  6 | 00436 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 446 |  6 | 00446 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 446 |  6 | 00446 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 456 |  6 | 00456 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 456 |  6 | 00456 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 466 |  6 | 00466 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 466 |  6 | 00466 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 476 |  6 | 00476 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 476 |  6 | 00476 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 486 |  6 | 00486 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 486 |  6 | 00486 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 496 |  6 | 00496 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 496 |  6 | 00496 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 506 |  6 | 00506 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 506 |  6 | 00506 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 516 |  6 | 00516 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 516 |  6 | 00516 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 526 |  6 | 00526 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 526 |  6 | 00526 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 536 |  6 | 00536 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 536 |  6 | 00536 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 546 |  6 | 00546 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 546 |  6 | 00546 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 556 |  6 | 00556 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 556 |  6 | 00556 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 566 |  6 | 00566 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 566 |  6 | 00566 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 576 |  6 | 00576 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 576 |  6 | 00576 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 586 |  6 | 00586 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 586 |  6 | 00586 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 596 |  6 | 00596 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 596 |  6 | 00596 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 606 |  6 | 00606 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 606 |  6 | 00606 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 616 |  6 | 00616 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 616 |  6 | 00616 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 626 |  6 | 00626 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 626 |  6 | 00626 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 636 |  6 | 00636 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 636 |  6 | 00636 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 646 |  6 | 00646 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 646 |  6 | 00646 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 656 |  6 | 00656 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 656 |  6 | 00656 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 666 |  6 | 00666 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 666 |  6 | 00666 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 676 |  6 | 00676 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 676 |  6 | 00676 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 686 |  6 | 00686 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 686 |  6 | 00686 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 696 |  6 | 00696 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 696 |  6 | 00696 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 706 |  6 | 00706 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 706 |  6 | 00706 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 716 |  6 | 00716 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 716 |  6 | 00716 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 726 |  6 | 00726 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 726 |  6 | 00726 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 736 |  6 | 00736 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 736 |  6 | 00736 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 746 |  6 | 00746 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 746 |  6 | 00746 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 756 |  6 | 00756 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 756 |  6 | 00756 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 766 |  6 | 00766 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 766 |  6 | 00766 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 776 |  6 | 00776 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 776 |  6 | 00776 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 786 |  6 | 00786 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 786 |  6 | 00786 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 796 |  6 | 00796 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 796 |  6 | 00796 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 806 |  6 | 00806 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 806 |  6 | 00806 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 816 |  6 | 00816 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 816 |  6 | 00816 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 826 |  6 | 00826 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 826 |  6 | 00826 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 836 |  6 | 00836 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 836 |  6 | 00836 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 846 |  6 | 00846 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 846 |  6 | 00846 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 856 |  6 | 00856 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 856 |  6 | 00856 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 866 |  6 | 00866 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 866 |  6 | 00866 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 876 |  6 | 00876 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 876 |  6 | 00876 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 886 |  6 | 00886 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 886 |  6 | 00886 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 896 |  6 | 00896 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 896 |  6 | 00896 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 906 |  6 | 00906 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 906 |  6 | 00906 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 916 |  6 | 00916 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 916 |  6 | 00916 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 926 |  6 | 00926 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 926 |  6 | 00926 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 936 |  6 | 00936 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 936 |  6 | 00936 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 946 |  6 | 00946 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 946 |  6 | 00946 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 956 |  6 | 00956 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 956 |  6 | 00956 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 966 |  6 | 00966 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 966 |  6 | 00966 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 976 |  6 | 00976 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 976 |  6 | 00976 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 986 |  6 | 00986 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 986 |  6 | 00986 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 996 |  6 | 00996 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 996 |  6 | 00996 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
(100 rows)

-- bug before 9.3.5 due to sloppy handling of remote-estimate parameters
--Testcase 97:
SELECT * FROM ft1 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft2 WHERE c1 < 5));
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /postgres_srv/
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /postgres_srv/
(4 rows)

--Testcase 98:
SELECT * FROM ft2 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft1 WHERE c1 < 5));
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /postgres_srv/
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /postgres_srv/
(4 rows)

-- we should not push order by clause with volatile expressions or unsafe
-- collations
--Testcase 99:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, random();
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, (random())
   Sort Key: ft2.c1, (random())
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, random()
         Node: postgres_srv / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(8 rows)

--Testcase 100:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, ft2.c3 collate "C";
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, ((c3)::text)
   Sort Key: ft2.c1, ft2.c3 COLLATE "C"
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, c3
         Node: postgres_srv / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(8 rows)

-- user-defined operator/function
--Testcase 101:
CREATE FUNCTION postgres_fdw_abs(int) RETURNS int AS $$
BEGIN
RETURN abs($1);
END
$$ LANGUAGE plpgsql IMMUTABLE;
--Testcase 102:
CREATE OPERATOR === (
    LEFTARG = int,
    RIGHTARG = int,
    PROCEDURE = int4eq,
    COMMUTATOR = ===
);
-- built-in operators and functions can be shipped for remote execution
--Testcase 103:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1 t1)
     Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = abs(c2)))
(6 rows)

--Testcase 104:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
 count 
-------
     9
(1 row)

--Testcase 105:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1 t1)
     Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = c2))
(6 rows)

--Testcase 106:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
 count 
-------
     9
(1 row)

-- by default, user-defined ones cannot
--Testcase 107:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = postgres_fdw_abs(t1.c2))
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(7 rows)

--Testcase 108:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

--Testcase 109:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(7 rows)

--Testcase 110:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- ORDER BY can be shipped, though
--Testcase 111:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
         Filter: (t1.c1 === t1.c2)
         Node: postgres_srv / Status: Alive
           Limit push-down: no
           Sort push-down: yes
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
(9 rows)

--Testcase 112:
SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

-- but let's put them in an extension ...
--Testcase 113:
ALTER EXTENSION pgspider_core_fdw ADD FUNCTION postgres_fdw_abs(int);
--Testcase 114:
ALTER EXTENSION pgspider_core_fdw ADD OPERATOR === (int, int);
--Testcase 115:
ALTER SERVER postgres_srv OPTIONS (ADD extensions 'postgres_fdw');
-- ... now they can be shipped
--Testcase 116:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = postgres_fdw_abs(t1.c2))
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(7 rows)

--Testcase 117:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

--Testcase 118:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(7 rows)

--Testcase 119:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- and both ORDER BY and LIMIT can be shipped
--Testcase 120:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
         Filter: (t1.c1 === t1.c2)
         Node: postgres_srv / Status: Alive
           Limit push-down: no
           Sort push-down: yes
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
(9 rows)

--Testcase 121:
SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

-- Test CASE pushdown
--Testcase 1187:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1,c2,c3 FROM ft2 WHERE CASE WHEN c1 > 990 THEN c1 END < 1000 ORDER BY c1;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft2
   Output: c1, c2, c3
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1" WHERE (((CASE WHEN ("C 1" > 990) THEN "C 1" ELSE NULL::integer END) < 1000)) ORDER BY "C 1" ASC NULLS LAST
(5 rows)

--Testcase 1188:
SELECT c1,c2,c3 FROM ft2 WHERE CASE WHEN c1 > 990 THEN c1 END < 1000 ORDER BY c1;
 c1  | c2 |  c3   
-----+----+-------
 991 |  1 | 00991
 992 |  2 | 00992
 993 |  3 | 00993
 994 |  4 | 00994
 995 |  5 | 00995
 996 |  6 | 00996
 997 |  7 | 00997
 998 |  8 | 00998
 999 |  9 | 00999
(9 rows)

-- Nested CASE
--Testcase 1189:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1,c2,c3 FROM ft2 WHERE CASE CASE WHEN c2 > 0 THEN c2 END WHEN 100 THEN 601 WHEN c2 THEN c2 ELSE 0 END > 600 ORDER BY c1;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft2
   Output: c1, c2, c3
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1" WHERE (((CASE (CASE WHEN (c2 > 0) THEN c2 ELSE NULL::integer END) WHEN 100 THEN 601 WHEN c2 THEN c2 ELSE 0 END) > 600)) ORDER BY "C 1" ASC NULLS LAST
(5 rows)

--Testcase 1190:
SELECT c1,c2,c3 FROM ft2 WHERE CASE CASE WHEN c2 > 0 THEN c2 END WHEN 100 THEN 601 WHEN c2 THEN c2 ELSE 0 END > 600 ORDER BY c1;
 c1 | c2 | c3 
----+----+----
(0 rows)

-- CASE arg WHEN
--Testcase 1191:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE c1 > (CASE mod(c1, 4) WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END);
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" > (CASE mod("C 1", 4) WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END)))
(4 rows)

-- CASE cannot be pushed down because of unshippable arg clause
--Testcase 1192:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE c1 > (CASE random()::integer WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END);
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (ft1.c1 > CASE (random())::integer WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(5 rows)

-- these are shippable
--Testcase 1193:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE CASE c6 WHEN 'foo' THEN true ELSE c3 < 'bar' END;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((CASE c6 WHEN 'foo'::text THEN true ELSE (c3 < 'bar') END))
(4 rows)

--Testcase 1194:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE CASE c3 WHEN c6 THEN true ELSE c3 < 'bar' END;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((CASE c3 WHEN c6 THEN true ELSE (c3 < 'bar') END))
(4 rows)

-- but this is not because of collation
--Testcase 1195:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE CASE c3 COLLATE "C" WHEN c6 THEN true ELSE c3 < 'bar' END;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: CASE (ft1.c3)::text WHEN ft1.c6 THEN true ELSE (ft1.c3 < 'bar'::text) END
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(5 rows)

-- check schema-qualification of regconfig constant
--Testcase 1244:
CREATE TEXT SEARCH CONFIGURATION public.custom_search
  (COPY = pg_catalog.english);
--Testcase 1245:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1, to_tsvector('custom_search'::regconfig, c3) FROM ft1
WHERE c1 = 642 AND length(to_tsvector('custom_search'::regconfig, c3)) > 0;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, to_tsvector('custom_search'::regconfig, c3)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1" WHERE ((length(to_tsvector('public.custom_search'::regconfig, c3)) > 0)) AND (("C 1" = 642))
(4 rows)

--Testcase 1246:
SELECT c1, to_tsvector('custom_search'::regconfig, c3) FROM ft1
WHERE c1 = 642 AND length(to_tsvector('custom_search'::regconfig, c3)) > 0;
 c1  | to_tsvector 
-----+-------------
 642 | '00642':1
(1 row)

-- ===================================================================
-- JOIN queries
-- ===================================================================
-- Analyze ft4 and ft5 so that we have better statistics. These tables do not
-- have use_remote_estimate set.
ANALYZE ft4;
WARNING:  skipping "ft4" --- cannot analyze this foreign table
ANALYZE ft5;
WARNING:  skipping "ft5" --- cannot analyze this foreign table
-- join two tables
--Testcase 122:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
     Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3 FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
(7 rows)

--Testcase 123:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join three tables
--Testcase 124:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                                    QUERY PLAN                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3, t1.c3
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Relations: ((public.ft1 t1) INNER JOIN (public.ft2 t2)) INNER JOIN (public.ft4 t3)
     Remote SQL: SELECT r1."C 1", r2.c2, r4.c3, r1.c3 FROM (("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) INNER JOIN "S 1"."T 3" r4 ON (((r1."C 1" = r4.c1)))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(7 rows)

--Testcase 125:
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- left outer join
--Testcase 126:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Relations: (public.ft4 t1) LEFT JOIN (public.ft5 t2)
     Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r1 LEFT JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(7 rows)

--Testcase 127:
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 22 |   
 24 | 24
 26 |   
 28 |   
 30 | 30
 32 |   
 34 |   
 36 | 36
 38 |   
 40 |   
(10 rows)

-- left outer join three tables
--Testcase 128:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Relations: ((public.ft2 t1) LEFT JOIN (public.ft2 t2)) LEFT JOIN (public.ft4 t3)
     Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 LEFT JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) LEFT JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
(6 rows)

--Testcase 129:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + placement of clauses.
-- clauses within the nullable side are not pulled up, but top level clause on
-- non-nullable side is pushed into non-nullable side
--Testcase 130:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Node: postgres_srv / Status: Alive
     Relations: (public.ft4 t1) LEFT JOIN (public.ft5)
     Remote SQL: SELECT r1.c1, r1.c2, r4.c1, r4.c2 FROM ("S 1"."T 3" r1 LEFT JOIN "S 1"."T 4" r4 ON (((r1.c1 = r4.c1)) AND ((r4.c1 < 10)))) WHERE ((r1.c1 < 10))
(5 rows)

--Testcase 131:
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- clauses within the nullable side are not pulled up, but the top level clause
-- on nullable side is not pushed down into nullable side
--Testcase 132:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Node: postgres_srv / Status: Alive
     Relations: (public.ft4 t1) LEFT JOIN (public.ft5)
     Remote SQL: SELECT r1.c1, r1.c2, r4.c1, r4.c2 FROM ("S 1"."T 3" r1 LEFT JOIN "S 1"."T 4" r4 ON (((r1.c1 = r4.c1)) AND ((r4.c1 < 10)))) WHERE (((r4.c1 < 10) OR (r4.c1 IS NULL))) AND ((r1.c1 < 10))
(5 rows)

--Testcase 133:
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- right outer join
--Testcase 134:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Relations: (public.ft4 t2) LEFT JOIN (public.ft5 t1)
     Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r2 LEFT JOIN "S 1"."T 4" r1 ON (((r1.c1 = r2.c1)))) ORDER BY r2.c1 ASC NULLS LAST, r1.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(7 rows)

--Testcase 135:
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
    | 22
 24 | 24
    | 26
    | 28
 30 | 30
    | 32
    | 34
 36 | 36
    | 38
    | 40
(10 rows)

-- right outer join three tables
--Testcase 136:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Relations: ((public.ft4 t3) LEFT JOIN (public.ft2 t2)) LEFT JOIN (public.ft2 t1)
     Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 3" r4 LEFT JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r4.c1)))) LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) LIMIT 10::bigint OFFSET 10::bigint
(6 rows)

--Testcase 137:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join
--Testcase 138:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Relations: (public.ft4 t1) FULL JOIN (public.ft5 t2)
     Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 45::bigint
(7 rows)

--Testcase 139:
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
 c1  | c1 
-----+----
  92 |   
  94 |   
  96 | 96
  98 |   
 100 |   
     |  3
     |  9
     | 15
     | 21
     | 27
(10 rows)

-- full outer join with restrictions on the joining relations
-- a. the joining relations are both base relations
--Testcase 140:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
                                                                                                                                                   QUERY PLAN                                                                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: ft4.c1, ft5.c1
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Relations: (public.ft4) FULL JOIN (public.ft5)
     Remote SQL: SELECT s4.c1, s5.c1 FROM ((SELECT c1, c1, c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1, c2, c3) FULL JOIN (SELECT c1, c1, c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s5(c1, c2, c3) ON (((s4.c1 = s5.c1)))) ORDER BY s4.c1 ASC NULLS LAST, s5.c1 ASC NULLS LAST
(6 rows)

--Testcase 141:
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
 c1 | c1 
----+----
 50 |   
 52 |   
 54 | 54
 56 |   
 58 |   
 60 | 60
    | 51
    | 57
(8 rows)

--Testcase 142:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: 1
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Relations: (public.ft4) FULL JOIN (public.ft5)
     Remote SQL: SELECT NULL FROM ((SELECT c1, c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1, c2) FULL JOIN (SELECT c1, c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s5(c1, c2) ON (TRUE)) LIMIT 10::bigint OFFSET 10::bigint
(6 rows)

--Testcase 143:
SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
 ?column? 
----------
        1
        1
        1
        1
        1
        1
        1
        1
        1
        1
(10 rows)

-- b. one of the joining relations is a base relation and the other is a join
-- relation
--Testcase 144:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: ft4.c1, t2.c1, t3.c1
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Relations: (public.ft4) FULL JOIN ((public.ft4 t2) LEFT JOIN (public.ft5 t3))
     Remote SQL: SELECT s4.c1, s8.c1, s8.c4 FROM ((SELECT c1, c1, c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1, c2, c3) FULL JOIN (SELECT r5.c1, r5.c1, r5.c1, r6.c1 FROM ("S 1"."T 3" r5 LEFT JOIN "S 1"."T 4" r6 ON (((r5.c1 = r6.c1)))) WHERE ((r5.c1 >= 50)) AND ((r5.c1 <= 60))) s8(c1, c2, c3, c4) ON (((s4.c1 = s8.c1)))) ORDER BY s4.c1 ASC NULLS LAST, s8.c1 ASC NULLS LAST, s8.c4 ASC NULLS LAST
(6 rows)

--Testcase 145:
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
(6 rows)

-- c. test deparsing the remote query as nested subqueries
--Testcase 146:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;


 Foreign Scan
   Output: ft4.c1, ft4_1.c1, ft5.c1
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Relations: (public.ft4) FULL JOIN ((public.ft4 ft4_1) FULL JOIN (public.ft5))
     Remote SQL: SELECT s4.c1, s10.c1, s10.c4 FROM ((SELECT c1, c1, c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1, c2, c3) FULL JOIN (SELECT s8.c1, s8.c1, s8.c1, s9.c1, s9.c1, s9.c1 FROM ((SELECT c1, c1, c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s8(c1, c2, c3) FULL JOIN (SELECT c1, c1, c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s9(c1, c2, c3) ON (((s8.c1 = s9.c1)))) WHERE (((s8.c1 IS NULL) OR (s8.c1 IS NOT NULL)))) s10(c1, c2, c3, c4, c5, c6) ON (((s4.c1 = s10.c1)))) ORDER BY s4.c1 ASC NULLS LAST, s10.c1 ASC NULLS LAST, s10.c4 ASC NULLS LAST
(6 rows)

--Testcase 147:
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
    |    | 51
    |    | 57
(8 rows)

-- d. test deparsing rowmarked relations as subqueries
--Testcase 148:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T 3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".*, ft4.*, ft5.*
   ->  Sort
         Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".*, ft4.*, ft5.*
         Sort Key: ft4.c1, ft5.c1
         ->  Nested Loop
               Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".*, ft4.*, ft5.*
               ->  Foreign Scan on "S 1"."T 3"
                     Output: "T 3".c1, "T 3".*
                     Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3" WHERE ((c1 = 50)) FOR UPDATE
               ->  Hash Full Join
                     Output: ft4.c1, ft4.*, ft5.c1, ft5.*
                     Hash Cond: (ft4.c1 = ft5.c1)
                     Filter: ((ft4.c1 IS NULL) OR (ft4.c1 IS NOT NULL))
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1, ft4.*
                           Node: postgres_srv / Status: Alive
                             Sort push-down: no
                             Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
                     ->  Hash
                           Output: ft5.c1, ft5.*
                           ->  Foreign Scan on public.ft5
                                 Output: ft5.c1, ft5.*
                                 Node: postgres_srv / Status: Alive
                                   Sort push-down: no
                                   Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(26 rows)

--Testcase 149:
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T 3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 50 | 52 |   
 50 | 54 | 54
 50 | 56 |   
 50 | 58 |   
 50 | 60 | 60
 50 |    | 51
 50 |    | 57
(8 rows)

-- full outer join + inner join
--Testcase 150:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
                                                                                                                                                  QUERY PLAN                                                                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t3.c1
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Relations: ((public.ft4 t1) INNER JOIN (public.ft5 t2)) FULL JOIN (public.ft4 t3)
     Remote SQL: SELECT r1.c1, r2.c1, r4.c1 FROM (("S 1"."T 3" r1 INNER JOIN "S 1"."T 4" r2 ON (((r1.c1 = (r2.c1 + 1))) AND ((r1.c1 >= 50)) AND ((r1.c1 <= 60)))) FULL JOIN "S 1"."T 3" r4 ON (((r2.c1 = r4.c1)))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST, r4.c1 ASC NULLS LAST LIMIT 10::bigint
(7 rows)

--Testcase 151:
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
 c1 | c1 | c1 
----+----+----
 52 | 51 |   
 58 | 57 |   
    |    |  2
    |    |  4
    |    |  6
    |    |  8
    |    | 10
    |    | 12
    |    | 14
    |    | 16
(10 rows)

-- full outer join three tables
--Testcase 152:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                     QUERY PLAN                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Relations: ((public.ft2 t1) FULL JOIN (public.ft2 t2)) FULL JOIN (public.ft4 t3)
     Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) FULL JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(7 rows)

--Testcase 153:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + right outer join
--Testcase 154:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Relations: ((public.ft4 t3) LEFT JOIN (public.ft2 t2)) LEFT JOIN (public.ft2 t1)
     Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 3" r4 LEFT JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r4.c1)))) LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) LIMIT 10::bigint OFFSET 10::bigint
(6 rows)

--Testcase 155:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- right outer join + full outer join
--Testcase 156:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Relations: ((public.ft2 t2) LEFT JOIN (public.ft2 t1)) FULL JOIN (public.ft4 t3)
     Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r2 LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) FULL JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
(6 rows)

--Testcase 157:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + left outer join
--Testcase 158:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Relations: ((public.ft2 t1) FULL JOIN (public.ft2 t2)) LEFT JOIN (public.ft4 t3)
     Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) LEFT JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
(6 rows)

--Testcase 159:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + full outer join
--Testcase 160:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                     QUERY PLAN                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Relations: ((public.ft2 t1) LEFT JOIN (public.ft2 t2)) FULL JOIN (public.ft4 t3)
     Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 LEFT JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) FULL JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(7 rows)

--Testcase 161:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

--Testcase 162:
SET enable_memoize TO off;
-- right outer join + left outer join
--Testcase 163:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Relations: ((public.ft2 t2) LEFT JOIN (public.ft2 t1)) LEFT JOIN (public.ft4 t3)
     Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r2 LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) LEFT JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
(6 rows)

--Testcase 164:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

--Testcase 165:
RESET enable_memoize;
-- left outer join + right outer join
--Testcase 166:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                                                                                     QUERY PLAN                                                                                                     
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Relations: (public.ft4 t3) LEFT JOIN ((public.ft2 t1) INNER JOIN (public.ft2 t2))
     Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM ("S 1"."T 3" r4 LEFT JOIN ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
(6 rows)

--Testcase 167:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join + WHERE clause, only matched rows
--Testcase 168:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                                                                                                  QUERY PLAN                                                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Relations: (public.ft4 t1) FULL JOIN (public.ft5 t2)
     Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 = r2.c1) OR (r1.c1 IS NULL))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(7 rows)

--Testcase 169:
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 66 | 66
 72 | 72
 78 | 78
 84 | 84
 90 | 90
 96 | 96
    |  3
    |  9
    | 15
    | 21
(10 rows)

-- full outer join + WHERE clause with shippable extensions set
--Testcase 170:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Foreign Scan
         Output: t1.c1, t2.c2, t1.c3
         Filter: (postgres_fdw_abs(t1.c1) > 0)
         Node: postgres_srv / Status: Alive
           Limit push-down: no
           Relations: (public.ft1 t1) FULL JOIN (public.ft2 t2)
           Remote SQL: SELECT r1."C 1", r2.c2, r1.c3 FROM ("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
(9 rows)

--Testcase 171:
ALTER SERVER postgres_srv OPTIONS (DROP extensions);
-- full outer join + WHERE clause with shippable extensions not set
--Testcase 172:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Foreign Scan
         Output: t1.c1, t2.c2, t1.c3
         Filter: (postgres_fdw_abs(t1.c1) > 0)
         Node: postgres_srv / Status: Alive
           Limit push-down: no
           Relations: (public.ft1 t1) FULL JOIN (public.ft2 t2)
           Remote SQL: SELECT r1."C 1", r2.c2, r1.c3 FROM ("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
(9 rows)

--Testcase 173:
ALTER SERVER postgres_srv OPTIONS (ADD extensions 'postgres_fdw');
-- join two tables with FOR UPDATE clause
-- tests whole-row reference for row marks
--Testcase 174:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Nested Loop
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3, t1.*
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Sort push-down: yes
                       Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c3 ASC NULLS LAST, "C 1" ASC NULLS LAST
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1, t2.*
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Sort push-down: no
                       Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(19 rows)

--Testcase 175:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

--Testcase 176:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Nested Loop
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3, t1.*
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Sort push-down: yes
                       Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c3 ASC NULLS LAST, "C 1" ASC NULLS LAST
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1, t2.*
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Sort push-down: no
                       Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(19 rows)

--Testcase 177:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join two tables with FOR SHARE clause
--Testcase 178:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Nested Loop
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3, t1.*
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Sort push-down: yes
                       Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c3 ASC NULLS LAST, "C 1" ASC NULLS LAST
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1, t2.*
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Sort push-down: no
                       Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(19 rows)

--Testcase 179:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

--Testcase 180:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Nested Loop
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3, t1.*
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Sort push-down: yes
                       Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c3 ASC NULLS LAST, "C 1" ASC NULLS LAST
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1, t2.*
                     Node: postgres_srv / Status: Alive
                       Limit push-down: no
                       Sort push-down: no
                       Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(19 rows)

--Testcase 181:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join in CTE
--Testcase 182:
EXPLAIN (VERBOSE, COSTS OFF)
WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t.c1_1, t.c2_1, t.c1_3
   CTE t
     ->  Foreign Scan
           Output: t1.c1, t1.c3, t2.c1
           Node: postgres_srv / Status: Alive
             Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
             Remote SQL: SELECT r1."C 1", r1.c3, r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
   ->  Sort
         Output: t.c1_1, t.c2_1, t.c1_3
         Sort Key: t.c1_3, t.c1_1
         ->  CTE Scan on t
               Output: t.c1_1, t.c2_1, t.c1_3
(13 rows)

--Testcase 183:
WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
 c1_1 | c2_1 
------+------
  101 |  101
  102 |  102
  103 |  103
  104 |  104
  105 |  105
  106 |  106
  107 |  107
  108 |  108
  109 |  109
  110 |  110
(10 rows)

-- ctid with whole-row reference
--Testcase 184:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.ctid, t1, t2, t1.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
   ->  Nested Loop
         Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.ctid, t1.*, t1.c1, t1.c3
               Node: postgres_srv / Status: Alive
                 Limit push-down: no
                 Sort push-down: yes
                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" ORDER BY c3 ASC NULLS LAST, "C 1" ASC NULLS LAST
         ->  Foreign Scan on public.ft2 t2
               Output: t2.*, t2.c1
               Node: postgres_srv / Status: Alive
                 Limit push-down: no
                 Sort push-down: no
                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(17 rows)

-- SEMI JOIN, not pushed down
--Testcase 185:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Nested Loop Semi Join
         Output: t1.c1
         Join Filter: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1
               Node: postgres_srv / Status: Alive
                 Limit push-down: no
                 Sort push-down: yes
                 Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
         ->  Foreign Scan on public.ft2 t2
               Output: t2.c1
               Node: postgres_srv / Status: Alive
                 Limit push-down: no
                 Sort push-down: yes
                 Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
(17 rows)

--Testcase 186:
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- ANTI JOIN, not pushed down
--Testcase 187:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Nested Loop Anti Join
         Output: t1.c1
         Join Filter: (t1.c1 = t2.c2)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1
               Node: postgres_srv / Status: Alive
                 Limit push-down: no
                 Sort push-down: yes
                 Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
         ->  Foreign Scan on public.ft2 t2
               Output: t2.c2
               Node: postgres_srv / Status: Alive
                 Limit push-down: no
                 Sort push-down: no
                 Remote SQL: SELECT c2 FROM "S 1"."T 1"
(17 rows)

--Testcase 188:
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 110
 111
 112
 113
 114
 115
 116
 117
 118
 119
(10 rows)

-- CROSS JOIN can be pushed down
--Testcase 189:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
     Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (TRUE)) ORDER BY r1."C 1" ASC NULLS LAST, r2."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
(7 rows)

--Testcase 190:
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- different server, not pushed down. No result expected.
--Testcase 191:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Nested Loop
         Output: t1.c1, t2.c1
         Join Filter: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.ft5 t1
               Output: t1.c1
               Node: postgres_srv / Status: Alive
                 Limit push-down: no
                 Sort push-down: yes
                 Remote SQL: SELECT c1 FROM "S 1"."T 4" ORDER BY c1 ASC NULLS LAST
         ->  Foreign Scan on public.ft6 t2
               Output: t2.c1
               Node: postgres_srv2 / Status: Alive
                 Limit push-down: no
                 Sort push-down: yes
                 Remote SQL: SELECT c1 FROM "S 1"."T 4" ORDER BY c1 ASC NULLS LAST
(17 rows)

--Testcase 192:
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1 
----+----
(0 rows)

-- unsafe join conditions (c8 has a UDT), not pushed down. Practically a CROSS
-- JOIN since c8 in both tables has same value.
--Testcase 193:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c8 = t2.c8)
               ->  Sort
                     Output: t1.c1, t1.c8
                     Sort Key: t1.c8
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c8
                           Node: postgres_srv / Status: Alive
                             Limit push-down: no
                             Sort push-down: no
                             Remote SQL: SELECT "C 1", c8 FROM "S 1"."T 1"
               ->  Sort
                     Output: t2.c1, t2.c8
                     Sort Key: t2.c8
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.c8
                           Node: postgres_srv / Status: Alive
                             Limit push-down: no
                             Sort push-down: no
                             Remote SQL: SELECT "C 1", c8 FROM "S 1"."T 1"
(26 rows)

--Testcase 194:
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- unsafe conditions on one side (c8 has a UDT), not pushed down.
--Testcase 195:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c1, t1.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c3
               Filter: (t1.c8 = 'foo'::user_enum)
               Node: postgres_srv / Status: Alive
                 Limit push-down: no
                 Sort push-down: yes
                 Remote SQL: SELECT "C 1", c3, c8 FROM "S 1"."T 1" ORDER BY c3 ASC NULLS LAST, "C 1" ASC NULLS LAST
         ->  Foreign Scan on public.ft2 t2
               Output: t2.c1
               Node: postgres_srv / Status: Alive
                 Limit push-down: no
                 Sort push-down: no
                 Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(18 rows)

--Testcase 196:
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join where unsafe to pushdown condition in WHERE clause has a column not
-- in the SELECT clause. In this test unsafe clause needs to have column
-- references from both joining sides so that the clause is not pushed down
-- into one of the joining sides.
--Testcase 197:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Foreign Scan
         Output: t1.c1, t2.c1, t1.c3
         Filter: (t1.c8 = t2.c8)
         Node: postgres_srv / Status: Alive
           Limit push-down: no
           Sort push-down: yes
           Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
           Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, r1.c8, r2.c8 FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST
(10 rows)

--Testcase 198:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- Aggregate after UNION, for testing setrefs
--Testcase 199:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, (avg((t1.c1 + t2.c1)))
   ->  GroupAggregate
         Output: t1.c1, avg((t1.c1 + t2.c1))
         Group Key: t1.c1
         ->  Unique
               Output: t1.c1, t2.c1
               ->  Sort
                     Output: t1.c1, t2.c1
                     Sort Key: t1.c1, t2.c1
                     ->  Append
                           ->  Foreign Scan
                                 Output: t1.c1, t2.c1
                                 Node: postgres_srv / Status: Alive
                                   Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
                                   Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
                           ->  Foreign Scan
                                 Output: t1_1.c1, t2_1.c1
                                 Node: postgres_srv / Status: Alive
                                   Relations: (public.ft1 t1_1) INNER JOIN (public.ft2 t2_1)
                                   Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
(21 rows)

--Testcase 200:
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
 t1c1 |         avg          
------+----------------------
  101 | 202.0000000000000000
  102 | 204.0000000000000000
  103 | 206.0000000000000000
  104 | 208.0000000000000000
  105 | 210.0000000000000000
  106 | 212.0000000000000000
  107 | 214.0000000000000000
  108 | 216.0000000000000000
  109 | 218.0000000000000000
  110 | 220.0000000000000000
(10 rows)

-- join with lateral reference
--Testcase 201:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1."C 1" FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C 1" OFFSET 10 LIMIT 10;
                                                                                              QUERY PLAN                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1"
   ->  Nested Loop
         Output: t1."C 1"
         ->  Foreign Scan on "S 1"."T 1" t1
               Output: t1."C 1", t1.c2
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
         ->  Unique
               Output: t2.c1, t3.c1
               ->  Foreign Scan
                     Output: t2.c1, t3.c1
                     Node: postgres_srv / Status: Alive
                       Relations: (public.ft1 t2) INNER JOIN (public.ft2 t3)
                       Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")) AND ((r1.c2 = $1::integer)))) ORDER BY r1."C 1" ASC NULLS LAST
(14 rows)

--Testcase 202:
SELECT t1."C 1" FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C 1" OFFSET 10 LIMIT 10;
 C 1 
-----
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
(10 rows)

-- non-Var items in targetlist of the nullable rel of a join preventing
-- push-down in some cases
-- unable to push {ft1, ft2}
--Testcase 203:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: (13), ft2.c1
   Join Filter: (13 = ft2.c1)
   ->  Foreign Scan on public.ft2
         Output: ft2.c1
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1" FROM "S 1"."T 1" WHERE (("C 1" >= 10)) AND (("C 1" <= 15))
   ->  Materialize
         Output: (13)
         ->  Foreign Scan on public.ft1
               Output: 13
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1" FROM "S 1"."T 1" WHERE (("C 1" = 13))
(13 rows)

--Testcase 204:
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
 a  | c1 
----+----
    | 10
    | 11
    | 12
 13 | 13
    | 14
    | 15
(6 rows)

-- ok to push {ft1, ft2} but not {ft1, ft2, ft4}
--Testcase 205:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Hash Left Join
   Output: ft4.c1, (13), ft1.c1, ft2.c1
   Hash Cond: (ft4.c1 = ft1.c1)
   ->  Foreign Scan on public.ft4
         Output: ft4.c1
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 10)) AND ((c1 <= 15))
   ->  Hash
         Output: ft1.c1, ft2.c1, (13)
         ->  Foreign Scan
               Output: ft1.c1, ft2.c1, 13
               Node: postgres_srv / Status: Alive
                 Relations: (public.ft1) INNER JOIN (public.ft2)
                 Remote SQL: SELECT r4."C 1", r5."C 1" FROM ("S 1"."T 1" r4 INNER JOIN "S 1"."T 1" r5 ON (((r5."C 1" = 12)) AND ((r4."C 1" = 12))))
(14 rows)

--Testcase 206:
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
 c1 | a  | b  | c  
----+----+----+----
 10 |    |    |   
 12 | 13 | 12 | 12
 14 |    |    |   
(3 rows)

-- join with nullable side with some columns with null values
--Testcase 207:
UPDATE ft5__postgres_srv__0 SET c3 = null where c1 % 9 = 0;
--Testcase 208:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
   Join Filter: (ft5.c1 = ft4.c1)
   ->  Foreign Scan on public.ft5
         Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
         Node: postgres_srv / Status: Alive
           Sort push-down: yes
           Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4" ORDER BY c1 ASC NULLS LAST
   ->  Foreign Scan on public.ft4
         Output: ft4.c1, ft4.c2
         Node: postgres_srv / Status: Alive
           Sort push-down: yes
           Remote SQL: SELECT c1, c2 FROM "S 1"."T 3" WHERE ((c1 >= 10)) AND ((c1 <= 30)) ORDER BY c1 ASC NULLS LAST
(13 rows)

--Testcase 209:
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
              ft5              | c1 | c2 |   c3   | c1 | c2 
-------------------------------+----+----+--------+----+----
 (12,13,AAA012,/postgres_srv/) | 12 | 13 | AAA012 | 12 | 13
 (18,19,,/postgres_srv/)       | 18 | 19 |        | 18 | 19
 (24,25,AAA024,/postgres_srv/) | 24 | 25 | AAA024 | 24 | 25
 (30,31,AAA030,/postgres_srv/) | 30 | 31 | AAA030 | 30 | 31
(4 rows)

-- multi-way join involving multiple merge joins
-- (this case used to have EPQ-related planning problems)
--Testcase 210:
CREATE TABLE local_tbl (c1 int NOT NULL, c2 int NOT NULL, c3 text, CONSTRAINT local_tbl_pkey PRIMARY KEY (c1));
--Testcase 211:
INSERT INTO local_tbl SELECT id, id % 10, to_char(id, 'FM0000') FROM generate_series(1, 1000) id;
ANALYZE local_tbl;
--Testcase 212:
SET enable_nestloop TO false;
--Testcase 213:
SET enable_hashjoin TO false;
--Testcase 214:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
                                                                                                                                                                    QUERY PLAN                                                                                                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url, local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.*, ft2.*, ft4.*, ft5.*, local_tbl.ctid
   ->  Merge Join
         Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url, local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.*, ft2.*, ft4.*, ft5.*, local_tbl.ctid
         Merge Cond: (ft1.c2 = ft4.c1)
         ->  Sort
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft2.*
               Sort Key: ft1.c2
               ->  Merge Join
                     Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft2.*
                     Merge Cond: (ft1.c1 = ft2.c1)
                     ->  Sort
                           Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*
                           Sort Key: ft1.c1
                           ->  Foreign Scan on public.ft1
                                 Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" < 100))
                     ->  Sort
                           Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft2.*
                           Sort Key: ft2.c1
                           ->  Foreign Scan on public.ft2
                                 Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft2.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" < 100))
         ->  Materialize
               Output: ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft4.*, ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url, ft5.*, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
               ->  Merge Join
                     Output: ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft4.*, ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url, ft5.*, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
                     Merge Cond: (ft4.c1 = ft5.c1)
                     ->  Merge Join
                           Output: ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft4.*, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
                           Merge Cond: (local_tbl.c1 = ft4.c1)
                           ->  Index Scan using local_tbl_pkey on public.local_tbl
                                 Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
                           ->  Sort
                                 Output: ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft4.*
                                 Sort Key: ft4.c1
                                 ->  Foreign Scan on public.ft4
                                       Output: ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft4.*
                                       Node: postgres_srv / Status: Alive
                                         Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3"
                     ->  Sort
                           Output: ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url, ft5.*
                           Sort Key: ft5.c1
                           ->  Foreign Scan on public.ft5
                                 Output: ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url, ft5.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
(49 rows)

--Testcase 215:
SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    | c1 | c2 |   c3   |   __spd_url    | c1 | c2 |   c3   |   __spd_url    | c1 | c2 |  c3  
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------+----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------+----+----+--------+----------------+----+----+--------+----------------+----+----+------
 96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006
 46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006
 26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006
 56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006
 66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006
 76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006
 86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006
 36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006
(10 rows)

--Testcase 216:
RESET enable_nestloop;
--Testcase 217:
RESET enable_hashjoin;
-- test that add_paths_with_pathkeys_for_rel() arranges for the epq_path to
-- return columns needed by the parent ForeignScan node
--Testcase 1247:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM local_tbl LEFT JOIN (SELECT ft1.*, COALESCE(ft1.c3 || ft2.c3, 'foobar') FROM ft1 INNER JOIN ft2 ON (ft1.c1 = ft2.c1 AND ft1.c1 < 100)) ss ON (local_tbl.c1 = ss.c1) ORDER BY local_tbl.c1 FOR UPDATE OF local_tbl;
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, (COALESCE((ft1.c3 || ft2.c3), 'foobar'::text)), local_tbl.ctid, ft1.*, ft2.*
   ->  Merge Left Join
         Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, (COALESCE((ft1.c3 || ft2.c3), 'foobar'::text)), local_tbl.ctid, ft1.*, ft2.*
         Merge Cond: (local_tbl.c1 = ft1.c1)
         ->  Index Scan using local_tbl_pkey on public.local_tbl
               Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
         ->  Materialize
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*, ft2.*, (COALESCE((ft1.c3 || ft2.c3), 'foobar'::text))
               ->  Merge Join
                     Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*, ft2.*, COALESCE((ft1.c3 || ft2.c3), 'foobar'::text)
                     Merge Cond: (ft1.c1 = ft2.c1)
                     ->  Sort
                           Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*
                           Sort Key: ft1.c1
                           ->  Foreign Scan on public.ft1
                                 Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*
                                 Node: postgres_srv / Status: Alive
                                   Sort push-down: no
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" < 100))
                     ->  Sort
                           Output: ft2.*, ft2.c1, ft2.c3
                           Sort Key: ft2.c1
                           ->  Foreign Scan on public.ft2
                                 Output: ft2.*, ft2.c1, ft2.c3
                                 Node: postgres_srv / Status: Alive
                                   Sort push-down: no
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(28 rows)

--Testcase 1248:
ALTER SERVER postgres_srv OPTIONS (DROP extensions);
--Testcase 1249:
ALTER SERVER postgres_srv OPTIONS (ADD fdw_startup_cost '10000.0');
--Testcase 1250:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM local_tbl LEFT JOIN (SELECT ft1.* FROM ft1 INNER JOIN ft2 ON (ft1.c1 = ft2.c1 AND ft1.c1 < 100 AND ft1.c1 = postgres_fdw_abs(ft2.c2))) ss ON (local_tbl.c3 = ss.c3) ORDER BY local_tbl.c1 FOR UPDATE OF local_tbl;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, local_tbl.ctid, ft1.*, ft2.*
   ->  Sort
         Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, local_tbl.ctid, ft1.*, ft2.*
         Sort Key: local_tbl.c1
         ->  Hash Right Join
               Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, local_tbl.ctid, ft1.*, ft2.*
               Hash Cond: (ft1.c3 = local_tbl.c3)
               ->  Merge Join
                     Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*, ft2.*
                     Merge Cond: ((ft1.c1 = (postgres_fdw_abs(ft2.c2))) AND (ft1.c1 = ft2.c1))
                     ->  Sort
                           Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*
                           Sort Key: ft1.c1
                           ->  Foreign Scan on public.ft1
                                 Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*
                                 Node: postgres_srv / Status: Alive
                                   Sort push-down: no
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" < 100))
                     ->  Sort
                           Output: ft2.*, ft2.c1, ft2.c2, (postgres_fdw_abs(ft2.c2))
                           Sort Key: (postgres_fdw_abs(ft2.c2)), ft2.c1
                           ->  Foreign Scan on public.ft2
                                 Output: ft2.*, ft2.c1, ft2.c2, postgres_fdw_abs(ft2.c2)
                                 Node: postgres_srv / Status: Alive
                                   Sort push-down: no
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
               ->  Hash
                     Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
                     ->  Seq Scan on public.local_tbl
                           Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
(31 rows)

--Testcase 1251:
ALTER SERVER postgres_srv OPTIONS (DROP fdw_startup_cost);
--Testcase 1252:
ALTER SERVER postgres_srv OPTIONS (ADD extensions 'postgres_fdw');
--Testcase 218:
DROP TABLE local_tbl;
-- check join pushdown in situations where multiple userids are involved
--Testcase 219:
CREATE ROLE regress_view_owner SUPERUSER;
--Testcase 220:
CREATE USER MAPPING FOR regress_view_owner SERVER postgres_srv;
GRANT SELECT ON ft4 TO regress_view_owner;
GRANT SELECT ON ft5 TO regress_view_owner;
--Testcase 221:
CREATE VIEW v4 AS SELECT * FROM ft4;
--Testcase 222:
CREATE VIEW v5 AS SELECT * FROM ft5;
--Testcase 223:
ALTER VIEW v5 OWNER TO regress_view_owner;
--Testcase 224:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, different view owners
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Incremental Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         Presorted Key: ft4.c1
         ->  Merge Left Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Merge Cond: (ft4.c1 = ft5.c1)
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           Node: postgres_srv / Status: Alive
                             Limit push-down: no
                             Sort push-down: no
                             Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Sort
                     Output: ft5.c2, ft5.c1
                     Sort Key: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c2, ft5.c1
                           Node: postgres_srv / Status: Alive
                             Limit push-down: no
                             Sort push-down: no
                             Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(27 rows)

--Testcase 225:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 226:
ALTER VIEW v4 OWNER TO regress_view_owner;
--Testcase 227:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: ft4.c1, ft5.c2, ft5.c1
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Relations: (public.ft4) LEFT JOIN (public.ft5)
     Remote SQL: SELECT r6.c1, r9.c2, r9.c1 FROM ("S 1"."T 3" r6 LEFT JOIN "S 1"."T 4" r9 ON (((r6.c1 = r9.c1)))) ORDER BY r6.c1 ASC NULLS LAST, r9.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(7 rows)

--Testcase 228:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 229:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, view owner not current user
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Incremental Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         Presorted Key: ft4.c1
         ->  Merge Left Join
               Output: ft4.c1, t2.c2, t2.c1
               Merge Cond: (ft4.c1 = t2.c1)
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           Node: postgres_srv / Status: Alive
                             Limit push-down: no
                             Sort push-down: no
                             Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Sort
                     Output: t2.c2, t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c2, t2.c1
                           Node: postgres_srv / Status: Alive
                             Limit push-down: no
                             Sort push-down: no
                             Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(27 rows)

--Testcase 230:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 231:
ALTER VIEW v4 OWNER TO CURRENT_USER;
--Testcase 232:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: ft4.c1, t2.c2, t2.c1
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Relations: (public.ft4) LEFT JOIN (public.ft5 t2)
     Remote SQL: SELECT r6.c1, r2.c2, r2.c1 FROM ("S 1"."T 3" r6 LEFT JOIN "S 1"."T 4" r2 ON (((r6.c1 = r2.c1)))) ORDER BY r6.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(7 rows)

--Testcase 233:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 234:
ALTER VIEW v4 OWNER TO regress_view_owner;
-- cleanup
--Testcase 235:
DROP OWNED BY regress_view_owner;
--Testcase 236:
DROP ROLE regress_view_owner;
-- ===================================================================
-- Aggregate and grouping queries
-- ===================================================================
-- Simple aggregates
--Testcase 237:
explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * ((random() <= '1'::double precision))::integer), c2
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Agg push-down: yes
     Relations: Aggregate on (public.ft1)
     Remote SQL: SELECT count(c6), sum("C 1"), avg("C 1"), min(c2), max("C 1"), stddev(c2), c2 FROM "S 1"."T 1" WHERE ((c2 < 5)) GROUP BY 7 ORDER BY count(c6) ASC NULLS LAST, sum("C 1") ASC NULLS LAST
(7 rows)

--Testcase 238:
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
 count |  sum  |         avg          | min | max  | stddev | sum2  
-------+-------+----------------------+-----+------+--------+-------
   100 | 49600 | 496.0000000000000000 |   1 |  991 |      0 | 49600
   100 | 49700 | 497.0000000000000000 |   2 |  992 |      0 | 49700
   100 | 49800 | 498.0000000000000000 |   3 |  993 |      0 | 49800
   100 | 49900 | 499.0000000000000000 |   4 |  994 |      0 | 49900
   100 | 50500 | 505.0000000000000000 |   0 | 1000 |      0 | 50500
(5 rows)

--Testcase 239:
explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * ((random() <= '1'::double precision))::integer), c2
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Agg push-down: yes
     Relations: Aggregate on (public.ft1)
     Remote SQL: SELECT count(c6), sum("C 1"), avg("C 1"), min(c2), max("C 1"), stddev(c2), c2 FROM "S 1"."T 1" WHERE ((c2 < 5)) GROUP BY 7 ORDER BY count(c6) ASC NULLS LAST, sum("C 1") ASC NULLS LAST LIMIT 1::bigint
(8 rows)

--Testcase 240:
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
 count |  sum  |         avg          | min | max | stddev | sum2  
-------+-------+----------------------+-----+-----+--------+-------
   100 | 49600 | 496.0000000000000000 |   1 | 991 |      0 | 49600
(1 row)

-- Aggregate is not pushed down as aggregation contains random()
--Testcase 241:
explain (verbose, costs off)
select sum(c1 * (random() <= 1)::int) as sum, avg(c1) from ft1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Aggregate
   Output: sum((c1 * ((random() <= '1'::double precision))::integer)), avg(c1)
   ->  Foreign Scan on public.ft1
         Output: c1
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(6 rows)

-- Aggregate over join query
--Testcase 242:
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (count(*)), (sum(t1.c1)), (avg(t2.c1))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on ((public.ft1 t1) INNER JOIN (public.ft1 t2))
     Remote SQL: SELECT count(*), sum(r1."C 1"), avg(r2."C 1") FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r2.c2 = 6)) AND ((r1.c2 = 6))))
(6 rows)

--Testcase 243:
select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
 count |   sum   |         avg          
-------+---------+----------------------
 10000 | 5010000 | 501.0000000000000000
(1 row)

-- Not pushed down due to local conditions present in underneath input rel
--Testcase 244:
explain (verbose, costs off)
select sum(t1.c1), count(t2.c1) from ft1 t1 inner join ft2 t2 on (t1.c1 = t2.c1) where ((t1.c1 * t2.c1)/(t1.c1 * t2.c1)) * random() <= 1;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(t1.c1), count(t2.c1)
   ->  Foreign Scan
         Output: t1.c1, t2.c1
         Filter: (((((t1.c1 * t2.c1) / (t1.c1 * t2.c1)))::double precision * random()) <= '1'::double precision)
         Node: postgres_srv / Status: Alive
           Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
           Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
(8 rows)

-- GROUP BY clause having expressions
--Testcase 245:
explain (verbose, costs off)
select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: ((c2 / 2)), ((sum(c2) * (c2 / 2)))
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Agg push-down: yes
     Relations: Aggregate on (public.ft1)
     Remote SQL: SELECT (c2 / 2), (sum(c2) * (c2 / 2)) FROM "S 1"."T 1" GROUP BY 1 ORDER BY (c2 / 2) ASC NULLS LAST
(7 rows)

--Testcase 246:
select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
 ?column? | ?column? 
----------+----------
        0 |        0
        1 |      500
        2 |     1800
        3 |     3900
        4 |     6800
(5 rows)

-- Aggregates in subquery are pushed down.
--Testcase 247:
explain (verbose, costs off)
select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(ft1.c2), sum(ft1.c2)
   ->  Foreign Scan
         Output: ft1.c2, (sum(ft1.c1)), (sqrt((ft1.c1)::double precision))
         Node: postgres_srv / Status: Alive
           Sort push-down: yes
           Agg push-down: yes
           Relations: Aggregate on (public.ft1)
           Remote SQL: SELECT c2, sum("C 1"), sqrt("C 1") FROM "S 1"."T 1" GROUP BY 1, 3 ORDER BY c2 ASC NULLS LAST, sum("C 1") ASC NULLS LAST
(9 rows)

--Testcase 248:
select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
 count | sum  
-------+------
  1000 | 4500
(1 row)

-- Aggregate is still pushed down by taking unshippable expression out
--Testcase 249:
explain (verbose, costs off)
select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Output: ((c2 * ((random() <= '1'::double precision))::integer)), ((sum(c1) * c2)), c2
   Sort Key: ((ft1.c2 * ((random() <= '1'::double precision))::integer)), ((sum(ft1.c1) * ft1.c2))
   ->  Foreign Scan
         Output: (c2 * ((random() <= '1'::double precision))::integer), ((sum(c1) * c2)), c2
         Node: postgres_srv / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.ft1)
           Remote SQL: SELECT (sum("C 1") * c2), c2 FROM "S 1"."T 1" GROUP BY 2
(10 rows)

--Testcase 250:
select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
 sum1 |  sum2  
------+--------
    0 |      0
    1 |  49600
    2 |  99400
    3 | 149400
    4 | 199600
    5 | 250000
    6 | 300600
    7 | 351400
    8 | 402400
    9 | 453600
(10 rows)

-- Aggregate with unshippable GROUP BY clause are not pushed
--Testcase 251:
explain (verbose, costs off)
select c2 * (random() <= 1)::int as c2 from ft2 group by c2 * (random() <= 1)::int order by 1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: ((c2 * ((random() <= '1'::double precision))::integer))
   Sort Key: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
   ->  HashAggregate
         Output: ((c2 * ((random() <= '1'::double precision))::integer))
         Group Key: (ft2.c2 * ((random() <= '1'::double precision))::integer)
         ->  Foreign Scan on public.ft2
               Output: (c2 * ((random() <= '1'::double precision))::integer)
               Node: postgres_srv / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c2 FROM "S 1"."T 1"
(11 rows)

-- GROUP BY clause in various forms, cardinal, alias and constant expression
--Testcase 252:
explain (verbose, costs off)
select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c2)), c2, 5, 7.0, 9
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Agg push-down: yes
     Relations: Aggregate on (public.ft1)
     Remote SQL: SELECT count(c2), c2, 5, 7.0, 9 FROM "S 1"."T 1" GROUP BY 2, 3, 5 ORDER BY c2 ASC NULLS LAST
(7 rows)

--Testcase 253:
select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
  w  | x | y |  z  
-----+---+---+-----
 100 | 0 | 5 | 7.0
 100 | 1 | 5 | 7.0
 100 | 2 | 5 | 7.0
 100 | 3 | 5 | 7.0
 100 | 4 | 5 | 7.0
 100 | 5 | 5 | 7.0
 100 | 6 | 5 | 7.0
 100 | 7 | 5 | 7.0
 100 | 8 | 5 | 7.0
 100 | 9 | 5 | 7.0
(10 rows)

-- GROUP BY clause referring to same column multiple times
-- Also, ORDER BY contains an aggregate function
--Testcase 254:
explain (verbose, costs off)
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: c2, c2, (sum(c1))
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Agg push-down: yes
     Relations: Aggregate on (public.ft1)
     Remote SQL: SELECT c2, c2, sum("C 1") FROM "S 1"."T 1" WHERE ((c2 > 6)) GROUP BY 1, 2 ORDER BY sum("C 1") ASC NULLS LAST
(7 rows)

--Testcase 255:
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
 c2 | c2 
----+----
  7 |  7
  8 |  8
  9 |  9
(3 rows)

-- Testing HAVING clause shippability
--Testcase 256:
explain (verbose, costs off)
select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: c2, (sum(c1))
   Filter: (((avg(ft2.c1)) < '500'::numeric) AND ((sum(ft2.c1)) < 49800))
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Agg push-down: yes
     Relations: Aggregate on (public.ft2)
     Remote SQL: SELECT c2, sum("C 1"), avg("C 1") FROM "S 1"."T 1" GROUP BY 1 ORDER BY c2 ASC NULLS LAST
(8 rows)

--Testcase 257:
select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
 c2 |  sum  
----+-------
  1 | 49600
  2 | 49700
(2 rows)

-- Unshippable HAVING clause will be evaluated locally, and other qual in HAVING clause is pushed down
--Testcase 258:
explain (verbose, costs off)
select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  Foreign Scan
         Output: ft1.c5, NULL::bigint, (sqrt((ft1.c2)::double precision))
         Filter: ((((((avg(ft1.c1)) / (avg(ft1.c1))))::double precision * random()) <= '1'::double precision) AND ((avg(ft1.c1)) < '500'::numeric))
         Node: postgres_srv / Status: Alive
           Agg push-down: yes
           Relations: Aggregate on (public.ft1)
           Remote SQL: SELECT c5, NULL::bigint, sqrt(c2), avg("C 1") FROM "S 1"."T 1" GROUP BY 1, 3
(9 rows)

--Testcase 259:
select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
 count 
-------
    49
(1 row)

-- Aggregate in HAVING clause is not pushable, and thus aggregation is not pushed down
--Testcase 260:
explain (verbose, costs off)
select sum(c1) from ft1 group by c2 having avg(c1 * (random() <= 1)::int) > 100 order by 1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1)), c2
   Sort Key: (sum(ft1.c1))
   ->  GroupAggregate
         Output: sum(c1), c2
         Group Key: ft1.c2
         Filter: (avg((ft1.c1 * ((random() <= '1'::double precision))::integer)) > '100'::numeric)
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Node: postgres_srv / Status: Alive
                 Sort push-down: yes
                 Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
(12 rows)

-- Remote aggregate in combination with a local Param (for the output
-- of an initplan) can be trouble, per bug #15781
--Testcase 261:
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum(c1) from ft1;
                     QUERY PLAN                     
----------------------------------------------------
 Foreign Scan
   Output: $0, (sum(ft1.c1))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1)
     Remote SQL: SELECT sum("C 1") FROM "S 1"."T 1"
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
(8 rows)

--Testcase 262:
select exists(select 1 from pg_enum), sum(c1) from ft1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

--Testcase 263:
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
                     QUERY PLAN                      
-----------------------------------------------------
 GroupAggregate
   Output: ($0), sum(ft1.c1)
   Group Key: $0
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
   ->  Foreign Scan on public.ft1
         Output: $0, ft1.c1
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(9 rows)

--Testcase 264:
select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

-- Testing ORDER BY, DISTINCT, FILTER, Ordered-sets and VARIADIC within aggregates
-- ORDER BY within aggregate, same column used to order
--Testcase 265:
explain (verbose, costs off)
select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (array_agg(c1 ORDER BY c1)), c2
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Agg push-down: yes
     Relations: Aggregate on (public.ft1)
     Remote SQL: SELECT array_agg("C 1" ORDER BY "C 1" ASC NULLS LAST), c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) GROUP BY 2 ORDER BY array_agg("C 1" ORDER BY "C 1" ASC NULLS LAST) ASC NULLS LAST
(7 rows)

--Testcase 266:
select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
           array_agg            
--------------------------------
 {1,11,21,31,41,51,61,71,81,91}
 {2,12,22,32,42,52,62,72,82,92}
 {3,13,23,33,43,53,63,73,83,93}
 {4,14,24,34,44,54,64,74,84,94}
 {5,15,25,35,45,55,65,75,85,95}
 {6,16,26,36,46,56,66,76,86,96}
 {7,17,27,37,47,57,67,77,87,97}
 {8,18,28,38,48,58,68,78,88,98}
 {9,19,29,39,49,59,69,79,89,99}
 {10,20,30,40,50,60,70,80,90}
(10 rows)

-- ORDER BY within aggregate, different column used to order also using DESC
--Testcase 267:
explain (verbose, costs off)
select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (array_agg(c5 ORDER BY c1 DESC))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft2)
     Remote SQL: SELECT array_agg(c5 ORDER BY "C 1" DESC NULLS FIRST) FROM "S 1"."T 1" WHERE (("C 1" < 50)) AND ((c2 = 6))
(6 rows)

--Testcase 268:
select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                                                array_agg                                                                 
------------------------------------------------------------------------------------------------------------------------------------------
 {"Mon Feb 16 00:00:00 1970","Fri Feb 06 00:00:00 1970","Tue Jan 27 00:00:00 1970","Sat Jan 17 00:00:00 1970","Wed Jan 07 00:00:00 1970"}
(1 row)

-- DISTINCT within aggregate
--Testcase 269:
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5))), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5)))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5)), ((t2.c1 % 3))
         Group Key: (t2.c1 % 3)
         ->  Foreign Scan
               Output: (t2.c1 % 3), t1.c1
               Node: postgres_srv / Status: Alive
                 Sort push-down: yes
                 Relations: (public.ft4 t1) FULL JOIN (public.ft5 t2)
                 Remote SQL: SELECT r2.c1, r1.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 < 20) OR ((r1.c1 IS NULL) AND (r2.c1 < 5)))) ORDER BY (r2.c1 % 3) ASC NULLS LAST
(12 rows)

--Testcase 270:
select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

-- DISTINCT combined with ORDER BY within aggregate
--Testcase 271:
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5))), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5)))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5)), ((t2.c1 % 3))
         Group Key: (t2.c1 % 3)
         ->  Foreign Scan
               Output: (t2.c1 % 3), t1.c1
               Node: postgres_srv / Status: Alive
                 Sort push-down: yes
                 Relations: (public.ft4 t1) FULL JOIN (public.ft5 t2)
                 Remote SQL: SELECT r2.c1, r1.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 < 20) OR ((r1.c1 IS NULL) AND (r2.c1 < 5)))) ORDER BY (r2.c1 % 3) ASC NULLS LAST
(12 rows)

--Testcase 272:
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

--Testcase 273:
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST)), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST), ((t2.c1 % 3))
         Group Key: (t2.c1 % 3)
         ->  Foreign Scan
               Output: (t2.c1 % 3), t1.c1
               Node: postgres_srv / Status: Alive
                 Sort push-down: yes
                 Relations: (public.ft4 t1) FULL JOIN (public.ft5 t2)
                 Remote SQL: SELECT r2.c1, r1.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 < 20) OR ((r1.c1 IS NULL) AND (r2.c1 < 5)))) ORDER BY (r2.c1 % 3) ASC NULLS LAST
(12 rows)

--Testcase 274:
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {3,2,1,NULL}
 {4,3,2,1,0}
(2 rows)

-- FILTER within aggregate
--Testcase 275:
explain (verbose, costs off)
select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (sum(c1) FILTER (WHERE ((c1 < 100) AND (c2 > 5)))), c2
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Agg push-down: yes
     Relations: Aggregate on (public.ft1)
     Remote SQL: SELECT sum("C 1") FILTER (WHERE (("C 1" < 100) AND (c2 > 5))), c2 FROM "S 1"."T 1" GROUP BY 2 ORDER BY sum("C 1") FILTER (WHERE (("C 1" < 100) AND (c2 > 5))) ASC NULLS LAST
(7 rows)

--Testcase 276:
select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
 sum 
-----
 510
 520
 530
 540
    
    
    
    
    
    
(10 rows)

-- DISTINCT, ORDER BY and FILTER within aggregate
--Testcase 277:
explain (verbose, costs off)
select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum((c1 % 3)), sum(DISTINCT (c1 % 3) ORDER BY (c1 % 3)) FILTER (WHERE ((c1 % 3) < 2)), c2
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1
         Output: c2, c1
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 = 6))
(7 rows)

--Testcase 278:
select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
 sum | sum | c2 
-----+-----+----
  99 |   1 |  6
(1 row)

-- Outer query is aggregation query
--Testcase 279:
explain (verbose, costs off)
select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Foreign Scan
               Output: (SubPlan 1)
               Node: postgres_srv / Status: Alive
                 Sort push-down: no
                 Agg push-down: yes
                 Relations: Aggregate on (public.ft2 t2)
                 Remote SQL: SELECT count(*) FILTER (WHERE ((c2 = 6) AND ("C 1" < 10))) FROM "S 1"."T 1" WHERE (((c2 % 6) = 0))
               SubPlan 1
                 ->  Foreign Scan on public.ft1 t1
                       Output: (count(*) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10))))
                       Node: postgres_srv / Status: Alive
                         Remote SQL: SELECT "C 1" FROM "S 1"."T 1" WHERE (("C 1" = 6))
(17 rows)

--Testcase 280:
select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count 
-------
     1
(1 row)

-- Inner query is aggregation query
--Testcase 281:
explain (verbose, costs off)
select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Foreign Scan on public.ft2 t2
               Output: (SubPlan 1)
               Node: postgres_srv / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (((c2 % 6) = 0))
               SubPlan 1
                 ->  Foreign Scan
                       Output: (count(t1.c1) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10))))
                       Node: postgres_srv / Status: Alive
                         Agg push-down: yes
                         Relations: Aggregate on (public.ft1 t1)
                         Remote SQL: SELECT count("C 1") FILTER (WHERE (($1::integer = 6) AND ($2::integer < 10))) FROM "S 1"."T 1" WHERE (("C 1" = 6))
(17 rows)

--Testcase 282:
select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count 
-------
     0
     1
(2 rows)

-- Aggregate not pushed down as FILTER condition is not pushable
--Testcase 283:
explain (verbose, costs off)
select sum(c1) filter (where (c1 / c1) * random() <= 1) from ft1 group by c2 order by 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1) FILTER (WHERE ((((c1 / c1))::double precision * random()) <= '1'::double precision))), c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((((ft1.c1 / ft1.c1))::double precision * random()) <= '1'::double precision)))
   ->  GroupAggregate
         Output: sum(c1) FILTER (WHERE ((((c1 / c1))::double precision * random()) <= '1'::double precision)), c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Node: postgres_srv / Status: Alive
                 Sort push-down: yes
                 Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
(11 rows)

--Testcase 284:
explain (verbose, costs off)
select sum(c2) filter (where c2 in (select c2 from ft1 where c2 < 5)) from ft1;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Aggregate
   Output: sum(ft1.c2) FILTER (WHERE (hashed SubPlan 1))
   ->  Foreign Scan on public.ft1
         Output: ft1.c2
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT c2 FROM "S 1"."T 1"
   SubPlan 1
     ->  Foreign Scan on public.ft1 ft1_1
           Output: ft1_1.c2
           Node: postgres_srv / Status: Alive
             Remote SQL: SELECT c2 FROM "S 1"."T 1" WHERE ((c2 < 5))
(11 rows)

-- Ordered-sets within aggregate
--Testcase 285:
explain (verbose, costs off)
select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
                                                                                                                           QUERY PLAN                                                                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: c2, (rank('10'::character varying) WITHIN GROUP (ORDER BY c6)), (percentile_cont((((c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((c1)::double precision)))
   Filter: ((percentile_cont((((ft1.c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((ft1.c1)::double precision))) < '500'::double precision)
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Agg push-down: yes
     Relations: Aggregate on (public.ft1)
     Remote SQL: SELECT c2, rank('10'::character varying) WITHIN GROUP (ORDER BY c6 ASC NULLS LAST), percentile_cont((c2 / 10::numeric)) WITHIN GROUP (ORDER BY ("C 1") ASC NULLS LAST) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1 ORDER BY c2 ASC NULLS LAST
(8 rows)

--Testcase 286:
select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
 c2 | rank | percentile_cont 
----+------+-----------------
  0 |  101 |              10
  1 |  101 |             100
  2 |    1 |             200
  3 |    1 |             300
  4 |    1 |             400
(5 rows)

-- Using multiple arguments within aggregates
--Testcase 287:
explain (verbose, costs off)
select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: c1, (rank(c1, c2) WITHIN GROUP (ORDER BY c1, c2)), c2
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Agg push-down: yes
     Relations: Aggregate on (public.ft1)
     Remote SQL: SELECT "C 1", rank("C 1", c2) WITHIN GROUP (ORDER BY "C 1" ASC NULLS LAST, c2 ASC NULLS LAST), c2 FROM "S 1"."T 1" WHERE (("C 1" = 6)) GROUP BY 1, 3
(7 rows)

--Testcase 288:
select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
 c1 | rank 
----+------
  6 |    1
(1 row)

-- User defined function for user defined aggregate, VARIADIC
--Testcase 289:
create function least_accum(anyelement, variadic anyarray)
returns anyelement language sql as
  'select least($1, min($2[i])) from generate_subscripts($2,1) g(i)';
--Testcase 290:
create aggregate least_agg(variadic items anyarray) (
  stype = anyelement, sfunc = least_accum
);
-- Disable hash aggregation for plan stability.
--Testcase 291:
set enable_hashagg to false;
-- Not pushed down due to user defined aggregate
--Testcase 292:
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1
         Output: c2, c1
         Node: postgres_srv / Status: Alive
           Sort push-down: yes
           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
(8 rows)

-- Add function and aggregate into extension
--Testcase 293:
alter extension pgspider_core_fdw add function least_accum(anyelement, variadic anyarray);
--Testcase 294:
alter extension pgspider_core_fdw add aggregate least_agg(variadic items anyarray);
--Testcase 295:
alter server postgres_srv options (set extensions 'postgres_fdw');
-- Now aggregate will be pushed.  Aggregate will display VARIADIC argument.
--Testcase 296:
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1
         Output: c2, c1
         Node: postgres_srv / Status: Alive
           Sort push-down: yes
           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 100)) ORDER BY c2 ASC NULLS LAST
(8 rows)

--Testcase 297:
select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
 c2 | least_agg 
----+-----------
  0 |        10
  1 |         1
  2 |         2
  3 |         3
  4 |         4
  5 |         5
  6 |         6
  7 |         7
  8 |         8
  9 |         9
(10 rows)

-- Remove function and aggregate from extension
--Testcase 298:
alter extension pgspider_core_fdw drop function least_accum(anyelement, variadic anyarray);
--Testcase 299:
alter extension pgspider_core_fdw drop aggregate least_agg(variadic items anyarray);
--Testcase 300:
alter server postgres_srv options (set extensions 'postgres_fdw');
-- Not pushed down as we have dropped objects from extension.
--Testcase 301:
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1
         Output: c2, c1
         Node: postgres_srv / Status: Alive
           Sort push-down: yes
           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
(8 rows)

-- Cleanup
--Testcase 302:
reset enable_hashagg;
--Testcase 303:
drop aggregate least_agg(variadic items anyarray);
--Testcase 304:
drop function least_accum(anyelement, variadic anyarray);
-- Testing USING OPERATOR() in ORDER BY within aggregate.
-- For this, we need user defined operators along with operator family and
-- operator class.  Create those and then add them in extension.  Note that
-- user defined objects are considered unshippable unless they are part of
-- the extension.
--Testcase 305:
create operator public.<^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4eq
);
--Testcase 306:
create operator public.=^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4lt
);
--Testcase 307:
create operator public.>^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4gt
);
--Testcase 308:
create operator family my_op_family using btree;
--Testcase 309:
create function my_op_cmp(a int, b int) returns int as
  $$begin return btint4cmp(a, b); end $$ language plpgsql;
--Testcase 310:
create operator class my_op_class for type int using btree family my_op_family as
 operator 1 public.<^,
 operator 3 public.=^,
 operator 5 public.>^,
 function 1 my_op_cmp(int, int);
-- This will not be pushed as user defined sort operator is not part of the
-- extension yet.
--Testcase 311:
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c2, c1
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6))
(7 rows)

-- This should not be pushed either.
--Testcase 1196:
explain (verbose, costs off)
select * from ft2 order by c1 using operator(public.<^);
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Sort Key: ft2.c1 USING <^
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
         Node: postgres_srv / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(8 rows)

-- Update local stats on ft2
ANALYZE ft2;
WARNING:  skipping "ft2" --- cannot analyze this foreign table
-- Add into extension
--Testcase 312:
alter extension pgspider_core_fdw add operator class my_op_class using btree;
--Testcase 313:
alter extension pgspider_core_fdw add function my_op_cmp(a int, b int);
--Testcase 314:
alter extension pgspider_core_fdw add operator family my_op_family using btree;
--Testcase 315:
alter extension pgspider_core_fdw add operator public.<^(int, int);
--Testcase 316:
alter extension pgspider_core_fdw add operator public.=^(int, int);
--Testcase 317:
alter extension pgspider_core_fdw add operator public.>^(int, int);
--Testcase 318:
alter server postgres_srv options (set extensions 'postgres_fdw');
-- PGSpider can not push down this operator
--Testcase 319:
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c2, c1
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6))
(7 rows)

--Testcase 320:
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
           array_agg            
--------------------------------
 {6,16,26,36,46,56,66,76,86,96}
(1 row)

-- This should not be pushed too.
--Testcase 1197:
explain (verbose, costs off)
select * from ft2 order by c1 using operator(public.<^);
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Sort Key: ft2.c1 USING <^
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
         Node: postgres_srv / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(8 rows)

-- Remove from extension
--Testcase 321:
alter extension pgspider_core_fdw drop operator class my_op_class using btree;
--Testcase 322:
alter extension pgspider_core_fdw drop function my_op_cmp(a int, b int);
--Testcase 323:
alter extension pgspider_core_fdw drop operator family my_op_family using btree;
--Testcase 324:
alter extension pgspider_core_fdw drop operator public.<^(int, int);
--Testcase 325:
alter extension pgspider_core_fdw drop operator public.=^(int, int);
--Testcase 326:
alter extension pgspider_core_fdw drop operator public.>^(int, int);
--Testcase 327:
alter server postgres_srv options (set extensions 'postgres_fdw');
-- This will not be pushed as sort operator is now removed from the extension.
--Testcase 328:
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c2, c1
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6))
(7 rows)

-- Cleanup
--Testcase 329:
drop operator class my_op_class using btree;
--Testcase 330:
drop function my_op_cmp(a int, b int);
--Testcase 331:
drop operator family my_op_family using btree;
--Testcase 332:
drop operator public.>^(int, int);
--Testcase 333:
drop operator public.=^(int, int);
--Testcase 334:
drop operator public.<^(int, int);
-- Input relation to aggregate push down hook is not safe to pushdown and thus
-- the aggregate cannot be pushed down to foreign server.
--Testcase 335:
explain (verbose, costs off)
select count(t1.c3) from ft2 t1 left join ft2 t2 on (t1.c1 = random() * t2.c2);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Nested Loop Left Join
         Output: t1.c3
         Join Filter: ((t1.c1)::double precision = (random() * (t2.c2)::double precision))
         ->  Foreign Scan on public.ft2 t1
               Output: t1.c3, t1.c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
         ->  Materialize
               Output: t2.c2
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c2 FROM "S 1"."T 1"
(15 rows)

-- Subquery in FROM clause having aggregate
--Testcase 336:
explain (verbose, costs off)
select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), x.b
   Sort Key: (count(*)), x.b
   ->  GroupAggregate
         Output: count(*), x.b
         Group Key: x.b
         ->  Sort
               Output: x.b
               Sort Key: x.b
               ->  Hash Join
                     Output: x.b
                     Inner Unique: true
                     Hash Cond: (ft1.c2 = x.a)
                     ->  Foreign Scan on public.ft1
                           Output: ft1.c2
                           Node: postgres_srv / Status: Alive
                             Sort push-down: no
                             Remote SQL: SELECT c2 FROM "S 1"."T 1"
                     ->  Hash
                           Output: x.b, x.a
                           ->  Subquery Scan on x
                                 Output: x.b, x.a
                                 ->  Foreign Scan
                                       Output: ft1_1.c2, (sum(ft1_1.c1))
                                       Node: postgres_srv / Status: Alive
                                         Agg push-down: yes
                                         Relations: Aggregate on (public.ft1 ft1_1)
                                         Remote SQL: SELECT c2, sum("C 1") FROM "S 1"."T 1" GROUP BY 1
(28 rows)

--Testcase 337:
select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
 count |   b   
-------+-------
   100 | 49600
   100 | 49700
   100 | 49800
   100 | 49900
   100 | 50000
   100 | 50100
   100 | 50200
   100 | 50300
   100 | 50400
   100 | 50500
(10 rows)

-- FULL join with IS NULL check in HAVING
--Testcase 338:
explain (verbose, costs off)
select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (avg(t1.c1)), (sum(t2.c1)), t2.c1
   Filter: ((((avg(t1.c1)) IS NULL) AND ((sum(t2.c1)) < 10)) OR ((sum(t2.c1)) IS NULL))
   Node: postgres_srv / Status: Alive
     Sort push-down: yes
     Agg push-down: yes
     Relations: Aggregate on ((public.ft4 t1) FULL JOIN (public.ft5 t2))
     Remote SQL: SELECT avg(r1.c1), sum(r2.c1), r2.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) GROUP BY 3 ORDER BY avg(r1.c1) ASC NULLS LAST, sum(r2.c1) ASC NULLS LAST
(8 rows)

--Testcase 339:
select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
         avg         | sum 
---------------------+-----
 51.0000000000000000 |    
                     |   3
                     |   9
(3 rows)

-- Aggregate over FULL join needing to deparse the joining relations as
-- subqueries.
--Testcase 340:
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
                                                                                                                                   QUERY PLAN                                                                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (count(*)), (sum(ft4.c1)), (avg(ft5.c1))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on ((public.ft4) FULL JOIN (public.ft5))
     Remote SQL: SELECT count(*), sum(s4.c1), avg(s5.c1) FROM ((SELECT c1, c1, c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1, c2, c3) FULL JOIN (SELECT c1, c1, c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s5(c1, c2, c3) ON (((s4.c1 = s5.c1))))
(6 rows)

--Testcase 341:
select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
 count | sum |         avg         
-------+-----+---------------------
     8 | 330 | 55.5000000000000000
(1 row)

-- ORDER BY expression is part of the target list but not pushed down to
-- foreign server.
--Testcase 342:
explain (verbose, costs off)
select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: (((sum(c2)) * ((random() <= '1'::double precision))::integer))
   Sort Key: (((sum(ft1.c2)) * ((random() <= '1'::double precision))::integer))
   ->  Foreign Scan
         Output: ((sum(c2)) * ((random() <= '1'::double precision))::integer)
         Node: postgres_srv / Status: Alive
           Sort push-down: no
           Agg push-down: yes
           Relations: Aggregate on (public.ft1)
           Remote SQL: SELECT sum(c2) FROM "S 1"."T 1"
(10 rows)

--Testcase 343:
select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
 sum  
------
 4500
(1 row)

-- LATERAL join, with parameterization
--Testcase 344:
set enable_hashagg to false;
--Testcase 345:
explain (verbose, costs off)
select c2, sum from "S 1"."T 1" t1, lateral (select sum(t2.c1 + t1."C 1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C 1" < 100 order by 1;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: t1.c2, qry.sum
   ->  Foreign Scan on "S 1"."T 1" t1
         Output: t1.c2, t1."C 1"
         Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3)) AND (("C 1" < 100)) ORDER BY c2 ASC NULLS LAST
   ->  Subquery Scan on qry
         Output: qry.sum, t2.c1
         Filter: ((t1.c2 * 2) = qry.sum)
         ->  Foreign Scan
               Output: (sum((t2.c1 + t1."C 1"))), t2.c1
               Node: postgres_srv / Status: Alive
                 Agg push-down: yes
                 Relations: Aggregate on (public.ft2 t2)
                 Remote SQL: SELECT sum(("C 1" + $1::integer)), "C 1" FROM "S 1"."T 1" GROUP BY 2
(14 rows)

--Testcase 346:
select c2, sum from "S 1"."T 1" t1, lateral (select sum(t2.c1 + t1."C 1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C 1" < 100 order by 1;
 c2 | sum 
----+-----
  1 |   2
  2 |   4
(2 rows)

--Testcase 347:
reset enable_hashagg;
-- bug #15613: bad plan for foreign table scan with lateral reference
--Testcase 348:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ref_0.c2, subq_1.*
FROM
    "S 1"."T 1" AS ref_0,
    LATERAL (
        SELECT ref_0."C 1" c1, subq_0.*
        FROM (SELECT ref_0.c2, ref_1.c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
    ) AS subq_1
WHERE ref_0."C 1" < 10 AND subq_1.c3 = '00001'
ORDER BY ref_0."C 1";
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: ref_0.c2, ref_0."C 1", (ref_0.c2), ref_1.c3, ref_0."C 1"
   ->  Nested Loop
         Output: ref_0.c2, ref_0."C 1", ref_1.c3, (ref_0.c2)
         ->  Foreign Scan on "S 1"."T 1" ref_0
               Output: ref_0.c2, ref_0."C 1"
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (("C 1" < 10)) ORDER BY "C 1" ASC NULLS LAST
         ->  Foreign Scan on public.ft1 ref_1
               Output: ref_1.c3, ref_0.c2
               Node: postgres_srv / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE ((c3 = '00001'))
   ->  Materialize
         Output: ref_3.c3
         ->  Foreign Scan on public.ft2 ref_3
               Output: ref_3.c3
               Node: postgres_srv / Status: Alive
                 Sort push-down: no
                 Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE ((c3 = '00001'))
(19 rows)

--Testcase 349:
SELECT ref_0.c2, subq_1.*
FROM
    "S 1"."T 1" AS ref_0,
    LATERAL (
        SELECT ref_0."C 1" c1, subq_0.*
        FROM (SELECT ref_0.c2, ref_1.c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
    ) AS subq_1
WHERE ref_0."C 1" < 10 AND subq_1.c3 = '00001'
ORDER BY ref_0."C 1";
 c2 | c1 | c2 |  c3   
----+----+----+-------
  1 |  1 |  1 | 00001
  2 |  2 |  2 | 00001
  3 |  3 |  3 | 00001
  4 |  4 |  4 | 00001
  5 |  5 |  5 | 00001
  6 |  6 |  6 | 00001
  7 |  7 |  7 | 00001
  8 |  8 |  8 | 00001
  9 |  9 |  9 | 00001
(9 rows)

-- Check with placeHolderVars
--Testcase 350:
explain (verbose, costs off)
select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(q.a), count(q.b)
   ->  Nested Loop Left Join
         Output: q.a, q.b
         Inner Unique: true
         Join Filter: ((ft4.c1)::numeric <= q.b)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c1 FROM "S 1"."T 3"
         ->  Materialize
               Output: q.a, q.b
               ->  Subquery Scan on q
                     Output: q.a, q.b
                     ->  Foreign Scan
                           Output: 13, (avg(ft1.c1)), NULL::bigint
                           Node: postgres_srv / Status: Alive
                             Agg push-down: yes
                             Relations: Aggregate on ((public.ft2) LEFT JOIN (public.ft1))
                             Remote SQL: SELECT 13, avg(r1."C 1"), NULL::bigint FROM ("S 1"."T 1" r2 LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1"))))
(20 rows)

--Testcase 351:
select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
 sum | count 
-----+-------
 650 |    50
(1 row)

-- Not supported cases
-- Grouping sets
--Testcase 352:
explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, sum(c1)
   Group Key: ft1.c2
   Group Key: ()
   ->  Foreign Scan on public.ft1
         Output: c2, c1
         Node: postgres_srv / Status: Alive
           Sort push-down: yes
           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3)) ORDER BY c2 ASC NULLS LAST
(9 rows)

--Testcase 353:
select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

--Testcase 354:
explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, sum(c1)
   Group Key: ft1.c2
   Group Key: ()
   ->  Foreign Scan on public.ft1
         Output: c2, c1
         Node: postgres_srv / Status: Alive
           Sort push-down: yes
           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3)) ORDER BY c2 ASC NULLS LAST
(9 rows)

--Testcase 355:
select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

--Testcase 356:
explain (verbose, costs off)
select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort
   Output: c2, c6, (sum(c1))
   Sort Key: ft1.c2, ft1.c6
   ->  MixedAggregate
         Output: c2, c6, sum(c1)
         Hash Key: ft1.c6
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c6, c1
               Node: postgres_srv / Status: Alive
                 Sort push-down: yes
                 Remote SQL: SELECT "C 1", c2, c6 FROM "S 1"."T 1" WHERE ((c2 < 3)) ORDER BY c2 ASC NULLS LAST
(12 rows)

--Testcase 357:
select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
 c2 | c6 |  sum  
----+----+-------
  0 |    | 50500
  1 |    | 49600
  2 |    | 49700
    | 0  | 50500
    | 1  | 49600
    | 2  | 49700
(6 rows)

--Testcase 358:
explain (verbose, costs off)
select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, sum(c1), GROUPING(c2)
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1
         Output: c2, c1
         Node: postgres_srv / Status: Alive
           Sort push-down: yes
           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3)) ORDER BY c2 ASC NULLS LAST
(8 rows)

--Testcase 359:
select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
 c2 |  sum  | grouping 
----+-------+----------
  0 | 50500 |        0
  1 | 49600 |        0
  2 | 49700 |        0
(3 rows)

-- DISTINCT itself is not pushed down, whereas underneath aggregate is pushed
--Testcase 360:
explain (verbose, costs off)
select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Unique
   Output: ((sum(c1) / 1000)), c2
   ->  Sort
         Output: ((sum(c1) / 1000)), c2
         Sort Key: ((sum(ft2.c1) / 1000))
         ->  Foreign Scan
               Output: ((sum(c1) / 1000)), c2
               Node: postgres_srv / Status: Alive
                 Sort push-down: no
                 Agg push-down: yes
                 Relations: Aggregate on (public.ft2)
                 Remote SQL: SELECT (sum("C 1") / 1000), c2 FROM "S 1"."T 1" WHERE ((c2 < 6)) GROUP BY 2
(12 rows)

--Testcase 361:
select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
 s  
----
 49
 50
(2 rows)

-- WindowAgg
--Testcase 362:
explain (verbose, costs off)
select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c2)), (count(c2) OVER (?)), ((c2 % 2))
   Sort Key: ft2.c2
   ->  WindowAgg
         Output: c2, (sum(c2)), count(c2) OVER (?), ((c2 % 2))
         ->  Sort
               Output: c2, ((c2 % 2)), (sum(c2))
               Sort Key: ((ft2.c2 % 2))
               ->  Foreign Scan
                     Output: c2, ((c2 % 2)), (sum(c2))
                     Node: postgres_srv / Status: Alive
                       Sort push-down: no
                       Agg push-down: yes
                       Relations: Aggregate on (public.ft2)
                       Remote SQL: SELECT c2, (c2 % 2), sum(c2) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1
(15 rows)

--Testcase 363:
select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
 c2 | sum | count 
----+-----+-------
  0 |   0 |     5
  1 | 100 |     5
  2 | 200 |     5
  3 | 300 |     5
  4 | 400 |     5
  5 | 500 |     5
  6 | 600 |     5
  7 | 700 |     5
  8 | 800 |     5
  9 | 900 |     5
(10 rows)

--Testcase 364:
explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Output: c2, (array_agg(c2) OVER (?)), ((c2 % 2))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: c2, array_agg(c2) OVER (?), ((c2 % 2))
         ->  Sort
               Output: c2, ((c2 % 2))
               Sort Key: ((ft1.c2 % 2)), ft1.c2 DESC
               ->  Foreign Scan
                     Output: c2, ((c2 % 2))
                     Node: postgres_srv / Status: Alive
                       Sort push-down: no
                       Agg push-down: yes
                       Relations: Aggregate on (public.ft1)
                       Remote SQL: SELECT c2, (c2 % 2) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1
(15 rows)

--Testcase 365:
select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
 c2 |  array_agg  
----+-------------
  0 | {8,6,4,2,0}
  1 | {9,7,5,3,1}
  2 | {8,6,4,2}
  3 | {9,7,5,3}
  4 | {8,6,4}
  5 | {9,7,5}
  6 | {8,6}
  7 | {9,7}
  8 | {8}
  9 | {9}
(10 rows)

--Testcase 366:
explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Output: c2, (array_agg(c2) OVER (?)), ((c2 % 2))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: c2, array_agg(c2) OVER (?), ((c2 % 2))
         ->  Sort
               Output: c2, ((c2 % 2))
               Sort Key: ((ft1.c2 % 2)), ft1.c2
               ->  Foreign Scan
                     Output: c2, ((c2 % 2))
                     Node: postgres_srv / Status: Alive
                       Sort push-down: no
                       Agg push-down: yes
                       Relations: Aggregate on (public.ft1)
                       Remote SQL: SELECT c2, (c2 % 2) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1
(15 rows)

--Testcase 367:
select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
 c2 |  array_agg  
----+-------------
  0 | {0,2,4,6,8}
  1 | {1,3,5,7,9}
  2 | {2,4,6,8}
  3 | {3,5,7,9}
  4 | {4,6,8}
  5 | {5,7,9}
  6 | {6,8}
  7 | {7,9}
  8 | {8}
  9 | {9}
(10 rows)

-- ===================================================================
-- parameterized queries
-- ===================================================================
-- simple join
--Testcase 368:
PREPARE st1(int, int) AS SELECT t1.c3, t2.c3 FROM ft1 t1, ft2 t2 WHERE t1.c1 = $1 AND t2.c1 = $2;
--Testcase 369:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st1(1, 2);
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c3, t2.c3
   Node: postgres_srv / Status: Alive
     Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
     Remote SQL: SELECT r1.c3, r2.c3 FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r2."C 1" = 2)) AND ((r1."C 1" = 1))))
(5 rows)

--Testcase 370:
EXECUTE st1(1, 1);
  c3   |  c3   
-------+-------
 00001 | 00001
(1 row)

--Testcase 371:
EXECUTE st1(101, 101);
  c3   |  c3   
-------+-------
 00101 | 00101
(1 row)

-- subquery using stable function (can't be sent to remote)
--Testcase 372:
PREPARE st2(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(c4) = '1970-01-17'::date) ORDER BY c1;
--Testcase 373:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st2(10, 20);
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.__spd_url
   Join Filter: (t1.c3 = t2.c3)
   ->  Foreign Scan on public.ft1 t1
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.__spd_url
         Node: postgres_srv / Status: Alive
           Sort push-down: yes
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" < 20)) ORDER BY "C 1" ASC NULLS LAST
   ->  Foreign Scan on public.ft2 t2
         Output: t2.c3
         Filter: (date(t2.c4) = '01-17-1970'::date)
         Node: postgres_srv / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT "C 1", c3, c4 FROM "S 1"."T 1" WHERE (("C 1" > 10))
(14 rows)

--Testcase 374:
EXECUTE st2(10, 20);
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
(1 row)

--Testcase 375:
EXECUTE st2(101, 121);
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
(1 row)

-- subquery using immutable function (can be sent to remote)
--Testcase 376:
PREPARE st3(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(c5) = '1970-01-17'::date) ORDER BY c1;
--Testcase 377:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st3(10, 20);
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.__spd_url
   Join Filter: (t1.c3 = t2.c3)
   ->  Foreign Scan on public.ft1 t1
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.__spd_url
         Node: postgres_srv / Status: Alive
           Sort push-down: yes
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" < 20)) ORDER BY "C 1" ASC NULLS LAST
   ->  Foreign Scan on public.ft2 t2
         Output: t2.c3
         Node: postgres_srv / Status: Alive
           Sort push-down: no
           Remote SQL: SELECT "C 1", c3, c5 FROM "S 1"."T 1" WHERE (("C 1" > 10)) AND ((date(c5) = '1970-01-17'::date))
(13 rows)

--Testcase 378:
EXECUTE st3(10, 20);
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
(1 row)

--Testcase 379:
EXECUTE st3(20, 30);
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 | __spd_url 
----+----+----+----+----+----+----+----+-----------
(0 rows)

-- custom plan should be chosen initially
--Testcase 380:
PREPARE st4(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 = $1;
--Testcase 381:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

--Testcase 382:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

--Testcase 383:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

--Testcase 384:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

--Testcase 385:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

-- once we try it enough times, should switch to generic plan
--Testcase 386:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = $1::integer))
(4 rows)

-- value of $1 should not be sent to remote
--Testcase 387:
PREPARE st5(user_enum,int) AS SELECT * FROM ft1 t1 WHERE c8 = $1 and c1 = $2;
--Testcase 388:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = 'foo'::user_enum)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

--Testcase 389:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = 'foo'::user_enum)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

--Testcase 390:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = 'foo'::user_enum)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

--Testcase 391:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = 'foo'::user_enum)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

--Testcase 392:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = 'foo'::user_enum)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

--Testcase 393:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = $1)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = $1::integer))
(5 rows)

--Testcase 394:
EXECUTE st5('foo', 1);
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

-- altering FDW options requires replanning
--Testcase 395:
PREPARE st6 AS SELECT * FROM ft1 t1 WHERE t1.c1 = t1.c2;
--Testcase 396:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = c2))
(4 rows)

--Testcase 397:
PREPARE st7 AS INSERT INTO ft1__postgres_srv__0 (c1,c2,c3) VALUES (1001,101,'foo');
--Testcase 398:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1__postgres_srv__0
   Remote SQL: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   Batch Size: 1
   ->  Result
         Output: NULL::integer, 1001, 101, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::user_enum
(5 rows)

--Testcase 399:
ALTER TABLE "S 1"."T 1" RENAME TO "T 0";
--Testcase 400:
ALTER FOREIGN TABLE ft1__postgres_srv__0 OPTIONS (SET table_name 'T 0');
--Testcase 401:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = c2))
(4 rows)

--Testcase 402:
EXECUTE st6;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /postgres_srv/
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /postgres_srv/
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /postgres_srv/
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /postgres_srv/
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /postgres_srv/
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /postgres_srv/
(9 rows)

--Testcase 403:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1__postgres_srv__0
   Remote SQL: INSERT INTO "S 1"."T 0"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   Batch Size: 1
   ->  Result
         Output: NULL::integer, 1001, 101, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::user_enum
(5 rows)

--Testcase 404:
ALTER TABLE "S 1"."T 0" RENAME TO "T 1";
--Testcase 405:
ALTER FOREIGN TABLE ft1__postgres_srv__0 OPTIONS (SET table_name 'T 1');
--Testcase 406:
PREPARE st8 AS SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
--Testcase 407:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(7 rows)

--Testcase 408:
ALTER SERVER postgres_srv OPTIONS (DROP extensions);
--Testcase 409:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(7 rows)

--Testcase 410:
EXECUTE st8;
 count 
-------
     9
(1 row)

--Testcase 411:
ALTER SERVER postgres_srv OPTIONS (ADD extensions 'postgres_fdw');
-- cleanup
DEALLOCATE st1;
DEALLOCATE st2;
DEALLOCATE st3;
DEALLOCATE st4;
DEALLOCATE st5;
DEALLOCATE st6;
DEALLOCATE st7;
DEALLOCATE st8;
-- System columns, except ctid and oid, should not be sent to remote
--Testcase 412:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'pg_class'::regclass LIMIT 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
         Filter: (t1.tableoid = '1259'::oid)
         Node: postgres_srv / Status: Alive
           Limit push-down: no
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(8 rows)

--Testcase 413:
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'ft1'::regclass LIMIT 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

--Testcase 414:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: (tableoid)::regclass, c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" LIMIT 1::bigint
(5 rows)

--Testcase 415:
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
 tableoid | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----------+----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 ft1      |  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

--Testcase 416:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" WHERE ((ctid = '(0,2)'))
(4 rows)

--Testcase 417:
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
(1 row)

--Testcase 418:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ctid, * FROM ft1 t1 LIMIT 1;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: ctid, c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" LIMIT 1::bigint
(5 rows)

--Testcase 419:
SELECT ctid, * FROM ft1 t1 LIMIT 1;
 ctid  | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-------+----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 (0,1) |  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

-- ===================================================================
-- used in PL/pgSQL function
-- ===================================================================
--Testcase 420:
CREATE OR REPLACE FUNCTION f_test(p_c1 int) RETURNS int AS $$
DECLARE
	v_c1 int;
BEGIN
--Testcase 421:
    SELECT c1 INTO v_c1 FROM ft1 WHERE c1 = p_c1 LIMIT 1;
    PERFORM c1 FROM ft1 WHERE c1 = p_c1 AND p_c1 = v_c1 LIMIT 1;
    RETURN v_c1;
END;
$$ LANGUAGE plpgsql;
--Testcase 422:
SELECT f_test(100);
 f_test 
--------
    100
(1 row)

--Testcase 423:
DROP FUNCTION f_test(int);
-- ===================================================================
-- REINDEX
-- ===================================================================
-- remote table is not created here
--Testcase 424:
CREATE FOREIGN TABLE reindex_foreign (c1 int, c2 int)
  SERVER postgres_srv2 OPTIONS (table_name 'reindex_local');
REINDEX TABLE reindex_foreign; -- error
ERROR:  "reindex_foreign" is not a table or materialized view
REINDEX TABLE CONCURRENTLY reindex_foreign; -- error
ERROR:  "reindex_foreign" is not a table or materialized view
--Testcase 425:
DROP FOREIGN TABLE reindex_foreign;
-- partitions and foreign tables
--Testcase 426:
CREATE TABLE reind_fdw_parent (c1 int) PARTITION BY RANGE (c1);
--Testcase 427:
CREATE TABLE reind_fdw_0_10 PARTITION OF reind_fdw_parent
  FOR VALUES FROM (0) TO (10);
--Testcase 428:
CREATE FOREIGN TABLE reind_fdw_10_20 PARTITION OF reind_fdw_parent
  FOR VALUES FROM (10) TO (20)
  SERVER postgres_srv OPTIONS (table_name 'reind_local_10_20');
REINDEX TABLE reind_fdw_parent; -- ok
REINDEX TABLE CONCURRENTLY reind_fdw_parent; -- ok
--Testcase 429:
DROP TABLE reind_fdw_parent;
-- ===================================================================
-- conversion error
-- ===================================================================
--Testcase 430:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE int;
--Testcase 431:
ALTER FOREIGN TABLE ft1__postgres_srv__0 ALTER COLUMN c8 TYPE int;
--Testcase 432:
SELECT * FROM ft1 ftx(x1,x2,x3,x4,x5,x6,x7,x8) WHERE x1 = 1;  -- ERROR
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: invalid input syntax for type integer: "foo"
--Testcase 433:
SELECT ftx.x1, ft2.c2, ftx.x8 FROM ft1 ftx(x1,x2,x3,x4,x5,x6,x7,x8), ft2
  WHERE ftx.x1 = ft2.c1 AND ftx.x1 = 1; -- ERROR
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: invalid input syntax for type integer: "foo"
--Testcase 434:
SELECT ftx.x1, ft2.c2, ftx FROM ft1 ftx(x1,x2,x3,x4,x5,x6,x7,x8), ft2
  WHERE ftx.x1 = ft2.c1 AND ftx.x1 = 1; -- ERROR
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: invalid input syntax for type integer: "foo"
--Testcase 435:
SELECT sum(c2), array_agg(c8) FROM ft1 GROUP BY c8; -- ERROR
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: invalid input syntax for type integer: "foo"
ANALYZE ft1; -- ERROR
WARNING:  skipping "ft1" --- cannot analyze this foreign table
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE user_enum;
ALTER FOREIGN TABLE ft1__postgres_srv__0 ALTER COLUMN c8 TYPE user_enum;
-- ===================================================================
-- local type can be different from remote type in some cases,
-- in particular if similarly-named operators do equivalent things
-- ===================================================================
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE text;
ALTER FOREIGN TABLE ft1__postgres_srv__0 ALTER COLUMN c8 TYPE text;
--Testcase 1198:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE c8 = 'foo' LIMIT 1;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c8 = 'foo')) LIMIT 1::bigint
(5 rows)

--Testcase 1199:
SELECT * FROM ft1 WHERE c8 = 'foo' LIMIT 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

--Testcase 1200:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE 'foo' = c8 LIMIT 1;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (('foo' = c8)) LIMIT 1::bigint
(5 rows)

--Testcase 1201:
SELECT * FROM ft1 WHERE 'foo' = c8 LIMIT 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

-- we declared c8 to be text locally, but it's still the same type on
-- the remote which will balk if we try to do anything incompatible
-- with that remote type
--Testcase 1202:
SELECT * FROM ft1 WHERE c8 LIKE 'foo' LIMIT 1; -- ERROR
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: operator does not exist: public.user_enum ~~ unknown
--Testcase 1203:
SELECT * FROM ft1 WHERE c8::text LIKE 'foo' LIMIT 1; -- ERROR; cast not pushed down
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: operator does not exist: public.user_enum ~~ unknown
--Testcase 436:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE user_enum;
--Testcase 437:
ALTER FOREIGN TABLE ft1__postgres_srv__0 ALTER COLUMN c8 TYPE user_enum;
-- ===================================================================
-- subtransaction
--  + local/remote error doesn't break cursor
-- ===================================================================
BEGIN;
DECLARE c CURSOR FOR SELECT * FROM ft1 ORDER BY c1;
--Testcase 438:
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

SAVEPOINT s;
ERROR OUT;          -- ERROR
ERROR:  syntax error at or near "ERROR"
LINE 1: ERROR OUT;
        ^
ROLLBACK TO s;
--Testcase 439:
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
(1 row)

SAVEPOINT s;
--Testcase 440:
SELECT * FROM ft1 WHERE 1 / (c1 - 1) > 0;  -- ERROR
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: division by zero
ROLLBACK TO s;
--Testcase 441:
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /postgres_srv/
(1 row)

--Testcase 442:
SELECT * FROM ft1 ORDER BY c1 LIMIT 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

COMMIT;
-- ===================================================================
-- enhanced for transaction/subtransaction
-- ===================================================================
--Testcase 1147:
BEGIN;
--Testcase 1148:
DECLARE c CURSOR FOR SELECT * FROM ft1;
--Testcase 1149:
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

--Testcase 1150:
SAVEPOINT s;
--Testcase 1151:
ERROR OUT;          -- ERROR
ERROR:  syntax error at or near "ERROR"
LINE 1: ERROR OUT;
        ^
--Testcase 1152:
ROLLBACK TO s;
--Testcase 1153:
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
(1 row)

--Testcase 1154:
SAVEPOINT s;
--Testcase 1155:
COMMIT;
--Testcase 1156:
BEGIN;
--Testcase 1157:
SAVEPOINT s;
--Testcase 1158:
DECLARE c1 CURSOR FOR SELECT * FROM ft1 t1;
--Testcase 1159:
ROLLBACK TO s;
--Testcase 1160:
COMMIT;
--Testcase 1161:
BEGIN;
--Testcase 1162:
SAVEPOINT s;
--Testcase 1163:
DECLARE c1 CURSOR FOR SELECT * FROM ft1 t1;
--Testcase 1164:
COMMIT;
--Testcase 1165:
BEGIN;
--Testcase 1166:
DECLARE c CURSOR FOR SELECT * FROM ft1 t1;
--Testcase 1167:
SAVEPOINT s;
--Testcase 1168:
DECLARE c1 CURSOR FOR SELECT * FROM ft1 t1;
--Testcase 1169:
SAVEPOINT s2;
--Testcase 1170:
DECLARE c2 CURSOR FOR SELECT * FROM ft1 t1;
--Testcase 1171:
FETCH c1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

--Testcase 1172:
ERROR OUT;          -- ERROR
ERROR:  syntax error at or near "ERROR"
LINE 1: ERROR OUT;
        ^
--Testcase 1173:
ROLLBACK TO s2;
--Testcase 1174:
FETCH c1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
(1 row)

--Testcase 1175:
ERROR OUT;          -- ERROR
ERROR:  syntax error at or near "ERROR"
LINE 1: ERROR OUT;
        ^
--Testcase 1176:
ROLLBACK TO s;
--Testcase 1177:
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

--Testcase 1178:
COMMIT;
-- test for timeout handler
-- enable timeout
set statement_timeout = 1000;
--Testcase 1179:
BEGIN;
--Testcase 1180:
DECLARE c1 CURSOR FOR SELECT * FROM ft1 t1;
--Testcase 1181:
SAVEPOINT s;
--Testcase 1182:
ERROR OUT;
ERROR:  syntax error at or near "ERROR"
LINE 1: ERROR OUT;
        ^
-- wait to timeout
-- can not call postgres fucntion such as pg_sleep() when transaction abort
-- -> call the shell script
\! sleep 2
--Testcase 1183:
ROLLBACK TO s;
--Testcase 1184:
-- this case can has non-stable result because c1 CURSOR can be done before has any pending request.
--Testcase 1204:
FETCH 1000 FROM c1; -- should fail
ERROR:  PGSpider fail to iterate tuple from child thread
 DETAIL: Child thread pending timeout.
--Testcase 1185:
FETCH c1; -- should fail
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
-- disable timeout
set statement_timeout = 0;
-- ===================================================================
-- test handling of collations
-- ===================================================================
--Testcase 443:
create foreign table ft3 (f1 text collate "C", f2 text, f3 varchar(10), __spd_url text)
  server pgspider_srv;
--Testcase 444:
create foreign table loct3 (f1 text collate "C", f2 text, f3 varchar(10))
  server postgres_srv;
--Testcase 445:
create foreign table ft3__postgres_srv__0 (f1 text collate "C", f2 text, f3 varchar(10))
  server postgres_srv options (table_name 'loct3', use_remote_estimate 'true');
-- can be sent to remote
--Testcase 446:
explain (verbose, costs off) select * from ft3 where f1 = 'foo';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
(4 rows)

--Testcase 447:
explain (verbose, costs off) select * from ft3 where f1 COLLATE "C" = 'foo';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
(4 rows)

--Testcase 448:
explain (verbose, costs off) select * from ft3 where f2 = 'foo';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f2 = 'foo'))
(4 rows)

--Testcase 449:
explain (verbose, costs off) select * from ft3 where f3 = 'foo';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f3 = 'foo'))
(4 rows)

--Testcase 450:
explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.f3 = l.f3 and l.f1 = 'foo';
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Hash Join
   Output: f.f1, f.f2, f.f3, f.__spd_url, l.f1, l.f2, l.f3
   Hash Cond: ((f.f3)::text = (l.f3)::text)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3, f.__spd_url
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT f1, f2, f3 FROM public.loct3
   ->  Hash
         Output: l.f1, l.f2, l.f3
         ->  Foreign Scan on public.loct3 l
               Output: l.f1, l.f2, l.f3
               Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
(12 rows)

-- can't be sent to remote
--Testcase 451:
explain (verbose, costs off) select * from ft3 where f1 COLLATE "POSIX" = 'foo';
                     QUERY PLAN                      
-----------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Filter: ((ft3.f1)::text = 'foo'::text)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(5 rows)

--Testcase 452:
explain (verbose, costs off) select * from ft3 where f1 = 'foo' COLLATE "C";
                     QUERY PLAN                      
-----------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Filter: (ft3.f1 = 'foo'::text COLLATE "C")
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(5 rows)

--Testcase 453:
explain (verbose, costs off) select * from ft3 where f2 COLLATE "C" = 'foo';
                     QUERY PLAN                      
-----------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Filter: ((ft3.f2)::text = 'foo'::text)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(5 rows)

--Testcase 454:
explain (verbose, costs off) select * from ft3 where f2 = 'foo' COLLATE "C";
                     QUERY PLAN                      
-----------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Filter: (ft3.f2 = 'foo'::text COLLATE "C")
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(5 rows)

--Testcase 455:
explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.f3 = l.f3 COLLATE "POSIX" and l.f1 = 'foo';
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Hash Join
   Output: f.f1, f.f2, f.f3, f.__spd_url, l.f1, l.f2, l.f3
   Hash Cond: ((f.f3)::text = (l.f3)::text)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3, f.__spd_url
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT f1, f2, f3 FROM public.loct3
   ->  Hash
         Output: l.f1, l.f2, l.f3
         ->  Foreign Scan on public.loct3 l
               Output: l.f1, l.f2, l.f3
               Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
(12 rows)

-- ===================================================================
-- test writable foreign table stuff
-- ===================================================================
--Testcase 456:
EXPLAIN (verbose, costs off)
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
                                                                                                                    QUERY PLAN                                                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2__postgres_srv__0
   Remote SQL: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   Batch Size: 1
   ->  Subquery Scan on "*SELECT*"
         Output: "*SELECT*"."?column?", "*SELECT*"."?column?_1", NULL::integer, "*SELECT*"."?column?_2", NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10), NULL::user_enum
         ->  Foreign Scan on public.ft2
               Output: (ft2.c1 + 1000), (ft2.c2 + 100), (ft2.c3 || ft2.c3)
               Node: postgres_srv / Status: Alive
                 Limit push-down: yes
                 Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1" LIMIT 20::bigint
(10 rows)

--Testcase 457:
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
--Testcase 458:
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3)
  VALUES (1101,201,'aaa'), (1102,202,'bbb'), (1103,203,'ccc') RETURNING *;
  c1  | c2  | c3  | c4 | c5 | c6 |     c7     | c8 
------+-----+-----+----+----+----+------------+----
 1101 | 201 | aaa |    |    |    | ft2        | 
 1102 | 202 | bbb |    |    |    | ft2        | 
 1103 | 203 | ccc |    |    |    | ft2        | 
(3 rows)

--Testcase 459:
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3) VALUES (1104,204,'ddd'), (1105,205,'eee');
--Testcase 460:
EXPLAIN (verbose, costs off)
UPDATE ft2__postgres_srv__0 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;              -- can be pushed down
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Update on public.ft2__postgres_srv__0
   ->  Foreign Update on public.ft2__postgres_srv__0
         Remote SQL: UPDATE "S 1"."T 1" SET c2 = (c2 + 300), c3 = (c3 || '_update3') WHERE ((("C 1" % 10) = 3))
(3 rows)

--Testcase 461:
UPDATE ft2__postgres_srv__0 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;
--Testcase 462:
EXPLAIN (verbose, costs off)
UPDATE ft2__postgres_srv__0 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;  -- can be pushed down
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2__postgres_srv__0
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   ->  Foreign Update on public.ft2__postgres_srv__0
         Remote SQL: UPDATE "S 1"."T 1" SET c2 = (c2 + 400), c3 = (c3 || '_update7') WHERE ((("C 1" % 10) = 7)) RETURNING "C 1", c2, c3, c4, c5, c6, c7, c8
(4 rows)

--Testcase 463:
UPDATE ft2__postgres_srv__0 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;
  c1  | c2  |         c3         |              c4              |            c5            | c6 |     c7     | c8  
------+-----+--------------------+------------------------------+--------------------------+----+------------+-----
    7 | 407 | 00007_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
   17 | 407 | 00017_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
   27 | 407 | 00027_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
   37 | 407 | 00037_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
   47 | 407 | 00047_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
   57 | 407 | 00057_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
   67 | 407 | 00067_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
   77 | 407 | 00077_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
   87 | 407 | 00087_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
   97 | 407 | 00097_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  107 | 407 | 00107_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  117 | 407 | 00117_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  127 | 407 | 00127_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  137 | 407 | 00137_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  147 | 407 | 00147_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  157 | 407 | 00157_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  167 | 407 | 00167_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  177 | 407 | 00177_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  187 | 407 | 00187_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  197 | 407 | 00197_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  207 | 407 | 00207_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  217 | 407 | 00217_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  227 | 407 | 00227_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  237 | 407 | 00237_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  247 | 407 | 00247_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  257 | 407 | 00257_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  267 | 407 | 00267_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  277 | 407 | 00277_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  287 | 407 | 00287_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  297 | 407 | 00297_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  307 | 407 | 00307_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  317 | 407 | 00317_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  327 | 407 | 00327_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  337 | 407 | 00337_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  347 | 407 | 00347_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  357 | 407 | 00357_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  367 | 407 | 00367_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  377 | 407 | 00377_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  387 | 407 | 00387_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  397 | 407 | 00397_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  407 | 407 | 00407_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  417 | 407 | 00417_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  427 | 407 | 00427_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  437 | 407 | 00437_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  447 | 407 | 00447_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  457 | 407 | 00457_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  467 | 407 | 00467_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  477 | 407 | 00477_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  487 | 407 | 00487_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  497 | 407 | 00497_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  507 | 407 | 00507_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  517 | 407 | 00517_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  527 | 407 | 00527_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  537 | 407 | 00537_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  547 | 407 | 00547_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  557 | 407 | 00557_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  567 | 407 | 00567_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  577 | 407 | 00577_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  587 | 407 | 00587_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  597 | 407 | 00597_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  607 | 407 | 00607_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  617 | 407 | 00617_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  627 | 407 | 00627_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  637 | 407 | 00637_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  647 | 407 | 00647_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  657 | 407 | 00657_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  667 | 407 | 00667_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  677 | 407 | 00677_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  687 | 407 | 00687_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  697 | 407 | 00697_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  707 | 407 | 00707_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  717 | 407 | 00717_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  727 | 407 | 00727_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  737 | 407 | 00737_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  747 | 407 | 00747_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  757 | 407 | 00757_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  767 | 407 | 00767_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  777 | 407 | 00777_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  787 | 407 | 00787_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  797 | 407 | 00797_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  807 | 407 | 00807_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  817 | 407 | 00817_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  827 | 407 | 00827_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  837 | 407 | 00837_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  847 | 407 | 00847_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  857 | 407 | 00857_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  867 | 407 | 00867_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  877 | 407 | 00877_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  887 | 407 | 00887_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  897 | 407 | 00897_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  907 | 407 | 00907_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  917 | 407 | 00917_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  927 | 407 | 00927_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  937 | 407 | 00937_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  947 | 407 | 00947_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  957 | 407 | 00957_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  967 | 407 | 00967_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  977 | 407 | 00977_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  987 | 407 | 00987_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  997 | 407 | 00997_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
 1007 | 507 | 0000700007_update7 |                              |                          |    | ft2        | 
 1017 | 507 | 0001700017_update7 |                              |                          |    | ft2        | 
(102 rows)

--Testcase 464:
EXPLAIN (verbose, costs off)
UPDATE ft2__postgres_srv__0 SET c2 = ft2__postgres_srv__0.c2 + 500, c3 = ft2__postgres_srv__0.c3 || '_update9', c7 = DEFAULT
  FROM ft1 WHERE ft1.c1 = ft2__postgres_srv__0.c2 AND ft1.c1 % 10 = 9;                               -- can be pushed down
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2__postgres_srv__0
   Remote SQL: UPDATE "S 1"."T 1" SET c2 = $2, c3 = $3, c7 = $4 WHERE ctid = $1
   ->  Hash Join
         Output: (ft2__postgres_srv__0.c2 + 500), (ft2__postgres_srv__0.c3 || '_update9'::text), 'ft2       '::character(10), ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.*, ft1.*
         Hash Cond: (ft2__postgres_srv__0.c2 = ft1.c1)
         ->  Foreign Scan on public.ft2__postgres_srv__0
               Output: ft2__postgres_srv__0.c2, ft2__postgres_srv__0.c3, ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.*
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
         ->  Hash
               Output: ft1.*, ft1.c1
               ->  Foreign Scan on public.ft1
                     Output: ft1.*, ft1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((("C 1" % 10) = 9))
(14 rows)

--Testcase 465:
UPDATE ft2__postgres_srv__0 SET c2 = ft2__postgres_srv__0.c2 + 500, c3 = ft2__postgres_srv__0.c3 || '_update9', c7 = DEFAULT
  FROM ft1 WHERE ft1.c1 = ft2__postgres_srv__0.c2 AND ft1.c1 % 10 = 9;
--Testcase 466:
EXPLAIN (verbose, costs off)
  DELETE FROM ft2__postgres_srv__0 WHERE c1 % 10 = 5 RETURNING c1, c4;                               -- can be pushed down
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Delete on public.ft2__postgres_srv__0
   Output: c1, c4
   ->  Foreign Delete on public.ft2__postgres_srv__0
         Remote SQL: DELETE FROM "S 1"."T 1" WHERE ((("C 1" % 10) = 5)) RETURNING "C 1", c4
(4 rows)

--Testcase 467:
DELETE FROM ft2__postgres_srv__0 WHERE c1 % 10 = 5 RETURNING c1, c4;
  c1  |              c4              
------+------------------------------
    5 | Tue Jan 06 00:00:00 1970 PST
   15 | Fri Jan 16 00:00:00 1970 PST
   25 | Mon Jan 26 00:00:00 1970 PST
   35 | Thu Feb 05 00:00:00 1970 PST
   45 | Sun Feb 15 00:00:00 1970 PST
   55 | Wed Feb 25 00:00:00 1970 PST
   65 | Sat Mar 07 00:00:00 1970 PST
   75 | Tue Mar 17 00:00:00 1970 PST
   85 | Fri Mar 27 00:00:00 1970 PST
   95 | Mon Apr 06 00:00:00 1970 PST
  105 | Tue Jan 06 00:00:00 1970 PST
  115 | Fri Jan 16 00:00:00 1970 PST
  125 | Mon Jan 26 00:00:00 1970 PST
  135 | Thu Feb 05 00:00:00 1970 PST
  145 | Sun Feb 15 00:00:00 1970 PST
  155 | Wed Feb 25 00:00:00 1970 PST
  165 | Sat Mar 07 00:00:00 1970 PST
  175 | Tue Mar 17 00:00:00 1970 PST
  185 | Fri Mar 27 00:00:00 1970 PST
  195 | Mon Apr 06 00:00:00 1970 PST
  205 | Tue Jan 06 00:00:00 1970 PST
  215 | Fri Jan 16 00:00:00 1970 PST
  225 | Mon Jan 26 00:00:00 1970 PST
  235 | Thu Feb 05 00:00:00 1970 PST
  245 | Sun Feb 15 00:00:00 1970 PST
  255 | Wed Feb 25 00:00:00 1970 PST
  265 | Sat Mar 07 00:00:00 1970 PST
  275 | Tue Mar 17 00:00:00 1970 PST
  285 | Fri Mar 27 00:00:00 1970 PST
  295 | Mon Apr 06 00:00:00 1970 PST
  305 | Tue Jan 06 00:00:00 1970 PST
  315 | Fri Jan 16 00:00:00 1970 PST
  325 | Mon Jan 26 00:00:00 1970 PST
  335 | Thu Feb 05 00:00:00 1970 PST
  345 | Sun Feb 15 00:00:00 1970 PST
  355 | Wed Feb 25 00:00:00 1970 PST
  365 | Sat Mar 07 00:00:00 1970 PST
  375 | Tue Mar 17 00:00:00 1970 PST
  385 | Fri Mar 27 00:00:00 1970 PST
  395 | Mon Apr 06 00:00:00 1970 PST
  405 | Tue Jan 06 00:00:00 1970 PST
  415 | Fri Jan 16 00:00:00 1970 PST
  425 | Mon Jan 26 00:00:00 1970 PST
  435 | Thu Feb 05 00:00:00 1970 PST
  445 | Sun Feb 15 00:00:00 1970 PST
  455 | Wed Feb 25 00:00:00 1970 PST
  465 | Sat Mar 07 00:00:00 1970 PST
  475 | Tue Mar 17 00:00:00 1970 PST
  485 | Fri Mar 27 00:00:00 1970 PST
  495 | Mon Apr 06 00:00:00 1970 PST
  505 | Tue Jan 06 00:00:00 1970 PST
  515 | Fri Jan 16 00:00:00 1970 PST
  525 | Mon Jan 26 00:00:00 1970 PST
  535 | Thu Feb 05 00:00:00 1970 PST
  545 | Sun Feb 15 00:00:00 1970 PST
  555 | Wed Feb 25 00:00:00 1970 PST
  565 | Sat Mar 07 00:00:00 1970 PST
  575 | Tue Mar 17 00:00:00 1970 PST
  585 | Fri Mar 27 00:00:00 1970 PST
  595 | Mon Apr 06 00:00:00 1970 PST
  605 | Tue Jan 06 00:00:00 1970 PST
  615 | Fri Jan 16 00:00:00 1970 PST
  625 | Mon Jan 26 00:00:00 1970 PST
  635 | Thu Feb 05 00:00:00 1970 PST
  645 | Sun Feb 15 00:00:00 1970 PST
  655 | Wed Feb 25 00:00:00 1970 PST
  665 | Sat Mar 07 00:00:00 1970 PST
  675 | Tue Mar 17 00:00:00 1970 PST
  685 | Fri Mar 27 00:00:00 1970 PST
  695 | Mon Apr 06 00:00:00 1970 PST
  705 | Tue Jan 06 00:00:00 1970 PST
  715 | Fri Jan 16 00:00:00 1970 PST
  725 | Mon Jan 26 00:00:00 1970 PST
  735 | Thu Feb 05 00:00:00 1970 PST
  745 | Sun Feb 15 00:00:00 1970 PST
  755 | Wed Feb 25 00:00:00 1970 PST
  765 | Sat Mar 07 00:00:00 1970 PST
  775 | Tue Mar 17 00:00:00 1970 PST
  785 | Fri Mar 27 00:00:00 1970 PST
  795 | Mon Apr 06 00:00:00 1970 PST
  805 | Tue Jan 06 00:00:00 1970 PST
  815 | Fri Jan 16 00:00:00 1970 PST
  825 | Mon Jan 26 00:00:00 1970 PST
  835 | Thu Feb 05 00:00:00 1970 PST
  845 | Sun Feb 15 00:00:00 1970 PST
  855 | Wed Feb 25 00:00:00 1970 PST
  865 | Sat Mar 07 00:00:00 1970 PST
  875 | Tue Mar 17 00:00:00 1970 PST
  885 | Fri Mar 27 00:00:00 1970 PST
  895 | Mon Apr 06 00:00:00 1970 PST
  905 | Tue Jan 06 00:00:00 1970 PST
  915 | Fri Jan 16 00:00:00 1970 PST
  925 | Mon Jan 26 00:00:00 1970 PST
  935 | Thu Feb 05 00:00:00 1970 PST
  945 | Sun Feb 15 00:00:00 1970 PST
  955 | Wed Feb 25 00:00:00 1970 PST
  965 | Sat Mar 07 00:00:00 1970 PST
  975 | Tue Mar 17 00:00:00 1970 PST
  985 | Fri Mar 27 00:00:00 1970 PST
  995 | Mon Apr 06 00:00:00 1970 PST
 1005 | 
 1015 | 
 1105 | 
(103 rows)

--Testcase 468:
EXPLAIN (verbose, costs off)
DELETE FROM ft2__postgres_srv__0 USING ft1 WHERE ft1.c1 = ft2__postgres_srv__0.c2 AND ft1.c1 % 10 = 2;                -- can be pushed down
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Delete on public.ft2__postgres_srv__0
   Remote SQL: DELETE FROM "S 1"."T 1" WHERE ctid = $1
   ->  Hash Join
         Output: ft2__postgres_srv__0.ctid, ft1.*
         Hash Cond: (ft2__postgres_srv__0.c2 = ft1.c1)
         ->  Foreign Scan on public.ft2__postgres_srv__0
               Output: ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.c2
               Remote SQL: SELECT c2, ctid FROM "S 1"."T 1" FOR UPDATE
         ->  Hash
               Output: ft1.*, ft1.c1
               ->  Foreign Scan on public.ft1
                     Output: ft1.*, ft1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((("C 1" % 10) = 2))
(14 rows)

--Testcase 469:
DELETE FROM ft2__postgres_srv__0 USING ft1 WHERE ft1.c1 = ft2__postgres_srv__0.c2 AND ft1.c1 % 10 = 2;
--Testcase 470:
SELECT c1,c2,c3,c4 FROM ft2 ORDER BY c1;
  c1  | c2  |         c3         |              c4              
------+-----+--------------------+------------------------------
    1 |   1 | 00001              | Fri Jan 02 00:00:00 1970 PST
    3 | 303 | 00003_update3      | Sun Jan 04 00:00:00 1970 PST
    4 |   4 | 00004              | Mon Jan 05 00:00:00 1970 PST
    6 |   6 | 00006              | Wed Jan 07 00:00:00 1970 PST
    7 | 407 | 00007_update7      | Thu Jan 08 00:00:00 1970 PST
    8 |   8 | 00008              | Fri Jan 09 00:00:00 1970 PST
    9 | 509 | 00009_update9      | Sat Jan 10 00:00:00 1970 PST
   10 |   0 | 00010              | Sun Jan 11 00:00:00 1970 PST
   11 |   1 | 00011              | Mon Jan 12 00:00:00 1970 PST
   13 | 303 | 00013_update3      | Wed Jan 14 00:00:00 1970 PST
   14 |   4 | 00014              | Thu Jan 15 00:00:00 1970 PST
   16 |   6 | 00016              | Sat Jan 17 00:00:00 1970 PST
   17 | 407 | 00017_update7      | Sun Jan 18 00:00:00 1970 PST
   18 |   8 | 00018              | Mon Jan 19 00:00:00 1970 PST
   19 | 509 | 00019_update9      | Tue Jan 20 00:00:00 1970 PST
   20 |   0 | 00020              | Wed Jan 21 00:00:00 1970 PST
   21 |   1 | 00021              | Thu Jan 22 00:00:00 1970 PST
   23 | 303 | 00023_update3      | Sat Jan 24 00:00:00 1970 PST
   24 |   4 | 00024              | Sun Jan 25 00:00:00 1970 PST
   26 |   6 | 00026              | Tue Jan 27 00:00:00 1970 PST
   27 | 407 | 00027_update7      | Wed Jan 28 00:00:00 1970 PST
   28 |   8 | 00028              | Thu Jan 29 00:00:00 1970 PST
   29 | 509 | 00029_update9      | Fri Jan 30 00:00:00 1970 PST
   30 |   0 | 00030              | Sat Jan 31 00:00:00 1970 PST
   31 |   1 | 00031              | Sun Feb 01 00:00:00 1970 PST
   33 | 303 | 00033_update3      | Tue Feb 03 00:00:00 1970 PST
   34 |   4 | 00034              | Wed Feb 04 00:00:00 1970 PST
   36 |   6 | 00036              | Fri Feb 06 00:00:00 1970 PST
   37 | 407 | 00037_update7      | Sat Feb 07 00:00:00 1970 PST
   38 |   8 | 00038              | Sun Feb 08 00:00:00 1970 PST
   39 | 509 | 00039_update9      | Mon Feb 09 00:00:00 1970 PST
   40 |   0 | 00040              | Tue Feb 10 00:00:00 1970 PST
   41 |   1 | 00041              | Wed Feb 11 00:00:00 1970 PST
   43 | 303 | 00043_update3      | Fri Feb 13 00:00:00 1970 PST
   44 |   4 | 00044              | Sat Feb 14 00:00:00 1970 PST
   46 |   6 | 00046              | Mon Feb 16 00:00:00 1970 PST
   47 | 407 | 00047_update7      | Tue Feb 17 00:00:00 1970 PST
   48 |   8 | 00048              | Wed Feb 18 00:00:00 1970 PST
   49 | 509 | 00049_update9      | Thu Feb 19 00:00:00 1970 PST
   50 |   0 | 00050              | Fri Feb 20 00:00:00 1970 PST
   51 |   1 | 00051              | Sat Feb 21 00:00:00 1970 PST
   53 | 303 | 00053_update3      | Mon Feb 23 00:00:00 1970 PST
   54 |   4 | 00054              | Tue Feb 24 00:00:00 1970 PST
   56 |   6 | 00056              | Thu Feb 26 00:00:00 1970 PST
   57 | 407 | 00057_update7      | Fri Feb 27 00:00:00 1970 PST
   58 |   8 | 00058              | Sat Feb 28 00:00:00 1970 PST
   59 | 509 | 00059_update9      | Sun Mar 01 00:00:00 1970 PST
   60 |   0 | 00060              | Mon Mar 02 00:00:00 1970 PST
   61 |   1 | 00061              | Tue Mar 03 00:00:00 1970 PST
   63 | 303 | 00063_update3      | Thu Mar 05 00:00:00 1970 PST
   64 |   4 | 00064              | Fri Mar 06 00:00:00 1970 PST
   66 |   6 | 00066              | Sun Mar 08 00:00:00 1970 PST
   67 | 407 | 00067_update7      | Mon Mar 09 00:00:00 1970 PST
   68 |   8 | 00068              | Tue Mar 10 00:00:00 1970 PST
   69 | 509 | 00069_update9      | Wed Mar 11 00:00:00 1970 PST
   70 |   0 | 00070              | Thu Mar 12 00:00:00 1970 PST
   71 |   1 | 00071              | Fri Mar 13 00:00:00 1970 PST
   73 | 303 | 00073_update3      | Sun Mar 15 00:00:00 1970 PST
   74 |   4 | 00074              | Mon Mar 16 00:00:00 1970 PST
   76 |   6 | 00076              | Wed Mar 18 00:00:00 1970 PST
   77 | 407 | 00077_update7      | Thu Mar 19 00:00:00 1970 PST
   78 |   8 | 00078              | Fri Mar 20 00:00:00 1970 PST
   79 | 509 | 00079_update9      | Sat Mar 21 00:00:00 1970 PST
   80 |   0 | 00080              | Sun Mar 22 00:00:00 1970 PST
   81 |   1 | 00081              | Mon Mar 23 00:00:00 1970 PST
   83 | 303 | 00083_update3      | Wed Mar 25 00:00:00 1970 PST
   84 |   4 | 00084              | Thu Mar 26 00:00:00 1970 PST
   86 |   6 | 00086              | Sat Mar 28 00:00:00 1970 PST
   87 | 407 | 00087_update7      | Sun Mar 29 00:00:00 1970 PST
   88 |   8 | 00088              | Mon Mar 30 00:00:00 1970 PST
   89 | 509 | 00089_update9      | Tue Mar 31 00:00:00 1970 PST
   90 |   0 | 00090              | Wed Apr 01 00:00:00 1970 PST
   91 |   1 | 00091              | Thu Apr 02 00:00:00 1970 PST
   93 | 303 | 00093_update3      | Sat Apr 04 00:00:00 1970 PST
   94 |   4 | 00094              | Sun Apr 05 00:00:00 1970 PST
   96 |   6 | 00096              | Tue Apr 07 00:00:00 1970 PST
   97 | 407 | 00097_update7      | Wed Apr 08 00:00:00 1970 PST
   98 |   8 | 00098              | Thu Apr 09 00:00:00 1970 PST
   99 | 509 | 00099_update9      | Fri Apr 10 00:00:00 1970 PST
  100 |   0 | 00100              | Thu Jan 01 00:00:00 1970 PST
  101 |   1 | 00101              | Fri Jan 02 00:00:00 1970 PST
  103 | 303 | 00103_update3      | Sun Jan 04 00:00:00 1970 PST
  104 |   4 | 00104              | Mon Jan 05 00:00:00 1970 PST
  106 |   6 | 00106              | Wed Jan 07 00:00:00 1970 PST
  107 | 407 | 00107_update7      | Thu Jan 08 00:00:00 1970 PST
  108 |   8 | 00108              | Fri Jan 09 00:00:00 1970 PST
  109 | 509 | 00109_update9      | Sat Jan 10 00:00:00 1970 PST
  110 |   0 | 00110              | Sun Jan 11 00:00:00 1970 PST
  111 |   1 | 00111              | Mon Jan 12 00:00:00 1970 PST
  113 | 303 | 00113_update3      | Wed Jan 14 00:00:00 1970 PST
  114 |   4 | 00114              | Thu Jan 15 00:00:00 1970 PST
  116 |   6 | 00116              | Sat Jan 17 00:00:00 1970 PST
  117 | 407 | 00117_update7      | Sun Jan 18 00:00:00 1970 PST
  118 |   8 | 00118              | Mon Jan 19 00:00:00 1970 PST
  119 | 509 | 00119_update9      | Tue Jan 20 00:00:00 1970 PST
  120 |   0 | 00120              | Wed Jan 21 00:00:00 1970 PST
  121 |   1 | 00121              | Thu Jan 22 00:00:00 1970 PST
  123 | 303 | 00123_update3      | Sat Jan 24 00:00:00 1970 PST
  124 |   4 | 00124              | Sun Jan 25 00:00:00 1970 PST
  126 |   6 | 00126              | Tue Jan 27 00:00:00 1970 PST
  127 | 407 | 00127_update7      | Wed Jan 28 00:00:00 1970 PST
  128 |   8 | 00128              | Thu Jan 29 00:00:00 1970 PST
  129 | 509 | 00129_update9      | Fri Jan 30 00:00:00 1970 PST
  130 |   0 | 00130              | Sat Jan 31 00:00:00 1970 PST
  131 |   1 | 00131              | Sun Feb 01 00:00:00 1970 PST
  133 | 303 | 00133_update3      | Tue Feb 03 00:00:00 1970 PST
  134 |   4 | 00134              | Wed Feb 04 00:00:00 1970 PST
  136 |   6 | 00136              | Fri Feb 06 00:00:00 1970 PST
  137 | 407 | 00137_update7      | Sat Feb 07 00:00:00 1970 PST
  138 |   8 | 00138              | Sun Feb 08 00:00:00 1970 PST
  139 | 509 | 00139_update9      | Mon Feb 09 00:00:00 1970 PST
  140 |   0 | 00140              | Tue Feb 10 00:00:00 1970 PST
  141 |   1 | 00141              | Wed Feb 11 00:00:00 1970 PST
  143 | 303 | 00143_update3      | Fri Feb 13 00:00:00 1970 PST
  144 |   4 | 00144              | Sat Feb 14 00:00:00 1970 PST
  146 |   6 | 00146              | Mon Feb 16 00:00:00 1970 PST
  147 | 407 | 00147_update7      | Tue Feb 17 00:00:00 1970 PST
  148 |   8 | 00148              | Wed Feb 18 00:00:00 1970 PST
  149 | 509 | 00149_update9      | Thu Feb 19 00:00:00 1970 PST
  150 |   0 | 00150              | Fri Feb 20 00:00:00 1970 PST
  151 |   1 | 00151              | Sat Feb 21 00:00:00 1970 PST
  153 | 303 | 00153_update3      | Mon Feb 23 00:00:00 1970 PST
  154 |   4 | 00154              | Tue Feb 24 00:00:00 1970 PST
  156 |   6 | 00156              | Thu Feb 26 00:00:00 1970 PST
  157 | 407 | 00157_update7      | Fri Feb 27 00:00:00 1970 PST
  158 |   8 | 00158              | Sat Feb 28 00:00:00 1970 PST
  159 | 509 | 00159_update9      | Sun Mar 01 00:00:00 1970 PST
  160 |   0 | 00160              | Mon Mar 02 00:00:00 1970 PST
  161 |   1 | 00161              | Tue Mar 03 00:00:00 1970 PST
  163 | 303 | 00163_update3      | Thu Mar 05 00:00:00 1970 PST
  164 |   4 | 00164              | Fri Mar 06 00:00:00 1970 PST
  166 |   6 | 00166              | Sun Mar 08 00:00:00 1970 PST
  167 | 407 | 00167_update7      | Mon Mar 09 00:00:00 1970 PST
  168 |   8 | 00168              | Tue Mar 10 00:00:00 1970 PST
  169 | 509 | 00169_update9      | Wed Mar 11 00:00:00 1970 PST
  170 |   0 | 00170              | Thu Mar 12 00:00:00 1970 PST
  171 |   1 | 00171              | Fri Mar 13 00:00:00 1970 PST
  173 | 303 | 00173_update3      | Sun Mar 15 00:00:00 1970 PST
  174 |   4 | 00174              | Mon Mar 16 00:00:00 1970 PST
  176 |   6 | 00176              | Wed Mar 18 00:00:00 1970 PST
  177 | 407 | 00177_update7      | Thu Mar 19 00:00:00 1970 PST
  178 |   8 | 00178              | Fri Mar 20 00:00:00 1970 PST
  179 | 509 | 00179_update9      | Sat Mar 21 00:00:00 1970 PST
  180 |   0 | 00180              | Sun Mar 22 00:00:00 1970 PST
  181 |   1 | 00181              | Mon Mar 23 00:00:00 1970 PST
  183 | 303 | 00183_update3      | Wed Mar 25 00:00:00 1970 PST
  184 |   4 | 00184              | Thu Mar 26 00:00:00 1970 PST
  186 |   6 | 00186              | Sat Mar 28 00:00:00 1970 PST
  187 | 407 | 00187_update7      | Sun Mar 29 00:00:00 1970 PST
  188 |   8 | 00188              | Mon Mar 30 00:00:00 1970 PST
  189 | 509 | 00189_update9      | Tue Mar 31 00:00:00 1970 PST
  190 |   0 | 00190              | Wed Apr 01 00:00:00 1970 PST
  191 |   1 | 00191              | Thu Apr 02 00:00:00 1970 PST
  193 | 303 | 00193_update3      | Sat Apr 04 00:00:00 1970 PST
  194 |   4 | 00194              | Sun Apr 05 00:00:00 1970 PST
  196 |   6 | 00196              | Tue Apr 07 00:00:00 1970 PST
  197 | 407 | 00197_update7      | Wed Apr 08 00:00:00 1970 PST
  198 |   8 | 00198              | Thu Apr 09 00:00:00 1970 PST
  199 | 509 | 00199_update9      | Fri Apr 10 00:00:00 1970 PST
  200 |   0 | 00200              | Thu Jan 01 00:00:00 1970 PST
  201 |   1 | 00201              | Fri Jan 02 00:00:00 1970 PST
  203 | 303 | 00203_update3      | Sun Jan 04 00:00:00 1970 PST
  204 |   4 | 00204              | Mon Jan 05 00:00:00 1970 PST
  206 |   6 | 00206              | Wed Jan 07 00:00:00 1970 PST
  207 | 407 | 00207_update7      | Thu Jan 08 00:00:00 1970 PST
  208 |   8 | 00208              | Fri Jan 09 00:00:00 1970 PST
  209 | 509 | 00209_update9      | Sat Jan 10 00:00:00 1970 PST
  210 |   0 | 00210              | Sun Jan 11 00:00:00 1970 PST
  211 |   1 | 00211              | Mon Jan 12 00:00:00 1970 PST
  213 | 303 | 00213_update3      | Wed Jan 14 00:00:00 1970 PST
  214 |   4 | 00214              | Thu Jan 15 00:00:00 1970 PST
  216 |   6 | 00216              | Sat Jan 17 00:00:00 1970 PST
  217 | 407 | 00217_update7      | Sun Jan 18 00:00:00 1970 PST
  218 |   8 | 00218              | Mon Jan 19 00:00:00 1970 PST
  219 | 509 | 00219_update9      | Tue Jan 20 00:00:00 1970 PST
  220 |   0 | 00220              | Wed Jan 21 00:00:00 1970 PST
  221 |   1 | 00221              | Thu Jan 22 00:00:00 1970 PST
  223 | 303 | 00223_update3      | Sat Jan 24 00:00:00 1970 PST
  224 |   4 | 00224              | Sun Jan 25 00:00:00 1970 PST
  226 |   6 | 00226              | Tue Jan 27 00:00:00 1970 PST
  227 | 407 | 00227_update7      | Wed Jan 28 00:00:00 1970 PST
  228 |   8 | 00228              | Thu Jan 29 00:00:00 1970 PST
  229 | 509 | 00229_update9      | Fri Jan 30 00:00:00 1970 PST
  230 |   0 | 00230              | Sat Jan 31 00:00:00 1970 PST
  231 |   1 | 00231              | Sun Feb 01 00:00:00 1970 PST
  233 | 303 | 00233_update3      | Tue Feb 03 00:00:00 1970 PST
  234 |   4 | 00234              | Wed Feb 04 00:00:00 1970 PST
  236 |   6 | 00236              | Fri Feb 06 00:00:00 1970 PST
  237 | 407 | 00237_update7      | Sat Feb 07 00:00:00 1970 PST
  238 |   8 | 00238              | Sun Feb 08 00:00:00 1970 PST
  239 | 509 | 00239_update9      | Mon Feb 09 00:00:00 1970 PST
  240 |   0 | 00240              | Tue Feb 10 00:00:00 1970 PST
  241 |   1 | 00241              | Wed Feb 11 00:00:00 1970 PST
  243 | 303 | 00243_update3      | Fri Feb 13 00:00:00 1970 PST
  244 |   4 | 00244              | Sat Feb 14 00:00:00 1970 PST
  246 |   6 | 00246              | Mon Feb 16 00:00:00 1970 PST
  247 | 407 | 00247_update7      | Tue Feb 17 00:00:00 1970 PST
  248 |   8 | 00248              | Wed Feb 18 00:00:00 1970 PST
  249 | 509 | 00249_update9      | Thu Feb 19 00:00:00 1970 PST
  250 |   0 | 00250              | Fri Feb 20 00:00:00 1970 PST
  251 |   1 | 00251              | Sat Feb 21 00:00:00 1970 PST
  253 | 303 | 00253_update3      | Mon Feb 23 00:00:00 1970 PST
  254 |   4 | 00254              | Tue Feb 24 00:00:00 1970 PST
  256 |   6 | 00256              | Thu Feb 26 00:00:00 1970 PST
  257 | 407 | 00257_update7      | Fri Feb 27 00:00:00 1970 PST
  258 |   8 | 00258              | Sat Feb 28 00:00:00 1970 PST
  259 | 509 | 00259_update9      | Sun Mar 01 00:00:00 1970 PST
  260 |   0 | 00260              | Mon Mar 02 00:00:00 1970 PST
  261 |   1 | 00261              | Tue Mar 03 00:00:00 1970 PST
  263 | 303 | 00263_update3      | Thu Mar 05 00:00:00 1970 PST
  264 |   4 | 00264              | Fri Mar 06 00:00:00 1970 PST
  266 |   6 | 00266              | Sun Mar 08 00:00:00 1970 PST
  267 | 407 | 00267_update7      | Mon Mar 09 00:00:00 1970 PST
  268 |   8 | 00268              | Tue Mar 10 00:00:00 1970 PST
  269 | 509 | 00269_update9      | Wed Mar 11 00:00:00 1970 PST
  270 |   0 | 00270              | Thu Mar 12 00:00:00 1970 PST
  271 |   1 | 00271              | Fri Mar 13 00:00:00 1970 PST
  273 | 303 | 00273_update3      | Sun Mar 15 00:00:00 1970 PST
  274 |   4 | 00274              | Mon Mar 16 00:00:00 1970 PST
  276 |   6 | 00276              | Wed Mar 18 00:00:00 1970 PST
  277 | 407 | 00277_update7      | Thu Mar 19 00:00:00 1970 PST
  278 |   8 | 00278              | Fri Mar 20 00:00:00 1970 PST
  279 | 509 | 00279_update9      | Sat Mar 21 00:00:00 1970 PST
  280 |   0 | 00280              | Sun Mar 22 00:00:00 1970 PST
  281 |   1 | 00281              | Mon Mar 23 00:00:00 1970 PST
  283 | 303 | 00283_update3      | Wed Mar 25 00:00:00 1970 PST
  284 |   4 | 00284              | Thu Mar 26 00:00:00 1970 PST
  286 |   6 | 00286              | Sat Mar 28 00:00:00 1970 PST
  287 | 407 | 00287_update7      | Sun Mar 29 00:00:00 1970 PST
  288 |   8 | 00288              | Mon Mar 30 00:00:00 1970 PST
  289 | 509 | 00289_update9      | Tue Mar 31 00:00:00 1970 PST
  290 |   0 | 00290              | Wed Apr 01 00:00:00 1970 PST
  291 |   1 | 00291              | Thu Apr 02 00:00:00 1970 PST
  293 | 303 | 00293_update3      | Sat Apr 04 00:00:00 1970 PST
  294 |   4 | 00294              | Sun Apr 05 00:00:00 1970 PST
  296 |   6 | 00296              | Tue Apr 07 00:00:00 1970 PST
  297 | 407 | 00297_update7      | Wed Apr 08 00:00:00 1970 PST
  298 |   8 | 00298              | Thu Apr 09 00:00:00 1970 PST
  299 | 509 | 00299_update9      | Fri Apr 10 00:00:00 1970 PST
  300 |   0 | 00300              | Thu Jan 01 00:00:00 1970 PST
  301 |   1 | 00301              | Fri Jan 02 00:00:00 1970 PST
  303 | 303 | 00303_update3      | Sun Jan 04 00:00:00 1970 PST
  304 |   4 | 00304              | Mon Jan 05 00:00:00 1970 PST
  306 |   6 | 00306              | Wed Jan 07 00:00:00 1970 PST
  307 | 407 | 00307_update7      | Thu Jan 08 00:00:00 1970 PST
  308 |   8 | 00308              | Fri Jan 09 00:00:00 1970 PST
  309 | 509 | 00309_update9      | Sat Jan 10 00:00:00 1970 PST
  310 |   0 | 00310              | Sun Jan 11 00:00:00 1970 PST
  311 |   1 | 00311              | Mon Jan 12 00:00:00 1970 PST
  313 | 303 | 00313_update3      | Wed Jan 14 00:00:00 1970 PST
  314 |   4 | 00314              | Thu Jan 15 00:00:00 1970 PST
  316 |   6 | 00316              | Sat Jan 17 00:00:00 1970 PST
  317 | 407 | 00317_update7      | Sun Jan 18 00:00:00 1970 PST
  318 |   8 | 00318              | Mon Jan 19 00:00:00 1970 PST
  319 | 509 | 00319_update9      | Tue Jan 20 00:00:00 1970 PST
  320 |   0 | 00320              | Wed Jan 21 00:00:00 1970 PST
  321 |   1 | 00321              | Thu Jan 22 00:00:00 1970 PST
  323 | 303 | 00323_update3      | Sat Jan 24 00:00:00 1970 PST
  324 |   4 | 00324              | Sun Jan 25 00:00:00 1970 PST
  326 |   6 | 00326              | Tue Jan 27 00:00:00 1970 PST
  327 | 407 | 00327_update7      | Wed Jan 28 00:00:00 1970 PST
  328 |   8 | 00328              | Thu Jan 29 00:00:00 1970 PST
  329 | 509 | 00329_update9      | Fri Jan 30 00:00:00 1970 PST
  330 |   0 | 00330              | Sat Jan 31 00:00:00 1970 PST
  331 |   1 | 00331              | Sun Feb 01 00:00:00 1970 PST
  333 | 303 | 00333_update3      | Tue Feb 03 00:00:00 1970 PST
  334 |   4 | 00334              | Wed Feb 04 00:00:00 1970 PST
  336 |   6 | 00336              | Fri Feb 06 00:00:00 1970 PST
  337 | 407 | 00337_update7      | Sat Feb 07 00:00:00 1970 PST
  338 |   8 | 00338              | Sun Feb 08 00:00:00 1970 PST
  339 | 509 | 00339_update9      | Mon Feb 09 00:00:00 1970 PST
  340 |   0 | 00340              | Tue Feb 10 00:00:00 1970 PST
  341 |   1 | 00341              | Wed Feb 11 00:00:00 1970 PST
  343 | 303 | 00343_update3      | Fri Feb 13 00:00:00 1970 PST
  344 |   4 | 00344              | Sat Feb 14 00:00:00 1970 PST
  346 |   6 | 00346              | Mon Feb 16 00:00:00 1970 PST
  347 | 407 | 00347_update7      | Tue Feb 17 00:00:00 1970 PST
  348 |   8 | 00348              | Wed Feb 18 00:00:00 1970 PST
  349 | 509 | 00349_update9      | Thu Feb 19 00:00:00 1970 PST
  350 |   0 | 00350              | Fri Feb 20 00:00:00 1970 PST
  351 |   1 | 00351              | Sat Feb 21 00:00:00 1970 PST
  353 | 303 | 00353_update3      | Mon Feb 23 00:00:00 1970 PST
  354 |   4 | 00354              | Tue Feb 24 00:00:00 1970 PST
  356 |   6 | 00356              | Thu Feb 26 00:00:00 1970 PST
  357 | 407 | 00357_update7      | Fri Feb 27 00:00:00 1970 PST
  358 |   8 | 00358              | Sat Feb 28 00:00:00 1970 PST
  359 | 509 | 00359_update9      | Sun Mar 01 00:00:00 1970 PST
  360 |   0 | 00360              | Mon Mar 02 00:00:00 1970 PST
  361 |   1 | 00361              | Tue Mar 03 00:00:00 1970 PST
  363 | 303 | 00363_update3      | Thu Mar 05 00:00:00 1970 PST
  364 |   4 | 00364              | Fri Mar 06 00:00:00 1970 PST
  366 |   6 | 00366              | Sun Mar 08 00:00:00 1970 PST
  367 | 407 | 00367_update7      | Mon Mar 09 00:00:00 1970 PST
  368 |   8 | 00368              | Tue Mar 10 00:00:00 1970 PST
  369 | 509 | 00369_update9      | Wed Mar 11 00:00:00 1970 PST
  370 |   0 | 00370              | Thu Mar 12 00:00:00 1970 PST
  371 |   1 | 00371              | Fri Mar 13 00:00:00 1970 PST
  373 | 303 | 00373_update3      | Sun Mar 15 00:00:00 1970 PST
  374 |   4 | 00374              | Mon Mar 16 00:00:00 1970 PST
  376 |   6 | 00376              | Wed Mar 18 00:00:00 1970 PST
  377 | 407 | 00377_update7      | Thu Mar 19 00:00:00 1970 PST
  378 |   8 | 00378              | Fri Mar 20 00:00:00 1970 PST
  379 | 509 | 00379_update9      | Sat Mar 21 00:00:00 1970 PST
  380 |   0 | 00380              | Sun Mar 22 00:00:00 1970 PST
  381 |   1 | 00381              | Mon Mar 23 00:00:00 1970 PST
  383 | 303 | 00383_update3      | Wed Mar 25 00:00:00 1970 PST
  384 |   4 | 00384              | Thu Mar 26 00:00:00 1970 PST
  386 |   6 | 00386              | Sat Mar 28 00:00:00 1970 PST
  387 | 407 | 00387_update7      | Sun Mar 29 00:00:00 1970 PST
  388 |   8 | 00388              | Mon Mar 30 00:00:00 1970 PST
  389 | 509 | 00389_update9      | Tue Mar 31 00:00:00 1970 PST
  390 |   0 | 00390              | Wed Apr 01 00:00:00 1970 PST
  391 |   1 | 00391              | Thu Apr 02 00:00:00 1970 PST
  393 | 303 | 00393_update3      | Sat Apr 04 00:00:00 1970 PST
  394 |   4 | 00394              | Sun Apr 05 00:00:00 1970 PST
  396 |   6 | 00396              | Tue Apr 07 00:00:00 1970 PST
  397 | 407 | 00397_update7      | Wed Apr 08 00:00:00 1970 PST
  398 |   8 | 00398              | Thu Apr 09 00:00:00 1970 PST
  399 | 509 | 00399_update9      | Fri Apr 10 00:00:00 1970 PST
  400 |   0 | 00400              | Thu Jan 01 00:00:00 1970 PST
  401 |   1 | 00401              | Fri Jan 02 00:00:00 1970 PST
  403 | 303 | 00403_update3      | Sun Jan 04 00:00:00 1970 PST
  404 |   4 | 00404              | Mon Jan 05 00:00:00 1970 PST
  406 |   6 | 00406              | Wed Jan 07 00:00:00 1970 PST
  407 | 407 | 00407_update7      | Thu Jan 08 00:00:00 1970 PST
  408 |   8 | 00408              | Fri Jan 09 00:00:00 1970 PST
  409 | 509 | 00409_update9      | Sat Jan 10 00:00:00 1970 PST
  410 |   0 | 00410              | Sun Jan 11 00:00:00 1970 PST
  411 |   1 | 00411              | Mon Jan 12 00:00:00 1970 PST
  413 | 303 | 00413_update3      | Wed Jan 14 00:00:00 1970 PST
  414 |   4 | 00414              | Thu Jan 15 00:00:00 1970 PST
  416 |   6 | 00416              | Sat Jan 17 00:00:00 1970 PST
  417 | 407 | 00417_update7      | Sun Jan 18 00:00:00 1970 PST
  418 |   8 | 00418              | Mon Jan 19 00:00:00 1970 PST
  419 | 509 | 00419_update9      | Tue Jan 20 00:00:00 1970 PST
  420 |   0 | 00420              | Wed Jan 21 00:00:00 1970 PST
  421 |   1 | 00421              | Thu Jan 22 00:00:00 1970 PST
  423 | 303 | 00423_update3      | Sat Jan 24 00:00:00 1970 PST
  424 |   4 | 00424              | Sun Jan 25 00:00:00 1970 PST
  426 |   6 | 00426              | Tue Jan 27 00:00:00 1970 PST
  427 | 407 | 00427_update7      | Wed Jan 28 00:00:00 1970 PST
  428 |   8 | 00428              | Thu Jan 29 00:00:00 1970 PST
  429 | 509 | 00429_update9      | Fri Jan 30 00:00:00 1970 PST
  430 |   0 | 00430              | Sat Jan 31 00:00:00 1970 PST
  431 |   1 | 00431              | Sun Feb 01 00:00:00 1970 PST
  433 | 303 | 00433_update3      | Tue Feb 03 00:00:00 1970 PST
  434 |   4 | 00434              | Wed Feb 04 00:00:00 1970 PST
  436 |   6 | 00436              | Fri Feb 06 00:00:00 1970 PST
  437 | 407 | 00437_update7      | Sat Feb 07 00:00:00 1970 PST
  438 |   8 | 00438              | Sun Feb 08 00:00:00 1970 PST
  439 | 509 | 00439_update9      | Mon Feb 09 00:00:00 1970 PST
  440 |   0 | 00440              | Tue Feb 10 00:00:00 1970 PST
  441 |   1 | 00441              | Wed Feb 11 00:00:00 1970 PST
  443 | 303 | 00443_update3      | Fri Feb 13 00:00:00 1970 PST
  444 |   4 | 00444              | Sat Feb 14 00:00:00 1970 PST
  446 |   6 | 00446              | Mon Feb 16 00:00:00 1970 PST
  447 | 407 | 00447_update7      | Tue Feb 17 00:00:00 1970 PST
  448 |   8 | 00448              | Wed Feb 18 00:00:00 1970 PST
  449 | 509 | 00449_update9      | Thu Feb 19 00:00:00 1970 PST
  450 |   0 | 00450              | Fri Feb 20 00:00:00 1970 PST
  451 |   1 | 00451              | Sat Feb 21 00:00:00 1970 PST
  453 | 303 | 00453_update3      | Mon Feb 23 00:00:00 1970 PST
  454 |   4 | 00454              | Tue Feb 24 00:00:00 1970 PST
  456 |   6 | 00456              | Thu Feb 26 00:00:00 1970 PST
  457 | 407 | 00457_update7      | Fri Feb 27 00:00:00 1970 PST
  458 |   8 | 00458              | Sat Feb 28 00:00:00 1970 PST
  459 | 509 | 00459_update9      | Sun Mar 01 00:00:00 1970 PST
  460 |   0 | 00460              | Mon Mar 02 00:00:00 1970 PST
  461 |   1 | 00461              | Tue Mar 03 00:00:00 1970 PST
  463 | 303 | 00463_update3      | Thu Mar 05 00:00:00 1970 PST
  464 |   4 | 00464              | Fri Mar 06 00:00:00 1970 PST
  466 |   6 | 00466              | Sun Mar 08 00:00:00 1970 PST
  467 | 407 | 00467_update7      | Mon Mar 09 00:00:00 1970 PST
  468 |   8 | 00468              | Tue Mar 10 00:00:00 1970 PST
  469 | 509 | 00469_update9      | Wed Mar 11 00:00:00 1970 PST
  470 |   0 | 00470              | Thu Mar 12 00:00:00 1970 PST
  471 |   1 | 00471              | Fri Mar 13 00:00:00 1970 PST
  473 | 303 | 00473_update3      | Sun Mar 15 00:00:00 1970 PST
  474 |   4 | 00474              | Mon Mar 16 00:00:00 1970 PST
  476 |   6 | 00476              | Wed Mar 18 00:00:00 1970 PST
  477 | 407 | 00477_update7      | Thu Mar 19 00:00:00 1970 PST
  478 |   8 | 00478              | Fri Mar 20 00:00:00 1970 PST
  479 | 509 | 00479_update9      | Sat Mar 21 00:00:00 1970 PST
  480 |   0 | 00480              | Sun Mar 22 00:00:00 1970 PST
  481 |   1 | 00481              | Mon Mar 23 00:00:00 1970 PST
  483 | 303 | 00483_update3      | Wed Mar 25 00:00:00 1970 PST
  484 |   4 | 00484              | Thu Mar 26 00:00:00 1970 PST
  486 |   6 | 00486              | Sat Mar 28 00:00:00 1970 PST
  487 | 407 | 00487_update7      | Sun Mar 29 00:00:00 1970 PST
  488 |   8 | 00488              | Mon Mar 30 00:00:00 1970 PST
  489 | 509 | 00489_update9      | Tue Mar 31 00:00:00 1970 PST
  490 |   0 | 00490              | Wed Apr 01 00:00:00 1970 PST
  491 |   1 | 00491              | Thu Apr 02 00:00:00 1970 PST
  493 | 303 | 00493_update3      | Sat Apr 04 00:00:00 1970 PST
  494 |   4 | 00494              | Sun Apr 05 00:00:00 1970 PST
  496 |   6 | 00496              | Tue Apr 07 00:00:00 1970 PST
  497 | 407 | 00497_update7      | Wed Apr 08 00:00:00 1970 PST
  498 |   8 | 00498              | Thu Apr 09 00:00:00 1970 PST
  499 | 509 | 00499_update9      | Fri Apr 10 00:00:00 1970 PST
  500 |   0 | 00500              | Thu Jan 01 00:00:00 1970 PST
  501 |   1 | 00501              | Fri Jan 02 00:00:00 1970 PST
  503 | 303 | 00503_update3      | Sun Jan 04 00:00:00 1970 PST
  504 |   4 | 00504              | Mon Jan 05 00:00:00 1970 PST
  506 |   6 | 00506              | Wed Jan 07 00:00:00 1970 PST
  507 | 407 | 00507_update7      | Thu Jan 08 00:00:00 1970 PST
  508 |   8 | 00508              | Fri Jan 09 00:00:00 1970 PST
  509 | 509 | 00509_update9      | Sat Jan 10 00:00:00 1970 PST
  510 |   0 | 00510              | Sun Jan 11 00:00:00 1970 PST
  511 |   1 | 00511              | Mon Jan 12 00:00:00 1970 PST
  513 | 303 | 00513_update3      | Wed Jan 14 00:00:00 1970 PST
  514 |   4 | 00514              | Thu Jan 15 00:00:00 1970 PST
  516 |   6 | 00516              | Sat Jan 17 00:00:00 1970 PST
  517 | 407 | 00517_update7      | Sun Jan 18 00:00:00 1970 PST
  518 |   8 | 00518              | Mon Jan 19 00:00:00 1970 PST
  519 | 509 | 00519_update9      | Tue Jan 20 00:00:00 1970 PST
  520 |   0 | 00520              | Wed Jan 21 00:00:00 1970 PST
  521 |   1 | 00521              | Thu Jan 22 00:00:00 1970 PST
  523 | 303 | 00523_update3      | Sat Jan 24 00:00:00 1970 PST
  524 |   4 | 00524              | Sun Jan 25 00:00:00 1970 PST
  526 |   6 | 00526              | Tue Jan 27 00:00:00 1970 PST
  527 | 407 | 00527_update7      | Wed Jan 28 00:00:00 1970 PST
  528 |   8 | 00528              | Thu Jan 29 00:00:00 1970 PST
  529 | 509 | 00529_update9      | Fri Jan 30 00:00:00 1970 PST
  530 |   0 | 00530              | Sat Jan 31 00:00:00 1970 PST
  531 |   1 | 00531              | Sun Feb 01 00:00:00 1970 PST
  533 | 303 | 00533_update3      | Tue Feb 03 00:00:00 1970 PST
  534 |   4 | 00534              | Wed Feb 04 00:00:00 1970 PST
  536 |   6 | 00536              | Fri Feb 06 00:00:00 1970 PST
  537 | 407 | 00537_update7      | Sat Feb 07 00:00:00 1970 PST
  538 |   8 | 00538              | Sun Feb 08 00:00:00 1970 PST
  539 | 509 | 00539_update9      | Mon Feb 09 00:00:00 1970 PST
  540 |   0 | 00540              | Tue Feb 10 00:00:00 1970 PST
  541 |   1 | 00541              | Wed Feb 11 00:00:00 1970 PST
  543 | 303 | 00543_update3      | Fri Feb 13 00:00:00 1970 PST
  544 |   4 | 00544              | Sat Feb 14 00:00:00 1970 PST
  546 |   6 | 00546              | Mon Feb 16 00:00:00 1970 PST
  547 | 407 | 00547_update7      | Tue Feb 17 00:00:00 1970 PST
  548 |   8 | 00548              | Wed Feb 18 00:00:00 1970 PST
  549 | 509 | 00549_update9      | Thu Feb 19 00:00:00 1970 PST
  550 |   0 | 00550              | Fri Feb 20 00:00:00 1970 PST
  551 |   1 | 00551              | Sat Feb 21 00:00:00 1970 PST
  553 | 303 | 00553_update3      | Mon Feb 23 00:00:00 1970 PST
  554 |   4 | 00554              | Tue Feb 24 00:00:00 1970 PST
  556 |   6 | 00556              | Thu Feb 26 00:00:00 1970 PST
  557 | 407 | 00557_update7      | Fri Feb 27 00:00:00 1970 PST
  558 |   8 | 00558              | Sat Feb 28 00:00:00 1970 PST
  559 | 509 | 00559_update9      | Sun Mar 01 00:00:00 1970 PST
  560 |   0 | 00560              | Mon Mar 02 00:00:00 1970 PST
  561 |   1 | 00561              | Tue Mar 03 00:00:00 1970 PST
  563 | 303 | 00563_update3      | Thu Mar 05 00:00:00 1970 PST
  564 |   4 | 00564              | Fri Mar 06 00:00:00 1970 PST
  566 |   6 | 00566              | Sun Mar 08 00:00:00 1970 PST
  567 | 407 | 00567_update7      | Mon Mar 09 00:00:00 1970 PST
  568 |   8 | 00568              | Tue Mar 10 00:00:00 1970 PST
  569 | 509 | 00569_update9      | Wed Mar 11 00:00:00 1970 PST
  570 |   0 | 00570              | Thu Mar 12 00:00:00 1970 PST
  571 |   1 | 00571              | Fri Mar 13 00:00:00 1970 PST
  573 | 303 | 00573_update3      | Sun Mar 15 00:00:00 1970 PST
  574 |   4 | 00574              | Mon Mar 16 00:00:00 1970 PST
  576 |   6 | 00576              | Wed Mar 18 00:00:00 1970 PST
  577 | 407 | 00577_update7      | Thu Mar 19 00:00:00 1970 PST
  578 |   8 | 00578              | Fri Mar 20 00:00:00 1970 PST
  579 | 509 | 00579_update9      | Sat Mar 21 00:00:00 1970 PST
  580 |   0 | 00580              | Sun Mar 22 00:00:00 1970 PST
  581 |   1 | 00581              | Mon Mar 23 00:00:00 1970 PST
  583 | 303 | 00583_update3      | Wed Mar 25 00:00:00 1970 PST
  584 |   4 | 00584              | Thu Mar 26 00:00:00 1970 PST
  586 |   6 | 00586              | Sat Mar 28 00:00:00 1970 PST
  587 | 407 | 00587_update7      | Sun Mar 29 00:00:00 1970 PST
  588 |   8 | 00588              | Mon Mar 30 00:00:00 1970 PST
  589 | 509 | 00589_update9      | Tue Mar 31 00:00:00 1970 PST
  590 |   0 | 00590              | Wed Apr 01 00:00:00 1970 PST
  591 |   1 | 00591              | Thu Apr 02 00:00:00 1970 PST
  593 | 303 | 00593_update3      | Sat Apr 04 00:00:00 1970 PST
  594 |   4 | 00594              | Sun Apr 05 00:00:00 1970 PST
  596 |   6 | 00596              | Tue Apr 07 00:00:00 1970 PST
  597 | 407 | 00597_update7      | Wed Apr 08 00:00:00 1970 PST
  598 |   8 | 00598              | Thu Apr 09 00:00:00 1970 PST
  599 | 509 | 00599_update9      | Fri Apr 10 00:00:00 1970 PST
  600 |   0 | 00600              | Thu Jan 01 00:00:00 1970 PST
  601 |   1 | 00601              | Fri Jan 02 00:00:00 1970 PST
  603 | 303 | 00603_update3      | Sun Jan 04 00:00:00 1970 PST
  604 |   4 | 00604              | Mon Jan 05 00:00:00 1970 PST
  606 |   6 | 00606              | Wed Jan 07 00:00:00 1970 PST
  607 | 407 | 00607_update7      | Thu Jan 08 00:00:00 1970 PST
  608 |   8 | 00608              | Fri Jan 09 00:00:00 1970 PST
  609 | 509 | 00609_update9      | Sat Jan 10 00:00:00 1970 PST
  610 |   0 | 00610              | Sun Jan 11 00:00:00 1970 PST
  611 |   1 | 00611              | Mon Jan 12 00:00:00 1970 PST
  613 | 303 | 00613_update3      | Wed Jan 14 00:00:00 1970 PST
  614 |   4 | 00614              | Thu Jan 15 00:00:00 1970 PST
  616 |   6 | 00616              | Sat Jan 17 00:00:00 1970 PST
  617 | 407 | 00617_update7      | Sun Jan 18 00:00:00 1970 PST
  618 |   8 | 00618              | Mon Jan 19 00:00:00 1970 PST
  619 | 509 | 00619_update9      | Tue Jan 20 00:00:00 1970 PST
  620 |   0 | 00620              | Wed Jan 21 00:00:00 1970 PST
  621 |   1 | 00621              | Thu Jan 22 00:00:00 1970 PST
  623 | 303 | 00623_update3      | Sat Jan 24 00:00:00 1970 PST
  624 |   4 | 00624              | Sun Jan 25 00:00:00 1970 PST
  626 |   6 | 00626              | Tue Jan 27 00:00:00 1970 PST
  627 | 407 | 00627_update7      | Wed Jan 28 00:00:00 1970 PST
  628 |   8 | 00628              | Thu Jan 29 00:00:00 1970 PST
  629 | 509 | 00629_update9      | Fri Jan 30 00:00:00 1970 PST
  630 |   0 | 00630              | Sat Jan 31 00:00:00 1970 PST
  631 |   1 | 00631              | Sun Feb 01 00:00:00 1970 PST
  633 | 303 | 00633_update3      | Tue Feb 03 00:00:00 1970 PST
  634 |   4 | 00634              | Wed Feb 04 00:00:00 1970 PST
  636 |   6 | 00636              | Fri Feb 06 00:00:00 1970 PST
  637 | 407 | 00637_update7      | Sat Feb 07 00:00:00 1970 PST
  638 |   8 | 00638              | Sun Feb 08 00:00:00 1970 PST
  639 | 509 | 00639_update9      | Mon Feb 09 00:00:00 1970 PST
  640 |   0 | 00640              | Tue Feb 10 00:00:00 1970 PST
  641 |   1 | 00641              | Wed Feb 11 00:00:00 1970 PST
  643 | 303 | 00643_update3      | Fri Feb 13 00:00:00 1970 PST
  644 |   4 | 00644              | Sat Feb 14 00:00:00 1970 PST
  646 |   6 | 00646              | Mon Feb 16 00:00:00 1970 PST
  647 | 407 | 00647_update7      | Tue Feb 17 00:00:00 1970 PST
  648 |   8 | 00648              | Wed Feb 18 00:00:00 1970 PST
  649 | 509 | 00649_update9      | Thu Feb 19 00:00:00 1970 PST
  650 |   0 | 00650              | Fri Feb 20 00:00:00 1970 PST
  651 |   1 | 00651              | Sat Feb 21 00:00:00 1970 PST
  653 | 303 | 00653_update3      | Mon Feb 23 00:00:00 1970 PST
  654 |   4 | 00654              | Tue Feb 24 00:00:00 1970 PST
  656 |   6 | 00656              | Thu Feb 26 00:00:00 1970 PST
  657 | 407 | 00657_update7      | Fri Feb 27 00:00:00 1970 PST
  658 |   8 | 00658              | Sat Feb 28 00:00:00 1970 PST
  659 | 509 | 00659_update9      | Sun Mar 01 00:00:00 1970 PST
  660 |   0 | 00660              | Mon Mar 02 00:00:00 1970 PST
  661 |   1 | 00661              | Tue Mar 03 00:00:00 1970 PST
  663 | 303 | 00663_update3      | Thu Mar 05 00:00:00 1970 PST
  664 |   4 | 00664              | Fri Mar 06 00:00:00 1970 PST
  666 |   6 | 00666              | Sun Mar 08 00:00:00 1970 PST
  667 | 407 | 00667_update7      | Mon Mar 09 00:00:00 1970 PST
  668 |   8 | 00668              | Tue Mar 10 00:00:00 1970 PST
  669 | 509 | 00669_update9      | Wed Mar 11 00:00:00 1970 PST
  670 |   0 | 00670              | Thu Mar 12 00:00:00 1970 PST
  671 |   1 | 00671              | Fri Mar 13 00:00:00 1970 PST
  673 | 303 | 00673_update3      | Sun Mar 15 00:00:00 1970 PST
  674 |   4 | 00674              | Mon Mar 16 00:00:00 1970 PST
  676 |   6 | 00676              | Wed Mar 18 00:00:00 1970 PST
  677 | 407 | 00677_update7      | Thu Mar 19 00:00:00 1970 PST
  678 |   8 | 00678              | Fri Mar 20 00:00:00 1970 PST
  679 | 509 | 00679_update9      | Sat Mar 21 00:00:00 1970 PST
  680 |   0 | 00680              | Sun Mar 22 00:00:00 1970 PST
  681 |   1 | 00681              | Mon Mar 23 00:00:00 1970 PST
  683 | 303 | 00683_update3      | Wed Mar 25 00:00:00 1970 PST
  684 |   4 | 00684              | Thu Mar 26 00:00:00 1970 PST
  686 |   6 | 00686              | Sat Mar 28 00:00:00 1970 PST
  687 | 407 | 00687_update7      | Sun Mar 29 00:00:00 1970 PST
  688 |   8 | 00688              | Mon Mar 30 00:00:00 1970 PST
  689 | 509 | 00689_update9      | Tue Mar 31 00:00:00 1970 PST
  690 |   0 | 00690              | Wed Apr 01 00:00:00 1970 PST
  691 |   1 | 00691              | Thu Apr 02 00:00:00 1970 PST
  693 | 303 | 00693_update3      | Sat Apr 04 00:00:00 1970 PST
  694 |   4 | 00694              | Sun Apr 05 00:00:00 1970 PST
  696 |   6 | 00696              | Tue Apr 07 00:00:00 1970 PST
  697 | 407 | 00697_update7      | Wed Apr 08 00:00:00 1970 PST
  698 |   8 | 00698              | Thu Apr 09 00:00:00 1970 PST
  699 | 509 | 00699_update9      | Fri Apr 10 00:00:00 1970 PST
  700 |   0 | 00700              | Thu Jan 01 00:00:00 1970 PST
  701 |   1 | 00701              | Fri Jan 02 00:00:00 1970 PST
  703 | 303 | 00703_update3      | Sun Jan 04 00:00:00 1970 PST
  704 |   4 | 00704              | Mon Jan 05 00:00:00 1970 PST
  706 |   6 | 00706              | Wed Jan 07 00:00:00 1970 PST
  707 | 407 | 00707_update7      | Thu Jan 08 00:00:00 1970 PST
  708 |   8 | 00708              | Fri Jan 09 00:00:00 1970 PST
  709 | 509 | 00709_update9      | Sat Jan 10 00:00:00 1970 PST
  710 |   0 | 00710              | Sun Jan 11 00:00:00 1970 PST
  711 |   1 | 00711              | Mon Jan 12 00:00:00 1970 PST
  713 | 303 | 00713_update3      | Wed Jan 14 00:00:00 1970 PST
  714 |   4 | 00714              | Thu Jan 15 00:00:00 1970 PST
  716 |   6 | 00716              | Sat Jan 17 00:00:00 1970 PST
  717 | 407 | 00717_update7      | Sun Jan 18 00:00:00 1970 PST
  718 |   8 | 00718              | Mon Jan 19 00:00:00 1970 PST
  719 | 509 | 00719_update9      | Tue Jan 20 00:00:00 1970 PST
  720 |   0 | 00720              | Wed Jan 21 00:00:00 1970 PST
  721 |   1 | 00721              | Thu Jan 22 00:00:00 1970 PST
  723 | 303 | 00723_update3      | Sat Jan 24 00:00:00 1970 PST
  724 |   4 | 00724              | Sun Jan 25 00:00:00 1970 PST
  726 |   6 | 00726              | Tue Jan 27 00:00:00 1970 PST
  727 | 407 | 00727_update7      | Wed Jan 28 00:00:00 1970 PST
  728 |   8 | 00728              | Thu Jan 29 00:00:00 1970 PST
  729 | 509 | 00729_update9      | Fri Jan 30 00:00:00 1970 PST
  730 |   0 | 00730              | Sat Jan 31 00:00:00 1970 PST
  731 |   1 | 00731              | Sun Feb 01 00:00:00 1970 PST
  733 | 303 | 00733_update3      | Tue Feb 03 00:00:00 1970 PST
  734 |   4 | 00734              | Wed Feb 04 00:00:00 1970 PST
  736 |   6 | 00736              | Fri Feb 06 00:00:00 1970 PST
  737 | 407 | 00737_update7      | Sat Feb 07 00:00:00 1970 PST
  738 |   8 | 00738              | Sun Feb 08 00:00:00 1970 PST
  739 | 509 | 00739_update9      | Mon Feb 09 00:00:00 1970 PST
  740 |   0 | 00740              | Tue Feb 10 00:00:00 1970 PST
  741 |   1 | 00741              | Wed Feb 11 00:00:00 1970 PST
  743 | 303 | 00743_update3      | Fri Feb 13 00:00:00 1970 PST
  744 |   4 | 00744              | Sat Feb 14 00:00:00 1970 PST
  746 |   6 | 00746              | Mon Feb 16 00:00:00 1970 PST
  747 | 407 | 00747_update7      | Tue Feb 17 00:00:00 1970 PST
  748 |   8 | 00748              | Wed Feb 18 00:00:00 1970 PST
  749 | 509 | 00749_update9      | Thu Feb 19 00:00:00 1970 PST
  750 |   0 | 00750              | Fri Feb 20 00:00:00 1970 PST
  751 |   1 | 00751              | Sat Feb 21 00:00:00 1970 PST
  753 | 303 | 00753_update3      | Mon Feb 23 00:00:00 1970 PST
  754 |   4 | 00754              | Tue Feb 24 00:00:00 1970 PST
  756 |   6 | 00756              | Thu Feb 26 00:00:00 1970 PST
  757 | 407 | 00757_update7      | Fri Feb 27 00:00:00 1970 PST
  758 |   8 | 00758              | Sat Feb 28 00:00:00 1970 PST
  759 | 509 | 00759_update9      | Sun Mar 01 00:00:00 1970 PST
  760 |   0 | 00760              | Mon Mar 02 00:00:00 1970 PST
  761 |   1 | 00761              | Tue Mar 03 00:00:00 1970 PST
  763 | 303 | 00763_update3      | Thu Mar 05 00:00:00 1970 PST
  764 |   4 | 00764              | Fri Mar 06 00:00:00 1970 PST
  766 |   6 | 00766              | Sun Mar 08 00:00:00 1970 PST
  767 | 407 | 00767_update7      | Mon Mar 09 00:00:00 1970 PST
  768 |   8 | 00768              | Tue Mar 10 00:00:00 1970 PST
  769 | 509 | 00769_update9      | Wed Mar 11 00:00:00 1970 PST
  770 |   0 | 00770              | Thu Mar 12 00:00:00 1970 PST
  771 |   1 | 00771              | Fri Mar 13 00:00:00 1970 PST
  773 | 303 | 00773_update3      | Sun Mar 15 00:00:00 1970 PST
  774 |   4 | 00774              | Mon Mar 16 00:00:00 1970 PST
  776 |   6 | 00776              | Wed Mar 18 00:00:00 1970 PST
  777 | 407 | 00777_update7      | Thu Mar 19 00:00:00 1970 PST
  778 |   8 | 00778              | Fri Mar 20 00:00:00 1970 PST
  779 | 509 | 00779_update9      | Sat Mar 21 00:00:00 1970 PST
  780 |   0 | 00780              | Sun Mar 22 00:00:00 1970 PST
  781 |   1 | 00781              | Mon Mar 23 00:00:00 1970 PST
  783 | 303 | 00783_update3      | Wed Mar 25 00:00:00 1970 PST
  784 |   4 | 00784              | Thu Mar 26 00:00:00 1970 PST
  786 |   6 | 00786              | Sat Mar 28 00:00:00 1970 PST
  787 | 407 | 00787_update7      | Sun Mar 29 00:00:00 1970 PST
  788 |   8 | 00788              | Mon Mar 30 00:00:00 1970 PST
  789 | 509 | 00789_update9      | Tue Mar 31 00:00:00 1970 PST
  790 |   0 | 00790              | Wed Apr 01 00:00:00 1970 PST
  791 |   1 | 00791              | Thu Apr 02 00:00:00 1970 PST
  793 | 303 | 00793_update3      | Sat Apr 04 00:00:00 1970 PST
  794 |   4 | 00794              | Sun Apr 05 00:00:00 1970 PST
  796 |   6 | 00796              | Tue Apr 07 00:00:00 1970 PST
  797 | 407 | 00797_update7      | Wed Apr 08 00:00:00 1970 PST
  798 |   8 | 00798              | Thu Apr 09 00:00:00 1970 PST
  799 | 509 | 00799_update9      | Fri Apr 10 00:00:00 1970 PST
  800 |   0 | 00800              | Thu Jan 01 00:00:00 1970 PST
  801 |   1 | 00801              | Fri Jan 02 00:00:00 1970 PST
  803 | 303 | 00803_update3      | Sun Jan 04 00:00:00 1970 PST
  804 |   4 | 00804              | Mon Jan 05 00:00:00 1970 PST
  806 |   6 | 00806              | Wed Jan 07 00:00:00 1970 PST
  807 | 407 | 00807_update7      | Thu Jan 08 00:00:00 1970 PST
  808 |   8 | 00808              | Fri Jan 09 00:00:00 1970 PST
  809 | 509 | 00809_update9      | Sat Jan 10 00:00:00 1970 PST
  810 |   0 | 00810              | Sun Jan 11 00:00:00 1970 PST
  811 |   1 | 00811              | Mon Jan 12 00:00:00 1970 PST
  813 | 303 | 00813_update3      | Wed Jan 14 00:00:00 1970 PST
  814 |   4 | 00814              | Thu Jan 15 00:00:00 1970 PST
  816 |   6 | 00816              | Sat Jan 17 00:00:00 1970 PST
  817 | 407 | 00817_update7      | Sun Jan 18 00:00:00 1970 PST
  818 |   8 | 00818              | Mon Jan 19 00:00:00 1970 PST
  819 | 509 | 00819_update9      | Tue Jan 20 00:00:00 1970 PST
  820 |   0 | 00820              | Wed Jan 21 00:00:00 1970 PST
  821 |   1 | 00821              | Thu Jan 22 00:00:00 1970 PST
  823 | 303 | 00823_update3      | Sat Jan 24 00:00:00 1970 PST
  824 |   4 | 00824              | Sun Jan 25 00:00:00 1970 PST
  826 |   6 | 00826              | Tue Jan 27 00:00:00 1970 PST
  827 | 407 | 00827_update7      | Wed Jan 28 00:00:00 1970 PST
  828 |   8 | 00828              | Thu Jan 29 00:00:00 1970 PST
  829 | 509 | 00829_update9      | Fri Jan 30 00:00:00 1970 PST
  830 |   0 | 00830              | Sat Jan 31 00:00:00 1970 PST
  831 |   1 | 00831              | Sun Feb 01 00:00:00 1970 PST
  833 | 303 | 00833_update3      | Tue Feb 03 00:00:00 1970 PST
  834 |   4 | 00834              | Wed Feb 04 00:00:00 1970 PST
  836 |   6 | 00836              | Fri Feb 06 00:00:00 1970 PST
  837 | 407 | 00837_update7      | Sat Feb 07 00:00:00 1970 PST
  838 |   8 | 00838              | Sun Feb 08 00:00:00 1970 PST
  839 | 509 | 00839_update9      | Mon Feb 09 00:00:00 1970 PST
  840 |   0 | 00840              | Tue Feb 10 00:00:00 1970 PST
  841 |   1 | 00841              | Wed Feb 11 00:00:00 1970 PST
  843 | 303 | 00843_update3      | Fri Feb 13 00:00:00 1970 PST
  844 |   4 | 00844              | Sat Feb 14 00:00:00 1970 PST
  846 |   6 | 00846              | Mon Feb 16 00:00:00 1970 PST
  847 | 407 | 00847_update7      | Tue Feb 17 00:00:00 1970 PST
  848 |   8 | 00848              | Wed Feb 18 00:00:00 1970 PST
  849 | 509 | 00849_update9      | Thu Feb 19 00:00:00 1970 PST
  850 |   0 | 00850              | Fri Feb 20 00:00:00 1970 PST
  851 |   1 | 00851              | Sat Feb 21 00:00:00 1970 PST
  853 | 303 | 00853_update3      | Mon Feb 23 00:00:00 1970 PST
  854 |   4 | 00854              | Tue Feb 24 00:00:00 1970 PST
  856 |   6 | 00856              | Thu Feb 26 00:00:00 1970 PST
  857 | 407 | 00857_update7      | Fri Feb 27 00:00:00 1970 PST
  858 |   8 | 00858              | Sat Feb 28 00:00:00 1970 PST
  859 | 509 | 00859_update9      | Sun Mar 01 00:00:00 1970 PST
  860 |   0 | 00860              | Mon Mar 02 00:00:00 1970 PST
  861 |   1 | 00861              | Tue Mar 03 00:00:00 1970 PST
  863 | 303 | 00863_update3      | Thu Mar 05 00:00:00 1970 PST
  864 |   4 | 00864              | Fri Mar 06 00:00:00 1970 PST
  866 |   6 | 00866              | Sun Mar 08 00:00:00 1970 PST
  867 | 407 | 00867_update7      | Mon Mar 09 00:00:00 1970 PST
  868 |   8 | 00868              | Tue Mar 10 00:00:00 1970 PST
  869 | 509 | 00869_update9      | Wed Mar 11 00:00:00 1970 PST
  870 |   0 | 00870              | Thu Mar 12 00:00:00 1970 PST
  871 |   1 | 00871              | Fri Mar 13 00:00:00 1970 PST
  873 | 303 | 00873_update3      | Sun Mar 15 00:00:00 1970 PST
  874 |   4 | 00874              | Mon Mar 16 00:00:00 1970 PST
  876 |   6 | 00876              | Wed Mar 18 00:00:00 1970 PST
  877 | 407 | 00877_update7      | Thu Mar 19 00:00:00 1970 PST
  878 |   8 | 00878              | Fri Mar 20 00:00:00 1970 PST
  879 | 509 | 00879_update9      | Sat Mar 21 00:00:00 1970 PST
  880 |   0 | 00880              | Sun Mar 22 00:00:00 1970 PST
  881 |   1 | 00881              | Mon Mar 23 00:00:00 1970 PST
  883 | 303 | 00883_update3      | Wed Mar 25 00:00:00 1970 PST
  884 |   4 | 00884              | Thu Mar 26 00:00:00 1970 PST
  886 |   6 | 00886              | Sat Mar 28 00:00:00 1970 PST
  887 | 407 | 00887_update7      | Sun Mar 29 00:00:00 1970 PST
  888 |   8 | 00888              | Mon Mar 30 00:00:00 1970 PST
  889 | 509 | 00889_update9      | Tue Mar 31 00:00:00 1970 PST
  890 |   0 | 00890              | Wed Apr 01 00:00:00 1970 PST
  891 |   1 | 00891              | Thu Apr 02 00:00:00 1970 PST
  893 | 303 | 00893_update3      | Sat Apr 04 00:00:00 1970 PST
  894 |   4 | 00894              | Sun Apr 05 00:00:00 1970 PST
  896 |   6 | 00896              | Tue Apr 07 00:00:00 1970 PST
  897 | 407 | 00897_update7      | Wed Apr 08 00:00:00 1970 PST
  898 |   8 | 00898              | Thu Apr 09 00:00:00 1970 PST
  899 | 509 | 00899_update9      | Fri Apr 10 00:00:00 1970 PST
  900 |   0 | 00900              | Thu Jan 01 00:00:00 1970 PST
  901 |   1 | 00901              | Fri Jan 02 00:00:00 1970 PST
  903 | 303 | 00903_update3      | Sun Jan 04 00:00:00 1970 PST
  904 |   4 | 00904              | Mon Jan 05 00:00:00 1970 PST
  906 |   6 | 00906              | Wed Jan 07 00:00:00 1970 PST
  907 | 407 | 00907_update7      | Thu Jan 08 00:00:00 1970 PST
  908 |   8 | 00908              | Fri Jan 09 00:00:00 1970 PST
  909 | 509 | 00909_update9      | Sat Jan 10 00:00:00 1970 PST
  910 |   0 | 00910              | Sun Jan 11 00:00:00 1970 PST
  911 |   1 | 00911              | Mon Jan 12 00:00:00 1970 PST
  913 | 303 | 00913_update3      | Wed Jan 14 00:00:00 1970 PST
  914 |   4 | 00914              | Thu Jan 15 00:00:00 1970 PST
  916 |   6 | 00916              | Sat Jan 17 00:00:00 1970 PST
  917 | 407 | 00917_update7      | Sun Jan 18 00:00:00 1970 PST
  918 |   8 | 00918              | Mon Jan 19 00:00:00 1970 PST
  919 | 509 | 00919_update9      | Tue Jan 20 00:00:00 1970 PST
  920 |   0 | 00920              | Wed Jan 21 00:00:00 1970 PST
  921 |   1 | 00921              | Thu Jan 22 00:00:00 1970 PST
  923 | 303 | 00923_update3      | Sat Jan 24 00:00:00 1970 PST
  924 |   4 | 00924              | Sun Jan 25 00:00:00 1970 PST
  926 |   6 | 00926              | Tue Jan 27 00:00:00 1970 PST
  927 | 407 | 00927_update7      | Wed Jan 28 00:00:00 1970 PST
  928 |   8 | 00928              | Thu Jan 29 00:00:00 1970 PST
  929 | 509 | 00929_update9      | Fri Jan 30 00:00:00 1970 PST
  930 |   0 | 00930              | Sat Jan 31 00:00:00 1970 PST
  931 |   1 | 00931              | Sun Feb 01 00:00:00 1970 PST
  933 | 303 | 00933_update3      | Tue Feb 03 00:00:00 1970 PST
  934 |   4 | 00934              | Wed Feb 04 00:00:00 1970 PST
  936 |   6 | 00936              | Fri Feb 06 00:00:00 1970 PST
  937 | 407 | 00937_update7      | Sat Feb 07 00:00:00 1970 PST
  938 |   8 | 00938              | Sun Feb 08 00:00:00 1970 PST
  939 | 509 | 00939_update9      | Mon Feb 09 00:00:00 1970 PST
  940 |   0 | 00940              | Tue Feb 10 00:00:00 1970 PST
  941 |   1 | 00941              | Wed Feb 11 00:00:00 1970 PST
  943 | 303 | 00943_update3      | Fri Feb 13 00:00:00 1970 PST
  944 |   4 | 00944              | Sat Feb 14 00:00:00 1970 PST
  946 |   6 | 00946              | Mon Feb 16 00:00:00 1970 PST
  947 | 407 | 00947_update7      | Tue Feb 17 00:00:00 1970 PST
  948 |   8 | 00948              | Wed Feb 18 00:00:00 1970 PST
  949 | 509 | 00949_update9      | Thu Feb 19 00:00:00 1970 PST
  950 |   0 | 00950              | Fri Feb 20 00:00:00 1970 PST
  951 |   1 | 00951              | Sat Feb 21 00:00:00 1970 PST
  953 | 303 | 00953_update3      | Mon Feb 23 00:00:00 1970 PST
  954 |   4 | 00954              | Tue Feb 24 00:00:00 1970 PST
  956 |   6 | 00956              | Thu Feb 26 00:00:00 1970 PST
  957 | 407 | 00957_update7      | Fri Feb 27 00:00:00 1970 PST
  958 |   8 | 00958              | Sat Feb 28 00:00:00 1970 PST
  959 | 509 | 00959_update9      | Sun Mar 01 00:00:00 1970 PST
  960 |   0 | 00960              | Mon Mar 02 00:00:00 1970 PST
  961 |   1 | 00961              | Tue Mar 03 00:00:00 1970 PST
  963 | 303 | 00963_update3      | Thu Mar 05 00:00:00 1970 PST
  964 |   4 | 00964              | Fri Mar 06 00:00:00 1970 PST
  966 |   6 | 00966              | Sun Mar 08 00:00:00 1970 PST
  967 | 407 | 00967_update7      | Mon Mar 09 00:00:00 1970 PST
  968 |   8 | 00968              | Tue Mar 10 00:00:00 1970 PST
  969 | 509 | 00969_update9      | Wed Mar 11 00:00:00 1970 PST
  970 |   0 | 00970              | Thu Mar 12 00:00:00 1970 PST
  971 |   1 | 00971              | Fri Mar 13 00:00:00 1970 PST
  973 | 303 | 00973_update3      | Sun Mar 15 00:00:00 1970 PST
  974 |   4 | 00974              | Mon Mar 16 00:00:00 1970 PST
  976 |   6 | 00976              | Wed Mar 18 00:00:00 1970 PST
  977 | 407 | 00977_update7      | Thu Mar 19 00:00:00 1970 PST
  978 |   8 | 00978              | Fri Mar 20 00:00:00 1970 PST
  979 | 509 | 00979_update9      | Sat Mar 21 00:00:00 1970 PST
  980 |   0 | 00980              | Sun Mar 22 00:00:00 1970 PST
  981 |   1 | 00981              | Mon Mar 23 00:00:00 1970 PST
  983 | 303 | 00983_update3      | Wed Mar 25 00:00:00 1970 PST
  984 |   4 | 00984              | Thu Mar 26 00:00:00 1970 PST
  986 |   6 | 00986              | Sat Mar 28 00:00:00 1970 PST
  987 | 407 | 00987_update7      | Sun Mar 29 00:00:00 1970 PST
  988 |   8 | 00988              | Mon Mar 30 00:00:00 1970 PST
  989 | 509 | 00989_update9      | Tue Mar 31 00:00:00 1970 PST
  990 |   0 | 00990              | Wed Apr 01 00:00:00 1970 PST
  991 |   1 | 00991              | Thu Apr 02 00:00:00 1970 PST
  993 | 303 | 00993_update3      | Sat Apr 04 00:00:00 1970 PST
  994 |   4 | 00994              | Sun Apr 05 00:00:00 1970 PST
  996 |   6 | 00996              | Tue Apr 07 00:00:00 1970 PST
  997 | 407 | 00997_update7      | Wed Apr 08 00:00:00 1970 PST
  998 |   8 | 00998              | Thu Apr 09 00:00:00 1970 PST
  999 | 509 | 00999_update9      | Fri Apr 10 00:00:00 1970 PST
 1000 |   0 | 01000              | Thu Jan 01 00:00:00 1970 PST
 1001 | 101 | 0000100001         | 
 1003 | 403 | 0000300003_update3 | 
 1004 | 104 | 0000400004         | 
 1006 | 106 | 0000600006         | 
 1007 | 507 | 0000700007_update7 | 
 1008 | 108 | 0000800008         | 
 1009 | 609 | 0000900009_update9 | 
 1010 | 100 | 0001000010         | 
 1011 | 101 | 0001100011         | 
 1013 | 403 | 0001300013_update3 | 
 1014 | 104 | 0001400014         | 
 1016 | 106 | 0001600016         | 
 1017 | 507 | 0001700017_update7 | 
 1018 | 108 | 0001800018         | 
 1019 | 609 | 0001900019_update9 | 
 1020 | 100 | 0002000020         | 
 1101 | 201 | aaa                | 
 1103 | 503 | ccc_update3        | 
 1104 | 204 | ddd                | 
(819 rows)

--Testcase 471:
EXPLAIN (verbose, costs off)
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2__postgres_srv__0
   Output: (ft2__postgres_srv__0.tableoid)::regclass
   Remote SQL: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   Batch Size: 1
   ->  Result
         Output: 1200, 999, NULL::integer, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10), NULL::user_enum
(6 rows)

--Testcase 472:
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
       tableoid       
----------------------
 ft2__postgres_srv__0
(1 row)

--Testcase 473:
EXPLAIN (verbose, costs off)
UPDATE ft2__postgres_srv__0 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;             -- can be pushed down
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Update on public.ft2__postgres_srv__0
   Output: (tableoid)::regclass
   ->  Foreign Update on public.ft2__postgres_srv__0
         Remote SQL: UPDATE "S 1"."T 1" SET c3 = 'bar'::text WHERE (("C 1" = 1200))
(4 rows)

--Testcase 474:
UPDATE ft2__postgres_srv__0 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;
       tableoid       
----------------------
 ft2__postgres_srv__0
(1 row)

--Testcase 475:
EXPLAIN (verbose, costs off)
DELETE FROM ft2__postgres_srv__0 WHERE c1 = 1200 RETURNING tableoid::regclass;                       -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Delete on public.ft2__postgres_srv__0
   Output: (tableoid)::regclass
   ->  Foreign Delete on public.ft2__postgres_srv__0
         Remote SQL: DELETE FROM "S 1"."T 1" WHERE (("C 1" = 1200))
(4 rows)

--Testcase 476:
DELETE FROM ft2__postgres_srv__0 WHERE c1 = 1200 RETURNING tableoid::regclass;
       tableoid       
----------------------
 ft2__postgres_srv__0
(1 row)

-- Test UPDATE/DELETE with RETURNING on a three-table join
--Testcase 477:
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3)
  SELECT id, id - 1200, to_char(id, 'FM00000') FROM generate_series(1201, 1300) id;
--Testcase 478:
EXPLAIN (verbose, costs off)
UPDATE ft2__postgres_srv__0 SET c3 = 'foo'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2__postgres_srv__0.c1 > 1200 AND ft2__postgres_srv__0.c2 = ft4.c1
  RETURNING ft2__postgres_srv__0, ft2__postgres_srv__0.*, ft4, ft4.*;       -- can be pushed down
                                                                                                                                       QUERY PLAN                                                                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2__postgres_srv__0
   Output: ft2__postgres_srv__0.*, ft2__postgres_srv__0.c1, ft2__postgres_srv__0.c2, ft2__postgres_srv__0.c3, ft2__postgres_srv__0.c4, ft2__postgres_srv__0.c5, ft2__postgres_srv__0.c6, ft2__postgres_srv__0.c7, ft2__postgres_srv__0.c8, ft4.*, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url
   Remote SQL: UPDATE "S 1"."T 1" SET c3 = $2 WHERE ctid = $1 RETURNING "C 1", c2, c3, c4, c5, c6, c7, c8
   ->  Merge Join
         Output: 'foo'::text, ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.*, ft4.*, ft5.*, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url
         Merge Cond: (ft4.c1 = ft5.c1)
         ->  Sort
               Output: ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.*, ft2__postgres_srv__0.c2, ft4.*, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url
               Sort Key: ft2__postgres_srv__0.c2
               ->  Hash Join
                     Output: ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.*, ft2__postgres_srv__0.c2, ft4.*, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url
                     Hash Cond: (ft4.c1 = ft2__postgres_srv__0.c2)
                     ->  Foreign Scan on public.ft4
                           Output: ft4.*, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3"
                     ->  Hash
                           Output: ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.*, ft2__postgres_srv__0.c2
                           ->  Foreign Scan on public.ft2__postgres_srv__0
                                 Output: ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.*, ft2__postgres_srv__0.c2
                                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" WHERE (("C 1" > 1200)) FOR UPDATE
         ->  Sort
               Output: ft5.*, ft5.c1
               Sort Key: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.*, ft5.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
(28 rows)

--Testcase 479:
UPDATE ft2__postgres_srv__0 SET c3 = 'foo'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2__postgres_srv__0.c1 > 1200 AND ft2__postgres_srv__0.c2 = ft4.c1
  RETURNING ft2__postgres_srv__0, ft2__postgres_srv__0.*, ft4, ft4.*;
      ft2__postgres_srv__0      |  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 |              ft4              | c1 | c2 |   c3   |   __spd_url    
--------------------------------+------+----+-----+----+----+----+------------+----+-------------------------------+----+----+--------+----------------
 (1206,6,foo,,,,"ft2       ",)  | 1206 |  6 | foo |    |    |    | ft2        |    | (6,7,AAA006,/postgres_srv/)   |  6 |  7 | AAA006 | /postgres_srv/
 (1212,12,foo,,,,"ft2       ",) | 1212 | 12 | foo |    |    |    | ft2        |    | (12,13,AAA012,/postgres_srv/) | 12 | 13 | AAA012 | /postgres_srv/
 (1218,18,foo,,,,"ft2       ",) | 1218 | 18 | foo |    |    |    | ft2        |    | (18,19,AAA018,/postgres_srv/) | 18 | 19 | AAA018 | /postgres_srv/
 (1224,24,foo,,,,"ft2       ",) | 1224 | 24 | foo |    |    |    | ft2        |    | (24,25,AAA024,/postgres_srv/) | 24 | 25 | AAA024 | /postgres_srv/
 (1230,30,foo,,,,"ft2       ",) | 1230 | 30 | foo |    |    |    | ft2        |    | (30,31,AAA030,/postgres_srv/) | 30 | 31 | AAA030 | /postgres_srv/
 (1236,36,foo,,,,"ft2       ",) | 1236 | 36 | foo |    |    |    | ft2        |    | (36,37,AAA036,/postgres_srv/) | 36 | 37 | AAA036 | /postgres_srv/
 (1242,42,foo,,,,"ft2       ",) | 1242 | 42 | foo |    |    |    | ft2        |    | (42,43,AAA042,/postgres_srv/) | 42 | 43 | AAA042 | /postgres_srv/
 (1248,48,foo,,,,"ft2       ",) | 1248 | 48 | foo |    |    |    | ft2        |    | (48,49,AAA048,/postgres_srv/) | 48 | 49 | AAA048 | /postgres_srv/
 (1254,54,foo,,,,"ft2       ",) | 1254 | 54 | foo |    |    |    | ft2        |    | (54,55,AAA054,/postgres_srv/) | 54 | 55 | AAA054 | /postgres_srv/
 (1260,60,foo,,,,"ft2       ",) | 1260 | 60 | foo |    |    |    | ft2        |    | (60,61,AAA060,/postgres_srv/) | 60 | 61 | AAA060 | /postgres_srv/
 (1266,66,foo,,,,"ft2       ",) | 1266 | 66 | foo |    |    |    | ft2        |    | (66,67,AAA066,/postgres_srv/) | 66 | 67 | AAA066 | /postgres_srv/
 (1272,72,foo,,,,"ft2       ",) | 1272 | 72 | foo |    |    |    | ft2        |    | (72,73,AAA072,/postgres_srv/) | 72 | 73 | AAA072 | /postgres_srv/
 (1278,78,foo,,,,"ft2       ",) | 1278 | 78 | foo |    |    |    | ft2        |    | (78,79,AAA078,/postgres_srv/) | 78 | 79 | AAA078 | /postgres_srv/
 (1284,84,foo,,,,"ft2       ",) | 1284 | 84 | foo |    |    |    | ft2        |    | (84,85,AAA084,/postgres_srv/) | 84 | 85 | AAA084 | /postgres_srv/
 (1290,90,foo,,,,"ft2       ",) | 1290 | 90 | foo |    |    |    | ft2        |    | (90,91,AAA090,/postgres_srv/) | 90 | 91 | AAA090 | /postgres_srv/
 (1296,96,foo,,,,"ft2       ",) | 1296 | 96 | foo |    |    |    | ft2        |    | (96,97,AAA096,/postgres_srv/) | 96 | 97 | AAA096 | /postgres_srv/
(16 rows)

--Testcase 480:
EXPLAIN (verbose, costs off)
DELETE FROM ft2__postgres_srv__0
  USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2__postgres_srv__0.c1 > 1200 AND ft2__postgres_srv__0.c1 % 10 = 0 AND ft2__postgres_srv__0.c2 = ft4.c1
  RETURNING 100;                          -- can be pushed down
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Delete on public.ft2__postgres_srv__0
   Output: 100
   Remote SQL: DELETE FROM "S 1"."T 1" WHERE ctid = $1
   ->  Hash Right Join
         Output: ft2__postgres_srv__0.ctid, ft4.*, ft5.*
         Hash Cond: (ft5.c1 = ft4.c1)
         ->  Foreign Scan on public.ft5
               Output: ft5.*, ft5.c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
         ->  Hash
               Output: ft2__postgres_srv__0.ctid, ft4.*, ft4.c1
               ->  Hash Join
                     Output: ft2__postgres_srv__0.ctid, ft4.*, ft4.c1
                     Hash Cond: (ft4.c1 = ft2__postgres_srv__0.c2)
                     ->  Foreign Scan on public.ft4
                           Output: ft4.*, ft4.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3"
                     ->  Hash
                           Output: ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.c2
                           ->  Foreign Scan on public.ft2__postgres_srv__0
                                 Output: ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.c2
                                 Remote SQL: SELECT c2, ctid FROM "S 1"."T 1" WHERE (("C 1" > 1200)) AND ((("C 1" % 10) = 0)) FOR UPDATE
(24 rows)

--Testcase 481:
DELETE FROM ft2__postgres_srv__0
  USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2__postgres_srv__0.c1 > 1200 AND ft2__postgres_srv__0.c1 % 10 = 0 AND ft2__postgres_srv__0.c2 = ft4.c1
  RETURNING 100;
 ?column? 
----------
      100
      100
      100
      100
      100
      100
      100
      100
      100
      100
(10 rows)

--Testcase 482:
DELETE FROM ft2__postgres_srv__0 WHERE ft2__postgres_srv__0.c1 > 1200;
-- Test UPDATE with a MULTIEXPR sub-select
-- (maybe someday this'll be remotely executable, but not today)
--Testcase 483:
EXPLAIN (verbose, costs off)
UPDATE ft2__postgres_srv__0 AS target SET (c2, c7) = (
    SELECT c2 * 10, c7
        FROM ft2__postgres_srv__0 AS src
        WHERE target.c1 = src.c1
) WHERE c1 > 1100;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Update on public.ft2__postgres_srv__0 target
   Remote SQL: UPDATE "S 1"."T 1" SET c2 = $2, c7 = $3 WHERE ctid = $1
   ->  Foreign Scan on public.ft2__postgres_srv__0 target
         Output: $1, $2, (SubPlan 1 (returns $1,$2)), target.ctid, target.*
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" WHERE (("C 1" > 1100)) FOR UPDATE
         SubPlan 1 (returns $1,$2)
           ->  Foreign Scan on public.ft2__postgres_srv__0 src
                 Output: (src.c2 * 10), src.c7
                 Remote SQL: SELECT c2, c7 FROM "S 1"."T 1" WHERE (($1::integer = "C 1"))
(9 rows)

--Testcase 484:
UPDATE ft2__postgres_srv__0 AS target SET (c2, c7) = (
    SELECT c2 * 10, c7
        FROM ft2__postgres_srv__0 AS src
        WHERE target.c1 = src.c1
) WHERE c1 > 1100;
--Testcase 485:
UPDATE ft2__postgres_srv__0 AS target SET (c2) = (
    SELECT c2 / 10
        FROM ft2__postgres_srv__0 AS src
        WHERE target.c1 = src.c1
) WHERE c1 > 1100;
-- Test UPDATE involving a join that can be pushed down,
-- but a SET clause that can't be
--Testcase 486:
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE ft2__postgres_srv__0 d SET c2 = CASE WHEN random() >= 0 THEN d.c2 ELSE 0 END
  FROM ft2__postgres_srv__0 AS t WHERE d.c1 = t.c1 AND d.c1 > 1000;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2__postgres_srv__0 d
   Remote SQL: UPDATE "S 1"."T 1" SET c2 = $2 WHERE ctid = $1
   ->  Hash Join
         Output: CASE WHEN (random() >= '0'::double precision) THEN d.c2 ELSE 0 END, d.ctid, d.*, t.*
         Hash Cond: (t.c1 = d.c1)
         ->  Foreign Scan on public.ft2__postgres_srv__0 t
               Output: t.*, t.c1
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
         ->  Hash
               Output: d.c2, d.ctid, d.*, d.c1
               ->  Foreign Scan on public.ft2__postgres_srv__0 d
                     Output: d.c2, d.ctid, d.*, d.c1
                     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" WHERE (("C 1" > 1000)) FOR UPDATE
(13 rows)

--Testcase 487:
UPDATE ft2__postgres_srv__0 d SET c2 = CASE WHEN random() >= 0 THEN d.c2 ELSE 0 END
  FROM ft2__postgres_srv__0 AS t WHERE d.c1 = t.c1 AND d.c1 > 1000;
-- Test UPDATE/DELETE with WHERE or JOIN/ON conditions containing
-- user-defined operators/functions
--Testcase 488:
ALTER SERVER postgres_srv OPTIONS (DROP extensions);
--Testcase 489:
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3)
  SELECT id, id % 10, to_char(id, 'FM00000') FROM generate_series(2001, 2010) id;
--Testcase 490:
EXPLAIN (verbose, costs off)
UPDATE ft2__postgres_srv__0 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;            -- can't be pushed down
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Update on public.ft2__postgres_srv__0
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: UPDATE "S 1"."T 1" SET c3 = $2 WHERE ctid = $1 RETURNING "C 1", c2, c3, c4, c5, c6, c7, c8
   ->  Foreign Scan on public.ft2__postgres_srv__0
         Output: 'bar'::text, ctid, ft2__postgres_srv__0.*
         Filter: (postgres_fdw_abs(ft2__postgres_srv__0.c1) > 2000)
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
(7 rows)

--Testcase 491:
UPDATE ft2__postgres_srv__0 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;
  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 
------+----+-----+----+----+----+------------+----
 2001 |  1 | bar |    |    |    | ft2        | 
 2002 |  2 | bar |    |    |    | ft2        | 
 2003 |  3 | bar |    |    |    | ft2        | 
 2004 |  4 | bar |    |    |    | ft2        | 
 2005 |  5 | bar |    |    |    | ft2        | 
 2006 |  6 | bar |    |    |    | ft2        | 
 2007 |  7 | bar |    |    |    | ft2        | 
 2008 |  8 | bar |    |    |    | ft2        | 
 2009 |  9 | bar |    |    |    | ft2        | 
 2010 |  0 | bar |    |    |    | ft2        | 
(10 rows)

--Testcase 492:
EXPLAIN (verbose, costs off)
UPDATE ft2__postgres_srv__0 SET c3 = 'baz'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2__postgres_srv__0.c1 > 2000 AND ft2__postgres_srv__0.c2 === ft4.c1
  RETURNING ft2__postgres_srv__0.*, ft4.*, ft5.*;                                                    -- can't be pushed down
                                                                                                                                           QUERY PLAN                                                                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2__postgres_srv__0
   Output: ft2__postgres_srv__0.c1, ft2__postgres_srv__0.c2, ft2__postgres_srv__0.c3, ft2__postgres_srv__0.c4, ft2__postgres_srv__0.c5, ft2__postgres_srv__0.c6, ft2__postgres_srv__0.c7, ft2__postgres_srv__0.c8, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url
   Remote SQL: UPDATE "S 1"."T 1" SET c3 = $2 WHERE ctid = $1 RETURNING "C 1", c2, c3, c4, c5, c6, c7, c8
   ->  Nested Loop
         Output: 'baz'::text, ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.*, ft4.*, ft5.*, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url
         Join Filter: (ft2__postgres_srv__0.c2 === ft4.c1)
         ->  Merge Join
               Output: ft4.*, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft5.*, ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url
               Merge Cond: (ft4.c1 = ft5.c1)
               ->  Sort
                     Output: ft4.*, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.*, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3"
               ->  Sort
                     Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url
                     Sort Key: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
         ->  Materialize
               Output: ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.*, ft2__postgres_srv__0.c2
               ->  Foreign Scan on public.ft2__postgres_srv__0
                     Output: ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.*, ft2__postgres_srv__0.c2
                     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" WHERE (("C 1" > 2000)) FOR UPDATE
(28 rows)

--Testcase 493:
UPDATE ft2__postgres_srv__0 SET c3 = 'baz'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2__postgres_srv__0.c1 > 2000 AND ft2__postgres_srv__0.c2 === ft4.c1
  RETURNING ft2__postgres_srv__0.*, ft4.*, ft5.*;
  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 | c1 | c2 |   c3   |   __spd_url    | c1 | c2 |   c3   |   __spd_url    
------+----+-----+----+----+----+------------+----+----+----+--------+----------------+----+----+--------+----------------
 2006 |  6 | baz |    |    |    | ft2        |    |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/
(1 row)

--Testcase 494:
EXPLAIN (verbose, costs off)
DELETE FROM ft2__postgres_srv__0
  USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
  WHERE ft2__postgres_srv__0.c1 > 2000 AND ft2__postgres_srv__0.c2 = ft4.c1
  RETURNING ft2__postgres_srv__0.c1, ft2__postgres_srv__0.c2, ft2__postgres_srv__0.c3;       -- can't be pushed down
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Delete on public.ft2__postgres_srv__0
   Output: ft2__postgres_srv__0.c1, ft2__postgres_srv__0.c2, ft2__postgres_srv__0.c3
   Remote SQL: DELETE FROM "S 1"."T 1" WHERE ctid = $1 RETURNING "C 1", c2, c3
   ->  Nested Loop
         Output: ft2__postgres_srv__0.ctid, ft4.*, ft5.*
         Join Filter: (ft4.c1 === ft5.c1)
         ->  Merge Join
               Output: ft2__postgres_srv__0.ctid, ft4.*, ft4.c1
               Merge Cond: (ft2__postgres_srv__0.c2 = ft4.c1)
               ->  Sort
                     Output: ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.c2
                     Sort Key: ft2__postgres_srv__0.c2
                     ->  Foreign Scan on public.ft2__postgres_srv__0
                           Output: ft2__postgres_srv__0.ctid, ft2__postgres_srv__0.c2
                           Remote SQL: SELECT c2, ctid FROM "S 1"."T 1" WHERE (("C 1" > 2000)) FOR UPDATE
               ->  Sort
                     Output: ft4.*, ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.*, ft4.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3"
         ->  Materialize
               Output: ft5.*, ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.*, ft5.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
(28 rows)

--Testcase 495:
DELETE FROM ft2__postgres_srv__0
  USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
  WHERE ft2__postgres_srv__0.c1 > 2000 AND ft2__postgres_srv__0.c2 = ft4.c1
  RETURNING ft2__postgres_srv__0.c1, ft2__postgres_srv__0.c2, ft2__postgres_srv__0.c3;
  c1  | c2 | c3  
------+----+-----
 2006 |  6 | baz
(1 row)

-- DELETE FROM ft2 WHERE ft2.c1 > 2000;
--Testcase 496:
DELETE FROM ft2__postgres_srv__0 WHERE ft2__postgres_srv__0.c1 > 2000;
--Testcase 497:
ALTER SERVER postgres_srv OPTIONS (ADD extensions 'postgres_fdw');
-- Test that trigger on remote table works as expected
--Testcase 498:
CREATE OR REPLACE FUNCTION "S 1".F_BRTRIG() RETURNS trigger AS $$
BEGIN
    NEW.c3 = NEW.c3 || '_trig_update';
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
--Testcase 499:
CREATE TRIGGER t1_br_insert BEFORE INSERT OR UPDATE
    ON "S 1"."T 1" FOR EACH ROW EXECUTE PROCEDURE "S 1".F_BRTRIG();
--Testcase 500:
SELECT dblink_exec('CREATE TRIGGER t1_br_insert BEFORE INSERT OR UPDATE
    ON "S 1"."T 1" FOR EACH ROW EXECUTE PROCEDURE "S 1".F_BRTRIG();');
  dblink_exec   
----------------
 CREATE TRIGGER
(1 row)

--Testcase 501:
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3) VALUES (1208, 818, 'fff') RETURNING *;
  c1  | c2  |       c3        | c4 | c5 | c6 |     c7     | c8 
------+-----+-----------------+----+----+----+------------+----
 1208 | 818 | fff_trig_update |    |    |    | ft2        | 
(1 row)

--Testcase 502:
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3,c6) VALUES (1218, 818, 'ggg', '(--;') RETURNING *;
  c1  | c2  |       c3        | c4 | c5 |  c6  |     c7     | c8 
------+-----+-----------------+----+----+------+------------+----
 1218 | 818 | ggg_trig_update |    |    | (--; | ft2        | 
(1 row)

--Testcase 503:
UPDATE ft2__postgres_srv__0 SET c2 = c2 + 600 WHERE c1 % 10 = 8 AND c1 < 1200 RETURNING *;
  c1  | c2  |           c3           |              c4              |            c5            | c6 |     c7     | c8  
------+-----+------------------------+------------------------------+--------------------------+----+------------+-----
    8 | 608 | 00008_trig_update      | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
   18 | 608 | 00018_trig_update      | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
   28 | 608 | 00028_trig_update      | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
   38 | 608 | 00038_trig_update      | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
   48 | 608 | 00048_trig_update      | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
   58 | 608 | 00058_trig_update      | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
   68 | 608 | 00068_trig_update      | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
   78 | 608 | 00078_trig_update      | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
   88 | 608 | 00088_trig_update      | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
   98 | 608 | 00098_trig_update      | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
  108 | 608 | 00108_trig_update      | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
  118 | 608 | 00118_trig_update      | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
  128 | 608 | 00128_trig_update      | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
  138 | 608 | 00138_trig_update      | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
  148 | 608 | 00148_trig_update      | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
  158 | 608 | 00158_trig_update      | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
  168 | 608 | 00168_trig_update      | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
  178 | 608 | 00178_trig_update      | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
  188 | 608 | 00188_trig_update      | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
  198 | 608 | 00198_trig_update      | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
  208 | 608 | 00208_trig_update      | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
  218 | 608 | 00218_trig_update      | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
  228 | 608 | 00228_trig_update      | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
  238 | 608 | 00238_trig_update      | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
  248 | 608 | 00248_trig_update      | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
  258 | 608 | 00258_trig_update      | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
  268 | 608 | 00268_trig_update      | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
  278 | 608 | 00278_trig_update      | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
  288 | 608 | 00288_trig_update      | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
  298 | 608 | 00298_trig_update      | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
  308 | 608 | 00308_trig_update      | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
  318 | 608 | 00318_trig_update      | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
  328 | 608 | 00328_trig_update      | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
  338 | 608 | 00338_trig_update      | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
  348 | 608 | 00348_trig_update      | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
  358 | 608 | 00358_trig_update      | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
  368 | 608 | 00368_trig_update      | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
  378 | 608 | 00378_trig_update      | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
  388 | 608 | 00388_trig_update      | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
  398 | 608 | 00398_trig_update      | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
  408 | 608 | 00408_trig_update      | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
  418 | 608 | 00418_trig_update      | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
  428 | 608 | 00428_trig_update      | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
  438 | 608 | 00438_trig_update      | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
  448 | 608 | 00448_trig_update      | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
  458 | 608 | 00458_trig_update      | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
  468 | 608 | 00468_trig_update      | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
  478 | 608 | 00478_trig_update      | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
  488 | 608 | 00488_trig_update      | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
  498 | 608 | 00498_trig_update      | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
  508 | 608 | 00508_trig_update      | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
  518 | 608 | 00518_trig_update      | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
  528 | 608 | 00528_trig_update      | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
  538 | 608 | 00538_trig_update      | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
  548 | 608 | 00548_trig_update      | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
  558 | 608 | 00558_trig_update      | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
  568 | 608 | 00568_trig_update      | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
  578 | 608 | 00578_trig_update      | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
  588 | 608 | 00588_trig_update      | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
  598 | 608 | 00598_trig_update      | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
  608 | 608 | 00608_trig_update      | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
  618 | 608 | 00618_trig_update      | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
  628 | 608 | 00628_trig_update      | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
  638 | 608 | 00638_trig_update      | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
  648 | 608 | 00648_trig_update      | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
  658 | 608 | 00658_trig_update      | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
  668 | 608 | 00668_trig_update      | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
  678 | 608 | 00678_trig_update      | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
  688 | 608 | 00688_trig_update      | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
  698 | 608 | 00698_trig_update      | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
  708 | 608 | 00708_trig_update      | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
  718 | 608 | 00718_trig_update      | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
  728 | 608 | 00728_trig_update      | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
  738 | 608 | 00738_trig_update      | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
  748 | 608 | 00748_trig_update      | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
  758 | 608 | 00758_trig_update      | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
  768 | 608 | 00768_trig_update      | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
  778 | 608 | 00778_trig_update      | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
  788 | 608 | 00788_trig_update      | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
  798 | 608 | 00798_trig_update      | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
  808 | 608 | 00808_trig_update      | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
  818 | 608 | 00818_trig_update      | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
  828 | 608 | 00828_trig_update      | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
  838 | 608 | 00838_trig_update      | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
  848 | 608 | 00848_trig_update      | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
  858 | 608 | 00858_trig_update      | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
  868 | 608 | 00868_trig_update      | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
  878 | 608 | 00878_trig_update      | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
  888 | 608 | 00888_trig_update      | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
  898 | 608 | 00898_trig_update      | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
  908 | 608 | 00908_trig_update      | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
  918 | 608 | 00918_trig_update      | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
  928 | 608 | 00928_trig_update      | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
  938 | 608 | 00938_trig_update      | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
  948 | 608 | 00948_trig_update      | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
  958 | 608 | 00958_trig_update      | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
  968 | 608 | 00968_trig_update      | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
  978 | 608 | 00978_trig_update      | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
  988 | 608 | 00988_trig_update      | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
  998 | 608 | 00998_trig_update      | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
 1008 | 708 | 0000800008_trig_update |                              |                          |    | ft2        | 
 1018 | 708 | 0001800018_trig_update |                              |                          |    | ft2        | 
(102 rows)

-- Test errors thrown on remote side during update
--Testcase 504:
ALTER TABLE "S 1"."T 1" ADD CONSTRAINT c2positive CHECK (c2 >= 0);
--Testcase 505:
SELECT dblink_exec('ALTER TABLE "S 1"."T 1" ADD CONSTRAINT c2positive CHECK (c2 >= 0);');
 dblink_exec 
-------------
 ALTER TABLE
(1 row)

--Testcase 506:
INSERT INTO ft1__postgres_srv__0(c1, c2) VALUES(11, 12);  -- duplicate key
ERROR:  duplicate key value violates unique constraint "t1_pkey"
DETAIL:  Key ("C 1")=(11) already exists.
CONTEXT:  remote SQL command: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
--Testcase 507:
INSERT INTO ft1__postgres_srv__0(c1, c2) VALUES(11, 12) ON CONFLICT DO NOTHING; -- works
--Testcase 508:
INSERT INTO ft1__postgres_srv__0(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO NOTHING; -- unsupported
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--Testcase 509:
INSERT INTO ft1__postgres_srv__0(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO UPDATE SET c3 = 'ffg'; -- unsupported
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--Testcase 510:
INSERT INTO ft1__postgres_srv__0(c1, c2) VALUES(1111, -2);  -- c2positive
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (1111, -2, null, null, null, null, ft1       , null).
CONTEXT:  remote SQL command: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
--Testcase 511:
UPDATE ft1__postgres_srv__0 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (1, -1, 00001_trig_update, 1970-01-02 08:00:00+00, 1970-01-02 00:00:00, 1, 1         , foo).
CONTEXT:  remote SQL command: UPDATE "S 1"."T 1" SET c2 = (- c2) WHERE (("C 1" = 1))
-- Test savepoint/rollback behavior
--Testcase 512:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   0 |   100
   1 |   100
   4 |   100
   6 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

--Testcase 513:
select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   0 |   100
   1 |   100
   4 |   100
   6 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

begin;
--Testcase 514:
update ft2__postgres_srv__0 set c2 = 42 where c2 = 0;
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
--Testcase 515:
select c2, count(*) from ft2__postgres_srv__0 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   4 |   100
   6 |   100
  42 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

savepoint s1;
--Testcase 516:
update ft2__postgres_srv__0 set c2 = 44 where c2 = 4;
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
--Testcase 517:
select c2, count(*) from ft2__postgres_srv__0 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

release savepoint s1;
--Testcase 518:
select c2, count(*) from ft2__postgres_srv__0 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

savepoint s2;
--Testcase 519:
update ft2__postgres_srv__0 set c2 = 46 where c2 = 6;
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
--Testcase 520:
select c2, count(*) from ft2__postgres_srv__0 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
  42 |   100
  44 |   100
  46 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

rollback to savepoint s2;
--Testcase 521:
select c2, count(*) from ft2__postgres_srv__0 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

release savepoint s2;
--Testcase 522:
select c2, count(*) from ft2__postgres_srv__0 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

savepoint s3;
--Testcase 523:
update ft2__postgres_srv__0 set c2 = -2 where c2 = 42 and c1 = 10; -- fail on remote side
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (10, -2, 00010_trig_update_trig_update, 1970-01-11 08:00:00+00, 1970-01-11 00:00:00, 0, 0         , foo).
CONTEXT:  remote SQL command: UPDATE "S 1"."T 1" SET c2 = (-2) WHERE ((c2 = 42)) AND (("C 1" = 10))
rollback to savepoint s3;
--Testcase 524:
select c2, count(*) from ft2__postgres_srv__0 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

release savepoint s3;
--Testcase 525:
select c2, count(*) from ft2__postgres_srv__0 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- none of the above is committed yet remotely
--Testcase 526:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   0 |   100
   1 |   100
   4 |   100
   6 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

commit;
--Testcase 527:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

--Testcase 528:
select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- VACUUM ANALYZE "S 1"."T 1";
-- Above DMLs add data with c6 as NULL in ft1, so test ORDER BY NULLS LAST and NULLs
-- FIRST behavior here.
-- ORDER BY DESC NULLS LAST options
--Testcase 529:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795 LIMIT 10;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c6 DESC NULLS LAST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 795::bigint
(6 rows)

--Testcase 530:
SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795  LIMIT 10;
  c1  | c2  |         c3         |              c4              |            c5            |  c6  |     c7     | c8  |   __spd_url    
------+-----+--------------------+------------------------------+--------------------------+------+------------+-----+----------------
  960 |  42 | 00960_trig_update  | Mon Mar 02 00:00:00 1970 PST | Mon Mar 02 00:00:00 1970 | 0    | 0          | foo | /postgres_srv/
  970 |  42 | 00970_trig_update  | Thu Mar 12 00:00:00 1970 PST | Thu Mar 12 00:00:00 1970 | 0    | 0          | foo | /postgres_srv/
  980 |  42 | 00980_trig_update  | Sun Mar 22 00:00:00 1970 PST | Sun Mar 22 00:00:00 1970 | 0    | 0          | foo | /postgres_srv/
  990 |  42 | 00990_trig_update  | Wed Apr 01 00:00:00 1970 PST | Wed Apr 01 00:00:00 1970 | 0    | 0          | foo | /postgres_srv/
 1000 |  42 | 01000_trig_update  | Thu Jan 01 00:00:00 1970 PST | Thu Jan 01 00:00:00 1970 | 0    | 0          | foo | /postgres_srv/
 1218 | 818 | ggg_trig_update    |                              |                          | (--; | ft2        |     | /postgres_srv/
 1001 | 101 | 0000100001         |                              |                          |      | ft2        |     | /postgres_srv/
 1003 | 403 | 0000300003_update3 |                              |                          |      | ft2        |     | /postgres_srv/
 1004 | 104 | 0000400004         |                              |                          |      | ft2        |     | /postgres_srv/
 1006 | 106 | 0000600006         |                              |                          |      | ft2        |     | /postgres_srv/
(10 rows)

-- ORDER BY DESC NULLS FIRST options
--Testcase 531:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c6 DESC NULLS FIRST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 15::bigint
(6 rows)

--Testcase 532:
SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
  c1  | c2  |       c3        |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
------+-----+-----------------+------------------------------+--------------------------+----+------------+-----+----------------
 1020 | 100 | 0002000020      |                              |                          |    | ft2        |     | /postgres_srv/
 1101 | 201 | aaa             |                              |                          |    | ft2        |     | /postgres_srv/
 1103 | 503 | ccc_update3     |                              |                          |    | ft2        |     | /postgres_srv/
 1104 | 204 | ddd             |                              |                          |    | ft2        |     | /postgres_srv/
 1208 | 818 | fff_trig_update |                              |                          |    | ft2        |     | /postgres_srv/
    9 | 509 | 00009_update9   | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | ft2        | foo | /postgres_srv/
   19 | 509 | 00019_update9   | Tue Jan 20 00:00:00 1970 PST | Tue Jan 20 00:00:00 1970 | 9  | ft2        | foo | /postgres_srv/
   29 | 509 | 00029_update9   | Fri Jan 30 00:00:00 1970 PST | Fri Jan 30 00:00:00 1970 | 9  | ft2        | foo | /postgres_srv/
   39 | 509 | 00039_update9   | Mon Feb 09 00:00:00 1970 PST | Mon Feb 09 00:00:00 1970 | 9  | ft2        | foo | /postgres_srv/
   49 | 509 | 00049_update9   | Thu Feb 19 00:00:00 1970 PST | Thu Feb 19 00:00:00 1970 | 9  | ft2        | foo | /postgres_srv/
(10 rows)

-- ORDER BY ASC NULLS FIRST options
--Testcase 533:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Limit push-down: yes
     Sort push-down: yes
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c6 ASC NULLS FIRST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 15::bigint
(6 rows)

--Testcase 534:
SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
  c1  | c2  |        c3         |              c4              |            c5            |  c6  |     c7     | c8  |   __spd_url    
------+-----+-------------------+------------------------------+--------------------------+------+------------+-----+----------------
 1020 | 100 | 0002000020        |                              |                          |      | ft2        |     | /postgres_srv/
 1101 | 201 | aaa               |                              |                          |      | ft2        |     | /postgres_srv/
 1103 | 503 | ccc_update3       |                              |                          |      | ft2        |     | /postgres_srv/
 1104 | 204 | ddd               |                              |                          |      | ft2        |     | /postgres_srv/
 1208 | 818 | fff_trig_update   |                              |                          |      | ft2        |     | /postgres_srv/
 1218 | 818 | ggg_trig_update   |                              |                          | (--; | ft2        |     | /postgres_srv/
   10 |  42 | 00010_trig_update | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0    | 0          | foo | /postgres_srv/
   20 |  42 | 00020_trig_update | Wed Jan 21 00:00:00 1970 PST | Wed Jan 21 00:00:00 1970 | 0    | 0          | foo | /postgres_srv/
   30 |  42 | 00030_trig_update | Sat Jan 31 00:00:00 1970 PST | Sat Jan 31 00:00:00 1970 | 0    | 0          | foo | /postgres_srv/
   40 |  42 | 00040_trig_update | Tue Feb 10 00:00:00 1970 PST | Tue Feb 10 00:00:00 1970 | 0    | 0          | foo | /postgres_srv/
(10 rows)

-- ===================================================================
-- test check constraints
-- ===================================================================
-- Consistent check constraints provide consistent results
--Testcase 535:
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2positive CHECK (c2 >= 0);
--Testcase 536:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan
   Output: (count(*))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1)
     Remote SQL: SELECT count(*) FROM "S 1"."T 1" WHERE ((c2 < 0))
(6 rows)

--Testcase 537:
SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

--Testcase 538:
SET constraint_exclusion = 'on';
--Testcase 539:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

--Testcase 540:
SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

--Testcase 541:
RESET constraint_exclusion;
-- check constraint is enforced on the remote side, not locally
--Testcase 542:
INSERT INTO ft1__postgres_srv__0(c1, c2) VALUES(1111, -2);  -- c2positive
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (1111, -2, null, null, null, null, ft1       , null).
CONTEXT:  remote SQL command: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
--Testcase 543:
UPDATE ft1__postgres_srv__0 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (1, -1, 00001_trig_update, 1970-01-02 08:00:00+00, 1970-01-02 00:00:00, 1, 1         , foo).
CONTEXT:  remote SQL command: UPDATE "S 1"."T 1" SET c2 = (- c2) WHERE (("C 1" = 1))
--Testcase 544:
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2positive;
-- But inconsistent check constraints provide inconsistent results
--Testcase 545:
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2negative CHECK (c2 < 0);
--Testcase 546:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan
   Output: (count(*))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1)
     Remote SQL: SELECT count(*) FROM "S 1"."T 1" WHERE ((c2 >= 0))
(6 rows)

--Testcase 547:
SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
   821
(1 row)

--Testcase 548:
SET constraint_exclusion = 'on';
--Testcase 549:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

--Testcase 550:
SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
     0
(1 row)

--Testcase 551:
RESET constraint_exclusion;
-- local check constraint is not actually enforced
--Testcase 552:
INSERT INTO ft1__postgres_srv__0(c1, c2) VALUES(1111, 2);
--Testcase 553:
UPDATE ft1__postgres_srv__0 SET c2 = c2 + 1 WHERE c1 = 1;
--Testcase 554:
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2negative;
-- ===================================================================
-- test WITH CHECK OPTION constraints
-- ===================================================================
--Testcase 555:
CREATE FUNCTION row_before_insupd_trigfunc() RETURNS trigger AS $$BEGIN NEW.a := NEW.a + 10; RETURN NEW; END$$ LANGUAGE plpgsql;
--Testcase 556:
SELECT dblink_exec('CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON base_tbl
  FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();');
  dblink_exec   
----------------
 CREATE TRIGGER
(1 row)

--Testcase 557:
CREATE FOREIGN TABLE foreign_tbl (a int, b int, __spd_url text)
  SERVER pgspider_srv;
--Testcase 558:
CREATE FOREIGN TABLE foreign_tbl__postgres_srv__0 (a int, b int)
  SERVER postgres_srv OPTIONS(table_name 'base_tbl');
--Testcase 559:
CREATE VIEW rw_view AS SELECT * FROM foreign_tbl
  WHERE a < b WITH CHECK OPTION;
--Testcase 560:
\d+ rw_view
                             View "public.rw_view"
  Column   |  Type   | Collation | Nullable | Default | Storage  | Description 
-----------+---------+-----------+----------+---------+----------+-------------
 a         | integer |           |          |         | plain    | 
 b         | integer |           |          |         | plain    | 
 __spd_url | text    |           |          |         | extended | 
View definition:
 SELECT foreign_tbl.a,
    foreign_tbl.b,
    foreign_tbl.__spd_url
   FROM foreign_tbl
  WHERE foreign_tbl.a < foreign_tbl.b;
Options: check_option=cascaded

--EXPLAIN (VERBOSE, COSTS OFF)
--INSERT INTO rw_view VALUES (0, 5);
--INSERT INTO rw_view VALUES (0, 5); -- should fail
--EXPLAIN (VERBOSE, COSTS OFF)
--INSERT INTO rw_view VALUES (0, 15);
--INSERT INTO rw_view VALUES (0, 15); -- ok
--SELECT * FROM foreign_tbl;
--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = b + 5;
--UPDATE rw_view SET b = b + 5; -- should fail
--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = b + 15;
--UPDATE rw_view SET b = b + 15; -- ok
--SELECT * FROM foreign_tbl;
-- -- We don't allow batch insert when there are any WCO constraints
-- ALTER SERVER postgres_srv OPTIONS (ADD batch_size '10');
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO rw_view VALUES (0, 15), (0, 5);
-- INSERT INTO rw_view VALUES (0, 15), (0, 5); -- should fail
-- SELECT * FROM foreign_tbl;
-- ALTER SERVER postgres_srv OPTIONS (DROP batch_size);
--Testcase 561:
DROP FOREIGN TABLE foreign_tbl CASCADE;
NOTICE:  drop cascades to view rw_view
--Testcase 562:
DROP FOREIGN TABLE foreign_tbl__postgres_srv__0 CASCADE;
--Testcase 563:
SELECT dblink_exec('DROP TRIGGER row_before_insupd_trigger ON base_tbl;');
 dblink_exec  
--------------
 DROP TRIGGER
(1 row)

--Testcase 564:
SELECT dblink_exec('DROP TABLE base_tbl;');
 dblink_exec 
-------------
 DROP TABLE
(1 row)

-- test WCO for partitions
--Testcase 565:
SELECT dblink_exec('CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON child_tbl FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();');
  dblink_exec   
----------------
 CREATE TRIGGER
(1 row)

--Testcase 566:
CREATE FOREIGN TABLE foreign_tbl (a int, b int, __spd_url text)
  SERVER pgspider_srv;
--Testcase 567:
CREATE FOREIGN TABLE foreign_tbl__postgres_srv__0 (a int, b int)
  SERVER postgres_srv OPTIONS(table_name 'child_tbl');
--Testcase 568:
CREATE TABLE parent_tbl (a int, b int, __spd_url text) PARTITION BY RANGE(a);
--Testcase 569:
ALTER TABLE parent_tbl ATTACH PARTITION foreign_tbl FOR VALUES FROM (0) TO (100);
-- Detach and re-attach once, to stress the concurrent detach case.
ALTER TABLE parent_tbl DETACH PARTITION foreign_tbl CONCURRENTLY;
ALTER TABLE parent_tbl ATTACH PARTITION foreign_tbl FOR VALUES FROM (0) TO (100);
--Testcase 570:
CREATE VIEW rw_view AS SELECT * FROM parent_tbl
  WHERE a < b WITH CHECK OPTION;
--Testcase 571:
\d+ rw_view
                             View "public.rw_view"
  Column   |  Type   | Collation | Nullable | Default | Storage  | Description 
-----------+---------+-----------+----------+---------+----------+-------------
 a         | integer |           |          |         | plain    | 
 b         | integer |           |          |         | plain    | 
 __spd_url | text    |           |          |         | extended | 
View definition:
 SELECT parent_tbl.a,
    parent_tbl.b,
    parent_tbl.__spd_url
   FROM parent_tbl
  WHERE parent_tbl.a < parent_tbl.b;
Options: check_option=cascaded

--EXPLAIN (VERBOSE, COSTS OFF)
--INSERT INTO rw_view VALUES (0, 5);
--INSERT INTO rw_view VALUES (0, 5); -- should fail
--EXPLAIN (VERBOSE, COSTS OFF)
--INSERT INTO rw_view VALUES (0, 15);
--INSERT INTO rw_view VALUES (0, 15); -- ok
--SELECT * FROM foreign_tbl;
--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = b + 5;
--UPDATE rw_view SET b = b + 5; -- should fail
--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = b + 15;
--UPDATE rw_view SET b = b + 15; -- ok
--SELECT * FROM foreign_tbl;
-- -- We don't allow batch insert when there are any WCO constraints
-- ALTER SERVER postgres_srv OPTIONS (ADD batch_size '10');
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO rw_view VALUES (0, 15), (0, 5);
-- INSERT INTO rw_view VALUES (0, 15), (0, 5); -- should fail
-- SELECT * FROM foreign_tbl;
-- ALTER SERVER postgres_srv OPTIONS (DROP batch_size);
--Testcase 572:
DROP FOREIGN TABLE foreign_tbl CASCADE;
--Testcase 573:
DROP FOREIGN TABLE foreign_tbl__postgres_srv__0 CASCADE;
--Testcase 574:
SELECT dblink_exec('DROP TRIGGER row_before_insupd_trigger ON child_tbl;');
 dblink_exec  
--------------
 DROP TRIGGER
(1 row)

--Testcase 575:
DROP TABLE parent_tbl CASCADE;
NOTICE:  drop cascades to view rw_view
--Testcase 576:
DROP FUNCTION row_before_insupd_trigfunc;
-- ===================================================================
-- test serial columns (ie, sequence-based defaults)
-- ===================================================================
--Testcase 577:
create foreign table rem1 (f1 serial, f2 text, __spd_url text)
  server pgspider_srv;
--Testcase 578:
create foreign table rem1__postgres_srv__0 (f1 serial, f2 text)
  server postgres_srv options(table_name 'loc1_1');
--Testcase 579:
select pg_catalog.setval('rem1__postgres_srv__0_f1_seq', 10, false);
 setval 
--------
     10
(1 row)

--Testcase 580:
select dblink_exec('insert into loc1_1(f2) values(''hi'');');
 dblink_exec 
-------------
 INSERT 0 1
(1 row)

--Testcase 581:
insert into rem1__postgres_srv__0(f2) values('hi remote');
--Testcase 582:
select dblink_exec('insert into loc1_1(f2) values(''bye'');');
 dblink_exec 
-------------
 INSERT 0 1
(1 row)

--Testcase 583:
insert into rem1__postgres_srv__0(f2) values('bye remote');
--Testcase 584:
select * from rem1;
 f1 |     f2     |   __spd_url    
----+------------+----------------
  1 | hi         | /postgres_srv/
 10 | hi remote  | /postgres_srv/
  2 | bye        | /postgres_srv/
 11 | bye remote | /postgres_srv/
(4 rows)

--Testcase 585:
select * from rem1__postgres_srv__0;
 f1 |     f2     
----+------------
  1 | hi
 10 | hi remote
  2 | bye
 11 | bye remote
(4 rows)

-- ===================================================================
-- test generated columns
-- ===================================================================
--Testcase 586:
create foreign table grem1 (
  a int,
  b int generated always as (a * 2) stored,
  __spd_url text)
  server pgspider_srv;
--Testcase 587:
create foreign table grem1__postgres_srv__0 (
  a int,
  b int generated always as (a * 2) stored)
  server postgres_srv options(table_name 'gloc1');
--Testcase 588:
explain (verbose, costs off)
insert into grem1__postgres_srv__0 (a) values (1), (2);
                            QUERY PLAN                             
-------------------------------------------------------------------
 Insert on public.grem1__postgres_srv__0
   Remote SQL: INSERT INTO public.gloc1(a, b) VALUES ($1, DEFAULT)
   Batch Size: 1
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1, NULL::integer
(5 rows)

--Testcase 1205:
insert into grem1__postgres_srv__0 (a) values (1), (2);
--Testcase 589:
explain (verbose, costs off)
update grem1__postgres_srv__0 set a = 22 where a = 2;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Update on public.grem1__postgres_srv__0
   Remote SQL: UPDATE public.gloc1 SET a = $2, b = DEFAULT WHERE ctid = $1
   ->  Foreign Scan on public.grem1__postgres_srv__0
         Output: 22, ctid, grem1__postgres_srv__0.*
         Remote SQL: SELECT a, b, ctid FROM public.gloc1 WHERE ((a = 2)) FOR UPDATE
(5 rows)

--Testcase 1206:
update grem1__postgres_srv__0 set a = 22 where a = 2;
--Testcase 590:
select * from grem1;
 a  | b  |   __spd_url    
----+----+----------------
  1 |  2 | /postgres_srv/
 22 | 44 | /postgres_srv/
(2 rows)

--Testcase 1207:
select * from grem1__postgres_srv__0;
 a  | b  
----+----
  1 |  2
 22 | 44
(2 rows)

--Testcase 1208:
delete from grem1__postgres_srv__0;
-- test copy from
copy grem1__postgres_srv__0 from stdin;
--Testcase 1209:
select * from grem1;
 a | b |   __spd_url    
---+---+----------------
 1 | 2 | /postgres_srv/
 2 | 4 | /postgres_srv/
(2 rows)

--Testcase 1210:
select * from grem1__postgres_srv__0;
 a | b 
---+---
 1 | 2
 2 | 4
(2 rows)

--Testcase 1211:
delete from grem1__postgres_srv__0;
-- test batch insert
alter server postgres_srv options (add batch_size '10');
--Testcase 1212:
explain (verbose, costs off)
insert into grem1__postgres_srv__0 (a) values (1), (2);
                            QUERY PLAN                             
-------------------------------------------------------------------
 Insert on public.grem1__postgres_srv__0
   Remote SQL: INSERT INTO public.gloc1(a, b) VALUES ($1, DEFAULT)
   Batch Size: 10
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1, NULL::integer
(5 rows)

--Testcase 1213:
insert into grem1__postgres_srv__0 (a) values (1), (2);
--Testcase 1214:
select * from grem1;
 a | b |   __spd_url    
---+---+----------------
 1 | 2 | /postgres_srv/
 2 | 4 | /postgres_srv/
(2 rows)

--Testcase 1215:
select * from grem1__postgres_srv__0;
 a | b 
---+---
 1 | 2
 2 | 4
(2 rows)

--Testcase 1216:
delete from grem1__postgres_srv__0;
alter server postgres_srv options (drop batch_size);
-- ===================================================================
-- test local triggers
-- ===================================================================
-- Trigger functions "borrowed" from triggers regress test.
--Testcase 591:
CREATE FUNCTION trigger_func() RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
	RAISE NOTICE 'trigger_func(%) called: action = %, when = %, level = %',
		TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL;
	RETURN NULL;
END;$$;
--Testcase 592:
CREATE TRIGGER trig_stmt_before BEFORE DELETE OR INSERT OR UPDATE ON rem1__postgres_srv__0
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 593:
CREATE TRIGGER trig_stmt_after AFTER DELETE OR INSERT OR UPDATE ON rem1__postgres_srv__0
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 594:
CREATE OR REPLACE FUNCTION trigger_data()  RETURNS trigger
LANGUAGE plpgsql AS $$

declare
	oldnew text[];
	relid text;
    argstr text;
begin

	relid := TG_relid::regclass;
	argstr := '';
	for i in 0 .. TG_nargs - 1 loop
		if i > 0 then
			argstr := argstr || ', ';
		end if;
		argstr := argstr || TG_argv[i];
	end loop;

    RAISE NOTICE '%(%) % % % ON %',
		tg_name, argstr, TG_when, TG_level, TG_OP, relid;
    oldnew := '{}'::text[];
	if TG_OP != 'INSERT' then
		oldnew := array_append(oldnew, format('OLD: %s', OLD));
	end if;

	if TG_OP != 'DELETE' then
		oldnew := array_append(oldnew, format('NEW: %s', NEW));
	end if;

    RAISE NOTICE '%', array_to_string(oldnew, ',');

	if TG_OP = 'DELETE' then
		return OLD;
	else
		return NEW;
	end if;
end;
$$;
-- Test basic functionality
--Testcase 595:
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 596:
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 597:
delete from rem1__postgres_srv__0;
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1__postgres_srv__0
NOTICE:  OLD: (1,hi)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1__postgres_srv__0
NOTICE:  OLD: (10,"hi remote")
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1__postgres_srv__0
NOTICE:  OLD: (2,bye)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1__postgres_srv__0
NOTICE:  OLD: (11,"bye remote")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1__postgres_srv__0
NOTICE:  OLD: (1,hi)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1__postgres_srv__0
NOTICE:  OLD: (10,"hi remote")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1__postgres_srv__0
NOTICE:  OLD: (2,bye)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1__postgres_srv__0
NOTICE:  OLD: (11,"bye remote")
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = AFTER, level = STATEMENT
--Testcase 598:
insert into rem1__postgres_srv__0 values(1,'insert');
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1__postgres_srv__0
NOTICE:  NEW: (1,insert)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1__postgres_srv__0
NOTICE:  NEW: (1,insert)
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = AFTER, level = STATEMENT
--Testcase 599:
update rem1__postgres_srv__0 set f2  = 'update' where f1 = 1;
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON rem1__postgres_srv__0
NOTICE:  OLD: (1,insert),NEW: (1,update)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON rem1__postgres_srv__0
NOTICE:  OLD: (1,insert),NEW: (1,update)
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = AFTER, level = STATEMENT
--Testcase 600:
update rem1__postgres_srv__0 set f2 = f2 || f2;
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON rem1__postgres_srv__0
NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON rem1__postgres_srv__0
NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = AFTER, level = STATEMENT
-- cleanup
--Testcase 601:
DROP TRIGGER trig_row_before ON rem1__postgres_srv__0;
--Testcase 602:
DROP TRIGGER trig_row_after ON rem1__postgres_srv__0;
--Testcase 603:
DROP TRIGGER trig_stmt_before ON rem1__postgres_srv__0;
--Testcase 604:
DROP TRIGGER trig_stmt_after ON rem1__postgres_srv__0;
--Testcase 605:
DELETE from rem1__postgres_srv__0;
-- Test multiple AFTER ROW triggers on a foreign table
--Testcase 606:
CREATE TRIGGER trig_row_after1
AFTER INSERT OR UPDATE OR DELETE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 607:
CREATE TRIGGER trig_row_after2
AFTER INSERT OR UPDATE OR DELETE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 608:
insert into rem1__postgres_srv__0 values(1,'insert');
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW INSERT ON rem1__postgres_srv__0
NOTICE:  NEW: (1,insert)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW INSERT ON rem1__postgres_srv__0
NOTICE:  NEW: (1,insert)
--Testcase 609:
update rem1__postgres_srv__0 set f2  = 'update' where f1 = 1;
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW UPDATE ON rem1__postgres_srv__0
NOTICE:  OLD: (1,insert),NEW: (1,update)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW UPDATE ON rem1__postgres_srv__0
NOTICE:  OLD: (1,insert),NEW: (1,update)
--Testcase 610:
update rem1__postgres_srv__0 set f2 = f2 || f2;
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW UPDATE ON rem1__postgres_srv__0
NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW UPDATE ON rem1__postgres_srv__0
NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
--Testcase 611:
delete from rem1__postgres_srv__0;
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW DELETE ON rem1__postgres_srv__0
NOTICE:  OLD: (1,updateupdate)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW DELETE ON rem1__postgres_srv__0
NOTICE:  OLD: (1,updateupdate)
-- cleanup
--Testcase 612:
DROP TRIGGER trig_row_after1 ON rem1__postgres_srv__0;
--Testcase 613:
DROP TRIGGER trig_row_after2 ON rem1__postgres_srv__0;
-- Test WHEN conditions
--Testcase 614:
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON rem1__postgres_srv__0
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 615:
CREATE TRIGGER trig_row_after_insupd
AFTER INSERT OR UPDATE ON rem1__postgres_srv__0
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Insert or update not matching: nothing happens
--Testcase 616:
INSERT INTO rem1__postgres_srv__0 values(1, 'insert');
--Testcase 617:
UPDATE rem1__postgres_srv__0 set f2 = 'test';
-- Insert or update matching: triggers are fired
--Testcase 618:
INSERT INTO rem1__postgres_srv__0 values(2, 'update');
NOTICE:  trig_row_before_insupd(23, skidoo) BEFORE ROW INSERT ON rem1__postgres_srv__0
NOTICE:  NEW: (2,update)
NOTICE:  trig_row_after_insupd(23, skidoo) AFTER ROW INSERT ON rem1__postgres_srv__0
NOTICE:  NEW: (2,update)
--Testcase 619:
UPDATE rem1__postgres_srv__0 set f2 = 'update update' where f1 = '2';
NOTICE:  trig_row_before_insupd(23, skidoo) BEFORE ROW UPDATE ON rem1__postgres_srv__0
NOTICE:  OLD: (2,update),NEW: (2,"update update")
NOTICE:  trig_row_after_insupd(23, skidoo) AFTER ROW UPDATE ON rem1__postgres_srv__0
NOTICE:  OLD: (2,update),NEW: (2,"update update")
--Testcase 620:
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1__postgres_srv__0
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 621:
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1__postgres_srv__0
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Trigger is fired for f1=2, not for f1=1
--Testcase 622:
DELETE FROM rem1__postgres_srv__0;
NOTICE:  trig_row_before_delete(23, skidoo) BEFORE ROW DELETE ON rem1__postgres_srv__0
NOTICE:  OLD: (2,"update update")
NOTICE:  trig_row_after_delete(23, skidoo) AFTER ROW DELETE ON rem1__postgres_srv__0
NOTICE:  OLD: (2,"update update")
-- cleanup
--Testcase 623:
DROP TRIGGER trig_row_before_insupd ON rem1__postgres_srv__0;
--Testcase 624:
DROP TRIGGER trig_row_after_insupd ON rem1__postgres_srv__0;
--Testcase 625:
DROP TRIGGER trig_row_before_delete ON rem1__postgres_srv__0;
--Testcase 626:
DROP TRIGGER trig_row_after_delete ON rem1__postgres_srv__0;
-- Test various RETURN statements in BEFORE triggers.
--Testcase 627:
CREATE FUNCTION trig_row_before_insupdate() RETURNS TRIGGER AS $$
  BEGIN
    NEW.f2 := NEW.f2 || ' triggered !';
    RETURN NEW;
  END
$$ language plpgsql;
--Testcase 628:
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- The new values should have 'triggered' appended
--Testcase 629:
INSERT INTO rem1__postgres_srv__0 values(1, 'insert');
--Testcase 630:
SELECT * from rem1;
 f1 |         f2         |   __spd_url    
----+--------------------+----------------
  1 | insert triggered ! | /postgres_srv/
(1 row)

--Testcase 631:
INSERT INTO rem1__postgres_srv__0 values(2, 'insert') RETURNING f2;
         f2         
--------------------
 insert triggered !
(1 row)

--Testcase 632:
SELECT * from rem1;
 f1 |         f2         |   __spd_url    
----+--------------------+----------------
  1 | insert triggered ! | /postgres_srv/
  2 | insert triggered ! | /postgres_srv/
(2 rows)

--Testcase 633:
UPDATE rem1__postgres_srv__0 set f2 = '';
--Testcase 634:
SELECT * from rem1;
 f1 |      f2      |   __spd_url    
----+--------------+----------------
  1 |  triggered ! | /postgres_srv/
  2 |  triggered ! | /postgres_srv/
(2 rows)

--Testcase 635:
UPDATE rem1__postgres_srv__0 set f2 = 'skidoo' RETURNING f2;
         f2         
--------------------
 skidoo triggered !
 skidoo triggered !
(2 rows)

--Testcase 636:
SELECT * from rem1;
 f1 |         f2         |   __spd_url    
----+--------------------+----------------
  1 | skidoo triggered ! | /postgres_srv/
  2 | skidoo triggered ! | /postgres_srv/
(2 rows)

--Testcase 637:
EXPLAIN (verbose, costs off)
UPDATE rem1__postgres_srv__0 set f1 = 10;          -- all columns should be transmitted
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Update on public.rem1__postgres_srv__0
   Remote SQL: UPDATE public.loc1_1 SET f1 = $2, f2 = $3 WHERE ctid = $1
   ->  Foreign Scan on public.rem1__postgres_srv__0
         Output: 10, ctid, rem1__postgres_srv__0.*
         Remote SQL: SELECT f1, f2, ctid FROM public.loc1_1 FOR UPDATE
(5 rows)

--Testcase 638:
UPDATE rem1__postgres_srv__0 set f1 = 10;
--Testcase 639:
SELECT * from rem1;
 f1 |               f2               |   __spd_url    
----+--------------------------------+----------------
 10 | skidoo triggered ! triggered ! | /postgres_srv/
 10 | skidoo triggered ! triggered ! | /postgres_srv/
(2 rows)

--Testcase 640:
DELETE FROM rem1__postgres_srv__0;
-- Add a second trigger, to check that the changes are propagated correctly
-- from trigger to trigger
--Testcase 641:
CREATE TRIGGER trig_row_before_insupd2
BEFORE INSERT OR UPDATE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
--Testcase 642:
INSERT INTO rem1__postgres_srv__0 values(1, 'insert');
--Testcase 643:
SELECT * from rem1;
 f1 |               f2               |   __spd_url    
----+--------------------------------+----------------
  1 | insert triggered ! triggered ! | /postgres_srv/
(1 row)

--Testcase 644:
INSERT INTO rem1__postgres_srv__0 values(2, 'insert') RETURNING f2;
               f2               
--------------------------------
 insert triggered ! triggered !
(1 row)

--Testcase 645:
SELECT * from rem1;
 f1 |               f2               |   __spd_url    
----+--------------------------------+----------------
  1 | insert triggered ! triggered ! | /postgres_srv/
  2 | insert triggered ! triggered ! | /postgres_srv/
(2 rows)

--Testcase 646:
UPDATE rem1__postgres_srv__0 set f2 = '';
--Testcase 647:
SELECT * from rem1;
 f1 |            f2            |   __spd_url    
----+--------------------------+----------------
  1 |  triggered ! triggered ! | /postgres_srv/
  2 |  triggered ! triggered ! | /postgres_srv/
(2 rows)

--Testcase 648:
UPDATE rem1__postgres_srv__0 set f2 = 'skidoo' RETURNING f2;
               f2               
--------------------------------
 skidoo triggered ! triggered !
 skidoo triggered ! triggered !
(2 rows)

--Testcase 649:
SELECT * from rem1;
 f1 |               f2               |   __spd_url    
----+--------------------------------+----------------
  1 | skidoo triggered ! triggered ! | /postgres_srv/
  2 | skidoo triggered ! triggered ! | /postgres_srv/
(2 rows)

--Testcase 650:
DROP TRIGGER trig_row_before_insupd ON rem1__postgres_srv__0;
--Testcase 651:
DROP TRIGGER trig_row_before_insupd2 ON rem1__postgres_srv__0;
--Testcase 652:
DELETE from rem1__postgres_srv__0;
--Testcase 653:
INSERT INTO rem1__postgres_srv__0 VALUES (1, 'test');
-- Test with a trigger returning NULL
--Testcase 654:
CREATE FUNCTION trig_null() RETURNS TRIGGER AS $$
  BEGIN
    RETURN NULL;
  END
$$ language plpgsql;
--Testcase 655:
CREATE TRIGGER trig_null
BEFORE INSERT OR UPDATE OR DELETE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trig_null();
-- Nothing should have changed.
--Testcase 656:
INSERT INTO rem1__postgres_srv__0 VALUES (2, 'test2');
--Testcase 657:
SELECT * from rem1;
 f1 |  f2  |   __spd_url    
----+------+----------------
  1 | test | /postgres_srv/
(1 row)

--Testcase 658:
UPDATE rem1__postgres_srv__0 SET f2 = 'test2';
--Testcase 659:
SELECT * from rem1;
 f1 |  f2  |   __spd_url    
----+------+----------------
  1 | test | /postgres_srv/
(1 row)

--Testcase 660:
DELETE from rem1__postgres_srv__0;
--Testcase 661:
SELECT * from rem1;
 f1 |  f2  |   __spd_url    
----+------+----------------
  1 | test | /postgres_srv/
(1 row)

--Testcase 662:
DROP TRIGGER trig_null ON rem1__postgres_srv__0;
--Testcase 663:
DELETE from rem1__postgres_srv__0;
-- Test a combination of local and remote triggers
--Testcase 664:
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 665:
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 666:
CREATE TRIGGER trig_local_before BEFORE INSERT OR UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
--Testcase 667:
INSERT INTO rem1__postgres_srv__0(f2) VALUES ('test');
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1__postgres_srv__0
NOTICE:  NEW: (12,test)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1__postgres_srv__0
NOTICE:  NEW: (12,test)
--Testcase 668:
UPDATE rem1__postgres_srv__0 SET f2 = 'testo';
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON rem1__postgres_srv__0
NOTICE:  OLD: (12,test),NEW: (12,testo)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON rem1__postgres_srv__0
NOTICE:  OLD: (12,test),NEW: (12,testo)
-- Test returning a system attribute
--Testcase 669:
INSERT INTO rem1__postgres_srv__0(f2) VALUES ('test') RETURNING ctid;
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1__postgres_srv__0
NOTICE:  NEW: (13,test)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1__postgres_srv__0
NOTICE:  NEW: (13,test)
  ctid  
--------
 (0,32)
(1 row)

-- cleanup
--Testcase 670:
DROP TRIGGER trig_row_before ON rem1__postgres_srv__0;
--Testcase 671:
DROP TRIGGER trig_row_after ON rem1__postgres_srv__0;
--Testcase 672:
DROP TRIGGER trig_local_before ON rem1__postgres_srv__0;
ERROR:  trigger "trig_local_before" for table "rem1__postgres_srv__0" does not exist
-- Test direct foreign table modification functionality
--Testcase 1217:
EXPLAIN (verbose, costs off)
DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
                      QUERY PLAN                      
------------------------------------------------------
 Delete on public.rem1__postgres_srv__0
   ->  Foreign Delete on public.rem1__postgres_srv__0
         Remote SQL: DELETE FROM public.loc1_1
(3 rows)

--Testcase 1218:
EXPLAIN (verbose, costs off)
DELETE FROM rem1__postgres_srv__0 WHERE false;     -- currently can't be pushed down
                       QUERY PLAN                        
---------------------------------------------------------
 Delete on public.rem1__postgres_srv__0
   Remote SQL: DELETE FROM public.loc1_1 WHERE ctid = $1
   ->  Result
         Output: ctid
         One-Time Filter: false
(5 rows)

-- Test with statement-level triggers
--Testcase 673:
CREATE TRIGGER trig_stmt_before
	BEFORE DELETE OR INSERT OR UPDATE ON rem1__postgres_srv__0
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 674:
EXPLAIN (verbose, costs off)
UPDATE rem1__postgres_srv__0 set f2 = '';          -- can be pushed down
                         QUERY PLAN                         
------------------------------------------------------------
 Update on public.rem1__postgres_srv__0
   ->  Foreign Update on public.rem1__postgres_srv__0
         Remote SQL: UPDATE public.loc1_1 SET f2 = ''::text
(3 rows)

--Testcase 675:
EXPLAIN (verbose, costs off)
DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
                      QUERY PLAN                      
------------------------------------------------------
 Delete on public.rem1__postgres_srv__0
   ->  Foreign Delete on public.rem1__postgres_srv__0
         Remote SQL: DELETE FROM public.loc1_1
(3 rows)

--Testcase 676:
DROP TRIGGER trig_stmt_before ON rem1__postgres_srv__0;
--Testcase 677:
CREATE TRIGGER trig_stmt_after
	AFTER DELETE OR INSERT OR UPDATE ON rem1__postgres_srv__0
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 678:
EXPLAIN (verbose, costs off)
UPDATE rem1__postgres_srv__0 set f2 = '';          -- can be pushed down
                         QUERY PLAN                         
------------------------------------------------------------
 Update on public.rem1__postgres_srv__0
   ->  Foreign Update on public.rem1__postgres_srv__0
         Remote SQL: UPDATE public.loc1_1 SET f2 = ''::text
(3 rows)

--Testcase 679:
EXPLAIN (verbose, costs off)
DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
                      QUERY PLAN                      
------------------------------------------------------
 Delete on public.rem1__postgres_srv__0
   ->  Foreign Delete on public.rem1__postgres_srv__0
         Remote SQL: DELETE FROM public.loc1_1
(3 rows)

--Testcase 680:
DROP TRIGGER trig_stmt_after ON rem1__postgres_srv__0;
-- Test with row-level ON INSERT triggers
--Testcase 681:
CREATE TRIGGER trig_row_before_insert
BEFORE INSERT ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 682:
EXPLAIN (verbose, costs off)
UPDATE rem1__postgres_srv__0 set f2 = '';          -- can be pushed down
                         QUERY PLAN                         
------------------------------------------------------------
 Update on public.rem1__postgres_srv__0
   ->  Foreign Update on public.rem1__postgres_srv__0
         Remote SQL: UPDATE public.loc1_1 SET f2 = ''::text
(3 rows)

--Testcase 683:
EXPLAIN (verbose, costs off)
DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
                      QUERY PLAN                      
------------------------------------------------------
 Delete on public.rem1__postgres_srv__0
   ->  Foreign Delete on public.rem1__postgres_srv__0
         Remote SQL: DELETE FROM public.loc1_1
(3 rows)

--Testcase 684:
DROP TRIGGER trig_row_before_insert ON rem1__postgres_srv__0;
--Testcase 685:
CREATE TRIGGER trig_row_after_insert
AFTER INSERT ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 686:
EXPLAIN (verbose, costs off)
UPDATE rem1__postgres_srv__0 set f2 = '';          -- can be pushed down
                         QUERY PLAN                         
------------------------------------------------------------
 Update on public.rem1__postgres_srv__0
   ->  Foreign Update on public.rem1__postgres_srv__0
         Remote SQL: UPDATE public.loc1_1 SET f2 = ''::text
(3 rows)

--Testcase 687:
EXPLAIN (verbose, costs off)
DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
                      QUERY PLAN                      
------------------------------------------------------
 Delete on public.rem1__postgres_srv__0
   ->  Foreign Delete on public.rem1__postgres_srv__0
         Remote SQL: DELETE FROM public.loc1_1
(3 rows)

--Testcase 688:
DROP TRIGGER trig_row_after_insert ON rem1__postgres_srv__0;
-- Test with row-level ON UPDATE triggers
--Testcase 689:
CREATE TRIGGER trig_row_before_update
BEFORE UPDATE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 690:
EXPLAIN (verbose, costs off)
UPDATE rem1__postgres_srv__0 set f2 = '';          -- can't be pushed down
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Update on public.rem1__postgres_srv__0
   Remote SQL: UPDATE public.loc1_1 SET f1 = $2, f2 = $3 WHERE ctid = $1
   ->  Foreign Scan on public.rem1__postgres_srv__0
         Output: ''::text, ctid, rem1__postgres_srv__0.*
         Remote SQL: SELECT f1, f2, ctid FROM public.loc1_1 FOR UPDATE
(5 rows)

--Testcase 691:
EXPLAIN (verbose, costs off)
DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
                      QUERY PLAN                      
------------------------------------------------------
 Delete on public.rem1__postgres_srv__0
   ->  Foreign Delete on public.rem1__postgres_srv__0
         Remote SQL: DELETE FROM public.loc1_1
(3 rows)

--Testcase 692:
DROP TRIGGER trig_row_before_update ON rem1__postgres_srv__0;
--Testcase 693:
CREATE TRIGGER trig_row_after_update
AFTER UPDATE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 694:
EXPLAIN (verbose, costs off)
UPDATE rem1__postgres_srv__0 set f2 = '';          -- can't be pushed down
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Update on public.rem1__postgres_srv__0
   Remote SQL: UPDATE public.loc1_1 SET f2 = $2 WHERE ctid = $1 RETURNING f1, f2
   ->  Foreign Scan on public.rem1__postgres_srv__0
         Output: ''::text, ctid, rem1__postgres_srv__0.*
         Remote SQL: SELECT f1, f2, ctid FROM public.loc1_1 FOR UPDATE
(5 rows)

--Testcase 695:
EXPLAIN (verbose, costs off)
DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
                      QUERY PLAN                      
------------------------------------------------------
 Delete on public.rem1__postgres_srv__0
   ->  Foreign Delete on public.rem1__postgres_srv__0
         Remote SQL: DELETE FROM public.loc1_1
(3 rows)

--Testcase 696:
DROP TRIGGER trig_row_after_update ON rem1__postgres_srv__0;
-- Test with row-level ON DELETE triggers
--Testcase 697:
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 698:
EXPLAIN (verbose, costs off)
UPDATE rem1__postgres_srv__0 set f2 = '';          -- can be pushed down
                         QUERY PLAN                         
------------------------------------------------------------
 Update on public.rem1__postgres_srv__0
   ->  Foreign Update on public.rem1__postgres_srv__0
         Remote SQL: UPDATE public.loc1_1 SET f2 = ''::text
(3 rows)

--Testcase 699:
EXPLAIN (verbose, costs off)
DELETE FROM rem1__postgres_srv__0;                 -- can't be pushed down
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Delete on public.rem1__postgres_srv__0
   Remote SQL: DELETE FROM public.loc1_1 WHERE ctid = $1
   ->  Foreign Scan on public.rem1__postgres_srv__0
         Output: ctid, rem1__postgres_srv__0.*
         Remote SQL: SELECT f1, f2, ctid FROM public.loc1_1 FOR UPDATE
(5 rows)

--Testcase 700:
DROP TRIGGER trig_row_before_delete ON rem1__postgres_srv__0;
--Testcase 701:
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1__postgres_srv__0
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 702:
EXPLAIN (verbose, costs off)
UPDATE rem1__postgres_srv__0 set f2 = '';          -- can be pushed down
                         QUERY PLAN                         
------------------------------------------------------------
 Update on public.rem1__postgres_srv__0
   ->  Foreign Update on public.rem1__postgres_srv__0
         Remote SQL: UPDATE public.loc1_1 SET f2 = ''::text
(3 rows)

--Testcase 703:
EXPLAIN (verbose, costs off)
DELETE FROM rem1__postgres_srv__0;                 -- can't be pushed down
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Delete on public.rem1__postgres_srv__0
   Remote SQL: DELETE FROM public.loc1_1 WHERE ctid = $1 RETURNING f1, f2
   ->  Foreign Scan on public.rem1__postgres_srv__0
         Output: ctid, rem1__postgres_srv__0.*
         Remote SQL: SELECT f1, f2, ctid FROM public.loc1_1 FOR UPDATE
(5 rows)

--Testcase 704:
DROP TRIGGER trig_row_after_delete ON rem1__postgres_srv__0;
-- ===================================================================
-- test inheritance features
-- ===================================================================
--Testcase 705:
CREATE TABLE a (aa TEXT);
--Testcase 706:
CREATE FOREIGN TABLE b (aa TEXT, bb TEXT, __spd_url TEXT)
  SERVER pgspider_srv;
--Testcase 707:
CREATE FOREIGN TABLE b__postgres_srv__0 (bb TEXT) INHERITS (a)
  SERVER postgres_srv OPTIONS (table_name 'loct_1');
--Testcase 708:
INSERT INTO a(aa) VALUES('aaa');
--Testcase 709:
INSERT INTO a(aa) VALUES('aaaa');
--Testcase 710:
INSERT INTO a(aa) VALUES('aaaaa');
--Testcase 711:
INSERT INTO b__postgres_srv__0(aa) VALUES('bbb');
--Testcase 712:
INSERT INTO b__postgres_srv__0(aa) VALUES('bbbb');
--Testcase 713:
INSERT INTO b__postgres_srv__0(aa) VALUES('bbbbb');
--Testcase 714:
SELECT tableoid::regclass, * FROM a;
      tableoid      |  aa   
--------------------+-------
 a                  | aaa
 a                  | aaaa
 a                  | aaaaa
 b__postgres_srv__0 | bbb
 b__postgres_srv__0 | bbbb
 b__postgres_srv__0 | bbbbb
(6 rows)

--Testcase 715:
SELECT tableoid::regclass, * FROM b;
 tableoid |  aa   | bb |   __spd_url    
----------+-------+----+----------------
 b        | bbb   |    | /postgres_srv/
 b        | bbbb  |    | /postgres_srv/
 b        | bbbbb |    | /postgres_srv/
(3 rows)

--Testcase 716:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |  aa   
----------+-------
 a        | aaa
 a        | aaaa
 a        | aaaaa
(3 rows)

--Testcase 717:
UPDATE a SET aa = 'zzzzzz' WHERE aa LIKE 'aaaa%';
--Testcase 718:
SELECT tableoid::regclass, * FROM a;
      tableoid      |   aa   
--------------------+--------
 a                  | aaa
 a                  | zzzzzz
 a                  | zzzzzz
 b__postgres_srv__0 | bbb
 b__postgres_srv__0 | bbbb
 b__postgres_srv__0 | bbbbb
(6 rows)

--Testcase 719:
SELECT tableoid::regclass, * FROM b;
 tableoid |  aa   | bb |   __spd_url    
----------+-------+----+----------------
 b        | bbb   |    | /postgres_srv/
 b        | bbbb  |    | /postgres_srv/
 b        | bbbbb |    | /postgres_srv/
(3 rows)

--Testcase 720:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
(3 rows)

--Testcase 721:
UPDATE b__postgres_srv__0 SET aa = 'new';
--Testcase 722:
SELECT tableoid::regclass, * FROM a;
      tableoid      |   aa   
--------------------+--------
 a                  | aaa
 a                  | zzzzzz
 a                  | zzzzzz
 b__postgres_srv__0 | new
 b__postgres_srv__0 | new
 b__postgres_srv__0 | new
(6 rows)

--Testcase 723:
SELECT tableoid::regclass, * FROM b;
 tableoid | aa  | bb |   __spd_url    
----------+-----+----+----------------
 b        | new |    | /postgres_srv/
 b        | new |    | /postgres_srv/
 b        | new |    | /postgres_srv/
(3 rows)

--Testcase 724:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
(3 rows)

--Testcase 725:
UPDATE a SET aa = 'newtoo';
--Testcase 726:
SELECT tableoid::regclass, * FROM a;
      tableoid      |   aa   
--------------------+--------
 a                  | newtoo
 a                  | newtoo
 a                  | newtoo
 b__postgres_srv__0 | newtoo
 b__postgres_srv__0 | newtoo
 b__postgres_srv__0 | newtoo
(6 rows)

--Testcase 727:
SELECT tableoid::regclass, * FROM b;
 tableoid |   aa   | bb |   __spd_url    
----------+--------+----+----------------
 b        | newtoo |    | /postgres_srv/
 b        | newtoo |    | /postgres_srv/
 b        | newtoo |    | /postgres_srv/
(3 rows)

--Testcase 728:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | newtoo
 a        | newtoo
 a        | newtoo
(3 rows)

--Testcase 729:
DELETE FROM a;
--Testcase 730:
SELECT tableoid::regclass, * FROM a;
 tableoid | aa 
----------+----
(0 rows)

--Testcase 731:
SELECT tableoid::regclass, * FROM b;
 tableoid | aa | bb | __spd_url 
----------+----+----+-----------
(0 rows)

--Testcase 732:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid | aa 
----------+----
(0 rows)

--Testcase 733:
DROP TABLE a CASCADE;
NOTICE:  drop cascades to foreign table b__postgres_srv__0
--Testcase 734:
DROP FOREIGN TABLE b CASCADE;
-- Check SELECT FOR UPDATE/SHARE with an inherited source table
--Testcase 735:
create table foo (f1 int, f2 int);
--Testcase 736:
create foreign table foo2 (f1 int, f2 int, f3 int, __spd_url text)
  server pgspider_srv;
--Testcase 737:
create foreign table foo2__postgres_srv__0 (f3 int) inherits (foo)
  server postgres_srv options (table_name 'loct1_1');
--Testcase 738:
create table bar (f1 int, f2 int);
--Testcase 739:
create foreign table bar2 (f1 int, f2 int, f3 int, __spd_url text)
  server pgspider_srv;
--Testcase 740:
create foreign table bar2__postgres_srv__0 (f3 int) inherits (bar)
  server postgres_srv options (table_name 'loct2_1');
--Testcase 741:
alter table foo set (autovacuum_enabled = 'false');
--Testcase 742:
alter table bar set (autovacuum_enabled = 'false');
--Testcase 743:
insert into foo values(1,1);
--Testcase 744:
insert into foo values(3,3);
--Testcase 745:
insert into foo2__postgres_srv__0 values(2,2,2);
--Testcase 746:
insert into foo2__postgres_srv__0 values(4,4,4);
--Testcase 747:
insert into bar values(1,11);
--Testcase 748:
insert into bar values(2,22);
--Testcase 749:
insert into bar values(6,66);
--Testcase 750:
insert into bar2__postgres_srv__0 values(3,33,33);
--Testcase 751:
insert into bar2__postgres_srv__0 values(4,44,44);
--Testcase 752:
insert into bar2__postgres_srv__0 values(7,77,77);
--Testcase 753:
explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo) for update;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
   ->  Hash Join
         Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.ctid, bar_1.*, bar_1.tableoid
               ->  Foreign Scan on public.bar2__postgres_srv__0 bar_2
                     Output: bar_2.f1, bar_2.f2, bar_2.ctid, bar_2.*, bar_2.tableoid
                     Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2_1 FOR UPDATE
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  HashAggregate
                     Output: foo.ctid, foo.f1, foo.*, foo.tableoid
                     Group Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                           ->  Foreign Scan on public.foo2__postgres_srv__0 foo_2
                                 Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                 Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1_1
(23 rows)

--Testcase 754:
select * from bar where f1 in (select f1 from foo) for update;
 f1 | f2 
----+----
  1 | 11
  2 | 22
  3 | 33
  4 | 44
(4 rows)

--Testcase 755:
explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo) for share;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
   ->  Hash Join
         Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.ctid, bar_1.*, bar_1.tableoid
               ->  Foreign Scan on public.bar2__postgres_srv__0 bar_2
                     Output: bar_2.f1, bar_2.f2, bar_2.ctid, bar_2.*, bar_2.tableoid
                     Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2_1 FOR SHARE
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  HashAggregate
                     Output: foo.ctid, foo.f1, foo.*, foo.tableoid
                     Group Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                           ->  Foreign Scan on public.foo2__postgres_srv__0 foo_2
                                 Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                 Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1_1
(23 rows)

--Testcase 756:
select * from bar where f1 in (select f1 from foo) for share;
 f1 | f2 
----+----
  1 | 11
  2 | 22
  3 | 33
  4 | 44
(4 rows)

-- Now check SELECT FOR UPDATE/SHARE with an inherited source table,
-- where the parent is itself a foreign table
--Testcase 757:
create foreign table foo2child (f1 int, f2 int, f3 int, __spd_url text)
  server pgspider_srv;
--Testcase 758:
create foreign table foo2child__postgres_srv__0 (f1 int, f2 int, f3 int)
  server postgres_srv options (table_name 'loct4');
--Testcase 759:
explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo2) for share;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo2.*, bar.*, bar.tableoid
   ->  Hash Join
         Output: bar.f1, bar.f2, bar.ctid, foo2.*, bar.*, bar.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo2.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.ctid, bar_1.*, bar_1.tableoid
               ->  Foreign Scan on public.bar2__postgres_srv__0 bar_2
                     Output: bar_2.f1, bar_2.f2, bar_2.ctid, bar_2.*, bar_2.tableoid
                     Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2_1 FOR SHARE
         ->  Hash
               Output: foo2.*, foo2.f1
               ->  HashAggregate
                     Output: foo2.*, foo2.f1
                     Group Key: foo2.f1
                     ->  Foreign Scan on public.foo2
                           Output: foo2.*, foo2.f1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT f1, f2, f3 FROM public.loct1_1
(21 rows)

--Testcase 760:
select * from bar where f1 in (select f1 from foo2) for share;
 f1 | f2 
----+----
  2 | 22
  4 | 44
(2 rows)

--Testcase 761:
drop foreign table foo2child__postgres_srv__0;
--Testcase 762:
drop foreign table foo2child;
-- And with a local child relation of the foreign table parent
--Testcase 763:
create table foo2child (f3 int) inherits (foo2__postgres_srv__0);
NOTICE:  moving and merging column "f3" with inherited definition
DETAIL:  User-specified column moved to the position of the inherited column.
--Testcase 764:
explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo2) for share;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo2.*, bar.*, bar.tableoid
   ->  Hash Join
         Output: bar.f1, bar.f2, bar.ctid, foo2.*, bar.*, bar.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo2.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.ctid, bar_1.*, bar_1.tableoid
               ->  Foreign Scan on public.bar2__postgres_srv__0 bar_2
                     Output: bar_2.f1, bar_2.f2, bar_2.ctid, bar_2.*, bar_2.tableoid
                     Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2_1 FOR SHARE
         ->  Hash
               Output: foo2.*, foo2.f1
               ->  HashAggregate
                     Output: foo2.*, foo2.f1
                     Group Key: foo2.f1
                     ->  Foreign Scan on public.foo2
                           Output: foo2.*, foo2.f1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT f1, f2, f3 FROM public.loct1_1
(21 rows)

--Testcase 765:
select * from bar where f1 in (select f1 from foo2) for share;
 f1 | f2 
----+----
  2 | 22
  4 | 44
(2 rows)

--Testcase 766:
drop table foo2child;
-- Check UPDATE with inherited target and an inherited source table
--Testcase 767:
explain (verbose, costs off)
update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Update on public.bar
   Update on public.bar bar_1
   Foreign Update on public.bar2__postgres_srv__0 bar_2
     Remote SQL: UPDATE public.loct2_1 SET f2 = $2 WHERE ctid = $1
   ->  Hash Join
         Output: (bar.f2 + 100), foo.ctid, bar.tableoid, bar.ctid, (NULL::record), foo.*, foo.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f2, bar_1.f1, bar_1.tableoid, bar_1.ctid, NULL::record
               ->  Foreign Scan on public.bar2__postgres_srv__0 bar_2
                     Output: bar_2.f2, bar_2.f1, bar_2.tableoid, bar_2.ctid, bar_2.*
                     Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2_1 FOR UPDATE
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  HashAggregate
                     Output: foo.ctid, foo.f1, foo.*, foo.tableoid
                     Group Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                           ->  Foreign Scan on public.foo2__postgres_srv__0 foo_2
                                 Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                 Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1_1
(25 rows)

--Testcase 768:
update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
--Testcase 769:
select tableoid::regclass, * from bar order by 1,2;
       tableoid        | f1 | f2  
-----------------------+----+-----
 bar                   |  1 | 111
 bar                   |  2 | 122
 bar                   |  6 |  66
 bar2__postgres_srv__0 |  3 | 133
 bar2__postgres_srv__0 |  4 | 144
 bar2__postgres_srv__0 |  7 |  77
(6 rows)

-- Check UPDATE with inherited target and an appendrel subquery
--Testcase 770:
explain (verbose, costs off)
update bar set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar.f1 = ss.f1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Update on public.bar
   Update on public.bar bar_1
   Foreign Update on public.bar2__postgres_srv__0 bar_2
     Remote SQL: UPDATE public.loct2_1 SET f2 = $2 WHERE ctid = $1
   ->  Merge Join
         Output: (bar.f2 + 100), (ROW(foo.f1)), bar.tableoid, bar.ctid, (NULL::record)
         Merge Cond: (bar.f1 = foo.f1)
         ->  Sort
               Output: bar.f2, bar.f1, bar.tableoid, bar.ctid, (NULL::record)
               Sort Key: bar.f1
               ->  Append
                     ->  Seq Scan on public.bar bar_1
                           Output: bar_1.f2, bar_1.f1, bar_1.tableoid, bar_1.ctid, NULL::record
                     ->  Foreign Scan on public.bar2__postgres_srv__0 bar_2
                           Output: bar_2.f2, bar_2.f1, bar_2.tableoid, bar_2.ctid, bar_2.*
                           Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2_1 FOR UPDATE
         ->  Sort
               Output: (ROW(foo.f1)), foo.f1
               Sort Key: foo.f1
               ->  Append
                     ->  Seq Scan on public.foo
                           Output: ROW(foo.f1), foo.f1
                     ->  Foreign Scan on public.foo2__postgres_srv__0 foo_1
                           Output: ROW(foo_1.f1), foo_1.f1
                           Remote SQL: SELECT f1 FROM public.loct1_1
                     ->  Seq Scan on public.foo foo_2
                           Output: ROW((foo_2.f1 + 3)), (foo_2.f1 + 3)
                     ->  Foreign Scan on public.foo2__postgres_srv__0 foo_3
                           Output: ROW((foo_3.f1 + 3)), (foo_3.f1 + 3)
                           Remote SQL: SELECT f1 FROM public.loct1_1
(30 rows)

--Testcase 771:
update bar set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar.f1 = ss.f1;
--Testcase 772:
select tableoid::regclass, * from bar order by 1,2;
       tableoid        | f1 | f2  
-----------------------+----+-----
 bar                   |  1 | 211
 bar                   |  2 | 222
 bar                   |  6 | 166
 bar2__postgres_srv__0 |  3 | 233
 bar2__postgres_srv__0 |  4 | 244
 bar2__postgres_srv__0 |  7 | 177
(6 rows)

-- Test forcing the remote server to produce sorted data for a merge join,
-- but the foreign table is an inheritance child.
truncate table foo2__postgres_srv__0;
truncate table only foo;
\set num_rows_foo 2000
--Testcase 773:
insert into foo2__postgres_srv__0 select generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2);
--Testcase 774:
insert into foo select generate_series(1, :num_rows_foo, 2), generate_series(1, :num_rows_foo, 2);
--Testcase 775:
SET enable_hashjoin to false;
--Testcase 776:
SET enable_nestloop to false;
--Testcase 777:
alter foreign table foo2 options (use_remote_estimate 'true');
analyze foo;
-- inner join; expressions in the clauses appear in the equivalence class list
--Testcase 778:
explain (verbose, costs off)
	select foo.f1, foo2.f1 from foo join foo2 on (foo.f1 = foo2.f1) order by foo.f2 offset 10 limit 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit
   Output: foo.f1, foo2.f1, foo.f2
   ->  Sort
         Output: foo.f1, foo2.f1, foo.f2
         Sort Key: foo.f2
         ->  Merge Join
               Output: foo.f1, foo2.f1, foo.f2
               Merge Cond: (foo.f1 = foo2.f1)
               ->  Sort
                     Output: foo.f1, foo.f2
                     Sort Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.f1, foo_1.f2
                           ->  Foreign Scan on public.foo2__postgres_srv__0 foo_2
                                 Output: foo_2.f1, foo_2.f2
                                 Remote SQL: SELECT f1, f2 FROM public.loct1_1
               ->  Sort
                     Output: foo2.f1
                     Sort Key: foo2.f1
                     ->  Foreign Scan on public.foo2
                           Output: foo2.f1
                           Node: postgres_srv / Status: Alive
                             Limit push-down: no
                             Sort push-down: no
                             Remote SQL: SELECT f1 FROM public.loct1_1
(26 rows)

--Testcase 779:
select foo.f1, foo2.f1 from foo join foo2 on (foo.f1 = foo2.f1) order by foo.f2 offset 10 limit 10;
 f1 | f1 
----+----
 20 | 20
 22 | 22
 24 | 24
 26 | 26
 28 | 28
 30 | 30
 32 | 32
 34 | 34
 36 | 36
 38 | 38
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
--Testcase 780:
explain (verbose, costs off)
	select foo.f1, foo2.f1 from foo left join foo2 on (foo.f1 = foo2.f1) order by foo.f2 offset 10 limit 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit
   Output: foo.f1, foo2.f1, foo.f2
   ->  Sort
         Output: foo.f1, foo2.f1, foo.f2
         Sort Key: foo.f2
         ->  Merge Left Join
               Output: foo.f1, foo2.f1, foo.f2
               Merge Cond: (foo.f1 = foo2.f1)
               ->  Sort
                     Output: foo.f1, foo.f2
                     Sort Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.f1, foo_1.f2
                           ->  Foreign Scan on public.foo2__postgres_srv__0 foo_2
                                 Output: foo_2.f1, foo_2.f2
                                 Remote SQL: SELECT f1, f2 FROM public.loct1_1
               ->  Sort
                     Output: foo2.f1
                     Sort Key: foo2.f1
                     ->  Foreign Scan on public.foo2
                           Output: foo2.f1
                           Node: postgres_srv / Status: Alive
                             Limit push-down: no
                             Sort push-down: no
                             Remote SQL: SELECT f1 FROM public.loct1_1
(26 rows)

--Testcase 781:
select foo.f1, foo2.f1 from foo left join foo2 on (foo.f1 = foo2.f1) order by foo.f2 offset 10 limit 10;
 f1 | f1 
----+----
 10 | 10
 11 |   
 12 | 12
 13 |   
 14 | 14
 15 |   
 16 | 16
 17 |   
 18 | 18
 19 |   
(10 rows)

--Testcase 782:
RESET enable_hashjoin;
--Testcase 783:
RESET enable_nestloop;
-- Test that WHERE CURRENT OF is not supported
begin;
declare c cursor for select * from bar where f1 = 7;
--Testcase 784:
fetch from c;
 f1 | f2  
----+-----
  7 | 177
(1 row)

--Testcase 785:
update bar set f2 = null where current of c;
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
ERROR:  WHERE CURRENT OF is not supported for this table type
rollback;
--Testcase 786:
explain (verbose, costs off)
delete from foo where f1 < 5 returning *;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Delete on public.foo
   Output: foo_1.f1, foo_1.f2
   Delete on public.foo foo_1
   Foreign Delete on public.foo2__postgres_srv__0 foo_2
   ->  Append
         ->  Seq Scan on public.foo foo_1
               Output: foo_1.tableoid, foo_1.ctid
               Filter: (foo_1.f1 < 5)
         ->  Foreign Delete on public.foo2__postgres_srv__0 foo_2
               Remote SQL: DELETE FROM public.loct1_1 WHERE ((f1 < 5)) RETURNING f1, f2
(10 rows)

--Testcase 787:
delete from foo where f1 < 5 returning *;
 f1 | f2 
----+----
  1 |  1
  3 |  3
  0 |  0
  2 |  2
  4 |  4
(5 rows)

--Testcase 788:
explain (verbose, costs off)
update bar set f2 = f2 + 100 returning *;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Update on public.bar
   Output: bar_1.f1, bar_1.f2
   Update on public.bar bar_1
   Foreign Update on public.bar2__postgres_srv__0 bar_2
   ->  Result
         Output: (bar.f2 + 100), bar.tableoid, bar.ctid, (NULL::record)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f2, bar_1.tableoid, bar_1.ctid, NULL::record
               ->  Foreign Update on public.bar2__postgres_srv__0 bar_2
                     Remote SQL: UPDATE public.loct2_1 SET f2 = (f2 + 100) RETURNING f1, f2
(11 rows)

--Testcase 789:
update bar set f2 = f2 + 100 returning *;
 f1 | f2  
----+-----
  1 | 311
  2 | 322
  6 | 266
  3 | 333
  4 | 344
  7 | 277
(6 rows)

-- Test that UPDATE/DELETE with inherited target works with row-level triggers
--Testcase 790:
CREATE TRIGGER trig_row_before
BEFORE UPDATE OR DELETE ON bar2
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 791:
CREATE TRIGGER trig_row_after
AFTER UPDATE OR DELETE ON bar2
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 792:
explain (verbose, costs off)
update bar set f2 = f2 + 100;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Update on public.bar
   Update on public.bar bar_1
   Foreign Update on public.bar2__postgres_srv__0 bar_2
   ->  Result
         Output: (bar.f2 + 100), bar.tableoid, bar.ctid, (NULL::record)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f2, bar_1.tableoid, bar_1.ctid, NULL::record
               ->  Foreign Update on public.bar2__postgres_srv__0 bar_2
                     Remote SQL: UPDATE public.loct2_1 SET f2 = (f2 + 100)
(10 rows)

--Testcase 793:
update bar set f2 = f2 + 100;
--Testcase 794:
explain (verbose, costs off)
delete from bar where f2 < 400;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Delete on public.bar
   Delete on public.bar bar_1
   Foreign Delete on public.bar2__postgres_srv__0 bar_2
   ->  Append
         ->  Seq Scan on public.bar bar_1
               Output: bar_1.tableoid, bar_1.ctid
               Filter: (bar_1.f2 < 400)
         ->  Foreign Delete on public.bar2__postgres_srv__0 bar_2
               Remote SQL: DELETE FROM public.loct2_1 WHERE ((f2 < 400))
(9 rows)

--Testcase 795:
delete from bar where f2 < 400;
-- cleanup
--Testcase 796:
drop foreign table foo2 cascade;
--Testcase 797:
drop foreign table bar2 cascade;
-- Test pushing down UPDATE/DELETE joins to the remote server
--Testcase 798:
create table parent (a int, b text);
--Testcase 799:
create foreign table remt1 (a int, b text, __spd_url text)
  server pgspider_srv;
--Testcase 800:
create foreign table remt1__postgres_srv__0 (a int, b text)
  server postgres_srv options (table_name 'loct1_2');
--Testcase 801:
create foreign table remt2 (a int, b text, __spd_url text)
  server pgspider_srv;
--Testcase 802:
create foreign table remt2__postgres_srv__0 (a int, b text)
  server postgres_srv options (table_name 'loct2_2');
--Testcase 803:
alter foreign table remt1__postgres_srv__0 inherit parent;
--alter foreign table remt1__postgres_srv__0 inherit parent__postgres_srv__0;
--Testcase 804:
insert into remt1__postgres_srv__0 values (1, 'foo');
--Testcase 805:
insert into remt1__postgres_srv__0 values (2, 'bar');
--Testcase 806:
insert into remt2__postgres_srv__0 values (1, 'foo');
--Testcase 807:
insert into remt2__postgres_srv__0 values (2, 'bar');
--analyze remt1;
--analyze remt2;
--Testcase 808:
explain (verbose, costs off)
update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Update on public.parent
   Output: parent_1.a, parent_1.b, remt2.a, remt2.b, remt2.__spd_url
   Update on public.parent parent_1
   Foreign Update on public.remt1__postgres_srv__0 parent_2
     Remote SQL: UPDATE public.loct1_2 SET b = $2 WHERE ctid = $1 RETURNING a, b
   ->  Hash Join
         Output: (parent.b || remt2.b), remt2.*, remt2.a, remt2.b, remt2.__spd_url, parent.tableoid, parent.ctid, (NULL::record)
         Hash Cond: (remt2.a = parent.a)
         ->  Foreign Scan on public.remt2
               Output: remt2.b, remt2.*, remt2.a, remt2.__spd_url
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT a, b FROM public.loct2_2
         ->  Hash
               Output: parent.b, parent.a, parent.tableoid, parent.ctid, (NULL::record)
               ->  Append
                     ->  Seq Scan on public.parent parent_1
                           Output: parent_1.b, parent_1.a, parent_1.tableoid, parent_1.ctid, NULL::record
                     ->  Foreign Scan on public.remt1__postgres_srv__0 parent_2
                           Output: parent_2.b, parent_2.a, parent_2.tableoid, parent_2.ctid, parent_2.*
                           Remote SQL: SELECT a, b, ctid FROM public.loct1_2 FOR UPDATE
(20 rows)

--Testcase 809:
update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
 a |   b    | a |  b  |   __spd_url    
---+--------+---+-----+----------------
 1 | foofoo | 1 | foo | /postgres_srv/
 2 | barbar | 2 | bar | /postgres_srv/
(2 rows)

--Testcase 810:
explain (verbose, costs off)
delete from parent using remt2 where parent.a = remt2.a returning parent;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Delete on public.parent
   Output: parent_1.*
   Delete on public.parent parent_1
   Foreign Delete on public.remt1__postgres_srv__0 parent_2
     Remote SQL: DELETE FROM public.loct1_2 WHERE ctid = $1 RETURNING a, b
   ->  Merge Join
         Output: remt2.*, parent.tableoid, parent.ctid
         Merge Cond: (parent.a = remt2.a)
         ->  Sort
               Output: parent.a, parent.tableoid, parent.ctid
               Sort Key: parent.a
               ->  Append
                     ->  Seq Scan on public.parent parent_1
                           Output: parent_1.a, parent_1.tableoid, parent_1.ctid
                     ->  Foreign Scan on public.remt1__postgres_srv__0 parent_2
                           Output: parent_2.a, parent_2.tableoid, parent_2.ctid
                           Remote SQL: SELECT a, ctid FROM public.loct1_2 FOR UPDATE
         ->  Sort
               Output: remt2.*, remt2.a
               Sort Key: remt2.a
               ->  Foreign Scan on public.remt2
                     Output: remt2.*, remt2.a
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT a, b FROM public.loct2_2
(24 rows)

--Testcase 811:
delete from parent using remt2 where parent.a = remt2.a returning parent;
   parent   
------------
 (1,foofoo)
 (2,barbar)
(2 rows)

-- cleanup
--Testcase 812:
drop foreign table remt1;
--Testcase 813:
drop foreign table remt2;
--Testcase 814:
drop foreign table remt1__postgres_srv__0;
--Testcase 815:
drop foreign table remt2__postgres_srv__0;
--Testcase 816:
drop table parent;
-- ===================================================================
-- test tuple routing for foreign-table partitions
-- ===================================================================
-- Test insert tuple routing
--Testcase 817:
create foreign table itrtest (a int, b text, __spd_url text)
  server pgspider_srv;
--Testcase 818:
create foreign table itrtest__postgres_srv__0 (a int, b text)
  server postgres_srv options (table_name 'itrtest');
--Testcase 819:
SELECT dblink_exec('create foreign table remp1
  (a int check (a in (1)), b text) server postgres_srv
  options (table_name ''loct1_3'');');
     dblink_exec      
----------------------
 CREATE FOREIGN TABLE
(1 row)

--Testcase 820:
create foreign table remp1 (a int check (a in (1)), b text, __spd_url text)
  server pgspider_srv;
--Testcase 821:
create foreign table remp1__postgres_srv__0 (a int check (a in (1)), b text)
  server postgres_srv options (table_name 'remp1');
--Testcase 822:
SELECT dblink_exec('create foreign table remp2
  (b text, a int check (a in (2))) server postgres_srv
   options (table_name ''loct2_3'');');
     dblink_exec      
----------------------
 CREATE FOREIGN TABLE
(1 row)

--Testcase 823:
create foreign table remp2 (b text, a int check (a in (2)), __spd_url text)
  server pgspider_srv;
--Testcase 824:
create foreign table remp2__postgres_srv__0 (b text, a int check (a in (2)))
  server postgres_srv options (table_name 'remp2');
-- Does not support attach partition on foreign table
--Testcase 825:
SELECT dblink_exec('alter table itrtest attach partition remp1 for values in (1);');
 dblink_exec 
-------------
 ALTER TABLE
(1 row)

--Testcase 826:
SELECT dblink_exec('alter table itrtest attach partition remp2 for values in (2);');
 dblink_exec 
-------------
 ALTER TABLE
(1 row)

--Testcase 827:
insert into itrtest__postgres_srv__0 values (1, 'foo');
--Testcase 828:
insert into itrtest__postgres_srv__0 values (1, 'bar') returning *;
 a |  b  
---+-----
 1 | bar
(1 row)

--Testcase 829:
insert into itrtest__postgres_srv__0 values (2, 'baz');
--Testcase 830:
insert into itrtest__postgres_srv__0 values (2, 'qux') returning *;
 a |  b  
---+-----
 2 | qux
(1 row)

--Testcase 831:
insert into itrtest__postgres_srv__0 values (1, 'test1'), (2, 'test2') returning *;
 a |   b   
---+-------
 1 | test1
 2 | test2
(2 rows)

--Testcase 832:
select tableoid::regclass, * FROM itrtest;
 tableoid | a |   b   |   __spd_url    
----------+---+-------+----------------
 itrtest  | 1 | foo   | /postgres_srv/
 itrtest  | 1 | bar   | /postgres_srv/
 itrtest  | 1 | test1 | /postgres_srv/
 itrtest  | 2 | baz   | /postgres_srv/
 itrtest  | 2 | qux   | /postgres_srv/
 itrtest  | 2 | test2 | /postgres_srv/
(6 rows)

--Testcase 833:
select tableoid::regclass, * FROM remp1;
 tableoid | a |   b   |   __spd_url    
----------+---+-------+----------------
 remp1    | 1 | foo   | /postgres_srv/
 remp1    | 1 | bar   | /postgres_srv/
 remp1    | 1 | test1 | /postgres_srv/
(3 rows)

--Testcase 834:
select tableoid::regclass, * FROM remp2;
 tableoid |   b   | a |   __spd_url    
----------+-------+---+----------------
 remp2    | baz   | 2 | /postgres_srv/
 remp2    | qux   | 2 | /postgres_srv/
 remp2    | test2 | 2 | /postgres_srv/
(3 rows)

--Testcase 835:
delete from itrtest__postgres_srv__0;
--Testcase 836:
SELECT dblink_exec('create unique index loct1_idx on loct1_3 (a);');
 dblink_exec  
--------------
 CREATE INDEX
(1 row)

-- DO NOTHING without an inference specification is supported
--Testcase 837:
insert into itrtest__postgres_srv__0 values (1, 'foo') on conflict do nothing returning *;
 a |  b  
---+-----
 1 | foo
(1 row)

--Testcase 838:
insert into itrtest__postgres_srv__0 values (1, 'foo') on conflict do nothing returning *;
 a | b 
---+---
(0 rows)

-- But other cases are not supported
--Testcase 839:
insert into itrtest__postgres_srv__0 values (1, 'bar') on conflict (a) do nothing;
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--Testcase 840:
insert into itrtest__postgres_srv__0 values (1, 'bar') on conflict (a) do update set b = excluded.b;
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--Testcase 841:
select tableoid::regclass, * FROM itrtest;
 tableoid | a |  b  |   __spd_url    
----------+---+-----+----------------
 itrtest  | 1 | foo | /postgres_srv/
(1 row)

-- delete from itrtest;
--Testcase 842:
delete from itrtest__postgres_srv__0;
--Testcase 843:
SELECT dblink_exec('drop index loct1_idx;');
 dblink_exec 
-------------
 DROP INDEX
(1 row)

-- Test that remote triggers work with insert tuple routing
--Testcase 844:
create function br_insert_trigfunc() returns trigger as $$
begin
	new.b := new.b || ' triggered !';
	return new;
end
$$ language plpgsql;
--Testcase 845:
SELECT dblink_exec('create trigger loct1_br_insert_trigger before insert on loct1_3
        for each row execute procedure br_insert_trigfunc();');
  dblink_exec   
----------------
 CREATE TRIGGER
(1 row)

--Testcase 846:
SELECT dblink_exec('create trigger loct2_br_insert_trigger before insert on loct2_3
	for each row execute procedure br_insert_trigfunc();');
  dblink_exec   
----------------
 CREATE TRIGGER
(1 row)

-- The new values are concatenated with ' triggered !'
--Testcase 847:
insert into itrtest__postgres_srv__0 values (1, 'foo') returning *;
 a |        b        
---+-----------------
 1 | foo triggered !
(1 row)

--Testcase 848:
insert into itrtest__postgres_srv__0 values (2, 'qux') returning *;
 a |        b        
---+-----------------
 2 | qux triggered !
(1 row)

--Testcase 849:
insert into itrtest__postgres_srv__0 values (1, 'test1'), (2, 'test2') returning *;
 a |         b         
---+-------------------
 1 | test1 triggered !
 2 | test2 triggered !
(2 rows)

--Testcase 850:
with result as (insert into itrtest__postgres_srv__0 values (1, 'test1'), (2, 'test2') returning *) select * from result;
 a |         b         
---+-------------------
 1 | test1 triggered !
 2 | test2 triggered !
(2 rows)

--Testcase 851:
SELECT dblink_exec('drop trigger loct1_br_insert_trigger on loct1_3;');
 dblink_exec  
--------------
 DROP TRIGGER
(1 row)

--Testcase 852:
SELECT dblink_exec('drop trigger loct2_br_insert_trigger on loct2_3;');
 dblink_exec  
--------------
 DROP TRIGGER
(1 row)

--Testcase 853:
drop foreign table remp1;
--Testcase 854:
drop foreign table remp2;
--Testcase 855:
drop foreign table remp1__postgres_srv__0;
--Testcase 856:
drop foreign table remp2__postgres_srv__0;
--Testcase 857:
drop foreign table itrtest;
--Testcase 858:
drop foreign table itrtest__postgres_srv__0;
-- Test update tuple routing
--Testcase 859:
create foreign table utrtest (a int, b text)
  server pgspider_srv;
--Testcase 860:
create foreign table utrtest__postgres_srv__0 (a int, b text)
  server postgres_srv options (table_name 'utrtest');
--Testcase 861:
SELECT dblink_exec('create foreign table remp
  (a int check (a in (1)), b text)
  server postgres_srv options (table_name ''loct_2'');');
     dblink_exec      
----------------------
 CREATE FOREIGN TABLE
(1 row)

--Testcase 862:
create foreign table remp (a int check (a in (1)), b text, __spd_url text)
  server pgspider_srv;
--Testcase 863:
create foreign table remp__postgres_srv__0 (a int check (a in (1)), b text)
  server postgres_srv options (table_name 'remp');
--Testcase 864:
create foreign table locp (a int check (a in (2)), b text, __spd_url text)
  server pgspider_srv;
--Testcase 865:
create foreign table locp__postgres_srv__0 (a int check (a in (2)), b text)
  server postgres_srv options (table_name 'locp_2');
--Testcase 866:
SELECT dblink_exec('alter table utrtest attach partition remp for values in (1);');
 dblink_exec 
-------------
 ALTER TABLE
(1 row)

--Testcase 867:
SELECT dblink_exec('alter table utrtest attach partition locp_2 for values in (2);');
 dblink_exec 
-------------
 ALTER TABLE
(1 row)

--Testcase 868:
insert into utrtest__postgres_srv__0 values (1, 'foo');
--Testcase 869:
insert into utrtest__postgres_srv__0 values (2, 'qux');
--Testcase 870:
select tableoid::regclass, * FROM utrtest;
 tableoid | a |  b  
----------+---+-----
 utrtest  | 1 | foo
 utrtest  | 2 | qux
(2 rows)

--Testcase 871:
select tableoid::regclass, * FROM remp;
 tableoid | a |  b  |   __spd_url    
----------+---+-----+----------------
 remp     | 1 | foo | /postgres_srv/
(1 row)

--Testcase 872:
select tableoid::regclass, * FROM locp;
 tableoid | a |  b  |   __spd_url    
----------+---+-----+----------------
 locp     | 2 | qux | /postgres_srv/
(1 row)

-- It's not allowed to move a row from a partition that is foreign to another
--Testcase 873:
update utrtest__postgres_srv__0 set a = 2 where b = 'foo' returning *;
ERROR:  new row for relation "loct_2" violates check constraint "loct_2_a_check"
DETAIL:  Failing row contains (2, foo).
CONTEXT:  remote SQL command: UPDATE public.loct_2 SET a = 2 WHERE ((b = 'foo')) RETURNING a, b
remote SQL command: UPDATE public.utrtest SET a = 2 WHERE ((b = 'foo')) RETURNING a, b
-- But the reverse is allowed
--Testcase 874:
update utrtest__postgres_srv__0 set a = 1 where b = 'qux' returning *;
ERROR:  cannot route tuples into foreign table to be updated "remp"
CONTEXT:  remote SQL command: UPDATE public.utrtest SET a = 1 WHERE ((b = 'qux')) RETURNING a, b
--Testcase 875:
select tableoid::regclass, * FROM utrtest;
 tableoid | a |  b  
----------+---+-----
 utrtest  | 1 | foo
 utrtest  | 2 | qux
(2 rows)

--Testcase 876:
select tableoid::regclass, * FROM remp;
 tableoid | a |  b  |   __spd_url    
----------+---+-----+----------------
 remp     | 1 | foo | /postgres_srv/
(1 row)

--Testcase 877:
select tableoid::regclass, * FROM locp;
 tableoid | a |  b  |   __spd_url    
----------+---+-----+----------------
 locp     | 2 | qux | /postgres_srv/
(1 row)

-- The executor should not let unexercised FDWs shut down
--Testcase 878:
update utrtest__postgres_srv__0 set a = 1 where b = 'foo';
-- Test that remote triggers work with update tuple routing
--Testcase 879:
SELECT dblink_exec('create trigger loct_br_insert_trigger before insert on loct_2
	for each row execute procedure br_insert_trigfunc();');
  dblink_exec   
----------------
 CREATE TRIGGER
(1 row)

--Testcase 880:
delete from utrtest__postgres_srv__0;
--Testcase 881:
insert into utrtest__postgres_srv__0 values (2, 'qux');
-- Check case where the foreign partition is a subplan target rel
-- explain (verbose, costs off)
-- update utrtest set a = 1 where a = 1 or a = 2 returning *;
-- The new values are concatenated with ' triggered !'
--Testcase 882:
update utrtest__postgres_srv__0 set a = 1 where a = 1 or a = 2 returning *;
ERROR:  cannot route tuples into foreign table to be updated "remp"
CONTEXT:  remote SQL command: UPDATE public.utrtest SET a = 1 WHERE (((a = 1) OR (a = 2))) RETURNING a, b
--Testcase 883:
delete from utrtest__postgres_srv__0;
--Testcase 884:
insert into utrtest__postgres_srv__0 values (2, 'qux');
-- Check case where the foreign partition isn't a subplan target rel
-- explain (verbose, costs off)
-- update utrtest set a = 1 where a = 2 returning *;
-- The new values are concatenated with ' triggered !'
--Testcase 885:
update utrtest__postgres_srv__0 set a = 1 where a = 2 returning *;
 a |        b        
---+-----------------
 1 | qux triggered !
(1 row)

--Testcase 886:
SELECT dblink_exec('drop trigger loct_br_insert_trigger on loct_2;');
 dblink_exec  
--------------
 DROP TRIGGER
(1 row)

-- We can move rows to a foreign partition that has been updated already,
-- but can't move rows to a foreign partition that hasn't been updated yet
--Testcase 887:
delete from utrtest__postgres_srv__0;
--Testcase 888:
insert into utrtest__postgres_srv__0 values (1, 'foo');
--Testcase 889:
insert into utrtest__postgres_srv__0 values (2, 'qux');
-- Test the former case:
-- with a direct modification plan
-- explain (verbose, costs off)
-- update utrtest set a = 1 returning *;
--Testcase 890:
update utrtest__postgres_srv__0 set a = 1 returning *;
ERROR:  cannot route tuples into foreign table to be updated "remp"
CONTEXT:  remote SQL command: UPDATE public.utrtest SET a = 1 RETURNING a, b
--Testcase 891:
delete from utrtest__postgres_srv__0;
--Testcase 892:
insert into utrtest__postgres_srv__0 values (1, 'foo');
--Testcase 893:
insert into utrtest__postgres_srv__0 values (2, 'qux');
-- with a non-direct modification plan
-- explain (verbose, costs off)
-- update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x returning *;
--Testcase 894:
update utrtest__postgres_srv__0 set a = 1 from (values (1), (2)) s(x) where a = s.x returning *;
ERROR:  cannot route tuples into foreign table to be updated "remp"
CONTEXT:  remote SQL command: UPDATE public.utrtest SET a = $2 WHERE ctid = $1 RETURNING a, b
-- Change the definition of utrtest so that the foreign partition get updated
-- after the local partition
--Testcase 895:
delete from utrtest__postgres_srv__0;
--Testcase 896:
SELECT dblink_exec('alter table utrtest detach partition remp;');
 dblink_exec 
-------------
 ALTER TABLE
(1 row)

--Testcase 897:
SELECT dblink_exec('drop foreign table remp;');
    dblink_exec     
--------------------
 DROP FOREIGN TABLE
(1 row)

--Testcase 898:
drop foreign table remp;
--Testcase 899:
drop foreign table remp__postgres_srv__0;
--Testcase 900:
SELECT dblink_exec('alter table loct_2 drop constraint loct_2_a_check;');
 dblink_exec 
-------------
 ALTER TABLE
(1 row)

--Testcase 901:
SELECT dblink_exec('alter table loct_2 add check (a in (3));');
 dblink_exec 
-------------
 ALTER TABLE
(1 row)

--Testcase 902:
SELECT dblink_exec('create foreign table remp (a int check (a in (3)), b text)
  server postgres_srv options (table_name ''loct_2'');');
     dblink_exec      
----------------------
 CREATE FOREIGN TABLE
(1 row)

--Testcase 903:
SELECT dblink_exec('alter table utrtest attach partition remp for values in (3);');
 dblink_exec 
-------------
 ALTER TABLE
(1 row)

--Testcase 904:
insert into utrtest__postgres_srv__0 values (2, 'qux');
--Testcase 905:
insert into utrtest__postgres_srv__0 values (3, 'xyzzy');
-- Test the latter case:
-- with a direct modification plan
-- explain (verbose, costs off)
-- update utrtest set a = 3 returning *;
--Testcase 906:
update utrtest__postgres_srv__0 set a = 3 returning *; -- ERROR
ERROR:  cannot route tuples into foreign table to be updated "remp"
CONTEXT:  remote SQL command: UPDATE public.utrtest SET a = 3 RETURNING a, b
-- -- with a non-direct modification plan
-- explain (verbose, costs off)
-- update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x returning *;
--Testcase 907:
update utrtest__postgres_srv__0 set a = 3 from (values (2), (3)) s(x) where a = s.x returning *; -- ERROR
ERROR:  cannot route tuples into foreign table to be updated "remp"
CONTEXT:  remote SQL command: UPDATE public.utrtest SET a = $2 WHERE ctid = $1 RETURNING a, b
--Testcase 908:
drop foreign table utrtest;
--Testcase 909:
drop foreign table utrtest__postgres_srv__0;
--drop table loct;
-- Test copy tuple routing
---create table ctrtest (a int, b text, __spd_url text) partition by list (a);
---create table loct1 (a int check (a in (1)), b text);
--Testcase 910:
create foreign table ctrtest (a int, b text, __spd_url text)
  server pgspider_srv;
--Testcase 911:
create foreign table ctrtest__postgres_srv__0 (a int, b text)
  server postgres_srv options (table_name 'ctrtest');
--Testcase 912:
create foreign table remp1 (a int check (a in (1)), b text, __spd_url text)
  server pgspider_srv;
--Testcase 913:
create foreign table remp1__postgres_srv__0 (a int check (a in (1)), b text)
  server postgres_srv options (table_name 'loct1_4');
--Testcase 914:
create foreign table remp2 (b text, a int check (a in (2)), __spd_url text)
  server pgspider_srv;
--Testcase 915:
create foreign table remp2__postgres_srv__0 (b text, a int check (a in (2)))
  server postgres_srv options (table_name 'loct2_4');
--alter table ctrtest attach partition remp1 for values in (1);
--alter table ctrtest attach partition remp2 for values in (2);
copy ctrtest__postgres_srv__0 from stdin;
--Testcase 916:
select tableoid::regclass, * FROM ctrtest;
 tableoid | a |  b  |   __spd_url    
----------+---+-----+----------------
 ctrtest  | 1 | foo | /postgres_srv/
 ctrtest  | 2 | qux | /postgres_srv/
(2 rows)

--Testcase 917:
select tableoid::regclass, * FROM remp1;
 tableoid | a |  b  |   __spd_url    
----------+---+-----+----------------
 remp1    | 1 | foo | /postgres_srv/
(1 row)

--Testcase 918:
select tableoid::regclass, * FROM remp2;
 tableoid |  b  | a |   __spd_url    
----------+-----+---+----------------
 remp2    | qux | 2 | /postgres_srv/
(1 row)

-- Copying into foreign partitions directly should work as well
copy remp1__postgres_srv__0 from stdin;
--Testcase 919:
select tableoid::regclass, * FROM remp1;
 tableoid | a |  b  |   __spd_url    
----------+---+-----+----------------
 remp1    | 1 | foo | /postgres_srv/
 remp1    | 1 | bar | /postgres_srv/
(2 rows)

--Testcase 920:
drop foreign table remp1;
--Testcase 921:
drop foreign table remp2;
--Testcase 922:
drop foreign table remp1__postgres_srv__0;
--Testcase 923:
drop foreign table remp2__postgres_srv__0;
--Testcase 924:
drop foreign table ctrtest;
--Testcase 925:
drop foreign table ctrtest__postgres_srv__0;
-- ===================================================================
-- test COPY FROM
-- ===================================================================
--Testcase 926:
create foreign table rem2 (f1 int, f2 text, __spd_url text)
  server pgspider_srv;
--Testcase 927:
create foreign table rem2__postgres_srv__0 (f1 int, f2 text)
  server postgres_srv options(table_name 'loc2_1');
-- Test basic functionality
copy rem2__postgres_srv__0 from stdin;
--Testcase 928:
select * from rem2;
 f1 | f2  |   __spd_url    
----+-----+----------------
  1 | foo | /postgres_srv/
  2 | bar | /postgres_srv/
(2 rows)

--Testcase 929:
delete from rem2__postgres_srv__0;
-- Test check constraints
--Testcase 930:
alter foreign table rem2 add constraint rem2_f1positive check (f1 >= 0);
-- check constraint is enforced on the remote side, not locally
copy rem2__postgres_srv__0 from stdin;
copy rem2__postgres_srv__0 from stdin; -- ERROR
ERROR:  new row for relation "loc2_1" violates check constraint "loc2_1_f1positive"
DETAIL:  Failing row contains (-1, xyzzy).
CONTEXT:  remote SQL command: INSERT INTO public.loc2_1(f1, f2) VALUES ($1, $2)
COPY rem2__postgres_srv__0, line 1: "-1	xyzzy"
--Testcase 931:
select * from rem2;
 f1 | f2  |   __spd_url    
----+-----+----------------
  1 | foo | /postgres_srv/
  2 | bar | /postgres_srv/
(2 rows)

--Testcase 932:
alter foreign table rem2 drop constraint rem2_f1positive;
--Testcase 933:
delete from rem2__postgres_srv__0;
-- Test local triggers
--Testcase 934:
create trigger trig_stmt_before before insert on rem2__postgres_srv__0
	for each statement execute procedure trigger_func();
--Testcase 935:
create trigger trig_stmt_after after insert on rem2__postgres_srv__0
	for each statement execute procedure trigger_func();
--Testcase 936:
create trigger trig_row_before before insert on rem2__postgres_srv__0
	for each row execute procedure trigger_data(23,'skidoo');
--Testcase 937:
create trigger trig_row_after after insert on rem2__postgres_srv__0
	for each row execute procedure trigger_data(23,'skidoo');
copy rem2__postgres_srv__0 from stdin;
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem2__postgres_srv__0
NOTICE:  NEW: (1,foo)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem2__postgres_srv__0
NOTICE:  NEW: (2,bar)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem2__postgres_srv__0
NOTICE:  NEW: (1,foo)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem2__postgres_srv__0
NOTICE:  NEW: (2,bar)
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = AFTER, level = STATEMENT
--Testcase 938:
select * from rem2;
 f1 | f2  |   __spd_url    
----+-----+----------------
  1 | foo | /postgres_srv/
  2 | bar | /postgres_srv/
(2 rows)

--Testcase 939:
drop trigger trig_row_before on rem2__postgres_srv__0;
--Testcase 940:
drop trigger trig_row_after on rem2__postgres_srv__0;
--Testcase 941:
drop trigger trig_stmt_before on rem2__postgres_srv__0;
--Testcase 942:
drop trigger trig_stmt_after on rem2__postgres_srv__0;
--Testcase 943:
delete from rem2__postgres_srv__0;
--Testcase 944:
create trigger trig_row_before_insert before insert on rem2__postgres_srv__0
	for each row execute procedure trig_row_before_insupdate();
-- The new values are concatenated with ' triggered !'
copy rem2__postgres_srv__0 from stdin;
--Testcase 945:
select * from rem2;
 f1 |       f2        |   __spd_url    
----+-----------------+----------------
  1 | foo triggered ! | /postgres_srv/
  2 | bar triggered ! | /postgres_srv/
(2 rows)

--Testcase 946:
drop trigger trig_row_before_insert on rem2__postgres_srv__0;
--Testcase 947:
delete from rem2__postgres_srv__0;
--Testcase 948:
create trigger trig_null before insert on rem2__postgres_srv__0
	for each row execute procedure trig_null();
-- Nothing happens
copy rem2__postgres_srv__0 from stdin;
--Testcase 949:
select * from rem2;
 f1 | f2 | __spd_url 
----+----+-----------
(0 rows)

--Testcase 950:
drop trigger trig_null on rem2__postgres_srv__0;
--Testcase 951:
delete from rem2__postgres_srv__0;
-- Test remote triggers
--Testcase 952:
SELECT dblink_exec('create trigger trig_row_before_insert before insert on loc2_1
	for each row execute procedure trig_row_before_insupdate();');
  dblink_exec   
----------------
 CREATE TRIGGER
(1 row)

-- The new values are concatenated with ' triggered !'
copy rem2__postgres_srv__0 from stdin;
--Testcase 953:
select * from rem2;
 f1 |       f2        |   __spd_url    
----+-----------------+----------------
  1 | foo triggered ! | /postgres_srv/
  2 | bar triggered ! | /postgres_srv/
(2 rows)

--Testcase 954:
SELECT dblink_exec('drop trigger trig_row_before_insert on loc2_1;');
 dblink_exec  
--------------
 DROP TRIGGER
(1 row)

--Testcase 955:
delete from rem2__postgres_srv__0;
--Testcase 956:
SELECT dblink_exec('create trigger trig_null before insert on loc2_1
	for each row execute procedure trig_null();');
  dblink_exec   
----------------
 CREATE TRIGGER
(1 row)

-- Nothing happens
copy rem2__postgres_srv__0 from stdin;
--Testcase 957:
select * from rem2;
 f1 | f2 | __spd_url 
----+----+-----------
(0 rows)

--Testcase 958:
SELECT dblink_exec('drop trigger trig_null on loc2_1;');
 dblink_exec  
--------------
 DROP TRIGGER
(1 row)

--Testcase 959:
delete from rem2__postgres_srv__0;
-- Test a combination of local and remote triggers
--Testcase 960:
create trigger rem2_trig_row_before before insert on rem2__postgres_srv__0
	for each row execute procedure trigger_data(23,'skidoo');
--Testcase 961:
create trigger rem2_trig_row_after after insert on rem2__postgres_srv__0
	for each row execute procedure trigger_data(23,'skidoo');
--Testcase 962:
SELECT dblink_exec('create trigger loc2_trig_row_before_insert before insert on loc2_1
	for each row execute procedure trig_row_before_insupdate();');
  dblink_exec   
----------------
 CREATE TRIGGER
(1 row)

copy rem2__postgres_srv__0 from stdin;
NOTICE:  rem2_trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem2__postgres_srv__0
NOTICE:  NEW: (1,foo)
NOTICE:  rem2_trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem2__postgres_srv__0
NOTICE:  NEW: (2,bar)
NOTICE:  rem2_trig_row_after(23, skidoo) AFTER ROW INSERT ON rem2__postgres_srv__0
NOTICE:  NEW: (1,"foo triggered !")
NOTICE:  rem2_trig_row_after(23, skidoo) AFTER ROW INSERT ON rem2__postgres_srv__0
NOTICE:  NEW: (2,"bar triggered !")
--Testcase 963:
select * from rem2;
 f1 |       f2        |   __spd_url    
----+-----------------+----------------
  1 | foo triggered ! | /postgres_srv/
  2 | bar triggered ! | /postgres_srv/
(2 rows)

--Testcase 964:
drop trigger rem2_trig_row_before on rem2__postgres_srv__0;
--Testcase 965:
drop trigger rem2_trig_row_after on rem2__postgres_srv__0;
--Testcase 966:
SELECT dblink_exec('drop trigger loc2_trig_row_before_insert on loc2_1;');
 dblink_exec  
--------------
 DROP TRIGGER
(1 row)

--Testcase 967:
delete from rem2__postgres_srv__0;
-- test COPY FROM with foreign table created in the same transaction
begin;
--Testcase 968:
create foreign table rem3 (f1 int, f2 text, __spd_url text)
	server pgspider_srv;
--Testcase 969:
create foreign table rem3__postgres_srv__0 (f1 int, f2 text)
	server postgres_srv options(table_name 'loc3_1');
copy rem3__postgres_srv__0 from stdin;
commit;
--Testcase 970:
select * from rem3;
 f1 | f2  |   __spd_url    
----+-----+----------------
  1 | foo | /postgres_srv/
  2 | bar | /postgres_srv/
(2 rows)

--Testcase 971:
drop foreign table rem3;
--Testcase 972:
drop foreign table rem3__postgres_srv__0;
-- ===================================================================
-- test for TRUNCATE
-- ===================================================================
--Testcase 973:
CREATE FOREIGN TABLE tru_rtable0 (id int) SERVER postgres_srv;
--Testcase 974:
CREATE FOREIGN TABLE tru_ftable (id int)
       SERVER postgres_srv OPTIONS (table_name 'tru_rtable0');
--Testcase 975:
INSERT INTO tru_rtable0 (SELECT x FROM generate_series(1,10) x);
--Testcase 976:
CREATE TABLE tru_ptable (id int) PARTITION BY HASH(id);
--Testcase 977:
CREATE FOREIGN TABLE tru_ptable__p0 PARTITION OF tru_ptable
                            FOR VALUES WITH (MODULUS 2, REMAINDER 0) SERVER postgres_srv;
--Testcase 978:
CREATE FOREIGN TABLE tru_rtable1 (id int) SERVER postgres_srv;
--Testcase 979:
CREATE FOREIGN TABLE tru_ftable__p1 PARTITION OF tru_ptable
                                    FOR VALUES WITH (MODULUS 2, REMAINDER 1)
       SERVER postgres_srv OPTIONS (table_name 'tru_rtable1');
--Testcase 980:
INSERT INTO tru_ptable (SELECT x FROM generate_series(11,20) x);
--Testcase 981:
CREATE FOREIGN TABLE tru_pk_table(id int) SERVER postgres_srv;
--Testcase 982:
CREATE FOREIGN TABLE tru_fk_table(fkey int) SERVER postgres_srv;
--Testcase 983:
INSERT INTO tru_pk_table (SELECT x FROM generate_series(1,10) x);
--Testcase 984:
INSERT INTO tru_fk_table (SELECT x % 10 + 1 FROM generate_series(5,25) x);
--Testcase 985:
CREATE FOREIGN TABLE tru_pk_ftable (id int)
       SERVER postgres_srv OPTIONS (table_name 'tru_pk_table');
--Testcase 986:
CREATE FOREIGN TABLE tru_rtable_parent (id int) SERVER postgres_srv;
--Testcase 987:
CREATE FOREIGN TABLE tru_rtable_child (id int) SERVER postgres_srv;
--Testcase 988:
CREATE FOREIGN TABLE tru_ftable_parent (id int)
       SERVER postgres_srv OPTIONS (table_name 'tru_rtable_parent');
--Testcase 989:
CREATE FOREIGN TABLE tru_ftable_child () INHERITS (tru_ftable_parent)
       SERVER postgres_srv OPTIONS (table_name 'tru_rtable_child');
--Testcase 990:
INSERT INTO tru_rtable_parent (SELECT x FROM generate_series(1,8) x);
--Testcase 991:
INSERT INTO tru_rtable_child  (SELECT x FROM generate_series(10, 18) x);
-- normal truncate
--Testcase 992:
SELECT sum(id) FROM tru_ftable;        -- 55
 sum 
-----
  55
(1 row)

TRUNCATE tru_ftable;
--Testcase 993:
SELECT count(*) FROM tru_rtable0;		-- 0
 count 
-------
     0
(1 row)

--Testcase 994:
SELECT count(*) FROM tru_ftable;		-- 0
 count 
-------
     0
(1 row)

-- 'truncatable' option
--Testcase 995:
ALTER SERVER postgres_srv OPTIONS (ADD truncatable 'false');
TRUNCATE tru_ftable;			-- error
ERROR:  foreign table "tru_ftable" does not allow truncates
--Testcase 996:
ALTER FOREIGN TABLE tru_ftable OPTIONS (ADD truncatable 'true');
TRUNCATE tru_ftable;			-- accepted
--Testcase 997:
ALTER FOREIGN TABLE tru_ftable OPTIONS (SET truncatable 'false');
TRUNCATE tru_ftable;			-- error
ERROR:  foreign table "tru_ftable" does not allow truncates
--Testcase 998:
ALTER SERVER postgres_srv OPTIONS (DROP truncatable);
--Testcase 999:
ALTER FOREIGN TABLE tru_ftable OPTIONS (SET truncatable 'false');
TRUNCATE tru_ftable;			-- error
ERROR:  foreign table "tru_ftable" does not allow truncates
--Testcase 1000:
ALTER FOREIGN TABLE tru_ftable OPTIONS (SET truncatable 'true');
TRUNCATE tru_ftable;			-- accepted
-- partitioned table with both local and foreign tables as partitions
--Testcase 1001:
SELECT sum(id) FROM tru_ptable;        -- 155
 sum 
-----
 155
(1 row)

TRUNCATE tru_ptable;
--Testcase 1002:
SELECT count(*) FROM tru_ptable;		-- 0
 count 
-------
     0
(1 row)

--Testcase 1003:
SELECT count(*) FROM tru_ptable__p0;	-- 0
 count 
-------
     0
(1 row)

--Testcase 1004:
SELECT count(*) FROM tru_ftable__p1;	-- 0
 count 
-------
     0
(1 row)

--Testcase 1005:
SELECT count(*) FROM tru_rtable1;		-- 0
 count 
-------
     0
(1 row)

-- 'CASCADE' option
--Testcase 1006:
SELECT sum(id) FROM tru_pk_ftable;      -- 55
 sum 
-----
  55
(1 row)

TRUNCATE tru_pk_ftable;	-- failed by FK reference
ERROR:  cannot truncate a table referenced in a foreign key constraint
DETAIL:  Table "tru_fk_table" references "tru_pk_table".
HINT:  Truncate table "tru_fk_table" at the same time, or use TRUNCATE ... CASCADE.
CONTEXT:  remote SQL command: TRUNCATE public.tru_pk_table CONTINUE IDENTITY RESTRICT
TRUNCATE tru_pk_ftable CASCADE;
--Testcase 1007:
SELECT count(*) FROM tru_pk_ftable;    -- 0
 count 
-------
     0
(1 row)

--Testcase 1008:
SELECT count(*) FROM tru_fk_table;		-- also truncated,0
 count 
-------
     0
(1 row)

-- truncate two tables at a command
--Testcase 1009:
INSERT INTO tru_ftable (SELECT x FROM generate_series(1,8) x);
--Testcase 1010:
INSERT INTO tru_pk_ftable (SELECT x FROM generate_series(3,10) x);
--Testcase 1011:
SELECT count(*) from tru_ftable; -- 8
 count 
-------
     8
(1 row)

--Testcase 1012:
SELECT count(*) from tru_pk_ftable; -- 8
 count 
-------
     8
(1 row)

TRUNCATE tru_ftable, tru_pk_ftable CASCADE;
--Testcase 1013:
SELECT count(*) from tru_ftable; -- 0
 count 
-------
     0
(1 row)

--Testcase 1014:
SELECT count(*) from tru_pk_ftable; -- 0
 count 
-------
     0
(1 row)

-- truncate with ONLY clause
-- Since ONLY is specified, the table tru_ftable_child that inherits
-- tru_ftable_parent locally is not truncated.
TRUNCATE ONLY tru_ftable_parent;
--Testcase 1015:
SELECT sum(id) FROM tru_ftable_parent;  -- 126
 sum 
-----
 126
(1 row)

TRUNCATE tru_ftable_parent;
--Testcase 1016:
SELECT count(*) FROM tru_ftable_parent; -- 0
 count 
-------
     0
(1 row)

-- in case when remote table has inherited children
--Testcase 1017:
CREATE FOREIGN TABLE tru_rtable0_child () INHERITS (tru_rtable0) SERVER postgres_srv;
--Testcase 1018:
INSERT INTO tru_rtable0 (SELECT x FROM generate_series(5,9) x);
--Testcase 1019:
INSERT INTO tru_rtable0_child (SELECT x FROM generate_series(10,14) x);
--Testcase 1020:
SELECT sum(id) FROM tru_ftable;   -- 95
 sum 
-----
  95
(1 row)

-- Both parent and child tables in the foreign server are truncated
-- even though ONLY is specified because ONLY has no effect
-- when truncating a foreign table.
TRUNCATE ONLY tru_ftable;
--Testcase 1021:
SELECT count(*) FROM tru_ftable;   -- 0
 count 
-------
     0
(1 row)

--Testcase 1022:
INSERT INTO tru_rtable0 (SELECT x FROM generate_series(21,25) x);
--Testcase 1023:
INSERT INTO tru_rtable0_child (SELECT x FROM generate_series(26,30) x);
--Testcase 1024:
SELECT sum(id) FROM tru_ftable;		-- 255
 sum 
-----
 255
(1 row)

TRUNCATE tru_ftable;			-- truncate both of parent and child
--Testcase 1025:
SELECT count(*) FROM tru_ftable;    -- 0
 count 
-------
     0
(1 row)

-- cleanup
--Testcase 1026:
DROP FOREIGN TABLE tru_ftable_parent, tru_ftable_child, tru_pk_ftable,tru_ftable__p1,tru_ftable;
--Testcase 1027:
DROP FOREIGN TABLE tru_rtable0, tru_rtable1, tru_ptable__p0, tru_pk_table, tru_fk_table,
tru_rtable_parent,tru_rtable_child, tru_rtable0_child;
--Testcase 1028:
DROP TABLE tru_ptable;
-- ===================================================================
-- test IMPORT FOREIGN SCHEMA
-- ===================================================================
--Testcase 1029:
CREATE TYPE typ1 AS (m1 int, m2 varchar);
--Testcase 1030:
CREATE SCHEMA import_dest1;
IMPORT FOREIGN SCHEMA import_source FROM SERVER postgres_srv INTO import_dest1;
--Testcase 1031:
\det+ import_dest1.*
                                       List of foreign tables
    Schema    | Table |    Server    |                   FDW options                   | Description 
--------------+-------+--------------+-------------------------------------------------+-------------
 import_dest1 | t1    | postgres_srv | (schema_name 'import_source', table_name 't1')  | 
 import_dest1 | t2    | postgres_srv | (schema_name 'import_source', table_name 't2')  | 
 import_dest1 | t3    | postgres_srv | (schema_name 'import_source', table_name 't3')  | 
 import_dest1 | t4    | postgres_srv | (schema_name 'import_source', table_name 't4')  | 
 import_dest1 | x 4   | postgres_srv | (schema_name 'import_source', table_name 'x 4') | 
 import_dest1 | x 5   | postgres_srv | (schema_name 'import_source', table_name 'x 5') | 
 import_dest1 | x 6   | postgres_srv | (schema_name 'import_source', table_name 'x 6') | 
(7 rows)

--Testcase 1032:
\d import_dest1.*
                         Foreign table "import_dest1.t1"
 Column |       Type        | Collation | Nullable | Default |    FDW options     
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           | not null |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't1')

                         Foreign table "import_dest1.t2"
 Column |       Type        | Collation | Nullable | Default |    FDW options     
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           |          |         | (column_name 'c2')
 c3     | text              | POSIX     |          |         | (column_name 'c3')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't2')

                             Foreign table "import_dest1.t3"
 Column |           Type           | Collation | Nullable | Default |    FDW options     
--------+--------------------------+-----------+----------+---------+--------------------
 c1     | timestamp with time zone |           |          |         | (column_name 'c1')
 c2     | typ1                     |           |          |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't3')

                    Foreign table "import_dest1.t4"
 Column |  Type   | Collation | Nullable | Default |    FDW options     
--------+---------+-----------+----------+---------+--------------------
 c1     | integer |           |          |         | (column_name 'c1')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't4')

                           Foreign table "import_dest1.x 4"
 Column |         Type          | Collation | Nullable | Default |     FDW options     
--------+-----------------------+-----------+----------+---------+---------------------
 c1     | double precision      |           |          |         | (column_name 'c1')
 C 2    | text                  |           |          |         | (column_name 'C 2')
 c3     | character varying(42) |           |          |         | (column_name 'c3')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 4')

               Foreign table "import_dest1.x 5"
 Column | Type | Collation | Nullable | Default | FDW options 
--------+------+-----------+----------+---------+-------------
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 5')

                                  Foreign table "import_dest1.x 6"
 Column |  Type   | Collation | Nullable |               Default               |    FDW options     
--------+---------+-----------+----------+-------------------------------------+--------------------
 c1     | integer |           |          |                                     | (column_name 'c1')
 c2     | integer |           |          | generated always as (c1 * 2) stored | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 6')

-- Options
--Testcase 1033:
CREATE SCHEMA import_dest2;
IMPORT FOREIGN SCHEMA import_source FROM SERVER postgres_srv INTO import_dest2
  OPTIONS (import_default 'true');
--Testcase 1034:
\det+ import_dest2.*
                                       List of foreign tables
    Schema    | Table |    Server    |                   FDW options                   | Description 
--------------+-------+--------------+-------------------------------------------------+-------------
 import_dest2 | t1    | postgres_srv | (schema_name 'import_source', table_name 't1')  | 
 import_dest2 | t2    | postgres_srv | (schema_name 'import_source', table_name 't2')  | 
 import_dest2 | t3    | postgres_srv | (schema_name 'import_source', table_name 't3')  | 
 import_dest2 | t4    | postgres_srv | (schema_name 'import_source', table_name 't4')  | 
 import_dest2 | x 4   | postgres_srv | (schema_name 'import_source', table_name 'x 4') | 
 import_dest2 | x 5   | postgres_srv | (schema_name 'import_source', table_name 'x 5') | 
 import_dest2 | x 6   | postgres_srv | (schema_name 'import_source', table_name 'x 6') | 
(7 rows)

--Testcase 1035:
\d import_dest2.*
                         Foreign table "import_dest2.t1"
 Column |       Type        | Collation | Nullable | Default |    FDW options     
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           | not null |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't1')

                         Foreign table "import_dest2.t2"
 Column |       Type        | Collation | Nullable | Default |    FDW options     
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          | 42      | (column_name 'c1')
 c2     | character varying |           |          |         | (column_name 'c2')
 c3     | text              | POSIX     |          |         | (column_name 'c3')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't2')

                             Foreign table "import_dest2.t3"
 Column |           Type           | Collation | Nullable | Default |    FDW options     
--------+--------------------------+-----------+----------+---------+--------------------
 c1     | timestamp with time zone |           |          | now()   | (column_name 'c1')
 c2     | typ1                     |           |          |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't3')

                    Foreign table "import_dest2.t4"
 Column |  Type   | Collation | Nullable | Default |    FDW options     
--------+---------+-----------+----------+---------+--------------------
 c1     | integer |           |          |         | (column_name 'c1')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't4')

                           Foreign table "import_dest2.x 4"
 Column |         Type          | Collation | Nullable | Default |     FDW options     
--------+-----------------------+-----------+----------+---------+---------------------
 c1     | double precision      |           |          |         | (column_name 'c1')
 C 2    | text                  |           |          |         | (column_name 'C 2')
 c3     | character varying(42) |           |          |         | (column_name 'c3')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 4')

               Foreign table "import_dest2.x 5"
 Column | Type | Collation | Nullable | Default | FDW options 
--------+------+-----------+----------+---------+-------------
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 5')

                                  Foreign table "import_dest2.x 6"
 Column |  Type   | Collation | Nullable |               Default               |    FDW options     
--------+---------+-----------+----------+-------------------------------------+--------------------
 c1     | integer |           |          |                                     | (column_name 'c1')
 c2     | integer |           |          | generated always as (c1 * 2) stored | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 6')

--Testcase 1036:
CREATE SCHEMA import_dest3;
IMPORT FOREIGN SCHEMA import_source FROM SERVER postgres_srv INTO import_dest3
  OPTIONS (import_collate 'false', import_generated 'false', import_not_null 'false');
--Testcase 1037:
\det+ import_dest3.*
                                       List of foreign tables
    Schema    | Table |    Server    |                   FDW options                   | Description 
--------------+-------+--------------+-------------------------------------------------+-------------
 import_dest3 | t1    | postgres_srv | (schema_name 'import_source', table_name 't1')  | 
 import_dest3 | t2    | postgres_srv | (schema_name 'import_source', table_name 't2')  | 
 import_dest3 | t3    | postgres_srv | (schema_name 'import_source', table_name 't3')  | 
 import_dest3 | t4    | postgres_srv | (schema_name 'import_source', table_name 't4')  | 
 import_dest3 | x 4   | postgres_srv | (schema_name 'import_source', table_name 'x 4') | 
 import_dest3 | x 5   | postgres_srv | (schema_name 'import_source', table_name 'x 5') | 
 import_dest3 | x 6   | postgres_srv | (schema_name 'import_source', table_name 'x 6') | 
(7 rows)

--Testcase 1038:
\d import_dest3.*
                         Foreign table "import_dest3.t1"
 Column |       Type        | Collation | Nullable | Default |    FDW options     
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           |          |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't1')

                         Foreign table "import_dest3.t2"
 Column |       Type        | Collation | Nullable | Default |    FDW options     
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           |          |         | (column_name 'c2')
 c3     | text              |           |          |         | (column_name 'c3')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't2')

                             Foreign table "import_dest3.t3"
 Column |           Type           | Collation | Nullable | Default |    FDW options     
--------+--------------------------+-----------+----------+---------+--------------------
 c1     | timestamp with time zone |           |          |         | (column_name 'c1')
 c2     | typ1                     |           |          |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't3')

                    Foreign table "import_dest3.t4"
 Column |  Type   | Collation | Nullable | Default |    FDW options     
--------+---------+-----------+----------+---------+--------------------
 c1     | integer |           |          |         | (column_name 'c1')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't4')

                           Foreign table "import_dest3.x 4"
 Column |         Type          | Collation | Nullable | Default |     FDW options     
--------+-----------------------+-----------+----------+---------+---------------------
 c1     | double precision      |           |          |         | (column_name 'c1')
 C 2    | text                  |           |          |         | (column_name 'C 2')
 c3     | character varying(42) |           |          |         | (column_name 'c3')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 4')

               Foreign table "import_dest3.x 5"
 Column | Type | Collation | Nullable | Default | FDW options 
--------+------+-----------+----------+---------+-------------
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 5')

                    Foreign table "import_dest3.x 6"
 Column |  Type   | Collation | Nullable | Default |    FDW options     
--------+---------+-----------+----------+---------+--------------------
 c1     | integer |           |          |         | (column_name 'c1')
 c2     | integer |           |          |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 6')

-- Check LIMIT TO and EXCEPT
--Testcase 1039:
CREATE SCHEMA import_dest4;
IMPORT FOREIGN SCHEMA import_source LIMIT TO (t1, nonesuch, t4_part)
  FROM SERVER postgres_srv INTO import_dest4;
--Testcase 1040:
\det+ import_dest4.*
                                          List of foreign tables
    Schema    |  Table  |    Server    |                     FDW options                     | Description 
--------------+---------+--------------+-----------------------------------------------------+-------------
 import_dest4 | t1      | postgres_srv | (schema_name 'import_source', table_name 't1')      | 
 import_dest4 | t4_part | postgres_srv | (schema_name 'import_source', table_name 't4_part') | 
(2 rows)

IMPORT FOREIGN SCHEMA import_source EXCEPT (t1, "x 4", nonesuch, t4_part)
  FROM SERVER postgres_srv INTO import_dest4;
--Testcase 1041:
\det+ import_dest4.*
                                          List of foreign tables
    Schema    |  Table  |    Server    |                     FDW options                     | Description 
--------------+---------+--------------+-----------------------------------------------------+-------------
 import_dest4 | t1      | postgres_srv | (schema_name 'import_source', table_name 't1')      | 
 import_dest4 | t2      | postgres_srv | (schema_name 'import_source', table_name 't2')      | 
 import_dest4 | t3      | postgres_srv | (schema_name 'import_source', table_name 't3')      | 
 import_dest4 | t4      | postgres_srv | (schema_name 'import_source', table_name 't4')      | 
 import_dest4 | t4_part | postgres_srv | (schema_name 'import_source', table_name 't4_part') | 
 import_dest4 | x 5     | postgres_srv | (schema_name 'import_source', table_name 'x 5')     | 
 import_dest4 | x 6     | postgres_srv | (schema_name 'import_source', table_name 'x 6')     | 
(7 rows)

-- Assorted error cases
IMPORT FOREIGN SCHEMA import_source FROM SERVER postgres_srv INTO import_dest4;
ERROR:  relation "t1" already exists
CONTEXT:  importing foreign table "t1"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER postgres_srv INTO import_dest4;
ERROR:  schema "nonesuch" is not present on foreign server "postgres_srv"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER postgres_srv INTO notthere;
ERROR:  schema "notthere" does not exist
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER nowhere INTO notthere;
ERROR:  server "nowhere" does not exist
-- Check case of a type present only on the remote server.
-- We can fake this by dropping the type locally in our transaction.
--Testcase 1042:
CREATE TYPE "Colors" AS ENUM ('red', 'green', 'blue');
--Testcase 1043:
SELECT dblink_exec('CREATE TABLE import_source.t5 (c1 int, c2 text collate "C", "Col" "Colors");');
 dblink_exec  
--------------
 CREATE TABLE
(1 row)

--Testcase 1044:
CREATE SCHEMA import_dest5;
BEGIN;
--Testcase 1045:
DROP TYPE "Colors" CASCADE;
IMPORT FOREIGN SCHEMA import_source LIMIT TO (t5)
  FROM SERVER postgres_srv INTO import_dest5;  -- ERROR
ERROR:  type "public.Colors" does not exist
LINE 4:   "Col" public."Colors" OPTIONS (column_name 'Col')
                ^
QUERY:  CREATE FOREIGN TABLE t5 (
  c1 integer OPTIONS (column_name 'c1'),
  c2 text OPTIONS (column_name 'c2') COLLATE pg_catalog."C",
  "Col" public."Colors" OPTIONS (column_name 'Col')
) SERVER postgres_srv
OPTIONS (schema_name 'import_source', table_name 't5');
CONTEXT:  importing foreign table "t5"
ROLLBACK;
BEGIN;
--Testcase 1046:
CREATE SERVER fetch101 FOREIGN DATA WRAPPER postgres_fdw OPTIONS( fetch_size '101' );
--Testcase 1047:
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=101'];
 count 
-------
     1
(1 row)

--Testcase 1048:
ALTER SERVER fetch101 OPTIONS( SET fetch_size '202' );
--Testcase 1049:
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=101'];
 count 
-------
     0
(1 row)

--Testcase 1050:
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=202'];
 count 
-------
     1
(1 row)

--Testcase 1051:
CREATE FOREIGN TABLE table30000 ( x int ) SERVER fetch101 OPTIONS ( fetch_size '30000' );
--Testcase 1052:
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=30000'];
 count 
-------
     1
(1 row)

--Testcase 1053:
ALTER FOREIGN TABLE table30000 OPTIONS ( SET fetch_size '60000');
--Testcase 1054:
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=30000'];
 count 
-------
     0
(1 row)

--Testcase 1055:
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=60000'];
 count 
-------
     1
(1 row)

ROLLBACK;
-- ===================================================================
-- test partitionwise joins
-- ===================================================================
--Testcase 1056:
SET enable_partitionwise_join=on;
--Testcase 1057:
CREATE TABLE fprt1 (a int, b int, c varchar) PARTITION BY RANGE(a);
--Testcase 1058:
CREATE FOREIGN TABLE ftprt1_p1(a int, b int, c varchar, __spd_url text)
	SERVER pgspider_srv;
--Testcase 1059:
CREATE FOREIGN TABLE ftprt1_p1__postgres_srv__0 PARTITION OF fprt1 FOR VALUES FROM (0) TO (250)
	SERVER postgres_srv OPTIONS (table_name 'fprt1_p1', use_remote_estimate 'true');
--Testcase 1060:
CREATE FOREIGN TABLE ftprt1_p2(a int, b int, c varchar, __spd_url text)
	SERVER pgspider_srv;
--Testcase 1061:
CREATE FOREIGN TABLE ftprt1_p2__postgres_srv__0 PARTITION OF fprt1 FOR VALUES FROM (250) TO (500)
	SERVER postgres_srv OPTIONS (TABLE_NAME 'fprt1_p2');
ANALYZE fprt1;
--ANALYZE ftprt1_p1;
--ANALYZE ftprt1_p2;
--Testcase 1062:
CREATE TABLE fprt2 (a int, b int, c varchar) PARTITION BY RANGE(b);
--Testcase 1063:
CREATE FOREIGN TABLE ftprt2_p1 (b int, c varchar, a int, __spd_url text)
	SERVER pgspider_srv;
--Testcase 1064:
CREATE FOREIGN TABLE ftprt2_p1__postgres_srv__0 (b int, c varchar, a int)
	SERVER postgres_srv OPTIONS (table_name 'fprt2_p1', use_remote_estimate 'true');
--Testcase 1065:
ALTER TABLE fprt2 ATTACH PARTITION ftprt2_p1__postgres_srv__0 FOR VALUES FROM (0) TO (250);
--Testcase 1066:
CREATE FOREIGN TABLE ftprt2_p2 (b int, c varchar, a int, __spd_url text)
	SERVER pgspider_srv;
--Testcase 1067:
CREATE FOREIGN TABLE ftprt2_p2__postgres_srv__0 PARTITION OF fprt2 FOR VALUES FROM (250) TO (500)
	SERVER postgres_srv OPTIONS (table_name 'fprt2_p2', use_remote_estimate 'true');
ANALYZE fprt2;
--ANALYZE ftprt2_p1;
--ANALYZE ftprt2_p2;
-- inner join three tables
--Testcase 1068:
EXPLAIN (COSTS OFF)
SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append
   Sort Key: t1.a, t3.c
   ->  Foreign Scan
         Relations: ((ftprt1_p1__postgres_srv__0 t1_1) INNER JOIN (ftprt2_p1__postgres_srv__0 t2_1)) INNER JOIN (ftprt1_p1__postgres_srv__0 t3_1)
   ->  Foreign Scan
         Relations: ((ftprt1_p2__postgres_srv__0 t1_2) INNER JOIN (ftprt2_p2__postgres_srv__0 t2_2)) INNER JOIN (ftprt1_p2__postgres_srv__0 t3_2)
(6 rows)

--Testcase 1069:
SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
  a  |  b  |  c   
-----+-----+------
   0 |   0 | 0000
 150 | 150 | 0003
 250 | 250 | 0005
 400 | 400 | 0008
(4 rows)

-- left outer join + nullable clause
--Testcase 1070:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
                                                                                                                     QUERY PLAN                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.a, fprt2.b, fprt2.c
   Relations: (public.ftprt1_p1__postgres_srv__0 t1) LEFT JOIN (public.ftprt2_p1__postgres_srv__0 fprt2)
   Remote SQL: SELECT r5.a, r6.b, r6.c FROM (public.fprt1_p1 r5 LEFT JOIN public.fprt2_p1 r6 ON (((r5.a = r6.b)) AND ((r5.b = r6.a)) AND ((r6.a < 10)))) WHERE ((r5.a < 10)) ORDER BY r5.a ASC NULLS LAST, r6.b ASC NULLS LAST, r6.c ASC NULLS LAST
(4 rows)

--Testcase 1071:
SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
 a | b |  c   
---+---+------
 0 | 0 | 0000
 2 |   | 
 4 |   | 
 6 | 6 | 0000
 8 |   | 
(5 rows)

-- with whole-row reference; partitionwise join does not apply
--Testcase 1072:
EXPLAIN (COSTS OFF)
SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: ((t1.*)::fprt1), ((t2.*)::fprt2)
   ->  Hash Full Join
         Hash Cond: (t2.b = t1.a)
         ->  Append
               ->  Foreign Scan on ftprt2_p1__postgres_srv__0 t2_1
               ->  Foreign Scan on ftprt2_p2__postgres_srv__0 t2_2
         ->  Hash
               ->  Append
                     ->  Foreign Scan on ftprt1_p1__postgres_srv__0 t1_1
                     ->  Foreign Scan on ftprt1_p2__postgres_srv__0 t1_2
(11 rows)

--Testcase 1073:
SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
       wr       |       wr       
----------------+----------------
 (0,0,0000)     | (0,0,0000)
 (50,50,0001)   | 
 (100,100,0002) | 
 (150,150,0003) | (150,150,0003)
 (200,200,0004) | 
 (250,250,0005) | (250,250,0005)
 (300,300,0006) | 
 (350,350,0007) | 
 (400,400,0008) | (400,400,0008)
 (450,450,0009) | 
                | (75,75,0001)
                | (225,225,0004)
                | (325,325,0006)
                | (475,475,0009)
(14 rows)

-- join with lateral reference
--Testcase 1074:
EXPLAIN (COSTS OFF)
SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: t1.a, t1.b
   ->  Append
         ->  Foreign Scan
               Relations: (ftprt1_p1__postgres_srv__0 t1_1) INNER JOIN (ftprt2_p1__postgres_srv__0 t2_1)
         ->  Foreign Scan
               Relations: (ftprt1_p2__postgres_srv__0 t1_2) INNER JOIN (ftprt2_p2__postgres_srv__0 t2_2)
(7 rows)

--Testcase 1075:
SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
  a  |  b  
-----+-----
   0 |   0
 150 | 150
 250 | 250
 400 | 400
(4 rows)

-- with PHVs, partitionwise join selected but no join pushdown
--Testcase 1076:
EXPLAIN (COSTS OFF)
SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort
   Sort Key: fprt1.a, fprt2.b
   ->  Append
         ->  Hash Full Join
               Hash Cond: (fprt1_1.a = fprt2_1.b)
               ->  Foreign Scan on ftprt1_p1__postgres_srv__0 fprt1_1
               ->  Hash
                     ->  Foreign Scan on ftprt2_p1__postgres_srv__0 fprt2_1
         ->  Hash Full Join
               Hash Cond: (fprt2_2.b = fprt1_2.a)
               ->  Foreign Scan on ftprt2_p2__postgres_srv__0 fprt2_2
               ->  Hash
                     ->  Foreign Scan on ftprt1_p2__postgres_srv__0 fprt1_2
(13 rows)

--Testcase 1077:
SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
  a  |  phv   |  b  |  phv   
-----+--------+-----+--------
   0 | t1_phv |   0 | t2_phv
  50 | t1_phv |     | 
 100 | t1_phv |     | 
 150 | t1_phv | 150 | t2_phv
 200 | t1_phv |     | 
 250 | t1_phv | 250 | t2_phv
 300 | t1_phv |     | 
 350 | t1_phv |     | 
 400 | t1_phv | 400 | t2_phv
 450 | t1_phv |     | 
     |        |  75 | t2_phv
     |        | 225 | t2_phv
     |        | 325 | t2_phv
     |        | 475 | t2_phv
(14 rows)

-- test FOR UPDATE; partitionwise join does not apply
--Testcase 1078:
EXPLAIN (COSTS OFF)
SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 LockRows
   ->  Sort
         Sort Key: t1.a
         ->  Hash Join
               Hash Cond: (t2.b = t1.a)
               ->  Append
                     ->  Foreign Scan on ftprt2_p1__postgres_srv__0 t2_1
                     ->  Foreign Scan on ftprt2_p2__postgres_srv__0 t2_2
               ->  Hash
                     ->  Append
                           ->  Foreign Scan on ftprt1_p1__postgres_srv__0 t1_1
                           ->  Foreign Scan on ftprt1_p2__postgres_srv__0 t1_2
(12 rows)

--Testcase 1079:
SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
  a  |  b  
-----+-----
   0 |   0
 150 | 150
 250 | 250
 400 | 400
(4 rows)

--Testcase 1080:
RESET enable_partitionwise_join;
-- ===================================================================
-- test partitionwise aggregates
-- ===================================================================
--Testcase 1081:
CREATE TABLE pagg_tab (a int, b int, c text) PARTITION BY RANGE(a);
-- Create foreign table on pgspider node
--Testcase 1082:
CREATE FOREIGN TABLE fpagg_tab_p1 (a int, b int, c text, __spd_url text)
  SERVER pgspider_srv;
--Testcase 1083:
CREATE FOREIGN TABLE fpagg_tab_p2 (a int, b int, c text, __spd_url text)
  SERVER pgspider_srv;
--Testcase 1084:
CREATE FOREIGN TABLE fpagg_tab_p3 (a int, b int, c text, __spd_url text)
  SERVER pgspider_srv;
-- Create foreign partitions
--Testcase 1085:
CREATE FOREIGN TABLE fpagg_tab_p1__postgres_srv__0
  PARTITION OF pagg_tab FOR VALUES FROM (0) TO (10)
  SERVER postgres_srv OPTIONS (table_name 'pagg_tab_p1');
--Testcase 1086:
CREATE FOREIGN TABLE fpagg_tab_p2__postgres_srv__0
  PARTITION OF pagg_tab FOR VALUES FROM (10) TO (20)
  SERVER postgres_srv OPTIONS (table_name 'pagg_tab_p2');
--Testcase 1087:
CREATE FOREIGN TABLE fpagg_tab_p3__postgres_srv__0
  PARTITION OF pagg_tab FOR VALUES FROM (20) TO (30)
  SERVER postgres_srv OPTIONS (table_name 'pagg_tab_p3');
ANALYZE pagg_tab;
--ANALYZE fpagg_tab_p1;
--ANALYZE fpagg_tab_p2;
--ANALYZE fpagg_tab_p3;
-- When GROUP BY clause matches with PARTITION KEY.
-- Plan with partitionwise aggregates is disabled
--Testcase 1088:
SET enable_partitionwise_aggregate TO false;
--Testcase 1089:
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort
   Sort Key: pagg_tab.a
   ->  HashAggregate
         Group Key: pagg_tab.a
         Filter: (avg(pagg_tab.b) < '22'::numeric)
         ->  Append
               ->  Foreign Scan on fpagg_tab_p1__postgres_srv__0 pagg_tab_1
               ->  Foreign Scan on fpagg_tab_p2__postgres_srv__0 pagg_tab_2
               ->  Foreign Scan on fpagg_tab_p3__postgres_srv__0 pagg_tab_3
(9 rows)

-- Plan with partitionwise aggregates is enabled
--Testcase 1090:
SET enable_partitionwise_aggregate TO true;
--Testcase 1091:
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort
   Sort Key: pagg_tab.a
   ->  Append
         ->  Foreign Scan
               Relations: Aggregate on (fpagg_tab_p1__postgres_srv__0 pagg_tab)
         ->  Foreign Scan
               Relations: Aggregate on (fpagg_tab_p2__postgres_srv__0 pagg_tab_1)
         ->  Foreign Scan
               Relations: Aggregate on (fpagg_tab_p3__postgres_srv__0 pagg_tab_2)
(9 rows)

--Testcase 1092:
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
 a  | sum  | min | count 
----+------+-----+-------
  0 | 2000 |   0 |   100
  1 | 2100 |   1 |   100
 10 | 2000 |   0 |   100
 11 | 2100 |   1 |   100
 20 | 2000 |   0 |   100
 21 | 2100 |   1 |   100
(6 rows)

-- Check with whole-row reference
-- Should have all the columns in the target list for the given relation
--Testcase 1093:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort
   Output: t1.a, (count(((t1.*)::pagg_tab)))
   Sort Key: t1.a
   ->  Append
         ->  HashAggregate
               Output: t1.a, count(((t1.*)::pagg_tab))
               Group Key: t1.a
               Filter: (avg(t1.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p1__postgres_srv__0 t1
                     Output: t1.a, t1.*, t1.b
                     Remote SQL: SELECT a, b, c FROM public.pagg_tab_p1
         ->  HashAggregate
               Output: t1_1.a, count(((t1_1.*)::pagg_tab))
               Group Key: t1_1.a
               Filter: (avg(t1_1.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p2__postgres_srv__0 t1_1
                     Output: t1_1.a, t1_1.*, t1_1.b
                     Remote SQL: SELECT a, b, c FROM public.pagg_tab_p2
         ->  HashAggregate
               Output: t1_2.a, count(((t1_2.*)::pagg_tab))
               Group Key: t1_2.a
               Filter: (avg(t1_2.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p3__postgres_srv__0 t1_2
                     Output: t1_2.a, t1_2.*, t1_2.b
                     Remote SQL: SELECT a, b, c FROM public.pagg_tab_p3
(25 rows)

--Testcase 1094:
SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
 a  | count 
----+-------
  0 |   100
  1 |   100
 10 |   100
 11 |   100
 20 |   100
 21 |   100
(6 rows)

-- When GROUP BY clause does not match with PARTITION KEY.
--Testcase 1095:
EXPLAIN (COSTS OFF)
SELECT b, avg(a), max(a), count(*) FROM pagg_tab GROUP BY b HAVING sum(a) < 700 ORDER BY 1;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort
   Sort Key: pagg_tab.b
   ->  Finalize HashAggregate
         Group Key: pagg_tab.b
         Filter: (sum(pagg_tab.a) < 700)
         ->  Append
               ->  Partial HashAggregate
                     Group Key: pagg_tab.b
                     ->  Foreign Scan on fpagg_tab_p1__postgres_srv__0 pagg_tab
               ->  Partial HashAggregate
                     Group Key: pagg_tab_1.b
                     ->  Foreign Scan on fpagg_tab_p2__postgres_srv__0 pagg_tab_1
               ->  Partial HashAggregate
                     Group Key: pagg_tab_2.b
                     ->  Foreign Scan on fpagg_tab_p3__postgres_srv__0 pagg_tab_2
(15 rows)

-- ===================================================================
-- skip this test, pgspider_core_fdw does not support ssl
-- access rights and superuser
-- ===================================================================
/*
-- Non-superuser cannot create a FDW without a password in the connstr
CREATE ROLE regress_nosuper NOSUPERUSER;

GRANT USAGE ON FOREIGN DATA WRAPPER postgres_fdw TO regress_nosuper;

SET ROLE regress_nosuper;

SHOW is_superuser;

-- This will be OK, we can create the FDW
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER loopback_nopw FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('port')||$$'
            )$$;
    END;
$d$;

-- But creation of user mappings for non-superusers should fail
CREATE USER MAPPING FOR public SERVER loopback_nopw;
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback_nopw;

CREATE FOREIGN TABLE pg_temp.ft1_nopw (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 user_enum
) SERVER loopback_nopw OPTIONS (schema_name 'public', table_name 'ft1');

SELECT 1 FROM ft1_nopw LIMIT 1;

-- If we add a password to the connstr it'll fail, because we don't allow passwords
-- in connstrs only in user mappings.

DO $d$
    BEGIN
        EXECUTE $$ALTER SERVER loopback_nopw OPTIONS (ADD password 'dummypw')$$;
    END;
$d$;

-- If we add a password for our user mapping instead, we should get a different
-- error because the password wasn't actually *used* when we run with trust auth.
--
-- This won't work with installcheck, but neither will most of the FDW checks.

ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD password 'dummypw');

SELECT 1 FROM ft1_nopw LIMIT 1;

-- Unpriv user cannot make the mapping passwordless
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD password_required 'false');


SELECT 1 FROM ft1_nopw LIMIT 1;

RESET ROLE;

-- But the superuser can
ALTER USER MAPPING FOR regress_nosuper SERVER loopback_nopw OPTIONS (ADD password_required 'false');

SET ROLE regress_nosuper;

-- Should finally work now
SELECT 1 FROM ft1_nopw LIMIT 1;

-- unpriv user also cannot set sslcert / sslkey on the user mapping
-- first set password_required so we see the right error messages
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (SET password_required 'true');
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD sslcert 'foo.crt');
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD sslkey 'foo.key');

-- We're done with the role named after a specific user and need to check the
-- changes to the public mapping.
DROP USER MAPPING FOR CURRENT_USER SERVER loopback_nopw;

-- This will fail again as it'll resolve the user mapping for public, which
-- lacks password_required=false
SELECT 1 FROM ft1_nopw LIMIT 1;

RESET ROLE;

-- The user mapping for public is passwordless and lacks the password_required=false
-- mapping option, but will work because the current user is a superuser.
SELECT 1 FROM ft1_nopw LIMIT 1;

-- cleanup
DROP USER MAPPING FOR public SERVER loopback_nopw;
DROP OWNED BY regress_nosuper;
DROP ROLE regress_nosuper;

-- Clean-up
RESET enable_partitionwise_aggregate;

-- Two-phase transactions are not supported.
BEGIN;
SELECT count(*) FROM ft1;
-- error here
PREPARE TRANSACTION 'fdw_tpc';
ROLLBACK;
*/
-- ===================================================================
-- skip this test, pgspider_core_fdw does not support connection
-- reestablish new connection
-- ===================================================================
/*
-- Change application_name of remote connection to special one
-- so that we can easily terminate the connection later.
ALTER SERVER loopback OPTIONS (application_name 'fdw_retry_check');

-- If debug_discard_caches is active, it results in
-- dropping remote connections after every transaction, making it
-- impossible to test termination meaningfully.  So turn that off
-- for this test.
SET debug_discard_caches = 0;

-- Make sure we have a remote connection.
SELECT 1 FROM ft1 LIMIT 1;

-- Terminate the remote connection and wait for the termination to complete.
SELECT pg_terminate_backend(pid, 180000) FROM pg_stat_activity
	WHERE application_name = 'fdw_retry_check';

-- This query should detect the broken connection when starting new remote
-- transaction, reestablish new connection, and then succeed.
BEGIN;
SELECT 1 FROM ft1 LIMIT 1;

-- If we detect the broken connection when starting a new remote
-- subtransaction, we should fail instead of establishing a new connection.
-- Terminate the remote connection and wait for the termination to complete.
SELECT pg_terminate_backend(pid, 180000) FROM pg_stat_activity
	WHERE application_name = 'fdw_retry_check';
SAVEPOINT s;
-- The text of the error might vary across platforms, so only show SQLSTATE.
\set VERBOSITY sqlstate
SELECT 1 FROM ft1 LIMIT 1;    -- should fail
\set VERBOSITY default
COMMIT;

RESET debug_discard_caches;

-- =============================================================================
-- test connection invalidation cases and postgres_fdw_get_connections function
-- =============================================================================
-- Let's ensure to close all the existing cached connections.
SELECT 1 FROM postgres_fdw_disconnect_all();
-- No cached connections, so no records should be output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
-- This test case is for closing the connection in pgfdw_xact_callback
BEGIN;
-- Connection xact depth becomes 1 i.e. the connection is in midst of the xact.
SELECT 1 FROM ft1 LIMIT 1;
SELECT 1 FROM ft7 LIMIT 1;
-- List all the existing cached connections. loopback and loopback3 should be
-- output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
-- Connections are not closed at the end of the alter and drop statements.
-- That's because the connections are in midst of this xact,
-- they are just marked as invalid in pgfdw_inval_callback.
ALTER SERVER loopback OPTIONS (ADD use_remote_estimate 'off');
DROP SERVER loopback3 CASCADE;
-- List all the existing cached connections. loopback and loopback3
-- should be output as invalid connections. Also the server name for
-- loopback3 should be NULL because the server was dropped.
SELECT * FROM postgres_fdw_get_connections() ORDER BY 1;
-- The invalid connections get closed in pgfdw_xact_callback during commit.
COMMIT;
-- All cached connections were closed while committing above xact, so no
-- records should be output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;

-- =======================================================================
-- test postgres_fdw_disconnect and postgres_fdw_disconnect_all functions
-- =======================================================================
BEGIN;
-- Ensure to cache loopback connection.
SELECT 1 FROM ft1 LIMIT 1;
-- Ensure to cache loopback2 connection.
SELECT 1 FROM ft6 LIMIT 1;
-- List all the existing cached connections. loopback and loopback2 should be
-- output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
-- Issue a warning and return false as loopback connection is still in use and
-- can not be closed.
SELECT postgres_fdw_disconnect('loopback');
-- List all the existing cached connections. loopback and loopback2 should be
-- output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
-- Return false as connections are still in use, warnings are issued.
-- But disable warnings temporarily because the order of them is not stable.
SET client_min_messages = 'ERROR';
SELECT postgres_fdw_disconnect_all();
RESET client_min_messages;
COMMIT;
-- Ensure that loopback2 connection is closed.
SELECT 1 FROM postgres_fdw_disconnect('loopback2');
SELECT server_name FROM postgres_fdw_get_connections() WHERE server_name = 'loopback2';
-- Return false as loopback2 connection is closed already.
SELECT postgres_fdw_disconnect('loopback2');
-- Return an error as there is no foreign server with given name.
SELECT postgres_fdw_disconnect('unknownserver');
-- Let's ensure to close all the existing cached connections.
SELECT 1 FROM postgres_fdw_disconnect_all();
-- No cached connections, so no records should be output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;

-- =============================================================================
-- test case for having multiple cached connections for a foreign server
-- =============================================================================
CREATE ROLE regress_multi_conn_user1 SUPERUSER;
CREATE ROLE regress_multi_conn_user2 SUPERUSER;
CREATE USER MAPPING FOR regress_multi_conn_user1 SERVER loopback;
CREATE USER MAPPING FOR regress_multi_conn_user2 SERVER loopback;

BEGIN;
-- Will cache loopback connection with user mapping for regress_multi_conn_user1
SET ROLE regress_multi_conn_user1;
SELECT 1 FROM ft1 LIMIT 1;
RESET ROLE;

-- Will cache loopback connection with user mapping for regress_multi_conn_user2
SET ROLE regress_multi_conn_user2;
SELECT 1 FROM ft1 LIMIT 1;
RESET ROLE;

-- Should output two connections for loopback server
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
COMMIT;
-- Let's ensure to close all the existing cached connections.
SELECT 1 FROM postgres_fdw_disconnect_all();
-- No cached connections, so no records should be output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;

-- Clean up
DROP USER MAPPING FOR regress_multi_conn_user1 SERVER loopback;
DROP USER MAPPING FOR regress_multi_conn_user2 SERVER loopback;
DROP ROLE regress_multi_conn_user1;
DROP ROLE regress_multi_conn_user2;

-- ===================================================================
-- Test foreign server level option keep_connections
-- ===================================================================
-- By default, the connections associated with foreign server are cached i.e.
-- keep_connections option is on. Set it to off.
ALTER SERVER loopback OPTIONS (keep_connections 'off');
-- connection to loopback server is closed at the end of xact
-- as keep_connections was set to off.
SELECT 1 FROM ft1 LIMIT 1;
-- No cached connections, so no records should be output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
ALTER SERVER loopback OPTIONS (SET keep_connections 'on');
*/
-- ===================================================================
-- batch insert
-- ===================================================================
BEGIN;
--Testcase 1096:
CREATE SERVER batch10 FOREIGN DATA WRAPPER postgres_fdw OPTIONS( batch_size '10' );
--Testcase 1097:
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'batch10'
AND srvoptions @> array['batch_size=10'];
 count 
-------
     1
(1 row)

--Testcase 1098:
ALTER SERVER batch10 OPTIONS( SET batch_size '20' );
--Testcase 1099:
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'batch10'
AND srvoptions @> array['batch_size=10'];
 count 
-------
     0
(1 row)

--Testcase 1100:
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'batch10'
AND srvoptions @> array['batch_size=20'];
 count 
-------
     1
(1 row)

--Testcase 1101:
CREATE FOREIGN TABLE table30 ( x int ) SERVER batch10 OPTIONS ( batch_size '30' );
--Testcase 1102:
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30'::regclass
AND ftoptions @> array['batch_size=30'];
 count 
-------
     1
(1 row)

--Testcase 1103:
ALTER FOREIGN TABLE table30 OPTIONS ( SET batch_size '40');
--Testcase 1104:
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30'::regclass
AND ftoptions @> array['batch_size=30'];
 count 
-------
     0
(1 row)

--Testcase 1105:
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30'::regclass
AND ftoptions @> array['batch_size=40'];
 count 
-------
     1
(1 row)

ROLLBACK;
--Testcase 1106:
CREATE FOREIGN TABLE batch_table ( x int ) SERVER postgres_srv;
--Testcase 1107:
CREATE FOREIGN TABLE ftable ( x int ) SERVER postgres_srv OPTIONS ( table_name 'batch_table', batch_size '10' );
--Testcase 1108:
EXPLAIN (VERBOSE, COSTS OFF) INSERT INTO ftable SELECT * FROM generate_series(1, 10) i;
                         QUERY PLAN                          
-------------------------------------------------------------
 Insert on public.ftable
   Remote SQL: INSERT INTO public.batch_table(x) VALUES ($1)
   Batch Size: 10
   ->  Function Scan on pg_catalog.generate_series i
         Output: i.i
         Function Call: generate_series(1, 10)
(6 rows)

--Testcase 1109:
INSERT INTO ftable SELECT * FROM generate_series(1, 10) i;
--Testcase 1110:
INSERT INTO ftable SELECT * FROM generate_series(11, 31) i;
--Testcase 1111:
INSERT INTO ftable VALUES (32);
--Testcase 1112:
INSERT INTO ftable VALUES (33), (34);
--Testcase 1113:
SELECT COUNT(*) FROM ftable;
 count 
-------
    34
(1 row)

TRUNCATE batch_table;
--Testcase 1114:
DROP FOREIGN TABLE ftable;
-- try if large batches exceed max number of bind parameters
--Testcase 1115:
CREATE FOREIGN TABLE ftable ( x int ) SERVER postgres_srv OPTIONS ( table_name 'batch_table', batch_size '100000' );
--Testcase 1116:
INSERT INTO ftable SELECT * FROM generate_series(1, 70000) i;
--Testcase 1117:
SELECT COUNT(*) FROM ftable;
 count 
-------
 70000
(1 row)

TRUNCATE batch_table;
--Testcase 1118:
DROP FOREIGN TABLE ftable;
-- Disable batch insert
--Testcase 1119:
CREATE FOREIGN TABLE ftable ( x int ) SERVER postgres_srv OPTIONS ( table_name 'batch_table', batch_size '1' );
--Testcase 1120:
EXPLAIN (VERBOSE, COSTS OFF) INSERT INTO ftable VALUES (1), (2);
                         QUERY PLAN                          
-------------------------------------------------------------
 Insert on public.ftable
   Remote SQL: INSERT INTO public.batch_table(x) VALUES ($1)
   Batch Size: 1
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1
(5 rows)

--Testcase 1121:
INSERT INTO ftable VALUES (1), (2);
--Testcase 1122:
SELECT COUNT(*) FROM ftable;
 count 
-------
     2
(1 row)

-- Disable batch inserting into foreign tables with BEFORE ROW INSERT triggers
-- even if the batch_size option is enabled.
ALTER FOREIGN TABLE ftable OPTIONS ( SET batch_size '10' );
--Testcase 1219:
CREATE TRIGGER trig_row_before BEFORE INSERT ON ftable
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 1220:
EXPLAIN (VERBOSE, COSTS OFF) INSERT INTO ftable VALUES (3), (4);
                         QUERY PLAN                          
-------------------------------------------------------------
 Insert on public.ftable
   Remote SQL: INSERT INTO public.batch_table(x) VALUES ($1)
   Batch Size: 1
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1
(5 rows)

--Testcase 1221:
INSERT INTO ftable VALUES (3), (4);
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON ftable
NOTICE:  NEW: (3)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON ftable
NOTICE:  NEW: (4)
--Testcase 1222:
SELECT COUNT(*) FROM ftable;
 count 
-------
     4
(1 row)

-- Clean up
--Testcase 1223:
DROP TRIGGER trig_row_before ON ftable;
--Testcase 1123:
DROP FOREIGN TABLE ftable;
--Testcase 1124:
DROP FOREIGN TABLE batch_table;
-- Use partitioning
--Testcase 1125:
CREATE TABLE batch_table ( x int ) PARTITION BY HASH (x);
--Testcase 1126:
CREATE FOREIGN TABLE batch_table_p0f
	PARTITION OF batch_table
	FOR VALUES WITH (MODULUS 3, REMAINDER 0)
	SERVER postgres_srv
	OPTIONS (table_name 'batch_table_p0', batch_size '10');
--Testcase 1127:
CREATE FOREIGN TABLE batch_table_p1f
	PARTITION OF batch_table
	FOR VALUES WITH (MODULUS 3, REMAINDER 1)
	SERVER postgres_srv
	OPTIONS (table_name 'batch_table_p1', batch_size '1');
--Testcase 1128:
CREATE TABLE batch_table_p2
	PARTITION OF batch_table
	FOR VALUES WITH (MODULUS 3, REMAINDER 2);
--Testcase 1129:
INSERT INTO batch_table SELECT * FROM generate_series(1, 66) i;
--Testcase 1130:
SELECT COUNT(*) FROM batch_table;
 count 
-------
    66
(1 row)

-- Check that enabling batched inserts doesn't interfere with cross-partition
-- updates
--Testcase 1131:
CREATE TABLE batch_cp_upd_test (a int) PARTITION BY LIST (a);
--Testcase 1132:
CREATE FOREIGN TABLE batch_cp_upd_test1_f
	PARTITION OF batch_cp_upd_test
	FOR VALUES IN (1)
	SERVER postgres_srv
	OPTIONS (table_name 'batch_cp_upd_test1', batch_size '10');
--Testcase 1133:
CREATE TABLE batch_cp_up_test1 PARTITION OF batch_cp_upd_test
	FOR VALUES IN (2);
--Testcase 1134:
INSERT INTO batch_cp_upd_test VALUES (1), (2);
-- The following moves a row from the local partition to the foreign one
--Testcase 1135:
UPDATE batch_cp_upd_test t SET a = 1 FROM (VALUES (1), (2)) s(a) WHERE t.a = s.a;
ERROR:  cannot route tuples into foreign table to be updated "batch_cp_upd_test1_f"
--Testcase 1136:
SELECT tableoid::regclass, * FROM batch_cp_upd_test;
       tableoid       | a 
----------------------+---
 batch_cp_upd_test1_f | 1
 batch_cp_up_test1    | 2
(2 rows)

-- Clean up
--Testcase 1137:
DROP TABLE batch_table, batch_cp_upd_test CASCADE;
-- Use partitioning
--Testcase 1138:
ALTER SERVER postgres_srv OPTIONS (ADD batch_size '10');
--Testcase 1139:
CREATE TABLE batch_table ( x int, field1 text, field2 text) PARTITION BY HASH (x);
--Testcase 1140:
CREATE FOREIGN TABLE batch_table_p2f
	PARTITION OF batch_table
	FOR VALUES WITH (MODULUS 2, REMAINDER 0)
	SERVER postgres_srv
	OPTIONS (table_name 'batch_table_p2');
--Testcase 1141:
CREATE FOREIGN TABLE batch_table_p3f
	PARTITION OF batch_table
	FOR VALUES WITH (MODULUS 2, REMAINDER 1)
	SERVER postgres_srv
	OPTIONS (table_name 'batch_table_p3');
--Testcase 1142:
INSERT INTO batch_table SELECT i, 'test'||i, 'test'|| i FROM generate_series(1, 50) i;
--Testcase 1143:
SELECT COUNT(*) FROM batch_table;
 count 
-------
    50
(1 row)

--Testcase 1144:
SELECT * FROM batch_table ORDER BY x;
 x  | field1 | field2 
----+--------+--------
  1 | test1  | test1
  2 | test2  | test2
  3 | test3  | test3
  4 | test4  | test4
  5 | test5  | test5
  6 | test6  | test6
  7 | test7  | test7
  8 | test8  | test8
  9 | test9  | test9
 10 | test10 | test10
 11 | test11 | test11
 12 | test12 | test12
 13 | test13 | test13
 14 | test14 | test14
 15 | test15 | test15
 16 | test16 | test16
 17 | test17 | test17
 18 | test18 | test18
 19 | test19 | test19
 20 | test20 | test20
 21 | test21 | test21
 22 | test22 | test22
 23 | test23 | test23
 24 | test24 | test24
 25 | test25 | test25
 26 | test26 | test26
 27 | test27 | test27
 28 | test28 | test28
 29 | test29 | test29
 30 | test30 | test30
 31 | test31 | test31
 32 | test32 | test32
 33 | test33 | test33
 34 | test34 | test34
 35 | test35 | test35
 36 | test36 | test36
 37 | test37 | test37
 38 | test38 | test38
 39 | test39 | test39
 40 | test40 | test40
 41 | test41 | test41
 42 | test42 | test42
 43 | test43 | test43
 44 | test44 | test44
 45 | test45 | test45
 46 | test46 | test46
 47 | test47 | test47
 48 | test48 | test48
 49 | test49 | test49
 50 | test50 | test50
(50 rows)

--Testcase 1145:
ALTER SERVER postgres_srv OPTIONS (DROP batch_size);
-- ===================================================================
-- skip this test, pgspider_core_fdw does not support asynchronous execution
-- test asynchronous execution
-- ===================================================================
/*
ALTER SERVER loopback OPTIONS (DROP extensions);
ALTER SERVER loopback OPTIONS (ADD async_capable 'true');
ALTER SERVER loopback2 OPTIONS (ADD async_capable 'true');

CREATE TABLE async_pt (a int, b int, c text) PARTITION BY RANGE (a);
CREATE TABLE base_tbl1 (a int, b int, c text);
CREATE TABLE base_tbl2 (a int, b int, c text);
CREATE FOREIGN TABLE async_p1 PARTITION OF async_pt FOR VALUES FROM (1000) TO (2000)
  SERVER loopback OPTIONS (table_name 'base_tbl1');
CREATE FOREIGN TABLE async_p2 PARTITION OF async_pt FOR VALUES FROM (2000) TO (3000)
  SERVER loopback2 OPTIONS (table_name 'base_tbl2');
INSERT INTO async_p1 SELECT 1000 + i, i, to_char(i, 'FM0000') FROM generate_series(0, 999, 5) i;
INSERT INTO async_p2 SELECT 2000 + i, i, to_char(i, 'FM0000') FROM generate_series(0, 999, 5) i;
ANALYZE async_pt;

-- simple queries
CREATE TABLE result_tbl (a int, b int, c text);

EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl SELECT * FROM async_pt WHERE b % 100 = 0;
INSERT INTO result_tbl SELECT * FROM async_pt WHERE b % 100 = 0;

SELECT * FROM result_tbl ORDER BY a;
DELETE FROM result_tbl;

EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;

SELECT * FROM result_tbl ORDER BY a;
DELETE FROM result_tbl;

EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl SELECT a, b, 'AAA' || c FROM async_pt WHERE b === 505;
INSERT INTO result_tbl SELECT a, b, 'AAA' || c FROM async_pt WHERE b === 505;

SELECT * FROM result_tbl ORDER BY a;
DELETE FROM result_tbl;

-- Check case where multiple partitions use the same connection
CREATE TABLE base_tbl3 (a int, b int, c text);
CREATE FOREIGN TABLE async_p3 PARTITION OF async_pt FOR VALUES FROM (3000) TO (4000)
  SERVER loopback2 OPTIONS (table_name 'base_tbl3');
INSERT INTO async_p3 SELECT 3000 + i, i, to_char(i, 'FM0000') FROM generate_series(0, 999, 5) i;
ANALYZE async_pt;

EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;

SELECT * FROM result_tbl ORDER BY a;
DELETE FROM result_tbl;

DROP FOREIGN TABLE async_p3;
DROP TABLE base_tbl3;

-- Check case where the partitioned table has local/remote partitions
CREATE TABLE async_p3 PARTITION OF async_pt FOR VALUES FROM (3000) TO (4000);
INSERT INTO async_p3 SELECT 3000 + i, i, to_char(i, 'FM0000') FROM generate_series(0, 999, 5) i;
ANALYZE async_pt;

EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;

SELECT * FROM result_tbl ORDER BY a;
DELETE FROM result_tbl;

-- partitionwise joins
SET enable_partitionwise_join TO true;

CREATE TABLE join_tbl (a1 int, b1 int, c1 text, a2 int, b2 int, c2 text);

EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO join_tbl SELECT * FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
INSERT INTO join_tbl SELECT * FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;

SELECT * FROM join_tbl ORDER BY a1;
DELETE FROM join_tbl;

EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO join_tbl SELECT t1.a, t1.b, 'AAA' || t1.c, t2.a, t2.b, 'AAA' || t2.c FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
INSERT INTO join_tbl SELECT t1.a, t1.b, 'AAA' || t1.c, t2.a, t2.b, 'AAA' || t2.c FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;

SELECT * FROM join_tbl ORDER BY a1;
DELETE FROM join_tbl;

RESET enable_partitionwise_join;

-- Test rescan of an async Append node with do_exec_prune=false
SET enable_hashjoin TO false;

EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO join_tbl SELECT * FROM async_p1 t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
INSERT INTO join_tbl SELECT * FROM async_p1 t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;

SELECT * FROM join_tbl ORDER BY a1;
DELETE FROM join_tbl;

RESET enable_hashjoin;

-- Test interaction of async execution with plan-time partition pruning
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM async_pt WHERE a < 3000;

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM async_pt WHERE a < 2000;

-- Test interaction of async execution with run-time partition pruning
SET plan_cache_mode TO force_generic_plan;

PREPARE async_pt_query (int, int) AS
  INSERT INTO result_tbl SELECT * FROM async_pt WHERE a < $1 AND b === $2;

EXPLAIN (VERBOSE, COSTS OFF)
EXECUTE async_pt_query (3000, 505);
EXECUTE async_pt_query (3000, 505);

SELECT * FROM result_tbl ORDER BY a;
DELETE FROM result_tbl;

EXPLAIN (VERBOSE, COSTS OFF)
EXECUTE async_pt_query (2000, 505);
EXECUTE async_pt_query (2000, 505);

SELECT * FROM result_tbl ORDER BY a;
DELETE FROM result_tbl;

RESET plan_cache_mode;

CREATE TABLE local_tbl(a int, b int, c text);
INSERT INTO local_tbl VALUES (1505, 505, 'foo'), (2505, 505, 'bar');
ANALYZE local_tbl;

CREATE INDEX base_tbl1_idx ON base_tbl1 (a);
CREATE INDEX base_tbl2_idx ON base_tbl2 (a);
CREATE INDEX async_p3_idx ON async_p3 (a);
ANALYZE base_tbl1;
ANALYZE base_tbl2;
ANALYZE async_p3;

ALTER FOREIGN TABLE async_p1 OPTIONS (use_remote_estimate 'true');
ALTER FOREIGN TABLE async_p2 OPTIONS (use_remote_estimate 'true');

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM local_tbl, async_pt WHERE local_tbl.a = async_pt.a AND local_tbl.c = 'bar';
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT * FROM local_tbl, async_pt WHERE local_tbl.a = async_pt.a AND local_tbl.c = 'bar';
SELECT * FROM local_tbl, async_pt WHERE local_tbl.a = async_pt.a AND local_tbl.c = 'bar';

ALTER FOREIGN TABLE async_p1 OPTIONS (DROP use_remote_estimate);
ALTER FOREIGN TABLE async_p2 OPTIONS (DROP use_remote_estimate);

DROP TABLE local_tbl;
DROP INDEX base_tbl1_idx;
DROP INDEX base_tbl2_idx;
DROP INDEX async_p3_idx;

-- UNION queries
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl
(SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
UNION
(SELECT a, b, 'AAA' || c FROM async_p2 WHERE b < 10);
INSERT INTO result_tbl
(SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
UNION
(SELECT a, b, 'AAA' || c FROM async_p2 WHERE b < 10);

SELECT * FROM result_tbl ORDER BY a;
DELETE FROM result_tbl;

EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl
(SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
UNION ALL
(SELECT a, b, 'AAA' || c FROM async_p2 WHERE b < 10);
INSERT INTO result_tbl
(SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
UNION ALL
(SELECT a, b, 'AAA' || c FROM async_p2 WHERE b < 10);

SELECT * FROM result_tbl ORDER BY a;
DELETE FROM result_tbl;

-- Disable async execution if we use gating Result nodes for pseudoconstant
-- quals
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM async_pt WHERE CURRENT_USER = SESSION_USER;

EXPLAIN (VERBOSE, COSTS OFF)
(SELECT * FROM async_p1 WHERE CURRENT_USER = SESSION_USER)
UNION ALL
(SELECT * FROM async_p2 WHERE CURRENT_USER = SESSION_USER);

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ((SELECT * FROM async_p1 WHERE b < 10) UNION ALL (SELECT * FROM async_p2 WHERE b < 10)) s WHERE CURRENT_USER = SESSION_USER;

-- Test that pending requests are processed properly
SET enable_mergejoin TO false;
SET enable_hashjoin TO false;

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM async_pt t1, async_p2 t2 WHERE t1.a = t2.a AND t1.b === 505;
SELECT * FROM async_pt t1, async_p2 t2 WHERE t1.a = t2.a AND t1.b === 505;

CREATE TABLE local_tbl (a int, b int, c text);
INSERT INTO local_tbl VALUES (1505, 505, 'foo');
ANALYZE local_tbl;

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM local_tbl t1 LEFT JOIN (SELECT *, (SELECT count(*) FROM async_pt WHERE a < 3000) FROM async_pt WHERE a < 3000) t2 ON t1.a = t2.a;
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT * FROM local_tbl t1 LEFT JOIN (SELECT *, (SELECT count(*) FROM async_pt WHERE a < 3000) FROM async_pt WHERE a < 3000) t2 ON t1.a = t2.a;
SELECT * FROM local_tbl t1 LEFT JOIN (SELECT *, (SELECT count(*) FROM async_pt WHERE a < 3000) FROM async_pt WHERE a < 3000) t2 ON t1.a = t2.a;

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM async_pt t1 WHERE t1.b === 505 LIMIT 1;
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT * FROM async_pt t1 WHERE t1.b === 505 LIMIT 1;
SELECT * FROM async_pt t1 WHERE t1.b === 505 LIMIT 1;

-- Check with foreign modify
CREATE TABLE base_tbl3 (a int, b int, c text);
CREATE FOREIGN TABLE remote_tbl (a int, b int, c text)
  SERVER loopback OPTIONS (table_name 'base_tbl3');
INSERT INTO remote_tbl VALUES (2505, 505, 'bar');

CREATE TABLE base_tbl4 (a int, b int, c text);
CREATE FOREIGN TABLE insert_tbl (a int, b int, c text)
  SERVER loopback OPTIONS (table_name 'base_tbl4');

EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO insert_tbl (SELECT * FROM local_tbl UNION ALL SELECT * FROM remote_tbl);
INSERT INTO insert_tbl (SELECT * FROM local_tbl UNION ALL SELECT * FROM remote_tbl);

SELECT * FROM insert_tbl ORDER BY a;

-- Check with direct modify
EXPLAIN (VERBOSE, COSTS OFF)
WITH t AS (UPDATE remote_tbl SET c = c || c RETURNING *)
INSERT INTO join_tbl SELECT * FROM async_pt LEFT JOIN t ON (async_pt.a = t.a AND async_pt.b = t.b) WHERE async_pt.b === 505;
WITH t AS (UPDATE remote_tbl SET c = c || c RETURNING *)
INSERT INTO join_tbl SELECT * FROM async_pt LEFT JOIN t ON (async_pt.a = t.a AND async_pt.b = t.b) WHERE async_pt.b === 505;

SELECT * FROM join_tbl ORDER BY a1;
DELETE FROM join_tbl;

DROP TABLE local_tbl;
DROP FOREIGN TABLE remote_tbl;
DROP FOREIGN TABLE insert_tbl;
DROP TABLE base_tbl3;
DROP TABLE base_tbl4;

RESET enable_mergejoin;
RESET enable_hashjoin;

-- Test that UPDATE/DELETE with inherited target works with async_capable enabled
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE async_pt SET c = c || c WHERE b = 0 RETURNING *;
UPDATE async_pt SET c = c || c WHERE b = 0 RETURNING *;
EXPLAIN (VERBOSE, COSTS OFF)
DELETE FROM async_pt WHERE b = 0 RETURNING *;
DELETE FROM async_pt WHERE b = 0 RETURNING *;

-- Check EXPLAIN ANALYZE for a query that scans empty partitions asynchronously
DELETE FROM async_p1;
DELETE FROM async_p2;
DELETE FROM async_p3;

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT * FROM async_pt;

-- Clean up
DROP TABLE async_pt;
DROP TABLE base_tbl1;
DROP TABLE base_tbl2;
DROP TABLE result_tbl;
DROP TABLE join_tbl;

-- Test that an asynchronous fetch is processed before restarting the scan in
-- ReScanForeignScan
CREATE TABLE base_tbl (a int, b int);
INSERT INTO base_tbl VALUES (1, 11), (2, 22), (3, 33);
CREATE FOREIGN TABLE foreign_tbl (b int)
  SERVER loopback OPTIONS (table_name 'base_tbl');
CREATE FOREIGN TABLE foreign_tbl2 () INHERITS (foreign_tbl)
  SERVER loopback OPTIONS (table_name 'base_tbl');

EXPLAIN (VERBOSE, COSTS OFF)
SELECT a FROM base_tbl WHERE a IN (SELECT a FROM foreign_tbl);
SELECT a FROM base_tbl WHERE a IN (SELECT a FROM foreign_tbl);

-- Clean up
DROP FOREIGN TABLE foreign_tbl CASCADE;
DROP TABLE base_tbl;

ALTER SERVER loopback OPTIONS (DROP async_capable);
ALTER SERVER loopback2 OPTIONS (DROP async_capable);
*/
-- ===================================================================
-- test invalid server, foreign table and foreign data wrapper options
-- ===================================================================
-- Invalid fdw_startup_cost option
--Testcase 1224:
CREATE SERVER inv_scst FOREIGN DATA WRAPPER postgres_fdw
	OPTIONS(fdw_startup_cost '100$%$#$#');
ERROR:  invalid value for floating point option "fdw_startup_cost": 100$%$#$#
-- Invalid fdw_tuple_cost option
--Testcase 1225:
CREATE SERVER inv_scst FOREIGN DATA WRAPPER postgres_fdw
	OPTIONS(fdw_tuple_cost '100$%$#$#');
ERROR:  invalid value for floating point option "fdw_tuple_cost": 100$%$#$#
-- Invalid fetch_size option
--Testcase 1226:
CREATE FOREIGN TABLE inv_fsz (c1 int )
	SERVER postgres_srv OPTIONS (fetch_size '100$%$#$#');
ERROR:  invalid value for integer option "fetch_size": 100$%$#$#
-- Invalid batch_size option
--Testcase 1227:
CREATE FOREIGN TABLE inv_bsz (c1 int )
	SERVER postgres_srv OPTIONS (batch_size '100$%$#$#');
ERROR:  invalid value for integer option "batch_size": 100$%$#$#
-- Skip this test, pgspider does not support application_name and parallel_commit
/*
-- No option is allowed to be specified at foreign data wrapper level
ALTER FOREIGN DATA WRAPPER postgres_fdw OPTIONS (nonexistent 'fdw');

-- ===================================================================
-- test postgres_fdw.application_name GUC
-- ===================================================================
--- Turn debug_discard_caches off for this test to make sure that
--- the remote connection is alive when checking its application_name.
SET debug_discard_caches = 0;

-- Specify escape sequences in application_name option of a server
-- object so as to test that they are replaced with status information
-- expectedly.
--
-- Since pg_stat_activity.application_name may be truncated to less than
-- NAMEDATALEN characters, note that substring() needs to be used
-- at the condition of test query to make sure that the string consisting
-- of database name and process ID is also less than that.
ALTER SERVER postgres_srv2 OPTIONS (application_name 'fdw_%d%p');
SELECT 1 FROM ft6 LIMIT 1;
SELECT pg_terminate_backend(pid, 180000) FROM pg_stat_activity
  WHERE application_name =
    substring('fdw_' || current_database() || pg_backend_pid() for
      current_setting('max_identifier_length')::int);

-- postgres_fdw.application_name overrides application_name option
-- of a server object if both settings are present.
SET postgres_fdw.application_name TO 'fdw_%a%u%%';
SELECT 1 FROM ft6 LIMIT 1;
SELECT pg_terminate_backend(pid, 180000) FROM pg_stat_activity
  WHERE application_name =
    substring('fdw_' || current_setting('application_name') ||
      CURRENT_USER || '%' for current_setting('max_identifier_length')::int);

-- Test %c (session ID) and %C (cluster name) escape sequences.
SET postgres_fdw.application_name TO 'fdw_%C%c';
SELECT 1 FROM ft6 LIMIT 1;
SELECT pg_terminate_backend(pid, 180000) FROM pg_stat_activity
  WHERE application_name =
    substring('fdw_' || current_setting('cluster_name') ||
      to_hex(trunc(EXTRACT(EPOCH FROM (SELECT backend_start FROM
      pg_stat_get_activity(pg_backend_pid()))))::integer) || '.' ||
      to_hex(pg_backend_pid())
      for current_setting('max_identifier_length')::int);

--Clean up
RESET postgres_fdw.application_name;
RESET debug_discard_caches;
*/
-- ===================================================================
-- test parallel commit
-- ===================================================================
ALTER SERVER postgres_srv OPTIONS (ADD parallel_commit 'true');
ALTER SERVER postgres_srv2 OPTIONS (ADD parallel_commit 'true');
--Testcase 1228:
CREATE FOREIGN TABLE prem1 (f1 int, f2 text)
  SERVER postgres_srv OPTIONS (table_name 'ploc1');
--Testcase 1229:
CREATE FOREIGN TABLE prem2 (f1 int, f2 text)
  SERVER postgres_srv2 OPTIONS (table_name 'ploc2');
BEGIN;
--Testcase 1230:
INSERT INTO prem1 VALUES (101, 'foo');
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
--Testcase 1231:
INSERT INTO prem2 VALUES (201, 'bar');
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
COMMIT;
--Testcase 1232:
SELECT * FROM prem1;
 f1  | f2  
-----+-----
 101 | foo
(1 row)

--Testcase 1233:
SELECT * FROM prem2;
 f1  | f2  
-----+-----
 201 | bar
(1 row)

BEGIN;
SAVEPOINT s;
--Testcase 1234:
INSERT INTO prem1 VALUES (102, 'foofoo');
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
--Testcase 1235:
INSERT INTO prem2 VALUES (202, 'barbar');
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
RELEASE SAVEPOINT s;
COMMIT;
--Testcase 1236:
SELECT * FROM prem1;
 f1  |   f2   
-----+--------
 101 | foo
 102 | foofoo
(2 rows)

--Testcase 1237:
SELECT * FROM prem2;
 f1  |   f2   
-----+--------
 201 | bar
 202 | barbar
(2 rows)

-- This tests executing DEALLOCATE ALL against foreign servers in parallel
-- during pre-commit
BEGIN;
SAVEPOINT s;
--Testcase 1238:
INSERT INTO prem1 VALUES (103, 'baz');
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
--Testcase 1239:
INSERT INTO prem2 VALUES (203, 'qux');
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
ROLLBACK TO SAVEPOINT s;
RELEASE SAVEPOINT s;
--Testcase 1240:
INSERT INTO prem1 VALUES (104, 'bazbaz');
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
--Testcase 1241:
INSERT INTO prem2 VALUES (204, 'quxqux');
WARNING:  Modification query is executing in non-autocommit mode.
Multitenant table can not read un-commited data.
COMMIT;
--Testcase 1242:
SELECT * FROM prem1;
 f1  |   f2   
-----+--------
 101 | foo
 102 | foofoo
 104 | bazbaz
(3 rows)

--Testcase 1243:
SELECT * FROM prem2;
 f1  |   f2   
-----+--------
 201 | bar
 202 | barbar
 204 | quxqux
(3 rows)

ALTER SERVER postgres_srv OPTIONS (DROP parallel_commit);
ALTER SERVER postgres_srv2 OPTIONS (DROP parallel_commit);
--Testcase 1146:
SELECT dblink_disconnect();
 dblink_disconnect 
-------------------
 OK
(1 row)

