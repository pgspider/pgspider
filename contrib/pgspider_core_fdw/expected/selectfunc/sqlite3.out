--Testcase 1:
SET datestyle=ISO;
--Testcase 2:
SET timezone='Japan';
--Testcase 3:
CREATE EXTENSION pgspider_core_fdw;
--Testcase 4:
CREATE SERVER pgspider_core_svr FOREIGN DATA WRAPPER pgspider_core_fdw OPTIONS (host '127.0.0.1');
--Testcase 5:
CREATE USER MAPPING FOR CURRENT_USER SERVER pgspider_core_svr;
----------------------------------------------------------
-- test structure
-- PGSpider Top Node -+-> Child PGSpider Node -> Data source
--                    +-> Data source
-- stub functions are provided by pgspider_fdw and/or Data source FDW (mix use)
----------------------------------------------------------
-- Data source: sqlite
--Testcase 6:
CREATE FOREIGN TABLE s3 (id text, time timestamp, tag1 text, value1 float, value2 int, value3 float, value4 int, str1 text, str2 text, __spd_url text) SERVER pgspider_core_svr;
--Testcase 7:
CREATE EXTENSION pgspider_fdw;
--Testcase 8:
CREATE SERVER pgspider_svr FOREIGN DATA WRAPPER pgspider_fdw OPTIONS (host '127.0.0.1', port '5433', dbname 'postgres');
--Testcase 9:
CREATE USER MAPPING FOR CURRENT_USER SERVER pgspider_svr;
--Testcase 10:
CREATE FOREIGN TABLE s3__pgspider_svr__0 (id text, time timestamp, tag1 text, value1 float, value2 int, value3 float, value4 int, str1 text, str2 text, __spd_url text) SERVER pgspider_svr OPTIONS (table_name 's31sqlite');
--Testcase 11:
CREATE EXTENSION sqlite_fdw;
--Testcase 12:
CREATE SERVER sqlite_svr FOREIGN DATA WRAPPER sqlite_fdw
OPTIONS (database '/tmp/pgtest.db');
--Testcase 13:
CREATE FOREIGN TABLE s3__sqlite_svr__0 (id text OPTIONS (key 'true'), time timestamp, tag1 text, value1 float, value2 int, value3 float, value4 int, str1 text, str2 text) SERVER sqlite_svr OPTIONS(table 's32');
-- s3 (value1 as float8, value2 as bigint)
--Testcase 14:
\d s3;
                               Foreign table "public.s3"
  Column   |            Type             | Collation | Nullable | Default | FDW options 
-----------+-----------------------------+-----------+----------+---------+-------------
 id        | text                        |           |          |         | 
 time      | timestamp without time zone |           |          |         | 
 tag1      | text                        |           |          |         | 
 value1    | double precision            |           |          |         | 
 value2    | integer                     |           |          |         | 
 value3    | double precision            |           |          |         | 
 value4    | integer                     |           |          |         | 
 str1      | text                        |           |          |         | 
 str2      | text                        |           |          |         | 
 __spd_url | text                        |           |          |         | 
Server: pgspider_core_svr

--Testcase 15:
SELECT * FROM s3 ORDER BY 1,2,3,4,5,6,7,8,9,10;
 id |        time         | tag1 | value1 | value2 | value3 | value4 |   str1    |   str2    |         __spd_url         
----+---------------------+------+--------+--------+--------+--------+-----------+-----------+---------------------------
 0  | 1970-01-01 00:00:00 | a    |    0.1 |    100 |   -0.1 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/sqlite_svr/
 1  | 1970-01-01 00:00:01 | a    |    0.2 |    100 |   -0.2 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/sqlite_svr/
 2  | 1970-01-01 00:00:02 | a    |    0.3 |    100 |   -0.3 |   -100 | ---XYZ--- |    XYZ    | /pgspider_svr/sqlite_svr/
 3  | 1970-01-01 00:00:03 | b    |    1.1 |    200 |   -1.1 |   -200 | ---XYZ--- |    XYZ    | /sqlite_svr/
 4  | 1970-01-01 00:00:04 | b    |    2.2 |    200 |   -2.2 |   -200 | ---XYZ--- |    XYZ    | /sqlite_svr/
 5  | 1970-01-01 00:00:05 | b    |    3.3 |    200 |   -3.3 |   -200 | ---XYZ--- |    XYZ    | /sqlite_svr/
(6 rows)

-- select abs (builtin function, explain)
--Testcase 16:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 ORDER BY 1;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort  (cost=4128.36..4145.42 rows=6826 width=24)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Sort Key: (abs(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3693.65 rows=6826 width=24)
         Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM public.s31sqlite
         Node: sqlite_svr / Status: Alive
           SQLite query: SELECT abs(`value1`), abs(`value2`), abs(`value3`), abs(`value4`) FROM main."s32"
(9 rows)

-- select abs (buitin function, result)
--Testcase 17:
SELECT * FROM (
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3
) AS t ORDER BY 1,2,3,4;
 abs | abs | abs | abs 
-----+-----+-----+-----
 0.1 | 100 | 0.1 | 100
 0.2 | 100 | 0.2 | 100
 0.3 | 100 | 0.3 | 100
 1.1 | 200 | 1.1 | 200
 2.2 | 200 | 2.2 | 200
 3.3 | 200 | 3.3 | 200
(6 rows)

-- select abs (builtin function, not pushdown constraints, explain)
--Testcase 18:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE to_hex(value2) != '64' ORDER BY 1;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4125.67..4142.65 rows=6792 width=24)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Sort Key: (abs(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3693.38 rows=6792 width=24)
         Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
         Filter: ((to_hex(s3.value2) <> '64'::text) AND (to_hex(s3.value2) <> '64'::text))
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT abs(value1), abs(value2), abs(value3), abs(value4), value2 FROM public.s31sqlite
         Node: sqlite_svr / Status: Alive
           SQLite query: SELECT abs(`value1`), abs(`value2`), abs(`value3`), abs(`value4`), `value2` FROM main."s32"
(10 rows)

-- select abs (builtin function, not pushdown constraints, result)
--Testcase 19:
SELECT * FROM (
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE to_hex(value2) != '64'
) AS t ORDER BY 1,2,3,4;
 abs | abs | abs | abs 
-----+-----+-----+-----
 1.1 | 200 | 1.1 | 200
 2.2 | 200 | 2.2 | 200
 3.3 | 200 | 3.3 | 200
(3 rows)

-- select abs (builtin function, pushdown constraints, explain)
--Testcase 20:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE value2 != 200 ORDER BY 1;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4116.80..4133.78 rows=6792 width=24)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Sort Key: (abs(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3684.50 rows=6792 width=24)
         Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM public.s31sqlite WHERE ((value2 <> 200))
         Node: sqlite_svr / Status: Alive
           SQLite query: SELECT abs(`value1`), abs(`value2`), abs(`value3`), abs(`value4`) FROM main."s32" WHERE ((`value2` <> 200))
(9 rows)

-- select abs (builtin function, pushdown constraints, result)
--Testcase 21:
SELECT * FROM (
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE value2 != 200
) AS t ORDER BY 1,2,3,4;
 abs | abs | abs | abs 
-----+-----+-----+-----
 0.1 | 100 | 0.1 | 100
 0.2 | 100 | 0.2 | 100
 0.3 | 100 | 0.3 | 100
(3 rows)

-- select abs as nest function with agg (pushdown, explain)
--Testcase 22:
EXPLAIN VERBOSE
SELECT sum(value3),abs(sum(value3)) FROM s3 ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort  (cost=0.01..0.02 rows=1 width=16)
   Output: (sum(value3)), (abs((sum(value3))))
   Sort Key: (sum(s3.value3))
   ->  Foreign Scan  (cost=0.00..0.00 rows=1 width=16)
         Output: (sum(value3)), abs((sum(value3)))
         Node: pgspider_svr / Status: Alive
           Agg push-down: yes
           Relations: Aggregate on (public.s3)
           Remote SQL: SELECT sum(value3) FROM public.s31sqlite
         Node: sqlite_svr / Status: Alive
           Agg push-down: yes
           SQLite query: SELECT sum(`value3`) FROM main."s32"
(12 rows)

-- select abs as nest function with agg (pushdown, result)
--Testcase 23:
SELECT sum(value3),abs(sum(value3)) FROM s3 ORDER BY 1;
        sum         |        abs        
--------------------+-------------------
 -7.199999999999999 | 7.199999999999999
(1 row)

-- select abs with non pushdown func and explicit constant (explain)
--Testcase 24:
EXPLAIN VERBOSE
SELECT abs(value3), pi(), 4.1 FROM s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=4077.16..4094.23 rows=6826 width=48)
   Output: (abs(value3)), '3.141592653589793'::double precision, 4.1
   Sort Key: (abs(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3642.45 rows=6826 width=48)
         Output: abs(value3), '3.141592653589793'::double precision, 4.1
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT value3 FROM public.s31sqlite
         Node: sqlite_svr / Status: Alive
           SQLite query: SELECT `value3` FROM main."s32"
(9 rows)

-- select abs with non pushdown func and explicit constant (result)
--Testcase 25:
SELECT * FROM (
SELECT abs(value3), pi(), 4.1 FROM s3
) AS t ORDER BY 1,2,3;
 abs |        pi         | ?column? 
-----+-------------------+----------
 0.1 | 3.141592653589793 |      4.1
 0.2 | 3.141592653589793 |      4.1
 0.3 | 3.141592653589793 |      4.1
 1.1 | 3.141592653589793 |      4.1
 2.2 | 3.141592653589793 |      4.1
 3.3 | 3.141592653589793 |      4.1
(6 rows)

-- select abs with order by (explain)
--Testcase 26:
EXPLAIN VERBOSE
SELECT value1, abs(1-value1) FROM s3 ORDER BY abs(1-value1);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=4094.23..4111.29 rows=6826 width=16)
   Output: value1, (abs(('1'::double precision - value1)))
   Sort Key: (abs(('1'::double precision - s3.value1)))
   ->  Foreign Scan on public.s3  (cost=110.00..3659.52 rows=6826 width=16)
         Output: value1, (abs(('1'::double precision - value1)))
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT value1, abs((1::double precision - value1)) FROM public.s31sqlite
         Node: sqlite_svr / Status: Alive
           SQLite query: SELECT `value1`, abs((1 - `value1`)) FROM main."s32"
(9 rows)

-- select abs with order by (result)
--Testcase 27:
SELECT value1, abs(1-value1) FROM s3 ORDER BY abs(1-value1);
 value1 |         abs         
--------+---------------------
    1.1 | 0.10000000000000009
    0.3 |                 0.7
    0.2 |                 0.8
    0.1 |                 0.9
    2.2 |  1.2000000000000002
    3.3 |                 2.3
(6 rows)

-- select abs with order by index (result)
--Testcase 28:
SELECT value1, abs(1-value1) FROM s3 ORDER BY 2,1;
 value1 |         abs         
--------+---------------------
    1.1 | 0.10000000000000009
    0.3 |                 0.7
    0.2 |                 0.8
    0.1 |                 0.9
    2.2 |  1.2000000000000002
    3.3 |                 2.3
(6 rows)

-- select abs with order by index (result)
--Testcase 29:
SELECT value1, abs(1-value1) FROM s3 ORDER BY 1,2;
 value1 |         abs         
--------+---------------------
    0.1 |                 0.9
    0.2 |                 0.8
    0.3 |                 0.7
    1.1 | 0.10000000000000009
    2.2 |  1.2000000000000002
    3.3 |                 2.3
(6 rows)

-- select abs and as
--Testcase 30:
SELECT * FROM (
SELECT abs(value3) as abs1 FROM s3
) AS t ORDER BY 1;
 abs1 
------
  0.1
  0.2
  0.3
  1.1
  2.2
  3.3
(6 rows)

-- select abs with arithmetic and tag in the middle (explain)
--Testcase 31:
EXPLAIN VERBOSE
SELECT abs(value1) + 1, value2, tag1, sqrt(value2) FROM s3 ORDER BY 1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=4128.36..4145.42 rows=6826 width=52)
   Output: ((abs(value1) + '1'::double precision)), value2, tag1, (sqrt((value2)::double precision))
   Sort Key: ((abs(s3.value1) + '1'::double precision))
   ->  Foreign Scan on public.s3  (cost=110.00..3693.65 rows=6826 width=52)
         Output: (abs(value1) + '1'::double precision), value2, tag1, sqrt((value2)::double precision)
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value1, value2 FROM public.s31sqlite
         Node: sqlite_svr / Status: Alive
           SQLite query: SELECT `tag1`, `value1`, `value2` FROM main."s32"
(9 rows)

-- select abs with arithmetic and tag in the middle (result)
--Testcase 32:
SELECT * FROM (
SELECT abs(value1) + 1, value2, tag1, sqrt(value2) FROM s3
) AS t ORDER BY 1,2,3,4;
 ?column? | value2 | tag1 |        sqrt        
----------+--------+------+--------------------
      1.1 |    100 | a    |                 10
      1.2 |    100 | a    |                 10
      1.3 |    100 | a    |                 10
      2.1 |    200 | b    | 14.142135623730951
      3.2 |    200 | b    | 14.142135623730951
      4.3 |    200 | b    | 14.142135623730951
(6 rows)

-- select with order by limit (explain)
--Testcase 33:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value3), sqrt(value2) FROM s3 ORDER BY abs(value3);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort  (cost=4128.36..4145.42 rows=6826 width=24)
   Output: (abs(value1)), (abs(value3)), (sqrt((value2)::double precision))
   Sort Key: (abs(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3693.65 rows=6826 width=24)
         Output: abs(value1), abs(value3), sqrt((value2)::double precision)
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT value1, value2, value3 FROM public.s31sqlite
         Node: sqlite_svr / Status: Alive
           SQLite query: SELECT `value1`, `value2`, `value3` FROM main."s32"
(9 rows)

-- select with order by limit (explain)
--Testcase 34:
SELECT * FROM (
SELECT abs(value1), abs(value3), sqrt(value2) FROM s3 ORDER BY abs(value3)
) AS t ORDER BY 1,2,3;
 abs | abs |        sqrt        
-----+-----+--------------------
 0.1 | 0.1 |                 10
 0.2 | 0.2 |                 10
 0.3 | 0.3 |                 10
 1.1 | 1.1 | 14.142135623730951
 2.2 | 2.2 | 14.142135623730951
 3.3 | 3.3 | 14.142135623730951
(6 rows)

-- select mixing with non pushdown func (all not pushdown, explain)
--Testcase 35:
EXPLAIN VERBOSE
SELECT abs(value1), sqrt(value2), upper(tag1) FROM s3 ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=4128.36..4145.42 rows=6826 width=48)
   Output: (abs(value1)), (sqrt((value2)::double precision)), (upper(tag1))
   Sort Key: (abs(s3.value1))
   ->  Foreign Scan on public.s3  (cost=110.00..3693.65 rows=6826 width=48)
         Output: abs(value1), sqrt((value2)::double precision), upper(tag1)
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT tag1, value1, value2 FROM public.s31sqlite
         Node: sqlite_svr / Status: Alive
           SQLite query: SELECT `tag1`, `value1`, `value2` FROM main."s32"
(9 rows)

-- select mixing with non pushdown func (result)
--Testcase 36:
SELECT * FROM (
SELECT abs(value1), sqrt(value2), upper(tag1) FROM s3
) AS t ORDER BY 1,2,3;
 abs |        sqrt        | upper 
-----+--------------------+-------
 0.1 |                 10 | A
 0.2 |                 10 | A
 0.3 |                 10 | A
 1.1 | 14.142135623730951 | B
 2.2 | 14.142135623730951 | B
 3.3 | 14.142135623730951 | B
(6 rows)

-- sqlite pushdown supported functions (explain)
--Testcase 37:
EXPLAIN VERBOSE
SELECT abs(value3), length(tag1), ltrim(str2), ltrim(str1, '-'), replace(str1, 'XYZ', 'ABC'), round(value3), rtrim(str1, '-'), rtrim(str2), substr(str1, 4), substr(str1, 4, 3) FROM s3 ORDER BY 1;
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4230.75..4247.81 rows=6826 width=244)
   Output: (abs(value3)), (length(tag1)), (ltrim(str2)), (ltrim(str1, '-'::text)), (replace(str1, 'XYZ'::text, 'ABC'::text)), (round(value3)), (rtrim(str1, '-'::text)), (rtrim(str2)), (substr(str1, 4)), (substr(str1, 4, 3))
   Sort Key: (abs(s3.value3))
   ->  Foreign Scan on public.s3  (cost=110.00..3796.04 rows=6826 width=244)
         Output: (abs(value3)), (length(tag1)), (ltrim(str2)), (ltrim(str1, '-'::text)), (replace(str1, 'XYZ'::text, 'ABC'::text)), (round(value3)), (rtrim(str1, '-'::text)), (rtrim(str2)), (substr(str1, 4)), (substr(str1, 4, 3))
         Node: pgspider_svr / Status: Alive
           Remote SQL: SELECT abs(value3), length(tag1), ltrim(str2), ltrim(str1, '-'::text), replace(str1, 'XYZ'::text, 'ABC'::text), round(value3), rtrim(str1, '-'::text), rtrim(str2), substr(str1, 4), substr(str1, 4, 3) FROM public.s31sqlite
         Node: sqlite_svr / Status: Alive
           SQLite query: SELECT abs(`value3`), length(`tag1`), ltrim(`str2`), ltrim(`str1`, '-'), replace(`str1`, 'XYZ', 'ABC'), round(`value3`), rtrim(`str1`, '-'), rtrim(`str2`), substr(`str1`, 4), substr(`str1`, 4, 3) FROM main."s32"
(9 rows)

-- sqlite pushdown supported functions (result)
--Testcase 38:
SELECT * FROM (
SELECT abs(value3), length(tag1), ltrim(str2), ltrim(str1, '-'), replace(str1, 'XYZ', 'ABC'), round(value3), rtrim(str1, '-'), rtrim(str2), substr(str1, 4), substr(str1, 4, 3) FROM s3
) AS t ORDER BY 1,2,3,4,5,6,7,8,9,10;
 abs | length | ltrim  | ltrim  |  replace  | round | rtrim  | rtrim  | substr | substr 
-----+--------+--------+--------+-----------+-------+--------+--------+--------+--------
 0.1 |      1 | XYZ    | XYZ--- | ---ABC--- |     0 | ---XYZ |    XYZ | XYZ--- | XYZ
 0.2 |      1 | XYZ    | XYZ--- | ---ABC--- |     0 | ---XYZ |    XYZ | XYZ--- | XYZ
 0.3 |      1 | XYZ    | XYZ--- | ---ABC--- |     0 | ---XYZ |    XYZ | XYZ--- | XYZ
 1.1 |      1 | XYZ    | XYZ--- | ---ABC--- |    -1 | ---XYZ |    XYZ | XYZ--- | XYZ
 2.2 |      1 | XYZ    | XYZ--- | ---ABC--- |    -2 | ---XYZ |    XYZ | XYZ--- | XYZ
 3.3 |      1 | XYZ    | XYZ--- | ---ABC--- |    -3 | ---XYZ |    XYZ | XYZ--- | XYZ
(6 rows)

--Drop all foreign tables
--Testcase 39:
DROP FOREIGN TABLE s3__sqlite_svr__0;
--Testcase 40:
DROP SERVER sqlite_svr;
--Testcase 41:
DROP EXTENSION sqlite_fdw;
--Testcase 42:
DROP FOREIGN TABLE s3__pgspider_svr__0;
--Testcase 43:
DROP USER MAPPING FOR CURRENT_USER SERVER pgspider_svr;
--Testcase 44:
DROP SERVER pgspider_svr;
--Testcase 45:
DROP EXTENSION pgspider_fdw;
--Testcase 46:
DROP FOREIGN TABLE s3;
--Testcase 47:
DROP USER MAPPING FOR CURRENT_USER SERVER pgspider_core_svr;
--Testcase 48:
DROP SERVER pgspider_core_svr;
--Testcase 49:
DROP EXTENSION pgspider_core_fdw;
